// Generated by Haxe 3.4.0
#ifndef INCLUDED_Player
#define INCLUDED_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
HX_DECLARE_CLASS0(InputController)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS1(characters,Character)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,IFlxBasic)
HX_DECLARE_CLASS1(flixel,IFlxSprite)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeSprite)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUI)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIGroup)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIWidget)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(ui,InGameUI)



class HXCPP_CLASS_ATTRIBUTES Player_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		enum { _hx_ClassId = 0x6c4d5f81 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Player")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Player"); }
		static hx::ObjectPtr< Player_obj > __new();
		static hx::ObjectPtr< Player_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c"); }

		 ::InputController _playerIC;
		 ::InputController _characterIC;
		 ::InputController _menuIC;
		 ::characters::Character character;
		 ::ui::InGameUI UI;
		void initUI();
		::Dynamic initUI_dyn();

		void openSubState(::String key);
		::Dynamic openSubState_dyn();

		void setCharacter( ::characters::Character a_character);
		::Dynamic setCharacter_dyn();

		void initControls();
		::Dynamic initControls_dyn();

		void updateControls();
		::Dynamic updateControls_dyn();

		void update(Float elapsed);
		::Dynamic update_dyn();

		void getEvent(::String event,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params);
		::Dynamic getEvent_dyn();

		 ::Dynamic getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params);
		::Dynamic getRequest_dyn();

};


#endif /* INCLUDED_Player */ 
