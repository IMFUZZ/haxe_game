// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_util_Debug
#define INCLUDED_nape_util_Debug

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,AABB)
HX_DECLARE_CLASS2(nape,geom,Mat23)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,util,Debug)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,Shape)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)
HX_DECLARE_CLASS2(zpp_nape,util,ZPP_Debug)

namespace nape{
namespace util{


class HXCPP_CLASS_ATTRIBUTES Debug_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Debug_obj OBJ_;
		Debug_obj();

	public:
		enum { _hx_ClassId = 0x22050309 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.util.Debug")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.util.Debug"); }
		static hx::ObjectPtr< Debug_obj > __new();
		static hx::ObjectPtr< Debug_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Debug_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Debug","\x33","\xc2","\x4c","\x6a"); }

		static ::String version();
		static ::Dynamic version_dyn();

		static void clearObjectPools();
		static ::Dynamic clearObjectPools_dyn();

		static  ::openfl::_legacy::display::Shape createGraphic( ::nape::phys::Body body);
		static ::Dynamic createGraphic_dyn();

		 ::zpp_nape::util::ZPP_Debug zpp_inner;
		bool drawCollisionArbiters;
		bool drawFluidArbiters;
		bool drawSensorArbiters;
		bool drawBodies;
		bool drawBodyDetail;
		bool drawShapeDetail;
		bool drawShapeAngleIndicators;
		bool drawConstraints;
		int get_bgColour();
		::Dynamic get_bgColour_dyn();

		int set_bgColour(int bgColour);
		::Dynamic set_bgColour_dyn();

		 ::Dynamic colour;
		Dynamic colour_dyn() { return colour;}
		 ::openfl::_legacy::display::DisplayObject get_display();
		::Dynamic get_display_dyn();

		bool cullingEnabled;
		 ::nape::geom::Mat23 get_transform();
		::Dynamic get_transform_dyn();

		 ::nape::geom::Mat23 set_transform( ::nape::geom::Mat23 transform);
		::Dynamic set_transform_dyn();

		virtual void clear();
		::Dynamic clear_dyn();

		void flush();
		::Dynamic flush_dyn();

		virtual void draw( ::Dynamic object);
		::Dynamic draw_dyn();

		virtual void drawLine( ::nape::geom::Vec2 start, ::nape::geom::Vec2 end,int colour);
		::Dynamic drawLine_dyn();

		virtual void drawCurve( ::nape::geom::Vec2 start, ::nape::geom::Vec2 control, ::nape::geom::Vec2 end,int colour);
		::Dynamic drawCurve_dyn();

		virtual void drawCircle( ::nape::geom::Vec2 position,Float radius,int colour);
		::Dynamic drawCircle_dyn();

		virtual void drawAABB( ::nape::geom::AABB aabb,int colour);
		::Dynamic drawAABB_dyn();

		virtual void drawFilledTriangle( ::nape::geom::Vec2 p0, ::nape::geom::Vec2 p1, ::nape::geom::Vec2 p2,int colour);
		::Dynamic drawFilledTriangle_dyn();

		virtual void drawFilledCircle( ::nape::geom::Vec2 position,Float radius,int colour);
		::Dynamic drawFilledCircle_dyn();

		virtual void drawPolygon( ::Dynamic polygon,int colour);
		::Dynamic drawPolygon_dyn();

		virtual void drawFilledPolygon( ::Dynamic polygon,int colour);
		::Dynamic drawFilledPolygon_dyn();

		virtual void drawSpring( ::nape::geom::Vec2 start, ::nape::geom::Vec2 end,int colour,hx::Null< int >  coils,hx::Null< Float >  radius);
		::Dynamic drawSpring_dyn();

};

} // end namespace nape
} // end namespace util

#endif /* INCLUDED_nape_util_Debug */ 
