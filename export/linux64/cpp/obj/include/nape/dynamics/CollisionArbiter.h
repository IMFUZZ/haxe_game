// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_dynamics_CollisionArbiter
#define INCLUDED_nape_dynamics_CollisionArbiter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_dynamics_Arbiter
#include <nape/dynamics/Arbiter.h>
#endif
HX_DECLARE_CLASS2(nape,dynamics,Arbiter)
HX_DECLARE_CLASS2(nape,dynamics,CollisionArbiter)
HX_DECLARE_CLASS2(nape,dynamics,ContactList)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,geom,Vec3)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,shape,Edge)

namespace nape{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES CollisionArbiter_obj : public  ::nape::dynamics::Arbiter_obj
{
	public:
		typedef  ::nape::dynamics::Arbiter_obj super;
		typedef CollisionArbiter_obj OBJ_;
		CollisionArbiter_obj();

	public:
		enum { _hx_ClassId = 0x7dbe69fb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.dynamics.CollisionArbiter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.dynamics.CollisionArbiter"); }
		static hx::ObjectPtr< CollisionArbiter_obj > __new();
		static hx::ObjectPtr< CollisionArbiter_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CollisionArbiter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CollisionArbiter","\xb7","\xed","\x02","\xe4"); }

		 ::nape::dynamics::ContactList get_contacts();
		::Dynamic get_contacts_dyn();

		 ::nape::geom::Vec2 get_normal();
		::Dynamic get_normal_dyn();

		Float get_radius();
		::Dynamic get_radius_dyn();

		 ::nape::shape::Edge get_referenceEdge1();
		::Dynamic get_referenceEdge1_dyn();

		 ::nape::shape::Edge get_referenceEdge2();
		::Dynamic get_referenceEdge2_dyn();

		bool firstVertex();
		::Dynamic firstVertex_dyn();

		bool secondVertex();
		::Dynamic secondVertex_dyn();

		 ::nape::geom::Vec3 normalImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic normalImpulse_dyn();

		 ::nape::geom::Vec3 tangentImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic tangentImpulse_dyn();

		 ::nape::geom::Vec3 totalImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);

		Float rollingImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic rollingImpulse_dyn();

		Float get_elasticity();
		::Dynamic get_elasticity_dyn();

		Float set_elasticity(Float elasticity);
		::Dynamic set_elasticity_dyn();

		Float get_dynamicFriction();
		::Dynamic get_dynamicFriction_dyn();

		Float set_dynamicFriction(Float dynamicFriction);
		::Dynamic set_dynamicFriction_dyn();

		Float get_staticFriction();
		::Dynamic get_staticFriction_dyn();

		Float set_staticFriction(Float staticFriction);
		::Dynamic set_staticFriction_dyn();

		Float get_rollingFriction();
		::Dynamic get_rollingFriction_dyn();

		Float set_rollingFriction(Float rollingFriction);
		::Dynamic set_rollingFriction_dyn();

};

} // end namespace nape
} // end namespace dynamics

#endif /* INCLUDED_nape_dynamics_CollisionArbiter */ 
