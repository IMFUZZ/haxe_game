// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_callbacks_BodyListener
#define INCLUDED_nape_callbacks_BodyListener

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
HX_DECLARE_CLASS2(nape,callbacks,BodyCallback)
HX_DECLARE_CLASS2(nape,callbacks,BodyListener)
HX_DECLARE_CLASS2(nape,callbacks,Callback)
HX_DECLARE_CLASS2(nape,callbacks,CbEvent)
HX_DECLARE_CLASS2(nape,callbacks,Listener)
HX_DECLARE_CLASS2(nape,callbacks,OptionType)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_BodyListener)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_Listener)

namespace nape{
namespace callbacks{


class HXCPP_CLASS_ATTRIBUTES BodyListener_obj : public  ::nape::callbacks::Listener_obj
{
	public:
		typedef  ::nape::callbacks::Listener_obj super;
		typedef BodyListener_obj OBJ_;
		BodyListener_obj();

	public:
		enum { _hx_ClassId = 0x631bbafc };

		void __construct( ::nape::callbacks::CbEvent event, ::Dynamic options, ::Dynamic handler,hx::Null< int >  __o_precedence);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.callbacks.BodyListener")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.callbacks.BodyListener"); }
		static hx::ObjectPtr< BodyListener_obj > __new( ::nape::callbacks::CbEvent event, ::Dynamic options, ::Dynamic handler,hx::Null< int >  __o_precedence);
		static hx::ObjectPtr< BodyListener_obj > __alloc(hx::Ctx *_hx_ctx, ::nape::callbacks::CbEvent event, ::Dynamic options, ::Dynamic handler,hx::Null< int >  __o_precedence);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BodyListener_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BodyListener","\x56","\xf5","\xdf","\xb6"); }

		 ::zpp_nape::callbacks::ZPP_BodyListener zpp_inner_zn;
		 ::nape::callbacks::OptionType get_options();
		::Dynamic get_options_dyn();

		 ::nape::callbacks::OptionType set_options( ::nape::callbacks::OptionType options);
		::Dynamic set_options_dyn();

		 ::Dynamic get_handler();
		::Dynamic get_handler_dyn();

		 ::Dynamic set_handler( ::Dynamic handler);
		::Dynamic set_handler_dyn();

};

} // end namespace nape
} // end namespace callbacks

#endif /* INCLUDED_nape_callbacks_BodyListener */ 
