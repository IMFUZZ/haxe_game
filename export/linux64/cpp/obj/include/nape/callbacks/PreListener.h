// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_callbacks_PreListener
#define INCLUDED_nape_callbacks_PreListener

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
HX_DECLARE_CLASS2(nape,callbacks,Callback)
HX_DECLARE_CLASS2(nape,callbacks,InteractionType)
HX_DECLARE_CLASS2(nape,callbacks,Listener)
HX_DECLARE_CLASS2(nape,callbacks,OptionType)
HX_DECLARE_CLASS2(nape,callbacks,PreCallback)
HX_DECLARE_CLASS2(nape,callbacks,PreFlag)
HX_DECLARE_CLASS2(nape,callbacks,PreListener)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_InteractionListener)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_Listener)

namespace nape{
namespace callbacks{


class HXCPP_CLASS_ATTRIBUTES PreListener_obj : public  ::nape::callbacks::Listener_obj
{
	public:
		typedef  ::nape::callbacks::Listener_obj super;
		typedef PreListener_obj OBJ_;
		PreListener_obj();

	public:
		enum { _hx_ClassId = 0x72dc40b1 };

		void __construct( ::nape::callbacks::InteractionType interactionType, ::Dynamic options1, ::Dynamic options2, ::Dynamic handler,hx::Null< int >  __o_precedence,hx::Null< bool >  __o_pure);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.callbacks.PreListener")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.callbacks.PreListener"); }
		static hx::ObjectPtr< PreListener_obj > __new( ::nape::callbacks::InteractionType interactionType, ::Dynamic options1, ::Dynamic options2, ::Dynamic handler,hx::Null< int >  __o_precedence,hx::Null< bool >  __o_pure);
		static hx::ObjectPtr< PreListener_obj > __alloc(hx::Ctx *_hx_ctx, ::nape::callbacks::InteractionType interactionType, ::Dynamic options1, ::Dynamic options2, ::Dynamic handler,hx::Null< int >  __o_precedence,hx::Null< bool >  __o_pure);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PreListener_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PreListener","\x97","\x0f","\xcd","\x31"); }

		 ::zpp_nape::callbacks::ZPP_InteractionListener zpp_inner_zn;
		 ::nape::callbacks::OptionType get_options1();
		::Dynamic get_options1_dyn();

		 ::nape::callbacks::OptionType set_options1( ::nape::callbacks::OptionType options1);
		::Dynamic set_options1_dyn();

		 ::nape::callbacks::OptionType get_options2();
		::Dynamic get_options2_dyn();

		 ::nape::callbacks::OptionType set_options2( ::nape::callbacks::OptionType options2);
		::Dynamic set_options2_dyn();

		 ::Dynamic get_handler();
		::Dynamic get_handler_dyn();

		 ::Dynamic set_handler( ::Dynamic handler);
		::Dynamic set_handler_dyn();

		bool get_pure();
		::Dynamic get_pure_dyn();

		bool set_pure(bool pure);
		::Dynamic set_pure_dyn();

		 ::nape::callbacks::InteractionType get_interactionType();
		::Dynamic get_interactionType_dyn();

		 ::nape::callbacks::InteractionType set_interactionType( ::nape::callbacks::InteractionType interactionType);
		::Dynamic set_interactionType_dyn();

};

} // end namespace nape
} // end namespace callbacks

#endif /* INCLUDED_nape_callbacks_PreListener */ 
