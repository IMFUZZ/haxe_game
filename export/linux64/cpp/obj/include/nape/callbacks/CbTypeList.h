// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_callbacks_CbTypeList
#define INCLUDED_nape_callbacks_CbTypeList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,callbacks,CbType)
HX_DECLARE_CLASS2(nape,callbacks,CbTypeIterator)
HX_DECLARE_CLASS2(nape,callbacks,CbTypeList)
HX_DECLARE_CLASS2(zpp_nape,util,ZPP_CbTypeList)

namespace nape{
namespace callbacks{


class HXCPP_CLASS_ATTRIBUTES CbTypeList_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CbTypeList_obj OBJ_;
		CbTypeList_obj();

	public:
		enum { _hx_ClassId = 0x23502859 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.callbacks.CbTypeList")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.callbacks.CbTypeList"); }
		static hx::ObjectPtr< CbTypeList_obj > __new();
		static hx::ObjectPtr< CbTypeList_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CbTypeList_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CbTypeList","\x17","\x6e","\x17","\xa2"); }

		static  ::nape::callbacks::CbTypeList fromArray(::Array< ::Dynamic> array);
		static ::Dynamic fromArray_dyn();

		 ::zpp_nape::util::ZPP_CbTypeList zpp_inner;
		int get_length();
		::Dynamic get_length_dyn();

		bool has( ::nape::callbacks::CbType obj);
		::Dynamic has_dyn();

		 ::nape::callbacks::CbType at(int index);
		::Dynamic at_dyn();

		bool push( ::nape::callbacks::CbType obj);
		::Dynamic push_dyn();

		bool unshift( ::nape::callbacks::CbType obj);
		::Dynamic unshift_dyn();

		 ::nape::callbacks::CbType pop();
		::Dynamic pop_dyn();

		 ::nape::callbacks::CbType shift();
		::Dynamic shift_dyn();

		bool add( ::nape::callbacks::CbType obj);
		::Dynamic add_dyn();

		bool remove( ::nape::callbacks::CbType obj);
		::Dynamic remove_dyn();

		void clear();
		::Dynamic clear_dyn();

		bool empty();
		::Dynamic empty_dyn();

		 ::nape::callbacks::CbTypeIterator iterator();
		::Dynamic iterator_dyn();

		 ::nape::callbacks::CbTypeList copy(hx::Null< bool >  deep);
		::Dynamic copy_dyn();

		void merge( ::nape::callbacks::CbTypeList xs);
		::Dynamic merge_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::nape::callbacks::CbTypeList foreach( ::Dynamic lambda);
		::Dynamic foreach_dyn();

		 ::nape::callbacks::CbTypeList filter( ::Dynamic lambda);
		::Dynamic filter_dyn();

};

} // end namespace nape
} // end namespace callbacks

#endif /* INCLUDED_nape_callbacks_CbTypeList */ 
