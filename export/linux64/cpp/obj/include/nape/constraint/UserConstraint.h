// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_constraint_UserConstraint
#define INCLUDED_nape_constraint_UserConstraint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
HX_DECLARE_CLASS2(nape,constraint,Constraint)
HX_DECLARE_CLASS2(nape,constraint,UserConstraint)
HX_DECLARE_CLASS2(nape,geom,MatMN)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,geom,Vec3)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,util,Debug)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_Constraint)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_UserConstraint)

namespace nape{
namespace constraint{


class HXCPP_CLASS_ATTRIBUTES UserConstraint_obj : public  ::nape::constraint::Constraint_obj
{
	public:
		typedef  ::nape::constraint::Constraint_obj super;
		typedef UserConstraint_obj OBJ_;
		UserConstraint_obj();

	public:
		enum { _hx_ClassId = 0x5909076d };

		void __construct(int dimensions,hx::Null< bool >  __o_velocityOnly);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.constraint.UserConstraint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.constraint.UserConstraint"); }
		static hx::ObjectPtr< UserConstraint_obj > __new(int dimensions,hx::Null< bool >  __o_velocityOnly);
		static hx::ObjectPtr< UserConstraint_obj > __alloc(hx::Ctx *_hx_ctx,int dimensions,hx::Null< bool >  __o_velocityOnly);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~UserConstraint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("UserConstraint","\xa8","\x16","\x14","\x9e"); }

		 ::zpp_nape::constraint::ZPP_UserConstraint zpp_inner_zn;
		 ::nape::geom::Vec2 _hx___bindVec2();
		::Dynamic _hx___bindVec2_dyn();

		virtual  ::nape::constraint::UserConstraint __copy();
		::Dynamic __copy_dyn();

		void _hx___broken();
		::Dynamic _hx___broken_dyn();

		void _hx___validate();
		::Dynamic _hx___validate_dyn();

		void _hx___draw( ::nape::util::Debug debug);
		::Dynamic _hx___draw_dyn();

		void _hx___prepare();
		::Dynamic _hx___prepare_dyn();

		void _hx___position(::Array< Float > err);
		::Dynamic _hx___position_dyn();

		void _hx___velocity(::Array< Float > err);
		::Dynamic _hx___velocity_dyn();

		void _hx___eff_mass(::Array< Float > eff);
		::Dynamic _hx___eff_mass_dyn();

		void _hx___clamp(::Array< Float > jAcc);
		::Dynamic _hx___clamp_dyn();

		void _hx___impulse(::Array< Float > imp, ::nape::phys::Body body, ::nape::geom::Vec3 out);
		::Dynamic _hx___impulse_dyn();

		 ::nape::geom::MatMN impulse();

		 ::nape::geom::Vec3 bodyImpulse( ::nape::phys::Body body);

		void visitBodies( ::Dynamic lambda);

		void _hx___invalidate();
		::Dynamic _hx___invalidate_dyn();

		 ::nape::phys::Body _hx___registerBody( ::nape::phys::Body oldBody, ::nape::phys::Body newBody);
		::Dynamic _hx___registerBody_dyn();

};

} // end namespace nape
} // end namespace constraint

#endif /* INCLUDED_nape_constraint_UserConstraint */ 
