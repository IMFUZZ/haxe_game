// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_constraint_PivotJoint
#define INCLUDED_nape_constraint_PivotJoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
HX_DECLARE_CLASS2(nape,constraint,Constraint)
HX_DECLARE_CLASS2(nape,constraint,PivotJoint)
HX_DECLARE_CLASS2(nape,geom,MatMN)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,geom,Vec3)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_Constraint)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_PivotJoint)

namespace nape{
namespace constraint{


class HXCPP_CLASS_ATTRIBUTES PivotJoint_obj : public  ::nape::constraint::Constraint_obj
{
	public:
		typedef  ::nape::constraint::Constraint_obj super;
		typedef PivotJoint_obj OBJ_;
		PivotJoint_obj();

	public:
		enum { _hx_ClassId = 0x46dc2a55 };

		void __construct( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.constraint.PivotJoint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.constraint.PivotJoint"); }
		static hx::ObjectPtr< PivotJoint_obj > __new( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2);
		static hx::ObjectPtr< PivotJoint_obj > __alloc(hx::Ctx *_hx_ctx, ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PivotJoint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PivotJoint","\x48","\x23","\x14","\x48"); }

		 ::zpp_nape::constraint::ZPP_PivotJoint zpp_inner_zn;
		 ::nape::phys::Body get_body1();
		::Dynamic get_body1_dyn();

		 ::nape::phys::Body set_body1( ::nape::phys::Body body1);
		::Dynamic set_body1_dyn();

		 ::nape::phys::Body get_body2();
		::Dynamic get_body2_dyn();

		 ::nape::phys::Body set_body2( ::nape::phys::Body body2);
		::Dynamic set_body2_dyn();

		 ::nape::geom::Vec2 get_anchor1();
		::Dynamic get_anchor1_dyn();

		 ::nape::geom::Vec2 set_anchor1( ::nape::geom::Vec2 anchor1);
		::Dynamic set_anchor1_dyn();

		 ::nape::geom::Vec2 get_anchor2();
		::Dynamic get_anchor2_dyn();

		 ::nape::geom::Vec2 set_anchor2( ::nape::geom::Vec2 anchor2);
		::Dynamic set_anchor2_dyn();

		 ::nape::geom::MatMN impulse();

		 ::nape::geom::Vec3 bodyImpulse( ::nape::phys::Body body);

		void visitBodies( ::Dynamic lambda);

};

} // end namespace nape
} // end namespace constraint

#endif /* INCLUDED_nape_constraint_PivotJoint */ 
