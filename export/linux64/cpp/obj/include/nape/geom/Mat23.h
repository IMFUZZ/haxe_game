// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_geom_Mat23
#define INCLUDED_nape_geom_Mat23

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,Mat23)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS3(openfl,_legacy,geom,Matrix)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Mat23)

namespace nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Mat23_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Mat23_obj OBJ_;
		Mat23_obj();

	public:
		enum { _hx_ClassId = 0x285cd39d };

		void __construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.geom.Mat23")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.geom.Mat23"); }
		static hx::ObjectPtr< Mat23_obj > __new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty);
		static hx::ObjectPtr< Mat23_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mat23_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Mat23","\x41","\x8e","\x50","\x96"); }

		static  ::nape::geom::Mat23 fromMatrix( ::openfl::_legacy::geom::Matrix matrix);
		static ::Dynamic fromMatrix_dyn();

		static  ::nape::geom::Mat23 rotation(Float angle);
		static ::Dynamic rotation_dyn();

		static  ::nape::geom::Mat23 translation(Float tx,Float ty);
		static ::Dynamic translation_dyn();

		static  ::nape::geom::Mat23 scale(Float sx,Float sy);
		static ::Dynamic scale_dyn();

		 ::zpp_nape::geom::ZPP_Mat23 zpp_inner;
		Float get_a();
		::Dynamic get_a_dyn();

		Float set_a(Float a);
		::Dynamic set_a_dyn();

		Float get_b();
		::Dynamic get_b_dyn();

		Float set_b(Float b);
		::Dynamic set_b_dyn();

		Float get_c();
		::Dynamic get_c_dyn();

		Float set_c(Float c);
		::Dynamic set_c_dyn();

		Float get_d();
		::Dynamic get_d_dyn();

		Float set_d(Float d);
		::Dynamic set_d_dyn();

		Float get_tx();
		::Dynamic get_tx_dyn();

		Float set_tx(Float tx);
		::Dynamic set_tx_dyn();

		Float get_ty();
		::Dynamic get_ty_dyn();

		Float set_ty(Float ty);
		::Dynamic set_ty_dyn();

		 ::nape::geom::Mat23 copy();
		::Dynamic copy_dyn();

		 ::nape::geom::Mat23 set( ::nape::geom::Mat23 matrix);
		::Dynamic set_dyn();

		 ::nape::geom::Mat23 setAs(hx::Null< Float >  a,hx::Null< Float >  b,hx::Null< Float >  c,hx::Null< Float >  d,hx::Null< Float >  tx,hx::Null< Float >  ty);
		::Dynamic setAs_dyn();

		 ::nape::geom::Mat23 reset();
		::Dynamic reset_dyn();

		 ::openfl::_legacy::geom::Matrix toMatrix( ::openfl::_legacy::geom::Matrix output);
		::Dynamic toMatrix_dyn();

		Float get_determinant();
		::Dynamic get_determinant_dyn();

		bool singular();
		::Dynamic singular_dyn();

		 ::nape::geom::Mat23 inverse();
		::Dynamic inverse_dyn();

		 ::nape::geom::Mat23 transpose();
		::Dynamic transpose_dyn();

		 ::nape::geom::Mat23 concat( ::nape::geom::Mat23 matrix);
		::Dynamic concat_dyn();

		 ::nape::geom::Vec2 transform( ::nape::geom::Vec2 point,hx::Null< bool >  noTranslation,hx::Null< bool >  weak);
		::Dynamic transform_dyn();

		 ::nape::geom::Vec2 inverseTransform( ::nape::geom::Vec2 point,hx::Null< bool >  noTranslation,hx::Null< bool >  weak);
		::Dynamic inverseTransform_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		bool equiorthogonal();
		::Dynamic equiorthogonal_dyn();

		bool orthogonal();
		::Dynamic orthogonal_dyn();

		 ::nape::geom::Mat23 equiorthogonalise();
		::Dynamic equiorthogonalise_dyn();

		 ::nape::geom::Mat23 orthogonalise();
		::Dynamic orthogonalise_dyn();

};

} // end namespace nape
} // end namespace geom

#endif /* INCLUDED_nape_geom_Mat23 */ 
