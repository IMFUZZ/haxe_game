// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_Config
#define INCLUDED_nape_Config

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_1cc65b763db1b828_9_new)
HX_DECLARE_CLASS1(nape,Config)

namespace nape{


class HXCPP_CLASS_ATTRIBUTES Config_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Config_obj OBJ_;
		Config_obj();

	public:
		enum { _hx_ClassId = 0x0b3d30ee };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nape.Config")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"nape.Config"); }

		hx::ObjectPtr< Config_obj > __new() {
			hx::ObjectPtr< Config_obj > __this = new Config_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Config_obj > __alloc(hx::Ctx *_hx_ctx) {
			Config_obj *__this = (Config_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Config_obj), false, "nape.Config"));
			*(void **)__this = Config_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_1cc65b763db1b828_9_new)
            	HX_STACK_THIS(__this)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Config_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Config","\xe2","\xca","\x66","\xfc"); }

		static void __boot();
		static Float epsilon;
		static Float fluidAngularDragFriction;
		static Float fluidAngularDrag;
		static Float fluidVacuumDrag;
		static Float fluidLinearDrag;
		static Float collisionSlop;
		static Float collisionSlopCCD;
		static Float distanceThresholdCCD;
		static Float staticCCDLinearThreshold;
		static Float staticCCDAngularThreshold;
		static Float bulletCCDLinearThreshold;
		static Float bulletCCDAngularThreshold;
		static Float dynamicSweepLinearThreshold;
		static Float dynamicSweepAngularThreshold;
		static Float angularCCDSlipScale;
		static int arbiterExpirationDelay;
		static Float staticFrictionThreshold;
		static Float elasticThreshold;
		static int sleepDelay;
		static Float linearSleepThreshold;
		static Float angularSleepThreshold;
		static Float contactBiasCoef;
		static Float contactStaticBiasCoef;
		static Float contactContinuousBiasCoef;
		static Float contactContinuousStaticBiasCoef;
		static Float constraintLinearSlop;
		static Float constraintAngularSlop;
		static Float illConditionedThreshold;
};

} // end namespace nape

#endif /* INCLUDED_nape_Config */ 
