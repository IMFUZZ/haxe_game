// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_shape_Circle
#define INCLUDED_nape_shape_Circle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
HX_DECLARE_CLASS2(nape,dynamics,InteractionFilter)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,phys,Material)
HX_DECLARE_CLASS2(nape,shape,Circle)
HX_DECLARE_CLASS2(nape,shape,Shape)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Circle)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Shape)

namespace nape{
namespace shape{


class HXCPP_CLASS_ATTRIBUTES Circle_obj : public  ::nape::shape::Shape_obj
{
	public:
		typedef  ::nape::shape::Shape_obj super;
		typedef Circle_obj OBJ_;
		Circle_obj();

	public:
		enum { _hx_ClassId = 0x05b27a69 };

		void __construct(Float radius, ::nape::geom::Vec2 localCOM, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.shape.Circle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.shape.Circle"); }
		static hx::ObjectPtr< Circle_obj > __new(Float radius, ::nape::geom::Vec2 localCOM, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter);
		static hx::ObjectPtr< Circle_obj > __alloc(hx::Ctx *_hx_ctx,Float radius, ::nape::geom::Vec2 localCOM, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Circle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Circle","\x30","\xe6","\xa1","\x8a"); }

		 ::zpp_nape::shape::ZPP_Circle zpp_inner_zn;
		Float get_radius();
		::Dynamic get_radius_dyn();

		Float set_radius(Float radius);
		::Dynamic set_radius_dyn();

};

} // end namespace nape
} // end namespace shape

#endif /* INCLUDED_nape_shape_Circle */ 
