// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_shape_Edge
#define INCLUDED_nape_shape_Edge

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,shape,Edge)
HX_DECLARE_CLASS2(nape,shape,Polygon)
HX_DECLARE_CLASS2(nape,shape,Shape)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Edge)

namespace nape{
namespace shape{


class HXCPP_CLASS_ATTRIBUTES Edge_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Edge_obj OBJ_;
		Edge_obj();

	public:
		enum { _hx_ClassId = 0x1c18c5aa };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.shape.Edge")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.shape.Edge"); }
		static hx::ObjectPtr< Edge_obj > __new();
		static hx::ObjectPtr< Edge_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Edge_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Edge","\x5d","\xf4","\xe7","\x2d"); }

		 ::zpp_nape::shape::ZPP_Edge zpp_inner;
		 ::nape::shape::Polygon get_polygon();
		::Dynamic get_polygon_dyn();

		 ::nape::geom::Vec2 get_localNormal();
		::Dynamic get_localNormal_dyn();

		 ::nape::geom::Vec2 get_worldNormal();
		::Dynamic get_worldNormal_dyn();

		Float get_length();
		::Dynamic get_length_dyn();

		Float get_localProjection();
		::Dynamic get_localProjection_dyn();

		Float get_worldProjection();
		::Dynamic get_worldProjection_dyn();

		 ::nape::geom::Vec2 get_localVertex1();
		::Dynamic get_localVertex1_dyn();

		 ::nape::geom::Vec2 get_localVertex2();
		::Dynamic get_localVertex2_dyn();

		 ::nape::geom::Vec2 get_worldVertex1();
		::Dynamic get_worldVertex1_dyn();

		 ::nape::geom::Vec2 get_worldVertex2();
		::Dynamic get_worldVertex2_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace nape
} // end namespace shape

#endif /* INCLUDED_nape_shape_Edge */ 
