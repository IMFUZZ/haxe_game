// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_phys_Compound
#define INCLUDED_nape_phys_Compound

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
HX_DECLARE_CLASS2(nape,constraint,Constraint)
HX_DECLARE_CLASS2(nape,constraint,ConstraintList)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,BodyList)
HX_DECLARE_CLASS2(nape,phys,Compound)
HX_DECLARE_CLASS2(nape,phys,CompoundList)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,space,Space)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Compound)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)

namespace nape{
namespace phys{


class HXCPP_CLASS_ATTRIBUTES Compound_obj : public  ::nape::phys::Interactor_obj
{
	public:
		typedef  ::nape::phys::Interactor_obj super;
		typedef Compound_obj OBJ_;
		Compound_obj();

	public:
		enum { _hx_ClassId = 0x187c38a9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.phys.Compound")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.phys.Compound"); }
		static hx::ObjectPtr< Compound_obj > __new();
		static hx::ObjectPtr< Compound_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Compound_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Compound","\x8b","\x7f","\x81","\x5b"); }

		 ::zpp_nape::phys::ZPP_Compound zpp_inner;
		 ::nape::phys::BodyList get_bodies();
		::Dynamic get_bodies_dyn();

		 ::nape::constraint::ConstraintList get_constraints();
		::Dynamic get_constraints_dyn();

		 ::nape::phys::CompoundList get_compounds();
		::Dynamic get_compounds_dyn();

		 ::nape::phys::Compound get_compound();
		::Dynamic get_compound_dyn();

		 ::nape::phys::Compound set_compound( ::nape::phys::Compound compound);
		::Dynamic set_compound_dyn();

		 ::nape::space::Space get_space();
		::Dynamic get_space_dyn();

		 ::nape::space::Space set_space( ::nape::space::Space space);
		::Dynamic set_space_dyn();

		virtual ::String toString();

		 ::nape::phys::Compound copy();
		::Dynamic copy_dyn();

		void breakApart();
		::Dynamic breakApart_dyn();

		void visitBodies( ::Dynamic lambda);
		::Dynamic visitBodies_dyn();

		void visitConstraints( ::Dynamic lambda);
		::Dynamic visitConstraints_dyn();

		void visitCompounds( ::Dynamic lambda);
		::Dynamic visitCompounds_dyn();

		 ::nape::geom::Vec2 COM(hx::Null< bool >  weak);
		::Dynamic COM_dyn();

		 ::nape::phys::Compound translate( ::nape::geom::Vec2 translation);
		::Dynamic translate_dyn();

		 ::nape::phys::Compound rotate( ::nape::geom::Vec2 centre,Float angle);
		::Dynamic rotate_dyn();

};

} // end namespace nape
} // end namespace phys

#endif /* INCLUDED_nape_phys_Compound */ 
