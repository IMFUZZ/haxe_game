// Generated by Haxe 3.4.0
#ifndef INCLUDED_nape_phys_Body
#define INCLUDED_nape_phys_Body

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
HX_DECLARE_CLASS2(nape,callbacks,InteractionType)
HX_DECLARE_CLASS2(nape,constraint,ConstraintList)
HX_DECLARE_CLASS2(nape,dynamics,ArbiterList)
HX_DECLARE_CLASS2(nape,dynamics,InteractionFilter)
HX_DECLARE_CLASS2(nape,geom,AABB)
HX_DECLARE_CLASS2(nape,geom,Mat23)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,geom,Vec3)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,BodyList)
HX_DECLARE_CLASS2(nape,phys,BodyType)
HX_DECLARE_CLASS2(nape,phys,Compound)
HX_DECLARE_CLASS2(nape,phys,FluidProperties)
HX_DECLARE_CLASS2(nape,phys,GravMassMode)
HX_DECLARE_CLASS2(nape,phys,InertiaMode)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,phys,MassMode)
HX_DECLARE_CLASS2(nape,phys,Material)
HX_DECLARE_CLASS2(nape,shape,ShapeList)
HX_DECLARE_CLASS2(nape,space,Space)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Body)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)

namespace nape{
namespace phys{


class HXCPP_CLASS_ATTRIBUTES Body_obj : public  ::nape::phys::Interactor_obj
{
	public:
		typedef  ::nape::phys::Interactor_obj super;
		typedef Body_obj OBJ_;
		Body_obj();

	public:
		enum { _hx_ClassId = 0x1e1af07c };

		void __construct( ::nape::phys::BodyType type, ::nape::geom::Vec2 position);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nape.phys.Body")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"nape.phys.Body"); }
		static hx::ObjectPtr< Body_obj > __new( ::nape::phys::BodyType type, ::nape::geom::Vec2 position);
		static hx::ObjectPtr< Body_obj > __alloc(hx::Ctx *_hx_ctx, ::nape::phys::BodyType type, ::nape::geom::Vec2 position);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Body_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Body","\xc2","\xa6","\xf4","\x2b"); }

		 ::zpp_nape::phys::ZPP_Body zpp_inner;
		bool debugDraw;
		 ::nape::phys::BodyType get_type();
		::Dynamic get_type_dyn();

		 ::nape::phys::BodyType set_type( ::nape::phys::BodyType type);
		::Dynamic set_type_dyn();

		bool get_isBullet();
		::Dynamic get_isBullet_dyn();

		bool set_isBullet(bool isBullet);
		::Dynamic set_isBullet_dyn();

		bool get_disableCCD();
		::Dynamic get_disableCCD_dyn();

		bool set_disableCCD(bool disableCCD);
		::Dynamic set_disableCCD_dyn();

		 ::nape::phys::Body integrate(Float deltaTime);
		::Dynamic integrate_dyn();

		bool isStatic();
		::Dynamic isStatic_dyn();

		bool isDynamic();
		::Dynamic isDynamic_dyn();

		bool isKinematic();
		::Dynamic isKinematic_dyn();

		 ::nape::shape::ShapeList get_shapes();
		::Dynamic get_shapes_dyn();

		 ::nape::phys::Compound get_compound();
		::Dynamic get_compound_dyn();

		 ::nape::phys::Compound set_compound( ::nape::phys::Compound compound);
		::Dynamic set_compound_dyn();

		 ::nape::space::Space get_space();
		::Dynamic get_space_dyn();

		 ::nape::space::Space set_space( ::nape::space::Space space);
		::Dynamic set_space_dyn();

		 ::nape::dynamics::ArbiterList get_arbiters();
		::Dynamic get_arbiters_dyn();

		bool get_isSleeping();
		::Dynamic get_isSleeping_dyn();

		 ::nape::constraint::ConstraintList get_constraints();
		::Dynamic get_constraints_dyn();

		 ::nape::phys::Body copy();
		::Dynamic copy_dyn();

		 ::nape::geom::Vec2 get_position();
		::Dynamic get_position_dyn();

		 ::nape::geom::Vec2 set_position( ::nape::geom::Vec2 position);
		::Dynamic set_position_dyn();

		 ::nape::geom::Vec2 get_velocity();
		::Dynamic get_velocity_dyn();

		 ::nape::geom::Vec2 set_velocity( ::nape::geom::Vec2 velocity);
		::Dynamic set_velocity_dyn();

		 ::nape::phys::Body setVelocityFromTarget( ::nape::geom::Vec2 targetPosition,Float targetRotation,Float deltaTime);
		::Dynamic setVelocityFromTarget_dyn();

		 ::nape::geom::Vec2 get_kinematicVel();
		::Dynamic get_kinematicVel_dyn();

		 ::nape::geom::Vec2 set_kinematicVel( ::nape::geom::Vec2 kinematicVel);
		::Dynamic set_kinematicVel_dyn();

		 ::nape::geom::Vec2 get_surfaceVel();
		::Dynamic get_surfaceVel_dyn();

		 ::nape::geom::Vec2 set_surfaceVel( ::nape::geom::Vec2 surfaceVel);
		::Dynamic set_surfaceVel_dyn();

		 ::nape::geom::Vec2 get_force();
		::Dynamic get_force_dyn();

		 ::nape::geom::Vec2 set_force( ::nape::geom::Vec2 force);
		::Dynamic set_force_dyn();

		 ::nape::geom::Vec3 get_constraintVelocity();
		::Dynamic get_constraintVelocity_dyn();

		Float get_rotation();
		::Dynamic get_rotation_dyn();

		Float set_rotation(Float rotation);
		::Dynamic set_rotation_dyn();

		Float get_angularVel();
		::Dynamic get_angularVel_dyn();

		Float set_angularVel(Float angularVel);
		::Dynamic set_angularVel_dyn();

		Float get_kinAngVel();
		::Dynamic get_kinAngVel_dyn();

		Float set_kinAngVel(Float kinAngVel);
		::Dynamic set_kinAngVel_dyn();

		Float get_torque();
		::Dynamic get_torque_dyn();

		Float set_torque(Float torque);
		::Dynamic set_torque_dyn();

		 ::nape::geom::AABB get_bounds();
		::Dynamic get_bounds_dyn();

		bool get_allowMovement();
		::Dynamic get_allowMovement_dyn();

		bool set_allowMovement(bool allowMovement);
		::Dynamic set_allowMovement_dyn();

		bool get_allowRotation();
		::Dynamic get_allowRotation_dyn();

		bool set_allowRotation(bool allowRotation);
		::Dynamic set_allowRotation_dyn();

		 ::nape::phys::MassMode get_massMode();
		::Dynamic get_massMode_dyn();

		 ::nape::phys::MassMode set_massMode( ::nape::phys::MassMode massMode);
		::Dynamic set_massMode_dyn();

		Float get_constraintMass();
		::Dynamic get_constraintMass_dyn();

		Float get_mass();
		::Dynamic get_mass_dyn();

		Float set_mass(Float mass);
		::Dynamic set_mass_dyn();

		 ::nape::phys::GravMassMode get_gravMassMode();
		::Dynamic get_gravMassMode_dyn();

		 ::nape::phys::GravMassMode set_gravMassMode( ::nape::phys::GravMassMode gravMassMode);
		::Dynamic set_gravMassMode_dyn();

		Float get_gravMass();
		::Dynamic get_gravMass_dyn();

		Float set_gravMass(Float gravMass);
		::Dynamic set_gravMass_dyn();

		Float get_gravMassScale();
		::Dynamic get_gravMassScale_dyn();

		Float set_gravMassScale(Float gravMassScale);
		::Dynamic set_gravMassScale_dyn();

		 ::nape::phys::InertiaMode get_inertiaMode();
		::Dynamic get_inertiaMode_dyn();

		 ::nape::phys::InertiaMode set_inertiaMode( ::nape::phys::InertiaMode inertiaMode);
		::Dynamic set_inertiaMode_dyn();

		Float get_constraintInertia();
		::Dynamic get_constraintInertia_dyn();

		Float get_inertia();
		::Dynamic get_inertia_dyn();

		Float set_inertia(Float inertia);
		::Dynamic set_inertia_dyn();

		 ::nape::phys::BodyList connectedBodies(hx::Null< int >  depth, ::nape::phys::BodyList output);
		::Dynamic connectedBodies_dyn();

		 ::nape::phys::BodyList interactingBodies( ::nape::callbacks::InteractionType type,hx::Null< int >  depth, ::nape::phys::BodyList output);
		::Dynamic interactingBodies_dyn();

		Float crushFactor();
		::Dynamic crushFactor_dyn();

		 ::nape::geom::Vec2 localPointToWorld( ::nape::geom::Vec2 point,hx::Null< bool >  weak);
		::Dynamic localPointToWorld_dyn();

		 ::nape::geom::Vec2 worldPointToLocal( ::nape::geom::Vec2 point,hx::Null< bool >  weak);
		::Dynamic worldPointToLocal_dyn();

		 ::nape::geom::Vec2 localVectorToWorld( ::nape::geom::Vec2 vector,hx::Null< bool >  weak);
		::Dynamic localVectorToWorld_dyn();

		 ::nape::geom::Vec2 worldVectorToLocal( ::nape::geom::Vec2 vector,hx::Null< bool >  weak);
		::Dynamic worldVectorToLocal_dyn();

		 ::nape::phys::Body applyImpulse( ::nape::geom::Vec2 impulse, ::nape::geom::Vec2 pos,hx::Null< bool >  sleepable);
		::Dynamic applyImpulse_dyn();

		 ::nape::phys::Body applyAngularImpulse(Float impulse,hx::Null< bool >  sleepable);
		::Dynamic applyAngularImpulse_dyn();

		 ::nape::phys::Body translateShapes( ::nape::geom::Vec2 translation);
		::Dynamic translateShapes_dyn();

		 ::nape::phys::Body rotateShapes(Float angle);
		::Dynamic rotateShapes_dyn();

		 ::nape::phys::Body scaleShapes(Float scaleX,Float scaleY);
		::Dynamic scaleShapes_dyn();

		 ::nape::phys::Body transformShapes( ::nape::geom::Mat23 matrix);
		::Dynamic transformShapes_dyn();

		 ::nape::phys::Body align();
		::Dynamic align_dyn();

		 ::nape::phys::Body rotate( ::nape::geom::Vec2 centre,Float angle);
		::Dynamic rotate_dyn();

		 ::nape::phys::Body setShapeMaterials( ::nape::phys::Material material);
		::Dynamic setShapeMaterials_dyn();

		 ::nape::phys::Body setShapeFilters( ::nape::dynamics::InteractionFilter filter);
		::Dynamic setShapeFilters_dyn();

		 ::nape::phys::Body setShapeFluidProperties( ::nape::phys::FluidProperties fluidProperties);
		::Dynamic setShapeFluidProperties_dyn();

		 ::nape::geom::Vec2 get_localCOM();
		::Dynamic get_localCOM_dyn();

		 ::nape::geom::Vec2 get_worldCOM();
		::Dynamic get_worldCOM_dyn();

		 ::nape::geom::Vec3 normalImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic normalImpulse_dyn();

		 ::nape::geom::Vec3 tangentImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic tangentImpulse_dyn();

		 ::nape::geom::Vec3 totalContactsImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic totalContactsImpulse_dyn();

		Float rollingImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic rollingImpulse_dyn();

		 ::nape::geom::Vec3 buoyancyImpulse( ::nape::phys::Body body);
		::Dynamic buoyancyImpulse_dyn();

		 ::nape::geom::Vec3 dragImpulse( ::nape::phys::Body body);
		::Dynamic dragImpulse_dyn();

		 ::nape::geom::Vec3 totalFluidImpulse( ::nape::phys::Body body);
		::Dynamic totalFluidImpulse_dyn();

		 ::nape::geom::Vec3 constraintsImpulse();
		::Dynamic constraintsImpulse_dyn();

		 ::nape::geom::Vec3 totalImpulse( ::nape::phys::Body body,hx::Null< bool >  freshOnly);
		::Dynamic totalImpulse_dyn();

		bool contains( ::nape::geom::Vec2 point);
		::Dynamic contains_dyn();

		virtual ::String toString();

};

} // end namespace nape
} // end namespace phys

#endif /* INCLUDED_nape_phys_Body */ 
