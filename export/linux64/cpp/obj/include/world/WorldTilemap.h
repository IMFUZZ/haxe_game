// Generated by Haxe 3.4.0
#ifndef INCLUDED_world_WorldTilemap
#define INCLUDED_world_WorldTilemap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_nape_FlxNapeTilemap
#include <flixel/addons/nape/FlxNapeTilemap.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemapBuffer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(world,WorldTilemap)

namespace world{


class HXCPP_CLASS_ATTRIBUTES WorldTilemap_obj : public  ::flixel::addons::nape::FlxNapeTilemap_obj
{
	public:
		typedef  ::flixel::addons::nape::FlxNapeTilemap_obj super;
		typedef WorldTilemap_obj OBJ_;
		WorldTilemap_obj();

	public:
		enum { _hx_ClassId = 0x088eb0ae };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="world.WorldTilemap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"world.WorldTilemap"); }
		static hx::ObjectPtr< WorldTilemap_obj > __new();
		static hx::ObjectPtr< WorldTilemap_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~WorldTilemap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("WorldTilemap","\x1c","\x1c","\x15","\x42"); }

		void drawTilemap( ::flixel::tile::FlxTilemapBuffer Buffer, ::flixel::FlxCamera Camera);

};

} // end namespace world

#endif /* INCLUDED_world_WorldTilemap */ 
