// Generated by Haxe 3.4.0
#ifndef INCLUDED_ui_InGameUI
#define INCLUDED_ui_InGameUI

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS1(characters,Character)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,IFlxBasic)
HX_DECLARE_CLASS1(flixel,IFlxSprite)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeSprite)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUI)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIBar)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIButton)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIGroup)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUISprite)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIText)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUITypedButton)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ICursorPointable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIButton)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIClickable)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIWidget)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IHasParams)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,ILabeled)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IResizable)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxBar)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(items,Inventory)
HX_DECLARE_CLASS1(ui,InGameUI)
HX_DECLARE_CLASS1(ui,InventoryBar)

namespace ui{


class HXCPP_CLASS_ATTRIBUTES InGameUI_obj : public  ::flixel::addons::ui::FlxUI_obj
{
	public:
		typedef  ::flixel::addons::ui::FlxUI_obj super;
		typedef InGameUI_obj OBJ_;
		InGameUI_obj();

	public:
		enum { _hx_ClassId = 0x35a2b523 };

		void __construct( ::Player player);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.InGameUI")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"ui.InGameUI"); }
		static hx::ObjectPtr< InGameUI_obj > __new( ::Player player);
		static hx::ObjectPtr< InGameUI_obj > __alloc(hx::Ctx *_hx_ctx, ::Player player);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InGameUI_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("InGameUI","\xab","\xa4","\x29","\xb3"); }

		 ::flixel::addons::ui::FlxUIBar healthBar;
		 ::flixel::addons::ui::FlxUIButton inventoryButton;
		 ::ui::InventoryBar inventoryBar;
		 ::flixel::addons::ui::FlxUIText mainTextBox;
		void update(Float elapsed);

		void link( ::characters::Character character);
		::Dynamic link_dyn();

		void setHealthBar( ::characters::Character character);
		::Dynamic setHealthBar_dyn();

		void showInventory( ::items::Inventory inventory);
		::Dynamic showInventory_dyn();

};

} // end namespace ui

#endif /* INCLUDED_ui_InGameUI */ 
