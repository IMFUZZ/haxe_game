// Generated by Haxe 3.4.0
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#define INCLUDED_flixel_addons_nape_FlxNapeSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,BodyType)
HX_DECLARE_CLASS2(nape,phys,Interactor)

namespace flixel{
namespace addons{
namespace nape{


class HXCPP_CLASS_ATTRIBUTES FlxNapeSprite_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxNapeSprite_obj OBJ_;
		FlxNapeSprite_obj();

	public:
		enum { _hx_ClassId = 0x19b9dc60 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,hx::Null< bool >  __o_CreateRectangularBody,hx::Null< bool >  __o_EnablePhysics);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.nape.FlxNapeSprite")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.nape.FlxNapeSprite"); }
		static hx::ObjectPtr< FlxNapeSprite_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,hx::Null< bool >  __o_CreateRectangularBody,hx::Null< bool >  __o_EnablePhysics);
		static hx::ObjectPtr< FlxNapeSprite_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,hx::Null< bool >  __o_CreateRectangularBody,hx::Null< bool >  __o_EnablePhysics);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxNapeSprite_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxNapeSprite","\xff","\x3d","\x04","\x22"); }

		 ::nape::phys::Body body;
		bool physicsEnabled;
		Float _linearDrag;
		Float _angularDrag;
		void destroy();

		virtual void update(Float elapsed);

		void kill();

		void revive();

		void addPremadeBody( ::nape::phys::Body NewBody);
		::Dynamic addPremadeBody_dyn();

		void createCircularBody(hx::Null< Float >  Radius, ::nape::phys::BodyType _Type);
		::Dynamic createCircularBody_dyn();

		void createRectangularBody(hx::Null< Float >  Width,hx::Null< Float >  Height, ::nape::phys::BodyType _Type);
		::Dynamic createRectangularBody_dyn();

		void setBodyMaterial(hx::Null< Float >  Elasticity,hx::Null< Float >  DynamicFriction,hx::Null< Float >  StaticFriction,hx::Null< Float >  Density,hx::Null< Float >  RotationFriction);
		::Dynamic setBodyMaterial_dyn();

		void destroyPhysObjects();
		::Dynamic destroyPhysObjects_dyn();

		void setDrag(hx::Null< Float >  LinearDrag,hx::Null< Float >  AngularDrag);
		::Dynamic setDrag_dyn();

		void setBody( ::nape::phys::Body body);
		::Dynamic setBody_dyn();

		void updatePhysObjects();
		::Dynamic updatePhysObjects_dyn();

		void updatePosition();
		::Dynamic updatePosition_dyn();

		bool set_physicsEnabled(bool Value);
		::Dynamic set_physicsEnabled_dyn();

		void setPosition(hx::Null< Float >  X,hx::Null< Float >  Y);

};

} // end namespace flixel
} // end namespace addons
} // end namespace nape

#endif /* INCLUDED_flixel_addons_nape_FlxNapeSprite */ 
