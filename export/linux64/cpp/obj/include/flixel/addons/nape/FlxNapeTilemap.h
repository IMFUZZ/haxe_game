// Generated by Haxe 3.4.0
#ifndef INCLUDED_flixel_addons_nape_FlxNapeTilemap
#define INCLUDED_flixel_addons_nape_FlxNapeTilemap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeTilemap)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemapAutoTiling)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,phys,Body)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,phys,Material)

namespace flixel{
namespace addons{
namespace nape{


class HXCPP_CLASS_ATTRIBUTES FlxNapeTilemap_obj : public  ::flixel::tile::FlxTilemap_obj
{
	public:
		typedef  ::flixel::tile::FlxTilemap_obj super;
		typedef FlxNapeTilemap_obj OBJ_;
		FlxNapeTilemap_obj();

	public:
		enum { _hx_ClassId = 0x12852d0f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.nape.FlxNapeTilemap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.nape.FlxNapeTilemap"); }
		static hx::ObjectPtr< FlxNapeTilemap_obj > __new();
		static hx::ObjectPtr< FlxNapeTilemap_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxNapeTilemap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxNapeTilemap","\xf4","\x48","\xb6","\x87"); }

		 ::nape::phys::Body body;
		::Array< int > _binaryData;
		void update(Float elapsed);

		 ::flixel::tile::FlxBaseTilemap loadMapFromCSV(::String MapData, ::Dynamic TileGraphic,hx::Null< int >  TileWidth,hx::Null< int >  TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  StartingIndex,hx::Null< int >  DrawIndex,hx::Null< int >  CollideIndex);

		 ::flixel::tile::FlxBaseTilemap loadMapFromArray(::Array< int > MapData,int WidthInTiles,int HeightInTiles, ::Dynamic TileGraphic,hx::Null< int >  TileWidth,hx::Null< int >  TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  StartingIndex,hx::Null< int >  DrawIndex,hx::Null< int >  CollideIndex);

		 ::flixel::tile::FlxBaseTilemap loadMapFrom2DArray(::Array< ::Dynamic> MapData, ::Dynamic TileGraphic,hx::Null< int >  TileWidth,hx::Null< int >  TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  StartingIndex,hx::Null< int >  DrawIndex,hx::Null< int >  CollideIndex);

		void addSolidTile(int X,int Y, ::nape::phys::Material mat);
		::Dynamic addSolidTile_dyn();

		void placeCustomPolygon(::Array< int > tileIndices,::Array< ::Dynamic> vertices, ::nape::phys::Material mat);
		::Dynamic placeCustomPolygon_dyn();

		void setupCollideIndex(hx::Null< int >  CollideIndex, ::nape::phys::Material mat);
		::Dynamic setupCollideIndex_dyn();

		void setupTileIndices(::Array< int > tileIndices, ::nape::phys::Material mat);
		::Dynamic setupTileIndices_dyn();

		void constructCollider( ::nape::phys::Material mat);
		::Dynamic constructCollider_dyn();

		 ::flixel::math::FlxRect constructRectangle(int StartX,int StartY,int EndY);
		::Dynamic constructRectangle_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace nape

#endif /* INCLUDED_flixel_addons_nape_FlxNapeTilemap */ 
