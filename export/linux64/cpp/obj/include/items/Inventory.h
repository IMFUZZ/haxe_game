// Generated by Haxe 3.4.0
#ifndef INCLUDED_items_Inventory
#define INCLUDED_items_Inventory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(items,Inventory)
HX_DECLARE_CLASS1(items,Item)

namespace items{


class HXCPP_CLASS_ATTRIBUTES Inventory_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Inventory_obj OBJ_;
		Inventory_obj();

	public:
		enum { _hx_ClassId = 0x1425a820 };

		void __construct(int a_size);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="items.Inventory")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"items.Inventory"); }
		static hx::ObjectPtr< Inventory_obj > __new(int a_size);
		static hx::ObjectPtr< Inventory_obj > __alloc(hx::Ctx *_hx_ctx,int a_size);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Inventory_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Inventory","\x7c","\x56","\x89","\xea"); }

		::Array< ::Dynamic> items;
		int selectedItemIndex;
		void moveSelectedItemIndex(int val);
		::Dynamic moveSelectedItemIndex_dyn();

		bool indexIsValid(int pos);
		::Dynamic indexIsValid_dyn();

		bool insert(int pos, ::items::Item item);
		::Dynamic insert_dyn();

		 ::items::Item removeSelectedItem();
		::Dynamic removeSelectedItem_dyn();

		 ::items::Item remove(int index);
		::Dynamic remove_dyn();

		int getAvailableIndex();
		::Dynamic getAvailableIndex_dyn();

		int as( ::items::Item item);
		::Dynamic as_dyn();

		bool addItem( ::items::Item item);
		::Dynamic addItem_dyn();

		int getSize();
		::Dynamic getSize_dyn();

};

} // end namespace items

#endif /* INCLUDED_items_Inventory */ 
