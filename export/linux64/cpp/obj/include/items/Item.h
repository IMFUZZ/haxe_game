// Generated by Haxe 3.4.0
#ifndef INCLUDED_items_Item
#define INCLUDED_items_Item

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(gametime,TimeStamp)
HX_DECLARE_CLASS1(items,Item)

namespace items{


class HXCPP_CLASS_ATTRIBUTES Item_obj : public  ::flixel::addons::nape::FlxNapeSprite_obj
{
	public:
		typedef  ::flixel::addons::nape::FlxNapeSprite_obj super;
		typedef Item_obj OBJ_;
		Item_obj();

	public:
		enum { _hx_ClassId = 0x055f2ff3 };

		void __construct(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y, ::Dynamic __o_a_stackSize, ::Dynamic a_simpleGraphic,hx::Null< bool >  __o_a_createRectangularBody,hx::Null< bool >  __o_a_enablePhysics);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="items.Item")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"items.Item"); }
		static hx::ObjectPtr< Item_obj > __new(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y, ::Dynamic __o_a_stackSize, ::Dynamic a_simpleGraphic,hx::Null< bool >  __o_a_createRectangularBody,hx::Null< bool >  __o_a_enablePhysics);
		static hx::ObjectPtr< Item_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y, ::Dynamic __o_a_stackSize, ::Dynamic a_simpleGraphic,hx::Null< bool >  __o_a_createRectangularBody,hx::Null< bool >  __o_a_enablePhysics);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Item_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Item","\x33","\xf1","\x98","\x30"); }

		::String name;
		 ::flixel::FlxSprite icon;
		::String description;
		 ::gametime::TimeStamp creationTime;
		int stackSize;
		int quantity;
		bool mouseIsOver;
		void update(Float elapsed);

		bool stack( ::items::Item item);
		::Dynamic stack_dyn();

		void highlight(bool val);
		::Dynamic highlight_dyn();

		void onMouseDown( ::flixel::FlxSprite sprite);
		::Dynamic onMouseDown_dyn();

		void onMouseUp( ::flixel::FlxSprite sprite);
		::Dynamic onMouseUp_dyn();

		void onMouseOver( ::flixel::FlxSprite sprite);
		::Dynamic onMouseOver_dyn();

		void onMouseOut( ::flixel::FlxSprite sprite);
		::Dynamic onMouseOut_dyn();

};

} // end namespace items

#endif /* INCLUDED_items_Item */ 
