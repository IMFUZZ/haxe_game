// Generated by Haxe 3.3.0
#ifndef INCLUDED_clock_TimeStamp
#define INCLUDED_clock_TimeStamp

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(clock,Clock)
HX_DECLARE_CLASS1(clock,TimeStamp)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace clock{


class HXCPP_CLASS_ATTRIBUTES TimeStamp_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TimeStamp_obj OBJ_;
		TimeStamp_obj();

	public:
		void __construct( ::clock::Clock clock1);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="clock.TimeStamp")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"clock.TimeStamp"); }
		static hx::ObjectPtr< TimeStamp_obj > __new( ::clock::Clock clock1);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TimeStamp_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TimeStamp","\x96","\x24","\xcf","\xda"); }

		Int hours;
		Int minutes;
		Int day;
		Int month;
		Int year;
};

} // end namespace clock

#endif /* INCLUDED_clock_TimeStamp */ 
