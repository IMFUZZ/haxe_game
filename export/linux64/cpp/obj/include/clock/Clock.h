// Generated by Haxe 3.3.0
#ifndef INCLUDED_clock_Clock
#define INCLUDED_clock_Clock

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
HX_DECLARE_CLASS1(clock,Clock)
HX_DECLARE_CLASS1(clock,TimeStamp)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace clock{


class HXCPP_CLASS_ATTRIBUTES Clock_obj : public  ::flixel::util::FlxTimer_obj
{
	public:
		typedef  ::flixel::util::FlxTimer_obj super;
		typedef Clock_obj OBJ_;
		Clock_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="clock.Clock")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"clock.Clock"); }
		static hx::ObjectPtr< Clock_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Clock_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Clock","\xae","\x79","\x90","\xdb"); }

		Int _secondsInADay;
		Int currentDay;
		Int currentYear;
		Int currentMonth;
		Int _daysInMonth;
		Int _monthsInYear;
		::Array< ::String > _seasons;
		void _onComplete( ::flixel::util::FlxTimer timer);
		::Dynamic _onComplete_dyn();

		void addDays(Int numberOfDays);
		::Dynamic addDays_dyn();

		void update(Float elapsed);

		Int getCurrentYear();
		::Dynamic getCurrentYear_dyn();

		Int getCurrentMonth();
		::Dynamic getCurrentMonth_dyn();

		::String getCurrentSeason();
		::Dynamic getCurrentSeason_dyn();

		Int getCurrentDay();
		::Dynamic getCurrentDay_dyn();

		Int getCurrentHour();
		::Dynamic getCurrentHour_dyn();

		Int getCurrentMinute();
		::Dynamic getCurrentMinute_dyn();

		 ::clock::TimeStamp createTimeStamp();
		::Dynamic createTimeStamp_dyn();

};

} // end namespace clock

#endif /* INCLUDED_clock_Clock */ 
