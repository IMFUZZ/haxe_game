// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_space_ZPP_Island
#define INCLUDED_zpp_nape_space_ZPP_Island

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(zpp_nape,space,ZPP_Island)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPList_ZPP_Component)

namespace zpp_nape{
namespace space{


class HXCPP_CLASS_ATTRIBUTES ZPP_Island_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_Island_obj OBJ_;
		ZPP_Island_obj();

	public:
		enum { _hx_ClassId = 0x105e3353 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.space.ZPP_Island")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.space.ZPP_Island"); }
		static hx::ObjectPtr< ZPP_Island_obj > __new();
		static hx::ObjectPtr< ZPP_Island_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Island_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Island","\xfa","\xc2","\xa8","\x82"); }

		static void __boot();
		static  ::zpp_nape::space::ZPP_Island zpp_pool;
		 ::zpp_nape::space::ZPP_Island next;
		 ::zpp_nape::space::ZPP_Island elem();
		::Dynamic elem_dyn();

		 ::zpp_nape::space::ZPP_Island begin();
		::Dynamic begin_dyn();

		bool _inuse;
		bool modified;
		bool pushmod;
		int length;
		void setbegin( ::zpp_nape::space::ZPP_Island i);
		::Dynamic setbegin_dyn();

		 ::zpp_nape::space::ZPP_Island add( ::zpp_nape::space::ZPP_Island o);
		::Dynamic add_dyn();

		 ::zpp_nape::space::ZPP_Island inlined_add( ::zpp_nape::space::ZPP_Island o);
		::Dynamic inlined_add_dyn();

		void addAll( ::zpp_nape::space::ZPP_Island x);
		::Dynamic addAll_dyn();

		 ::zpp_nape::space::ZPP_Island insert( ::zpp_nape::space::ZPP_Island cur, ::zpp_nape::space::ZPP_Island o);
		::Dynamic insert_dyn();

		 ::zpp_nape::space::ZPP_Island inlined_insert( ::zpp_nape::space::ZPP_Island cur, ::zpp_nape::space::ZPP_Island o);
		::Dynamic inlined_insert_dyn();

		void pop();
		::Dynamic pop_dyn();

		void inlined_pop();
		::Dynamic inlined_pop_dyn();

		 ::zpp_nape::space::ZPP_Island pop_unsafe();
		::Dynamic pop_unsafe_dyn();

		 ::zpp_nape::space::ZPP_Island inlined_pop_unsafe();
		::Dynamic inlined_pop_unsafe_dyn();

		void remove( ::zpp_nape::space::ZPP_Island obj);
		::Dynamic remove_dyn();

		bool try_remove( ::zpp_nape::space::ZPP_Island obj);
		::Dynamic try_remove_dyn();

		void inlined_remove( ::zpp_nape::space::ZPP_Island obj);
		::Dynamic inlined_remove_dyn();

		bool inlined_try_remove( ::zpp_nape::space::ZPP_Island obj);
		::Dynamic inlined_try_remove_dyn();

		 ::zpp_nape::space::ZPP_Island erase( ::zpp_nape::space::ZPP_Island pre);
		::Dynamic erase_dyn();

		 ::zpp_nape::space::ZPP_Island inlined_erase( ::zpp_nape::space::ZPP_Island pre);
		::Dynamic inlined_erase_dyn();

		 ::zpp_nape::space::ZPP_Island splice( ::zpp_nape::space::ZPP_Island pre,int n);
		::Dynamic splice_dyn();

		void clear();
		::Dynamic clear_dyn();

		void inlined_clear();
		::Dynamic inlined_clear_dyn();

		void reverse();
		::Dynamic reverse_dyn();

		bool empty();
		::Dynamic empty_dyn();

		int size();
		::Dynamic size_dyn();

		bool has( ::zpp_nape::space::ZPP_Island obj);
		::Dynamic has_dyn();

		bool inlined_has( ::zpp_nape::space::ZPP_Island obj);
		::Dynamic inlined_has_dyn();

		 ::zpp_nape::space::ZPP_Island front();
		::Dynamic front_dyn();

		 ::zpp_nape::space::ZPP_Island back();
		::Dynamic back_dyn();

		 ::zpp_nape::space::ZPP_Island iterator_at(int ind);
		::Dynamic iterator_at_dyn();

		 ::zpp_nape::space::ZPP_Island at(int ind);
		::Dynamic at_dyn();

		 ::zpp_nape::util::ZNPList_ZPP_Component comps;
		bool sleep;
		int waket;
		void free();
		::Dynamic free_dyn();

		void alloc();
		::Dynamic alloc_dyn();

};

} // end namespace zpp_nape
} // end namespace space

#endif /* INCLUDED_zpp_nape_space_ZPP_Island */ 
