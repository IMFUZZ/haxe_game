// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#define INCLUDED_zpp_nape_dynamics_ZPP_IContact

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_76e0a17efa968797_625_new)
HX_DECLARE_CLASS2(zpp_nape,dynamics,ZPP_IContact)

namespace zpp_nape{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES ZPP_IContact_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_IContact_obj OBJ_;
		ZPP_IContact_obj();

	public:
		enum { _hx_ClassId = 0x6a1f79bd };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.dynamics.ZPP_IContact")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.dynamics.ZPP_IContact"); }

		hx::ObjectPtr< ZPP_IContact_obj > __new() {
			hx::ObjectPtr< ZPP_IContact_obj > __this = new ZPP_IContact_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ZPP_IContact_obj > __alloc(hx::Ctx *_hx_ctx) {
			ZPP_IContact_obj *__this = (ZPP_IContact_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_IContact_obj), true, "zpp_nape.dynamics.ZPP_IContact"));
			*(void **)__this = ZPP_IContact_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_76e0a17efa968797_625_new)
            	HX_STACK_THIS(__this)
HXLINE( 655)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->length = (int)0;
HXLINE( 654)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->pushmod = false;
HXLINE( 653)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->modified = false;
HXLINE( 652)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->_inuse = false;
HXLINE( 641)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->next = null();
HXLINE( 639)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->lr2y = ((Float)0.0);
HXLINE( 638)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->lr2x = ((Float)0.0);
HXLINE( 637)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->lr1y = ((Float)0.0);
HXLINE( 636)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->lr1x = ((Float)0.0);
HXLINE( 635)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->jtAcc = ((Float)0.0);
HXLINE( 634)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->jnAcc = ((Float)0.0);
HXLINE( 633)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->friction = ((Float)0.0);
HXLINE( 632)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->bounce = ((Float)0.0);
HXLINE( 631)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->tMass = ((Float)0.0);
HXLINE( 630)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->nMass = ((Float)0.0);
HXLINE( 629)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->r2y = ((Float)0.0);
HXLINE( 628)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->r2x = ((Float)0.0);
HXLINE( 627)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->r1y = ((Float)0.0);
HXLINE( 626)		( ( ::zpp_nape::dynamics::ZPP_IContact)(__this) )->r1x = ((Float)0.0);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_IContact_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_IContact","\x9c","\xa8","\xd1","\xf7"); }

		Float r1x;
		Float r1y;
		Float r2x;
		Float r2y;
		Float nMass;
		Float tMass;
		Float bounce;
		Float friction;
		Float jnAcc;
		Float jtAcc;
		Float lr1x;
		Float lr1y;
		Float lr2x;
		Float lr2y;
		 ::zpp_nape::dynamics::ZPP_IContact next;
		 ::zpp_nape::dynamics::ZPP_IContact elem();
		::Dynamic elem_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact begin();
		::Dynamic begin_dyn();

		bool _inuse;
		bool modified;
		bool pushmod;
		int length;
		void setbegin( ::zpp_nape::dynamics::ZPP_IContact i);
		::Dynamic setbegin_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact add( ::zpp_nape::dynamics::ZPP_IContact o);
		::Dynamic add_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact inlined_add( ::zpp_nape::dynamics::ZPP_IContact o);
		::Dynamic inlined_add_dyn();

		void addAll( ::zpp_nape::dynamics::ZPP_IContact x);
		::Dynamic addAll_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact insert( ::zpp_nape::dynamics::ZPP_IContact cur, ::zpp_nape::dynamics::ZPP_IContact o);
		::Dynamic insert_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact inlined_insert( ::zpp_nape::dynamics::ZPP_IContact cur, ::zpp_nape::dynamics::ZPP_IContact o);
		::Dynamic inlined_insert_dyn();

		void pop();
		::Dynamic pop_dyn();

		void inlined_pop();
		::Dynamic inlined_pop_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact pop_unsafe();
		::Dynamic pop_unsafe_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact inlined_pop_unsafe();
		::Dynamic inlined_pop_unsafe_dyn();

		void remove( ::zpp_nape::dynamics::ZPP_IContact obj);
		::Dynamic remove_dyn();

		bool try_remove( ::zpp_nape::dynamics::ZPP_IContact obj);
		::Dynamic try_remove_dyn();

		void inlined_remove( ::zpp_nape::dynamics::ZPP_IContact obj);
		::Dynamic inlined_remove_dyn();

		bool inlined_try_remove( ::zpp_nape::dynamics::ZPP_IContact obj);
		::Dynamic inlined_try_remove_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact erase( ::zpp_nape::dynamics::ZPP_IContact pre);
		::Dynamic erase_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact inlined_erase( ::zpp_nape::dynamics::ZPP_IContact pre);
		::Dynamic inlined_erase_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact splice( ::zpp_nape::dynamics::ZPP_IContact pre,int n);
		::Dynamic splice_dyn();

		void clear();
		::Dynamic clear_dyn();

		void inlined_clear();
		::Dynamic inlined_clear_dyn();

		void reverse();
		::Dynamic reverse_dyn();

		bool empty();
		::Dynamic empty_dyn();

		int size();
		::Dynamic size_dyn();

		bool has( ::zpp_nape::dynamics::ZPP_IContact obj);
		::Dynamic has_dyn();

		bool inlined_has( ::zpp_nape::dynamics::ZPP_IContact obj);
		::Dynamic inlined_has_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact front();
		::Dynamic front_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact back();
		::Dynamic back_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact iterator_at(int ind);
		::Dynamic iterator_at_dyn();

		 ::zpp_nape::dynamics::ZPP_IContact at(int ind);
		::Dynamic at_dyn();

};

} // end namespace zpp_nape
} // end namespace dynamics

#endif /* INCLUDED_zpp_nape_dynamics_ZPP_IContact */ 
