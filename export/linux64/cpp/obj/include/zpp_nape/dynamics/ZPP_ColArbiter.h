// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#define INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
HX_DECLARE_CLASS2(nape,dynamics,Arbiter)
HX_DECLARE_CLASS2(nape,dynamics,CollisionArbiter)
HX_DECLARE_CLASS2(nape,dynamics,Contact)
HX_DECLARE_CLASS2(nape,dynamics,ContactList)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(zpp_nape,dynamics,ZPP_Arbiter)
HX_DECLARE_CLASS2(zpp_nape,dynamics,ZPP_ColArbiter)
HX_DECLARE_CLASS2(zpp_nape,dynamics,ZPP_Contact)
HX_DECLARE_CLASS2(zpp_nape,dynamics,ZPP_IContact)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Edge)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Shape)

namespace zpp_nape{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES ZPP_ColArbiter_obj : public  ::zpp_nape::dynamics::ZPP_Arbiter_obj
{
	public:
		typedef  ::zpp_nape::dynamics::ZPP_Arbiter_obj super;
		typedef ZPP_ColArbiter_obj OBJ_;
		ZPP_ColArbiter_obj();

	public:
		enum { _hx_ClassId = 0x5bc8a58f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.dynamics.ZPP_ColArbiter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.dynamics.ZPP_ColArbiter"); }
		static hx::ObjectPtr< ZPP_ColArbiter_obj > __new();
		static hx::ObjectPtr< ZPP_ColArbiter_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_ColArbiter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_ColArbiter","\x2e","\x8a","\x8b","\x5d"); }

		static void __boot();
		static int FACE1;
		static int FACE2;
		static int CIRCLE;
		static  ::zpp_nape::dynamics::ZPP_ColArbiter zpp_pool;
		 ::nape::dynamics::CollisionArbiter outer_zn;
		Float dyn_fric;
		Float stat_fric;
		Float restitution;
		Float rfric;
		bool userdef_dyn_fric;
		bool userdef_stat_fric;
		bool userdef_restitution;
		bool userdef_rfric;
		 ::zpp_nape::shape::ZPP_Shape s1;
		 ::zpp_nape::shape::ZPP_Shape s2;
		 ::zpp_nape::dynamics::ZPP_Contact contacts;
		 ::nape::dynamics::ContactList wrap_contacts;
		 ::zpp_nape::dynamics::ZPP_IContact innards;
		Float nx;
		Float ny;
		void normal_validate();
		::Dynamic normal_validate_dyn();

		 ::nape::geom::Vec2 wrap_normal;
		void getnormal();
		::Dynamic getnormal_dyn();

		Float kMassa;
		Float kMassb;
		Float kMassc;
		Float Ka;
		Float Kb;
		Float Kc;
		Float rMass;
		Float jrAcc;
		Float rn1a;
		Float rt1a;
		Float rn1b;
		Float rt1b;
		Float rn2a;
		Float rt2a;
		Float rn2b;
		Float rt2b;
		Float k1x;
		Float k1y;
		Float k2x;
		Float k2y;
		Float surfacex;
		Float surfacey;
		int ptype;
		Float lnormx;
		Float lnormy;
		Float lproj;
		Float radius;
		bool rev;
		Float biasCoef;
		 ::zpp_nape::shape::ZPP_Edge _hx___ref_edge1;
		 ::zpp_nape::shape::ZPP_Edge _hx___ref_edge2;
		int _hx___ref_vertex;
		 ::zpp_nape::dynamics::ZPP_IContact c1;
		 ::zpp_nape::dynamics::ZPP_Contact oc1;
		 ::zpp_nape::dynamics::ZPP_IContact c2;
		 ::zpp_nape::dynamics::ZPP_Contact oc2;
		bool hc2;
		bool hpc2;
		 ::zpp_nape::dynamics::ZPP_ColArbiter next;
		void alloc();
		::Dynamic alloc_dyn();

		void free();
		::Dynamic free_dyn();

		bool stat;
		 ::zpp_nape::dynamics::ZPP_Contact injectContact(Float px,Float py,Float nx,Float ny,Float dist,int hash,hx::Null< bool >  posOnly);
		::Dynamic injectContact_dyn();

		void assign( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2,int id,int di);
		::Dynamic assign_dyn();

		void calcProperties();
		::Dynamic calcProperties_dyn();

		void validate_props();
		::Dynamic validate_props_dyn();

		void retire();
		::Dynamic retire_dyn();

		bool _hx_mutable;
		void makemutable();
		::Dynamic makemutable_dyn();

		void makeimmutable();
		::Dynamic makeimmutable_dyn();

		bool contacts_adder( ::nape::dynamics::Contact x);
		::Dynamic contacts_adder_dyn();

		void contacts_subber( ::nape::dynamics::Contact x);
		::Dynamic contacts_subber_dyn();

		void setupcontacts();
		::Dynamic setupcontacts_dyn();

		bool cleanupContacts();
		::Dynamic cleanupContacts_dyn();

		Float pre_dt;
		bool preStep(Float dt);
		::Dynamic preStep_dyn();

		void warmStart();
		::Dynamic warmStart_dyn();

		void applyImpulseVel();
		::Dynamic applyImpulseVel_dyn();

		void applyImpulsePos();
		::Dynamic applyImpulsePos_dyn();

};

} // end namespace zpp_nape
} // end namespace dynamics

#endif /* INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter */ 
