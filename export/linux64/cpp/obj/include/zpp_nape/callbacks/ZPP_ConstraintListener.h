// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#define INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
HX_DECLARE_CLASS2(nape,callbacks,Callback)
HX_DECLARE_CLASS2(nape,callbacks,ConstraintCallback)
HX_DECLARE_CLASS2(nape,callbacks,ConstraintListener)
HX_DECLARE_CLASS2(nape,callbacks,Listener)
HX_DECLARE_CLASS2(nape,callbacks,OptionType)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_CbType)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_ConstraintListener)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_Listener)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_OptionType)

namespace zpp_nape{
namespace callbacks{


class HXCPP_CLASS_ATTRIBUTES ZPP_ConstraintListener_obj : public  ::zpp_nape::callbacks::ZPP_Listener_obj
{
	public:
		typedef  ::zpp_nape::callbacks::ZPP_Listener_obj super;
		typedef ZPP_ConstraintListener_obj OBJ_;
		ZPP_ConstraintListener_obj();

	public:
		enum { _hx_ClassId = 0x56485f37 };

		void __construct( ::nape::callbacks::OptionType options,int event, ::Dynamic handler);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.callbacks.ZPP_ConstraintListener")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.callbacks.ZPP_ConstraintListener"); }
		static hx::ObjectPtr< ZPP_ConstraintListener_obj > __new( ::nape::callbacks::OptionType options,int event, ::Dynamic handler);
		static hx::ObjectPtr< ZPP_ConstraintListener_obj > __alloc(hx::Ctx *_hx_ctx, ::nape::callbacks::OptionType options,int event, ::Dynamic handler);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_ConstraintListener_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_ConstraintListener","\x96","\x29","\x49","\xd6"); }

		 ::nape::callbacks::ConstraintListener outer_zn;
		 ::zpp_nape::callbacks::ZPP_OptionType options;
		 ::Dynamic handler;
		Dynamic handler_dyn() { return handler;}
		void addedToSpace();

		void removedFromSpace();

		void cbtype_change( ::zpp_nape::callbacks::ZPP_CbType cb,bool included,bool added);
		::Dynamic cbtype_change_dyn();

		void invalidate_precedence();

		void swapEvent(int newev);

};

} // end namespace zpp_nape
} // end namespace callbacks

#endif /* INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener */ 
