// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#define INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_CbSet)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_CbSetPair)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_InteractionListener)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_Listener)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPList_ZPP_InteractionListener)

namespace zpp_nape{
namespace callbacks{


class HXCPP_CLASS_ATTRIBUTES ZPP_CbSetPair_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_CbSetPair_obj OBJ_;
		ZPP_CbSetPair_obj();

	public:
		enum { _hx_ClassId = 0x5fe9d377 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.callbacks.ZPP_CbSetPair")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.callbacks.ZPP_CbSetPair"); }
		static hx::ObjectPtr< ZPP_CbSetPair_obj > __new();
		static hx::ObjectPtr< ZPP_CbSetPair_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_CbSetPair_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_CbSetPair","\xf8","\xd0","\x47","\xaa"); }

		static void __boot();
		static  ::zpp_nape::callbacks::ZPP_CbSetPair zpp_pool;
		static  ::zpp_nape::callbacks::ZPP_CbSetPair get( ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b);
		static ::Dynamic get_dyn();

		static bool setlt( ::zpp_nape::callbacks::ZPP_CbSetPair x, ::zpp_nape::callbacks::ZPP_CbSetPair y);
		static ::Dynamic setlt_dyn();

		 ::zpp_nape::callbacks::ZPP_CbSet a;
		 ::zpp_nape::callbacks::ZPP_CbSet b;
		 ::zpp_nape::callbacks::ZPP_CbSetPair next;
		void free();
		::Dynamic free_dyn();

		void alloc();
		::Dynamic alloc_dyn();

		bool compatible( ::zpp_nape::callbacks::ZPP_InteractionListener i);
		::Dynamic compatible_dyn();

		bool zip_listeners;
		 ::zpp_nape::util::ZNPList_ZPP_InteractionListener listeners;
		void invalidate();
		::Dynamic invalidate_dyn();

		void validate();
		::Dynamic validate_dyn();

		void _hx___validate();
		::Dynamic _hx___validate_dyn();

		bool empty_intersection();
		::Dynamic empty_intersection_dyn();

		bool single_intersection( ::zpp_nape::callbacks::ZPP_InteractionListener i);
		::Dynamic single_intersection_dyn();

		void forall(int event, ::Dynamic cb);
		::Dynamic forall_dyn();

};

} // end namespace zpp_nape
} // end namespace callbacks

#endif /* INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair */ 
