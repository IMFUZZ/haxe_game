// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_constraint_ZPP_UserConstraint
#define INCLUDED_zpp_nape_constraint_ZPP_UserConstraint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
HX_DECLARE_CLASS2(nape,constraint,Constraint)
HX_DECLARE_CLASS2(nape,constraint,UserConstraint)
HX_DECLARE_CLASS2(nape,geom,Vec3)
HX_DECLARE_CLASS2(nape,util,Debug)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_Constraint)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_CopyHelper)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_UserBody)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_UserConstraint)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Vec2)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Body)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)

namespace zpp_nape{
namespace constraint{


class HXCPP_CLASS_ATTRIBUTES ZPP_UserConstraint_obj : public  ::zpp_nape::constraint::ZPP_Constraint_obj
{
	public:
		typedef  ::zpp_nape::constraint::ZPP_Constraint_obj super;
		typedef ZPP_UserConstraint_obj OBJ_;
		ZPP_UserConstraint_obj();

	public:
		enum { _hx_ClassId = 0x294cc45f };

		void __construct(int dim,bool velonly);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.constraint.ZPP_UserConstraint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.constraint.ZPP_UserConstraint"); }
		static hx::ObjectPtr< ZPP_UserConstraint_obj > __new(int dim,bool velonly);
		static hx::ObjectPtr< ZPP_UserConstraint_obj > __alloc(hx::Ctx *_hx_ctx,int dim,bool velonly);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_UserConstraint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_UserConstraint","\xad","\xd3","\xd4","\x89"); }

		 ::nape::constraint::UserConstraint outer_zn;
		void bindVec2_invalidate( ::zpp_nape::geom::ZPP_Vec2 _);
		::Dynamic bindVec2_invalidate_dyn();

		::Array< ::Dynamic> bodies;
		int dim;
		::Array< Float > jAcc;
		::Array< Float > bias;
		void addBody( ::zpp_nape::phys::ZPP_Body b);
		::Dynamic addBody_dyn();

		bool remBody( ::zpp_nape::phys::ZPP_Body b);
		::Dynamic remBody_dyn();

		 ::nape::geom::Vec3 bodyImpulse( ::zpp_nape::phys::ZPP_Body b);
		::Dynamic bodyImpulse_dyn();

		void activeBodies();

		void inactiveBodies();

		bool stepped;
		 ::nape::constraint::Constraint copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo);

		void validate();

		void wake_connected();

		void forest();

		bool pair_exists(int id,int di);

		void broken();

		void clearcache();

		Float lsq(::Array< Float > v);
		::Dynamic lsq_dyn();

		void _clamp(::Array< Float > v,Float max);
		::Dynamic _clamp_dyn();

		::Array< Float > L;
		::Array< Float > solve(::Array< Float > m);
		::Dynamic solve_dyn();

		::Array< Float > y;
		void transform(::Array< Float > L,::Array< Float > x);
		::Dynamic transform_dyn();

		Float soft;
		Float gamma;
		bool velonly;
		Float jMax;
		::Array< Float > Keff;
		bool preStep(Float dt);

		 ::nape::geom::Vec3 vec3;
		void warmStart();

		::Array< Float > J;
		::Array< Float > jOld;
		bool applyImpulseVel();

		bool applyImpulsePos();

		void draw( ::nape::util::Debug g);

};

} // end namespace zpp_nape
} // end namespace constraint

#endif /* INCLUDED_zpp_nape_constraint_ZPP_UserConstraint */ 
