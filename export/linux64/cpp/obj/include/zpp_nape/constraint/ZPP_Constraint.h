// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#define INCLUDED_zpp_nape_constraint_ZPP_Constraint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,callbacks,CbType)
HX_DECLARE_CLASS2(nape,callbacks,CbTypeList)
HX_DECLARE_CLASS2(nape,constraint,Constraint)
HX_DECLARE_CLASS2(nape,util,Debug)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_CbSet)
HX_DECLARE_CLASS2(zpp_nape,callbacks,ZPP_CbType)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_Constraint)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_CopyHelper)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Compound)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,space,ZPP_Component)
HX_DECLARE_CLASS2(zpp_nape,space,ZPP_Space)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPList_ZPP_CbType)

namespace zpp_nape{
namespace constraint{


class HXCPP_CLASS_ATTRIBUTES ZPP_Constraint_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_Constraint_obj OBJ_;
		ZPP_Constraint_obj();

	public:
		enum { _hx_ClassId = 0x7c84a5ec };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.constraint.ZPP_Constraint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.constraint.ZPP_Constraint"); }
		static hx::ObjectPtr< ZPP_Constraint_obj > __new();
		static hx::ObjectPtr< ZPP_Constraint_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Constraint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Constraint","\x02","\x9b","\xef","\xec"); }

		 ::nape::constraint::Constraint outer;
		void clear();
		::Dynamic clear_dyn();

		int id;
		 ::Dynamic userData;
		 ::zpp_nape::phys::ZPP_Compound compound;
		 ::zpp_nape::space::ZPP_Space space;
		bool active;
		bool stiff;
		Float frequency;
		Float damping;
		Float maxForce;
		Float maxError;
		bool breakUnderForce;
		bool breakUnderError;
		bool removeOnBreak;
		 ::zpp_nape::space::ZPP_Component component;
		bool ignore;
		bool _hx___velocity;
		void immutable_midstep(::String name);
		::Dynamic immutable_midstep_dyn();

		 ::zpp_nape::util::ZNPList_ZPP_CbType cbTypes;
		 ::zpp_nape::callbacks::ZPP_CbSet cbSet;
		 ::nape::callbacks::CbTypeList wrap_cbTypes;
		void setupcbTypes();
		::Dynamic setupcbTypes_dyn();

		void wrap_cbTypes_subber( ::nape::callbacks::CbType pcb);
		::Dynamic wrap_cbTypes_subber_dyn();

		bool wrap_cbTypes_adder( ::nape::callbacks::CbType cb);
		::Dynamic wrap_cbTypes_adder_dyn();

		void insert_cbtype( ::zpp_nape::callbacks::ZPP_CbType cb);
		::Dynamic insert_cbtype_dyn();

		void alloc_cbSet();
		::Dynamic alloc_cbSet_dyn();

		void dealloc_cbSet();
		::Dynamic dealloc_cbSet_dyn();

		void activate();
		::Dynamic activate_dyn();

		void deactivate();
		::Dynamic deactivate_dyn();

		void addedToSpace();
		::Dynamic addedToSpace_dyn();

		void removedFromSpace();
		::Dynamic removedFromSpace_dyn();

		void activeInSpace();
		::Dynamic activeInSpace_dyn();

		void inactiveOrOutSpace();
		::Dynamic inactiveOrOutSpace_dyn();

		virtual void activeBodies();
		::Dynamic activeBodies_dyn();

		virtual void inactiveBodies();
		::Dynamic inactiveBodies_dyn();

		virtual void clearcache();
		::Dynamic clearcache_dyn();

		virtual void validate();
		::Dynamic validate_dyn();

		virtual void wake_connected();
		::Dynamic wake_connected_dyn();

		virtual void forest();
		::Dynamic forest_dyn();

		virtual bool pair_exists(int id,int di);
		::Dynamic pair_exists_dyn();

		virtual void broken();
		::Dynamic broken_dyn();

		virtual void warmStart();
		::Dynamic warmStart_dyn();

		Float pre_dt;
		virtual bool preStep(Float dt);
		::Dynamic preStep_dyn();

		virtual bool applyImpulseVel();
		::Dynamic applyImpulseVel_dyn();

		virtual bool applyImpulsePos();
		::Dynamic applyImpulsePos_dyn();

		void wake();
		::Dynamic wake_dyn();

		virtual void draw( ::nape::util::Debug g);
		::Dynamic draw_dyn();

		virtual  ::nape::constraint::Constraint copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo);
		::Dynamic copy_dyn();

		void copyto( ::nape::constraint::Constraint ret);
		::Dynamic copyto_dyn();

};

} // end namespace zpp_nape
} // end namespace constraint

#endif /* INCLUDED_zpp_nape_constraint_ZPP_Constraint */ 
