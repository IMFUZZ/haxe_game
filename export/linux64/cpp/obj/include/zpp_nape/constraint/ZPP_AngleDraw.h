// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_constraint_ZPP_AngleDraw
#define INCLUDED_zpp_nape_constraint_ZPP_AngleDraw

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,util,Debug)
HX_DECLARE_CLASS2(zpp_nape,constraint,ZPP_AngleDraw)

namespace zpp_nape{
namespace constraint{


class HXCPP_CLASS_ATTRIBUTES ZPP_AngleDraw_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_AngleDraw_obj OBJ_;
		ZPP_AngleDraw_obj();

	public:
		enum { _hx_ClassId = 0x5f4e02c8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="zpp_nape.constraint.ZPP_AngleDraw")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"zpp_nape.constraint.ZPP_AngleDraw"); }

		hx::ObjectPtr< ZPP_AngleDraw_obj > __new() {
			hx::ObjectPtr< ZPP_AngleDraw_obj > __this = new ZPP_AngleDraw_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ZPP_AngleDraw_obj > __alloc(hx::Ctx *_hx_ctx) {
			ZPP_AngleDraw_obj *__this = (ZPP_AngleDraw_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_AngleDraw_obj), false, "zpp_nape.constraint.ZPP_AngleDraw"));
			*(void **)__this = ZPP_AngleDraw_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_AngleDraw_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_AngleDraw","\x72","\xc2","\x0a","\x14"); }

		static void __boot();
		static void indicator( ::nape::util::Debug g, ::nape::geom::Vec2 c,Float ang,Float rad,int col);
		static ::Dynamic indicator_dyn();

		static Float maxarc;
		static void drawSpiralSpring( ::nape::util::Debug g, ::nape::geom::Vec2 c,Float a0,Float a1,Float r0,Float r1,int col,hx::Null< int >  coils);
		static ::Dynamic drawSpiralSpring_dyn();

		static void drawSpiral( ::nape::util::Debug g, ::nape::geom::Vec2 c,Float a0,Float a1,Float r0,Float r1,int col);
		static ::Dynamic drawSpiral_dyn();

};

} // end namespace zpp_nape
} // end namespace constraint

#endif /* INCLUDED_zpp_nape_constraint_ZPP_AngleDraw */ 
