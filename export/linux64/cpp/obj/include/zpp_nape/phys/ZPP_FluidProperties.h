// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#define INCLUDED_zpp_nape_phys_ZPP_FluidProperties

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,phys,FluidProperties)
HX_DECLARE_CLASS2(nape,shape,ShapeList)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Vec2)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_FluidProperties)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Shape)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPList_ZPP_Shape)

namespace zpp_nape{
namespace phys{


class HXCPP_CLASS_ATTRIBUTES ZPP_FluidProperties_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_FluidProperties_obj OBJ_;
		ZPP_FluidProperties_obj();

	public:
		enum { _hx_ClassId = 0x0c64e8f5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.phys.ZPP_FluidProperties")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.phys.ZPP_FluidProperties"); }
		static hx::ObjectPtr< ZPP_FluidProperties_obj > __new();
		static hx::ObjectPtr< ZPP_FluidProperties_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_FluidProperties_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_FluidProperties","\xd8","\xb9","\xf0","\xc1"); }

		static void __boot();
		static  ::zpp_nape::phys::ZPP_FluidProperties zpp_pool;
		 ::zpp_nape::phys::ZPP_FluidProperties next;
		 ::Dynamic userData;
		 ::nape::phys::FluidProperties outer;
		 ::nape::phys::FluidProperties wrapper();
		::Dynamic wrapper_dyn();

		void free();
		::Dynamic free_dyn();

		void alloc();
		::Dynamic alloc_dyn();

		 ::zpp_nape::util::ZNPList_ZPP_Shape shapes;
		 ::nape::shape::ShapeList wrap_shapes;
		void feature_cons();
		::Dynamic feature_cons_dyn();

		void addShape( ::zpp_nape::shape::ZPP_Shape shape);
		::Dynamic addShape_dyn();

		void remShape( ::zpp_nape::shape::ZPP_Shape shape);
		::Dynamic remShape_dyn();

		 ::zpp_nape::phys::ZPP_FluidProperties copy();
		::Dynamic copy_dyn();

		Float viscosity;
		Float density;
		Float gravityx;
		Float gravityy;
		 ::nape::geom::Vec2 wrap_gravity;
		void gravity_invalidate( ::zpp_nape::geom::ZPP_Vec2 x);
		::Dynamic gravity_invalidate_dyn();

		void gravity_validate();
		::Dynamic gravity_validate_dyn();

		void getgravity();
		::Dynamic getgravity_dyn();

		void invalidate();
		::Dynamic invalidate_dyn();

};

} // end namespace zpp_nape
} // end namespace phys

#endif /* INCLUDED_zpp_nape_phys_ZPP_FluidProperties */ 
