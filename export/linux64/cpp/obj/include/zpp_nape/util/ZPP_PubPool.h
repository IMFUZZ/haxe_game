// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#define INCLUDED_zpp_nape_util_ZPP_PubPool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,GeomPoly)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,geom,Vec3)
HX_DECLARE_CLASS2(zpp_nape,util,ZPP_PubPool)

namespace zpp_nape{
namespace util{


class HXCPP_CLASS_ATTRIBUTES ZPP_PubPool_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_PubPool_obj OBJ_;
		ZPP_PubPool_obj();

	public:
		enum { _hx_ClassId = 0x3a2a7245 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="zpp_nape.util.ZPP_PubPool")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"zpp_nape.util.ZPP_PubPool"); }

		hx::ObjectPtr< ZPP_PubPool_obj > __new() {
			hx::ObjectPtr< ZPP_PubPool_obj > __this = new ZPP_PubPool_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ZPP_PubPool_obj > __alloc(hx::Ctx *_hx_ctx) {
			ZPP_PubPool_obj *__this = (ZPP_PubPool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_PubPool_obj), false, "zpp_nape.util.ZPP_PubPool"));
			*(void **)__this = ZPP_PubPool_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_PubPool_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_PubPool","\x74","\x2e","\x91","\xf3"); }

		static void __boot();
		static  ::nape::geom::GeomPoly poolGeomPoly;
		static  ::nape::geom::Vec2 poolVec2;
		static  ::nape::geom::Vec3 poolVec3;
};

} // end namespace zpp_nape
} // end namespace util

#endif /* INCLUDED_zpp_nape_util_ZPP_PubPool */ 
