// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#define INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Compound)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPList_ZPP_Compound)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPNode_ZPP_Compound)

namespace zpp_nape{
namespace util{


class HXCPP_CLASS_ATTRIBUTES ZNPList_ZPP_Compound_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZNPList_ZPP_Compound_obj OBJ_;
		ZNPList_ZPP_Compound_obj();

	public:
		enum { _hx_ClassId = 0x175a39e4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.util.ZNPList_ZPP_Compound")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.util.ZNPList_ZPP_Compound"); }
		static hx::ObjectPtr< ZNPList_ZPP_Compound_obj > __new();
		static hx::ObjectPtr< ZNPList_ZPP_Compound_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZNPList_ZPP_Compound_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZNPList_ZPP_Compound","\xd5","\xff","\xe7","\xfe"); }

		 ::zpp_nape::util::ZNPNode_ZPP_Compound head;
		 ::zpp_nape::util::ZNPNode_ZPP_Compound begin();
		::Dynamic begin_dyn();

		bool modified;
		bool pushmod;
		int length;
		void setbegin( ::zpp_nape::util::ZNPNode_ZPP_Compound i);
		::Dynamic setbegin_dyn();

		 ::zpp_nape::phys::ZPP_Compound add( ::zpp_nape::phys::ZPP_Compound o);
		::Dynamic add_dyn();

		 ::zpp_nape::phys::ZPP_Compound inlined_add( ::zpp_nape::phys::ZPP_Compound o);
		::Dynamic inlined_add_dyn();

		void addAll( ::zpp_nape::util::ZNPList_ZPP_Compound x);
		::Dynamic addAll_dyn();

		 ::zpp_nape::util::ZNPNode_ZPP_Compound insert( ::zpp_nape::util::ZNPNode_ZPP_Compound cur, ::zpp_nape::phys::ZPP_Compound o);
		::Dynamic insert_dyn();

		 ::zpp_nape::util::ZNPNode_ZPP_Compound inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Compound cur, ::zpp_nape::phys::ZPP_Compound o);
		::Dynamic inlined_insert_dyn();

		void pop();
		::Dynamic pop_dyn();

		void inlined_pop();
		::Dynamic inlined_pop_dyn();

		 ::zpp_nape::phys::ZPP_Compound pop_unsafe();
		::Dynamic pop_unsafe_dyn();

		 ::zpp_nape::phys::ZPP_Compound inlined_pop_unsafe();
		::Dynamic inlined_pop_unsafe_dyn();

		void remove( ::zpp_nape::phys::ZPP_Compound obj);
		::Dynamic remove_dyn();

		bool try_remove( ::zpp_nape::phys::ZPP_Compound obj);
		::Dynamic try_remove_dyn();

		void inlined_remove( ::zpp_nape::phys::ZPP_Compound obj);
		::Dynamic inlined_remove_dyn();

		bool inlined_try_remove( ::zpp_nape::phys::ZPP_Compound obj);
		::Dynamic inlined_try_remove_dyn();

		 ::zpp_nape::util::ZNPNode_ZPP_Compound erase( ::zpp_nape::util::ZNPNode_ZPP_Compound pre);
		::Dynamic erase_dyn();

		 ::zpp_nape::util::ZNPNode_ZPP_Compound inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Compound pre);
		::Dynamic inlined_erase_dyn();

		 ::zpp_nape::util::ZNPNode_ZPP_Compound splice( ::zpp_nape::util::ZNPNode_ZPP_Compound pre,int n);
		::Dynamic splice_dyn();

		void clear();
		::Dynamic clear_dyn();

		void inlined_clear();
		::Dynamic inlined_clear_dyn();

		void reverse();
		::Dynamic reverse_dyn();

		bool empty();
		::Dynamic empty_dyn();

		int size();
		::Dynamic size_dyn();

		bool has( ::zpp_nape::phys::ZPP_Compound obj);
		::Dynamic has_dyn();

		bool inlined_has( ::zpp_nape::phys::ZPP_Compound obj);
		::Dynamic inlined_has_dyn();

		 ::zpp_nape::phys::ZPP_Compound front();
		::Dynamic front_dyn();

		 ::zpp_nape::phys::ZPP_Compound back();
		::Dynamic back_dyn();

		 ::zpp_nape::util::ZNPNode_ZPP_Compound iterator_at(int ind);
		::Dynamic iterator_at_dyn();

		 ::zpp_nape::phys::ZPP_Compound at(int ind);
		::Dynamic at_dyn();

};

} // end namespace zpp_nape
} // end namespace util

#endif /* INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound */ 
