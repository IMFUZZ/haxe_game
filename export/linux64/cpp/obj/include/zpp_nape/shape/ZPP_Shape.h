// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#define INCLUDED_zpp_nape_shape_ZPP_Shape

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,shape,Shape)
HX_DECLARE_CLASS2(nape,shape,ShapeType)
HX_DECLARE_CLASS2(zpp_nape,dynamics,ZPP_InteractionFilter)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_AABB)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Body)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_FluidProperties)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Material)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Circle)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Polygon)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Shape)
HX_DECLARE_CLASS2(zpp_nape,space,ZPP_AABBNode)
HX_DECLARE_CLASS2(zpp_nape,space,ZPP_SweepData)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPList_ZPP_AABBPair)

namespace zpp_nape{
namespace shape{


class HXCPP_CLASS_ATTRIBUTES ZPP_Shape_obj : public  ::zpp_nape::phys::ZPP_Interactor_obj
{
	public:
		typedef  ::zpp_nape::phys::ZPP_Interactor_obj super;
		typedef ZPP_Shape_obj OBJ_;
		ZPP_Shape_obj();

	public:
		enum { _hx_ClassId = 0x31c749e8 };

		void __construct(int type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.shape.ZPP_Shape")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.shape.ZPP_Shape"); }
		static hx::ObjectPtr< ZPP_Shape_obj > __new(int type);
		static hx::ObjectPtr< ZPP_Shape_obj > __alloc(hx::Ctx *_hx_ctx,int type);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Shape_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Shape","\x9c","\x4a","\x89","\x12"); }

		static void __boot();
		static ::Array< ::Dynamic> types;
		 ::nape::shape::Shape outer;
		 ::zpp_nape::phys::ZPP_Body body;
		int type;
		bool isCircle();
		::Dynamic isCircle_dyn();

		bool isPolygon();
		::Dynamic isPolygon_dyn();

		Float area;
		bool zip_area_inertia;
		Float inertia;
		Float angDrag;
		bool zip_angDrag;
		Float localCOMx;
		Float localCOMy;
		bool zip_localCOM;
		Float worldCOMx;
		Float worldCOMy;
		bool zip_worldCOM;
		 ::nape::geom::Vec2 wrap_localCOM;
		 ::nape::geom::Vec2 wrap_worldCOM;
		Float sweepRadius;
		bool zip_sweepRadius;
		Float sweepCoef;
		void invalidate_sweepRadius();
		::Dynamic invalidate_sweepRadius_dyn();

		void validate_sweepRadius();
		::Dynamic validate_sweepRadius_dyn();

		 ::zpp_nape::shape::ZPP_Circle circle;
		 ::zpp_nape::shape::ZPP_Polygon polygon;
		 ::zpp_nape::phys::ZPP_Material refmaterial;
		 ::zpp_nape::phys::ZPP_Material material;
		 ::zpp_nape::dynamics::ZPP_InteractionFilter filter;
		 ::zpp_nape::phys::ZPP_FluidProperties fluidProperties;
		bool fluidEnabled;
		bool sensorEnabled;
		 ::zpp_nape::space::ZPP_SweepData sweep;
		 ::zpp_nape::space::ZPP_AABBNode node;
		 ::zpp_nape::util::ZNPList_ZPP_AABBPair pairs;
		void clear();
		::Dynamic clear_dyn();

		 ::zpp_nape::geom::ZPP_AABB aabb;
		bool zip_aabb;
		void validate_aabb();
		::Dynamic validate_aabb_dyn();

		void force_validate_aabb();
		::Dynamic force_validate_aabb_dyn();

		void invalidate_aabb();
		::Dynamic invalidate_aabb_dyn();

		void validate_area_inertia();
		::Dynamic validate_area_inertia_dyn();

		void validate_angDrag();
		::Dynamic validate_angDrag_dyn();

		void validate_localCOM();
		::Dynamic validate_localCOM_dyn();

		void validate_worldCOM();
		::Dynamic validate_worldCOM_dyn();

		void getworldCOM();
		::Dynamic getworldCOM_dyn();

		void invalidate_area_inertia();
		::Dynamic invalidate_area_inertia_dyn();

		void invalidate_angDrag();
		::Dynamic invalidate_angDrag_dyn();

		void invalidate_localCOM();
		::Dynamic invalidate_localCOM_dyn();

		void invalidate_worldCOM();
		::Dynamic invalidate_worldCOM_dyn();

		void invalidate_material(int flags);
		::Dynamic invalidate_material_dyn();

		void invalidate_filter();
		::Dynamic invalidate_filter_dyn();

		void invalidate_fluidprops();
		::Dynamic invalidate_fluidprops_dyn();

		void aabb_validate();
		::Dynamic aabb_validate_dyn();

		void setMaterial( ::zpp_nape::phys::ZPP_Material material);
		::Dynamic setMaterial_dyn();

		void setFilter( ::zpp_nape::dynamics::ZPP_InteractionFilter filter);
		::Dynamic setFilter_dyn();

		void setFluid( ::zpp_nape::phys::ZPP_FluidProperties fluid);
		::Dynamic setFluid_dyn();

		void _hx___immutable_midstep(::String name);
		::Dynamic _hx___immutable_midstep_dyn();

		void addedToBody();
		::Dynamic addedToBody_dyn();

		void removedFromBody();
		::Dynamic removedFromBody_dyn();

		void addedToSpace();
		::Dynamic addedToSpace_dyn();

		void removedFromSpace();
		::Dynamic removedFromSpace_dyn();

		 ::nape::shape::Shape copy();
		::Dynamic copy_dyn();

};

} // end namespace zpp_nape
} // end namespace shape

#endif /* INCLUDED_zpp_nape_shape_ZPP_Shape */ 
