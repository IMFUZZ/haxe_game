// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#define INCLUDED_zpp_nape_shape_ZPP_Circle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
HX_DECLARE_CLASS2(nape,geom,Mat23)
HX_DECLARE_CLASS2(nape,phys,Interactor)
HX_DECLARE_CLASS2(nape,shape,Circle)
HX_DECLARE_CLASS2(nape,shape,Shape)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Vec2)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Circle)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Shape)

namespace zpp_nape{
namespace shape{


class HXCPP_CLASS_ATTRIBUTES ZPP_Circle_obj : public  ::zpp_nape::shape::ZPP_Shape_obj
{
	public:
		typedef  ::zpp_nape::shape::ZPP_Shape_obj super;
		typedef ZPP_Circle_obj OBJ_;
		ZPP_Circle_obj();

	public:
		enum { _hx_ClassId = 0x0532c385 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.shape.ZPP_Circle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.shape.ZPP_Circle"); }
		static hx::ObjectPtr< ZPP_Circle_obj > __new();
		static hx::ObjectPtr< ZPP_Circle_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Circle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Circle","\x35","\x96","\x7b","\x5e"); }

		 ::nape::shape::Circle outer_zn;
		Float radius;
		void _hx___clear();
		::Dynamic _hx___clear_dyn();

		void invalidate_radius();
		::Dynamic invalidate_radius_dyn();

		void localCOM_validate();
		::Dynamic localCOM_validate_dyn();

		void localCOM_invalidate( ::zpp_nape::geom::ZPP_Vec2 x);
		::Dynamic localCOM_invalidate_dyn();

		void setupLocalCOM();
		::Dynamic setupLocalCOM_dyn();

		void _hx___validate_aabb();
		::Dynamic _hx___validate_aabb_dyn();

		void _force_validate_aabb();
		::Dynamic _force_validate_aabb_dyn();

		void _hx___validate_sweepRadius();
		::Dynamic _hx___validate_sweepRadius_dyn();

		void _hx___validate_area_inertia();
		::Dynamic _hx___validate_area_inertia_dyn();

		void _hx___validate_angDrag();
		::Dynamic _hx___validate_angDrag_dyn();

		void _hx___scale(Float sx,Float sy);
		::Dynamic _hx___scale_dyn();

		void _hx___translate(Float x,Float y);
		::Dynamic _hx___translate_dyn();

		void _hx___rotate(Float x,Float y);
		::Dynamic _hx___rotate_dyn();

		void _hx___transform( ::nape::geom::Mat23 m);
		::Dynamic _hx___transform_dyn();

		virtual  ::zpp_nape::shape::ZPP_Circle __copy();
		::Dynamic __copy_dyn();

};

} // end namespace zpp_nape
} // end namespace shape

#endif /* INCLUDED_zpp_nape_shape_ZPP_Circle */ 
