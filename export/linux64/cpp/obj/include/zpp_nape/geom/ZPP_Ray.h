// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#define INCLUDED_zpp_nape_geom_ZPP_Ray

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,RayResult)
HX_DECLARE_CLASS2(nape,geom,RayResultList)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_AABB)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Ray)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Vec2)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Circle)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Polygon)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Shape)

namespace zpp_nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES ZPP_Ray_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_Ray_obj OBJ_;
		ZPP_Ray_obj();

	public:
		enum { _hx_ClassId = 0x00a851fc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.geom.ZPP_Ray")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.geom.ZPP_Ray"); }
		static hx::ObjectPtr< ZPP_Ray_obj > __new();
		static hx::ObjectPtr< ZPP_Ray_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Ray_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Ray","\xa5","\xd8","\x30","\xea"); }

		 ::nape::geom::Vec2 origin;
		 ::nape::geom::Vec2 direction;
		Float maxdist;
		 ::Dynamic userData;
		Float originx;
		Float originy;
		Float dirx;
		Float diry;
		Float idirx;
		Float idiry;
		Float normalx;
		Float normaly;
		Float absnormalx;
		Float absnormaly;
		void origin_invalidate( ::zpp_nape::geom::ZPP_Vec2 x);
		::Dynamic origin_invalidate_dyn();

		void direction_invalidate( ::zpp_nape::geom::ZPP_Vec2 x);
		::Dynamic direction_invalidate_dyn();

		bool zip_dir;
		void invalidate_dir();
		::Dynamic invalidate_dir_dyn();

		void validate_dir();
		::Dynamic validate_dir_dyn();

		 ::zpp_nape::geom::ZPP_AABB rayAABB();
		::Dynamic rayAABB_dyn();

		bool aabbtest( ::zpp_nape::geom::ZPP_AABB a);
		::Dynamic aabbtest_dyn();

		Float aabbsect( ::zpp_nape::geom::ZPP_AABB a);
		::Dynamic aabbsect_dyn();

		 ::nape::geom::RayResult circlesect( ::zpp_nape::shape::ZPP_Circle c,bool inner,Float mint);
		::Dynamic circlesect_dyn();

		void circlesect2( ::zpp_nape::shape::ZPP_Circle c,bool inner, ::nape::geom::RayResultList list);
		::Dynamic circlesect2_dyn();

		 ::nape::geom::RayResult polysect( ::zpp_nape::shape::ZPP_Polygon p,bool inner,Float mint);
		::Dynamic polysect_dyn();

		void polysect2( ::zpp_nape::shape::ZPP_Polygon p,bool inner, ::nape::geom::RayResultList list);
		::Dynamic polysect2_dyn();

};

} // end namespace zpp_nape
} // end namespace geom

#endif /* INCLUDED_zpp_nape_geom_ZPP_Ray */ 
