// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_geom_ZPP_Triangular
#define INCLUDED_zpp_nape_geom_ZPP_Triangular

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_PartitionVertex)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_PartitionedPoly)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Triangular)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPList_ZPP_PartitionVertex)
HX_DECLARE_CLASS2(zpp_nape,util,ZPP_Set_ZPP_PartitionPair)

namespace zpp_nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES ZPP_Triangular_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_Triangular_obj OBJ_;
		ZPP_Triangular_obj();

	public:
		enum { _hx_ClassId = 0x70639b45 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="zpp_nape.geom.ZPP_Triangular")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"zpp_nape.geom.ZPP_Triangular"); }

		hx::ObjectPtr< ZPP_Triangular_obj > __new() {
			hx::ObjectPtr< ZPP_Triangular_obj > __this = new ZPP_Triangular_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ZPP_Triangular_obj > __alloc(hx::Ctx *_hx_ctx) {
			ZPP_Triangular_obj *__this = (ZPP_Triangular_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Triangular_obj), false, "zpp_nape.geom.ZPP_Triangular"));
			*(void **)__this = ZPP_Triangular_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Triangular_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Triangular","\xbc","\x2b","\xe5","\x71"); }

		static void __boot();
		static bool lt( ::zpp_nape::geom::ZPP_PartitionVertex p, ::zpp_nape::geom::ZPP_PartitionVertex q);
		static ::Dynamic lt_dyn();

		static Float right_turn( ::zpp_nape::geom::ZPP_PartitionVertex a, ::zpp_nape::geom::ZPP_PartitionVertex b, ::zpp_nape::geom::ZPP_PartitionVertex c);
		static ::Dynamic right_turn_dyn();

		static  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex queue;
		static  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex stack;
		static bool delaunay( ::zpp_nape::geom::ZPP_PartitionVertex A, ::zpp_nape::geom::ZPP_PartitionVertex B, ::zpp_nape::geom::ZPP_PartitionVertex C, ::zpp_nape::geom::ZPP_PartitionVertex D);
		static ::Dynamic delaunay_dyn();

		static  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair edgeSet;
		static void optimise( ::zpp_nape::geom::ZPP_PartitionedPoly P);
		static ::Dynamic optimise_dyn();

		static  ::zpp_nape::geom::ZPP_PartitionedPoly triangulate( ::zpp_nape::geom::ZPP_PartitionedPoly P);
		static ::Dynamic triangulate_dyn();

};

} // end namespace zpp_nape
} // end namespace geom

#endif /* INCLUDED_zpp_nape_geom_ZPP_Triangular */ 
