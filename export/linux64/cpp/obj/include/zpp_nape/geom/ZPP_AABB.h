// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#define INCLUDED_zpp_nape_geom_ZPP_AABB

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,AABB)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_AABB)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Vec2)

namespace zpp_nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES ZPP_AABB_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_AABB_obj OBJ_;
		ZPP_AABB_obj();

	public:
		enum { _hx_ClassId = 0x0e1d5e92 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.geom.ZPP_AABB")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.geom.ZPP_AABB"); }
		static hx::ObjectPtr< ZPP_AABB_obj > __new();
		static hx::ObjectPtr< ZPP_AABB_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_AABB_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_AABB","\x65","\x9f","\x37","\xf5"); }

		static void __boot();
		static  ::zpp_nape::geom::ZPP_AABB zpp_pool;
		static  ::zpp_nape::geom::ZPP_AABB get(Float minx,Float miny,Float maxx,Float maxy);
		static ::Dynamic get_dyn();

		 ::Dynamic _invalidate;
		Dynamic _invalidate_dyn() { return _invalidate;}
		 ::Dynamic _validate;
		Dynamic _validate_dyn() { return _validate;}
		bool _immutable;
		void validate();
		::Dynamic validate_dyn();

		void invalidate();
		::Dynamic invalidate_dyn();

		 ::nape::geom::AABB outer;
		 ::nape::geom::AABB wrapper();
		::Dynamic wrapper_dyn();

		 ::zpp_nape::geom::ZPP_AABB next;
		void alloc();
		::Dynamic alloc_dyn();

		void free();
		::Dynamic free_dyn();

		 ::zpp_nape::geom::ZPP_AABB copy();
		::Dynamic copy_dyn();

		Float width();
		::Dynamic width_dyn();

		Float height();
		::Dynamic height_dyn();

		Float perimeter();
		::Dynamic perimeter_dyn();

		Float minx;
		Float miny;
		 ::nape::geom::Vec2 wrap_min;
		 ::nape::geom::Vec2 getmin();
		::Dynamic getmin_dyn();

		void dom_min();
		::Dynamic dom_min_dyn();

		void mod_min( ::zpp_nape::geom::ZPP_Vec2 min);
		::Dynamic mod_min_dyn();

		Float maxx;
		Float maxy;
		 ::nape::geom::Vec2 wrap_max;
		 ::nape::geom::Vec2 getmax();
		::Dynamic getmax_dyn();

		void dom_max();
		::Dynamic dom_max_dyn();

		void mod_max( ::zpp_nape::geom::ZPP_Vec2 max);
		::Dynamic mod_max_dyn();

		bool intersectX( ::zpp_nape::geom::ZPP_AABB x);
		::Dynamic intersectX_dyn();

		bool intersectY( ::zpp_nape::geom::ZPP_AABB x);
		::Dynamic intersectY_dyn();

		bool intersect( ::zpp_nape::geom::ZPP_AABB x);
		::Dynamic intersect_dyn();

		void combine( ::zpp_nape::geom::ZPP_AABB x);
		::Dynamic combine_dyn();

		bool contains( ::zpp_nape::geom::ZPP_AABB x);
		::Dynamic contains_dyn();

		bool containsPoint( ::zpp_nape::geom::ZPP_Vec2 v);
		::Dynamic containsPoint_dyn();

		void setCombine( ::zpp_nape::geom::ZPP_AABB a, ::zpp_nape::geom::ZPP_AABB b);
		::Dynamic setCombine_dyn();

		void setExpand( ::zpp_nape::geom::ZPP_AABB a,Float fatten);
		::Dynamic setExpand_dyn();

		void setExpandPoint(Float x,Float y);
		::Dynamic setExpandPoint_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace zpp_nape
} // end namespace geom

#endif /* INCLUDED_zpp_nape_geom_ZPP_AABB */ 
