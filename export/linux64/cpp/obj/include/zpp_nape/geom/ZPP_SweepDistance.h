// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_geom_ZPP_SweepDistance
#define INCLUDED_zpp_nape_geom_ZPP_SweepDistance

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_SweepDistance)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_ToiEvent)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Vec2)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Body)
HX_DECLARE_CLASS2(zpp_nape,phys,ZPP_Interactor)
HX_DECLARE_CLASS2(zpp_nape,shape,ZPP_Shape)

namespace zpp_nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES ZPP_SweepDistance_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_SweepDistance_obj OBJ_;
		ZPP_SweepDistance_obj();

	public:
		enum { _hx_ClassId = 0x06897eef };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="zpp_nape.geom.ZPP_SweepDistance")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"zpp_nape.geom.ZPP_SweepDistance"); }

		hx::ObjectPtr< ZPP_SweepDistance_obj > __new() {
			hx::ObjectPtr< ZPP_SweepDistance_obj > __this = new ZPP_SweepDistance_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ZPP_SweepDistance_obj > __alloc(hx::Ctx *_hx_ctx) {
			ZPP_SweepDistance_obj *__this = (ZPP_SweepDistance_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SweepDistance_obj), false, "zpp_nape.geom.ZPP_SweepDistance"));
			*(void **)__this = ZPP_SweepDistance_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_SweepDistance_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_SweepDistance","\xbc","\x0b","\x88","\x87"); }

		static void dynamicSweep( ::zpp_nape::geom::ZPP_ToiEvent toi,Float timeStep,Float lowerBound,Float negRadius,hx::Null< bool >  userAPI);
		static ::Dynamic dynamicSweep_dyn();

		static void staticSweep( ::zpp_nape::geom::ZPP_ToiEvent toi,Float timeStep,Float lowerBound,Float negRadius);
		static ::Dynamic staticSweep_dyn();

		static Float distanceBody( ::zpp_nape::phys::ZPP_Body b1, ::zpp_nape::phys::ZPP_Body b2, ::zpp_nape::geom::ZPP_Vec2 w1, ::zpp_nape::geom::ZPP_Vec2 w2);
		static ::Dynamic distanceBody_dyn();

		static Float distance( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2, ::zpp_nape::geom::ZPP_Vec2 w1, ::zpp_nape::geom::ZPP_Vec2 w2, ::zpp_nape::geom::ZPP_Vec2 axis,hx::Null< Float >  upperBound);
		static ::Dynamic distance_dyn();

};

} // end namespace zpp_nape
} // end namespace geom

#endif /* INCLUDED_zpp_nape_geom_ZPP_SweepDistance */ 
