// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#define INCLUDED_zpp_nape_geom_ZPP_Vec2

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Vec2)

namespace zpp_nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES ZPP_Vec2_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_Vec2_obj OBJ_;
		ZPP_Vec2_obj();

	public:
		enum { _hx_ClassId = 0x1c1a4770 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.geom.ZPP_Vec2")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.geom.ZPP_Vec2"); }
		static hx::ObjectPtr< ZPP_Vec2_obj > __new();
		static hx::ObjectPtr< ZPP_Vec2_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Vec2_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Vec2","\x43","\x88","\x34","\x03"); }

		static void __boot();
		static  ::zpp_nape::geom::ZPP_Vec2 zpp_pool;
		static  ::zpp_nape::geom::ZPP_Vec2 get(Float x,Float y,hx::Null< bool >  immutable);
		static ::Dynamic get_dyn();

		 ::Dynamic _invalidate;
		Dynamic _invalidate_dyn() { return _invalidate;}
		 ::Dynamic _validate;
		Dynamic _validate_dyn() { return _validate;}
		void validate();
		::Dynamic validate_dyn();

		void invalidate();
		::Dynamic invalidate_dyn();

		bool _immutable;
		 ::Dynamic _isimmutable;
		Dynamic _isimmutable_dyn() { return _isimmutable;}
		void immutable();
		::Dynamic immutable_dyn();

		 ::nape::geom::Vec2 outer;
		 ::nape::geom::Vec2 wrapper();
		::Dynamic wrapper_dyn();

		bool weak;
		void free();
		::Dynamic free_dyn();

		void alloc();
		::Dynamic alloc_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 next;
		 ::zpp_nape::geom::ZPP_Vec2 elem();
		::Dynamic elem_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 begin();
		::Dynamic begin_dyn();

		bool _inuse;
		bool modified;
		bool pushmod;
		int length;
		void setbegin( ::zpp_nape::geom::ZPP_Vec2 i);
		::Dynamic setbegin_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 add( ::zpp_nape::geom::ZPP_Vec2 o);
		::Dynamic add_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 inlined_add( ::zpp_nape::geom::ZPP_Vec2 o);
		::Dynamic inlined_add_dyn();

		void addAll( ::zpp_nape::geom::ZPP_Vec2 x);
		::Dynamic addAll_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 insert( ::zpp_nape::geom::ZPP_Vec2 cur, ::zpp_nape::geom::ZPP_Vec2 o);
		::Dynamic insert_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 inlined_insert( ::zpp_nape::geom::ZPP_Vec2 cur, ::zpp_nape::geom::ZPP_Vec2 o);
		::Dynamic inlined_insert_dyn();

		void pop();
		::Dynamic pop_dyn();

		void inlined_pop();
		::Dynamic inlined_pop_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 pop_unsafe();
		::Dynamic pop_unsafe_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 inlined_pop_unsafe();
		::Dynamic inlined_pop_unsafe_dyn();

		void remove( ::zpp_nape::geom::ZPP_Vec2 obj);
		::Dynamic remove_dyn();

		bool try_remove( ::zpp_nape::geom::ZPP_Vec2 obj);
		::Dynamic try_remove_dyn();

		void inlined_remove( ::zpp_nape::geom::ZPP_Vec2 obj);
		::Dynamic inlined_remove_dyn();

		bool inlined_try_remove( ::zpp_nape::geom::ZPP_Vec2 obj);
		::Dynamic inlined_try_remove_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 erase( ::zpp_nape::geom::ZPP_Vec2 pre);
		::Dynamic erase_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 inlined_erase( ::zpp_nape::geom::ZPP_Vec2 pre);
		::Dynamic inlined_erase_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 splice( ::zpp_nape::geom::ZPP_Vec2 pre,int n);
		::Dynamic splice_dyn();

		void clear();
		::Dynamic clear_dyn();

		void inlined_clear();
		::Dynamic inlined_clear_dyn();

		void reverse();
		::Dynamic reverse_dyn();

		bool empty();
		::Dynamic empty_dyn();

		int size();
		::Dynamic size_dyn();

		bool has( ::zpp_nape::geom::ZPP_Vec2 obj);
		::Dynamic has_dyn();

		bool inlined_has( ::zpp_nape::geom::ZPP_Vec2 obj);
		::Dynamic inlined_has_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 front();
		::Dynamic front_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 back();
		::Dynamic back_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 iterator_at(int ind);
		::Dynamic iterator_at_dyn();

		 ::zpp_nape::geom::ZPP_Vec2 at(int ind);
		::Dynamic at_dyn();

		Float x;
		Float y;
		 ::zpp_nape::geom::ZPP_Vec2 copy();
		::Dynamic copy_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace zpp_nape
} // end namespace geom

#endif /* INCLUDED_zpp_nape_geom_ZPP_Vec2 */ 
