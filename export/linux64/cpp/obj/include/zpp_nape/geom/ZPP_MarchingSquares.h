// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchingSquares
#define INCLUDED_zpp_nape_geom_ZPP_MarchingSquares

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,GeomPolyList)
HX_DECLARE_CLASS2(nape,geom,Vec2)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_GeomVert)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_MarchPair)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_MarchingSquares)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPArray2_Float)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPArray2_ZPP_GeomVert)
HX_DECLARE_CLASS2(zpp_nape,util,ZNPArray2_ZPP_MarchPair)

namespace zpp_nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES ZPP_MarchingSquares_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_MarchingSquares_obj OBJ_;
		ZPP_MarchingSquares_obj();

	public:
		enum { _hx_ClassId = 0x29af3641 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="zpp_nape.geom.ZPP_MarchingSquares")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"zpp_nape.geom.ZPP_MarchingSquares"); }
		static hx::ObjectPtr< ZPP_MarchingSquares_obj > __new();
		static hx::ObjectPtr< ZPP_MarchingSquares_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_MarchingSquares_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_MarchingSquares","\x32","\x0a","\x0d","\x95"); }

		static void __boot();
		static  ::zpp_nape::geom::ZPP_MarchingSquares me;
		static  ::zpp_nape::util::ZNPArray2_Float isos;
		static  ::zpp_nape::util::ZNPArray2_ZPP_GeomVert ints;
		static  ::zpp_nape::util::ZNPArray2_ZPP_MarchPair map;
		static void run( ::Dynamic iso,Float bx0,Float by0,Float bx1,Float by1, ::nape::geom::Vec2 cell,int quality,bool combine, ::nape::geom::GeomPolyList ret);
		static ::Dynamic run_dyn();

		static ::Array< int > look_march;
		static Float ISO( ::Dynamic iso,Float x,Float y);
		static ::Dynamic ISO_dyn();

		void output( ::nape::geom::GeomPolyList ret, ::zpp_nape::geom::ZPP_GeomVert poly);
		::Dynamic output_dyn();

		 ::zpp_nape::geom::ZPP_GeomVert linkright( ::zpp_nape::geom::ZPP_GeomVert poly,int key);
		::Dynamic linkright_dyn();

		 ::zpp_nape::geom::ZPP_GeomVert linkleft( ::zpp_nape::geom::ZPP_GeomVert poly,int key);
		::Dynamic linkleft_dyn();

		 ::zpp_nape::geom::ZPP_GeomVert linkdown( ::zpp_nape::geom::ZPP_GeomVert poly,int key);
		::Dynamic linkdown_dyn();

		 ::zpp_nape::geom::ZPP_GeomVert linkup( ::zpp_nape::geom::ZPP_GeomVert poly,int key);
		::Dynamic linkup_dyn();

		void combLR( ::zpp_nape::geom::ZPP_MarchPair a, ::zpp_nape::geom::ZPP_MarchPair b);
		::Dynamic combLR_dyn();

		void combUD( ::zpp_nape::geom::ZPP_MarchPair a, ::zpp_nape::geom::ZPP_MarchPair b);
		::Dynamic combUD_dyn();

		void combUD_virtual( ::zpp_nape::geom::ZPP_MarchPair a, ::zpp_nape::geom::ZPP_MarchPair b);
		::Dynamic combUD_virtual_dyn();

		bool combLeft(int key);
		::Dynamic combLeft_dyn();

		bool combRight(int key);
		::Dynamic combRight_dyn();

		bool combUp(int key);
		::Dynamic combUp_dyn();

		bool combDown(int key);
		::Dynamic combDown_dyn();

		bool comb(int flag);
		::Dynamic comb_dyn();

		 ::zpp_nape::geom::ZPP_MarchPair marchSquare( ::Dynamic iso, ::zpp_nape::util::ZNPArray2_Float isos, ::zpp_nape::util::ZNPArray2_ZPP_GeomVert ints,Float x0,Float y0,Float x1,Float y1,int xn,int yn,bool fstx,bool fsty,bool sndx,bool sndy,int quality);
		::Dynamic marchSquare_dyn();

		Float lerp(Float x0,Float x1,Float v0,Float v1);
		::Dynamic lerp_dyn();

		Float xlerp(Float x0,Float x1,Float y,Float v0,Float v1, ::Dynamic iso,int quality);
		::Dynamic xlerp_dyn();

		Float ylerp(Float y0,Float y1,Float x,Float v0,Float v1, ::Dynamic iso,int quality);
		::Dynamic ylerp_dyn();

};

} // end namespace zpp_nape
} // end namespace geom

#endif /* INCLUDED_zpp_nape_geom_ZPP_MarchingSquares */ 
