// Generated by Haxe 3.4.0
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#define INCLUDED_zpp_nape_geom_ZPP_Mat23

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nape,geom,Mat23)
HX_DECLARE_CLASS2(zpp_nape,geom,ZPP_Mat23)

namespace zpp_nape{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES ZPP_Mat23_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ZPP_Mat23_obj OBJ_;
		ZPP_Mat23_obj();

	public:
		enum { _hx_ClassId = 0x49b10e0f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="zpp_nape.geom.ZPP_Mat23")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"zpp_nape.geom.ZPP_Mat23"); }
		static hx::ObjectPtr< ZPP_Mat23_obj > __new();
		static hx::ObjectPtr< ZPP_Mat23_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ZPP_Mat23_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ZPP_Mat23","\xdc","\x85","\x8f","\x99"); }

		static void __boot();
		static  ::zpp_nape::geom::ZPP_Mat23 zpp_pool;
		static  ::zpp_nape::geom::ZPP_Mat23 get();
		static ::Dynamic get_dyn();

		static  ::zpp_nape::geom::ZPP_Mat23 identity();
		static ::Dynamic identity_dyn();

		 ::nape::geom::Mat23 outer;
		 ::nape::geom::Mat23 wrapper();
		::Dynamic wrapper_dyn();

		Float a;
		Float b;
		Float c;
		Float d;
		Float tx;
		Float ty;
		 ::Dynamic _invalidate;
		Dynamic _invalidate_dyn() { return _invalidate;}
		void invalidate();
		::Dynamic invalidate_dyn();

		void set( ::zpp_nape::geom::ZPP_Mat23 m);
		::Dynamic set_dyn();

		void setas(Float a,Float b,Float c,Float d,Float tx,Float ty);
		::Dynamic setas_dyn();

		 ::zpp_nape::geom::ZPP_Mat23 next;
		void free();
		::Dynamic free_dyn();

		void alloc();
		::Dynamic alloc_dyn();

};

} // end namespace zpp_nape
} // end namespace geom

#endif /* INCLUDED_zpp_nape_geom_ZPP_Mat23 */ 
