// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_debug_SystemUsage
#include <debug/SystemUsage.h>
#endif
#ifndef INCLUDED_debug__SystemUsage_Consolas
#include <debug/_SystemUsage/Consolas.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_system_System
#include <openfl/_legacy/system/System.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_Font
#include <openfl/_legacy/text/Font.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_FontStyle
#include <openfl/_legacy/text/FontStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_FontType
#include <openfl/_legacy/text/FontType.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b0a534156c4f9d4_15_new,"debug.SystemUsage","new",0xb9ade969,"debug.SystemUsage.new","debug/SystemUsage.hx",15,0x178995e8)
HX_DEFINE_STACK_FRAME(_hx_pos_9b0a534156c4f9d4_35__onEnter,"debug.SystemUsage","_onEnter",0xe61deb51,"debug.SystemUsage._onEnter","debug/SystemUsage.hx",35,0x178995e8)
namespace debug{

void SystemUsage_obj::__construct(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y,hx::Null< int >  __o_a_color){
Float a_x = __o_a_x.Default(((Float)10.0));
Float a_y = __o_a_y.Default(((Float)10.0));
int a_color = __o_a_color.Default(16777215);
            	HX_GC_STACKFRAME(&_hx_pos_9b0a534156c4f9d4_15_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_x,"a_x")
            	HX_STACK_ARG(a_y,"a_y")
            	HX_STACK_ARG(a_color,"a_color")
HXLINE(  19)		this->memoryPeak = ((Float)0);
HXLINE(  22)		super::__construct();
HXLINE(  24)		::openfl::_legacy::text::Font_obj::registerFont(hx::ClassOf< ::debug::_SystemUsage::Consolas >());
HXLINE(  25)		this->set_defaultTextFormat( ::openfl::_legacy::text::TextFormat_obj::__alloc( HX_CTX , ::debug::_SystemUsage::Consolas_obj::__alloc( HX_CTX ,null(),null(),null())->fontName,(int)18,a_color,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  26)		this->times = ::Array_obj< Float >::__new(0);
HXLINE(  27)		this->set_x(a_x);
HXLINE(  28)		this->set_y(a_y);
HXLINE(  29)		this->set_width((int)600);
HXLINE(  30)		this->set_height((int)70);
HXLINE(  31)		this->set_selectable(false);
HXLINE(  32)		this->addEventListener(::openfl::_legacy::events::Event_obj::ENTER_FRAME,this->_onEnter_dyn(),null(),null(),null());
            	}

Dynamic SystemUsage_obj::__CreateEmpty() { return new SystemUsage_obj; }

void *SystemUsage_obj::_hx_vtable = 0;

Dynamic SystemUsage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SystemUsage_obj > _hx_result = new SystemUsage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SystemUsage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5fcdb6d3) {
		if (inClassId<=(int)0x3d2d7617) {
			if (inClassId<=(int)0x25b00754) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25b00754;
			} else {
				return inClassId==(int)0x3d2d7617;
			}
		} else {
			return inClassId==(int)0x5fcdb6d3;
		}
	} else {
		return inClassId==(int)0x7e48c108 || inClassId==(int)0x7e6e0deb;
	}
}

void SystemUsage_obj::_onEnter( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9b0a534156c4f9d4_35__onEnter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE(  36)		HX_VARI( Float,now) = ::haxe::Timer_obj::stamp();
HXLINE(  37)		HX_VARI( Float,memory) = ((Float)::Math_obj::round((((Float)((Float)::openfl::_legacy::_hx_system::System_obj::get_totalMemory() / (Float)(int)1024) / (Float)(int)1024) * (int)100)) / (Float)(int)100);
HXLINE(  39)		this->times->push(now);
HXLINE(  40)		while((this->times->__get((int)0) < (now - (int)1))){
HXLINE(  41)			this->times->shift();
            		}
HXLINE(  43)		if ((memory > this->memoryPeak)) {
HXLINE(  43)			this->memoryPeak = memory;
            		}
HXLINE(  44)		if (this->get_visible()) {
HXLINE(  45)			this->set_text((((((((HX_("FPS : ",9d,da,fe,43) + this->times->length) + HX_("\nMEM : ",7b,5b,f5,56)) + memory) + HX_(" MB\n",f5,7a,61,15)) + HX_("MEM peak : ",dc,64,03,e4)) + this->memoryPeak) + HX_(" MB",75,8b,18,00)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SystemUsage_obj,_onEnter,(void))

::String SystemUsage_obj::CONSOLAS;


hx::ObjectPtr< SystemUsage_obj > SystemUsage_obj::__new(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y,hx::Null< int >  __o_a_color) {
	hx::ObjectPtr< SystemUsage_obj > __this = new SystemUsage_obj();
	__this->__construct(__o_a_x,__o_a_y,__o_a_color);
	return __this;
}

hx::ObjectPtr< SystemUsage_obj > SystemUsage_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y,hx::Null< int >  __o_a_color) {
	SystemUsage_obj *__this = (SystemUsage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SystemUsage_obj), true, "debug.SystemUsage"));
	*(void **)__this = SystemUsage_obj::_hx_vtable;
	__this->__construct(__o_a_x,__o_a_y,__o_a_color);
	return __this;
}

SystemUsage_obj::SystemUsage_obj()
{
}

void SystemUsage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SystemUsage);
	HX_MARK_MEMBER_NAME(times,"times");
	HX_MARK_MEMBER_NAME(memoryPeak,"memoryPeak");
	 ::openfl::_legacy::text::TextField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SystemUsage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(times,"times");
	HX_VISIT_MEMBER_NAME(memoryPeak,"memoryPeak");
	 ::openfl::_legacy::text::TextField_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SystemUsage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { return hx::Val( times); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_onEnter") ) { return hx::Val( _onEnter_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"memoryPeak") ) { return hx::Val( memoryPeak); }
	}
	return super::__Field(inName,inCallProp);
}

bool SystemUsage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"CONSOLAS") ) { outValue = CONSOLAS; return true; }
	}
	return false;
}

hx::Val SystemUsage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { times=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"memoryPeak") ) { memoryPeak=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SystemUsage_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"CONSOLAS") ) { CONSOLAS=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void SystemUsage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("times","\xc6","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("memoryPeak","\xc0","\xe9","\x95","\xf0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SystemUsage_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(SystemUsage_obj,times),HX_HCSTRING("times","\xc6","\xbf","\x35","\x10")},
	{hx::fsFloat,(int)offsetof(SystemUsage_obj,memoryPeak),HX_HCSTRING("memoryPeak","\xc0","\xe9","\x95","\xf0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SystemUsage_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &SystemUsage_obj::CONSOLAS,HX_HCSTRING("CONSOLAS","\xc0","\x8d","\xdd","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SystemUsage_obj_sMemberFields[] = {
	HX_HCSTRING("times","\xc6","\xbf","\x35","\x10"),
	HX_HCSTRING("memoryPeak","\xc0","\xe9","\x95","\xf0"),
	HX_HCSTRING("_onEnter","\xfa","\x64","\x7c","\x40"),
	::String(null()) };

static void SystemUsage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SystemUsage_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SystemUsage_obj::CONSOLAS,"CONSOLAS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SystemUsage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SystemUsage_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SystemUsage_obj::CONSOLAS,"CONSOLAS");
};

#endif

hx::Class SystemUsage_obj::__mClass;

static ::String SystemUsage_obj_sStaticFields[] = {
	HX_HCSTRING("CONSOLAS","\xc0","\x8d","\xdd","\xfb"),
	::String(null())
};

void SystemUsage_obj::__register()
{
	hx::Object *dummy = new SystemUsage_obj;
	SystemUsage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("debug.SystemUsage","\xf7","\x00","\x79","\x32");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SystemUsage_obj::__GetStatic;
	__mClass->mSetStaticField = &SystemUsage_obj::__SetStatic;
	__mClass->mMarkFunc = SystemUsage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SystemUsage_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SystemUsage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SystemUsage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SystemUsage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemUsage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemUsage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace debug
