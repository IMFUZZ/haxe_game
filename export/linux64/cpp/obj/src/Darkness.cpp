// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Clock
#include <Clock.h>
#endif
#ifndef INCLUDED_Darkness
#include <Darkness.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif

void Darkness_obj::__construct( ::Dynamic __o_a_x, ::Dynamic __o_a_y){
 ::Dynamic a_x = __o_a_x.Default(0);
 ::Dynamic a_y = __o_a_y.Default(0);
            	HX_STACK_FRAME("Darkness","new",0x63afbf9f,"Darkness.new","Darkness.hx",14,0xb26258b1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_x,"a_x")
            	HX_STACK_ARG(a_y,"a_y")
HXLINE(  15)		super::__construct(a_x,a_y,null());
HXLINE(  17)		this->_lightSources = ::Array_obj< ::Dynamic>::__new();
HXLINE(  18)		this->makeGraphic(::flixel::FlxG_obj::camera->width,::flixel::FlxG_obj::camera->height,(int)-16777216,null(),null());
HXLINE(  19)		this->set_blend(::openfl::_legacy::display::BlendMode_obj::MULTIPLY_dyn());
HXLINE(  20)		this->scrollFactor->set_x((int)0);
HXLINE(  21)		this->scrollFactor->set_y((int)0);
            	}

Dynamic Darkness_obj::__CreateEmpty() { return new Darkness_obj; }

hx::ObjectPtr< Darkness_obj > Darkness_obj::__new( ::Dynamic __o_a_x, ::Dynamic __o_a_y)
{
	hx::ObjectPtr< Darkness_obj > _hx_result = new Darkness_obj();
	_hx_result->__construct(__o_a_x,__o_a_y);
	return _hx_result;
}

Dynamic Darkness_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Darkness_obj > _hx_result = new Darkness_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void Darkness_obj::update(Float elapsed){
            	HX_STACK_FRAME("Darkness","update",0x922d682a,"Darkness.update","Darkness.hx",24,0xb26258b1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  25)		this->super::update(elapsed);
HXLINE(  26)		this->updateLightSources(elapsed);
            	}


void Darkness_obj::addLightSource(::flixel::FlxSprite a_lightSource){
            	HX_STACK_FRAME("Darkness","addLightSource",0x864f6cd1,"Darkness.addLightSource","Darkness.hx",30,0xb26258b1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_lightSource,"a_lightSource")
HXLINE(  30)		this->_lightSources->push(a_lightSource);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Darkness_obj,addLightSource,(void))

void Darkness_obj::updateLightSources(Float elapsed){
            	HX_STACK_FRAME("Darkness","updateLightSources",0x27cb584c,"Darkness.updateLightSources","Darkness.hx",34,0xb26258b1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  34)		Bool _hx_tmp;
HXDLIN(  34)		::Clock _this = ::Shared_obj::clock;
HXDLIN(  34)		Float _hx_tmp1;
HXDLIN(  34)		if ((_this->time > (int)0)) {
HXLINE(  34)			_hx_tmp1 = ((Float)_this->_timeCounter / (Float)_this->time);
            		}
            		else {
HXLINE(  34)			_hx_tmp1 = (int)0;
            		}
HXDLIN(  34)		if ((_hx_tmp1 > ((Float)0.15))) {
HXLINE(  34)			::Clock _this1 = ::Shared_obj::clock;
HXDLIN(  34)			Float _hx_tmp2;
HXDLIN(  34)			if ((_this1->time > (int)0)) {
HXLINE(  34)				_hx_tmp2 = ((Float)_this1->_timeCounter / (Float)_this1->time);
            			}
            			else {
HXLINE(  34)				_hx_tmp2 = (int)0;
            			}
HXDLIN(  34)			_hx_tmp = (_hx_tmp2 < ((Float)0.50));
            		}
            		else {
HXLINE(  34)			_hx_tmp = false;
            		}
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  35)			::Clock _this2 = ::Shared_obj::clock;
HXDLIN(  35)			Float _hx_tmp3;
HXDLIN(  35)			if ((_this2->time > (int)0)) {
HXLINE(  35)				_hx_tmp3 = ((Float)_this2->_timeCounter / (Float)_this2->time);
            			}
            			else {
HXLINE(  35)				_hx_tmp3 = (int)0;
            			}
HXDLIN(  35)			Int _hx_tmp4 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::getDarkened((int)-1,(((Float)1.0) - ((_hx_tmp3 - ((Float)0.15)) * ((Float)4.25))));
HXDLIN(  35)			::flixel::util::FlxSpriteUtil_obj::fill(hx::ObjectPtr<OBJ_>(this),_hx_tmp4);
HXLINE(  36)			this->stampLightSources(elapsed);
            		}
            		else {
HXLINE(  37)			::Clock _this3 = ::Shared_obj::clock;
HXDLIN(  37)			Float _hx_tmp5;
HXDLIN(  37)			if ((_this3->time > (int)0)) {
HXLINE(  37)				_hx_tmp5 = ((Float)_this3->_timeCounter / (Float)_this3->time);
            			}
            			else {
HXLINE(  37)				_hx_tmp5 = (int)0;
            			}
HXDLIN(  37)			if ((_hx_tmp5 < ((Float)0.15))) {
HXLINE(  38)				::flixel::util::FlxSpriteUtil_obj::fill(hx::ObjectPtr<OBJ_>(this),(int)-16777216);
HXLINE(  39)				this->stampLightSources(elapsed);
            			}
            			else {
HXLINE(  40)				::Clock _this4 = ::Shared_obj::clock;
HXDLIN(  40)				Float _hx_tmp6;
HXDLIN(  40)				if ((_this4->time > (int)0)) {
HXLINE(  40)					_hx_tmp6 = ((Float)_this4->_timeCounter / (Float)_this4->time);
            				}
            				else {
HXLINE(  40)					_hx_tmp6 = (int)0;
            				}
HXDLIN(  40)				if ((_hx_tmp6 > ((Float)0.75))) {
HXLINE(  41)					::Clock _this5 = ::Shared_obj::clock;
HXDLIN(  41)					Float _hx_tmp7;
HXDLIN(  41)					if ((_this5->time > (int)0)) {
HXLINE(  41)						_hx_tmp7 = ((Float)_this5->_timeCounter / (Float)_this5->time);
            					}
            					else {
HXLINE(  41)						_hx_tmp7 = (int)0;
            					}
HXDLIN(  41)					Int _hx_tmp8 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::getDarkened((int)-1,((_hx_tmp7 - ((Float)0.75)) * ((Float)4.25)));
HXDLIN(  41)					::flixel::util::FlxSpriteUtil_obj::fill(hx::ObjectPtr<OBJ_>(this),_hx_tmp8);
HXLINE(  42)					this->stampLightSources(elapsed);
            				}
            				else {
HXLINE(  44)					::flixel::util::FlxSpriteUtil_obj::fill(hx::ObjectPtr<OBJ_>(this),(int)-1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Darkness_obj,updateLightSources,(void))

void Darkness_obj::stampLightSources(Float elapsed){
            	HX_STACK_FRAME("Darkness","stampLightSources",0xd2eec124,"Darkness.stampLightSources","Darkness.hx",49,0xb26258b1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  49)		Int _g = (int)0;
HXDLIN(  49)		::Array< ::Dynamic> _g1 = this->_lightSources;
HXDLIN(  49)		while((_g < _g1->length)){
HXLINE(  49)			::flixel::FlxSprite _light = _g1->__get(_g).StaticCast< ::flixel::FlxSprite >();
HXDLIN(  49)			++_g;
HXLINE(  50)			_light->update(elapsed);
HXLINE(  51)			Float _hx_tmp = (_light->x - ::flixel::FlxG_obj::camera->scroll->x);
HXDLIN(  51)			Int _hx_tmp1 = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN(  51)			Float _hx_tmp2 = (_light->y - ::flixel::FlxG_obj::camera->scroll->y);
HXDLIN(  51)			Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN(  51)			this->stamp(_light,_hx_tmp1,_hx_tmp3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Darkness_obj,stampLightSources,(void))


Darkness_obj::Darkness_obj()
{
}

void Darkness_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Darkness);
	HX_MARK_MEMBER_NAME(_lightSources,"_lightSources");
	::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Darkness_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_lightSources,"_lightSources");
	::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Darkness_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_lightSources") ) { return hx::Val( _lightSources); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addLightSource") ) { return hx::Val( addLightSource_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stampLightSources") ) { return hx::Val( stampLightSources_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateLightSources") ) { return hx::Val( updateLightSources_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Darkness_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"_lightSources") ) { _lightSources=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Darkness_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_lightSources","\xe1","\x9f","\xe9","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Darkness_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Darkness_obj,_lightSources),HX_HCSTRING("_lightSources","\xe1","\x9f","\xe9","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Darkness_obj_sStaticStorageInfo = 0;
#endif

static ::String Darkness_obj_sMemberFields[] = {
	HX_HCSTRING("_lightSources","\xe1","\x9f","\xe9","\xfb"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("addLightSource","\xb0","\x01","\x57","\x2c"),
	HX_HCSTRING("updateLightSources","\xab","\x48","\x88","\x91"),
	HX_HCSTRING("stampLightSources","\xa5","\x41","\x42","\xd2"),
	::String(null()) };

static void Darkness_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Darkness_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Darkness_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Darkness_obj::__mClass,"__mClass");
};

#endif

hx::Class Darkness_obj::__mClass;

void Darkness_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Darkness","\x2d","\x04","\x9a","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Darkness_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Darkness_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Darkness_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Darkness_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Darkness_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Darkness_obj_sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

