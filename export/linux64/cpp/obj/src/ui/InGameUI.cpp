// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_characters_Character
#include <characters/Character.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIBar
#include <flixel/addons/ui/FlxUIBar.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gametime_Clock
#include <gametime/Clock.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_items_Inventory
#include <items/Inventory.h>
#endif
#ifndef INCLUDED_ui_InGameUI
#include <ui/InGameUI.h>
#endif
#ifndef INCLUDED_ui_InventoryBar
#include <ui/InventoryBar.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6c9915696fc5a1fe_26_new,"ui.InGameUI","new",0xbfba3977,"ui.InGameUI.new","ui/InGameUI.hx",26,0x6bef4f78)
HX_DEFINE_STACK_FRAME(_hx_pos_6c9915696fc5a1fe_16_new,"ui.InGameUI","new",0xbfba3977,"ui.InGameUI.new","ui/InGameUI.hx",16,0x6bef4f78)
HX_DEFINE_STACK_FRAME(_hx_pos_6c9915696fc5a1fe_46_update,"ui.InGameUI","update",0x61faa552,"ui.InGameUI.update","ui/InGameUI.hx",46,0x6bef4f78)
HX_DEFINE_STACK_FRAME(_hx_pos_6c9915696fc5a1fe_53_link,"ui.InGameUI","link",0x01e8a303,"ui.InGameUI.link","ui/InGameUI.hx",53,0x6bef4f78)
HX_DEFINE_STACK_FRAME(_hx_pos_6c9915696fc5a1fe_63_setHealthBar,"ui.InGameUI","setHealthBar",0x5c97869e,"ui.InGameUI.setHealthBar","ui/InGameUI.hx",63,0x6bef4f78)
HX_DEFINE_STACK_FRAME(_hx_pos_6c9915696fc5a1fe_71_showInventory,"ui.InGameUI","showInventory",0x41b3c5b6,"ui.InGameUI.showInventory","ui/InGameUI.hx",71,0x6bef4f78)
namespace ui{

void InGameUI_obj::__construct( ::Player player){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::ui::InGameUI,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_6c9915696fc5a1fe_26_new)
HXLINE(  26)			_gthis->callEvent(HX_("ONCLICK",a9,7e,42,cb),_gthis,HX_("SHOW_INVENTORY",7a,fd,af,71),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_6c9915696fc5a1fe_16_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(player,"player")
HXLINE(  16)		HX_VARI(  ::ui::InGameUI,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  17)		super::__construct(null(),player,null(),null(),null(),null());
HXLINE(  20)		this->scrollFactor->set_x((int)0);
HXLINE(  21)		this->scrollFactor->set_y((int)0);
HXLINE(  25)		this->inventoryButton =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,(int)100,(int)100,HX_("Inventory",7c,56,89,ea), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
HXLINE(  30)		this->inventoryBar =  ::ui::InventoryBar_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::camera->height - (int)34),HX_("assets/images/inventoryBar.png",fd,4e,da,76));
HXLINE(  33)		this->mainTextBox =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::camera->width - (int)150),(int)10,(int)150,HX_("",00,00,00,00),(int)20,null());
HXLINE(  39)		this->setHealthBar(player->character);
HXLINE(  41)		this->add(this->inventoryButton);
HXLINE(  42)		this->add(this->inventoryBar);
HXLINE(  43)		this->add(this->mainTextBox);
            	}

Dynamic InGameUI_obj::__CreateEmpty() { return new InGameUI_obj; }

void *InGameUI_obj::_hx_vtable = 0;

Dynamic InGameUI_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InGameUI_obj > _hx_result = new InGameUI_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InGameUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x282173df) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x263b73ac || inClassId==(int)0x282173df;
		}
	} else {
		if (inClassId<=(int)0x35a2b523) {
			return inClassId==(int)0x2e105115 || inClassId==(int)0x35a2b523;
		} else {
			return inClassId==(int)0x54c34e23;
		}
	}
}

void InGameUI_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6c9915696fc5a1fe_46_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  47)		this->super::update(elapsed);
HXLINE(  50)		 ::flixel::addons::ui::FlxUIText _hx_tmp = this->mainTextBox;
HXDLIN(  50)		::String _hx_tmp1 = ((HX_("Time : ",b9,1c,0c,a6) + ::Shared_obj::clock->getCurrentHour()) + HX_(":",3a,00,00,00));
HXDLIN(  50)		_hx_tmp->set_text((_hx_tmp1 + ::Shared_obj::clock->getCurrentMinute()));
            	}


void InGameUI_obj::link( ::characters::Character character){
            	HX_GC_STACKFRAME(&_hx_pos_6c9915696fc5a1fe_53_link)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(character,"character")
HXLINE(  55)		this->inventoryBar->destroy();
HXLINE(  56)		this->inventoryBar =  ::ui::InventoryBar_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::camera->height - (int)34),HX_("assets/images/inventoryBar.png",fd,4e,da,76));
HXLINE(  57)		this->add(this->inventoryBar);
HXLINE(  59)		this->setHealthBar(character);
            	}


HX_DEFINE_DYNAMIC_FUNC1(InGameUI_obj,link,(void))

void InGameUI_obj::setHealthBar( ::characters::Character character){
            	HX_GC_STACKFRAME(&_hx_pos_6c9915696fc5a1fe_63_setHealthBar)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(character,"character")
HXLINE(  63)		if (hx::IsNull( this->healthBar )) {
HXLINE(  64)			this->healthBar =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::camera->height - (int)10),null(),(int)100,(int)10,character,HX_("health",9c,28,06,fd),(int)0,(int)100,null());
HXLINE(  65)			this->add(this->healthBar);
            		}
            		else {
HXLINE(  67)			this->healthBar->setParent(character,HX_("health",9c,28,06,fd),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InGameUI_obj,setHealthBar,(void))

void InGameUI_obj::showInventory( ::items::Inventory inventory){
            	HX_STACKFRAME(&_hx_pos_6c9915696fc5a1fe_71_showInventory)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(inventory,"inventory")
HXLINE(  72)		::haxe::Log_obj::trace(HX_("Size of inventory : ",14,bd,7b,6e),hx::SourceInfo(HX_("InGameUI.hx",f3,9a,9f,c4),72,HX_("ui.InGameUI",05,b2,bc,5e),HX_("showInventory",df,79,d4,38)));
HXLINE(  73)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  73)		int _hx_tmp1 = inventory->getSize();
HXDLIN(  73)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("InGameUI.hx",f3,9a,9f,c4),73,HX_("ui.InGameUI",05,b2,bc,5e),HX_("showInventory",df,79,d4,38)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(InGameUI_obj,showInventory,(void))


hx::ObjectPtr< InGameUI_obj > InGameUI_obj::__new( ::Player player) {
	hx::ObjectPtr< InGameUI_obj > __this = new InGameUI_obj();
	__this->__construct(player);
	return __this;
}

hx::ObjectPtr< InGameUI_obj > InGameUI_obj::__alloc(hx::Ctx *_hx_ctx, ::Player player) {
	InGameUI_obj *__this = (InGameUI_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InGameUI_obj), true, "ui.InGameUI"));
	*(void **)__this = InGameUI_obj::_hx_vtable;
	__this->__construct(player);
	return __this;
}

InGameUI_obj::InGameUI_obj()
{
}

void InGameUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InGameUI);
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(inventoryButton,"inventoryButton");
	HX_MARK_MEMBER_NAME(inventoryBar,"inventoryBar");
	HX_MARK_MEMBER_NAME(mainTextBox,"mainTextBox");
	 ::flixel::addons::ui::FlxUI_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void InGameUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(inventoryButton,"inventoryButton");
	HX_VISIT_MEMBER_NAME(inventoryBar,"inventoryBar");
	HX_VISIT_MEMBER_NAME(mainTextBox,"mainTextBox");
	 ::flixel::addons::ui::FlxUI_obj::__Visit(HX_VISIT_ARG);
}

hx::Val InGameUI_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"link") ) { return hx::Val( link_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"healthBar") ) { return hx::Val( healthBar); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mainTextBox") ) { return hx::Val( mainTextBox); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inventoryBar") ) { return hx::Val( inventoryBar); }
		if (HX_FIELD_EQ(inName,"setHealthBar") ) { return hx::Val( setHealthBar_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"showInventory") ) { return hx::Val( showInventory_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"inventoryButton") ) { return hx::Val( inventoryButton); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InGameUI_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::addons::ui::FlxUIBar >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mainTextBox") ) { mainTextBox=inValue.Cast<  ::flixel::addons::ui::FlxUIText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inventoryBar") ) { inventoryBar=inValue.Cast<  ::ui::InventoryBar >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"inventoryButton") ) { inventoryButton=inValue.Cast<  ::flixel::addons::ui::FlxUIButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InGameUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("healthBar","\x97","\x8a","\x92","\x42"));
	outFields->push(HX_HCSTRING("inventoryButton","\xae","\x29","\x7c","\xff"));
	outFields->push(HX_HCSTRING("inventoryBar","\x97","\xfc","\x86","\xf3"));
	outFields->push(HX_HCSTRING("mainTextBox","\x25","\x6c","\xa7","\x3f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo InGameUI_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::addons::ui::FlxUIBar*/ ,(int)offsetof(InGameUI_obj,healthBar),HX_HCSTRING("healthBar","\x97","\x8a","\x92","\x42")},
	{hx::fsObject /*::flixel::addons::ui::FlxUIButton*/ ,(int)offsetof(InGameUI_obj,inventoryButton),HX_HCSTRING("inventoryButton","\xae","\x29","\x7c","\xff")},
	{hx::fsObject /*::ui::InventoryBar*/ ,(int)offsetof(InGameUI_obj,inventoryBar),HX_HCSTRING("inventoryBar","\x97","\xfc","\x86","\xf3")},
	{hx::fsObject /*::flixel::addons::ui::FlxUIText*/ ,(int)offsetof(InGameUI_obj,mainTextBox),HX_HCSTRING("mainTextBox","\x25","\x6c","\xa7","\x3f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InGameUI_obj_sStaticStorageInfo = 0;
#endif

static ::String InGameUI_obj_sMemberFields[] = {
	HX_HCSTRING("healthBar","\x97","\x8a","\x92","\x42"),
	HX_HCSTRING("inventoryButton","\xae","\x29","\x7c","\xff"),
	HX_HCSTRING("inventoryBar","\x97","\xfc","\x86","\xf3"),
	HX_HCSTRING("mainTextBox","\x25","\x6c","\xa7","\x3f"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("link","\xfa","\x17","\xb3","\x47"),
	HX_HCSTRING("setHealthBar","\x95","\x4a","\xe2","\x66"),
	HX_HCSTRING("showInventory","\xdf","\x79","\xd4","\x38"),
	::String(null()) };

static void InGameUI_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InGameUI_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InGameUI_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InGameUI_obj::__mClass,"__mClass");
};

#endif

hx::Class InGameUI_obj::__mClass;

void InGameUI_obj::__register()
{
	hx::Object *dummy = new InGameUI_obj;
	InGameUI_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ui.InGameUI","\x05","\xb2","\xbc","\x5e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InGameUI_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InGameUI_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InGameUI_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InGameUI_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InGameUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InGameUI_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
