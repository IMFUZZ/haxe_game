// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Clock
#include <Clock.h>
#endif
#ifndef INCLUDED_CustomController
#include <CustomController.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadAnalogList
#include <flixel/input/gamepad/lists/FlxGamepadAnalogList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadAnalogValueList
#include <flixel/input/gamepad/lists/FlxGamepadAnalogValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

void CustomController_obj::__construct(){
            	HX_STACK_FRAME("CustomController","new",0x4133f33f,"CustomController.new","CustomController.hx",39,0x79fa7911)
            	HX_STACK_THIS(this)
HXLINE(  40)		this->keyboardEventsOnPressed = ::haxe::ds::IntMap_obj::__new();
HXLINE(  41)		this->keyboardEventsOnJustPressed = ::haxe::ds::IntMap_obj::__new();
HXLINE(  42)		this->keyboardEventsOnJustReleased = ::haxe::ds::IntMap_obj::__new();
HXLINE(  43)		this->gamepadEventsOnPressed = ::haxe::ds::IntMap_obj::__new();
HXLINE(  44)		this->gamepadEventsOnJustPressed = ::haxe::ds::IntMap_obj::__new();
HXLINE(  45)		this->gamepadEventsOnJustReleased = ::haxe::ds::IntMap_obj::__new();
HXLINE(  46)		this->initDefaultEvents();
            	}

Dynamic CustomController_obj::__CreateEmpty() { return new CustomController_obj; }

hx::ObjectPtr< CustomController_obj > CustomController_obj::__new()
{
	hx::ObjectPtr< CustomController_obj > _hx_result = new CustomController_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CustomController_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CustomController_obj > _hx_result = new CustomController_obj();
	_hx_result->__construct();
	return _hx_result;
}

void CustomController_obj::addKeyboardEventOnPressed(Int a_actionKey, ::Dynamic a_action){
            	HX_STACK_FRAME("CustomController","addKeyboardEventOnPressed",0x4d64dff0,"CustomController.addKeyboardEventOnPressed","CustomController.hx",20,0x79fa7911)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_actionKey,"a_actionKey")
            	HX_STACK_ARG(a_action,"a_action")
HXLINE(  20)		this->keyboardEventsOnPressed->set(a_actionKey,a_action);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CustomController_obj,addKeyboardEventOnPressed,(void))

void CustomController_obj::addKeyboardEventOnJustPressed(Int a_actionKey, ::Dynamic a_action){
            	HX_STACK_FRAME("CustomController","addKeyboardEventOnJustPressed",0xbbf0da24,"CustomController.addKeyboardEventOnJustPressed","CustomController.hx",23,0x79fa7911)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_actionKey,"a_actionKey")
            	HX_STACK_ARG(a_action,"a_action")
HXLINE(  23)		this->keyboardEventsOnJustPressed->set(a_actionKey,a_action);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CustomController_obj,addKeyboardEventOnJustPressed,(void))

void CustomController_obj::addKeyboardEventOnJustReleased(Int a_actionKey, ::Dynamic a_action){
            	HX_STACK_FRAME("CustomController","addKeyboardEventOnJustReleased",0xbda412fb,"CustomController.addKeyboardEventOnJustReleased","CustomController.hx",26,0x79fa7911)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_actionKey,"a_actionKey")
            	HX_STACK_ARG(a_action,"a_action")
HXLINE(  26)		this->keyboardEventsOnJustReleased->set(a_actionKey,a_action);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CustomController_obj,addKeyboardEventOnJustReleased,(void))

void CustomController_obj::addGamepadEventOnPressed(Int a_actionKey, ::Dynamic a_action){
            	HX_STACK_FRAME("CustomController","addGamepadEventOnPressed",0x743cb72a,"CustomController.addGamepadEventOnPressed","CustomController.hx",30,0x79fa7911)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_actionKey,"a_actionKey")
            	HX_STACK_ARG(a_action,"a_action")
HXLINE(  30)		this->gamepadEventsOnPressed->set(a_actionKey,a_action);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CustomController_obj,addGamepadEventOnPressed,(void))

void CustomController_obj::addGamepadEventOnJustPressed(Int a_actionKey, ::Dynamic a_action){
            	HX_STACK_FRAME("CustomController","addGamepadEventOnJustPressed",0x263dd65e,"CustomController.addGamepadEventOnJustPressed","CustomController.hx",33,0x79fa7911)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_actionKey,"a_actionKey")
            	HX_STACK_ARG(a_action,"a_action")
HXLINE(  33)		this->gamepadEventsOnJustPressed->set(a_actionKey,a_action);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CustomController_obj,addGamepadEventOnJustPressed,(void))

void CustomController_obj::addGamepadEventOnJustReleased(Int a_actionKey, ::Dynamic a_action){
            	HX_STACK_FRAME("CustomController","addGamepadEventOnJustReleased",0x56b3c981,"CustomController.addGamepadEventOnJustReleased","CustomController.hx",36,0x79fa7911)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_actionKey,"a_actionKey")
            	HX_STACK_ARG(a_action,"a_action")
HXLINE(  36)		this->gamepadEventsOnJustReleased->set(a_actionKey,a_action);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CustomController_obj,addGamepadEventOnJustReleased,(void))

void CustomController_obj::update(){
            	HX_STACK_FRAME("CustomController","update",0x1ecd388a,"CustomController.update","CustomController.hx",49,0x79fa7911)
            	HX_STACK_THIS(this)
HXLINE(  50)		this->gamepad = ::flixel::FlxG_obj::gamepads->firstActive;
HXLINE(  51)		if (hx::IsNotNull( this->gamepad )) {
HXLINE(  52)			Bool _hx_tmp;
HXDLIN(  52)			::flixel::input::gamepad::FlxGamepad _this = this->gamepad->analog->value->gamepad;
HXDLIN(  52)			::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp1 = _this->mapping->getAnalogStick((int)19);
HXDLIN(  52)			Float _hx_tmp2 = _this->getYAxisRaw(_hx_tmp1);
HXDLIN(  52)			if ((_hx_tmp2 == (int)0)) {
HXLINE(  52)				::flixel::input::gamepad::FlxGamepad _this1 = this->gamepad->analog->value->gamepad;
HXDLIN(  52)				::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp3 = _this1->mapping->getAnalogStick((int)19);
HXDLIN(  52)				Float _hx_tmp4 = _this1->getAnalogXAxisValue(_hx_tmp3);
HXDLIN(  52)				_hx_tmp = (_hx_tmp4 != (int)0);
            			}
            			else {
HXLINE(  52)				_hx_tmp = true;
            			}
HXDLIN(  52)			if (_hx_tmp) {
HXLINE(  53)				this->gamepadEventsOnPressed->get((int)19)();
            			}
HXLINE(  55)			Bool _hx_tmp5;
HXDLIN(  55)			::flixel::input::gamepad::FlxGamepad _this2 = this->gamepad->analog->value->gamepad;
HXDLIN(  55)			::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp6 = _this2->mapping->getAnalogStick((int)20);
HXDLIN(  55)			Float _hx_tmp7 = _this2->getYAxisRaw(_hx_tmp6);
HXDLIN(  55)			if ((_hx_tmp7 == (int)0)) {
HXLINE(  55)				::flixel::input::gamepad::FlxGamepad _this3 = this->gamepad->analog->value->gamepad;
HXDLIN(  55)				::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp8 = _this3->mapping->getAnalogStick((int)20);
HXDLIN(  55)				Float _hx_tmp9 = _this3->getAnalogXAxisValue(_hx_tmp8);
HXDLIN(  55)				_hx_tmp5 = (_hx_tmp9 != (int)0);
            			}
            			else {
HXLINE(  55)				_hx_tmp5 = true;
            			}
HXDLIN(  55)			if (_hx_tmp5) {
HXLINE(  56)				this->gamepadEventsOnPressed->get((int)20)();
            			}
HXLINE(  58)			{
HXLINE(  58)				 ::Dynamic tmp = this->gamepadEventsOnPressed->keys();
HXDLIN(  58)				while(true){
HXLINE(  58)					Bool _hx_tmp10 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  58)					if (_hx_tmp10) {
HXLINE(  58)						break;
            					}
HXDLIN(  58)					Int buttonID = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  59)					 ::Dynamic _hx_tmp11 = ::Reflect_obj::getProperty(this->gamepad->pressed,::Shared_obj::supportedButtons->get(buttonID));
HXDLIN(  59)					if (( (Bool)(_hx_tmp11) )) {
HXLINE(  60)						this->gamepadEventsOnPressed->get(buttonID)();
            					}
            				}
            			}
HXLINE(  63)			{
HXLINE(  63)				 ::Dynamic tmp1 = this->gamepadEventsOnJustPressed->keys();
HXDLIN(  63)				while(true){
HXLINE(  63)					Bool _hx_tmp12 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  63)					if (_hx_tmp12) {
HXLINE(  63)						break;
            					}
HXDLIN(  63)					Int buttonID1 = ( (Int)( ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  64)					 ::Dynamic _hx_tmp13 = ::Reflect_obj::getProperty(this->gamepad->justPressed,::Shared_obj::supportedButtons->get(buttonID1));
HXDLIN(  64)					if (( (Bool)(_hx_tmp13) )) {
HXLINE(  65)						this->gamepadEventsOnJustPressed->get(buttonID1)();
            					}
            				}
            			}
HXLINE(  68)			{
HXLINE(  68)				 ::Dynamic tmp2 = this->gamepadEventsOnJustReleased->keys();
HXDLIN(  68)				while(true){
HXLINE(  68)					Bool _hx_tmp14 = !(( (Bool)( ::Dynamic(tmp2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  68)					if (_hx_tmp14) {
HXLINE(  68)						break;
            					}
HXDLIN(  68)					Int buttonID2 = ( (Int)( ::Dynamic(tmp2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  69)					 ::Dynamic _hx_tmp15 = ::Reflect_obj::getProperty(this->gamepad->justReleased,::Shared_obj::supportedButtons->get(buttonID2));
HXDLIN(  69)					if (( (Bool)(_hx_tmp15) )) {
HXLINE(  70)						this->gamepadEventsOnJustReleased->get(buttonID2)();
            					}
            				}
            			}
            		}
HXLINE(  74)		{
HXLINE(  74)			 ::Dynamic tmp3 = this->keyboardEventsOnPressed->keys();
HXDLIN(  74)			while(true){
HXLINE(  74)				Bool _hx_tmp16 = !(( (Bool)( ::Dynamic(tmp3->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  74)				if (_hx_tmp16) {
HXLINE(  74)					break;
            				}
HXDLIN(  74)				Int keyID = ( (Int)( ::Dynamic(tmp3->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  75)				 ::Dynamic _hx_tmp17 = ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->pressed,::Shared_obj::supportedKeys->get(keyID));
HXDLIN(  75)				if (( (Bool)(_hx_tmp17) )) {
HXLINE(  76)					this->keyboardEventsOnPressed->get(keyID)();
            				}
            			}
            		}
HXLINE(  79)		{
HXLINE(  79)			 ::Dynamic tmp4 = this->keyboardEventsOnJustPressed->keys();
HXDLIN(  79)			while(true){
HXLINE(  79)				Bool _hx_tmp18 = !(( (Bool)( ::Dynamic(tmp4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  79)				if (_hx_tmp18) {
HXLINE(  79)					break;
            				}
HXDLIN(  79)				Int keyID1 = ( (Int)( ::Dynamic(tmp4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  80)				 ::Dynamic _hx_tmp19 = ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justPressed,::Shared_obj::supportedKeys->get(keyID1));
HXDLIN(  80)				if (( (Bool)(_hx_tmp19) )) {
HXLINE(  81)					this->keyboardEventsOnJustPressed->get(keyID1)();
            				}
            			}
            		}
HXLINE(  84)		{
HXLINE(  84)			 ::Dynamic tmp5 = this->keyboardEventsOnJustReleased->keys();
HXDLIN(  84)			while(true){
HXLINE(  84)				Bool _hx_tmp20 = !(( (Bool)( ::Dynamic(tmp5->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  84)				if (_hx_tmp20) {
HXLINE(  84)					break;
            				}
HXDLIN(  84)				Int keyID2 = ( (Int)( ::Dynamic(tmp5->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  85)				 ::Dynamic _hx_tmp21 = ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justReleased,::Shared_obj::supportedKeys->get(keyID2));
HXDLIN(  85)				if (( (Bool)(_hx_tmp21) )) {
HXLINE(  86)					this->keyboardEventsOnJustReleased->get(keyID2)();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomController_obj,update,(void))

void CustomController_obj::initDefaultEvents(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",93,0x79fa7911)
HXLINE(  93)			::Shared_obj::player->move((int)0,(int)-1);
HXDLIN(  93)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",94,0x79fa7911)
HXLINE(  94)			::Shared_obj::player->move((int)0,(int)1);
HXDLIN(  94)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",95,0x79fa7911)
HXLINE(  95)			::Shared_obj::player->move((int)-1,(int)0);
HXDLIN(  95)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",96,0x79fa7911)
HXLINE(  96)			::Shared_obj::player->move((int)1,(int)0);
HXDLIN(  96)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",98,0x79fa7911)
HXLINE(  98)			Int _hx_tmp = ::Shared_obj::clock->getCurrentYear();
HXDLIN(  98)			::haxe::Log_obj::trace(_hx_tmp,hx::SourceInfo(HX_("CustomController.hx",11,79,fa,79),98,HX_("CustomController",cd,e7,d3,a3),HX_("initDefaultEvents",8a,8d,44,77)));
HXDLIN(  98)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",99,0x79fa7911)
HXLINE(  99)			::String _hx_tmp1 = ::Shared_obj::clock->getCurrentSeason();
HXDLIN(  99)			::haxe::Log_obj::trace(_hx_tmp1,hx::SourceInfo(HX_("CustomController.hx",11,79,fa,79),99,HX_("CustomController",cd,e7,d3,a3),HX_("initDefaultEvents",8a,8d,44,77)));
HXDLIN(  99)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",100,0x79fa7911)
HXLINE( 100)			Int _hx_tmp2 = ::Shared_obj::clock->getCurrentDay();
HXDLIN( 100)			::haxe::Log_obj::trace(_hx_tmp2,hx::SourceInfo(HX_("CustomController.hx",11,79,fa,79),100,HX_("CustomController",cd,e7,d3,a3),HX_("initDefaultEvents",8a,8d,44,77)));
HXDLIN( 100)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_7) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",101,0x79fa7911)
HXLINE( 101)			Int _hx_tmp3 = ::Shared_obj::clock->getCurrentHour();
HXDLIN( 101)			::haxe::Log_obj::trace(_hx_tmp3,hx::SourceInfo(HX_("CustomController.hx",11,79,fa,79),101,HX_("CustomController",cd,e7,d3,a3),HX_("initDefaultEvents",8a,8d,44,77)));
HXDLIN( 101)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_8) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",102,0x79fa7911)
HXLINE( 102)			Int _hx_tmp4 = ::Shared_obj::clock->getCurrentMinute();
HXDLIN( 102)			::haxe::Log_obj::trace(_hx_tmp4,hx::SourceInfo(HX_("CustomController.hx",11,79,fa,79),102,HX_("CustomController",cd,e7,d3,a3),HX_("initDefaultEvents",8a,8d,44,77)));
HXDLIN( 102)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_9) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",104,0x79fa7911)
HXLINE( 104)			::Shared_obj::player->move((int)0,(int)-1);
HXDLIN( 104)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_10) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",105,0x79fa7911)
HXLINE( 105)			::Shared_obj::player->move((int)0,(int)1);
HXDLIN( 105)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_11) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",106,0x79fa7911)
HXLINE( 106)			::Shared_obj::player->move((int)-1,(int)0);
HXDLIN( 106)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_12) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",107,0x79fa7911)
HXLINE( 107)			::Shared_obj::player->move((int)1,(int)0);
HXDLIN( 107)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_13) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",108,0x79fa7911)
HXLINE( 108)			::Sys_obj::exit((int)0);
HXDLIN( 108)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_14) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",109,0x79fa7911)
HXLINE( 109)			::Shared_obj::player->isRunning = true;
HXDLIN( 109)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_15) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",110,0x79fa7911)
HXLINE( 110)			::Shared_obj::player->isRunning = false;
HXDLIN( 110)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_16) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",111,0x79fa7911)
HXLINE( 111)			Bool _hx_tmp5 = (::flixel::FlxG_obj::camera->zoom < ((Float)3.0));
HXDLIN( 111)			if (_hx_tmp5) {
HXLINE( 111)				::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 111)				Float _hx_tmp6 = (_g->zoom + ((Float)0.1));
HXDLIN( 111)				_g->set_zoom(_hx_tmp6);
            			}
HXDLIN( 111)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_17) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",112,0x79fa7911)
HXLINE( 112)			Bool _hx_tmp7 = (::flixel::FlxG_obj::camera->zoom > ((Float)1.0));
HXDLIN( 112)			if (_hx_tmp7) {
HXLINE( 112)				::flixel::FlxCamera _g1 = ::flixel::FlxG_obj::camera;
HXDLIN( 112)				Float _hx_tmp8 = (_g1->zoom - ((Float)0.1));
HXDLIN( 112)				_g1->set_zoom(_hx_tmp8);
            			}
HXDLIN( 112)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_18,::CustomController,_gthis) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",114,0x79fa7911)
HXLINE( 115)			::flixel::input::gamepad::FlxGamepad _this = _gthis->gamepad->analog->value->gamepad;
HXDLIN( 115)			::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp9 = _this->mapping->getAnalogStick((int)19);
HXDLIN( 115)			Float _hx_tmp10 = _this->getAnalogXAxisValue(_hx_tmp9);
HXDLIN( 115)			::flixel::input::gamepad::FlxGamepad _this1 = _gthis->gamepad->analog->value->gamepad;
HXDLIN( 115)			::flixel::input::gamepad::FlxGamepadAnalogStick _hx_tmp11 = _this1->mapping->getAnalogStick((int)19);
HXDLIN( 115)			Float _hx_tmp12 = _this1->getYAxisRaw(_hx_tmp11);
HXDLIN( 115)			::Shared_obj::player->move(_hx_tmp10,_hx_tmp12);
HXLINE( 116)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_19) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",118,0x79fa7911)
HXLINE( 119)			::haxe::Log_obj::trace(HX_("Right analog stick",44,2e,e0,2d),hx::SourceInfo(HX_("CustomController.hx",11,79,fa,79),119,HX_("CustomController",cd,e7,d3,a3),HX_("initDefaultEvents",8a,8d,44,77)));
HXLINE( 120)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_20) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",122,0x79fa7911)
HXLINE( 122)			::Sys_obj::exit((int)0);
HXDLIN( 122)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_21) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",123,0x79fa7911)
HXLINE( 123)			::Shared_obj::player->isRunning = true;
HXDLIN( 123)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_22) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",124,0x79fa7911)
HXLINE( 124)			::Shared_obj::player->isRunning = false;
HXDLIN( 124)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_23) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",125,0x79fa7911)
HXLINE( 125)			::haxe::Log_obj::trace(HX_("Hello!!",52,e0,12,8b),hx::SourceInfo(HX_("CustomController.hx",11,79,fa,79),125,HX_("CustomController",cd,e7,d3,a3),HX_("initDefaultEvents",8a,8d,44,77)));
HXDLIN( 125)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACK_FRAME("CustomController","initDefaultEvents",0xb28c58a9,"CustomController.initDefaultEvents","CustomController.hx",91,0x79fa7911)
            	HX_STACK_THIS(this)
HXLINE(  91)		::CustomController _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  93)		this->addKeyboardEventOnPressed((int)87, ::Dynamic(new _hx_Closure_0()));
HXLINE(  94)		this->addKeyboardEventOnPressed((int)83, ::Dynamic(new _hx_Closure_1()));
HXLINE(  95)		this->addKeyboardEventOnPressed((int)65, ::Dynamic(new _hx_Closure_2()));
HXLINE(  96)		this->addKeyboardEventOnPressed((int)68, ::Dynamic(new _hx_Closure_3()));
HXLINE(  98)		this->addKeyboardEventOnJustPressed((int)49, ::Dynamic(new _hx_Closure_4()));
HXLINE(  99)		this->addKeyboardEventOnJustPressed((int)50, ::Dynamic(new _hx_Closure_5()));
HXLINE( 100)		this->addKeyboardEventOnJustPressed((int)51, ::Dynamic(new _hx_Closure_6()));
HXLINE( 101)		this->addKeyboardEventOnJustPressed((int)52, ::Dynamic(new _hx_Closure_7()));
HXLINE( 102)		this->addKeyboardEventOnJustPressed((int)53, ::Dynamic(new _hx_Closure_8()));
HXLINE( 104)		this->addKeyboardEventOnPressed((int)38, ::Dynamic(new _hx_Closure_9()));
HXLINE( 105)		this->addKeyboardEventOnPressed((int)40, ::Dynamic(new _hx_Closure_10()));
HXLINE( 106)		this->addKeyboardEventOnPressed((int)37, ::Dynamic(new _hx_Closure_11()));
HXLINE( 107)		this->addKeyboardEventOnPressed((int)39, ::Dynamic(new _hx_Closure_12()));
HXLINE( 108)		this->addKeyboardEventOnPressed((int)27, ::Dynamic(new _hx_Closure_13()));
HXLINE( 109)		this->addKeyboardEventOnJustPressed((int)16, ::Dynamic(new _hx_Closure_14()));
HXLINE( 110)		this->addKeyboardEventOnJustReleased((int)16, ::Dynamic(new _hx_Closure_15()));
HXLINE( 111)		this->addKeyboardEventOnPressed((int)33, ::Dynamic(new _hx_Closure_16()));
HXLINE( 112)		this->addKeyboardEventOnPressed((int)34, ::Dynamic(new _hx_Closure_17()));
HXLINE( 114)		this->addGamepadEventOnPressed((int)19, ::Dynamic(new _hx_Closure_18(_gthis)));
HXLINE( 118)		this->addGamepadEventOnPressed((int)20, ::Dynamic(new _hx_Closure_19()));
HXLINE( 122)		this->addGamepadEventOnPressed((int)7, ::Dynamic(new _hx_Closure_20()));
HXLINE( 123)		this->addGamepadEventOnJustPressed((int)0, ::Dynamic(new _hx_Closure_21()));
HXLINE( 124)		this->addGamepadEventOnJustReleased((int)0, ::Dynamic(new _hx_Closure_22()));
HXLINE( 125)		this->addGamepadEventOnJustPressed((int)11, ::Dynamic(new _hx_Closure_23()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomController_obj,initDefaultEvents,(void))


CustomController_obj::CustomController_obj()
{
}

void CustomController_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CustomController);
	HX_MARK_MEMBER_NAME(keyboardEventsOnPressed,"keyboardEventsOnPressed");
	HX_MARK_MEMBER_NAME(keyboardEventsOnJustPressed,"keyboardEventsOnJustPressed");
	HX_MARK_MEMBER_NAME(keyboardEventsOnJustReleased,"keyboardEventsOnJustReleased");
	HX_MARK_MEMBER_NAME(gamepadEventsOnPressed,"gamepadEventsOnPressed");
	HX_MARK_MEMBER_NAME(gamepadEventsOnJustPressed,"gamepadEventsOnJustPressed");
	HX_MARK_MEMBER_NAME(gamepadEventsOnJustReleased,"gamepadEventsOnJustReleased");
	HX_MARK_MEMBER_NAME(gamepad,"gamepad");
	HX_MARK_END_CLASS();
}

void CustomController_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyboardEventsOnPressed,"keyboardEventsOnPressed");
	HX_VISIT_MEMBER_NAME(keyboardEventsOnJustPressed,"keyboardEventsOnJustPressed");
	HX_VISIT_MEMBER_NAME(keyboardEventsOnJustReleased,"keyboardEventsOnJustReleased");
	HX_VISIT_MEMBER_NAME(gamepadEventsOnPressed,"gamepadEventsOnPressed");
	HX_VISIT_MEMBER_NAME(gamepadEventsOnJustPressed,"gamepadEventsOnJustPressed");
	HX_VISIT_MEMBER_NAME(gamepadEventsOnJustReleased,"gamepadEventsOnJustReleased");
	HX_VISIT_MEMBER_NAME(gamepad,"gamepad");
}

hx::Val CustomController_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { return hx::Val( gamepad); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"initDefaultEvents") ) { return hx::Val( initDefaultEvents_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"gamepadEventsOnPressed") ) { return hx::Val( gamepadEventsOnPressed); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"keyboardEventsOnPressed") ) { return hx::Val( keyboardEventsOnPressed); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"addGamepadEventOnPressed") ) { return hx::Val( addGamepadEventOnPressed_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"addKeyboardEventOnPressed") ) { return hx::Val( addKeyboardEventOnPressed_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"gamepadEventsOnJustPressed") ) { return hx::Val( gamepadEventsOnJustPressed); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"keyboardEventsOnJustPressed") ) { return hx::Val( keyboardEventsOnJustPressed); }
		if (HX_FIELD_EQ(inName,"gamepadEventsOnJustReleased") ) { return hx::Val( gamepadEventsOnJustReleased); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"keyboardEventsOnJustReleased") ) { return hx::Val( keyboardEventsOnJustReleased); }
		if (HX_FIELD_EQ(inName,"addGamepadEventOnJustPressed") ) { return hx::Val( addGamepadEventOnJustPressed_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"addKeyboardEventOnJustPressed") ) { return hx::Val( addKeyboardEventOnJustPressed_dyn()); }
		if (HX_FIELD_EQ(inName,"addGamepadEventOnJustReleased") ) { return hx::Val( addGamepadEventOnJustReleased_dyn()); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"addKeyboardEventOnJustReleased") ) { return hx::Val( addKeyboardEventOnJustReleased_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CustomController_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { gamepad=inValue.Cast< ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"gamepadEventsOnPressed") ) { gamepadEventsOnPressed=inValue.Cast< ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"keyboardEventsOnPressed") ) { keyboardEventsOnPressed=inValue.Cast< ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"gamepadEventsOnJustPressed") ) { gamepadEventsOnJustPressed=inValue.Cast< ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"keyboardEventsOnJustPressed") ) { keyboardEventsOnJustPressed=inValue.Cast< ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamepadEventsOnJustReleased") ) { gamepadEventsOnJustReleased=inValue.Cast< ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"keyboardEventsOnJustReleased") ) { keyboardEventsOnJustReleased=inValue.Cast< ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CustomController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("keyboardEventsOnPressed","\x03","\x90","\x1e","\x9f"));
	outFields->push(HX_HCSTRING("keyboardEventsOnJustPressed","\xb7","\x8f","\xdf","\x54"));
	outFields->push(HX_HCSTRING("keyboardEventsOnJustReleased","\x08","\x3e","\x94","\xf5"));
	outFields->push(HX_HCSTRING("gamepadEventsOnPressed","\x49","\xf5","\xe9","\x7f"));
	outFields->push(HX_HCSTRING("gamepadEventsOnJustPressed","\xfd","\x0f","\xce","\xbd"));
	outFields->push(HX_HCSTRING("gamepadEventsOnJustReleased","\x02","\xfb","\x55","\x5d"));
	outFields->push(HX_HCSTRING("gamepad","\xa1","\xe0","\x85","\x89"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CustomController_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(CustomController_obj,keyboardEventsOnPressed),HX_HCSTRING("keyboardEventsOnPressed","\x03","\x90","\x1e","\x9f")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(CustomController_obj,keyboardEventsOnJustPressed),HX_HCSTRING("keyboardEventsOnJustPressed","\xb7","\x8f","\xdf","\x54")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(CustomController_obj,keyboardEventsOnJustReleased),HX_HCSTRING("keyboardEventsOnJustReleased","\x08","\x3e","\x94","\xf5")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(CustomController_obj,gamepadEventsOnPressed),HX_HCSTRING("gamepadEventsOnPressed","\x49","\xf5","\xe9","\x7f")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(CustomController_obj,gamepadEventsOnJustPressed),HX_HCSTRING("gamepadEventsOnJustPressed","\xfd","\x0f","\xce","\xbd")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(CustomController_obj,gamepadEventsOnJustReleased),HX_HCSTRING("gamepadEventsOnJustReleased","\x02","\xfb","\x55","\x5d")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepad*/ ,(int)offsetof(CustomController_obj,gamepad),HX_HCSTRING("gamepad","\xa1","\xe0","\x85","\x89")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CustomController_obj_sStaticStorageInfo = 0;
#endif

static ::String CustomController_obj_sMemberFields[] = {
	HX_HCSTRING("keyboardEventsOnPressed","\x03","\x90","\x1e","\x9f"),
	HX_HCSTRING("keyboardEventsOnJustPressed","\xb7","\x8f","\xdf","\x54"),
	HX_HCSTRING("keyboardEventsOnJustReleased","\x08","\x3e","\x94","\xf5"),
	HX_HCSTRING("gamepadEventsOnPressed","\x49","\xf5","\xe9","\x7f"),
	HX_HCSTRING("gamepadEventsOnJustPressed","\xfd","\x0f","\xce","\xbd"),
	HX_HCSTRING("gamepadEventsOnJustReleased","\x02","\xfb","\x55","\x5d"),
	HX_HCSTRING("gamepad","\xa1","\xe0","\x85","\x89"),
	HX_HCSTRING("addKeyboardEventOnPressed","\xd1","\x5d","\x9e","\xf9"),
	HX_HCSTRING("addKeyboardEventOnJustPressed","\x85","\x5c","\x55","\x1c"),
	HX_HCSTRING("addKeyboardEventOnJustReleased","\x7a","\xa5","\x31","\xb5"),
	HX_HCSTRING("addGamepadEventOnPressed","\x69","\x50","\x09","\xbb"),
	HX_HCSTRING("addGamepadEventOnJustPressed","\x1d","\x7b","\x09","\x58"),
	HX_HCSTRING("addGamepadEventOnJustReleased","\xe2","\x4b","\x18","\xb7"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("initDefaultEvents","\x8a","\x8d","\x44","\x77"),
	::String(null()) };

static void CustomController_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CustomController_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CustomController_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CustomController_obj::__mClass,"__mClass");
};

#endif

hx::Class CustomController_obj::__mClass;

void CustomController_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("CustomController","\xcd","\xe7","\xd3","\xa3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CustomController_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CustomController_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CustomController_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CustomController_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomController_obj_sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

