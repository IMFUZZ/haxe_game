// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gametime_Clock
#include <gametime/Clock.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_world_MapGenerator
#include <world/MapGenerator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c2cd27402f627344_150_init,"Shared","init",0x721eed59,"Shared.init","Shared.hx",150,0x60c9b919)
HX_DEFINE_STACK_FRAME(_hx_pos_c2cd27402f627344_9_boot,"Shared","boot",0x6d7f367b,"Shared.boot","Shared.hx",9,0x60c9b919)
HX_DEFINE_STACK_FRAME(_hx_pos_c2cd27402f627344_10_boot,"Shared","boot",0x6d7f367b,"Shared.boot","Shared.hx",10,0x60c9b919)
HX_DEFINE_STACK_FRAME(_hx_pos_c2cd27402f627344_14_boot,"Shared","boot",0x6d7f367b,"Shared.boot","Shared.hx",14,0x60c9b919)
HX_DEFINE_STACK_FRAME(_hx_pos_c2cd27402f627344_111_boot,"Shared","boot",0x6d7f367b,"Shared.boot","Shared.hx",111,0x60c9b919)

void Shared_obj::__construct() { }

Dynamic Shared_obj::__CreateEmpty() { return new Shared_obj; }

void *Shared_obj::_hx_vtable = 0;

Dynamic Shared_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shared_obj > _hx_result = new Shared_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Shared_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x51bfd2c5;
}

int Shared_obj::TILE_WIDTH;

int Shared_obj::TILE_HEIGHT;

 ::world::MapGenerator Shared_obj::mapGenerator;

 ::Player Shared_obj::player;

 ::gametime::Clock Shared_obj::clock;

 ::haxe::ds::StringMap Shared_obj::supportedKeys;

 ::haxe::ds::StringMap Shared_obj::supportedButtons;

void Shared_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_c2cd27402f627344_150_init)
HXLINE( 151)		::Shared_obj::mapGenerator =  ::world::MapGenerator_obj::__alloc( HX_CTX );
HXLINE( 152)		::Shared_obj::player =  ::Player_obj::__alloc( HX_CTX );
HXLINE( 153)		::Shared_obj::clock =  ::gametime::Clock_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Shared_obj,init,(void))


Shared_obj::Shared_obj()
{
}

bool Shared_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clock") ) { outValue = clock; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { outValue = player; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mapGenerator") ) { outValue = mapGenerator; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"supportedKeys") ) { outValue = supportedKeys; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"supportedButtons") ) { outValue = supportedButtons; return true; }
	}
	return false;
}

bool Shared_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clock") ) { clock=ioValue.Cast<  ::gametime::Clock >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=ioValue.Cast<  ::Player >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mapGenerator") ) { mapGenerator=ioValue.Cast<  ::world::MapGenerator >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"supportedKeys") ) { supportedKeys=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"supportedButtons") ) { supportedButtons=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Shared_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Shared_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Shared_obj::TILE_WIDTH,HX_HCSTRING("TILE_WIDTH","\xd5","\x5e","\xc1","\xb3")},
	{hx::fsInt,(void *) &Shared_obj::TILE_HEIGHT,HX_HCSTRING("TILE_HEIGHT","\x18","\x14","\xc1","\x4b")},
	{hx::fsObject /*::world::MapGenerator*/ ,(void *) &Shared_obj::mapGenerator,HX_HCSTRING("mapGenerator","\x17","\x9a","\xa0","\x29")},
	{hx::fsObject /*::Player*/ ,(void *) &Shared_obj::player,HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*::gametime::Clock*/ ,(void *) &Shared_obj::clock,HX_HCSTRING("clock","\xce","\x09","\x63","\x48")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Shared_obj::supportedKeys,HX_HCSTRING("supportedKeys","\x42","\x83","\xb3","\xd2")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Shared_obj::supportedButtons,HX_HCSTRING("supportedButtons","\xb3","\xf5","\x31","\x71")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Shared_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shared_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Shared_obj::TILE_WIDTH,"TILE_WIDTH");
	HX_MARK_MEMBER_NAME(Shared_obj::TILE_HEIGHT,"TILE_HEIGHT");
	HX_MARK_MEMBER_NAME(Shared_obj::mapGenerator,"mapGenerator");
	HX_MARK_MEMBER_NAME(Shared_obj::player,"player");
	HX_MARK_MEMBER_NAME(Shared_obj::clock,"clock");
	HX_MARK_MEMBER_NAME(Shared_obj::supportedKeys,"supportedKeys");
	HX_MARK_MEMBER_NAME(Shared_obj::supportedButtons,"supportedButtons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shared_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shared_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Shared_obj::TILE_WIDTH,"TILE_WIDTH");
	HX_VISIT_MEMBER_NAME(Shared_obj::TILE_HEIGHT,"TILE_HEIGHT");
	HX_VISIT_MEMBER_NAME(Shared_obj::mapGenerator,"mapGenerator");
	HX_VISIT_MEMBER_NAME(Shared_obj::player,"player");
	HX_VISIT_MEMBER_NAME(Shared_obj::clock,"clock");
	HX_VISIT_MEMBER_NAME(Shared_obj::supportedKeys,"supportedKeys");
	HX_VISIT_MEMBER_NAME(Shared_obj::supportedButtons,"supportedButtons");
};

#endif

hx::Class Shared_obj::__mClass;

static ::String Shared_obj_sStaticFields[] = {
	HX_HCSTRING("TILE_WIDTH","\xd5","\x5e","\xc1","\xb3"),
	HX_HCSTRING("TILE_HEIGHT","\x18","\x14","\xc1","\x4b"),
	HX_HCSTRING("mapGenerator","\x17","\x9a","\xa0","\x29"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("clock","\xce","\x09","\x63","\x48"),
	HX_HCSTRING("supportedKeys","\x42","\x83","\xb3","\xd2"),
	HX_HCSTRING("supportedButtons","\xb3","\xf5","\x31","\x71"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null())
};

void Shared_obj::__register()
{
	hx::Object *dummy = new Shared_obj;
	Shared_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Shared","\xc5","\xd2","\xbf","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Shared_obj::__GetStatic;
	__mClass->mSetStaticField = &Shared_obj::__SetStatic;
	__mClass->mMarkFunc = Shared_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Shared_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Shared_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shared_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shared_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shared_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Shared_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c2cd27402f627344_9_boot)
HXLINE(   9)		TILE_WIDTH = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c2cd27402f627344_10_boot)
HXLINE(  10)		TILE_HEIGHT = (int)32;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c2cd27402f627344_14_boot)
HXLINE(  14)			HX_VARI(  ::haxe::ds::StringMap,_g) =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  14)			_g->set(HX_("ANY",cc,96,31,00),(int)-2);
HXDLIN(  14)			_g->set(HX_("NONE",b8,da,ca,33),(int)-1);
HXDLIN(  14)			_g->set(HX_("A",41,00,00,00),(int)65);
HXDLIN(  14)			_g->set(HX_("B",42,00,00,00),(int)66);
HXDLIN(  14)			_g->set(HX_("C",43,00,00,00),(int)67);
HXDLIN(  14)			_g->set(HX_("D",44,00,00,00),(int)68);
HXDLIN(  14)			_g->set(HX_("E",45,00,00,00),(int)69);
HXDLIN(  14)			_g->set(HX_("F",46,00,00,00),(int)70);
HXDLIN(  14)			_g->set(HX_("G",47,00,00,00),(int)71);
HXDLIN(  14)			_g->set(HX_("H",48,00,00,00),(int)72);
HXDLIN(  14)			_g->set(HX_("I",49,00,00,00),(int)73);
HXDLIN(  14)			_g->set(HX_("J",4a,00,00,00),(int)74);
HXDLIN(  14)			_g->set(HX_("K",4b,00,00,00),(int)75);
HXDLIN(  14)			_g->set(HX_("L",4c,00,00,00),(int)76);
HXDLIN(  14)			_g->set(HX_("M",4d,00,00,00),(int)77);
HXDLIN(  14)			_g->set(HX_("N",4e,00,00,00),(int)78);
HXDLIN(  14)			_g->set(HX_("O",4f,00,00,00),(int)79);
HXDLIN(  14)			_g->set(HX_("P",50,00,00,00),(int)80);
HXDLIN(  14)			_g->set(HX_("Q",51,00,00,00),(int)81);
HXDLIN(  14)			_g->set(HX_("R",52,00,00,00),(int)82);
HXDLIN(  14)			_g->set(HX_("S",53,00,00,00),(int)83);
HXDLIN(  14)			_g->set(HX_("T",54,00,00,00),(int)84);
HXDLIN(  14)			_g->set(HX_("U",55,00,00,00),(int)85);
HXDLIN(  14)			_g->set(HX_("V",56,00,00,00),(int)86);
HXDLIN(  14)			_g->set(HX_("W",57,00,00,00),(int)87);
HXDLIN(  14)			_g->set(HX_("X",58,00,00,00),(int)88);
HXDLIN(  14)			_g->set(HX_("Y",59,00,00,00),(int)89);
HXDLIN(  14)			_g->set(HX_("Z",5a,00,00,00),(int)90);
HXDLIN(  14)			_g->set(HX_("ZERO",28,d7,b1,3b),(int)48);
HXDLIN(  14)			_g->set(HX_("ONE",46,36,3c,00),(int)49);
HXDLIN(  14)			_g->set(HX_("TWO",6c,09,40,00),(int)50);
HXDLIN(  14)			_g->set(HX_("THREE",3e,8c,7e,8d),(int)51);
HXDLIN(  14)			_g->set(HX_("FOUR",e6,2b,81,2e),(int)52);
HXDLIN(  14)			_g->set(HX_("FIVE",32,9f,7c,2e),(int)53);
HXDLIN(  14)			_g->set(HX_("SIX",02,3b,3f,00),(int)54);
HXDLIN(  14)			_g->set(HX_("SEVEN",ed,5c,1f,f8),(int)55);
HXDLIN(  14)			_g->set(HX_("EIGHT",2f,b9,1c,eb),(int)56);
HXDLIN(  14)			_g->set(HX_("NINE",32,4d,c6,33),(int)57);
HXDLIN(  14)			_g->set(HX_("PAGEUP",6a,5e,bb,98),(int)33);
HXDLIN(  14)			_g->set(HX_("PAGEDOWN",31,36,e2,b9),(int)34);
HXDLIN(  14)			_g->set(HX_("HOME",1f,92,d3,2f),(int)36);
HXDLIN(  14)			_g->set(HX_("END",bb,9f,34,00),(int)35);
HXDLIN(  14)			_g->set(HX_("INSERT",39,ef,5f,50),(int)45);
HXDLIN(  14)			_g->set(HX_("ESCAPE",81,ef,5c,8d),(int)27);
HXDLIN(  14)			_g->set(HX_("MINUS",50,b8,56,86),(int)189);
HXDLIN(  14)			_g->set(HX_("PLUS",5a,07,1b,35),(int)187);
HXDLIN(  14)			_g->set(HX_("DELETE",2b,6c,5b,1d),(int)46);
HXDLIN(  14)			_g->set(HX_("BACKSPACE",1f,f5,42,c6),(int)8);
HXDLIN(  14)			_g->set(HX_("LBRACKET",3c,3b,54,16),(int)219);
HXDLIN(  14)			_g->set(HX_("RBRACKET",f6,e7,82,6d),(int)221);
HXDLIN(  14)			_g->set(HX_("BACKSLASH",96,28,9e,c3),(int)220);
HXDLIN(  14)			_g->set(HX_("CAPSLOCK",8c,6c,6e,80),(int)20);
HXDLIN(  14)			_g->set(HX_("SEMICOLON",11,86,2a,49),(int)186);
HXDLIN(  14)			_g->set(HX_("QUOTE",1c,5b,e0,db),(int)222);
HXDLIN(  14)			_g->set(HX_("ENTER",f8,a4,74,ee),(int)13);
HXDLIN(  14)			_g->set(HX_("SHIFT",62,24,11,fa),(int)16);
HXDLIN(  14)			_g->set(HX_("COMMA",b5,69,4b,c8),(int)188);
HXDLIN(  14)			_g->set(HX_("PERIOD",01,0d,9e,ed),(int)190);
HXDLIN(  14)			_g->set(HX_("SLASH",1d,f8,af,fc),(int)191);
HXDLIN(  14)			_g->set(HX_("GRAVEACCENT",6f,63,9a,0e),(int)192);
HXDLIN(  14)			_g->set(HX_("CONTROL",3d,3f,55,99),(int)17);
HXDLIN(  14)			_g->set(HX_("ALT",09,95,31,00),(int)18);
HXDLIN(  14)			_g->set(HX_("SPACE",a6,c4,54,ff),(int)32);
HXDLIN(  14)			_g->set(HX_("UP",5b,4a,00,00),(int)38);
HXDLIN(  14)			_g->set(HX_("DOWN",62,c0,2e,2d),(int)40);
HXDLIN(  14)			_g->set(HX_("LEFT",07,d0,70,32),(int)37);
HXDLIN(  14)			_g->set(HX_("RIGHT",bc,43,52,67),(int)39);
HXDLIN(  14)			_g->set(HX_("TAB",35,f6,3f,00),(int)9);
HXDLIN(  14)			_g->set(HX_("PRINTSCREEN",39,7f,7c,10),(int)301);
HXDLIN(  14)			_g->set(HX_("F1",2b,3d,00,00),(int)112);
HXDLIN(  14)			_g->set(HX_("F2",2c,3d,00,00),(int)113);
HXDLIN(  14)			_g->set(HX_("F3",2d,3d,00,00),(int)114);
HXDLIN(  14)			_g->set(HX_("F4",2e,3d,00,00),(int)115);
HXDLIN(  14)			_g->set(HX_("F5",2f,3d,00,00),(int)116);
HXDLIN(  14)			_g->set(HX_("F6",30,3d,00,00),(int)117);
HXDLIN(  14)			_g->set(HX_("F7",31,3d,00,00),(int)118);
HXDLIN(  14)			_g->set(HX_("F8",32,3d,00,00),(int)119);
HXDLIN(  14)			_g->set(HX_("F9",33,3d,00,00),(int)120);
HXDLIN(  14)			_g->set(HX_("F10",a5,48,35,00),(int)121);
HXDLIN(  14)			_g->set(HX_("F11",a6,48,35,00),(int)122);
HXDLIN(  14)			_g->set(HX_("F12",a7,48,35,00),(int)123);
HXDLIN(  14)			_g->set(HX_("NUMPADZERO",75,90,dd,33),(int)96);
HXDLIN(  14)			_g->set(HX_("NUMPADONE",99,e5,09,5c),(int)97);
HXDLIN(  14)			_g->set(HX_("NUMPADTWO",bf,b8,0d,5c),(int)98);
HXDLIN(  14)			_g->set(HX_("NUMPADTHREE",51,f6,94,bb),(int)99);
HXDLIN(  14)			_g->set(HX_("NUMPADFOUR",33,e5,ac,26),(int)100);
HXDLIN(  14)			_g->set(HX_("NUMPADFIVE",7f,58,a8,26),(int)101);
HXDLIN(  14)			_g->set(HX_("NUMPADSIX",55,ea,0c,5c),(int)102);
HXDLIN(  14)			_g->set(HX_("NUMPADSEVEN",00,c7,35,26),(int)103);
HXDLIN(  14)			_g->set(HX_("NUMPADEIGHT",42,23,33,19),(int)104);
HXDLIN(  14)			_g->set(HX_("NUMPADNINE",7f,06,f2,2b),(int)105);
HXDLIN(  14)			_g->set(HX_("NUMPADMINUS",63,22,6d,b4),(int)109);
HXDLIN(  14)			_g->set(HX_("NUMPADPLUS",a7,c0,46,2d),(int)107);
HXDLIN(  14)			_g->set(HX_("NUMPADPERIOD",8e,73,24,13),(int)110);
HXDLIN(  14)			_g->set(HX_("NUMPADMULTIPLY",f1,55,e9,54),(int)106);
HXDLIN(  14)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_c2cd27402f627344_14_boot)
HXLINE(  14)		supportedKeys =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c2cd27402f627344_111_boot)
HXLINE( 111)			HX_VARI(  ::haxe::ds::StringMap,_g) =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 111)			_g->set(HX_("ANY",cc,96,31,00),(int)-2);
HXDLIN( 111)			_g->set(HX_("NONE",b8,da,ca,33),(int)-1);
HXDLIN( 111)			_g->set(HX_("A",41,00,00,00),(int)0);
HXDLIN( 111)			_g->set(HX_("B",42,00,00,00),(int)1);
HXDLIN( 111)			_g->set(HX_("X",58,00,00,00),(int)2);
HXDLIN( 111)			_g->set(HX_("Y",59,00,00,00),(int)3);
HXDLIN( 111)			_g->set(HX_("LEFT_SHOULDER",d8,b1,a9,01),(int)4);
HXDLIN( 111)			_g->set(HX_("RIGHT_SHOULDER",83,9f,28,11),(int)5);
HXDLIN( 111)			_g->set(HX_("BACK",27,a2,d1,2b),(int)6);
HXDLIN( 111)			_g->set(HX_("START",42,ac,f9,01),(int)7);
HXDLIN( 111)			_g->set(HX_("LEFT_STICK_CLICK",21,9d,4a,bf),(int)8);
HXDLIN( 111)			_g->set(HX_("RIGHT_STICK_CLICK",56,4c,25,0b),(int)9);
HXDLIN( 111)			_g->set(HX_("GUIDE",9c,f2,d9,19),(int)10);
HXDLIN( 111)			_g->set(HX_("DPAD_UP",6b,00,87,a2),(int)11);
HXDLIN( 111)			_g->set(HX_("DPAD_DOWN",72,1a,5b,87),(int)12);
HXDLIN( 111)			_g->set(HX_("DPAD_LEFT",17,2a,9d,8c),(int)13);
HXDLIN( 111)			_g->set(HX_("DPAD_RIGHT",ac,b7,f4,f3),(int)14);
HXDLIN( 111)			_g->set(HX_("LEFT_TRIGGER_BUTTON",f1,61,33,1b),(int)15);
HXDLIN( 111)			_g->set(HX_("RIGHT_TRIGGER_BUTTON",dc,61,f8,02),(int)16);
HXDLIN( 111)			_g->set(HX_("LEFT_TRIGGER",a0,31,c6,eb),(int)17);
HXDLIN( 111)			_g->set(HX_("RIGHT_TRIGGER",55,e2,81,00),(int)18);
HXDLIN( 111)			_g->set(HX_("LEFT_ANALOG_STICK",19,49,58,a5),(int)19);
HXDLIN( 111)			_g->set(HX_("RIGHT_ANALOG_STICK",44,e8,d6,b8),(int)20);
HXDLIN( 111)			_g->set(HX_("DPAD",6f,6f,2f,2d),(int)21);
HXDLIN( 111)			_g->set(HX_("LEFT_TRIGGER_FAKE",d4,89,c9,fd),(int)22);
HXDLIN( 111)			_g->set(HX_("RIGHT_TRIGGER_FAKE",ff,28,48,11),(int)23);
HXDLIN( 111)			_g->set(HX_("LEFT_STICK_FAKE",bc,9c,8e,ca),(int)24);
HXDLIN( 111)			_g->set(HX_("RIGHT_STICK_FAKE",27,8b,e4,e9),(int)25);
HXDLIN( 111)			_g->set(HX_("TILT_PITCH",de,59,c1,1b),(int)26);
HXDLIN( 111)			_g->set(HX_("TILT_ROLL",ff,5e,73,5e),(int)27);
HXDLIN( 111)			_g->set(HX_("POINTER_X",f6,08,fa,28),(int)28);
HXDLIN( 111)			_g->set(HX_("POINTER_Y",f7,08,fa,28),(int)29);
HXDLIN( 111)			_g->set(HX_("EXTRA_0",61,a1,be,f8),(int)30);
HXDLIN( 111)			_g->set(HX_("EXTRA_1",62,a1,be,f8),(int)31);
HXDLIN( 111)			_g->set(HX_("EXTRA_2",63,a1,be,f8),(int)32);
HXDLIN( 111)			_g->set(HX_("EXTRA_3",64,a1,be,f8),(int)33);
HXDLIN( 111)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_c2cd27402f627344_111_boot)
HXLINE( 111)		supportedButtons =  ::Dynamic(new _hx_Closure_0())();
            	}
}

