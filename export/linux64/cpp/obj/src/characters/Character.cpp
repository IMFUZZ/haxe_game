// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_characters_Character
#include <characters/Character.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_items_Inventory
#include <items/Inventory.h>
#endif
#ifndef INCLUDED_items_Item
#include <items/Item.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_18_new,"characters.Character","new",0x8034be37,"characters.Character.new","characters/Character.hx",18,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_38_update,"characters.Character","update",0x68d39892,"characters.Character.update","characters/Character.hx",38,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_47_afterUpdate,"characters.Character","afterUpdate",0xdf3afa1c,"characters.Character.afterUpdate","characters/Character.hx",47,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_57_updateRun,"characters.Character","updateRun",0x763b2dd9,"characters.Character.updateRun","characters/Character.hx",57,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_61_move,"characters.Character","move",0xad50115a,"characters.Character.move","characters/Character.hx",61,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_67_die,"characters.Character","die",0x802d2b17,"characters.Character.die","characters/Character.hx",67,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_73_onMouseDown,"characters.Character","onMouseDown",0x17dab0df,"characters.Character.onMouseDown","characters/Character.hx",73,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_77_onMouseUp,"characters.Character","onMouseUp",0x8b751598,"characters.Character.onMouseUp","characters/Character.hx",77,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_81_onMouseOver,"characters.Character","onMouseOver",0x1f2549d1,"characters.Character.onMouseOver","characters/Character.hx",81,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_85_onMouseOut,"characters.Character","onMouseOut",0x7af946b1,"characters.Character.onMouseOut","characters/Character.hx",85,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_89_takeItem,"characters.Character","takeItem",0x4c1d5fc3,"characters.Character.takeItem","characters/Character.hx",89,0x3bfeb29a)
HX_DEFINE_STACK_FRAME(_hx_pos_0fc8f208a1fe4b83_99_setOwner,"characters.Character","setOwner",0xc60987fa,"characters.Character.setOwner","characters/Character.hx",99,0x3bfeb29a)
namespace characters{

void Character_obj::__construct(Float a_x,Float a_y,::String a_texturePath){
            	HX_GC_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_18_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_x,"a_x")
            	HX_STACK_ARG(a_y,"a_y")
            	HX_STACK_ARG(a_texturePath,"a_texturePath")
HXLINE(  24)		this->_currentSpeed =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  23)		this->_runSpeed = ((Float)1);
HXLINE(  22)		this->isRunning = false;
HXLINE(  21)		this->tileSelected =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(  20)		this->inventory =  ::items::Inventory_obj::__alloc( HX_CTX ,(int)12);
HXLINE(  27)		super::__construct(a_x,a_y,null(),null(),null());
HXLINE(  28)		this->health = (int)100;
HXLINE(  29)		this->loadGraphic(a_texturePath,true,(int)32,(int)64,null(),null());
HXLINE(  30)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE(  30)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(  30)			::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN(  30)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(  30)		this->createCircularBody(((Float)16.),::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC);
HXLINE(  31)		this->origin->set(((Float)16.),((Float)48.));
HXLINE(  32)		{
HXLINE(  32)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN(  32)			{
HXLINE(  32)				_this->zpp_inner->immutable_midstep((HX_("Body::",02,8e,7d,8f) + HX_("false",a3,35,4f,fb)));
HXDLIN(  32)				if ((!(_this->zpp_inner->norotate) != false)) {
HXLINE(  32)					_this->zpp_inner->norotate = true;
HXDLIN(  32)					_this->zpp_inner->invalidate_inertia();
            				}
            			}
            		}
HXLINE(  33)		this->tileSelected->makeGraphic((int)32,(int)32,(int)0,null(),null());
HXLINE(  34)		::flixel::util::FlxSpriteUtil_obj::drawRect(this->tileSelected,(int)0,(int)0,(int)31,(int)31,(int)0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("color",63,71,5c,4a),(int)-65536)
            			->setFixed(1,HX_("thickness",74,f1,66,5a),(int)1)),null());
HXLINE(  35)		::flixel::input::mouse::FlxMouseEventManager_obj::add(hx::ObjectPtr<OBJ_>(this),this->onMouseDown_dyn(),this->onMouseUp_dyn(),this->onMouseOver_dyn(),this->onMouseOut_dyn(),null(),null(),null(),null());
            	}

Dynamic Character_obj::__CreateEmpty() { return new Character_obj; }

void *Character_obj::_hx_vtable = 0;

Dynamic Character_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Character_obj > _hx_result = new Character_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Character_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1ea7a45f) {
		if (inClassId<=(int)0x19b9dc60) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x19b9dc60;
			}
		} else {
			return inClassId==(int)0x1ea7a45f;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Character_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_38_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  39)		this->super::update(elapsed);
HXLINE(  40)		this->tileSelected->set_x((::Math_obj::floor(((Float)::flixel::FlxG_obj::mouse->x / (Float)(int)32)) * (int)32));
HXLINE(  41)		this->tileSelected->set_y((::Math_obj::floor(((Float)::flixel::FlxG_obj::mouse->y / (Float)(int)32)) * (int)32));
HXLINE(  42)		this->tileSelected->update(elapsed);
HXLINE(  44)		this->afterUpdate(elapsed);
            	}


void Character_obj::afterUpdate(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_47_afterUpdate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  48)		this->updateRun();
HXLINE(  49)		bool _hx_tmp;
HXDLIN(  49)		HX_VARI(  ::nape::geom::Vec2,_this) = this->_currentSpeed;
HXDLIN(  49)		{
HXLINE(  49)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = _this->zpp_inner;
HXDLIN(  49)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(  49)				_this1->_validate();
            			}
            		}
HXDLIN(  49)		if ((_this->zpp_inner->y != (int)0)) {
HXLINE(  49)			HX_VARI_NAME(  ::nape::geom::Vec2,_this2,"_this") = this->_currentSpeed;
HXDLIN(  49)			{
HXLINE(  49)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this2->zpp_inner;
HXDLIN(  49)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(  49)					_this3->_validate();
            				}
            			}
HXDLIN(  49)			_hx_tmp = (_this2->zpp_inner->x != (int)0);
            		}
            		else {
HXLINE(  49)			_hx_tmp = false;
            		}
HXDLIN(  49)		if (_hx_tmp) {
HXLINE(  49)			this->_currentSpeed->normalise();
            		}
HXLINE(  50)		{
HXLINE(  50)			HX_VARI_NAME(  ::nape::phys::Body,_this4,"_this") = this->body;
HXDLIN(  50)			if (hx::IsNull( _this4->zpp_inner->wrap_vel )) {
HXLINE(  50)				_this4->zpp_inner->setupVelocity();
            			}
HXDLIN(  50)			HX_VARI_NAME(  ::nape::geom::Vec2,_this5,"_this") = _this4->zpp_inner->wrap_vel;
HXDLIN(  50)			HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = this->_currentSpeed;
HXDLIN(  50)			{
HXLINE(  50)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = _this6->zpp_inner;
HXDLIN(  50)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE(  50)					_this7->_validate();
            				}
            			}
HXDLIN(  50)			HX_VARI( Float,x) = (((int)10000 * (_this6->zpp_inner->x * elapsed)) * this->_runSpeed);
HXDLIN(  50)			{
HXLINE(  50)				{
HXLINE(  50)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = _this5->zpp_inner;
HXDLIN(  50)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE(  50)						_this8->_validate();
            					}
            				}
HXDLIN(  50)				if ((_this5->zpp_inner->x != x)) {
HXLINE(  50)					_this5->zpp_inner->x = x;
HXDLIN(  50)					{
HXLINE(  50)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _this5->zpp_inner;
HXDLIN(  50)						if (hx::IsNotNull( _this9->_invalidate )) {
HXLINE(  50)							_this9->_invalidate(_this9);
            						}
            					}
            				}
            			}
HXDLIN(  50)			{
HXLINE(  50)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = _this5->zpp_inner;
HXDLIN(  50)				if (hx::IsNotNull( _this10->_validate )) {
HXLINE(  50)					_this10->_validate();
            				}
            			}
            		}
HXLINE(  51)		{
HXLINE(  51)			HX_VARI_NAME(  ::nape::phys::Body,_this11,"_this") = this->body;
HXDLIN(  51)			if (hx::IsNull( _this11->zpp_inner->wrap_vel )) {
HXLINE(  51)				_this11->zpp_inner->setupVelocity();
            			}
HXDLIN(  51)			HX_VARI_NAME(  ::nape::geom::Vec2,_this12,"_this") = _this11->zpp_inner->wrap_vel;
HXDLIN(  51)			HX_VARI_NAME(  ::nape::geom::Vec2,_this13,"_this") = this->_currentSpeed;
HXDLIN(  51)			{
HXLINE(  51)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this14,"_this") = _this13->zpp_inner;
HXDLIN(  51)				if (hx::IsNotNull( _this14->_validate )) {
HXLINE(  51)					_this14->_validate();
            				}
            			}
HXDLIN(  51)			HX_VARI( Float,y) = (((int)10000 * (_this13->zpp_inner->y * elapsed)) * this->_runSpeed);
HXDLIN(  51)			{
HXLINE(  51)				{
HXLINE(  51)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this15,"_this") = _this12->zpp_inner;
HXDLIN(  51)					if (hx::IsNotNull( _this15->_validate )) {
HXLINE(  51)						_this15->_validate();
            					}
            				}
HXDLIN(  51)				if ((_this12->zpp_inner->y != y)) {
HXLINE(  51)					_this12->zpp_inner->y = y;
HXDLIN(  51)					{
HXLINE(  51)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this16,"_this") = _this12->zpp_inner;
HXDLIN(  51)						if (hx::IsNotNull( _this16->_invalidate )) {
HXLINE(  51)							_this16->_invalidate(_this16);
            						}
            					}
            				}
            			}
HXDLIN(  51)			{
HXLINE(  51)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this17,"_this") = _this12->zpp_inner;
HXDLIN(  51)				if (hx::IsNotNull( _this17->_validate )) {
HXLINE(  51)					_this17->_validate();
            				}
            			}
            		}
HXLINE(  52)		{
HXLINE(  52)			HX_VARI_NAME(  ::nape::geom::Vec2,_this18,"_this") = this->_currentSpeed;
HXDLIN(  52)			{
HXLINE(  52)				{
HXLINE(  52)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this19,"_this") = _this18->zpp_inner;
HXDLIN(  52)					if (hx::IsNotNull( _this19->_validate )) {
HXLINE(  52)						_this19->_validate();
            					}
            				}
HXDLIN(  52)				if ((_this18->zpp_inner->x != (int)0)) {
HXLINE(  52)					_this18->zpp_inner->x = (int)0;
HXDLIN(  52)					{
HXLINE(  52)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this20,"_this") = _this18->zpp_inner;
HXDLIN(  52)						if (hx::IsNotNull( _this20->_invalidate )) {
HXLINE(  52)							_this20->_invalidate(_this20);
            						}
            					}
            				}
            			}
HXDLIN(  52)			{
HXLINE(  52)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this21,"_this") = _this18->zpp_inner;
HXDLIN(  52)				if (hx::IsNotNull( _this21->_validate )) {
HXLINE(  52)					_this21->_validate();
            				}
            			}
            		}
HXLINE(  53)		{
HXLINE(  53)			HX_VARI_NAME(  ::nape::geom::Vec2,_this22,"_this") = this->_currentSpeed;
HXDLIN(  53)			{
HXLINE(  53)				{
HXLINE(  53)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this23,"_this") = _this22->zpp_inner;
HXDLIN(  53)					if (hx::IsNotNull( _this23->_validate )) {
HXLINE(  53)						_this23->_validate();
            					}
            				}
HXDLIN(  53)				if ((_this22->zpp_inner->y != (int)0)) {
HXLINE(  53)					_this22->zpp_inner->y = (int)0;
HXDLIN(  53)					{
HXLINE(  53)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this24,"_this") = _this22->zpp_inner;
HXDLIN(  53)						if (hx::IsNotNull( _this24->_invalidate )) {
HXLINE(  53)							_this24->_invalidate(_this24);
            						}
            					}
            				}
            			}
HXDLIN(  53)			{
HXLINE(  53)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this25,"_this") = _this22->zpp_inner;
HXDLIN(  53)				if (hx::IsNotNull( _this25->_validate )) {
HXLINE(  53)					_this25->_validate();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,afterUpdate,(void))

void Character_obj::updateRun(){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_57_updateRun)
            	HX_STACK_THIS(this)
HXLINE(  57)		if (this->isRunning) {
HXLINE(  57)			this->_runSpeed = (int)2;
            		}
            		else {
HXLINE(  58)			this->_runSpeed = (int)1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Character_obj,updateRun,(void))

int Character_obj::move( ::Dynamic __o_a_x, ::Dynamic __o_a_y){
 ::Dynamic a_x = __o_a_x.Default(0);
 ::Dynamic a_y = __o_a_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_61_move)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_x,"a_x")
            	HX_STACK_ARG(a_y,"a_y")
HXLINE(  62)		if (hx::IsNotEq( a_x,(int)0 )) {
HXLINE(  62)			HX_VARI(  ::nape::geom::Vec2,_this) = this->_currentSpeed;
HXDLIN(  62)			HX_VARI( Float,x) = a_x;
HXDLIN(  62)			{
HXLINE(  62)				{
HXLINE(  62)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = _this->zpp_inner;
HXDLIN(  62)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(  62)						_this1->_validate();
            					}
            				}
HXDLIN(  62)				if ((_this->zpp_inner->x != x)) {
HXLINE(  62)					_this->zpp_inner->x = x;
HXDLIN(  62)					{
HXLINE(  62)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _this->zpp_inner;
HXDLIN(  62)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE(  62)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN(  62)			{
HXLINE(  62)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN(  62)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(  62)					_this3->_validate();
            				}
            			}
            		}
HXLINE(  63)		if (hx::IsNotEq( a_y,(int)0 )) {
HXLINE(  63)			HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = this->_currentSpeed;
HXDLIN(  63)			HX_VARI( Float,y) = a_y;
HXDLIN(  63)			{
HXLINE(  63)				{
HXLINE(  63)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this4->zpp_inner;
HXDLIN(  63)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE(  63)						_this5->_validate();
            					}
            				}
HXDLIN(  63)				if ((_this4->zpp_inner->y != y)) {
HXLINE(  63)					_this4->zpp_inner->y = y;
HXDLIN(  63)					{
HXLINE(  63)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = _this4->zpp_inner;
HXDLIN(  63)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE(  63)							_this6->_invalidate(_this6);
            						}
            					}
            				}
            			}
HXDLIN(  63)			{
HXLINE(  63)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = _this4->zpp_inner;
HXDLIN(  63)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE(  63)					_this7->_validate();
            				}
            			}
            		}
HXLINE(  64)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Character_obj,move,return )

void Character_obj::die(){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_67_die)
            	HX_STACK_THIS(this)
HXLINE(  68)		::flixel::FlxG_obj::game->_state->remove(hx::ObjectPtr<OBJ_>(this),null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  69)		::flixel::FlxG_obj::game->_state->remove(this->tileSelected,null()).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Character_obj,die,(void))

void Character_obj::onMouseDown( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_73_onMouseDown)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  73)		::Shared_obj::player->setCharacter(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,onMouseDown,(void))

void Character_obj::onMouseUp( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_77_onMouseUp)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  77)		::haxe::Log_obj::trace(HX_("MouseUp",c0,1b,c4,8d),hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),77,HX_("characters.Character",c5,d6,e5,5c),HX_("onMouseUp",81,ac,1d,98)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,onMouseUp,(void))

void Character_obj::onMouseOver( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_81_onMouseOver)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  81)		::haxe::Log_obj::trace(HX_("MouseOver",f9,29,e0,97),hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),81,HX_("characters.Character",c5,d6,e5,5c),HX_("onMouseOver",fa,2c,50,18)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,onMouseOver,(void))

void Character_obj::onMouseOut( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_85_onMouseOut)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  85)		::haxe::Log_obj::trace(HX_("MouseOut",89,a3,cf,7d),hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),85,HX_("characters.Character",c5,d6,e5,5c),HX_("onMouseOut",a8,bb,d4,81)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,onMouseOut,(void))

void Character_obj::takeItem( ::items::Item item){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_89_takeItem)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(item,"item")
HXLINE(  89)		if (this->inventory->addItem(item)) {
HXLINE(  90)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  90)			int _hx_tmp1 = this->inventory->getSize();
HXDLIN(  90)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),90,HX_("characters.Character",c5,d6,e5,5c),HX_("takeItem",fa,d8,be,cc)));
HXLINE(  91)			item->kill();
HXLINE(  92)			::haxe::Log_obj::trace(HX_("Added in inventory!",e0,d6,81,0b),hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),92,HX_("characters.Character",c5,d6,e5,5c),HX_("takeItem",fa,d8,be,cc)));
            		}
            		else {
HXLINE(  94)			::haxe::Log_obj::trace(HX_("Not enough place in inventory!",e4,0a,37,c0),hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),94,HX_("characters.Character",c5,d6,e5,5c),HX_("takeItem",fa,d8,be,cc)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,takeItem,(void))

void Character_obj::setOwner( ::Player a_player){
            	HX_STACKFRAME(&_hx_pos_0fc8f208a1fe4b83_99_setOwner)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_player,"a_player")
HXLINE(  99)		this->owner = a_player;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,setOwner,(void))


hx::ObjectPtr< Character_obj > Character_obj::__new(Float a_x,Float a_y,::String a_texturePath) {
	hx::ObjectPtr< Character_obj > __this = new Character_obj();
	__this->__construct(a_x,a_y,a_texturePath);
	return __this;
}

hx::ObjectPtr< Character_obj > Character_obj::__alloc(hx::Ctx *_hx_ctx,Float a_x,Float a_y,::String a_texturePath) {
	Character_obj *__this = (Character_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Character_obj), true, "characters.Character"));
	*(void **)__this = Character_obj::_hx_vtable;
	__this->__construct(a_x,a_y,a_texturePath);
	return __this;
}

Character_obj::Character_obj()
{
}

void Character_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Character);
	HX_MARK_MEMBER_NAME(owner,"owner");
	HX_MARK_MEMBER_NAME(inventory,"inventory");
	HX_MARK_MEMBER_NAME(tileSelected,"tileSelected");
	HX_MARK_MEMBER_NAME(isRunning,"isRunning");
	HX_MARK_MEMBER_NAME(_runSpeed,"_runSpeed");
	HX_MARK_MEMBER_NAME(_currentSpeed,"_currentSpeed");
	 ::flixel::addons::nape::FlxNapeSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Character_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(owner,"owner");
	HX_VISIT_MEMBER_NAME(inventory,"inventory");
	HX_VISIT_MEMBER_NAME(tileSelected,"tileSelected");
	HX_VISIT_MEMBER_NAME(isRunning,"isRunning");
	HX_VISIT_MEMBER_NAME(_runSpeed,"_runSpeed");
	HX_VISIT_MEMBER_NAME(_currentSpeed,"_currentSpeed");
	 ::flixel::addons::nape::FlxNapeSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Character_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"die") ) { return hx::Val( die_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { return hx::Val( owner); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"takeItem") ) { return hx::Val( takeItem_dyn()); }
		if (HX_FIELD_EQ(inName,"setOwner") ) { return hx::Val( setOwner_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory); }
		if (HX_FIELD_EQ(inName,"isRunning") ) { return hx::Val( isRunning); }
		if (HX_FIELD_EQ(inName,"_runSpeed") ) { return hx::Val( _runSpeed); }
		if (HX_FIELD_EQ(inName,"updateRun") ) { return hx::Val( updateRun_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return hx::Val( onMouseOut_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"afterUpdate") ) { return hx::Val( afterUpdate_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return hx::Val( onMouseOver_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tileSelected") ) { return hx::Val( tileSelected); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentSpeed") ) { return hx::Val( _currentSpeed); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Character_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { owner=inValue.Cast<  ::Player >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { inventory=inValue.Cast<  ::items::Inventory >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isRunning") ) { isRunning=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_runSpeed") ) { _runSpeed=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tileSelected") ) { tileSelected=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentSpeed") ) { _currentSpeed=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Character_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("owner","\x33","\x98","\x76","\x38"));
	outFields->push(HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"));
	outFields->push(HX_HCSTRING("tileSelected","\xa9","\x8f","\xbf","\x89"));
	outFields->push(HX_HCSTRING("isRunning","\x35","\xeb","\x67","\xef"));
	outFields->push(HX_HCSTRING("_runSpeed","\x9b","\xc7","\x34","\xd1"));
	outFields->push(HX_HCSTRING("_currentSpeed","\x6d","\x0f","\xe4","\xaa"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Character_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Player*/ ,(int)offsetof(Character_obj,owner),HX_HCSTRING("owner","\x33","\x98","\x76","\x38")},
	{hx::fsObject /*::items::Inventory*/ ,(int)offsetof(Character_obj,inventory),HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Character_obj,tileSelected),HX_HCSTRING("tileSelected","\xa9","\x8f","\xbf","\x89")},
	{hx::fsBool,(int)offsetof(Character_obj,isRunning),HX_HCSTRING("isRunning","\x35","\xeb","\x67","\xef")},
	{hx::fsFloat,(int)offsetof(Character_obj,_runSpeed),HX_HCSTRING("_runSpeed","\x9b","\xc7","\x34","\xd1")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(Character_obj,_currentSpeed),HX_HCSTRING("_currentSpeed","\x6d","\x0f","\xe4","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Character_obj_sStaticStorageInfo = 0;
#endif

static ::String Character_obj_sMemberFields[] = {
	HX_HCSTRING("owner","\x33","\x98","\x76","\x38"),
	HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"),
	HX_HCSTRING("tileSelected","\xa9","\x8f","\xbf","\x89"),
	HX_HCSTRING("isRunning","\x35","\xeb","\x67","\xef"),
	HX_HCSTRING("_runSpeed","\x9b","\xc7","\x34","\xd1"),
	HX_HCSTRING("_currentSpeed","\x6d","\x0f","\xe4","\xaa"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("afterUpdate","\x45","\xdd","\x65","\xd8"),
	HX_HCSTRING("updateRun","\xc2","\xc4","\xe3","\x82"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("die","\x40","\x3d","\x4c","\x00"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("onMouseOver","\xfa","\x2c","\x50","\x18"),
	HX_HCSTRING("onMouseOut","\xa8","\xbb","\xd4","\x81"),
	HX_HCSTRING("takeItem","\xfa","\xd8","\xbe","\xcc"),
	HX_HCSTRING("setOwner","\x31","\x01","\xab","\x46"),
	::String(null()) };

static void Character_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Character_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Character_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Character_obj::__mClass,"__mClass");
};

#endif

hx::Class Character_obj::__mClass;

void Character_obj::__register()
{
	hx::Object *dummy = new Character_obj;
	Character_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("characters.Character","\xc5","\xd6","\xe5","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Character_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Character_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Character_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Character_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Character_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Character_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace characters
