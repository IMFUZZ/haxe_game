// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gametime_Clock
#include <gametime/Clock.h>
#endif
#ifndef INCLUDED_gametime_TimeStamp
#include <gametime/TimeStamp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_935c26ab65372d2c_11_new,"gametime.TimeStamp","new",0x59b284d9,"gametime.TimeStamp.new","gametime/TimeStamp.hx",11,0x04b81638)
namespace gametime{

void TimeStamp_obj::__construct( ::gametime::Clock clock){
            	HX_STACKFRAME(&_hx_pos_935c26ab65372d2c_11_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(clock,"clock")
HXLINE(  12)		this->hours = clock->getCurrentHour();
HXLINE(  13)		this->minutes = clock->getCurrentMinute();
HXLINE(  14)		this->day = clock->getCurrentDay();
HXLINE(  15)		this->year = clock->getCurrentYear();
            	}

Dynamic TimeStamp_obj::__CreateEmpty() { return new TimeStamp_obj; }

void *TimeStamp_obj::_hx_vtable = 0;

Dynamic TimeStamp_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TimeStamp_obj > _hx_result = new TimeStamp_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TimeStamp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fef09cf;
}


hx::ObjectPtr< TimeStamp_obj > TimeStamp_obj::__new( ::gametime::Clock clock) {
	hx::ObjectPtr< TimeStamp_obj > __this = new TimeStamp_obj();
	__this->__construct(clock);
	return __this;
}

hx::ObjectPtr< TimeStamp_obj > TimeStamp_obj::__alloc(hx::Ctx *_hx_ctx, ::gametime::Clock clock) {
	TimeStamp_obj *__this = (TimeStamp_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TimeStamp_obj), false, "gametime.TimeStamp"));
	*(void **)__this = TimeStamp_obj::_hx_vtable;
	__this->__construct(clock);
	return __this;
}

TimeStamp_obj::TimeStamp_obj()
{
}

hx::Val TimeStamp_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"day") ) { return hx::Val( day); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"year") ) { return hx::Val( year); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"hours") ) { return hx::Val( hours); }
		if (HX_FIELD_EQ(inName,"month") ) { return hx::Val( month); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minutes") ) { return hx::Val( minutes); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TimeStamp_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"day") ) { day=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"year") ) { year=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"hours") ) { hours=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"month") ) { month=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minutes") ) { minutes=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TimeStamp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("hours","\xcf","\x2e","\x64","\x2b"));
	outFields->push(HX_HCSTRING("minutes","\x1f","\x97","\xde","\x53"));
	outFields->push(HX_HCSTRING("day","\x5c","\x36","\x4c","\x00"));
	outFields->push(HX_HCSTRING("month","\x40","\xc7","\x5f","\x0c"));
	outFields->push(HX_HCSTRING("year","\xbd","\xc9","\x47","\x50"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TimeStamp_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TimeStamp_obj,hours),HX_HCSTRING("hours","\xcf","\x2e","\x64","\x2b")},
	{hx::fsInt,(int)offsetof(TimeStamp_obj,minutes),HX_HCSTRING("minutes","\x1f","\x97","\xde","\x53")},
	{hx::fsInt,(int)offsetof(TimeStamp_obj,day),HX_HCSTRING("day","\x5c","\x36","\x4c","\x00")},
	{hx::fsInt,(int)offsetof(TimeStamp_obj,month),HX_HCSTRING("month","\x40","\xc7","\x5f","\x0c")},
	{hx::fsInt,(int)offsetof(TimeStamp_obj,year),HX_HCSTRING("year","\xbd","\xc9","\x47","\x50")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TimeStamp_obj_sStaticStorageInfo = 0;
#endif

static ::String TimeStamp_obj_sMemberFields[] = {
	HX_HCSTRING("hours","\xcf","\x2e","\x64","\x2b"),
	HX_HCSTRING("minutes","\x1f","\x97","\xde","\x53"),
	HX_HCSTRING("day","\x5c","\x36","\x4c","\x00"),
	HX_HCSTRING("month","\x40","\xc7","\x5f","\x0c"),
	HX_HCSTRING("year","\xbd","\xc9","\x47","\x50"),
	::String(null()) };

static void TimeStamp_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TimeStamp_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TimeStamp_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TimeStamp_obj::__mClass,"__mClass");
};

#endif

hx::Class TimeStamp_obj::__mClass;

void TimeStamp_obj::__register()
{
	hx::Object *dummy = new TimeStamp_obj;
	TimeStamp_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("gametime.TimeStamp","\x67","\x24","\x4f","\xac");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TimeStamp_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TimeStamp_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TimeStamp_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TimeStamp_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimeStamp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimeStamp_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gametime
