// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_time_Clock
#include <time/Clock.h>
#endif
#ifndef INCLUDED_time_TimeStamp
#include <time/TimeStamp.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("Spring",ed,4a,2a,f8),HX_("Summer",8f,21,e0,d5),HX_("Autumn",36,3a,1a,a8),HX_("Winter",65,23,2d,87),
};
namespace time{

void Clock_obj::__construct(){
            	HX_STACK_FRAME("time.Clock","new",0xe45651ff,"time.Clock.new","time/Clock.hx",5,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  13)		this->_seasons = ::Array_obj< ::String >::fromData( _hx_array_data_0,4);
HXLINE(  12)		this->_monthsInYear = (int)12;
HXLINE(  11)		this->_daysInMonth = (int)25;
HXLINE(  10)		this->currentMonth = (int)0;
HXLINE(   9)		this->currentYear = (int)0;
HXLINE(   8)		this->currentDay = (int)0;
HXLINE(   7)		this->_secondsInADay = (int)480;
HXLINE(  16)		super::__construct(null());
HXLINE(  17)		this->start(this->_secondsInADay,this->_onComplete_dyn(),(int)0);
            	}

Dynamic Clock_obj::__CreateEmpty() { return new Clock_obj; }

hx::ObjectPtr< Clock_obj > Clock_obj::__new()
{
	hx::ObjectPtr< Clock_obj > _hx_result = new Clock_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Clock_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Clock_obj > _hx_result = new Clock_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Clock_obj::_onComplete( ::flixel::util::FlxTimer timer){
            	HX_STACK_FRAME("time.Clock","_onComplete",0x8fe45ab6,"time.Clock._onComplete","time/Clock.hx",21,0x358b9b52)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(timer,"timer")
HXLINE(  21)		this->addDays((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clock_obj,_onComplete,(void))

void Clock_obj::addDays(Int numberOfDays){
            	HX_STACK_FRAME("time.Clock","addDays",0xc92dda77,"time.Clock.addDays","time/Clock.hx",24,0x358b9b52)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numberOfDays,"numberOfDays")
HXLINE(  25)		hx::AddEq(this->currentDay,numberOfDays);
HXLINE(  26)		Bool _hx_tmp = (hx::Mod(this->currentDay,this->_daysInMonth) == (int)0);
HXDLIN(  26)		if (_hx_tmp) {
HXLINE(  27)			Float _hx_tmp1 = ((Float)this->currentDay / (Float)this->_daysInMonth);
HXDLIN(  27)			Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(  27)			hx::AddEq(this->currentMonth,hx::Mod(_hx_tmp2,this->_monthsInYear));
HXLINE(  28)			Bool _hx_tmp3 = (hx::Mod(this->currentMonth,this->_monthsInYear) == (int)0);
HXDLIN(  28)			if (_hx_tmp3) {
HXLINE(  29)				Float _hx_tmp4 = ((Float)this->currentDay / (Float)(this->_daysInMonth * this->_monthsInYear));
HXDLIN(  29)				hx::AddEq(this->currentYear,::Std_obj::_hx_int(_hx_tmp4));
HXLINE(  30)				Int _hx_tmp5 = this->currentDay;
HXDLIN(  30)				Int _hx_tmp6 = (this->_daysInMonth * this->_monthsInYear);
HXDLIN(  30)				this->currentDay = hx::Mod(_hx_tmp5,_hx_tmp6);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clock_obj,addDays,(void))

void Clock_obj::update(Float elapsed){
            	HX_STACK_FRAME("time.Clock","update",0x3de291ca,"time.Clock.update","time/Clock.hx",36,0x358b9b52)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  36)		this->super::update(elapsed);
            	}


Int Clock_obj::getCurrentYear(){
            	HX_STACK_FRAME("time.Clock","getCurrentYear",0xd3d82a61,"time.Clock.getCurrentYear","time/Clock.hx",40,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  40)		return this->currentYear;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentYear,return )

Int Clock_obj::getCurrentMonth(){
            	HX_STACK_FRAME("time.Clock","getCurrentMonth",0xa723f61c,"time.Clock.getCurrentMonth","time/Clock.hx",44,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  44)		return this->currentMonth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentMonth,return )

::String Clock_obj::getCurrentSeason(){
            	HX_STACK_FRAME("time.Clock","getCurrentSeason",0x33dd3dc7,"time.Clock.getCurrentSeason","time/Clock.hx",48,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  48)		Float _hx_tmp = ((Float)((Float)this->currentDay / (Float)(this->_daysInMonth * this->_monthsInYear)) / (Float)this->_seasons->length);
HXDLIN(  48)		Int _hx_tmp1 = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN(  48)		return this->_seasons->__get(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentSeason,return )

Int Clock_obj::getCurrentDay(){
            	HX_STACK_FRAME("time.Clock","getCurrentDay",0xfc4bb638,"time.Clock.getCurrentDay","time/Clock.hx",52,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  52)		return this->currentDay;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentDay,return )

Int Clock_obj::getCurrentHour(){
            	HX_STACK_FRAME("time.Clock","getCurrentHour",0xc8a331c8,"time.Clock.getCurrentHour","time/Clock.hx",56,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  56)		Float _hx_tmp;
HXDLIN(  56)		if ((this->time > (int)0)) {
HXLINE(  56)			_hx_tmp = ((Float)this->_timeCounter / (Float)this->time);
            		}
            		else {
HXLINE(  56)			_hx_tmp = (int)0;
            		}
HXDLIN(  56)		return ::Std_obj::_hx_int((_hx_tmp * (int)24));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentHour,return )

Int Clock_obj::getCurrentMinute(){
            	HX_STACK_FRAME("time.Clock","getCurrentMinute",0x23ecb478,"time.Clock.getCurrentMinute","time/Clock.hx",60,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  60)		Float _hx_tmp;
HXDLIN(  60)		if ((this->time > (int)0)) {
HXLINE(  60)			_hx_tmp = ((Float)this->_timeCounter / (Float)this->time);
            		}
            		else {
HXLINE(  60)			_hx_tmp = (int)0;
            		}
HXDLIN(  60)		Float _hx_tmp1 = (_hx_tmp * (int)1440);
HXDLIN(  60)		Int _hx_tmp2 = this->getCurrentHour();
HXDLIN(  60)		return ::Std_obj::_hx_int((_hx_tmp1 - (_hx_tmp2 * (int)60)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentMinute,return )

 ::time::TimeStamp Clock_obj::createTimeStamp(){
            	HX_STACK_FRAME("time.Clock","createTimeStamp",0x0abef239,"time.Clock.createTimeStamp","time/Clock.hx",64,0x358b9b52)
            	HX_STACK_THIS(this)
HXLINE(  64)		return  ::time::TimeStamp_obj::__new(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,createTimeStamp,return )


Clock_obj::Clock_obj()
{
}

void Clock_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Clock);
	HX_MARK_MEMBER_NAME(_secondsInADay,"_secondsInADay");
	HX_MARK_MEMBER_NAME(currentDay,"currentDay");
	HX_MARK_MEMBER_NAME(currentYear,"currentYear");
	HX_MARK_MEMBER_NAME(currentMonth,"currentMonth");
	HX_MARK_MEMBER_NAME(_daysInMonth,"_daysInMonth");
	HX_MARK_MEMBER_NAME(_monthsInYear,"_monthsInYear");
	HX_MARK_MEMBER_NAME(_seasons,"_seasons");
	 ::flixel::util::FlxTimer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Clock_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_secondsInADay,"_secondsInADay");
	HX_VISIT_MEMBER_NAME(currentDay,"currentDay");
	HX_VISIT_MEMBER_NAME(currentYear,"currentYear");
	HX_VISIT_MEMBER_NAME(currentMonth,"currentMonth");
	HX_VISIT_MEMBER_NAME(_daysInMonth,"_daysInMonth");
	HX_VISIT_MEMBER_NAME(_monthsInYear,"_monthsInYear");
	HX_VISIT_MEMBER_NAME(_seasons,"_seasons");
	 ::flixel::util::FlxTimer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Clock_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addDays") ) { return hx::Val( addDays_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_seasons") ) { return hx::Val( _seasons); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentDay") ) { return hx::Val( currentDay); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentYear") ) { return hx::Val( currentYear); }
		if (HX_FIELD_EQ(inName,"_onComplete") ) { return hx::Val( _onComplete_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentMonth") ) { return hx::Val( currentMonth); }
		if (HX_FIELD_EQ(inName,"_daysInMonth") ) { return hx::Val( _daysInMonth); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_monthsInYear") ) { return hx::Val( _monthsInYear); }
		if (HX_FIELD_EQ(inName,"getCurrentDay") ) { return hx::Val( getCurrentDay_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_secondsInADay") ) { return hx::Val( _secondsInADay); }
		if (HX_FIELD_EQ(inName,"getCurrentYear") ) { return hx::Val( getCurrentYear_dyn()); }
		if (HX_FIELD_EQ(inName,"getCurrentHour") ) { return hx::Val( getCurrentHour_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getCurrentMonth") ) { return hx::Val( getCurrentMonth_dyn()); }
		if (HX_FIELD_EQ(inName,"createTimeStamp") ) { return hx::Val( createTimeStamp_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCurrentSeason") ) { return hx::Val( getCurrentSeason_dyn()); }
		if (HX_FIELD_EQ(inName,"getCurrentMinute") ) { return hx::Val( getCurrentMinute_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Clock_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_seasons") ) { _seasons=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentDay") ) { currentDay=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentYear") ) { currentYear=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentMonth") ) { currentMonth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_daysInMonth") ) { _daysInMonth=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_monthsInYear") ) { _monthsInYear=inValue.Cast< Int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_secondsInADay") ) { _secondsInADay=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Clock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_secondsInADay","\x20","\x03","\x7e","\x15"));
	outFields->push(HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7"));
	outFields->push(HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88"));
	outFields->push(HX_HCSTRING("currentMonth","\x47","\xac","\x6b","\x53"));
	outFields->push(HX_HCSTRING("_daysInMonth","\x45","\xa9","\x54","\x75"));
	outFields->push(HX_HCSTRING("_monthsInYear","\xb4","\xa8","\xa8","\xa2"));
	outFields->push(HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Clock_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Clock_obj,_secondsInADay),HX_HCSTRING("_secondsInADay","\x20","\x03","\x7e","\x15")},
	{hx::fsInt,(int)offsetof(Clock_obj,currentDay),HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7")},
	{hx::fsInt,(int)offsetof(Clock_obj,currentYear),HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88")},
	{hx::fsInt,(int)offsetof(Clock_obj,currentMonth),HX_HCSTRING("currentMonth","\x47","\xac","\x6b","\x53")},
	{hx::fsInt,(int)offsetof(Clock_obj,_daysInMonth),HX_HCSTRING("_daysInMonth","\x45","\xa9","\x54","\x75")},
	{hx::fsInt,(int)offsetof(Clock_obj,_monthsInYear),HX_HCSTRING("_monthsInYear","\xb4","\xa8","\xa8","\xa2")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Clock_obj,_seasons),HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Clock_obj_sStaticStorageInfo = 0;
#endif

static ::String Clock_obj_sMemberFields[] = {
	HX_HCSTRING("_secondsInADay","\x20","\x03","\x7e","\x15"),
	HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7"),
	HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88"),
	HX_HCSTRING("currentMonth","\x47","\xac","\x6b","\x53"),
	HX_HCSTRING("_daysInMonth","\x45","\xa9","\x54","\x75"),
	HX_HCSTRING("_monthsInYear","\xb4","\xa8","\xa8","\xa2"),
	HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70"),
	HX_HCSTRING("_onComplete","\x17","\xa2","\x08","\x30"),
	HX_HCSTRING("addDays","\x58","\x9d","\xa0","\x7e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("getCurrentYear","\xa0","\xf5","\x77","\x10"),
	HX_HCSTRING("getCurrentMonth","\xfd","\x01","\x56","\x76"),
	HX_HCSTRING("getCurrentSeason","\xc6","\x96","\x75","\xb0"),
	HX_HCSTRING("getCurrentDay","\xd9","\x57","\x99","\x23"),
	HX_HCSTRING("getCurrentHour","\x07","\xfd","\x42","\x05"),
	HX_HCSTRING("getCurrentMinute","\x77","\x0d","\x85","\xa0"),
	HX_HCSTRING("createTimeStamp","\x1a","\xfe","\xf0","\xd9"),
	::String(null()) };

static void Clock_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Clock_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Clock_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Clock_obj::__mClass,"__mClass");
};

#endif

hx::Class Clock_obj::__mClass;

void Clock_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("time.Clock","\x8d","\xe6","\x2f","\xa9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Clock_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Clock_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Clock_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Clock_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Clock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Clock_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace time
