// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Clock
#include <Clock.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TimeEvent
#include <TimeEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

void Clock_obj::__construct(){
            	HX_STACK_FRAME("Clock","new",0xae3589a0,"Clock.new","Clock.hx",5,0x2c6789d0)
            	HX_STACK_THIS(this)
HXLINE(  10)		this->_seasons = ::Array_obj< ::String >::__new(4)->init(0,HX_("Spring",ed,4a,2a,f8))->init(1,HX_("Summer",8f,21,e0,d5))->init(2,HX_("Autumn",36,3a,1a,a8))->init(3,HX_("Winter",65,23,2d,87));
HXLINE(   9)		this->daysInMonth = (int)25;
HXLINE(   8)		this->currentYear = (int)0;
HXLINE(   7)		this->currentDay = (int)0;
HXLINE(  14)		super::__construct();
HXLINE(  15)		this->_timeEvent = ::Array_obj< ::Dynamic>::__new();
HXLINE(  16)		this->start((int)40,this->_onComplete_dyn(),(int)0);
            	}

Dynamic Clock_obj::__CreateEmpty() { return new Clock_obj; }

hx::ObjectPtr< Clock_obj > Clock_obj::__new()
{
	hx::ObjectPtr< Clock_obj > _hx_result = new Clock_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Clock_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Clock_obj > _hx_result = new Clock_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Clock_obj::_onComplete(::flixel::util::FlxTimer timer){
            	HX_STACK_FRAME("Clock","_onComplete",0x58259b57,"Clock._onComplete","Clock.hx",20,0x2c6789d0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(timer,"timer")
HXLINE(  20)		this->addDay(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clock_obj,_onComplete,(void))

void Clock_obj::addDay( ::Dynamic __o_numberOfDays){
 ::Dynamic numberOfDays = __o_numberOfDays.Default(1);
            	HX_STACK_FRAME("Clock","addDay",0x8682d57b,"Clock.addDay","Clock.hx",23,0x2c6789d0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numberOfDays,"numberOfDays")
HXLINE(  24)		this->currentDay++;
HXLINE(  25)		Bool _hx_tmp = (this->currentDay >= (int)100);
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  26)			this->currentYear++;
HXLINE(  27)			this->currentDay = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clock_obj,addDay,(void))

void Clock_obj::update(Float elapsed){
            	HX_STACK_FRAME("Clock","update",0x6e8b14c9,"Clock.update","Clock.hx",32,0x2c6789d0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  32)		this->super::update(elapsed);
            	}


Int Clock_obj::getCurrentYear(){
            	HX_STACK_FRAME("Clock","getCurrentYear",0xa24a4460,"Clock.getCurrentYear","Clock.hx",36,0x2c6789d0)
            	HX_STACK_THIS(this)
HXLINE(  36)		return this->currentYear;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentYear,return )

::String Clock_obj::getCurrentSeason(){
            	HX_STACK_FRAME("Clock","getCurrentSeason",0x16891586,"Clock.getCurrentSeason","Clock.hx",40,0x2c6789d0)
            	HX_STACK_THIS(this)
HXLINE(  40)		Float _hx_tmp = ((Float)this->currentDay / (Float)(int)25);
HXDLIN(  40)		Int _hx_tmp1 = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN(  40)		return this->_seasons->__get(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentSeason,return )

Int Clock_obj::getCurrentDay(){
            	HX_STACK_FRAME("Clock","getCurrentDay",0x47d72119,"Clock.getCurrentDay","Clock.hx",44,0x2c6789d0)
            	HX_STACK_THIS(this)
HXLINE(  44)		return this->currentDay;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentDay,return )

Int Clock_obj::getCurrentHour(){
            	HX_STACK_FRAME("Clock","getCurrentHour",0x97154bc7,"Clock.getCurrentHour","Clock.hx",48,0x2c6789d0)
            	HX_STACK_THIS(this)
HXLINE(  48)		Float _hx_tmp;
HXDLIN(  48)		if ((this->time > (int)0)) {
HXLINE(  48)			_hx_tmp = ((Float)this->_timeCounter / (Float)this->time);
            		}
            		else {
HXLINE(  48)			_hx_tmp = (int)0;
            		}
HXDLIN(  48)		return ::Std_obj::_hx_int((_hx_tmp * (int)24));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentHour,return )

Int Clock_obj::getCurrentMinute(){
            	HX_STACK_FRAME("Clock","getCurrentMinute",0x06988c37,"Clock.getCurrentMinute","Clock.hx",52,0x2c6789d0)
            	HX_STACK_THIS(this)
HXLINE(  52)		Float _hx_tmp;
HXDLIN(  52)		if ((this->time > (int)0)) {
HXLINE(  52)			_hx_tmp = ((Float)this->_timeCounter / (Float)this->time);
            		}
            		else {
HXLINE(  52)			_hx_tmp = (int)0;
            		}
HXDLIN(  52)		Float _hx_tmp1 = (_hx_tmp * (int)1440);
HXDLIN(  52)		Int _hx_tmp2 = this->getCurrentHour();
HXDLIN(  52)		return ::Std_obj::_hx_int((_hx_tmp1 - (_hx_tmp2 * (int)60)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentMinute,return )

Int Clock_obj::addTimeEvent(::TimeEvent a_timeEvent, ::Dynamic a_Event){
            	HX_STACK_FRAME("Clock","addTimeEvent",0x1b46dd2c,"Clock.addTimeEvent","Clock.hx",56,0x2c6789d0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_timeEvent,"a_timeEvent")
            	HX_STACK_ARG(a_Event,"a_Event")
HXLINE(  56)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Clock_obj,addTimeEvent,return )


Clock_obj::Clock_obj()
{
}

void Clock_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Clock);
	HX_MARK_MEMBER_NAME(currentDay,"currentDay");
	HX_MARK_MEMBER_NAME(currentYear,"currentYear");
	HX_MARK_MEMBER_NAME(daysInMonth,"daysInMonth");
	HX_MARK_MEMBER_NAME(_seasons,"_seasons");
	HX_MARK_MEMBER_NAME(_timeEvent,"_timeEvent");
	::flixel::util::FlxTimer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Clock_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentDay,"currentDay");
	HX_VISIT_MEMBER_NAME(currentYear,"currentYear");
	HX_VISIT_MEMBER_NAME(daysInMonth,"daysInMonth");
	HX_VISIT_MEMBER_NAME(_seasons,"_seasons");
	HX_VISIT_MEMBER_NAME(_timeEvent,"_timeEvent");
	::flixel::util::FlxTimer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Clock_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"addDay") ) { return hx::Val( addDay_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_seasons") ) { return hx::Val( _seasons); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentDay") ) { return hx::Val( currentDay); }
		if (HX_FIELD_EQ(inName,"_timeEvent") ) { return hx::Val( _timeEvent); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentYear") ) { return hx::Val( currentYear); }
		if (HX_FIELD_EQ(inName,"daysInMonth") ) { return hx::Val( daysInMonth); }
		if (HX_FIELD_EQ(inName,"_onComplete") ) { return hx::Val( _onComplete_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addTimeEvent") ) { return hx::Val( addTimeEvent_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getCurrentDay") ) { return hx::Val( getCurrentDay_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCurrentYear") ) { return hx::Val( getCurrentYear_dyn()); }
		if (HX_FIELD_EQ(inName,"getCurrentHour") ) { return hx::Val( getCurrentHour_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCurrentSeason") ) { return hx::Val( getCurrentSeason_dyn()); }
		if (HX_FIELD_EQ(inName,"getCurrentMinute") ) { return hx::Val( getCurrentMinute_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Clock_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_seasons") ) { _seasons=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentDay") ) { currentDay=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timeEvent") ) { _timeEvent=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentYear") ) { currentYear=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daysInMonth") ) { daysInMonth=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Clock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7"));
	outFields->push(HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88"));
	outFields->push(HX_HCSTRING("daysInMonth","\x44","\xfb","\x4a","\x0f"));
	outFields->push(HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70"));
	outFields->push(HX_HCSTRING("_timeEvent","\x8e","\x18","\x58","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Clock_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Clock_obj,currentDay),HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7")},
	{hx::fsInt,(int)offsetof(Clock_obj,currentYear),HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88")},
	{hx::fsInt,(int)offsetof(Clock_obj,daysInMonth),HX_HCSTRING("daysInMonth","\x44","\xfb","\x4a","\x0f")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Clock_obj,_seasons),HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Clock_obj,_timeEvent),HX_HCSTRING("_timeEvent","\x8e","\x18","\x58","\x86")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Clock_obj_sStaticStorageInfo = 0;
#endif

static ::String Clock_obj_sMemberFields[] = {
	HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7"),
	HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88"),
	HX_HCSTRING("daysInMonth","\x44","\xfb","\x4a","\x0f"),
	HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70"),
	HX_HCSTRING("_timeEvent","\x8e","\x18","\x58","\x86"),
	HX_HCSTRING("_onComplete","\x17","\xa2","\x08","\x30"),
	HX_HCSTRING("addDay","\xbb","\x46","\xfd","\x9e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("getCurrentYear","\xa0","\xf5","\x77","\x10"),
	HX_HCSTRING("getCurrentSeason","\xc6","\x96","\x75","\xb0"),
	HX_HCSTRING("getCurrentDay","\xd9","\x57","\x99","\x23"),
	HX_HCSTRING("getCurrentHour","\x07","\xfd","\x42","\x05"),
	HX_HCSTRING("getCurrentMinute","\x77","\x0d","\x85","\xa0"),
	HX_HCSTRING("addTimeEvent","\x6c","\xbe","\x09","\x2a"),
	::String(null()) };

static void Clock_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Clock_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Clock_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Clock_obj::__mClass,"__mClass");
};

#endif

hx::Class Clock_obj::__mClass;

void Clock_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Clock","\xae","\x79","\x90","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Clock_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Clock_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Clock_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Clock_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Clock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Clock_obj_sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

