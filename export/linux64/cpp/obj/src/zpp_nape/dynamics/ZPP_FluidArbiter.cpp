// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_dynamics_Arbiter
#include <nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_FluidArbiter
#include <nape/dynamics/FluidArbiter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_446_new,"zpp_nape.dynamics.ZPP_FluidArbiter","new",0xb3e8b5cf,"zpp_nape.dynamics.ZPP_FluidArbiter.new","zpp_nape/dynamics/Arbiter.hx",446,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_476_alloc,"zpp_nape.dynamics.ZPP_FluidArbiter","alloc",0x904003a4,"zpp_nape.dynamics.ZPP_FluidArbiter.alloc","zpp_nape/dynamics/Arbiter.hx",476,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_488_free,"zpp_nape.dynamics.ZPP_FluidArbiter","free",0xb276785d,"zpp_nape.dynamics.ZPP_FluidArbiter.free","zpp_nape/dynamics/Arbiter.hx",488,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_522_position_validate,"zpp_nape.dynamics.ZPP_FluidArbiter","position_validate",0xcbea33db,"zpp_nape.dynamics.ZPP_FluidArbiter.position_validate","zpp_nape/dynamics/Arbiter.hx",522,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_544_position_invalidate,"zpp_nape.dynamics.ZPP_FluidArbiter","position_invalidate",0xe7039800,"zpp_nape.dynamics.ZPP_FluidArbiter.position_invalidate","zpp_nape/dynamics/Arbiter.hx",544,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_566_getposition,"zpp_nape.dynamics.ZPP_FluidArbiter","getposition",0xe86b13ae,"zpp_nape.dynamics.ZPP_FluidArbiter.getposition","zpp_nape/dynamics/Arbiter.hx",566,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_601_assign,"zpp_nape.dynamics.ZPP_FluidArbiter","assign",0xb42d3020,"zpp_nape.dynamics.ZPP_FluidArbiter.assign","zpp_nape/dynamics/Arbiter.hx",601,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_647_retire,"zpp_nape.dynamics.ZPP_FluidArbiter","retire",0x714b738c,"zpp_nape.dynamics.ZPP_FluidArbiter.retire","zpp_nape/dynamics/Arbiter.hx",647,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_671_makemutable,"zpp_nape.dynamics.ZPP_FluidArbiter","makemutable",0xcf2febe7,"zpp_nape.dynamics.ZPP_FluidArbiter.makemutable","zpp_nape/dynamics/Arbiter.hx",671,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_677_makeimmutable,"zpp_nape.dynamics.ZPP_FluidArbiter","makeimmutable",0x0892e6c3,"zpp_nape.dynamics.ZPP_FluidArbiter.makeimmutable","zpp_nape/dynamics/Arbiter.hx",677,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_683_inject,"zpp_nape.dynamics.ZPP_FluidArbiter","inject",0x00113482,"zpp_nape.dynamics.ZPP_FluidArbiter.inject","zpp_nape/dynamics/Arbiter.hx",683,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_709_preStep,"zpp_nape.dynamics.ZPP_FluidArbiter","preStep",0xdea689fe,"zpp_nape.dynamics.ZPP_FluidArbiter.preStep","zpp_nape/dynamics/Arbiter.hx",709,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_1268_warmStart,"zpp_nape.dynamics.ZPP_FluidArbiter","warmStart",0x40a04a8c,"zpp_nape.dynamics.ZPP_FluidArbiter.warmStart","zpp_nape/dynamics/Arbiter.hx",1268,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_1303_applyImpulseVel,"zpp_nape.dynamics.ZPP_FluidArbiter","applyImpulseVel",0x4f9f97a5,"zpp_nape.dynamics.ZPP_FluidArbiter.applyImpulseVel","zpp_nape/dynamics/Arbiter.hx",1303,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_55ad567f8bfbf8c4_449_boot,"zpp_nape.dynamics.ZPP_FluidArbiter","boot",0xafcf5fe3,"zpp_nape.dynamics.ZPP_FluidArbiter.boot","zpp_nape/dynamics/Arbiter.hx",449,0x26846f2e)
namespace zpp_nape{
namespace dynamics{

void ZPP_FluidArbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_446_new)
            	HX_STACK_THIS(this)
HXLINE( 706)		this->pre_dt = ((Float)0.0);
HXLINE( 668)		this->_hx_mutable = false;
HXLINE( 565)		this->wrap_position = null();
HXLINE( 517)		this->buoyy = ((Float)0.0);
HXLINE( 516)		this->buoyx = ((Float)0.0);
HXLINE( 515)		this->ny = ((Float)0.0);
HXLINE( 514)		this->nx = ((Float)0.0);
HXLINE( 513)		this->lgamma = ((Float)0.0);
HXLINE( 512)		this->dampy = ((Float)0.0);
HXLINE( 511)		this->dampx = ((Float)0.0);
HXLINE( 510)		this->vMassc = ((Float)0.0);
HXLINE( 509)		this->vMassb = ((Float)0.0);
HXLINE( 508)		this->vMassa = ((Float)0.0);
HXLINE( 507)		this->agamma = ((Float)0.0);
HXLINE( 506)		this->adamp = ((Float)0.0);
HXLINE( 505)		this->wMass = ((Float)0.0);
HXLINE( 504)		this->nodrag = false;
HXLINE( 503)		this->r2y = ((Float)0.0);
HXLINE( 502)		this->r2x = ((Float)0.0);
HXLINE( 501)		this->r1y = ((Float)0.0);
HXLINE( 500)		this->r1x = ((Float)0.0);
HXLINE( 499)		this->overlap = ((Float)0.0);
HXLINE( 498)		this->centroidy = ((Float)0.0);
HXLINE( 497)		this->centroidx = ((Float)0.0);
HXLINE( 448)		this->next = null();
HXLINE( 447)		this->outer_zn = null();
HXLINE( 574)		super::__construct();
HXLINE( 575)		this->type = ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID;
HXLINE( 576)		this->fluidarb = hx::ObjectPtr<OBJ_>(this);
HXLINE( 577)		{
HXLINE( 578)			this->buoyx = (int)0;
HXLINE( 579)			this->buoyy = (int)0;
            		}
HXLINE( 597)		this->pre_dt = ((Float)-1.0);
            	}

Dynamic ZPP_FluidArbiter_obj::__CreateEmpty() { return new ZPP_FluidArbiter_obj; }

void *ZPP_FluidArbiter_obj::_hx_vtable = 0;

Dynamic ZPP_FluidArbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_FluidArbiter_obj > _hx_result = new ZPP_FluidArbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_FluidArbiter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0719aa23) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0719aa23;
	} else {
		return inClassId==(int)0x18020685;
	}
}

void ZPP_FluidArbiter_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_476_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,alloc,(void))

void ZPP_FluidArbiter_obj::free(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_488_free)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,free,(void))

void ZPP_FluidArbiter_obj::position_validate(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_522_position_validate)
            	HX_STACK_THIS(this)
HXLINE( 523)		this->wrap_position->zpp_inner->x = this->centroidx;
HXLINE( 524)		this->wrap_position->zpp_inner->y = this->centroidy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,position_validate,(void))

void ZPP_FluidArbiter_obj::position_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_544_position_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 545)		this->centroidx = x->x;
HXLINE( 546)		this->centroidy = x->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_FluidArbiter_obj,position_invalidate,(void))

void ZPP_FluidArbiter_obj::getposition(){
            	HX_GC_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_566_getposition)
            	HX_STACK_THIS(this)
HXLINE( 567)		HX_VARI( Float,x) = (int)0;
HXDLIN( 567)		HX_VARI( Float,y) = (int)0;
HXDLIN( 567)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 567)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 567)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 567)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 567)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 567)			ret->zpp_pool = null();
            		}
HXDLIN( 567)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 567)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 567)			{
HXLINE( 567)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 567)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 567)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 567)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 567)					ret1->next = null();
            				}
HXDLIN( 567)				ret1->weak = false;
            			}
HXDLIN( 567)			ret1->_immutable = false;
HXDLIN( 567)			{
HXLINE( 567)				ret1->x = x;
HXDLIN( 567)				ret1->y = y;
            			}
HXDLIN( 567)			ret->zpp_inner = ret1;
HXDLIN( 567)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 567)			bool _hx_tmp;
HXDLIN( 567)			{
HXLINE( 567)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 567)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 567)					_this->_validate();
            				}
            			}
HXDLIN( 567)			if ((ret->zpp_inner->x == x)) {
HXLINE( 567)				{
HXLINE( 567)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 567)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 567)						_this1->_validate();
            					}
            				}
HXDLIN( 567)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 567)				_hx_tmp = false;
            			}
HXDLIN( 567)			if (!(_hx_tmp)) {
HXLINE( 567)				{
HXLINE( 567)					ret->zpp_inner->x = x;
HXDLIN( 567)					ret->zpp_inner->y = y;
            				}
HXDLIN( 567)				{
HXLINE( 567)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 567)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 567)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 567)		ret->zpp_inner->weak = false;
HXDLIN( 567)		this->wrap_position = ret;
HXLINE( 568)		this->wrap_position->zpp_inner->_inuse = true;
HXLINE( 569)		this->wrap_position->zpp_inner->_immutable = !(this->_hx_mutable);
HXLINE( 570)		this->wrap_position->zpp_inner->_validate = this->position_validate_dyn();
HXLINE( 571)		this->wrap_position->zpp_inner->_invalidate = this->position_invalidate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,getposition,(void))

void ZPP_FluidArbiter_obj::assign( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2,int id,int di){
            	HX_GC_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_601_assign)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE( 602)		{
HXLINE( 602)			this->b1 = s1->body;
HXDLIN( 602)			this->ws1 = s1;
HXDLIN( 602)			this->b2 = s2->body;
HXDLIN( 602)			this->ws2 = s2;
HXDLIN( 602)			this->id = id;
HXDLIN( 602)			this->di = di;
HXDLIN( 602)			{
HXLINE( 602)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->b1->arbiters;
HXDLIN( 602)				HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN( 602)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE( 602)					ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 602)					ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 602)					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXDLIN( 602)					ret->next = null();
            				}
HXDLIN( 602)				ret->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 602)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret;
HXDLIN( 602)				temp->next = _this->head;
HXDLIN( 602)				_this->head = temp;
HXDLIN( 602)				_this->modified = true;
HXDLIN( 602)				_this->length++;
            			}
HXDLIN( 602)			{
HXLINE( 602)				HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = this->b2->arbiters;
HXDLIN( 602)				HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN( 602)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE( 602)					ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 602)					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 602)					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
HXDLIN( 602)					ret1->next = null();
            				}
HXDLIN( 602)				ret1->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 602)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp1,"temp") = ret1;
HXDLIN( 602)				temp1->next = _this1->head;
HXDLIN( 602)				_this1->head = temp1;
HXDLIN( 602)				_this1->modified = true;
HXDLIN( 602)				_this1->length++;
            			}
HXDLIN( 602)			this->active = true;
HXDLIN( 602)			this->present = (int)0;
HXDLIN( 602)			this->cleared = false;
HXDLIN( 602)			this->sleeping = false;
HXDLIN( 602)			this->fresh = false;
HXDLIN( 602)			this->presentable = false;
            		}
HXLINE( 603)		{
HXLINE( 604)			this->nx = (int)0;
HXLINE( 605)			this->ny = (int)1;
            		}
HXLINE( 623)		{
HXLINE( 624)			this->dampx = (int)0;
HXLINE( 625)			this->dampy = (int)0;
            		}
HXLINE( 643)		this->adamp = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_FluidArbiter_obj,assign,(void))

void ZPP_FluidArbiter_obj::retire(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_647_retire)
            	HX_STACK_THIS(this)
HXLINE( 648)		{
HXLINE( 648)			if (!(this->cleared)) {
HXLINE( 648)				{
HXLINE( 648)					HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->b1->arbiters;
HXDLIN( 648)					{
HXLINE( 648)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN( 648)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = _this->head;
HXDLIN( 648)						while(hx::IsNotNull( cur )){
HXLINE( 648)							if (hx::IsEq( cur->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 648)								{
HXLINE( 648)									HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN( 648)									HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN( 648)									if (hx::IsNull( pre )) {
HXLINE( 648)										old = _this->head;
HXDLIN( 648)										ret = old->next;
HXDLIN( 648)										_this->head = ret;
HXDLIN( 648)										if (hx::IsNull( _this->head )) {
HXLINE( 648)											_this->pushmod = true;
            										}
            									}
            									else {
HXLINE( 648)										old = pre->next;
HXDLIN( 648)										ret = old->next;
HXDLIN( 648)										pre->next = ret;
HXDLIN( 648)										if (hx::IsNull( ret )) {
HXLINE( 648)											_this->pushmod = true;
            										}
            									}
HXDLIN( 648)									{
HXLINE( 648)										HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN( 648)										o->elt = null();
HXDLIN( 648)										o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 648)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            									}
HXDLIN( 648)									_this->modified = true;
HXDLIN( 648)									_this->length--;
HXDLIN( 648)									_this->pushmod = true;
            								}
HXDLIN( 648)								goto _hx_goto_7;
            							}
HXDLIN( 648)							pre = cur;
HXDLIN( 648)							cur = cur->next;
            						}
            						_hx_goto_7:;
            					}
            				}
HXDLIN( 648)				{
HXLINE( 648)					HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = this->b2->arbiters;
HXDLIN( 648)					{
HXLINE( 648)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre1,"pre") = null();
HXDLIN( 648)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur1,"cur") = _this1->head;
HXDLIN( 648)						while(hx::IsNotNull( cur1 )){
HXLINE( 648)							if (hx::IsEq( cur1->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 648)								{
HXLINE( 648)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old1,"old");
HXDLIN( 648)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN( 648)									if (hx::IsNull( pre1 )) {
HXLINE( 648)										old1 = _this1->head;
HXDLIN( 648)										ret1 = old1->next;
HXDLIN( 648)										_this1->head = ret1;
HXDLIN( 648)										if (hx::IsNull( _this1->head )) {
HXLINE( 648)											_this1->pushmod = true;
            										}
            									}
            									else {
HXLINE( 648)										old1 = pre1->next;
HXDLIN( 648)										ret1 = old1->next;
HXDLIN( 648)										pre1->next = ret1;
HXDLIN( 648)										if (hx::IsNull( ret1 )) {
HXLINE( 648)											_this1->pushmod = true;
            										}
            									}
HXDLIN( 648)									{
HXLINE( 648)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o1,"o") = old1;
HXDLIN( 648)										o1->elt = null();
HXDLIN( 648)										o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 648)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            									}
HXDLIN( 648)									_this1->modified = true;
HXDLIN( 648)									_this1->length--;
HXDLIN( 648)									_this1->pushmod = true;
            								}
HXDLIN( 648)								goto _hx_goto_8;
            							}
HXDLIN( 648)							pre1 = cur1;
HXDLIN( 648)							cur1 = cur1->next;
            						}
            						_hx_goto_8:;
            					}
            				}
HXDLIN( 648)				if (hx::IsNotNull( this->pair )) {
HXLINE( 648)					this->pair->arb = null();
HXDLIN( 648)					this->pair = null();
            				}
            			}
HXDLIN( 648)			this->b1 = (this->b2 = null());
HXDLIN( 648)			this->active = false;
HXDLIN( 648)			this->intchange = false;
            		}
HXLINE( 649)		{
HXLINE( 650)			HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_FluidArbiter,o2,"o") = hx::ObjectPtr<OBJ_>(this);
HXLINE( 660)			o2->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
HXLINE( 661)			::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o2;
            		}
HXLINE( 666)		this->pre_dt = ((Float)-1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,retire,(void))

void ZPP_FluidArbiter_obj::makemutable(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_671_makemutable)
            	HX_STACK_THIS(this)
HXLINE( 672)		this->_hx_mutable = true;
HXLINE( 673)		if (hx::IsNotNull( this->wrap_position )) {
HXLINE( 673)			this->wrap_position->zpp_inner->_immutable = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,makemutable,(void))

void ZPP_FluidArbiter_obj::makeimmutable(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_677_makeimmutable)
            	HX_STACK_THIS(this)
HXLINE( 678)		this->_hx_mutable = false;
HXLINE( 679)		if (hx::IsNotNull( this->wrap_position )) {
HXLINE( 679)			this->wrap_position->zpp_inner->_immutable = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,makeimmutable,(void))

void ZPP_FluidArbiter_obj::inject(Float area,Float cx,Float cy){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_683_inject)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(area,"area")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
HXLINE( 684)		this->overlap = area;
HXLINE( 685)		{
HXLINE( 686)			this->centroidx = cx;
HXLINE( 687)			this->centroidy = cy;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_FluidArbiter_obj,inject,(void))

void ZPP_FluidArbiter_obj::preStep( ::zpp_nape::space::ZPP_Space s,Float dt){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_709_preStep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(dt,"dt")
HXLINE( 710)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 710)			this->pre_dt = dt;
            		}
HXLINE( 711)		HX_VARI( Float,dtratio) = ((Float)dt / (Float)this->pre_dt);
HXLINE( 712)		this->pre_dt = dt;
HXLINE( 713)		{
HXLINE( 714)			this->r1x = (this->centroidx - this->b1->posx);
HXLINE( 715)			this->r1y = (this->centroidy - this->b1->posy);
            		}
HXLINE( 717)		{
HXLINE( 718)			this->r2x = (this->centroidx - this->b2->posx);
HXLINE( 719)			this->r2y = (this->centroidy - this->b2->posy);
            		}
HXLINE( 721)		HX_VARI( Float,g1x) = ((Float)0.0);
HXLINE( 722)		HX_VARI( Float,g1y) = ((Float)0.0);
HXLINE( 723)		bool _hx_tmp;
HXDLIN( 723)		if (this->ws1->fluidEnabled) {
HXLINE( 723)			_hx_tmp = hx::IsNotNull( this->ws1->fluidProperties->wrap_gravity );
            		}
            		else {
HXLINE( 723)			_hx_tmp = false;
            		}
HXDLIN( 723)		if (_hx_tmp) {
HXLINE( 724)			g1x = this->ws1->fluidProperties->gravityx;
HXLINE( 725)			g1y = this->ws1->fluidProperties->gravityy;
            		}
            		else {
HXLINE( 744)			g1x = s->gravityx;
HXLINE( 745)			g1y = s->gravityy;
            		}
HXLINE( 763)		HX_VARI( Float,g2x) = ((Float)0.0);
HXLINE( 764)		HX_VARI( Float,g2y) = ((Float)0.0);
HXLINE( 765)		bool _hx_tmp1;
HXDLIN( 765)		if (this->ws2->fluidEnabled) {
HXLINE( 765)			_hx_tmp1 = hx::IsNotNull( this->ws2->fluidProperties->wrap_gravity );
            		}
            		else {
HXLINE( 765)			_hx_tmp1 = false;
            		}
HXDLIN( 765)		if (_hx_tmp1) {
HXLINE( 766)			g2x = this->ws2->fluidProperties->gravityx;
HXLINE( 767)			g2y = this->ws2->fluidProperties->gravityy;
            		}
            		else {
HXLINE( 786)			g2x = s->gravityx;
HXLINE( 787)			g2y = s->gravityy;
            		}
HXLINE( 805)		HX_VARI( Float,buoyx) = (int)0;
HXLINE( 806)		HX_VARI( Float,buoyy) = (int)0;
HXLINE( 823)		bool _hx_tmp2;
HXDLIN( 823)		if (this->ws1->fluidEnabled) {
HXLINE( 823)			_hx_tmp2 = this->ws2->fluidEnabled;
            		}
            		else {
HXLINE( 823)			_hx_tmp2 = false;
            		}
HXDLIN( 823)		if (_hx_tmp2) {
HXLINE( 824)			HX_VARI( Float,mass1) = (this->overlap * this->ws1->fluidProperties->density);
HXLINE( 825)			HX_VARI( Float,mass2) = (this->overlap * this->ws2->fluidProperties->density);
HXLINE( 826)			if ((mass1 > mass2)) {
HXLINE( 827)				HX_VARI( Float,t) = (mass1 + mass2);
HXLINE( 836)				buoyx = (buoyx - (g1x * t));
HXLINE( 837)				buoyy = (buoyy - (g1y * t));
            			}
            			else {
HXLINE( 839)				if ((mass1 < mass2)) {
HXLINE( 840)					HX_VARI_NAME( Float,t1,"t") = (mass1 + mass2);
HXLINE( 849)					buoyx = (buoyx + (g2x * t1));
HXLINE( 850)					buoyy = (buoyy + (g2y * t1));
            				}
            				else {
HXLINE( 853)					HX_VARI( Float,gx) = ((Float)0.0);
HXLINE( 854)					HX_VARI( Float,gy) = ((Float)0.0);
HXLINE( 855)					{
HXLINE( 856)						gx = (g1x + g2x);
HXLINE( 857)						gy = (g1y + g2y);
            					}
HXLINE( 859)					{
HXLINE( 869)						gx = (gx * ((Float)0.5));
HXLINE( 870)						gy = (gy * ((Float)0.5));
            					}
HXLINE( 872)					if ((((this->ws1->worldCOMx * gx) + (this->ws1->worldCOMy * gy)) > ((this->ws2->worldCOMx * gx) + (this->ws2->worldCOMy * gy)))) {
HXLINE( 873)						HX_VARI_NAME( Float,t2,"t") = (mass1 + mass2);
HXLINE( 882)						buoyx = (buoyx - (gx * t2));
HXLINE( 883)						buoyy = (buoyy - (gy * t2));
            					}
            					else {
HXLINE( 886)						HX_VARI_NAME( Float,t3,"t") = (mass1 + mass2);
HXLINE( 895)						buoyx = (buoyx + (gx * t3));
HXLINE( 896)						buoyy = (buoyy + (gy * t3));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 900)			if (this->ws1->fluidEnabled) {
HXLINE( 901)				HX_VARI( Float,mass) = (this->overlap * this->ws1->fluidProperties->density);
HXLINE( 902)				{
HXLINE( 912)					buoyx = (buoyx - (g1x * mass));
HXLINE( 913)					buoyy = (buoyy - (g1y * mass));
            				}
            			}
            			else {
HXLINE( 916)				if (this->ws2->fluidEnabled) {
HXLINE( 917)					HX_VARI_NAME( Float,mass3,"mass") = (this->overlap * this->ws2->fluidProperties->density);
HXLINE( 918)					{
HXLINE( 928)						buoyx = (buoyx + (g2x * mass3));
HXLINE( 929)						buoyy = (buoyy + (g2y * mass3));
            					}
            				}
            			}
            		}
HXLINE( 932)		{
HXLINE( 942)			buoyx = (buoyx * dt);
HXLINE( 943)			buoyy = (buoyy * dt);
            		}
HXLINE( 945)		{
HXLINE( 946)			this->buoyx = buoyx;
HXLINE( 947)			this->buoyy = buoyy;
            		}
HXLINE( 965)		if ((this->b1->type == (int)2)) {
HXLINE( 966)			{
HXLINE( 967)				HX_VARI_NAME( Float,t4,"t") = this->b1->imass;
HXLINE( 976)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN( 976)				_hx_tmp3->velx = (_hx_tmp3->velx - (buoyx * t4));
HXLINE( 977)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN( 977)				_hx_tmp4->vely = (_hx_tmp4->vely - (buoyy * t4));
            			}
HXLINE( 979)			 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN( 979)			_hx_tmp5->angvel = (_hx_tmp5->angvel - (((buoyy * this->r1x) - (buoyx * this->r1y)) * this->b1->iinertia));
            		}
HXLINE( 981)		if ((this->b2->type == (int)2)) {
HXLINE( 982)			{
HXLINE( 983)				HX_VARI_NAME( Float,t5,"t") = this->b2->imass;
HXLINE( 992)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b2;
HXDLIN( 992)				_hx_tmp6->velx = (_hx_tmp6->velx + (buoyx * t5));
HXLINE( 993)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN( 993)				_hx_tmp7->vely = (_hx_tmp7->vely + (buoyy * t5));
            			}
HXLINE( 995)			 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b2;
HXDLIN( 995)			_hx_tmp8->angvel = (_hx_tmp8->angvel + (((buoyy * this->r2x) - (buoyx * this->r2y)) * this->b2->iinertia));
            		}
HXLINE( 997)		bool _hx_tmp9;
HXDLIN( 997)		bool _hx_tmp10;
HXDLIN( 997)		if (!(!(this->ws1->fluidEnabled))) {
HXLINE( 997)			_hx_tmp10 = (this->ws1->fluidProperties->viscosity == (int)0);
            		}
            		else {
HXLINE( 997)			_hx_tmp10 = true;
            		}
HXDLIN( 997)		if (_hx_tmp10) {
HXLINE( 997)			if (!(!(this->ws2->fluidEnabled))) {
HXLINE( 997)				_hx_tmp9 = (this->ws2->fluidProperties->viscosity == (int)0);
            			}
            			else {
HXLINE( 997)				_hx_tmp9 = true;
            			}
            		}
            		else {
HXLINE( 997)			_hx_tmp9 = false;
            		}
HXDLIN( 997)		if (_hx_tmp9) {
HXLINE( 998)			this->nodrag = true;
HXLINE( 999)			{
HXLINE(1000)				this->dampx = (int)0;
HXLINE(1001)				this->dampy = (int)0;
            			}
HXLINE(1019)			this->adamp = (int)0;
            		}
            		else {
HXLINE(1022)			this->nodrag = false;
HXLINE(1023)			HX_VARI( Float,tViscosity) = ((Float)0.0);
HXLINE(1024)			if (this->ws1->fluidEnabled) {
HXLINE(1025)				this->ws2->validate_angDrag();
HXLINE(1026)				tViscosity = ((Float)((this->ws1->fluidProperties->viscosity * this->ws2->angDrag) * this->overlap) / (Float)this->ws2->area);
            			}
HXLINE(1028)			if (this->ws2->fluidEnabled) {
HXLINE(1029)				this->ws1->validate_angDrag();
HXLINE(1030)				tViscosity = (tViscosity + ((Float)((this->ws2->fluidProperties->viscosity * this->ws1->angDrag) * this->overlap) / (Float)this->ws1->area));
            			}
HXLINE(1032)			if ((tViscosity != (int)0)) {
HXLINE(1033)				HX_VARI( Float,iSum) = (this->b1->sinertia + this->b2->sinertia);
HXLINE(1034)				if ((iSum != (int)0)) {
HXLINE(1034)					this->wMass = ((Float)(int)1 / (Float)iSum);
            				}
            				else {
HXLINE(1035)					this->wMass = ((Float)0.0);
            				}
HXLINE(1037)				tViscosity = (tViscosity * ((Float)0.0004));
HXLINE(1038)				 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXLINE(1039)				HX_VARI( Float,omega) = (((int)2 * ::Math_obj::PI) * tViscosity);
HXLINE(1040)				this->agamma = ((Float)(int)1 / (Float)((dt * omega) * ((int)2 + (omega * dt))));
HXLINE(1041)				HX_VARI( Float,ig) = ((Float)(int)1 / (Float)((int)1 + this->agamma));
HXLINE(1043)				 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1043)				_hx_tmp12->agamma = (_hx_tmp12->agamma * ig);
HXLINE(1038)				_hx_tmp11->wMass = (_hx_tmp11->wMass * ig);
            			}
            			else {
HXLINE(1048)				this->wMass = ((Float)0.0);
HXLINE(1049)				this->agamma = ((Float)0.0);
            			}
HXLINE(1051)			HX_VARI( Float,vrnx) = (((this->b2->velx + this->b2->kinvelx) - (this->r2y * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->velx + this->b1->kinvelx) - (this->r1y * (this->b2->angvel + this->b2->kinangvel))));
HXLINE(1052)			HX_VARI( Float,vrny) = (((this->b2->vely + this->b2->kinvely) + (this->r2x * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->vely + this->b1->kinvely) + (this->r1x * (this->b1->angvel + this->b1->kinangvel))));
HXLINE(1069)			if (!((((vrnx * vrnx) + (vrny * vrny)) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))) {
HXLINE(1071)				{
HXLINE(1081)					HX_VARI( Float,imag) = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(((vrnx * vrnx) + (vrny * vrny))));
HXLINE(1082)					{
HXLINE(1092)						vrnx = (vrnx * imag);
HXLINE(1093)						vrny = (vrny * imag);
            					}
            				}
HXLINE(1096)				{
HXLINE(1097)					this->nx = vrnx;
HXLINE(1098)					this->ny = vrny;
            				}
            			}
HXLINE(1117)			HX_VARI_NAME( Float,tViscosity1,"tViscosity") = ((Float)0.0);
HXLINE(1118)			if (this->ws1->fluidEnabled) {
HXLINE(1119)				HX_VARI( Float,f) = ((Float)(-(this->ws1->fluidProperties->viscosity) * this->overlap) / (Float)this->ws2->area);
HXLINE(1120)				if ((this->ws2->type == (int)0)) {
HXLINE(1120)					tViscosity1 = (((Float)0.0) - ((Float)((f * this->ws2->circle->radius) * ::nape::Config_obj::fluidLinearDrag) / (Float)(((int)2 * this->ws2->circle->radius) * ::Math_obj::PI)));
            				}
            				else {
HXLINE(1123)					HX_VARI( Float,bord) = ((Float)0.0);
HXLINE(1124)					HX_VARI( Float,acc) = ((Float)0.0);
HXLINE(1125)					{
HXLINE(1126)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite) = this->ws2->polygon->edges->head;
HXLINE(1127)						while(hx::IsNotNull( cx_ite )){
HXLINE(1128)							HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ex) = cx_ite->elt;
HXLINE(1129)							{
HXLINE(1130)								bord = (bord + ex->length);
HXLINE(1131)								HX_VARI( Float,fact) = ((f * ex->length) * ((ex->gnormx * this->nx) + (ex->gnormy * this->ny)));
HXLINE(1132)								if ((fact > (int)0)) {
HXLINE(1132)									fact = (fact * -(::nape::Config_obj::fluidVacuumDrag));
HXDLIN(1132)									fact = fact;
            								}
HXLINE(1133)								acc = (acc - ((fact * ((Float)0.5)) * ::nape::Config_obj::fluidLinearDrag));
            							}
HXLINE(1135)							cx_ite = cx_ite->next;
            						}
            					}
HXLINE(1138)					tViscosity1 = ((Float)acc / (Float)bord);
            				}
            			}
HXLINE(1141)			if (this->ws2->fluidEnabled) {
HXLINE(1142)				HX_VARI_NAME( Float,f1,"f") = ((Float)(-(this->ws2->fluidProperties->viscosity) * this->overlap) / (Float)this->ws1->area);
HXLINE(1143)				if ((this->ws1->type == (int)0)) {
HXLINE(1143)					tViscosity1 = (tViscosity1 - ((Float)((f1 * this->ws1->circle->radius) * ::nape::Config_obj::fluidLinearDrag) / (Float)(((int)2 * this->ws1->circle->radius) * ::Math_obj::PI)));
            				}
            				else {
HXLINE(1146)					HX_VARI_NAME( Float,bord1,"bord") = ((Float)0.0);
HXLINE(1147)					HX_VARI_NAME( Float,acc1,"acc") = ((Float)0.0);
HXLINE(1148)					{
HXLINE(1149)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite1,"cx_ite") = this->ws1->polygon->edges->head;
HXLINE(1150)						while(hx::IsNotNull( cx_ite1 )){
HXLINE(1151)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,ex1,"ex") = cx_ite1->elt;
HXLINE(1152)							{
HXLINE(1153)								bord1 = (bord1 + ex1->length);
HXLINE(1154)								HX_VARI_NAME( Float,fact1,"fact") = ((f1 * ex1->length) * ((ex1->gnormx * this->nx) + (ex1->gnormy * this->ny)));
HXLINE(1155)								if ((fact1 > (int)0)) {
HXLINE(1155)									fact1 = (fact1 * -(::nape::Config_obj::fluidVacuumDrag));
HXDLIN(1155)									fact1 = fact1;
            								}
HXLINE(1156)								acc1 = (acc1 - ((fact1 * ((Float)0.5)) * ::nape::Config_obj::fluidLinearDrag));
            							}
HXLINE(1158)							cx_ite1 = cx_ite1->next;
            						}
            					}
HXLINE(1161)					tViscosity1 = (tViscosity1 + ((Float)acc1 / (Float)bord1));
            				}
            			}
HXLINE(1164)			if ((tViscosity1 != (int)0)) {
HXLINE(1165)				HX_VARI( Float,m) = (this->b1->smass + this->b2->smass);
HXLINE(1166)				HX_VARI( Float,Ka) = ((Float)0.0);
HXLINE(1167)				HX_VARI( Float,Kb) = ((Float)0.0);
HXLINE(1168)				HX_VARI( Float,Kc) = ((Float)0.0);
HXLINE(1169)				{
HXLINE(1170)					Ka = m;
HXLINE(1171)					Kb = (int)0;
HXLINE(1172)					Kc = m;
            				}
HXLINE(1174)				if ((this->b1->sinertia != (int)0)) {
HXLINE(1176)					HX_VARI( Float,Y) = (this->r1y * this->b1->sinertia);
HXLINE(1177)					{
HXLINE(1178)						Ka = (m + (Y * this->r1y));
HXLINE(1179)						Kb = (Kb + (-(Y) * this->r1x));
HXLINE(1180)						Kc = (m + ((this->r1x * this->b1->sinertia) * this->r1x));
            					}
            				}
HXLINE(1183)				if ((this->b2->sinertia != (int)0)) {
HXLINE(1185)					HX_VARI_NAME( Float,Y1,"Y") = (this->r2y * this->b2->sinertia);
HXLINE(1186)					{
HXLINE(1187)						Ka = (Ka + (Y1 * this->r2y));
HXLINE(1188)						Kb = (Kb + (-(Y1) * this->r2x));
HXLINE(1189)						Kc = (Kc + ((this->r2x * this->b2->sinertia) * this->r2x));
            					}
            				}
HXLINE(1192)				{
HXLINE(1193)					HX_VARI( Float,det) = ((Ka * Kc) - (Kb * Kb));
HXLINE(1194)					if ((det != det)) {
HXLINE(1195)						Kc = (int)0;
HXDLIN(1195)						Kb = Kc;
HXDLIN(1195)						Ka = Kb;
            					}
            					else {
HXLINE(1198)						if ((det == (int)0)) {
HXLINE(1200)							if ((Ka != (int)0)) {
HXLINE(1200)								Ka = ((Float)(int)1 / (Float)Ka);
            							}
            							else {
HXLINE(1202)								Ka = (int)0;
            							}
HXLINE(1205)							if ((Kc != (int)0)) {
HXLINE(1205)								Kc = ((Float)(int)1 / (Float)Kc);
            							}
            							else {
HXLINE(1207)								Kc = (int)0;
            							}
HXLINE(1210)							Kb = (int)0;
            						}
            						else {
HXLINE(1214)							det = ((Float)(int)1 / (Float)det);
HXLINE(1215)							HX_VARI_NAME( Float,t6,"t") = (Kc * det);
HXLINE(1216)							Kc = (Ka * det);
HXLINE(1217)							Ka = t6;
HXLINE(1218)							Kb = (Kb * -(det));
            						}
            					}
            				}
HXLINE(1222)				{
HXLINE(1223)					this->vMassa = Ka;
HXLINE(1224)					this->vMassb = Kb;
HXLINE(1225)					this->vMassc = Kc;
            				}
HXLINE(1228)				{
HXLINE(1230)					HX_VARI_NAME( Float,omega1,"omega") = (((int)2 * ::Math_obj::PI) * tViscosity1);
HXLINE(1231)					this->lgamma = ((Float)(int)1 / (Float)((dt * omega1) * ((int)2 + (omega1 * dt))));
HXLINE(1232)					HX_VARI_NAME( Float,ig1,"ig") = ((Float)(int)1 / (Float)((int)1 + this->lgamma));
HXLINE(1234)					 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1234)					_hx_tmp13->lgamma = (_hx_tmp13->lgamma * ig1);
HXLINE(1237)					 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1237)					_hx_tmp14->vMassa = (_hx_tmp14->vMassa * ig1);
HXLINE(1238)					 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp15 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1238)					_hx_tmp15->vMassb = (_hx_tmp15->vMassb * ig1);
HXLINE(1239)					 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp16 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1239)					_hx_tmp16->vMassc = (_hx_tmp16->vMassc * ig1);
            				}
            			}
            			else {
HXLINE(1243)				{
HXLINE(1244)					this->vMassa = (int)0;
HXLINE(1245)					this->vMassb = (int)0;
HXLINE(1246)					this->vMassc = (int)0;
            				}
HXLINE(1248)				this->lgamma = ((Float)0.0);
            			}
            		}
HXLINE(1251)		{
HXLINE(1261)			 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp17 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1261)			_hx_tmp17->dampx = (_hx_tmp17->dampx * dtratio);
HXLINE(1262)			 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp18 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1262)			_hx_tmp18->dampy = (_hx_tmp18->dampy * dtratio);
            		}
HXLINE(1264)		 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp19 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1264)		_hx_tmp19->adamp = (_hx_tmp19->adamp * dtratio);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_FluidArbiter_obj,preStep,(void))

void ZPP_FluidArbiter_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_1268_warmStart)
            	HX_STACK_THIS(this)
HXLINE(1269)		{
HXLINE(1270)			HX_VARI( Float,t) = this->b1->imass;
HXLINE(1279)			 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN(1279)			_hx_tmp->velx = (_hx_tmp->velx - (this->dampx * t));
HXLINE(1280)			 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(1280)			_hx_tmp1->vely = (_hx_tmp1->vely - (this->dampy * t));
            		}
HXLINE(1282)		{
HXLINE(1283)			HX_VARI_NAME( Float,t1,"t") = this->b2->imass;
HXLINE(1292)			 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b2;
HXDLIN(1292)			_hx_tmp2->velx = (_hx_tmp2->velx + (this->dampx * t1));
HXLINE(1293)			 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(1293)			_hx_tmp3->vely = (_hx_tmp3->vely + (this->dampy * t1));
            		}
HXLINE(1295)		 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN(1295)		_hx_tmp4->angvel = (_hx_tmp4->angvel - (this->b1->iinertia * ((this->dampy * this->r1x) - (this->dampx * this->r1y))));
HXLINE(1296)		 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(1296)		_hx_tmp5->angvel = (_hx_tmp5->angvel + (this->b2->iinertia * ((this->dampy * this->r2x) - (this->dampx * this->r2y))));
HXLINE(1297)		 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(1297)		_hx_tmp6->angvel = (_hx_tmp6->angvel - (this->adamp * this->b1->iinertia));
HXLINE(1298)		 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1298)		_hx_tmp7->angvel = (_hx_tmp7->angvel + (this->adamp * this->b2->iinertia));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,warmStart,(void))

void ZPP_FluidArbiter_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_1303_applyImpulseVel)
            	HX_STACK_THIS(this)
HXLINE(1303)		if (!(this->nodrag)) {
HXLINE(1304)			HX_VARI( Float,w1) = (this->b1->angvel + this->b1->kinangvel);
HXLINE(1305)			HX_VARI( Float,w2) = (this->b2->angvel + this->b2->kinangvel);
HXLINE(1306)			HX_VARI( Float,jx) = (((this->b1->velx + this->b1->kinvelx) - (this->r1y * w1)) - ((this->b2->velx + this->b2->kinvelx) - (this->r2y * w2)));
HXLINE(1307)			HX_VARI( Float,jy) = (((this->b1->vely + this->b1->kinvely) + (this->r1x * w1)) - ((this->b2->vely + this->b2->kinvely) + (this->r2x * w2)));
HXLINE(1324)			{
HXLINE(1325)				HX_VARI( Float,t) = ((this->vMassa * jx) + (this->vMassb * jy));
HXLINE(1326)				jy = ((this->vMassb * jx) + (this->vMassc * jy));
HXLINE(1327)				jx = t;
            			}
HXLINE(1329)			{
HXLINE(1330)				HX_VARI_NAME( Float,t1,"t") = this->lgamma;
HXLINE(1339)				jx = (jx - (this->dampx * t1));
HXLINE(1340)				jy = (jy - (this->dampy * t1));
            			}
HXLINE(1342)			{
HXLINE(1352)				 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1352)				_hx_tmp->dampx = (_hx_tmp->dampx + jx);
HXLINE(1353)				 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1353)				_hx_tmp1->dampy = (_hx_tmp1->dampy + jy);
            			}
HXLINE(1355)			{
HXLINE(1356)				HX_VARI_NAME( Float,t2,"t") = this->b1->imass;
HXLINE(1365)				 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(1365)				_hx_tmp2->velx = (_hx_tmp2->velx - (jx * t2));
HXLINE(1366)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN(1366)				_hx_tmp3->vely = (_hx_tmp3->vely - (jy * t2));
            			}
HXLINE(1368)			{
HXLINE(1369)				HX_VARI_NAME( Float,t3,"t") = this->b2->imass;
HXLINE(1378)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(1378)				_hx_tmp4->velx = (_hx_tmp4->velx + (jx * t3));
HXLINE(1379)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(1379)				_hx_tmp5->vely = (_hx_tmp5->vely + (jy * t3));
            			}
HXLINE(1381)			 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(1381)			_hx_tmp6->angvel = (_hx_tmp6->angvel - (this->b1->iinertia * ((jy * this->r1x) - (jx * this->r1y))));
HXLINE(1382)			 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1382)			_hx_tmp7->angvel = (_hx_tmp7->angvel + (this->b2->iinertia * ((jy * this->r2x) - (jx * this->r2y))));
HXLINE(1383)			HX_VARI( Float,j_damp) = (((w1 - w2) * this->wMass) - (this->adamp * this->agamma));
HXLINE(1384)			 ::zpp_nape::dynamics::ZPP_FluidArbiter _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1384)			_hx_tmp8->adamp = (_hx_tmp8->adamp + j_damp);
HXLINE(1385)			 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b1;
HXDLIN(1385)			_hx_tmp9->angvel = (_hx_tmp9->angvel - (j_damp * this->b1->iinertia));
HXLINE(1386)			 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b2;
HXDLIN(1386)			_hx_tmp10->angvel = (_hx_tmp10->angvel + (j_damp * this->b2->iinertia));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidArbiter_obj,applyImpulseVel,(void))

 ::zpp_nape::dynamics::ZPP_FluidArbiter ZPP_FluidArbiter_obj::zpp_pool;


hx::ObjectPtr< ZPP_FluidArbiter_obj > ZPP_FluidArbiter_obj::__new() {
	hx::ObjectPtr< ZPP_FluidArbiter_obj > __this = new ZPP_FluidArbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_FluidArbiter_obj > ZPP_FluidArbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_FluidArbiter_obj *__this = (ZPP_FluidArbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_FluidArbiter_obj), true, "zpp_nape.dynamics.ZPP_FluidArbiter"));
	*(void **)__this = ZPP_FluidArbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_FluidArbiter_obj::ZPP_FluidArbiter_obj()
{
}

void ZPP_FluidArbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_FluidArbiter);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(centroidx,"centroidx");
	HX_MARK_MEMBER_NAME(centroidy,"centroidy");
	HX_MARK_MEMBER_NAME(overlap,"overlap");
	HX_MARK_MEMBER_NAME(r1x,"r1x");
	HX_MARK_MEMBER_NAME(r1y,"r1y");
	HX_MARK_MEMBER_NAME(r2x,"r2x");
	HX_MARK_MEMBER_NAME(r2y,"r2y");
	HX_MARK_MEMBER_NAME(nodrag,"nodrag");
	HX_MARK_MEMBER_NAME(wMass,"wMass");
	HX_MARK_MEMBER_NAME(adamp,"adamp");
	HX_MARK_MEMBER_NAME(agamma,"agamma");
	HX_MARK_MEMBER_NAME(vMassa,"vMassa");
	HX_MARK_MEMBER_NAME(vMassb,"vMassb");
	HX_MARK_MEMBER_NAME(vMassc,"vMassc");
	HX_MARK_MEMBER_NAME(dampx,"dampx");
	HX_MARK_MEMBER_NAME(dampy,"dampy");
	HX_MARK_MEMBER_NAME(lgamma,"lgamma");
	HX_MARK_MEMBER_NAME(nx,"nx");
	HX_MARK_MEMBER_NAME(ny,"ny");
	HX_MARK_MEMBER_NAME(buoyx,"buoyx");
	HX_MARK_MEMBER_NAME(buoyy,"buoyy");
	HX_MARK_MEMBER_NAME(wrap_position,"wrap_position");
	HX_MARK_MEMBER_NAME(_hx_mutable,"mutable");
	HX_MARK_MEMBER_NAME(pre_dt,"pre_dt");
	 ::zpp_nape::dynamics::ZPP_Arbiter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_FluidArbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(centroidx,"centroidx");
	HX_VISIT_MEMBER_NAME(centroidy,"centroidy");
	HX_VISIT_MEMBER_NAME(overlap,"overlap");
	HX_VISIT_MEMBER_NAME(r1x,"r1x");
	HX_VISIT_MEMBER_NAME(r1y,"r1y");
	HX_VISIT_MEMBER_NAME(r2x,"r2x");
	HX_VISIT_MEMBER_NAME(r2y,"r2y");
	HX_VISIT_MEMBER_NAME(nodrag,"nodrag");
	HX_VISIT_MEMBER_NAME(wMass,"wMass");
	HX_VISIT_MEMBER_NAME(adamp,"adamp");
	HX_VISIT_MEMBER_NAME(agamma,"agamma");
	HX_VISIT_MEMBER_NAME(vMassa,"vMassa");
	HX_VISIT_MEMBER_NAME(vMassb,"vMassb");
	HX_VISIT_MEMBER_NAME(vMassc,"vMassc");
	HX_VISIT_MEMBER_NAME(dampx,"dampx");
	HX_VISIT_MEMBER_NAME(dampy,"dampy");
	HX_VISIT_MEMBER_NAME(lgamma,"lgamma");
	HX_VISIT_MEMBER_NAME(nx,"nx");
	HX_VISIT_MEMBER_NAME(ny,"ny");
	HX_VISIT_MEMBER_NAME(buoyx,"buoyx");
	HX_VISIT_MEMBER_NAME(buoyy,"buoyy");
	HX_VISIT_MEMBER_NAME(wrap_position,"wrap_position");
	HX_VISIT_MEMBER_NAME(_hx_mutable,"mutable");
	HX_VISIT_MEMBER_NAME(pre_dt,"pre_dt");
	 ::zpp_nape::dynamics::ZPP_Arbiter_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_FluidArbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nx") ) { return hx::Val( nx); }
		if (HX_FIELD_EQ(inName,"ny") ) { return hx::Val( ny); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"r1x") ) { return hx::Val( r1x); }
		if (HX_FIELD_EQ(inName,"r1y") ) { return hx::Val( r1y); }
		if (HX_FIELD_EQ(inName,"r2x") ) { return hx::Val( r2x); }
		if (HX_FIELD_EQ(inName,"r2y") ) { return hx::Val( r2y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"wMass") ) { return hx::Val( wMass); }
		if (HX_FIELD_EQ(inName,"adamp") ) { return hx::Val( adamp); }
		if (HX_FIELD_EQ(inName,"dampx") ) { return hx::Val( dampx); }
		if (HX_FIELD_EQ(inName,"dampy") ) { return hx::Val( dampy); }
		if (HX_FIELD_EQ(inName,"buoyx") ) { return hx::Val( buoyx); }
		if (HX_FIELD_EQ(inName,"buoyy") ) { return hx::Val( buoyy); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nodrag") ) { return hx::Val( nodrag); }
		if (HX_FIELD_EQ(inName,"agamma") ) { return hx::Val( agamma); }
		if (HX_FIELD_EQ(inName,"vMassa") ) { return hx::Val( vMassa); }
		if (HX_FIELD_EQ(inName,"vMassb") ) { return hx::Val( vMassb); }
		if (HX_FIELD_EQ(inName,"vMassc") ) { return hx::Val( vMassc); }
		if (HX_FIELD_EQ(inName,"lgamma") ) { return hx::Val( lgamma); }
		if (HX_FIELD_EQ(inName,"assign") ) { return hx::Val( assign_dyn()); }
		if (HX_FIELD_EQ(inName,"retire") ) { return hx::Val( retire_dyn()); }
		if (HX_FIELD_EQ(inName,"inject") ) { return hx::Val( inject_dyn()); }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { return hx::Val( pre_dt); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"overlap") ) { return hx::Val( overlap); }
		if (HX_FIELD_EQ(inName,"mutable") ) { return hx::Val( _hx_mutable); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"centroidx") ) { return hx::Val( centroidx); }
		if (HX_FIELD_EQ(inName,"centroidy") ) { return hx::Val( centroidy); }
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getposition") ) { return hx::Val( getposition_dyn()); }
		if (HX_FIELD_EQ(inName,"makemutable") ) { return hx::Val( makemutable_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_position") ) { return hx::Val( wrap_position); }
		if (HX_FIELD_EQ(inName,"makeimmutable") ) { return hx::Val( makeimmutable_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"position_validate") ) { return hx::Val( position_validate_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"position_invalidate") ) { return hx::Val( position_invalidate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_FluidArbiter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_FluidArbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nx") ) { nx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ny") ) { ny=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"r1x") ) { r1x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r1y") ) { r1y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r2x") ) { r2x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r2y") ) { r2y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::dynamics::ZPP_FluidArbiter >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"wMass") ) { wMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"adamp") ) { adamp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dampx") ) { dampx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dampy") ) { dampy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buoyx") ) { buoyx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buoyy") ) { buoyy=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nodrag") ) { nodrag=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"agamma") ) { agamma=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vMassa") ) { vMassa=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vMassb") ) { vMassb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vMassc") ) { vMassc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lgamma") ) { lgamma=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { pre_dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"overlap") ) { overlap=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mutable") ) { _hx_mutable=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::dynamics::FluidArbiter >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"centroidx") ) { centroidx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"centroidy") ) { centroidy=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_position") ) { wrap_position=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_FluidArbiter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::dynamics::ZPP_FluidArbiter >(); return true; }
	}
	return false;
}

void ZPP_FluidArbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("centroidx","\x38","\x58","\x3e","\x51"));
	outFields->push(HX_HCSTRING("centroidy","\x39","\x58","\x3e","\x51"));
	outFields->push(HX_HCSTRING("overlap","\x87","\x43","\x10","\xa9"));
	outFields->push(HX_HCSTRING("r1x","\x19","\xac","\x56","\x00"));
	outFields->push(HX_HCSTRING("r1y","\x1a","\xac","\x56","\x00"));
	outFields->push(HX_HCSTRING("r2x","\xf8","\xac","\x56","\x00"));
	outFields->push(HX_HCSTRING("r2y","\xf9","\xac","\x56","\x00"));
	outFields->push(HX_HCSTRING("nodrag","\xb5","\x40","\x2c","\x27"));
	outFields->push(HX_HCSTRING("wMass","\x0b","\x75","\xde","\xb7"));
	outFields->push(HX_HCSTRING("adamp","\x01","\x95","\x41","\x1c"));
	outFields->push(HX_HCSTRING("agamma","\x26","\x87","\x54","\x57"));
	outFields->push(HX_HCSTRING("vMassa","\x97","\x98","\x6c","\xc4"));
	outFields->push(HX_HCSTRING("vMassb","\x98","\x98","\x6c","\xc4"));
	outFields->push(HX_HCSTRING("vMassc","\x99","\x98","\x6c","\xc4"));
	outFields->push(HX_HCSTRING("dampx","\x58","\xcc","\x82","\xd4"));
	outFields->push(HX_HCSTRING("dampy","\x59","\xcc","\x82","\xd4"));
	outFields->push(HX_HCSTRING("lgamma","\x3b","\x7f","\x41","\xbd"));
	outFields->push(HX_HCSTRING("nx","\x4a","\x60","\x00","\x00"));
	outFields->push(HX_HCSTRING("ny","\x4b","\x60","\x00","\x00"));
	outFields->push(HX_HCSTRING("buoyx","\x1b","\x74","\xef","\xba"));
	outFields->push(HX_HCSTRING("buoyy","\x1c","\x74","\xef","\xba"));
	outFields->push(HX_HCSTRING("wrap_position","\xfe","\xd4","\x24","\xbb"));
	outFields->push(HX_HCSTRING("mutable","\xa6","\x7f","\x48","\x87"));
	outFields->push(HX_HCSTRING("pre_dt","\x6c","\x85","\xb1","\xae"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_FluidArbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::dynamics::FluidArbiter*/ ,(int)offsetof(ZPP_FluidArbiter_obj,outer_zn),HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2")},
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_FluidArbiter*/ ,(int)offsetof(ZPP_FluidArbiter_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,centroidx),HX_HCSTRING("centroidx","\x38","\x58","\x3e","\x51")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,centroidy),HX_HCSTRING("centroidy","\x39","\x58","\x3e","\x51")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,overlap),HX_HCSTRING("overlap","\x87","\x43","\x10","\xa9")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,r1x),HX_HCSTRING("r1x","\x19","\xac","\x56","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,r1y),HX_HCSTRING("r1y","\x1a","\xac","\x56","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,r2x),HX_HCSTRING("r2x","\xf8","\xac","\x56","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,r2y),HX_HCSTRING("r2y","\xf9","\xac","\x56","\x00")},
	{hx::fsBool,(int)offsetof(ZPP_FluidArbiter_obj,nodrag),HX_HCSTRING("nodrag","\xb5","\x40","\x2c","\x27")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,wMass),HX_HCSTRING("wMass","\x0b","\x75","\xde","\xb7")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,adamp),HX_HCSTRING("adamp","\x01","\x95","\x41","\x1c")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,agamma),HX_HCSTRING("agamma","\x26","\x87","\x54","\x57")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,vMassa),HX_HCSTRING("vMassa","\x97","\x98","\x6c","\xc4")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,vMassb),HX_HCSTRING("vMassb","\x98","\x98","\x6c","\xc4")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,vMassc),HX_HCSTRING("vMassc","\x99","\x98","\x6c","\xc4")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,dampx),HX_HCSTRING("dampx","\x58","\xcc","\x82","\xd4")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,dampy),HX_HCSTRING("dampy","\x59","\xcc","\x82","\xd4")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,lgamma),HX_HCSTRING("lgamma","\x3b","\x7f","\x41","\xbd")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,nx),HX_HCSTRING("nx","\x4a","\x60","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,ny),HX_HCSTRING("ny","\x4b","\x60","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,buoyx),HX_HCSTRING("buoyx","\x1b","\x74","\xef","\xba")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,buoyy),HX_HCSTRING("buoyy","\x1c","\x74","\xef","\xba")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_FluidArbiter_obj,wrap_position),HX_HCSTRING("wrap_position","\xfe","\xd4","\x24","\xbb")},
	{hx::fsBool,(int)offsetof(ZPP_FluidArbiter_obj,_hx_mutable),HX_HCSTRING("mutable","\xa6","\x7f","\x48","\x87")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidArbiter_obj,pre_dt),HX_HCSTRING("pre_dt","\x6c","\x85","\xb1","\xae")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_FluidArbiter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_FluidArbiter*/ ,(void *) &ZPP_FluidArbiter_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_FluidArbiter_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("centroidx","\x38","\x58","\x3e","\x51"),
	HX_HCSTRING("centroidy","\x39","\x58","\x3e","\x51"),
	HX_HCSTRING("overlap","\x87","\x43","\x10","\xa9"),
	HX_HCSTRING("r1x","\x19","\xac","\x56","\x00"),
	HX_HCSTRING("r1y","\x1a","\xac","\x56","\x00"),
	HX_HCSTRING("r2x","\xf8","\xac","\x56","\x00"),
	HX_HCSTRING("r2y","\xf9","\xac","\x56","\x00"),
	HX_HCSTRING("nodrag","\xb5","\x40","\x2c","\x27"),
	HX_HCSTRING("wMass","\x0b","\x75","\xde","\xb7"),
	HX_HCSTRING("adamp","\x01","\x95","\x41","\x1c"),
	HX_HCSTRING("agamma","\x26","\x87","\x54","\x57"),
	HX_HCSTRING("vMassa","\x97","\x98","\x6c","\xc4"),
	HX_HCSTRING("vMassb","\x98","\x98","\x6c","\xc4"),
	HX_HCSTRING("vMassc","\x99","\x98","\x6c","\xc4"),
	HX_HCSTRING("dampx","\x58","\xcc","\x82","\xd4"),
	HX_HCSTRING("dampy","\x59","\xcc","\x82","\xd4"),
	HX_HCSTRING("lgamma","\x3b","\x7f","\x41","\xbd"),
	HX_HCSTRING("nx","\x4a","\x60","\x00","\x00"),
	HX_HCSTRING("ny","\x4b","\x60","\x00","\x00"),
	HX_HCSTRING("buoyx","\x1b","\x74","\xef","\xba"),
	HX_HCSTRING("buoyy","\x1c","\x74","\xef","\xba"),
	HX_HCSTRING("position_validate","\x2c","\x4a","\x54","\xce"),
	HX_HCSTRING("position_invalidate","\x91","\xa4","\xdc","\xe8"),
	HX_HCSTRING("wrap_position","\xfe","\xd4","\x24","\xbb"),
	HX_HCSTRING("getposition","\x3f","\xa7","\x3c","\x17"),
	HX_HCSTRING("assign","\x2f","\x46","\x06","\x4c"),
	HX_HCSTRING("retire","\x9b","\x89","\x24","\x09"),
	HX_HCSTRING("mutable","\xa6","\x7f","\x48","\x87"),
	HX_HCSTRING("makemutable","\x78","\x7f","\x01","\xfe"),
	HX_HCSTRING("makeimmutable","\x94","\x40","\x9d","\xbd"),
	HX_HCSTRING("inject","\x91","\x4a","\xea","\x97"),
	HX_HCSTRING("pre_dt","\x6c","\x85","\xb1","\xae"),
	HX_HCSTRING("preStep","\x0f","\xc1","\xc0","\x24"),
	HX_HCSTRING("warmStart","\xdd","\x27","\x03","\xeb"),
	HX_HCSTRING("applyImpulseVel","\xb6","\xc7","\x50","\x1f"),
	::String(null()) };

static void ZPP_FluidArbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_FluidArbiter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_FluidArbiter_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_FluidArbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_FluidArbiter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_FluidArbiter_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_FluidArbiter_obj::__mClass;

static ::String ZPP_FluidArbiter_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_FluidArbiter_obj::__register()
{
	hx::Object *dummy = new ZPP_FluidArbiter_obj;
	ZPP_FluidArbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.dynamics.ZPP_FluidArbiter","\x5d","\x22","\x30","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_FluidArbiter_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_FluidArbiter_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_FluidArbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_FluidArbiter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_FluidArbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_FluidArbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_FluidArbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_FluidArbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_FluidArbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_FluidArbiter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_55ad567f8bfbf8c4_449_boot)
HXLINE( 449)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace dynamics
