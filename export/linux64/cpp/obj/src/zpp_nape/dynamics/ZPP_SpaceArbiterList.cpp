// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_Arbiter
#include <nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SpaceArbiterList
#include <zpp_nape/dynamics/ZPP_SpaceArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ColArbiter
#include <zpp_nape/util/ZNPList_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPList_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_174_new,"zpp_nape.dynamics.ZPP_SpaceArbiterList","new",0xed598891,"zpp_nape.dynamics.ZPP_SpaceArbiterList.new","zpp_nape/dynamics/SpaceArbiterList.hx",174,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_189_zpp_gl,"zpp_nape.dynamics.ZPP_SpaceArbiterList","zpp_gl",0x927c0ff9,"zpp_nape.dynamics.ZPP_SpaceArbiterList.zpp_gl","zpp_nape/dynamics/SpaceArbiterList.hx",189,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_261_zpp_vm,"zpp_nape.dynamics.ZPP_SpaceArbiterList","zpp_vm",0x927c1d0b,"zpp_nape.dynamics.ZPP_SpaceArbiterList.zpp_vm","zpp_nape/dynamics/SpaceArbiterList.hx",261,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_294_push,"zpp_nape.dynamics.ZPP_SpaceArbiterList","push",0xc25c8489,"zpp_nape.dynamics.ZPP_SpaceArbiterList.push","zpp_nape/dynamics/SpaceArbiterList.hx",294,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_300_pop,"zpp_nape.dynamics.ZPP_SpaceArbiterList","pop",0xed5b15c2,"zpp_nape.dynamics.ZPP_SpaceArbiterList.pop","zpp_nape/dynamics/SpaceArbiterList.hx",300,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_306_unshift,"zpp_nape.dynamics.ZPP_SpaceArbiterList","unshift",0xbd98083a,"zpp_nape.dynamics.ZPP_SpaceArbiterList.unshift","zpp_nape/dynamics/SpaceArbiterList.hx",306,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_312_shift,"zpp_nape.dynamics.ZPP_SpaceArbiterList","shift",0x002bd2f3,"zpp_nape.dynamics.ZPP_SpaceArbiterList.shift","zpp_nape/dynamics/SpaceArbiterList.hx",312,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_318_remove,"zpp_nape.dynamics.ZPP_SpaceArbiterList","remove",0x084958b3,"zpp_nape.dynamics.ZPP_SpaceArbiterList.remove","zpp_nape/dynamics/SpaceArbiterList.hx",318,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_320_clear,"zpp_nape.dynamics.ZPP_SpaceArbiterList","clear",0xcc6457fe,"zpp_nape.dynamics.ZPP_SpaceArbiterList.clear","zpp_nape/dynamics/SpaceArbiterList.hx",320,0x1150d7c4)
HX_DEFINE_STACK_FRAME(_hx_pos_6f7184e042f06761_325_at,"zpp_nape.dynamics.ZPP_SpaceArbiterList","at",0x01106de2,"zpp_nape.dynamics.ZPP_SpaceArbiterList.at","zpp_nape/dynamics/SpaceArbiterList.hx",325,0x1150d7c4)
namespace zpp_nape{
namespace dynamics{

void ZPP_SpaceArbiterList_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_174_new)
            	HX_STACK_THIS(this)
HXLINE( 260)		this->at_index_3 = (int)0;
HXLINE( 259)		this->at_index_2 = (int)0;
HXLINE( 258)		this->at_index_1 = (int)0;
HXLINE( 257)		this->at_index_0 = (int)0;
HXLINE( 256)		this->ite_3 = null();
HXLINE( 255)		this->ite_2 = null();
HXLINE( 254)		this->ite_1 = null();
HXLINE( 253)		this->ite_0 = null();
HXLINE( 252)		this->lengths = null();
HXLINE( 177)		this->zip_length = false;
HXLINE( 176)		this->_length = (int)0;
HXLINE( 175)		this->space = null();
HXLINE( 179)		super::__construct();
HXLINE( 180)		this->at_index_0 = (int)0;
HXLINE( 181)		this->at_index_1 = (int)0;
HXLINE( 182)		this->at_index_2 = (int)0;
HXLINE( 183)		this->at_index_3 = (int)0;
HXLINE( 184)		this->zip_length = true;
HXLINE( 185)		this->_length = (int)0;
HXLINE( 186)		this->lengths = ::Array_obj< int >::__new();
HXLINE( 187)		{
HXLINE( 187)			HX_VARI( int,_g) = (int)0;
HXDLIN( 187)			while((_g < (int)4)){
HXLINE( 187)				_g = (_g + (int)1);
HXDLIN( 187)				this->lengths->push((int)0);
            			}
            		}
            	}

Dynamic ZPP_SpaceArbiterList_obj::__CreateEmpty() { return new ZPP_SpaceArbiterList_obj; }

void *ZPP_SpaceArbiterList_obj::_hx_vtable = 0;

Dynamic ZPP_SpaceArbiterList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SpaceArbiterList_obj > _hx_result = new ZPP_SpaceArbiterList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SpaceArbiterList_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4a670447) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4a670447;
	} else {
		return inClassId==(int)0x610568e7;
	}
}

int ZPP_SpaceArbiterList_obj::zpp_gl(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_189_zpp_gl)
            	HX_STACK_THIS(this)
HXLINE( 190)		this->zpp_vm();
HXLINE( 191)		if (this->zip_length) {
HXLINE( 192)			this->_length = (int)0;
HXLINE( 194)			{
HXLINE( 195)				{
HXLINE( 196)					HX_VARI( int,len) = (int)0;
HXLINE( 197)					{
HXLINE( 198)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cx_ite) = this->space->c_arbiters_true->head;
HXLINE( 199)						while(hx::IsNotNull( cx_ite )){
HXLINE( 201)							if (cx_ite->elt->active) {
HXLINE( 201)								len = (len + (int)1);
            							}
HXLINE( 202)							cx_ite = cx_ite->next;
            						}
            					}
HXLINE( 205)					this->lengths[(int)0] = len;
HXLINE( 206)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 206)					_hx_tmp->_length = (_hx_tmp->_length + len);
            				}
HXLINE( 208)				{
HXLINE( 209)					HX_VARI_NAME( int,len1,"len") = (int)0;
HXLINE( 210)					{
HXLINE( 211)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cx_ite1,"cx_ite") = this->space->c_arbiters_false->head;
HXLINE( 212)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 214)							if (cx_ite1->elt->active) {
HXLINE( 214)								len1 = (len1 + (int)1);
            							}
HXLINE( 215)							cx_ite1 = cx_ite1->next;
            						}
            					}
HXLINE( 218)					this->lengths[(int)1] = len1;
HXLINE( 219)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 219)					_hx_tmp1->_length = (_hx_tmp1->_length + len1);
            				}
HXLINE( 221)				{
HXLINE( 222)					HX_VARI_NAME( int,len2,"len") = (int)0;
HXLINE( 223)					{
HXLINE( 224)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter,cx_ite2,"cx_ite") = this->space->f_arbiters->head;
HXLINE( 225)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 227)							if (cx_ite2->elt->active) {
HXLINE( 227)								len2 = (len2 + (int)1);
            							}
HXLINE( 228)							cx_ite2 = cx_ite2->next;
            						}
            					}
HXLINE( 231)					this->lengths[(int)2] = len2;
HXLINE( 232)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 232)					_hx_tmp2->_length = (_hx_tmp2->_length + len2);
            				}
HXLINE( 234)				{
HXLINE( 235)					HX_VARI_NAME( int,len3,"len") = (int)0;
HXLINE( 236)					{
HXLINE( 237)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cx_ite3,"cx_ite") = this->space->s_arbiters->head;
HXLINE( 238)						while(hx::IsNotNull( cx_ite3 )){
HXLINE( 240)							if (cx_ite3->elt->active) {
HXLINE( 240)								len3 = (len3 + (int)1);
            							}
HXLINE( 241)							cx_ite3 = cx_ite3->next;
            						}
            					}
HXLINE( 244)					this->lengths[(int)3] = len3;
HXLINE( 245)					 ::zpp_nape::dynamics::ZPP_SpaceArbiterList _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 245)					_hx_tmp3->_length = (_hx_tmp3->_length + len3);
            				}
            			}
HXLINE( 248)			this->zip_length = false;
            		}
HXLINE( 250)		return this->_length;
            	}


void ZPP_SpaceArbiterList_obj::zpp_vm(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_261_zpp_vm)
            	HX_STACK_THIS(this)
HXLINE( 262)		HX_VARI( bool,modified) = false;
HXLINE( 263)		{
HXLINE( 264)			if (this->space->c_arbiters_true->modified) {
HXLINE( 265)				modified = true;
HXLINE( 266)				this->space->c_arbiters_true->modified = false;
            			}
HXLINE( 268)			if (this->space->c_arbiters_false->modified) {
HXLINE( 269)				modified = true;
HXLINE( 270)				this->space->c_arbiters_false->modified = false;
            			}
HXLINE( 272)			if (this->space->f_arbiters->modified) {
HXLINE( 273)				modified = true;
HXLINE( 274)				this->space->f_arbiters->modified = false;
            			}
HXLINE( 276)			if (this->space->s_arbiters->modified) {
HXLINE( 277)				modified = true;
HXLINE( 278)				this->space->s_arbiters->modified = false;
            			}
            		}
HXLINE( 281)		if (modified) {
HXLINE( 282)			this->zip_length = true;
HXLINE( 283)			this->_length = (int)0;
HXLINE( 284)			this->ite_0 = null();
HXLINE( 285)			this->ite_1 = null();
HXLINE( 286)			this->ite_2 = null();
HXLINE( 287)			this->ite_3 = null();
            		}
            	}


bool ZPP_SpaceArbiterList_obj::push( ::nape::dynamics::Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_294_push)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 294)		return false;
            	}


 ::nape::dynamics::Arbiter ZPP_SpaceArbiterList_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_300_pop)
            	HX_STACK_THIS(this)
HXLINE( 300)		return null();
            	}


bool ZPP_SpaceArbiterList_obj::unshift( ::nape::dynamics::Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_306_unshift)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 306)		return false;
            	}


 ::nape::dynamics::Arbiter ZPP_SpaceArbiterList_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_312_shift)
            	HX_STACK_THIS(this)
HXLINE( 312)		return null();
            	}


bool ZPP_SpaceArbiterList_obj::remove( ::nape::dynamics::Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_318_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 318)		return false;
            	}


void ZPP_SpaceArbiterList_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_320_clear)
            	HX_STACK_THIS(this)
            	}


 ::nape::dynamics::Arbiter ZPP_SpaceArbiterList_obj::at(int index){
            	HX_STACKFRAME(&_hx_pos_6f7184e042f06761_325_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 326)		this->zpp_vm();
HXLINE( 330)		HX_VARI(  ::nape::dynamics::Arbiter,ret) = null();
HXLINE( 331)		HX_VARI( int,accum_length) = (int)0;
HXLINE( 333)		if (hx::IsNull( ret )) {
HXLINE( 334)			if ((index < this->lengths->__get((int)0))) {
HXLINE( 335)				HX_VARI( int,offset) = index;
HXLINE( 336)				bool _hx_tmp;
HXDLIN( 336)				if ((offset >= this->at_index_0)) {
HXLINE( 336)					_hx_tmp = hx::IsNull( this->ite_0 );
            				}
            				else {
HXLINE( 336)					_hx_tmp = true;
            				}
HXDLIN( 336)				if (_hx_tmp) {
HXLINE( 337)					this->at_index_0 = (int)0;
HXLINE( 338)					this->ite_0 = this->space->c_arbiters_true->head;
HXLINE( 339)					while(!(this->ite_0->elt->active)){
HXLINE( 342)						this->ite_0 = this->ite_0->next;
            					}
            				}
HXLINE( 345)				while((this->at_index_0 != offset)){
HXLINE( 346)					this->at_index_0++;
HXLINE( 347)					this->ite_0 = this->ite_0->next;
HXLINE( 348)					while(!(this->ite_0->elt->active)){
HXLINE( 351)						this->ite_0 = this->ite_0->next;
            					}
            				}
HXLINE( 354)				ret = this->ite_0->elt->wrapper();
            			}
            			else {
HXLINE( 356)				accum_length = this->lengths->__get((int)0);
            			}
            		}
HXLINE( 358)		if (hx::IsNull( ret )) {
HXLINE( 359)			if ((index < (accum_length + this->lengths->__get((int)1)))) {
HXLINE( 360)				HX_VARI_NAME( int,offset1,"offset") = (index - accum_length);
HXLINE( 361)				bool _hx_tmp1;
HXDLIN( 361)				if ((offset1 >= this->at_index_1)) {
HXLINE( 361)					_hx_tmp1 = hx::IsNull( this->ite_1 );
            				}
            				else {
HXLINE( 361)					_hx_tmp1 = true;
            				}
HXDLIN( 361)				if (_hx_tmp1) {
HXLINE( 362)					this->at_index_1 = (int)0;
HXLINE( 363)					this->ite_1 = this->space->c_arbiters_false->head;
HXLINE( 364)					while(!(this->ite_1->elt->active)){
HXLINE( 367)						this->ite_1 = this->ite_1->next;
            					}
            				}
HXLINE( 370)				while((this->at_index_1 != offset1)){
HXLINE( 371)					this->at_index_1++;
HXLINE( 372)					this->ite_1 = this->ite_1->next;
HXLINE( 373)					while(!(this->ite_1->elt->active)){
HXLINE( 376)						this->ite_1 = this->ite_1->next;
            					}
            				}
HXLINE( 379)				ret = this->ite_1->elt->wrapper();
            			}
            			else {
HXLINE( 381)				accum_length = (accum_length + this->lengths->__get((int)1));
            			}
            		}
HXLINE( 383)		if (hx::IsNull( ret )) {
HXLINE( 384)			if ((index < (accum_length + this->lengths->__get((int)2)))) {
HXLINE( 385)				HX_VARI_NAME( int,offset2,"offset") = (index - accum_length);
HXLINE( 386)				bool _hx_tmp2;
HXDLIN( 386)				if ((offset2 >= this->at_index_2)) {
HXLINE( 386)					_hx_tmp2 = hx::IsNull( this->ite_2 );
            				}
            				else {
HXLINE( 386)					_hx_tmp2 = true;
            				}
HXDLIN( 386)				if (_hx_tmp2) {
HXLINE( 387)					this->at_index_2 = (int)0;
HXLINE( 388)					this->ite_2 = this->space->f_arbiters->head;
HXLINE( 389)					while(!(this->ite_2->elt->active)){
HXLINE( 392)						this->ite_2 = this->ite_2->next;
            					}
            				}
HXLINE( 395)				while((this->at_index_2 != offset2)){
HXLINE( 396)					this->at_index_2++;
HXLINE( 397)					this->ite_2 = this->ite_2->next;
HXLINE( 398)					while(!(this->ite_2->elt->active)){
HXLINE( 401)						this->ite_2 = this->ite_2->next;
            					}
            				}
HXLINE( 404)				ret = this->ite_2->elt->wrapper();
            			}
            			else {
HXLINE( 406)				accum_length = (accum_length + this->lengths->__get((int)2));
            			}
            		}
HXLINE( 408)		if (hx::IsNull( ret )) {
HXLINE( 409)			if ((index < (accum_length + this->lengths->__get((int)3)))) {
HXLINE( 410)				HX_VARI_NAME( int,offset3,"offset") = (index - accum_length);
HXLINE( 411)				bool _hx_tmp3;
HXDLIN( 411)				if ((offset3 >= this->at_index_3)) {
HXLINE( 411)					_hx_tmp3 = hx::IsNull( this->ite_3 );
            				}
            				else {
HXLINE( 411)					_hx_tmp3 = true;
            				}
HXDLIN( 411)				if (_hx_tmp3) {
HXLINE( 412)					this->at_index_3 = (int)0;
HXLINE( 413)					this->ite_3 = this->space->s_arbiters->head;
HXLINE( 414)					while(!(this->ite_3->elt->active)){
HXLINE( 417)						this->ite_3 = this->ite_3->next;
            					}
            				}
HXLINE( 420)				while((this->at_index_3 != offset3)){
HXLINE( 421)					this->at_index_3++;
HXLINE( 422)					this->ite_3 = this->ite_3->next;
HXLINE( 423)					while(!(this->ite_3->elt->active)){
HXLINE( 426)						this->ite_3 = this->ite_3->next;
            					}
            				}
HXLINE( 429)				ret = this->ite_3->elt->wrapper();
            			}
            			else {
HXLINE( 431)				accum_length = (accum_length + this->lengths->__get((int)3));
            			}
            		}
HXLINE( 433)		return ret;
            	}



hx::ObjectPtr< ZPP_SpaceArbiterList_obj > ZPP_SpaceArbiterList_obj::__new() {
	hx::ObjectPtr< ZPP_SpaceArbiterList_obj > __this = new ZPP_SpaceArbiterList_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SpaceArbiterList_obj > ZPP_SpaceArbiterList_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SpaceArbiterList_obj *__this = (ZPP_SpaceArbiterList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SpaceArbiterList_obj), true, "zpp_nape.dynamics.ZPP_SpaceArbiterList"));
	*(void **)__this = ZPP_SpaceArbiterList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SpaceArbiterList_obj::ZPP_SpaceArbiterList_obj()
{
}

void ZPP_SpaceArbiterList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SpaceArbiterList);
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_MEMBER_NAME(zip_length,"zip_length");
	HX_MARK_MEMBER_NAME(lengths,"lengths");
	HX_MARK_MEMBER_NAME(ite_0,"ite_0");
	HX_MARK_MEMBER_NAME(ite_1,"ite_1");
	HX_MARK_MEMBER_NAME(ite_2,"ite_2");
	HX_MARK_MEMBER_NAME(ite_3,"ite_3");
	HX_MARK_MEMBER_NAME(at_index_0,"at_index_0");
	HX_MARK_MEMBER_NAME(at_index_1,"at_index_1");
	HX_MARK_MEMBER_NAME(at_index_2,"at_index_2");
	HX_MARK_MEMBER_NAME(at_index_3,"at_index_3");
	 ::nape::dynamics::ArbiterList_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_SpaceArbiterList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	HX_VISIT_MEMBER_NAME(zip_length,"zip_length");
	HX_VISIT_MEMBER_NAME(lengths,"lengths");
	HX_VISIT_MEMBER_NAME(ite_0,"ite_0");
	HX_VISIT_MEMBER_NAME(ite_1,"ite_1");
	HX_VISIT_MEMBER_NAME(ite_2,"ite_2");
	HX_VISIT_MEMBER_NAME(ite_3,"ite_3");
	HX_VISIT_MEMBER_NAME(at_index_0,"at_index_0");
	HX_VISIT_MEMBER_NAME(at_index_1,"at_index_1");
	HX_VISIT_MEMBER_NAME(at_index_2,"at_index_2");
	HX_VISIT_MEMBER_NAME(at_index_3,"at_index_3");
	 ::nape::dynamics::ArbiterList_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_SpaceArbiterList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space); }
		if (HX_FIELD_EQ(inName,"ite_0") ) { return hx::Val( ite_0); }
		if (HX_FIELD_EQ(inName,"ite_1") ) { return hx::Val( ite_1); }
		if (HX_FIELD_EQ(inName,"ite_2") ) { return hx::Val( ite_2); }
		if (HX_FIELD_EQ(inName,"ite_3") ) { return hx::Val( ite_3); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"zpp_gl") ) { return hx::Val( zpp_gl_dyn()); }
		if (HX_FIELD_EQ(inName,"zpp_vm") ) { return hx::Val( zpp_vm_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { return hx::Val( _length); }
		if (HX_FIELD_EQ(inName,"lengths") ) { return hx::Val( lengths); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zip_length") ) { return hx::Val( zip_length); }
		if (HX_FIELD_EQ(inName,"at_index_0") ) { return hx::Val( at_index_0); }
		if (HX_FIELD_EQ(inName,"at_index_1") ) { return hx::Val( at_index_1); }
		if (HX_FIELD_EQ(inName,"at_index_2") ) { return hx::Val( at_index_2); }
		if (HX_FIELD_EQ(inName,"at_index_3") ) { return hx::Val( at_index_3); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_SpaceArbiterList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_0") ) { ite_0=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_1") ) { ite_1=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_2") ) { ite_2=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ite_3") ) { ite_3=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lengths") ) { lengths=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zip_length") ) { zip_length=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_0") ) { at_index_0=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_1") ) { at_index_1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_2") ) { at_index_2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"at_index_3") ) { at_index_3=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_SpaceArbiterList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"));
	outFields->push(HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"));
	outFields->push(HX_HCSTRING("zip_length","\xc4","\xc5","\x11","\x3c"));
	outFields->push(HX_HCSTRING("lengths","\xcd","\xb4","\x9a","\x87"));
	outFields->push(HX_HCSTRING("ite_0","\x8b","\x9f","\x0c","\xc2"));
	outFields->push(HX_HCSTRING("ite_1","\x8c","\x9f","\x0c","\xc2"));
	outFields->push(HX_HCSTRING("ite_2","\x8d","\x9f","\x0c","\xc2"));
	outFields->push(HX_HCSTRING("ite_3","\x8e","\x9f","\x0c","\xc2"));
	outFields->push(HX_HCSTRING("at_index_0","\xf7","\xaf","\x12","\x8c"));
	outFields->push(HX_HCSTRING("at_index_1","\xf8","\xaf","\x12","\x8c"));
	outFields->push(HX_HCSTRING("at_index_2","\xf9","\xaf","\x12","\x8c"));
	outFields->push(HX_HCSTRING("at_index_3","\xfa","\xaf","\x12","\x8c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SpaceArbiterList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_Space*/ ,(int)offsetof(ZPP_SpaceArbiterList_obj,space),HX_HCSTRING("space","\xc6","\x8c","\x66","\x81")},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,_length),HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d")},
	{hx::fsBool,(int)offsetof(ZPP_SpaceArbiterList_obj,zip_length),HX_HCSTRING("zip_length","\xc4","\xc5","\x11","\x3c")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(ZPP_SpaceArbiterList_obj,lengths),HX_HCSTRING("lengths","\xcd","\xb4","\x9a","\x87")},
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_ColArbiter*/ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_0),HX_HCSTRING("ite_0","\x8b","\x9f","\x0c","\xc2")},
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_ColArbiter*/ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_1),HX_HCSTRING("ite_1","\x8c","\x9f","\x0c","\xc2")},
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_FluidArbiter*/ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_2),HX_HCSTRING("ite_2","\x8d","\x9f","\x0c","\xc2")},
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_SensorArbiter*/ ,(int)offsetof(ZPP_SpaceArbiterList_obj,ite_3),HX_HCSTRING("ite_3","\x8e","\x9f","\x0c","\xc2")},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_0),HX_HCSTRING("at_index_0","\xf7","\xaf","\x12","\x8c")},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_1),HX_HCSTRING("at_index_1","\xf8","\xaf","\x12","\x8c")},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_2),HX_HCSTRING("at_index_2","\xf9","\xaf","\x12","\x8c")},
	{hx::fsInt,(int)offsetof(ZPP_SpaceArbiterList_obj,at_index_3),HX_HCSTRING("at_index_3","\xfa","\xaf","\x12","\x8c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_SpaceArbiterList_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_SpaceArbiterList_obj_sMemberFields[] = {
	HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"),
	HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"),
	HX_HCSTRING("zip_length","\xc4","\xc5","\x11","\x3c"),
	HX_HCSTRING("zpp_gl","\x8a","\x53","\xbb","\x8e"),
	HX_HCSTRING("lengths","\xcd","\xb4","\x9a","\x87"),
	HX_HCSTRING("ite_0","\x8b","\x9f","\x0c","\xc2"),
	HX_HCSTRING("ite_1","\x8c","\x9f","\x0c","\xc2"),
	HX_HCSTRING("ite_2","\x8d","\x9f","\x0c","\xc2"),
	HX_HCSTRING("ite_3","\x8e","\x9f","\x0c","\xc2"),
	HX_HCSTRING("at_index_0","\xf7","\xaf","\x12","\x8c"),
	HX_HCSTRING("at_index_1","\xf8","\xaf","\x12","\x8c"),
	HX_HCSTRING("at_index_2","\xf9","\xaf","\x12","\x8c"),
	HX_HCSTRING("at_index_3","\xfa","\xaf","\x12","\x8c"),
	HX_HCSTRING("zpp_vm","\x9c","\x60","\xbb","\x8e"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZPP_SpaceArbiterList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SpaceArbiterList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SpaceArbiterList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SpaceArbiterList_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_SpaceArbiterList_obj::__mClass;

void ZPP_SpaceArbiterList_obj::__register()
{
	hx::Object *dummy = new ZPP_SpaceArbiterList_obj;
	ZPP_SpaceArbiterList_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.dynamics.ZPP_SpaceArbiterList","\x1f","\xec","\xcb","\xa2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_SpaceArbiterList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SpaceArbiterList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SpaceArbiterList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SpaceArbiterList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SpaceArbiterList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SpaceArbiterList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace dynamics
