// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_InteractionGroup
#include <nape/dynamics/InteractionGroup.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionGroupList
#include <nape/dynamics/InteractionGroupList.h>
#endif
#ifndef INCLUDED_nape_phys_InteractorList
#include <nape/phys/InteractorList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionGroup
#include <zpp_nape/util/ZNPList_ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionGroup
#include <zpp_nape/util/ZNPNode_ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_174_new,"zpp_nape.dynamics.ZPP_InteractionGroup","new",0x48bdeadd,"zpp_nape.dynamics.ZPP_InteractionGroup.new","zpp_nape/dynamics/InteractionGroup.hx",174,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_179_setGroup,"zpp_nape.dynamics.ZPP_InteractionGroup","setGroup",0xe17cdca0,"zpp_nape.dynamics.ZPP_InteractionGroup.setGroup","zpp_nape/dynamics/InteractionGroup.hx",179,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_197_invalidate,"zpp_nape.dynamics.ZPP_InteractionGroup","invalidate",0x8d38f89e,"zpp_nape.dynamics.ZPP_InteractionGroup.invalidate","zpp_nape/dynamics/InteractionGroup.hx",197,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_229_addGroup,"zpp_nape.dynamics.ZPP_InteractionGroup","addGroup",0x4ca599c1,"zpp_nape.dynamics.ZPP_InteractionGroup.addGroup","zpp_nape/dynamics/InteractionGroup.hx",229,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_235_remGroup,"zpp_nape.dynamics.ZPP_InteractionGroup","remGroup",0xdbcae3e8,"zpp_nape.dynamics.ZPP_InteractionGroup.remGroup","zpp_nape/dynamics/InteractionGroup.hx",235,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_242_addInteractor,"zpp_nape.dynamics.ZPP_InteractionGroup","addInteractor",0x24220897,"zpp_nape.dynamics.ZPP_InteractionGroup.addInteractor","zpp_nape/dynamics/InteractionGroup.hx",242,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_247_remInteractor,"zpp_nape.dynamics.ZPP_InteractionGroup","remInteractor",0x8f7b9110,"zpp_nape.dynamics.ZPP_InteractionGroup.remInteractor","zpp_nape/dynamics/InteractionGroup.hx",247,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_220_boot,"zpp_nape.dynamics.ZPP_InteractionGroup","boot",0x55889715,"zpp_nape.dynamics.ZPP_InteractionGroup.boot","zpp_nape/dynamics/InteractionGroup.hx",220,0x342a42f8)
HX_DEFINE_STACK_FRAME(_hx_pos_e488ecf65f269f55_221_boot,"zpp_nape.dynamics.ZPP_InteractionGroup","boot",0x55889715,"zpp_nape.dynamics.ZPP_InteractionGroup.boot","zpp_nape/dynamics/InteractionGroup.hx",221,0x342a42f8)
namespace zpp_nape{
namespace dynamics{

void ZPP_InteractionGroup_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e488ecf65f269f55_174_new)
            	HX_STACK_THIS(this)
HXLINE( 196)		this->depth = (int)0;
HXLINE( 195)		this->wrap_interactors = null();
HXLINE( 194)		this->interactors = null();
HXLINE( 193)		this->wrap_groups = null();
HXLINE( 192)		this->groups = null();
HXLINE( 177)		this->group = null();
HXLINE( 176)		this->ignore = false;
HXLINE( 175)		this->outer = null();
HXLINE( 223)		this->depth = (int)0;
HXLINE( 224)		this->groups =  ::zpp_nape::util::ZNPList_ZPP_InteractionGroup_obj::__alloc( HX_CTX );
HXLINE( 225)		this->interactors =  ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_InteractionGroup_obj::__CreateEmpty() { return new ZPP_InteractionGroup_obj; }

void *ZPP_InteractionGroup_obj::_hx_vtable = 0;

Dynamic ZPP_InteractionGroup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_InteractionGroup_obj > _hx_result = new ZPP_InteractionGroup_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_InteractionGroup_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a415093;
}

void ZPP_InteractionGroup_obj::setGroup( ::zpp_nape::dynamics::ZPP_InteractionGroup group){
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_179_setGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(group,"group")
HXLINE( 179)		if (hx::IsNotEq( this->group,group )) {
HXLINE( 180)			if (hx::IsNotNull( this->group )) {
HXLINE( 181)				{
HXLINE( 181)					this->group->groups->remove(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 181)					this->depth = (int)0;
            				}
HXLINE( 182)				this->group->invalidate(true);
            			}
HXLINE( 184)			this->group = group;
HXLINE( 185)			if (hx::IsNotNull( group )) {
HXLINE( 186)				{
HXLINE( 186)					group->groups->add(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 186)					this->depth = (group->depth + (int)1);
            				}
HXLINE( 187)				group->invalidate(true);
            			}
            			else {
HXLINE( 189)				this->invalidate(true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionGroup_obj,setGroup,(void))

void ZPP_InteractionGroup_obj::invalidate(hx::Null< bool >  __o_force){
bool force = __o_force.Default(false);
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_197_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(force,"force")
HXLINE( 198)		bool _hx_tmp;
HXDLIN( 198)		if (!(force)) {
HXLINE( 198)			_hx_tmp = this->ignore;
            		}
            		else {
HXLINE( 198)			_hx_tmp = true;
            		}
HXDLIN( 198)		if (!(_hx_tmp)) {
HXLINE( 198)			return;
            		}
HXLINE( 199)		{
HXLINE( 200)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite) = this->interactors->head;
HXLINE( 201)			while(hx::IsNotNull( cx_ite )){
HXLINE( 202)				HX_VARI(  ::zpp_nape::phys::ZPP_Interactor,b) = cx_ite->elt;
HXLINE( 204)				if (hx::IsNotNull( b->ibody )) {
HXLINE( 204)					b->ibody->wake();
            				}
            				else {
HXLINE( 205)					if (hx::IsNotNull( b->ishape )) {
HXLINE( 205)						b->ishape->body->wake();
            					}
            					else {
HXLINE( 206)						b->icompound->wake();
            					}
            				}
HXLINE( 208)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 211)		{
HXLINE( 212)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionGroup,cx_ite1,"cx_ite") = this->groups->head;
HXLINE( 213)			while(hx::IsNotNull( cx_ite1 )){
HXLINE( 215)				cx_ite1->elt->invalidate(force);
HXLINE( 216)				cx_ite1 = cx_ite1->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionGroup_obj,invalidate,(void))

void ZPP_InteractionGroup_obj::addGroup( ::zpp_nape::dynamics::ZPP_InteractionGroup group){
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_229_addGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(group,"group")
HXLINE( 230)		this->groups->add(group);
HXLINE( 231)		group->depth = (this->depth + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionGroup_obj,addGroup,(void))

void ZPP_InteractionGroup_obj::remGroup( ::zpp_nape::dynamics::ZPP_InteractionGroup group){
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_235_remGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(group,"group")
HXLINE( 236)		this->groups->remove(group);
HXLINE( 237)		group->depth = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionGroup_obj,remGroup,(void))

void ZPP_InteractionGroup_obj::addInteractor( ::zpp_nape::phys::ZPP_Interactor intx){
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_242_addInteractor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(intx,"intx")
HXLINE( 242)		this->interactors->add(intx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionGroup_obj,addInteractor,(void))

void ZPP_InteractionGroup_obj::remInteractor( ::zpp_nape::phys::ZPP_Interactor intx,hx::Null< int >  __o_flag){
int flag = __o_flag.Default(-1);
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_247_remInteractor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(intx,"intx")
            	HX_STACK_ARG(flag,"flag")
HXLINE( 247)		this->interactors->remove(intx);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_InteractionGroup_obj,remInteractor,(void))

int ZPP_InteractionGroup_obj::SHAPE;

int ZPP_InteractionGroup_obj::BODY;


hx::ObjectPtr< ZPP_InteractionGroup_obj > ZPP_InteractionGroup_obj::__new() {
	hx::ObjectPtr< ZPP_InteractionGroup_obj > __this = new ZPP_InteractionGroup_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_InteractionGroup_obj > ZPP_InteractionGroup_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_InteractionGroup_obj *__this = (ZPP_InteractionGroup_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_InteractionGroup_obj), true, "zpp_nape.dynamics.ZPP_InteractionGroup"));
	*(void **)__this = ZPP_InteractionGroup_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_InteractionGroup_obj::ZPP_InteractionGroup_obj()
{
}

void ZPP_InteractionGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_InteractionGroup);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(ignore,"ignore");
	HX_MARK_MEMBER_NAME(group,"group");
	HX_MARK_MEMBER_NAME(groups,"groups");
	HX_MARK_MEMBER_NAME(wrap_groups,"wrap_groups");
	HX_MARK_MEMBER_NAME(interactors,"interactors");
	HX_MARK_MEMBER_NAME(wrap_interactors,"wrap_interactors");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_END_CLASS();
}

void ZPP_InteractionGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(ignore,"ignore");
	HX_VISIT_MEMBER_NAME(group,"group");
	HX_VISIT_MEMBER_NAME(groups,"groups");
	HX_VISIT_MEMBER_NAME(wrap_groups,"wrap_groups");
	HX_VISIT_MEMBER_NAME(interactors,"interactors");
	HX_VISIT_MEMBER_NAME(wrap_interactors,"wrap_interactors");
	HX_VISIT_MEMBER_NAME(depth,"depth");
}

hx::Val ZPP_InteractionGroup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"group") ) { return hx::Val( group); }
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ignore") ) { return hx::Val( ignore); }
		if (HX_FIELD_EQ(inName,"groups") ) { return hx::Val( groups); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setGroup") ) { return hx::Val( setGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"addGroup") ) { return hx::Val( addGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"remGroup") ) { return hx::Val( remGroup_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_groups") ) { return hx::Val( wrap_groups); }
		if (HX_FIELD_EQ(inName,"interactors") ) { return hx::Val( interactors); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addInteractor") ) { return hx::Val( addInteractor_dyn()); }
		if (HX_FIELD_EQ(inName,"remInteractor") ) { return hx::Val( remInteractor_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_interactors") ) { return hx::Val( wrap_interactors); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_InteractionGroup_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BODY") ) { outValue = BODY; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SHAPE") ) { outValue = SHAPE; return true; }
	}
	return false;
}

hx::Val ZPP_InteractionGroup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::dynamics::InteractionGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"group") ) { group=inValue.Cast<  ::zpp_nape::dynamics::ZPP_InteractionGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ignore") ) { ignore=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groups") ) { groups=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_InteractionGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_groups") ) { wrap_groups=inValue.Cast<  ::nape::dynamics::InteractionGroupList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interactors") ) { interactors=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_interactors") ) { wrap_interactors=inValue.Cast<  ::nape::phys::InteractorList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_InteractionGroup_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BODY") ) { BODY=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SHAPE") ) { SHAPE=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void ZPP_InteractionGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("ignore","\x12","\xb9","\xc8","\x92"));
	outFields->push(HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"));
	outFields->push(HX_HCSTRING("groups","\x54","\x24","\x28","\x1c"));
	outFields->push(HX_HCSTRING("wrap_groups","\x69","\x29","\xb7","\x06"));
	outFields->push(HX_HCSTRING("interactors","\xfa","\xc7","\x5d","\x3c"));
	outFields->push(HX_HCSTRING("wrap_interactors","\xc5","\x36","\xbb","\xd9"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_InteractionGroup_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::dynamics::InteractionGroup*/ ,(int)offsetof(ZPP_InteractionGroup_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsBool,(int)offsetof(ZPP_InteractionGroup_obj,ignore),HX_HCSTRING("ignore","\x12","\xb9","\xc8","\x92")},
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_InteractionGroup*/ ,(int)offsetof(ZPP_InteractionGroup_obj,group),HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_InteractionGroup*/ ,(int)offsetof(ZPP_InteractionGroup_obj,groups),HX_HCSTRING("groups","\x54","\x24","\x28","\x1c")},
	{hx::fsObject /*::nape::dynamics::InteractionGroupList*/ ,(int)offsetof(ZPP_InteractionGroup_obj,wrap_groups),HX_HCSTRING("wrap_groups","\x69","\x29","\xb7","\x06")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Interactor*/ ,(int)offsetof(ZPP_InteractionGroup_obj,interactors),HX_HCSTRING("interactors","\xfa","\xc7","\x5d","\x3c")},
	{hx::fsObject /*::nape::phys::InteractorList*/ ,(int)offsetof(ZPP_InteractionGroup_obj,wrap_interactors),HX_HCSTRING("wrap_interactors","\xc5","\x36","\xbb","\xd9")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionGroup_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_InteractionGroup_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ZPP_InteractionGroup_obj::SHAPE,HX_HCSTRING("SHAPE","\x01","\x1b","\x0b","\xfa")},
	{hx::fsInt,(void *) &ZPP_InteractionGroup_obj::BODY,HX_HCSTRING("BODY","\xa2","\x42","\xdc","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_InteractionGroup_obj_sMemberFields[] = {
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("ignore","\x12","\xb9","\xc8","\x92"),
	HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"),
	HX_HCSTRING("setGroup","\x3d","\x1c","\x29","\xa8"),
	HX_HCSTRING("groups","\x54","\x24","\x28","\x1c"),
	HX_HCSTRING("wrap_groups","\x69","\x29","\xb7","\x06"),
	HX_HCSTRING("interactors","\xfa","\xc7","\x5d","\x3c"),
	HX_HCSTRING("wrap_interactors","\xc5","\x36","\xbb","\xd9"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("addGroup","\x5e","\xd9","\x51","\x13"),
	HX_HCSTRING("remGroup","\x85","\x23","\x77","\xa2"),
	HX_HCSTRING("addInteractor","\xda","\x0f","\xb9","\xef"),
	HX_HCSTRING("remInteractor","\x53","\x98","\x12","\x5b"),
	::String(null()) };

static void ZPP_InteractionGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_InteractionGroup_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_InteractionGroup_obj::SHAPE,"SHAPE");
	HX_MARK_MEMBER_NAME(ZPP_InteractionGroup_obj::BODY,"BODY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_InteractionGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_InteractionGroup_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionGroup_obj::SHAPE,"SHAPE");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionGroup_obj::BODY,"BODY");
};

#endif

hx::Class ZPP_InteractionGroup_obj::__mClass;

static ::String ZPP_InteractionGroup_obj_sStaticFields[] = {
	HX_HCSTRING("SHAPE","\x01","\x1b","\x0b","\xfa"),
	HX_HCSTRING("BODY","\xa2","\x42","\xdc","\x2b"),
	::String(null())
};

void ZPP_InteractionGroup_obj::__register()
{
	hx::Object *dummy = new ZPP_InteractionGroup_obj;
	ZPP_InteractionGroup_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.dynamics.ZPP_InteractionGroup","\x6b","\x38","\xa6","\xd2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_InteractionGroup_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_InteractionGroup_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_InteractionGroup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_InteractionGroup_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_InteractionGroup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_InteractionGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_InteractionGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_InteractionGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_InteractionGroup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_InteractionGroup_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_220_boot)
HXLINE( 220)		SHAPE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e488ecf65f269f55_221_boot)
HXLINE( 221)		BODY = (int)2;
            	}
}

} // end namespace zpp_nape
} // end namespace dynamics
