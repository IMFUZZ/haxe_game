// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_356_new,"zpp_nape.dynamics.ZPP_SensorArbiter","new",0x62fb3123,"zpp_nape.dynamics.ZPP_SensorArbiter.new","zpp_nape/dynamics/Arbiter.hx",356,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_385_alloc,"zpp_nape.dynamics.ZPP_SensorArbiter","alloc",0x0566fbf8,"zpp_nape.dynamics.ZPP_SensorArbiter.alloc","zpp_nape/dynamics/Arbiter.hx",385,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_397_free,"zpp_nape.dynamics.ZPP_SensorArbiter","free",0x338fe689,"zpp_nape.dynamics.ZPP_SensorArbiter.free","zpp_nape/dynamics/Arbiter.hx",397,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_414_assign,"zpp_nape.dynamics.ZPP_SensorArbiter","assign",0xc11f814c,"zpp_nape.dynamics.ZPP_SensorArbiter.assign","zpp_nape/dynamics/Arbiter.hx",414,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_418_retire,"zpp_nape.dynamics.ZPP_SensorArbiter","retire",0x7e3dc4b8,"zpp_nape.dynamics.ZPP_SensorArbiter.retire","zpp_nape/dynamics/Arbiter.hx",418,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_440_makemutable,"zpp_nape.dynamics.ZPP_SensorArbiter","makemutable",0x14ebdb3b,"zpp_nape.dynamics.ZPP_SensorArbiter.makemutable","zpp_nape/dynamics/Arbiter.hx",440,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_443_makeimmutable,"zpp_nape.dynamics.ZPP_SensorArbiter","makeimmutable",0x28a85317,"zpp_nape.dynamics.ZPP_SensorArbiter.makeimmutable","zpp_nape/dynamics/Arbiter.hx",443,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_9f3c782c563d37f1_358_boot,"zpp_nape.dynamics.ZPP_SensorArbiter","boot",0x30e8ce0f,"zpp_nape.dynamics.ZPP_SensorArbiter.boot","zpp_nape/dynamics/Arbiter.hx",358,0x26846f2e)
namespace zpp_nape{
namespace dynamics{

void ZPP_SensorArbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f3c782c563d37f1_356_new)
            	HX_STACK_THIS(this)
HXLINE( 357)		this->next = null();
HXLINE( 407)		super::__construct();
HXLINE( 408)		this->type = ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR;
HXLINE( 409)		this->sensorarb = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic ZPP_SensorArbiter_obj::__CreateEmpty() { return new ZPP_SensorArbiter_obj; }

void *ZPP_SensorArbiter_obj::_hx_vtable = 0;

Dynamic ZPP_SensorArbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SensorArbiter_obj > _hx_result = new ZPP_SensorArbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SensorArbiter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0719aa23) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0719aa23;
	} else {
		return inClassId==(int)0x093b2289;
	}
}

void ZPP_SensorArbiter_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_9f3c782c563d37f1_385_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SensorArbiter_obj,alloc,(void))

void ZPP_SensorArbiter_obj::free(){
            	HX_STACKFRAME(&_hx_pos_9f3c782c563d37f1_397_free)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SensorArbiter_obj,free,(void))

void ZPP_SensorArbiter_obj::assign( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2,int id,int di){
            	HX_GC_STACKFRAME(&_hx_pos_9f3c782c563d37f1_414_assign)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE( 414)		this->b1 = s1->body;
HXDLIN( 414)		this->ws1 = s1;
HXDLIN( 414)		this->b2 = s2->body;
HXDLIN( 414)		this->ws2 = s2;
HXDLIN( 414)		this->id = id;
HXDLIN( 414)		this->di = di;
HXDLIN( 414)		{
HXLINE( 414)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->b1->arbiters;
HXDLIN( 414)			HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN( 414)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE( 414)				ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 414)				ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 414)				::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXDLIN( 414)				ret->next = null();
            			}
HXDLIN( 414)			ret->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 414)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret;
HXDLIN( 414)			temp->next = _this->head;
HXDLIN( 414)			_this->head = temp;
HXDLIN( 414)			_this->modified = true;
HXDLIN( 414)			_this->length++;
            		}
HXDLIN( 414)		{
HXLINE( 414)			HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = this->b2->arbiters;
HXDLIN( 414)			HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN( 414)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE( 414)				ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 414)				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 414)				::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
HXDLIN( 414)				ret1->next = null();
            			}
HXDLIN( 414)			ret1->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 414)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp1,"temp") = ret1;
HXDLIN( 414)			temp1->next = _this1->head;
HXDLIN( 414)			_this1->head = temp1;
HXDLIN( 414)			_this1->modified = true;
HXDLIN( 414)			_this1->length++;
            		}
HXDLIN( 414)		this->active = true;
HXDLIN( 414)		this->present = (int)0;
HXDLIN( 414)		this->cleared = false;
HXDLIN( 414)		this->sleeping = false;
HXDLIN( 414)		this->fresh = false;
HXDLIN( 414)		this->presentable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_SensorArbiter_obj,assign,(void))

void ZPP_SensorArbiter_obj::retire(){
            	HX_STACKFRAME(&_hx_pos_9f3c782c563d37f1_418_retire)
            	HX_STACK_THIS(this)
HXLINE( 419)		{
HXLINE( 419)			if (!(this->cleared)) {
HXLINE( 419)				{
HXLINE( 419)					HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->b1->arbiters;
HXDLIN( 419)					{
HXLINE( 419)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN( 419)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = _this->head;
HXDLIN( 419)						while(hx::IsNotNull( cur )){
HXLINE( 419)							if (hx::IsEq( cur->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 419)								{
HXLINE( 419)									HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN( 419)									HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN( 419)									if (hx::IsNull( pre )) {
HXLINE( 419)										old = _this->head;
HXDLIN( 419)										ret = old->next;
HXDLIN( 419)										_this->head = ret;
HXDLIN( 419)										if (hx::IsNull( _this->head )) {
HXLINE( 419)											_this->pushmod = true;
            										}
            									}
            									else {
HXLINE( 419)										old = pre->next;
HXDLIN( 419)										ret = old->next;
HXDLIN( 419)										pre->next = ret;
HXDLIN( 419)										if (hx::IsNull( ret )) {
HXLINE( 419)											_this->pushmod = true;
            										}
            									}
HXDLIN( 419)									{
HXLINE( 419)										HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN( 419)										o->elt = null();
HXDLIN( 419)										o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 419)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            									}
HXDLIN( 419)									_this->modified = true;
HXDLIN( 419)									_this->length--;
HXDLIN( 419)									_this->pushmod = true;
            								}
HXDLIN( 419)								goto _hx_goto_4;
            							}
HXDLIN( 419)							pre = cur;
HXDLIN( 419)							cur = cur->next;
            						}
            						_hx_goto_4:;
            					}
            				}
HXDLIN( 419)				{
HXLINE( 419)					HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = this->b2->arbiters;
HXDLIN( 419)					{
HXLINE( 419)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre1,"pre") = null();
HXDLIN( 419)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur1,"cur") = _this1->head;
HXDLIN( 419)						while(hx::IsNotNull( cur1 )){
HXLINE( 419)							if (hx::IsEq( cur1->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 419)								{
HXLINE( 419)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old1,"old");
HXDLIN( 419)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN( 419)									if (hx::IsNull( pre1 )) {
HXLINE( 419)										old1 = _this1->head;
HXDLIN( 419)										ret1 = old1->next;
HXDLIN( 419)										_this1->head = ret1;
HXDLIN( 419)										if (hx::IsNull( _this1->head )) {
HXLINE( 419)											_this1->pushmod = true;
            										}
            									}
            									else {
HXLINE( 419)										old1 = pre1->next;
HXDLIN( 419)										ret1 = old1->next;
HXDLIN( 419)										pre1->next = ret1;
HXDLIN( 419)										if (hx::IsNull( ret1 )) {
HXLINE( 419)											_this1->pushmod = true;
            										}
            									}
HXDLIN( 419)									{
HXLINE( 419)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o1,"o") = old1;
HXDLIN( 419)										o1->elt = null();
HXDLIN( 419)										o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 419)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            									}
HXDLIN( 419)									_this1->modified = true;
HXDLIN( 419)									_this1->length--;
HXDLIN( 419)									_this1->pushmod = true;
            								}
HXDLIN( 419)								goto _hx_goto_5;
            							}
HXDLIN( 419)							pre1 = cur1;
HXDLIN( 419)							cur1 = cur1->next;
            						}
            						_hx_goto_5:;
            					}
            				}
HXDLIN( 419)				if (hx::IsNotNull( this->pair )) {
HXLINE( 419)					this->pair->arb = null();
HXDLIN( 419)					this->pair = null();
            				}
            			}
HXDLIN( 419)			this->b1 = (this->b2 = null());
HXDLIN( 419)			this->active = false;
HXDLIN( 419)			this->intchange = false;
            		}
HXLINE( 420)		{
HXLINE( 421)			HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_SensorArbiter,o2,"o") = hx::ObjectPtr<OBJ_>(this);
HXLINE( 431)			o2->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
HXLINE( 432)			::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o2;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SensorArbiter_obj,retire,(void))

void ZPP_SensorArbiter_obj::makemutable(){
            	HX_STACKFRAME(&_hx_pos_9f3c782c563d37f1_440_makemutable)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SensorArbiter_obj,makemutable,(void))

void ZPP_SensorArbiter_obj::makeimmutable(){
            	HX_STACKFRAME(&_hx_pos_9f3c782c563d37f1_443_makeimmutable)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SensorArbiter_obj,makeimmutable,(void))

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZPP_SensorArbiter_obj::zpp_pool;


hx::ObjectPtr< ZPP_SensorArbiter_obj > ZPP_SensorArbiter_obj::__new() {
	hx::ObjectPtr< ZPP_SensorArbiter_obj > __this = new ZPP_SensorArbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SensorArbiter_obj > ZPP_SensorArbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SensorArbiter_obj *__this = (ZPP_SensorArbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SensorArbiter_obj), true, "zpp_nape.dynamics.ZPP_SensorArbiter"));
	*(void **)__this = ZPP_SensorArbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SensorArbiter_obj::ZPP_SensorArbiter_obj()
{
}

void ZPP_SensorArbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SensorArbiter);
	HX_MARK_MEMBER_NAME(next,"next");
	 ::zpp_nape::dynamics::ZPP_Arbiter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_SensorArbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	 ::zpp_nape::dynamics::ZPP_Arbiter_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_SensorArbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"assign") ) { return hx::Val( assign_dyn()); }
		if (HX_FIELD_EQ(inName,"retire") ) { return hx::Val( retire_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"makemutable") ) { return hx::Val( makemutable_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"makeimmutable") ) { return hx::Val( makeimmutable_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_SensorArbiter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_SensorArbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::dynamics::ZPP_SensorArbiter >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_SensorArbiter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::dynamics::ZPP_SensorArbiter >(); return true; }
	}
	return false;
}

void ZPP_SensorArbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SensorArbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_SensorArbiter*/ ,(int)offsetof(ZPP_SensorArbiter_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_SensorArbiter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_SensorArbiter*/ ,(void *) &ZPP_SensorArbiter_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_SensorArbiter_obj_sMemberFields[] = {
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("assign","\x2f","\x46","\x06","\x4c"),
	HX_HCSTRING("retire","\x9b","\x89","\x24","\x09"),
	HX_HCSTRING("makemutable","\x78","\x7f","\x01","\xfe"),
	HX_HCSTRING("makeimmutable","\x94","\x40","\x9d","\xbd"),
	::String(null()) };

static void ZPP_SensorArbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SensorArbiter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_SensorArbiter_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SensorArbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SensorArbiter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_SensorArbiter_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_SensorArbiter_obj::__mClass;

static ::String ZPP_SensorArbiter_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_SensorArbiter_obj::__register()
{
	hx::Object *dummy = new ZPP_SensorArbiter_obj;
	ZPP_SensorArbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.dynamics.ZPP_SensorArbiter","\xb1","\x63","\x65","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_SensorArbiter_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_SensorArbiter_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_SensorArbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_SensorArbiter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SensorArbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SensorArbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SensorArbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SensorArbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SensorArbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_SensorArbiter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9f3c782c563d37f1_358_boot)
HXLINE( 358)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace dynamics
