// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_Arbiter
#include <nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterType
#include <nape/dynamics/ArbiterType.h>
#endif
#ifndef INCLUDED_nape_dynamics_CollisionArbiter
#include <nape/dynamics/CollisionArbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_FluidArbiter
#include <nape/dynamics/FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_174_new,"zpp_nape.dynamics.ZPP_Arbiter","new",0x586cbfbd,"zpp_nape.dynamics.ZPP_Arbiter.new","zpp_nape/dynamics/Arbiter.hx",174,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_180_wrapper,"zpp_nape.dynamics.ZPP_Arbiter","wrapper",0xa2653730,"zpp_nape.dynamics.ZPP_Arbiter.wrapper","zpp_nape/dynamics/Arbiter.hx",180,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_200_inactiveme,"zpp_nape.dynamics.ZPP_Arbiter","inactiveme",0xa2bbcdc6,"zpp_nape.dynamics.ZPP_Arbiter.inactiveme","zpp_nape/dynamics/Arbiter.hx",200,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_225_acting,"zpp_nape.dynamics.ZPP_Arbiter","acting",0x14a58393,"zpp_nape.dynamics.ZPP_Arbiter.acting","zpp_nape/dynamics/Arbiter.hx",225,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_235_swap_features,"zpp_nape.dynamics.ZPP_Arbiter","swap_features",0x11c37506,"zpp_nape.dynamics.ZPP_Arbiter.swap_features","zpp_nape/dynamics/Arbiter.hx",235,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_270_lazyRetire,"zpp_nape.dynamics.ZPP_Arbiter","lazyRetire",0x6f124372,"zpp_nape.dynamics.ZPP_Arbiter.lazyRetire","zpp_nape/dynamics/Arbiter.hx",270,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_291_sup_assign,"zpp_nape.dynamics.ZPP_Arbiter","sup_assign",0xc51e8243,"zpp_nape.dynamics.ZPP_Arbiter.sup_assign","zpp_nape/dynamics/Arbiter.hx",291,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_309_sup_retire,"zpp_nape.dynamics.ZPP_Arbiter","sup_retire",0x823cc5af,"zpp_nape.dynamics.ZPP_Arbiter.sup_retire","zpp_nape/dynamics/Arbiter.hx",309,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_179_boot,"zpp_nape.dynamics.ZPP_Arbiter","boot",0xfed40635,"zpp_nape.dynamics.ZPP_Arbiter.boot","zpp_nape/dynamics/Arbiter.hx",179,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_261_boot,"zpp_nape.dynamics.ZPP_Arbiter","boot",0xfed40635,"zpp_nape.dynamics.ZPP_Arbiter.boot","zpp_nape/dynamics/Arbiter.hx",261,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_262_boot,"zpp_nape.dynamics.ZPP_Arbiter","boot",0xfed40635,"zpp_nape.dynamics.ZPP_Arbiter.boot","zpp_nape/dynamics/Arbiter.hx",262,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_263_boot,"zpp_nape.dynamics.ZPP_Arbiter","boot",0xfed40635,"zpp_nape.dynamics.ZPP_Arbiter.boot","zpp_nape/dynamics/Arbiter.hx",263,0x26846f2e)
HX_DEFINE_STACK_FRAME(_hx_pos_747c2bf5106d687b_264_boot,"zpp_nape.dynamics.ZPP_Arbiter","boot",0xfed40635,"zpp_nape.dynamics.ZPP_Arbiter.boot","zpp_nape/dynamics/Arbiter.hx",264,0x26846f2e)
namespace zpp_nape{
namespace dynamics{

void ZPP_Arbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_174_new)
            	HX_STACK_THIS(this)
HXLINE( 267)		this->sensorarb = null();
HXLINE( 266)		this->fluidarb = null();
HXLINE( 265)		this->colarb = null();
HXLINE( 260)		this->type = (int)0;
HXLINE( 232)		this->pair = null();
HXLINE( 231)		this->ws2 = null();
HXLINE( 230)		this->ws1 = null();
HXLINE( 229)		this->b2 = null();
HXLINE( 228)		this->b1 = null();
HXLINE( 227)		this->invalidated = false;
HXLINE( 221)		this->immState = (int)0;
HXLINE( 220)		this->fresh = false;
HXLINE( 219)		this->continuous = false;
HXLINE( 218)		this->presentable = false;
HXLINE( 217)		this->intchange = false;
HXLINE( 216)		this->present = (int)0;
HXLINE( 215)		this->sleeping = false;
HXLINE( 214)		this->cleared = false;
HXLINE( 213)		this->active = false;
HXLINE( 212)		this->endGenerated = (int)0;
HXLINE( 211)		this->sleep_stamp = (int)0;
HXLINE( 210)		this->up_stamp = (int)0;
HXLINE( 209)		this->stamp = (int)0;
HXLINE( 208)		this->di = (int)0;
HXLINE( 207)		this->id = (int)0;
HXLINE( 202)		this->hnext = null();
HXLINE( 175)		this->outer = null();
            	}

Dynamic ZPP_Arbiter_obj::__CreateEmpty() { return new ZPP_Arbiter_obj; }

void *ZPP_Arbiter_obj::_hx_vtable = 0;

Dynamic ZPP_Arbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Arbiter_obj > _hx_result = new ZPP_Arbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Arbiter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0719aa23;
}

 ::nape::dynamics::Arbiter ZPP_Arbiter_obj::wrapper(){
            	HX_GC_STACKFRAME(&_hx_pos_747c2bf5106d687b_180_wrapper)
            	HX_STACK_THIS(this)
HXLINE( 181)		if (hx::IsNull( this->outer )) {
HXLINE( 182)			::zpp_nape::dynamics::ZPP_Arbiter_obj::internal = true;
HXLINE( 183)			if ((this->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE( 184)				this->colarb->outer_zn =  ::nape::dynamics::CollisionArbiter_obj::__alloc( HX_CTX );
HXLINE( 185)				this->outer = this->colarb->outer_zn;
            			}
            			else {
HXLINE( 187)				if ((this->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE( 188)					this->fluidarb->outer_zn =  ::nape::dynamics::FluidArbiter_obj::__alloc( HX_CTX );
HXLINE( 189)					this->outer = this->fluidarb->outer_zn;
            				}
            				else {
HXLINE( 191)					this->outer =  ::nape::dynamics::Arbiter_obj::__alloc( HX_CTX );
            				}
            			}
HXLINE( 192)			this->outer->zpp_inner = hx::ObjectPtr<OBJ_>(this);
HXLINE( 193)			::zpp_nape::dynamics::ZPP_Arbiter_obj::internal = false;
            		}
HXLINE( 195)		return this->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Arbiter_obj,wrapper,return )

bool ZPP_Arbiter_obj::inactiveme(){
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_200_inactiveme)
            	HX_STACK_THIS(this)
HXLINE( 200)		return !(this->active);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Arbiter_obj,inactiveme,return )

bool ZPP_Arbiter_obj::acting(){
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_225_acting)
            	HX_STACK_THIS(this)
HXLINE( 225)		if (this->active) {
HXLINE( 225)			return (((int)this->immState & (int)(int)1) != (int)0);
            		}
            		else {
HXLINE( 225)			return false;
            		}
HXDLIN( 225)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Arbiter_obj,acting,return )

void ZPP_Arbiter_obj::swap_features(){
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_235_swap_features)
            	HX_STACK_THIS(this)
HXLINE( 244)		{
HXLINE( 245)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,t) = this->b1;
HXLINE( 246)			this->b1 = this->b2;
HXLINE( 247)			this->b2 = t;
            		}
HXLINE( 249)		{
HXLINE( 250)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,t1,"t") = this->ws1;
HXLINE( 251)			this->ws1 = this->ws2;
HXLINE( 252)			this->ws2 = t1;
            		}
HXLINE( 254)		{
HXLINE( 255)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,t2,"t") = this->colarb->s1;
HXLINE( 256)			this->colarb->s1 = this->colarb->s2;
HXLINE( 257)			this->colarb->s2 = t2;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Arbiter_obj,swap_features,(void))

void ZPP_Arbiter_obj::lazyRetire( ::zpp_nape::space::ZPP_Space s, ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_270_lazyRetire)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(b,"b")
HXLINE( 279)		this->cleared = true;
HXLINE( 280)		bool _hx_tmp;
HXDLIN( 280)		if (hx::IsNotNull( b )) {
HXLINE( 280)			_hx_tmp = hx::IsEq( this->b2,b );
            		}
            		else {
HXLINE( 280)			_hx_tmp = true;
            		}
HXDLIN( 280)		if (_hx_tmp) {
HXLINE( 280)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->b1->arbiters;
HXDLIN( 280)			{
HXLINE( 280)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN( 280)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = _this->head;
HXDLIN( 280)				while(hx::IsNotNull( cur )){
HXLINE( 280)					if (hx::IsEq( cur->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 280)						{
HXLINE( 280)							HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN( 280)							HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN( 280)							if (hx::IsNull( pre )) {
HXLINE( 280)								old = _this->head;
HXDLIN( 280)								ret = old->next;
HXDLIN( 280)								_this->head = ret;
HXDLIN( 280)								if (hx::IsNull( _this->head )) {
HXLINE( 280)									_this->pushmod = true;
            								}
            							}
            							else {
HXLINE( 280)								old = pre->next;
HXDLIN( 280)								ret = old->next;
HXDLIN( 280)								pre->next = ret;
HXDLIN( 280)								if (hx::IsNull( ret )) {
HXLINE( 280)									_this->pushmod = true;
            								}
            							}
HXDLIN( 280)							{
HXLINE( 280)								HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN( 280)								o->elt = null();
HXDLIN( 280)								o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 280)								::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            							}
HXDLIN( 280)							_this->modified = true;
HXDLIN( 280)							_this->length--;
HXDLIN( 280)							_this->pushmod = true;
            						}
HXDLIN( 280)						goto _hx_goto_5;
            					}
HXDLIN( 280)					pre = cur;
HXDLIN( 280)					cur = cur->next;
            				}
            				_hx_goto_5:;
            			}
            		}
HXLINE( 281)		bool _hx_tmp1;
HXDLIN( 281)		if (hx::IsNotNull( b )) {
HXLINE( 281)			_hx_tmp1 = hx::IsEq( this->b1,b );
            		}
            		else {
HXLINE( 281)			_hx_tmp1 = true;
            		}
HXDLIN( 281)		if (_hx_tmp1) {
HXLINE( 281)			HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = this->b2->arbiters;
HXDLIN( 281)			{
HXLINE( 281)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre1,"pre") = null();
HXDLIN( 281)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur1,"cur") = _this1->head;
HXDLIN( 281)				while(hx::IsNotNull( cur1 )){
HXLINE( 281)					if (hx::IsEq( cur1->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 281)						{
HXLINE( 281)							HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old1,"old");
HXDLIN( 281)							HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN( 281)							if (hx::IsNull( pre1 )) {
HXLINE( 281)								old1 = _this1->head;
HXDLIN( 281)								ret1 = old1->next;
HXDLIN( 281)								_this1->head = ret1;
HXDLIN( 281)								if (hx::IsNull( _this1->head )) {
HXLINE( 281)									_this1->pushmod = true;
            								}
            							}
            							else {
HXLINE( 281)								old1 = pre1->next;
HXDLIN( 281)								ret1 = old1->next;
HXDLIN( 281)								pre1->next = ret1;
HXDLIN( 281)								if (hx::IsNull( ret1 )) {
HXLINE( 281)									_this1->pushmod = true;
            								}
            							}
HXDLIN( 281)							{
HXLINE( 281)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o1,"o") = old1;
HXDLIN( 281)								o1->elt = null();
HXDLIN( 281)								o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 281)								::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            							}
HXDLIN( 281)							_this1->modified = true;
HXDLIN( 281)							_this1->length--;
HXDLIN( 281)							_this1->pushmod = true;
            						}
HXDLIN( 281)						goto _hx_goto_6;
            					}
HXDLIN( 281)					pre1 = cur1;
HXDLIN( 281)					cur1 = cur1->next;
            				}
            				_hx_goto_6:;
            			}
            		}
HXLINE( 282)		if (hx::IsNotNull( this->pair )) {
HXLINE( 283)			this->pair->arb = null();
HXLINE( 284)			this->pair = null();
            		}
HXLINE( 286)		this->active = false;
HXLINE( 287)		s->f_arbiters->modified = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Arbiter_obj,lazyRetire,(void))

void ZPP_Arbiter_obj::sup_assign( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2,int id,int di){
            	HX_GC_STACKFRAME(&_hx_pos_747c2bf5106d687b_291_sup_assign)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE( 292)		this->b1 = s1->body;
HXLINE( 293)		this->ws1 = s1;
HXLINE( 294)		this->b2 = s2->body;
HXLINE( 295)		this->ws2 = s2;
HXLINE( 296)		this->id = id;
HXLINE( 297)		this->di = di;
HXLINE( 298)		{
HXLINE( 298)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->b1->arbiters;
HXDLIN( 298)			HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN( 298)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE( 298)				ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 298)				ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 298)				::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXDLIN( 298)				ret->next = null();
            			}
HXDLIN( 298)			ret->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret;
HXDLIN( 298)			temp->next = _this->head;
HXDLIN( 298)			_this->head = temp;
HXDLIN( 298)			_this->modified = true;
HXDLIN( 298)			_this->length++;
            		}
HXLINE( 299)		{
HXLINE( 299)			HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = this->b2->arbiters;
HXDLIN( 299)			HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN( 299)			if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE( 299)				ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 299)				ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 299)				::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
HXDLIN( 299)				ret1->next = null();
            			}
HXDLIN( 299)			ret1->elt = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 299)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp1,"temp") = ret1;
HXDLIN( 299)			temp1->next = _this1->head;
HXDLIN( 299)			_this1->head = temp1;
HXDLIN( 299)			_this1->modified = true;
HXDLIN( 299)			_this1->length++;
            		}
HXLINE( 300)		this->active = true;
HXLINE( 301)		this->present = (int)0;
HXLINE( 302)		this->cleared = false;
HXLINE( 303)		this->sleeping = false;
HXLINE( 304)		this->fresh = false;
HXLINE( 305)		this->presentable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Arbiter_obj,sup_assign,(void))

void ZPP_Arbiter_obj::sup_retire(){
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_309_sup_retire)
            	HX_STACK_THIS(this)
HXLINE( 342)		if (!(this->cleared)) {
HXLINE( 343)			{
HXLINE( 343)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->b1->arbiters;
HXDLIN( 343)				{
HXLINE( 343)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN( 343)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = _this->head;
HXDLIN( 343)					while(hx::IsNotNull( cur )){
HXLINE( 343)						if (hx::IsEq( cur->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 343)							{
HXLINE( 343)								HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN( 343)								HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN( 343)								if (hx::IsNull( pre )) {
HXLINE( 343)									old = _this->head;
HXDLIN( 343)									ret = old->next;
HXDLIN( 343)									_this->head = ret;
HXDLIN( 343)									if (hx::IsNull( _this->head )) {
HXLINE( 343)										_this->pushmod = true;
            									}
            								}
            								else {
HXLINE( 343)									old = pre->next;
HXDLIN( 343)									ret = old->next;
HXDLIN( 343)									pre->next = ret;
HXDLIN( 343)									if (hx::IsNull( ret )) {
HXLINE( 343)										_this->pushmod = true;
            									}
            								}
HXDLIN( 343)								{
HXLINE( 343)									HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN( 343)									o->elt = null();
HXDLIN( 343)									o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 343)									::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            								}
HXDLIN( 343)								_this->modified = true;
HXDLIN( 343)								_this->length--;
HXDLIN( 343)								_this->pushmod = true;
            							}
HXDLIN( 343)							goto _hx_goto_9;
            						}
HXDLIN( 343)						pre = cur;
HXDLIN( 343)						cur = cur->next;
            					}
            					_hx_goto_9:;
            				}
            			}
HXLINE( 344)			{
HXLINE( 344)				HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = this->b2->arbiters;
HXDLIN( 344)				{
HXLINE( 344)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre1,"pre") = null();
HXDLIN( 344)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur1,"cur") = _this1->head;
HXDLIN( 344)					while(hx::IsNotNull( cur1 )){
HXLINE( 344)						if (hx::IsEq( cur1->elt,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 344)							{
HXLINE( 344)								HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old1,"old");
HXDLIN( 344)								HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN( 344)								if (hx::IsNull( pre1 )) {
HXLINE( 344)									old1 = _this1->head;
HXDLIN( 344)									ret1 = old1->next;
HXDLIN( 344)									_this1->head = ret1;
HXDLIN( 344)									if (hx::IsNull( _this1->head )) {
HXLINE( 344)										_this1->pushmod = true;
            									}
            								}
            								else {
HXLINE( 344)									old1 = pre1->next;
HXDLIN( 344)									ret1 = old1->next;
HXDLIN( 344)									pre1->next = ret1;
HXDLIN( 344)									if (hx::IsNull( ret1 )) {
HXLINE( 344)										_this1->pushmod = true;
            									}
            								}
HXDLIN( 344)								{
HXLINE( 344)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o1,"o") = old1;
HXDLIN( 344)									o1->elt = null();
HXDLIN( 344)									o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN( 344)									::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            								}
HXDLIN( 344)								_this1->modified = true;
HXDLIN( 344)								_this1->length--;
HXDLIN( 344)								_this1->pushmod = true;
            							}
HXDLIN( 344)							goto _hx_goto_10;
            						}
HXDLIN( 344)						pre1 = cur1;
HXDLIN( 344)						cur1 = cur1->next;
            					}
            					_hx_goto_10:;
            				}
            			}
HXLINE( 345)			if (hx::IsNotNull( this->pair )) {
HXLINE( 346)				this->pair->arb = null();
HXLINE( 347)				this->pair = null();
            			}
            		}
HXLINE( 350)		this->b1 = (this->b2 = null());
HXLINE( 351)		this->active = false;
HXLINE( 352)		this->intchange = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Arbiter_obj,sup_retire,(void))

bool ZPP_Arbiter_obj::internal;

int ZPP_Arbiter_obj::COL;

int ZPP_Arbiter_obj::FLUID;

int ZPP_Arbiter_obj::SENSOR;

::Array< ::Dynamic> ZPP_Arbiter_obj::types;


hx::ObjectPtr< ZPP_Arbiter_obj > ZPP_Arbiter_obj::__new() {
	hx::ObjectPtr< ZPP_Arbiter_obj > __this = new ZPP_Arbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Arbiter_obj > ZPP_Arbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Arbiter_obj *__this = (ZPP_Arbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Arbiter_obj), true, "zpp_nape.dynamics.ZPP_Arbiter"));
	*(void **)__this = ZPP_Arbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Arbiter_obj::ZPP_Arbiter_obj()
{
}

void ZPP_Arbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Arbiter);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(hnext,"hnext");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(di,"di");
	HX_MARK_MEMBER_NAME(stamp,"stamp");
	HX_MARK_MEMBER_NAME(up_stamp,"up_stamp");
	HX_MARK_MEMBER_NAME(sleep_stamp,"sleep_stamp");
	HX_MARK_MEMBER_NAME(endGenerated,"endGenerated");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(cleared,"cleared");
	HX_MARK_MEMBER_NAME(sleeping,"sleeping");
	HX_MARK_MEMBER_NAME(present,"present");
	HX_MARK_MEMBER_NAME(intchange,"intchange");
	HX_MARK_MEMBER_NAME(presentable,"presentable");
	HX_MARK_MEMBER_NAME(continuous,"continuous");
	HX_MARK_MEMBER_NAME(fresh,"fresh");
	HX_MARK_MEMBER_NAME(immState,"immState");
	HX_MARK_MEMBER_NAME(invalidated,"invalidated");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(ws1,"ws1");
	HX_MARK_MEMBER_NAME(ws2,"ws2");
	HX_MARK_MEMBER_NAME(pair,"pair");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(colarb,"colarb");
	HX_MARK_MEMBER_NAME(fluidarb,"fluidarb");
	HX_MARK_MEMBER_NAME(sensorarb,"sensorarb");
	HX_MARK_END_CLASS();
}

void ZPP_Arbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(hnext,"hnext");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(di,"di");
	HX_VISIT_MEMBER_NAME(stamp,"stamp");
	HX_VISIT_MEMBER_NAME(up_stamp,"up_stamp");
	HX_VISIT_MEMBER_NAME(sleep_stamp,"sleep_stamp");
	HX_VISIT_MEMBER_NAME(endGenerated,"endGenerated");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(cleared,"cleared");
	HX_VISIT_MEMBER_NAME(sleeping,"sleeping");
	HX_VISIT_MEMBER_NAME(present,"present");
	HX_VISIT_MEMBER_NAME(intchange,"intchange");
	HX_VISIT_MEMBER_NAME(presentable,"presentable");
	HX_VISIT_MEMBER_NAME(continuous,"continuous");
	HX_VISIT_MEMBER_NAME(fresh,"fresh");
	HX_VISIT_MEMBER_NAME(immState,"immState");
	HX_VISIT_MEMBER_NAME(invalidated,"invalidated");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(ws1,"ws1");
	HX_VISIT_MEMBER_NAME(ws2,"ws2");
	HX_VISIT_MEMBER_NAME(pair,"pair");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(colarb,"colarb");
	HX_VISIT_MEMBER_NAME(fluidarb,"fluidarb");
	HX_VISIT_MEMBER_NAME(sensorarb,"sensorarb");
}

hx::Val ZPP_Arbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		if (HX_FIELD_EQ(inName,"di") ) { return hx::Val( di); }
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ws1") ) { return hx::Val( ws1); }
		if (HX_FIELD_EQ(inName,"ws2") ) { return hx::Val( ws2); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pair") ) { return hx::Val( pair); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"hnext") ) { return hx::Val( hnext); }
		if (HX_FIELD_EQ(inName,"stamp") ) { return hx::Val( stamp); }
		if (HX_FIELD_EQ(inName,"fresh") ) { return hx::Val( fresh); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active); }
		if (HX_FIELD_EQ(inName,"acting") ) { return hx::Val( acting_dyn()); }
		if (HX_FIELD_EQ(inName,"colarb") ) { return hx::Val( colarb); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrapper") ) { return hx::Val( wrapper_dyn()); }
		if (HX_FIELD_EQ(inName,"cleared") ) { return hx::Val( cleared); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"up_stamp") ) { return hx::Val( up_stamp); }
		if (HX_FIELD_EQ(inName,"sleeping") ) { return hx::Val( sleeping); }
		if (HX_FIELD_EQ(inName,"immState") ) { return hx::Val( immState); }
		if (HX_FIELD_EQ(inName,"fluidarb") ) { return hx::Val( fluidarb); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"intchange") ) { return hx::Val( intchange); }
		if (HX_FIELD_EQ(inName,"sensorarb") ) { return hx::Val( sensorarb); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"inactiveme") ) { return hx::Val( inactiveme_dyn()); }
		if (HX_FIELD_EQ(inName,"continuous") ) { return hx::Val( continuous); }
		if (HX_FIELD_EQ(inName,"lazyRetire") ) { return hx::Val( lazyRetire_dyn()); }
		if (HX_FIELD_EQ(inName,"sup_assign") ) { return hx::Val( sup_assign_dyn()); }
		if (HX_FIELD_EQ(inName,"sup_retire") ) { return hx::Val( sup_retire_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sleep_stamp") ) { return hx::Val( sleep_stamp); }
		if (HX_FIELD_EQ(inName,"presentable") ) { return hx::Val( presentable); }
		if (HX_FIELD_EQ(inName,"invalidated") ) { return hx::Val( invalidated); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endGenerated") ) { return hx::Val( endGenerated); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"swap_features") ) { return hx::Val( swap_features_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Arbiter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"COL") ) { outValue = COL; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"FLUID") ) { outValue = FLUID; return true; }
		if (HX_FIELD_EQ(inName,"types") ) { outValue = types; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"SENSOR") ) { outValue = SENSOR; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = internal; return true; }
	}
	return false;
}

hx::Val ZPP_Arbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"di") ) { di=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ws1") ) { ws1=inValue.Cast<  ::zpp_nape::shape::ZPP_Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ws2") ) { ws2=inValue.Cast<  ::zpp_nape::shape::ZPP_Shape >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pair") ) { pair=inValue.Cast<  ::zpp_nape::space::ZPP_AABBPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::dynamics::Arbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hnext") ) { hnext=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Arbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stamp") ) { stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fresh") ) { fresh=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colarb") ) { colarb=inValue.Cast<  ::zpp_nape::dynamics::ZPP_ColArbiter >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleared") ) { cleared=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"present") ) { present=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"up_stamp") ) { up_stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sleeping") ) { sleeping=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"immState") ) { immState=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fluidarb") ) { fluidarb=inValue.Cast<  ::zpp_nape::dynamics::ZPP_FluidArbiter >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"intchange") ) { intchange=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sensorarb") ) { sensorarb=inValue.Cast<  ::zpp_nape::dynamics::ZPP_SensorArbiter >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"continuous") ) { continuous=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sleep_stamp") ) { sleep_stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"presentable") ) { presentable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invalidated") ) { invalidated=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endGenerated") ) { endGenerated=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Arbiter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"COL") ) { COL=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"FLUID") ) { FLUID=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"types") ) { types=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"SENSOR") ) { SENSOR=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void ZPP_Arbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("hnext","\x5b","\xd9","\xae","\x2a"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("di","\x85","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"));
	outFields->push(HX_HCSTRING("up_stamp","\xdf","\xd3","\x64","\xd5"));
	outFields->push(HX_HCSTRING("sleep_stamp","\x9b","\xdf","\xd0","\x7e"));
	outFields->push(HX_HCSTRING("endGenerated","\x34","\xf8","\x72","\xa3"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("cleared","\x2c","\x07","\x45","\xab"));
	outFields->push(HX_HCSTRING("sleeping","\x2b","\x58","\x93","\x10"));
	outFields->push(HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"));
	outFields->push(HX_HCSTRING("intchange","\x9f","\x7b","\xdd","\xa7"));
	outFields->push(HX_HCSTRING("presentable","\x15","\x42","\x7d","\x5b"));
	outFields->push(HX_HCSTRING("continuous","\x0f","\x05","\x17","\xde"));
	outFields->push(HX_HCSTRING("fresh","\x6e","\x86","\x86","\x06"));
	outFields->push(HX_HCSTRING("immState","\x48","\x99","\x73","\xd6"));
	outFields->push(HX_HCSTRING("invalidated","\x89","\x32","\xac","\xbd"));
	outFields->push(HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("b2","\x90","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("ws1","\x95","\xb0","\x5a","\x00"));
	outFields->push(HX_HCSTRING("ws2","\x96","\xb0","\x5a","\x00"));
	outFields->push(HX_HCSTRING("pair","\x1a","\xdc","\x51","\x4a"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("colarb","\x11","\x26","\x7c","\xc6"));
	outFields->push(HX_HCSTRING("fluidarb","\x87","\x06","\x5f","\xd4"));
	outFields->push(HX_HCSTRING("sensorarb","\x57","\x6c","\xbb","\x61"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Arbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::dynamics::Arbiter*/ ,(int)offsetof(ZPP_Arbiter_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_Arbiter*/ ,(int)offsetof(ZPP_Arbiter_obj,hnext),HX_HCSTRING("hnext","\x5b","\xd9","\xae","\x2a")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,di),HX_HCSTRING("di","\x85","\x57","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,stamp),HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,up_stamp),HX_HCSTRING("up_stamp","\xdf","\xd3","\x64","\xd5")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,sleep_stamp),HX_HCSTRING("sleep_stamp","\x9b","\xdf","\xd0","\x7e")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,endGenerated),HX_HCSTRING("endGenerated","\x34","\xf8","\x72","\xa3")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,cleared),HX_HCSTRING("cleared","\x2c","\x07","\x45","\xab")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,sleeping),HX_HCSTRING("sleeping","\x2b","\x58","\x93","\x10")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,present),HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,intchange),HX_HCSTRING("intchange","\x9f","\x7b","\xdd","\xa7")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,presentable),HX_HCSTRING("presentable","\x15","\x42","\x7d","\x5b")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,continuous),HX_HCSTRING("continuous","\x0f","\x05","\x17","\xde")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,fresh),HX_HCSTRING("fresh","\x6e","\x86","\x86","\x06")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,immState),HX_HCSTRING("immState","\x48","\x99","\x73","\xd6")},
	{hx::fsBool,(int)offsetof(ZPP_Arbiter_obj,invalidated),HX_HCSTRING("invalidated","\x89","\x32","\xac","\xbd")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_Arbiter_obj,b1),HX_HCSTRING("b1","\x8f","\x55","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_Arbiter_obj,b2),HX_HCSTRING("b2","\x90","\x55","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::shape::ZPP_Shape*/ ,(int)offsetof(ZPP_Arbiter_obj,ws1),HX_HCSTRING("ws1","\x95","\xb0","\x5a","\x00")},
	{hx::fsObject /*::zpp_nape::shape::ZPP_Shape*/ ,(int)offsetof(ZPP_Arbiter_obj,ws2),HX_HCSTRING("ws2","\x96","\xb0","\x5a","\x00")},
	{hx::fsObject /*::zpp_nape::space::ZPP_AABBPair*/ ,(int)offsetof(ZPP_Arbiter_obj,pair),HX_HCSTRING("pair","\x1a","\xdc","\x51","\x4a")},
	{hx::fsInt,(int)offsetof(ZPP_Arbiter_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_ColArbiter*/ ,(int)offsetof(ZPP_Arbiter_obj,colarb),HX_HCSTRING("colarb","\x11","\x26","\x7c","\xc6")},
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_FluidArbiter*/ ,(int)offsetof(ZPP_Arbiter_obj,fluidarb),HX_HCSTRING("fluidarb","\x87","\x06","\x5f","\xd4")},
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_SensorArbiter*/ ,(int)offsetof(ZPP_Arbiter_obj,sensorarb),HX_HCSTRING("sensorarb","\x57","\x6c","\xbb","\x61")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Arbiter_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &ZPP_Arbiter_obj::internal,HX_HCSTRING("internal","\x3d","\x67","\x76","\x28")},
	{hx::fsInt,(void *) &ZPP_Arbiter_obj::COL,HX_HCSTRING("COL","\x20","\x1c","\x33","\x00")},
	{hx::fsInt,(void *) &ZPP_Arbiter_obj::FLUID,HX_HCSTRING("FLUID","\xea","\x91","\x89","\x80")},
	{hx::fsInt,(void *) &ZPP_Arbiter_obj::SENSOR,HX_HCSTRING("SENSOR","\x3a","\xde","\x12","\x1e")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &ZPP_Arbiter_obj::types,HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Arbiter_obj_sMemberFields[] = {
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("wrapper","\x53","\xd5","\x64","\x0d"),
	HX_HCSTRING("inactiveme","\x83","\x67","\xf5","\x67"),
	HX_HCSTRING("hnext","\x5b","\xd9","\xae","\x2a"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("di","\x85","\x57","\x00","\x00"),
	HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"),
	HX_HCSTRING("up_stamp","\xdf","\xd3","\x64","\xd5"),
	HX_HCSTRING("sleep_stamp","\x9b","\xdf","\xd0","\x7e"),
	HX_HCSTRING("endGenerated","\x34","\xf8","\x72","\xa3"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("cleared","\x2c","\x07","\x45","\xab"),
	HX_HCSTRING("sleeping","\x2b","\x58","\x93","\x10"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("intchange","\x9f","\x7b","\xdd","\xa7"),
	HX_HCSTRING("presentable","\x15","\x42","\x7d","\x5b"),
	HX_HCSTRING("continuous","\x0f","\x05","\x17","\xde"),
	HX_HCSTRING("fresh","\x6e","\x86","\x86","\x06"),
	HX_HCSTRING("immState","\x48","\x99","\x73","\xd6"),
	HX_HCSTRING("acting","\xd0","\x3a","\x46","\x16"),
	HX_HCSTRING("invalidated","\x89","\x32","\xac","\xbd"),
	HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"),
	HX_HCSTRING("b2","\x90","\x55","\x00","\x00"),
	HX_HCSTRING("ws1","\x95","\xb0","\x5a","\x00"),
	HX_HCSTRING("ws2","\x96","\xb0","\x5a","\x00"),
	HX_HCSTRING("pair","\x1a","\xdc","\x51","\x4a"),
	HX_HCSTRING("swap_features","\x69","\xcf","\xbc","\x34"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("colarb","\x11","\x26","\x7c","\xc6"),
	HX_HCSTRING("fluidarb","\x87","\x06","\x5f","\xd4"),
	HX_HCSTRING("sensorarb","\x57","\x6c","\xbb","\x61"),
	HX_HCSTRING("lazyRetire","\x2f","\xdd","\x4b","\x34"),
	HX_HCSTRING("sup_assign","\x00","\x1c","\x58","\x8a"),
	HX_HCSTRING("sup_retire","\x6c","\x5f","\x76","\x47"),
	::String(null()) };

static void ZPP_Arbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Arbiter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Arbiter_obj::internal,"internal");
	HX_MARK_MEMBER_NAME(ZPP_Arbiter_obj::COL,"COL");
	HX_MARK_MEMBER_NAME(ZPP_Arbiter_obj::FLUID,"FLUID");
	HX_MARK_MEMBER_NAME(ZPP_Arbiter_obj::SENSOR,"SENSOR");
	HX_MARK_MEMBER_NAME(ZPP_Arbiter_obj::types,"types");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Arbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Arbiter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Arbiter_obj::internal,"internal");
	HX_VISIT_MEMBER_NAME(ZPP_Arbiter_obj::COL,"COL");
	HX_VISIT_MEMBER_NAME(ZPP_Arbiter_obj::FLUID,"FLUID");
	HX_VISIT_MEMBER_NAME(ZPP_Arbiter_obj::SENSOR,"SENSOR");
	HX_VISIT_MEMBER_NAME(ZPP_Arbiter_obj::types,"types");
};

#endif

hx::Class ZPP_Arbiter_obj::__mClass;

static ::String ZPP_Arbiter_obj_sStaticFields[] = {
	HX_HCSTRING("internal","\x3d","\x67","\x76","\x28"),
	HX_HCSTRING("COL","\x20","\x1c","\x33","\x00"),
	HX_HCSTRING("FLUID","\xea","\x91","\x89","\x80"),
	HX_HCSTRING("SENSOR","\x3a","\xde","\x12","\x1e"),
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	::String(null())
};

void ZPP_Arbiter_obj::__register()
{
	hx::Object *dummy = new ZPP_Arbiter_obj;
	ZPP_Arbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.dynamics.ZPP_Arbiter","\x4b","\x1d","\x51","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Arbiter_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Arbiter_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Arbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Arbiter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Arbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Arbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Arbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Arbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Arbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Arbiter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_179_boot)
HXLINE( 179)		internal = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_261_boot)
HXLINE( 261)		COL = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_262_boot)
HXLINE( 262)		FLUID = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_263_boot)
HXLINE( 263)		SENSOR = (int)2;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_747c2bf5106d687b_264_boot)
HXLINE( 264)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ArbiterType_COLLISION )) {
HXLINE( 264)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 264)				::zpp_nape::util::ZPP_Flags_obj::ArbiterType_COLLISION =  ::nape::dynamics::ArbiterType_obj::__alloc( HX_CTX );
HXDLIN( 264)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 264)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ArbiterType_SENSOR )) {
HXLINE( 264)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 264)				::zpp_nape::util::ZPP_Flags_obj::ArbiterType_SENSOR =  ::nape::dynamics::ArbiterType_obj::__alloc( HX_CTX );
HXDLIN( 264)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 264)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ArbiterType_FLUID )) {
HXLINE( 264)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 264)				::zpp_nape::util::ZPP_Flags_obj::ArbiterType_FLUID =  ::nape::dynamics::ArbiterType_obj::__alloc( HX_CTX );
HXDLIN( 264)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 264)			return ::Array_obj< ::Dynamic>::__new(5)->init(0,null())->init(1,::zpp_nape::util::ZPP_Flags_obj::ArbiterType_COLLISION)->init(2,::zpp_nape::util::ZPP_Flags_obj::ArbiterType_SENSOR)->init(3,null())->init(4,::zpp_nape::util::ZPP_Flags_obj::ArbiterType_FLUID);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_747c2bf5106d687b_264_boot)
HXLINE( 264)		types =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace zpp_nape
} // end namespace dynamics
