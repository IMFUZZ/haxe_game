// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_174_new,"zpp_nape.dynamics.ZPP_InteractionFilter","new",0xf48737fe,"zpp_nape.dynamics.ZPP_InteractionFilter.new","zpp_nape/dynamics/InteractionFilter.hx",174,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_202_wrapper,"zpp_nape.dynamics.ZPP_InteractionFilter","wrapper",0xd62763f1,"zpp_nape.dynamics.ZPP_InteractionFilter.wrapper","zpp_nape/dynamics/InteractionFilter.hx",202,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_229_free,"zpp_nape.dynamics.ZPP_InteractionFilter","free",0xfc89df4e,"zpp_nape.dynamics.ZPP_InteractionFilter.free","zpp_nape/dynamics/InteractionFilter.hx",229,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_233_alloc,"zpp_nape.dynamics.ZPP_InteractionFilter","alloc",0x1726af93,"zpp_nape.dynamics.ZPP_InteractionFilter.alloc","zpp_nape/dynamics/InteractionFilter.hx",233,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_239_feature_cons,"zpp_nape.dynamics.ZPP_InteractionFilter","feature_cons",0x8cbd03fc,"zpp_nape.dynamics.ZPP_InteractionFilter.feature_cons","zpp_nape/dynamics/InteractionFilter.hx",239,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_244_addShape,"zpp_nape.dynamics.ZPP_InteractionFilter","addShape",0xd6f444e2,"zpp_nape.dynamics.ZPP_InteractionFilter.addShape","zpp_nape/dynamics/InteractionFilter.hx",244,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_249_remShape,"zpp_nape.dynamics.ZPP_InteractionFilter","remShape",0x66198f09,"zpp_nape.dynamics.ZPP_InteractionFilter.remShape","zpp_nape/dynamics/InteractionFilter.hx",249,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_256_copy,"zpp_nape.dynamics.ZPP_InteractionFilter","copy",0xfa8bfe57,"zpp_nape.dynamics.ZPP_InteractionFilter.copy","zpp_nape/dynamics/InteractionFilter.hx",256,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_288_shouldCollide,"zpp_nape.dynamics.ZPP_InteractionFilter","shouldCollide",0x365844a9,"zpp_nape.dynamics.ZPP_InteractionFilter.shouldCollide","zpp_nape/dynamics/InteractionFilter.hx",288,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_295_shouldSense,"zpp_nape.dynamics.ZPP_InteractionFilter","shouldSense",0x626d8399,"zpp_nape.dynamics.ZPP_InteractionFilter.shouldSense","zpp_nape/dynamics/InteractionFilter.hx",295,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_302_shouldFlow,"zpp_nape.dynamics.ZPP_InteractionFilter","shouldFlow",0xb42369e3,"zpp_nape.dynamics.ZPP_InteractionFilter.shouldFlow","zpp_nape/dynamics/InteractionFilter.hx",302,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_305_invalidate,"zpp_nape.dynamics.ZPP_InteractionFilter","invalidate",0x6864019d,"zpp_nape.dynamics.ZPP_InteractionFilter.invalidate","zpp_nape/dynamics/InteractionFilter.hx",305,0x8f5b39cd)
HX_DEFINE_STACK_FRAME(_hx_pos_b287a58f8ffd132b_176_boot,"zpp_nape.dynamics.ZPP_InteractionFilter","boot",0xf9e2c6d4,"zpp_nape.dynamics.ZPP_InteractionFilter.boot","zpp_nape/dynamics/InteractionFilter.hx",176,0x8f5b39cd)
namespace zpp_nape{
namespace dynamics{

void ZPP_InteractionFilter_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b287a58f8ffd132b_174_new)
            	HX_STACK_THIS(this)
HXLINE( 298)		this->fluidMask = (int)0;
HXLINE( 297)		this->fluidGroup = (int)0;
HXLINE( 291)		this->sensorMask = (int)0;
HXLINE( 290)		this->sensorGroup = (int)0;
HXLINE( 284)		this->collisionMask = (int)0;
HXLINE( 283)		this->collisionGroup = (int)0;
HXLINE( 235)		this->wrap_shapes = null();
HXLINE( 234)		this->shapes = null();
HXLINE( 201)		this->outer = null();
HXLINE( 200)		this->userData = null();
HXLINE( 175)		this->next = null();
HXLINE( 252)		this->shapes =  ::zpp_nape::util::ZNPList_ZPP_Shape_obj::__alloc( HX_CTX );
HXLINE( 253)		this->collisionGroup = (this->sensorGroup = (this->fluidGroup = (int)1));
HXLINE( 254)		this->collisionMask = (this->sensorMask = (this->fluidMask = (int)-1));
            	}

Dynamic ZPP_InteractionFilter_obj::__CreateEmpty() { return new ZPP_InteractionFilter_obj; }

void *ZPP_InteractionFilter_obj::_hx_vtable = 0;

Dynamic ZPP_InteractionFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_InteractionFilter_obj > _hx_result = new ZPP_InteractionFilter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_InteractionFilter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61faef00;
}

 ::nape::dynamics::InteractionFilter ZPP_InteractionFilter_obj::wrapper(){
            	HX_GC_STACKFRAME(&_hx_pos_b287a58f8ffd132b_202_wrapper)
            	HX_STACK_THIS(this)
HXLINE( 203)		if (hx::IsNull( this->outer )) {
HXLINE( 204)			this->outer =  ::nape::dynamics::InteractionFilter_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 205)			{
HXLINE( 206)				HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,o) = this->outer->zpp_inner;
HXLINE( 215)				o->outer = null();
HXLINE( 216)				o->next = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool;
HXLINE( 217)				::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = o;
            			}
HXLINE( 222)			this->outer->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 224)		return this->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_InteractionFilter_obj,wrapper,return )

void ZPP_InteractionFilter_obj::free(){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_229_free)
            	HX_STACK_THIS(this)
HXLINE( 229)		this->outer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_InteractionFilter_obj,free,(void))

void ZPP_InteractionFilter_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_233_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_InteractionFilter_obj,alloc,(void))

void ZPP_InteractionFilter_obj::feature_cons(){
            	HX_GC_STACKFRAME(&_hx_pos_b287a58f8ffd132b_239_feature_cons)
            	HX_STACK_THIS(this)
HXLINE( 239)		this->shapes =  ::zpp_nape::util::ZNPList_ZPP_Shape_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_InteractionFilter_obj,feature_cons,(void))

void ZPP_InteractionFilter_obj::addShape( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_244_addShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 244)		this->shapes->add(shape);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionFilter_obj,addShape,(void))

void ZPP_InteractionFilter_obj::remShape( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_249_remShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 249)		this->shapes->remove(shape);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionFilter_obj,remShape,(void))

 ::zpp_nape::dynamics::ZPP_InteractionFilter ZPP_InteractionFilter_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_b287a58f8ffd132b_256_copy)
            	HX_STACK_THIS(this)
HXLINE( 257)		HX_VAR(  ::zpp_nape::dynamics::ZPP_InteractionFilter,ret);
HXLINE( 259)		if (hx::IsNull( ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool )) {
HXLINE( 260)			ret =  ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 266)			ret = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool;
HXLINE( 267)			::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = ret->next;
HXLINE( 268)			ret->next = null();
            		}
HXLINE( 275)		ret->collisionGroup = this->collisionGroup;
HXLINE( 276)		ret->collisionMask = this->collisionMask;
HXLINE( 277)		ret->sensorGroup = this->sensorGroup;
HXLINE( 278)		ret->sensorMask = this->sensorMask;
HXLINE( 279)		ret->fluidGroup = this->fluidGroup;
HXLINE( 280)		ret->fluidMask = this->fluidMask;
HXLINE( 281)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_InteractionFilter_obj,copy,return )

bool ZPP_InteractionFilter_obj::shouldCollide( ::zpp_nape::dynamics::ZPP_InteractionFilter x){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_288_shouldCollide)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 288)		if ((((int)this->collisionMask & (int)x->collisionGroup) != (int)0)) {
HXLINE( 288)			return (((int)x->collisionMask & (int)this->collisionGroup) != (int)0);
            		}
            		else {
HXLINE( 288)			return false;
            		}
HXDLIN( 288)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionFilter_obj,shouldCollide,return )

bool ZPP_InteractionFilter_obj::shouldSense( ::zpp_nape::dynamics::ZPP_InteractionFilter x){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_295_shouldSense)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 295)		if ((((int)this->sensorMask & (int)x->sensorGroup) != (int)0)) {
HXLINE( 295)			return (((int)x->sensorMask & (int)this->sensorGroup) != (int)0);
            		}
            		else {
HXLINE( 295)			return false;
            		}
HXDLIN( 295)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionFilter_obj,shouldSense,return )

bool ZPP_InteractionFilter_obj::shouldFlow( ::zpp_nape::dynamics::ZPP_InteractionFilter x){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_302_shouldFlow)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 302)		if ((((int)this->fluidMask & (int)x->fluidGroup) != (int)0)) {
HXLINE( 302)			return (((int)x->fluidMask & (int)this->fluidGroup) != (int)0);
            		}
            		else {
HXLINE( 302)			return false;
            		}
HXDLIN( 302)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionFilter_obj,shouldFlow,return )

void ZPP_InteractionFilter_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_305_invalidate)
            	HX_STACK_THIS(this)
HXLINE( 306)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE( 307)		while(hx::IsNotNull( cx_ite )){
HXLINE( 309)			cx_ite->elt->invalidate_filter();
HXLINE( 310)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_InteractionFilter_obj,invalidate,(void))

 ::zpp_nape::dynamics::ZPP_InteractionFilter ZPP_InteractionFilter_obj::zpp_pool;


hx::ObjectPtr< ZPP_InteractionFilter_obj > ZPP_InteractionFilter_obj::__new() {
	hx::ObjectPtr< ZPP_InteractionFilter_obj > __this = new ZPP_InteractionFilter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_InteractionFilter_obj > ZPP_InteractionFilter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_InteractionFilter_obj *__this = (ZPP_InteractionFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_InteractionFilter_obj), true, "zpp_nape.dynamics.ZPP_InteractionFilter"));
	*(void **)__this = ZPP_InteractionFilter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_InteractionFilter_obj::ZPP_InteractionFilter_obj()
{
}

void ZPP_InteractionFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_InteractionFilter);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(shapes,"shapes");
	HX_MARK_MEMBER_NAME(wrap_shapes,"wrap_shapes");
	HX_MARK_MEMBER_NAME(collisionGroup,"collisionGroup");
	HX_MARK_MEMBER_NAME(collisionMask,"collisionMask");
	HX_MARK_MEMBER_NAME(sensorGroup,"sensorGroup");
	HX_MARK_MEMBER_NAME(sensorMask,"sensorMask");
	HX_MARK_MEMBER_NAME(fluidGroup,"fluidGroup");
	HX_MARK_MEMBER_NAME(fluidMask,"fluidMask");
	HX_MARK_END_CLASS();
}

void ZPP_InteractionFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(shapes,"shapes");
	HX_VISIT_MEMBER_NAME(wrap_shapes,"wrap_shapes");
	HX_VISIT_MEMBER_NAME(collisionGroup,"collisionGroup");
	HX_VISIT_MEMBER_NAME(collisionMask,"collisionMask");
	HX_VISIT_MEMBER_NAME(sensorGroup,"sensorGroup");
	HX_VISIT_MEMBER_NAME(sensorMask,"sensorMask");
	HX_VISIT_MEMBER_NAME(fluidGroup,"fluidGroup");
	HX_VISIT_MEMBER_NAME(fluidMask,"fluidMask");
}

hx::Val ZPP_InteractionFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { return hx::Val( shapes); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrapper") ) { return hx::Val( wrapper_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData); }
		if (HX_FIELD_EQ(inName,"addShape") ) { return hx::Val( addShape_dyn()); }
		if (HX_FIELD_EQ(inName,"remShape") ) { return hx::Val( remShape_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fluidMask") ) { return hx::Val( fluidMask); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sensorMask") ) { return hx::Val( sensorMask); }
		if (HX_FIELD_EQ(inName,"fluidGroup") ) { return hx::Val( fluidGroup); }
		if (HX_FIELD_EQ(inName,"shouldFlow") ) { return hx::Val( shouldFlow_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_shapes") ) { return hx::Val( wrap_shapes); }
		if (HX_FIELD_EQ(inName,"sensorGroup") ) { return hx::Val( sensorGroup); }
		if (HX_FIELD_EQ(inName,"shouldSense") ) { return hx::Val( shouldSense_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"feature_cons") ) { return hx::Val( feature_cons_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisionMask") ) { return hx::Val( collisionMask); }
		if (HX_FIELD_EQ(inName,"shouldCollide") ) { return hx::Val( shouldCollide_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"collisionGroup") ) { return hx::Val( collisionGroup); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_InteractionFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_InteractionFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::dynamics::ZPP_InteractionFilter >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::dynamics::InteractionFilter >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { shapes=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Shape >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fluidMask") ) { fluidMask=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sensorMask") ) { sensorMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fluidGroup") ) { fluidGroup=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_shapes") ) { wrap_shapes=inValue.Cast<  ::nape::shape::ShapeList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sensorGroup") ) { sensorGroup=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisionMask") ) { collisionMask=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"collisionGroup") ) { collisionGroup=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_InteractionFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::dynamics::ZPP_InteractionFilter >(); return true; }
	}
	return false;
}

void ZPP_InteractionFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"));
	outFields->push(HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07"));
	outFields->push(HX_HCSTRING("collisionGroup","\x6d","\x9d","\xf5","\xe8"));
	outFields->push(HX_HCSTRING("collisionMask","\x7e","\x36","\x8c","\x28"));
	outFields->push(HX_HCSTRING("sensorGroup","\xa5","\x9e","\x4f","\xe0"));
	outFields->push(HX_HCSTRING("sensorMask","\x46","\x44","\xfe","\x14"));
	outFields->push(HX_HCSTRING("fluidGroup","\xd5","\x24","\xb2","\xf6"));
	outFields->push(HX_HCSTRING("fluidMask","\x16","\x94","\x81","\xf1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_InteractionFilter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_InteractionFilter*/ ,(int)offsetof(ZPP_InteractionFilter_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_InteractionFilter_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsObject /*::nape::dynamics::InteractionFilter*/ ,(int)offsetof(ZPP_InteractionFilter_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Shape*/ ,(int)offsetof(ZPP_InteractionFilter_obj,shapes),HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d")},
	{hx::fsObject /*::nape::shape::ShapeList*/ ,(int)offsetof(ZPP_InteractionFilter_obj,wrap_shapes),HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionFilter_obj,collisionGroup),HX_HCSTRING("collisionGroup","\x6d","\x9d","\xf5","\xe8")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionFilter_obj,collisionMask),HX_HCSTRING("collisionMask","\x7e","\x36","\x8c","\x28")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionFilter_obj,sensorGroup),HX_HCSTRING("sensorGroup","\xa5","\x9e","\x4f","\xe0")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionFilter_obj,sensorMask),HX_HCSTRING("sensorMask","\x46","\x44","\xfe","\x14")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionFilter_obj,fluidGroup),HX_HCSTRING("fluidGroup","\xd5","\x24","\xb2","\xf6")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionFilter_obj,fluidMask),HX_HCSTRING("fluidMask","\x16","\x94","\x81","\xf1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_InteractionFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_InteractionFilter*/ ,(void *) &ZPP_InteractionFilter_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_InteractionFilter_obj_sMemberFields[] = {
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("wrapper","\x53","\xd5","\x64","\x0d"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"),
	HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07"),
	HX_HCSTRING("feature_cons","\x5a","\x4f","\x1f","\x7b"),
	HX_HCSTRING("addShape","\x40","\x09","\x7a","\xf5"),
	HX_HCSTRING("remShape","\x67","\x53","\x9f","\x84"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("collisionGroup","\x6d","\x9d","\xf5","\xe8"),
	HX_HCSTRING("collisionMask","\x7e","\x36","\x8c","\x28"),
	HX_HCSTRING("shouldCollide","\x8b","\xeb","\xf7","\xdd"),
	HX_HCSTRING("sensorGroup","\xa5","\x9e","\x4f","\xe0"),
	HX_HCSTRING("sensorMask","\x46","\x44","\xfe","\x14"),
	HX_HCSTRING("shouldSense","\xfb","\x4d","\xfc","\x30"),
	HX_HCSTRING("fluidGroup","\xd5","\x24","\xb2","\xf6"),
	HX_HCSTRING("fluidMask","\x16","\x94","\x81","\xf1"),
	HX_HCSTRING("shouldFlow","\xc1","\x81","\xe9","\xd2"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	::String(null()) };

static void ZPP_InteractionFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_InteractionFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_InteractionFilter_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_InteractionFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_InteractionFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionFilter_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_InteractionFilter_obj::__mClass;

static ::String ZPP_InteractionFilter_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_InteractionFilter_obj::__register()
{
	hx::Object *dummy = new ZPP_InteractionFilter_obj;
	ZPP_InteractionFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.dynamics.ZPP_InteractionFilter","\x0c","\x21","\xd8","\xe7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_InteractionFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_InteractionFilter_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_InteractionFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_InteractionFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_InteractionFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_InteractionFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_InteractionFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_InteractionFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_InteractionFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_InteractionFilter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b287a58f8ffd132b_176_boot)
HXLINE( 176)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace dynamics
