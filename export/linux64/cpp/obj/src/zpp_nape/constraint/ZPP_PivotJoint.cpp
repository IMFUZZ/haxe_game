// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_PivotJoint
#include <nape/constraint/PivotJoint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_PivotJoint
#include <zpp_nape/constraint/ZPP_PivotJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_174_new,"zpp_nape.constraint.ZPP_PivotJoint","new",0x51312e0f,"zpp_nape.constraint.ZPP_PivotJoint.new","zpp_nape/constraint/PivotJoint.hx",174,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_177_bodyImpulse,"zpp_nape.constraint.ZPP_PivotJoint","bodyImpulse",0x3bab9ae2,"zpp_nape.constraint.ZPP_PivotJoint.bodyImpulse","zpp_nape/constraint/PivotJoint.hx",177,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_183_activeBodies,"zpp_nape.constraint.ZPP_PivotJoint","activeBodies",0x66ef5e57,"zpp_nape.constraint.ZPP_PivotJoint.activeBodies","zpp_nape/constraint/PivotJoint.hx",183,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_191_inactiveBodies,"zpp_nape.constraint.ZPP_PivotJoint","inactiveBodies",0x5bb73bfc,"zpp_nape.constraint.ZPP_PivotJoint.inactiveBodies","zpp_nape/constraint/PivotJoint.hx",191,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_205_validate_a1,"zpp_nape.constraint.ZPP_PivotJoint","validate_a1",0xa6d5c0a8,"zpp_nape.constraint.ZPP_PivotJoint.validate_a1","zpp_nape/constraint/PivotJoint.hx",205,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_226_invalidate_a1,"zpp_nape.constraint.ZPP_PivotJoint","invalidate_a1",0x73201ea3,"zpp_nape.constraint.ZPP_PivotJoint.invalidate_a1","zpp_nape/constraint/PivotJoint.hx",226,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_250_setup_a1,"zpp_nape.constraint.ZPP_PivotJoint","setup_a1",0xba3ed063,"zpp_nape.constraint.ZPP_PivotJoint.setup_a1","zpp_nape/constraint/PivotJoint.hx",250,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_263_validate_a2,"zpp_nape.constraint.ZPP_PivotJoint","validate_a2",0xa6d5c0a9,"zpp_nape.constraint.ZPP_PivotJoint.validate_a2","zpp_nape/constraint/PivotJoint.hx",263,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_284_invalidate_a2,"zpp_nape.constraint.ZPP_PivotJoint","invalidate_a2",0x73201ea4,"zpp_nape.constraint.ZPP_PivotJoint.invalidate_a2","zpp_nape/constraint/PivotJoint.hx",284,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_308_setup_a2,"zpp_nape.constraint.ZPP_PivotJoint","setup_a2",0xba3ed064,"zpp_nape.constraint.ZPP_PivotJoint.setup_a2","zpp_nape/constraint/PivotJoint.hx",308,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_325_copy,"zpp_nape.constraint.ZPP_PivotJoint","copy",0xb2995726,"zpp_nape.constraint.ZPP_PivotJoint.copy","zpp_nape/constraint/PivotJoint.hx",325,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_346_copy,"zpp_nape.constraint.ZPP_PivotJoint","copy",0xb2995726,"zpp_nape.constraint.ZPP_PivotJoint.copy","zpp_nape/constraint/PivotJoint.hx",346,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_367_copy,"zpp_nape.constraint.ZPP_PivotJoint","copy",0xb2995726,"zpp_nape.constraint.ZPP_PivotJoint.copy","zpp_nape/constraint/PivotJoint.hx",367,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_481_validate,"zpp_nape.constraint.ZPP_PivotJoint","validate",0x9be97887,"zpp_nape.constraint.ZPP_PivotJoint.validate","zpp_nape/constraint/PivotJoint.hx",481,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_487_wake_connected,"zpp_nape.constraint.ZPP_PivotJoint","wake_connected",0x0ccf825f,"zpp_nape.constraint.ZPP_PivotJoint.wake_connected","zpp_nape/constraint/PivotJoint.hx",487,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_491_forest,"zpp_nape.constraint.ZPP_PivotJoint","forest",0xc14fa68e,"zpp_nape.constraint.ZPP_PivotJoint.forest","zpp_nape/constraint/PivotJoint.hx",491,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_590_pair_exists,"zpp_nape.constraint.ZPP_PivotJoint","pair_exists",0x45618f50,"zpp_nape.constraint.ZPP_PivotJoint.pair_exists","zpp_nape/constraint/PivotJoint.hx",590,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_592_clearcache,"zpp_nape.constraint.ZPP_PivotJoint","clearcache",0x24a5afc6,"zpp_nape.constraint.ZPP_PivotJoint.clearcache","zpp_nape/constraint/PivotJoint.hx",592,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_615_preStep,"zpp_nape.constraint.ZPP_PivotJoint","preStep",0xaf30223e,"zpp_nape.constraint.ZPP_PivotJoint.preStep","zpp_nape/constraint/PivotJoint.hx",615,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_826_warmStart,"zpp_nape.constraint.ZPP_PivotJoint","warmStart",0x78f072cc,"zpp_nape.constraint.ZPP_PivotJoint.warmStart","zpp_nape/constraint/PivotJoint.hx",826,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_858_applyImpulseVel,"zpp_nape.constraint.ZPP_PivotJoint","applyImpulseVel",0x63db6fe5,"zpp_nape.constraint.ZPP_PivotJoint.applyImpulseVel","zpp_nape/constraint/PivotJoint.hx",858,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_1034_applyImpulsePos,"zpp_nape.constraint.ZPP_PivotJoint","applyImpulsePos",0x63d6eb1c,"zpp_nape.constraint.ZPP_PivotJoint.applyImpulsePos","zpp_nape/constraint/PivotJoint.hx",1034,0x4ef23406)
HX_DEFINE_STACK_FRAME(_hx_pos_e49efd2d085e96b5_1342_draw,"zpp_nape.constraint.ZPP_PivotJoint","draw",0xb344c775,"zpp_nape.constraint.ZPP_PivotJoint.draw","zpp_nape/constraint/PivotJoint.hx",1342,0x4ef23406)
namespace zpp_nape{
namespace constraint{

void ZPP_PivotJoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_174_new)
            	HX_STACK_THIS(this)
HXLINE( 324)		this->stepped = false;
HXLINE( 323)		this->biasy = ((Float)0.0);
HXLINE( 322)		this->biasx = ((Float)0.0);
HXLINE( 321)		this->gamma = ((Float)0.0);
HXLINE( 320)		this->jMax = ((Float)0.0);
HXLINE( 319)		this->jAccy = ((Float)0.0);
HXLINE( 318)		this->jAccx = ((Float)0.0);
HXLINE( 317)		this->kMassc = ((Float)0.0);
HXLINE( 316)		this->kMassb = ((Float)0.0);
HXLINE( 315)		this->kMassa = ((Float)0.0);
HXLINE( 314)		this->wrap_a2 = null();
HXLINE( 261)		this->a2rely = ((Float)0.0);
HXLINE( 260)		this->a2relx = ((Float)0.0);
HXLINE( 259)		this->a2localy = ((Float)0.0);
HXLINE( 258)		this->a2localx = ((Float)0.0);
HXLINE( 257)		this->b2 = null();
HXLINE( 256)		this->wrap_a1 = null();
HXLINE( 203)		this->a1rely = ((Float)0.0);
HXLINE( 202)		this->a1relx = ((Float)0.0);
HXLINE( 201)		this->a1localy = ((Float)0.0);
HXLINE( 200)		this->a1localx = ((Float)0.0);
HXLINE( 199)		this->b1 = null();
HXLINE( 175)		this->outer_zn = null();
HXLINE( 373)		super::__construct();
HXLINE( 374)		this->stepped = false;
HXLINE( 375)		{
HXLINE( 376)			this->jAccx = (int)0;
HXLINE( 377)			this->jAccy = (int)0;
            		}
HXLINE( 395)		this->jMax = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 396)		{
HXLINE( 397)			{
HXLINE( 398)				this->a1localx = (int)0;
HXLINE( 399)				this->a1localy = (int)0;
            			}
HXLINE( 417)			{
HXLINE( 418)				this->a1relx = (int)0;
HXLINE( 419)				this->a1rely = (int)0;
            			}
            		}
HXLINE( 438)		{
HXLINE( 439)			{
HXLINE( 440)				this->a2localx = (int)0;
HXLINE( 441)				this->a2localy = (int)0;
            			}
HXLINE( 459)			{
HXLINE( 460)				this->a2relx = (int)0;
HXLINE( 461)				this->a2rely = (int)0;
            			}
            		}
            	}

Dynamic ZPP_PivotJoint_obj::__CreateEmpty() { return new ZPP_PivotJoint_obj; }

void *ZPP_PivotJoint_obj::_hx_vtable = 0;

Dynamic ZPP_PivotJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_PivotJoint_obj > _hx_result = new ZPP_PivotJoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_PivotJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x731bc4b7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x731bc4b7;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

 ::nape::geom::Vec3 ZPP_PivotJoint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_177_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 177)		if (this->stepped) {
HXLINE( 178)			if (hx::IsEq( b,this->b1 )) {
HXLINE( 178)				return ::nape::geom::Vec3_obj::get(-(this->jAccx),-(this->jAccy),-(((this->jAccy * this->a1relx) - (this->jAccx * this->a1rely))));
            			}
            			else {
HXLINE( 179)				return ::nape::geom::Vec3_obj::get(this->jAccx,this->jAccy,((this->jAccy * this->a2relx) - (this->jAccx * this->a2rely)));
            			}
            		}
            		else {
HXLINE( 181)			return ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
            		}
HXLINE( 177)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PivotJoint_obj,bodyImpulse,return )

void ZPP_PivotJoint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_183_activeBodies)
            	HX_STACK_THIS(this)
HXLINE( 185)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 185)			this->b1->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 187)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 188)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 188)				this->b2->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_PivotJoint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_191_inactiveBodies)
            	HX_STACK_THIS(this)
HXLINE( 193)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 193)			this->b1->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 195)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 196)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 196)				this->b2->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_PivotJoint_obj::validate_a1(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_205_validate_a1)
            	HX_STACK_THIS(this)
HXLINE( 206)		this->wrap_a1->zpp_inner->x = this->a1localx;
HXLINE( 207)		this->wrap_a1->zpp_inner->y = this->a1localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,validate_a1,(void))

void ZPP_PivotJoint_obj::invalidate_a1( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_226_invalidate_a1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 228)		{
HXLINE( 229)			this->a1localx = x->x;
HXLINE( 230)			this->a1localy = x->y;
            		}
HXLINE( 248)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PivotJoint_obj,invalidate_a1,(void))

void ZPP_PivotJoint_obj::setup_a1(){
            	HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_250_setup_a1)
            	HX_STACK_THIS(this)
HXLINE( 251)		HX_VARI( Float,x) = this->a1localx;
HXDLIN( 251)		HX_VARI( Float,y) = this->a1localy;
HXDLIN( 251)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 251)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 251)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 251)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 251)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 251)			ret->zpp_pool = null();
            		}
HXDLIN( 251)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 251)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 251)			{
HXLINE( 251)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 251)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 251)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 251)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 251)					ret1->next = null();
            				}
HXDLIN( 251)				ret1->weak = false;
            			}
HXDLIN( 251)			ret1->_immutable = false;
HXDLIN( 251)			{
HXLINE( 251)				ret1->x = x;
HXDLIN( 251)				ret1->y = y;
            			}
HXDLIN( 251)			ret->zpp_inner = ret1;
HXDLIN( 251)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 251)			bool _hx_tmp;
HXDLIN( 251)			{
HXLINE( 251)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 251)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 251)					_this->_validate();
            				}
            			}
HXDLIN( 251)			if ((ret->zpp_inner->x == x)) {
HXLINE( 251)				{
HXLINE( 251)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 251)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 251)						_this1->_validate();
            					}
            				}
HXDLIN( 251)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 251)				_hx_tmp = false;
            			}
HXDLIN( 251)			if (!(_hx_tmp)) {
HXLINE( 251)				{
HXLINE( 251)					ret->zpp_inner->x = x;
HXDLIN( 251)					ret->zpp_inner->y = y;
            				}
HXDLIN( 251)				{
HXLINE( 251)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 251)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 251)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 251)		ret->zpp_inner->weak = false;
HXDLIN( 251)		this->wrap_a1 = ret;
HXLINE( 252)		this->wrap_a1->zpp_inner->_inuse = true;
HXLINE( 253)		this->wrap_a1->zpp_inner->_validate = this->validate_a1_dyn();
HXLINE( 254)		this->wrap_a1->zpp_inner->_invalidate = this->invalidate_a1_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,setup_a1,(void))

void ZPP_PivotJoint_obj::validate_a2(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_263_validate_a2)
            	HX_STACK_THIS(this)
HXLINE( 264)		this->wrap_a2->zpp_inner->x = this->a2localx;
HXLINE( 265)		this->wrap_a2->zpp_inner->y = this->a2localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,validate_a2,(void))

void ZPP_PivotJoint_obj::invalidate_a2( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_284_invalidate_a2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 286)		{
HXLINE( 287)			this->a2localx = x->x;
HXLINE( 288)			this->a2localy = x->y;
            		}
HXLINE( 306)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PivotJoint_obj,invalidate_a2,(void))

void ZPP_PivotJoint_obj::setup_a2(){
            	HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_308_setup_a2)
            	HX_STACK_THIS(this)
HXLINE( 309)		HX_VARI( Float,x) = this->a2localx;
HXDLIN( 309)		HX_VARI( Float,y) = this->a2localy;
HXDLIN( 309)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 309)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 309)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 309)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 309)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 309)			ret->zpp_pool = null();
            		}
HXDLIN( 309)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 309)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 309)			{
HXLINE( 309)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 309)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 309)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 309)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 309)					ret1->next = null();
            				}
HXDLIN( 309)				ret1->weak = false;
            			}
HXDLIN( 309)			ret1->_immutable = false;
HXDLIN( 309)			{
HXLINE( 309)				ret1->x = x;
HXDLIN( 309)				ret1->y = y;
            			}
HXDLIN( 309)			ret->zpp_inner = ret1;
HXDLIN( 309)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 309)			bool _hx_tmp;
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 309)					_this->_validate();
            				}
            			}
HXDLIN( 309)			if ((ret->zpp_inner->x == x)) {
HXLINE( 309)				{
HXLINE( 309)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 309)						_this1->_validate();
            					}
            				}
HXDLIN( 309)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 309)				_hx_tmp = false;
            			}
HXDLIN( 309)			if (!(_hx_tmp)) {
HXLINE( 309)				{
HXLINE( 309)					ret->zpp_inner->x = x;
HXDLIN( 309)					ret->zpp_inner->y = y;
            				}
HXDLIN( 309)				{
HXLINE( 309)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 309)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 309)		ret->zpp_inner->weak = false;
HXDLIN( 309)		this->wrap_a2 = ret;
HXLINE( 310)		this->wrap_a2->zpp_inner->_inuse = true;
HXLINE( 311)		this->wrap_a2->zpp_inner->_validate = this->validate_a2_dyn();
HXLINE( 312)		this->wrap_a2->zpp_inner->_invalidate = this->invalidate_a2_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PivotJoint_obj,setup_a2,(void))

 ::nape::constraint::Constraint ZPP_PivotJoint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_325_copy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dict,"dict")
            	HX_STACK_ARG(todo,"todo")
HXLINE( 326)		HX_VARI(  ::nape::constraint::PivotJoint,_this) = this->outer_zn;
HXDLIN( 326)		if (hx::IsNull( _this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 326)			_this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 326)		HX_VARI(  ::nape::geom::Vec2,ret) = _this->zpp_inner_zn->wrap_a1;
HXDLIN( 326)		HX_VARI_NAME(  ::nape::constraint::PivotJoint,_this1,"_this") = this->outer_zn;
HXDLIN( 326)		if (hx::IsNull( _this1->zpp_inner_zn->wrap_a2 )) {
HXLINE( 326)			_this1->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 326)		HX_VARI_NAME(  ::nape::constraint::PivotJoint,ret1,"ret") =  ::nape::constraint::PivotJoint_obj::__alloc( HX_CTX ,null(),null(),ret,_this1->zpp_inner_zn->wrap_a2);
HXLINE( 327)		this->copyto(ret1);
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		if (hx::IsNotNull( dict )) {
HXLINE( 329)			_hx_tmp = hx::IsNotNull( this->b1 );
            		}
            		else {
HXLINE( 329)			_hx_tmp = false;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 338)			HX_VARI(  ::nape::phys::Body,b) = null();
HXLINE( 339)			{
HXLINE( 339)				HX_VARI( int,_g) = (int)0;
HXDLIN( 339)				while((_g < dict->length)){
HXLINE( 339)					HX_VARI(  ::zpp_nape::constraint::ZPP_CopyHelper,idc) = dict->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 339)					_g = (_g + (int)1);
HXLINE( 340)					if ((idc->id == this->b1->id)) {
HXLINE( 341)						b = idc->bc;
HXLINE( 342)						goto _hx_goto_10;
            					}
            				}
            				_hx_goto_10:;
            			}
HXLINE( 345)			if (hx::IsNotNull( b )) {
HXLINE( 345)				ret1->zpp_inner_zn->b1 = b->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::nape::constraint::PivotJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b1){
            					HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_346_copy)
            					HX_STACK_ARG(b1,"b1")
HXLINE( 346)					ret1->zpp_inner_zn->b1 = b1->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 346)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b1->id, ::Dynamic(new _hx_Closure_0(ret1))));
            			}
            		}
HXLINE( 350)		bool _hx_tmp1;
HXDLIN( 350)		if (hx::IsNotNull( dict )) {
HXLINE( 350)			_hx_tmp1 = hx::IsNotNull( this->b2 );
            		}
            		else {
HXLINE( 350)			_hx_tmp1 = false;
            		}
HXDLIN( 350)		if (_hx_tmp1) {
HXLINE( 359)			HX_VARI_NAME(  ::nape::phys::Body,b2,"b") = null();
HXLINE( 360)			{
HXLINE( 360)				HX_VARI_NAME( int,_g1,"_g") = (int)0;
HXDLIN( 360)				while((_g1 < dict->length)){
HXLINE( 360)					HX_VARI_NAME(  ::zpp_nape::constraint::ZPP_CopyHelper,idc1,"idc") = dict->__get(_g1).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 360)					_g1 = (_g1 + (int)1);
HXLINE( 361)					if ((idc1->id == this->b2->id)) {
HXLINE( 362)						b2 = idc1->bc;
HXLINE( 363)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
            			}
HXLINE( 366)			if (hx::IsNotNull( b2 )) {
HXLINE( 366)				ret1->zpp_inner_zn->b2 = b2->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::nape::constraint::PivotJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b3){
            					HX_GC_STACKFRAME(&_hx_pos_e49efd2d085e96b5_367_copy)
            					HX_STACK_ARG(b3,"b3")
HXLINE( 367)					ret1->zpp_inner_zn->b2 = b3->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 367)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b2->id, ::Dynamic(new _hx_Closure_1(ret1))));
            			}
            		}
HXLINE( 370)		return ret1;
            	}


void ZPP_PivotJoint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_481_validate)
            	HX_STACK_THIS(this)
HXLINE( 482)		bool _hx_tmp;
HXDLIN( 482)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 482)			_hx_tmp = hx::IsNull( this->b2 );
            		}
            		else {
HXLINE( 482)			_hx_tmp = true;
            		}
HXDLIN( 482)		if (_hx_tmp) {
HXLINE( 482)			HX_STACK_DO_THROW(HX_("Error: PivotJoint cannot be simulated null bodies",af,f3,ba,a1));
            		}
HXLINE( 483)		if (hx::IsEq( this->b1,this->b2 )) {
HXLINE( 483)			HX_STACK_DO_THROW(((HX_("Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=",54,9d,c6,0e) + this->b1->outer->toString()) + HX_(")",29,00,00,00)));
            		}
HXLINE( 484)		bool _hx_tmp1;
HXDLIN( 484)		if (hx::IsEq( this->b1->space,this->space )) {
HXLINE( 484)			_hx_tmp1 = hx::IsNotEq( this->b2->space,this->space );
            		}
            		else {
HXLINE( 484)			_hx_tmp1 = true;
            		}
HXDLIN( 484)		if (_hx_tmp1) {
HXLINE( 484)			HX_STACK_DO_THROW(((((HX_("Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=",fe,98,58,d3) + this->b1->outer->toString()) + HX_(", body2=",61,88,43,62)) + this->b2->outer->toString()) + HX_(")",29,00,00,00)));
            		}
HXLINE( 485)		bool _hx_tmp2;
HXDLIN( 485)		if ((this->b1->type != (int)2)) {
HXLINE( 485)			_hx_tmp2 = (this->b2->type != (int)2);
            		}
            		else {
HXLINE( 485)			_hx_tmp2 = false;
            		}
HXDLIN( 485)		if (_hx_tmp2) {
HXLINE( 485)			HX_STACK_DO_THROW(((((HX_("Error: Constraints cannot have both bodies non-dynamic (body1=",e1,da,d7,49) + this->b1->outer->toString()) + HX_(", body2=",61,88,43,62)) + this->b2->outer->toString()) + HX_(")",29,00,00,00)));
            		}
            	}


void ZPP_PivotJoint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_487_wake_connected)
            	HX_STACK_THIS(this)
HXLINE( 488)		bool _hx_tmp;
HXDLIN( 488)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 488)			_hx_tmp = (this->b1->type == (int)2);
            		}
            		else {
HXLINE( 488)			_hx_tmp = false;
            		}
HXDLIN( 488)		if (_hx_tmp) {
HXLINE( 488)			this->b1->wake();
            		}
HXLINE( 489)		bool _hx_tmp1;
HXDLIN( 489)		if (hx::IsNotNull( this->b2 )) {
HXLINE( 489)			_hx_tmp1 = (this->b2->type == (int)2);
            		}
            		else {
HXLINE( 489)			_hx_tmp1 = false;
            		}
HXDLIN( 489)		if (_hx_tmp1) {
HXLINE( 489)			this->b2->wake();
            		}
            	}


void ZPP_PivotJoint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_491_forest)
            	HX_STACK_THIS(this)
HXLINE( 492)		if ((this->b1->type == (int)2)) {
HXLINE( 493)			HX_VAR(  ::zpp_nape::space::ZPP_Component,xr);
HXDLIN( 493)			if (hx::IsEq( this->b1->component,this->b1->component->parent )) {
HXLINE( 493)				xr = this->b1->component;
            			}
            			else {
HXLINE( 496)				HX_VARI(  ::zpp_nape::space::ZPP_Component,obj) = this->b1->component;
HXLINE( 497)				HX_VARI(  ::zpp_nape::space::ZPP_Component,stack) = null();
HXLINE( 498)				while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 499)					HX_VARI(  ::zpp_nape::space::ZPP_Component,nxt) = obj->parent;
HXLINE( 500)					obj->parent = stack;
HXLINE( 501)					stack = obj;
HXLINE( 502)					obj = nxt;
            				}
HXLINE( 504)				while(hx::IsNotNull( stack )){
HXLINE( 505)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt1,"nxt") = stack->parent;
HXLINE( 506)					stack->parent = obj;
HXLINE( 507)					stack = nxt1;
            				}
HXLINE( 493)				xr = obj;
            			}
HXLINE( 512)			HX_VAR(  ::zpp_nape::space::ZPP_Component,yr);
HXDLIN( 512)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 512)				yr = this->component;
            			}
            			else {
HXLINE( 515)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj1,"obj") = this->component;
HXLINE( 516)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack1,"stack") = null();
HXLINE( 517)				while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 518)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt2,"nxt") = obj1->parent;
HXLINE( 519)					obj1->parent = stack1;
HXLINE( 520)					stack1 = obj1;
HXLINE( 521)					obj1 = nxt2;
            				}
HXLINE( 523)				while(hx::IsNotNull( stack1 )){
HXLINE( 524)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt3,"nxt") = stack1->parent;
HXLINE( 525)					stack1->parent = obj1;
HXLINE( 526)					stack1 = nxt3;
            				}
HXLINE( 512)				yr = obj1;
            			}
HXLINE( 531)			if (hx::IsNotEq( xr,yr )) {
HXLINE( 532)				if ((xr->rank < yr->rank)) {
HXLINE( 532)					xr->parent = yr;
            				}
            				else {
HXLINE( 533)					if ((xr->rank > yr->rank)) {
HXLINE( 533)						yr->parent = xr;
            					}
            					else {
HXLINE( 535)						yr->parent = xr;
HXLINE( 536)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE( 540)		if ((this->b2->type == (int)2)) {
HXLINE( 541)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,xr1,"xr");
HXDLIN( 541)			if (hx::IsEq( this->b2->component,this->b2->component->parent )) {
HXLINE( 541)				xr1 = this->b2->component;
            			}
            			else {
HXLINE( 544)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj2,"obj") = this->b2->component;
HXLINE( 545)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack2,"stack") = null();
HXLINE( 546)				while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE( 547)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt4,"nxt") = obj2->parent;
HXLINE( 548)					obj2->parent = stack2;
HXLINE( 549)					stack2 = obj2;
HXLINE( 550)					obj2 = nxt4;
            				}
HXLINE( 552)				while(hx::IsNotNull( stack2 )){
HXLINE( 553)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt5,"nxt") = stack2->parent;
HXLINE( 554)					stack2->parent = obj2;
HXLINE( 555)					stack2 = nxt5;
            				}
HXLINE( 541)				xr1 = obj2;
            			}
HXLINE( 560)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,yr1,"yr");
HXDLIN( 560)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 560)				yr1 = this->component;
            			}
            			else {
HXLINE( 563)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj3,"obj") = this->component;
HXLINE( 564)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack3,"stack") = null();
HXLINE( 565)				while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE( 566)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt6,"nxt") = obj3->parent;
HXLINE( 567)					obj3->parent = stack3;
HXLINE( 568)					stack3 = obj3;
HXLINE( 569)					obj3 = nxt6;
            				}
HXLINE( 571)				while(hx::IsNotNull( stack3 )){
HXLINE( 572)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt7,"nxt") = stack3->parent;
HXLINE( 573)					stack3->parent = obj3;
HXLINE( 574)					stack3 = nxt7;
            				}
HXLINE( 560)				yr1 = obj3;
            			}
HXLINE( 579)			if (hx::IsNotEq( xr1,yr1 )) {
HXLINE( 580)				if ((xr1->rank < yr1->rank)) {
HXLINE( 580)					xr1->parent = yr1;
            				}
            				else {
HXLINE( 581)					if ((xr1->rank > yr1->rank)) {
HXLINE( 581)						yr1->parent = xr1;
            					}
            					else {
HXLINE( 583)						yr1->parent = xr1;
HXLINE( 584)						xr1->rank++;
            					}
            				}
            			}
            		}
            	}


bool ZPP_PivotJoint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_590_pair_exists)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE( 590)		bool _hx_tmp;
HXDLIN( 590)		if ((this->b1->id == id)) {
HXLINE( 590)			_hx_tmp = (this->b2->id == di);
            		}
            		else {
HXLINE( 590)			_hx_tmp = false;
            		}
HXDLIN( 590)		if (!(_hx_tmp)) {
HXLINE( 590)			if ((this->b1->id == di)) {
HXLINE( 590)				return (this->b2->id == id);
            			}
            			else {
HXLINE( 590)				return false;
            			}
            		}
            		else {
HXLINE( 590)			return true;
            		}
HXDLIN( 590)		return false;
            	}


void ZPP_PivotJoint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_592_clearcache)
            	HX_STACK_THIS(this)
HXLINE( 593)		{
HXLINE( 594)			this->jAccx = (int)0;
HXLINE( 595)			this->jAccy = (int)0;
            		}
HXLINE( 613)		this->pre_dt = ((Float)-1.0);
            	}


bool ZPP_PivotJoint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_615_preStep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dt,"dt")
HXLINE( 616)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 616)			this->pre_dt = dt;
            		}
HXLINE( 617)		HX_VARI( Float,dtratio) = ((Float)dt / (Float)this->pre_dt);
HXLINE( 618)		this->pre_dt = dt;
HXLINE( 619)		this->stepped = true;
HXLINE( 620)		{
HXLINE( 621)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 622)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 624)		{
HXLINE( 625)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 626)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 628)		{
HXLINE( 629)			HX_VARI( Float,m) = (this->b1->smass + this->b2->smass);
HXLINE( 630)			{
HXLINE( 631)				this->kMassa = m;
HXLINE( 632)				this->kMassb = (int)0;
HXLINE( 633)				this->kMassc = m;
            			}
HXLINE( 635)			if ((this->b1->sinertia != (int)0)) {
HXLINE( 637)				HX_VARI( Float,Y) = (this->a1rely * this->b1->sinertia);
HXLINE( 638)				{
HXLINE( 639)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 639)					_hx_tmp->kMassa = (_hx_tmp->kMassa + (Y * this->a1rely));
HXLINE( 640)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 640)					_hx_tmp1->kMassb = (_hx_tmp1->kMassb + (-(Y) * this->a1relx));
HXLINE( 641)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 641)					_hx_tmp2->kMassc = (_hx_tmp2->kMassc + ((this->a1relx * this->b1->sinertia) * this->a1relx));
            				}
            			}
HXLINE( 644)			if ((this->b2->sinertia != (int)0)) {
HXLINE( 646)				HX_VARI_NAME( Float,Y1,"Y") = (this->a2rely * this->b2->sinertia);
HXLINE( 647)				{
HXLINE( 648)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 648)					_hx_tmp3->kMassa = (_hx_tmp3->kMassa + (Y1 * this->a2rely));
HXLINE( 649)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 649)					_hx_tmp4->kMassb = (_hx_tmp4->kMassb + (-(Y1) * this->a2relx));
HXLINE( 650)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 650)					_hx_tmp5->kMassc = (_hx_tmp5->kMassc + ((this->a2relx * this->b2->sinertia) * this->a2relx));
            				}
            			}
            		}
HXLINE( 655)		HX_VARI( Float,det) = ((this->kMassa * this->kMassc) - (this->kMassb * this->kMassb));
HXLINE( 654)		HX_VAR( int,flag);
HXLINE( 656)		if ((det != det)) {
HXLINE( 657)			this->kMassa = (this->kMassb = (this->kMassc = (int)0));
HXLINE( 654)			flag = (int)3;
            		}
            		else {
HXLINE( 660)			if ((det == (int)0)) {
HXLINE( 661)				HX_VARI_NAME( int,flag1,"flag") = (int)0;
HXLINE( 662)				if ((this->kMassa != (int)0)) {
HXLINE( 662)					this->kMassa = ((Float)(int)1 / (Float)this->kMassa);
            				}
            				else {
HXLINE( 664)					this->kMassa = (int)0;
HXLINE( 665)					flag1 = (int)1;
            				}
HXLINE( 667)				if ((this->kMassc != (int)0)) {
HXLINE( 667)					this->kMassc = ((Float)(int)1 / (Float)this->kMassc);
            				}
            				else {
HXLINE( 669)					this->kMassc = (int)0;
HXLINE( 670)					flag1 = ((int)flag1 | (int)(int)2);
            				}
HXLINE( 672)				this->kMassb = (int)0;
HXLINE( 654)				flag = flag1;
            			}
            			else {
HXLINE( 676)				det = ((Float)(int)1 / (Float)det);
HXLINE( 677)				HX_VARI( Float,t) = (this->kMassc * det);
HXLINE( 678)				this->kMassc = (this->kMassa * det);
HXLINE( 679)				this->kMassa = t;
HXLINE( 680)				 ::zpp_nape::constraint::ZPP_PivotJoint flag2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 680)				flag2->kMassb = (flag2->kMassb * -(det));
HXLINE( 654)				flag = (int)0;
            			}
            		}
HXLINE( 684)		if ((((int)flag & (int)(int)1) != (int)0)) {
HXLINE( 684)			this->jAccx = (int)0;
            		}
HXLINE( 685)		if ((((int)flag & (int)(int)2) != (int)0)) {
HXLINE( 685)			this->jAccy = (int)0;
            		}
HXLINE( 686)		if (!(this->stiff)) {
HXLINE( 687)			HX_VAR( Float,biasCoef);
HXLINE( 688)			{
HXLINE( 690)				HX_VARI( Float,omega) = (((int)2 * ::Math_obj::PI) * this->frequency);
HXLINE( 691)				this->gamma = ((Float)(int)1 / (Float)((dt * omega) * (((int)2 * this->damping) + (omega * dt))));
HXLINE( 692)				HX_VARI( Float,ig) = ((Float)(int)1 / (Float)((int)1 + this->gamma));
HXLINE( 693)				biasCoef = (((dt * omega) * omega) * this->gamma);
HXLINE( 694)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 694)				_hx_tmp6->gamma = (_hx_tmp6->gamma * ig);
HXLINE( 697)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 697)				_hx_tmp7->kMassa = (_hx_tmp7->kMassa * ig);
HXLINE( 698)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 698)				_hx_tmp8->kMassb = (_hx_tmp8->kMassb * ig);
HXLINE( 699)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 699)				_hx_tmp9->kMassc = (_hx_tmp9->kMassc * ig);
            			}
HXLINE( 701)			{
HXLINE( 702)				this->biasx = ((this->b2->posx + this->a2relx) - (this->b1->posx + this->a1relx));
HXLINE( 703)				this->biasy = ((this->b2->posy + this->a2rely) - (this->b1->posy + this->a1rely));
            			}
HXLINE( 705)			bool _hx_tmp10;
HXDLIN( 705)			if (this->breakUnderError) {
HXLINE( 705)				_hx_tmp10 = (((this->biasx * this->biasx) + (this->biasy * this->biasy)) > (this->maxError * this->maxError));
            			}
            			else {
HXLINE( 705)				_hx_tmp10 = false;
            			}
HXDLIN( 705)			if (_hx_tmp10) {
HXLINE( 705)				return true;
            			}
HXLINE( 706)			{
HXLINE( 707)				HX_VARI_NAME( Float,t1,"t") = -(biasCoef);
HXLINE( 716)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 716)				_hx_tmp11->biasx = (_hx_tmp11->biasx * t1);
HXLINE( 717)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 717)				_hx_tmp12->biasy = (_hx_tmp12->biasy * t1);
            			}
HXLINE( 719)			{
HXLINE( 720)				HX_VARI_NAME( Float,t2,"t") = this->maxError;
HXLINE( 729)				HX_VARI( Float,ls) = ((this->biasx * this->biasx) + (this->biasy * this->biasy));
HXLINE( 730)				if ((ls > (t2 * t2))) {
HXLINE( 740)					HX_VARI_NAME( Float,t3,"t") = (t2 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls)));
HXLINE( 749)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 749)					_hx_tmp13->biasx = (_hx_tmp13->biasx * t3);
HXLINE( 750)					 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 750)					_hx_tmp14->biasy = (_hx_tmp14->biasy * t3);
            				}
            			}
            		}
            		else {
HXLINE( 756)			{
HXLINE( 757)				this->biasx = (int)0;
HXLINE( 758)				this->biasy = (int)0;
            			}
HXLINE( 776)			this->gamma = (int)0;
            		}
HXLINE( 778)		{
HXLINE( 788)			 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp15 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 788)			_hx_tmp15->jAccx = (_hx_tmp15->jAccx * dtratio);
HXLINE( 789)			 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp16 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 789)			_hx_tmp16->jAccy = (_hx_tmp16->jAccy * dtratio);
            		}
HXLINE( 791)		this->jMax = (this->maxForce * dt);
HXLINE( 792)		return false;
            	}


void ZPP_PivotJoint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_826_warmStart)
            	HX_STACK_THIS(this)
HXLINE( 827)		{
HXLINE( 828)			HX_VARI( Float,t) = this->b1->imass;
HXLINE( 837)			 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN( 837)			_hx_tmp->velx = (_hx_tmp->velx - (this->jAccx * t));
HXLINE( 838)			 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN( 838)			_hx_tmp1->vely = (_hx_tmp1->vely - (this->jAccy * t));
            		}
HXLINE( 840)		{
HXLINE( 841)			HX_VARI_NAME( Float,t1,"t") = this->b2->imass;
HXLINE( 850)			 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b2;
HXDLIN( 850)			_hx_tmp2->velx = (_hx_tmp2->velx + (this->jAccx * t1));
HXLINE( 851)			 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN( 851)			_hx_tmp3->vely = (_hx_tmp3->vely + (this->jAccy * t1));
            		}
HXLINE( 853)		 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN( 853)		_hx_tmp4->angvel = (_hx_tmp4->angvel - (((this->jAccy * this->a1relx) - (this->jAccx * this->a1rely)) * this->b1->iinertia));
HXLINE( 854)		 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN( 854)		_hx_tmp5->angvel = (_hx_tmp5->angvel + (((this->jAccy * this->a2relx) - (this->jAccx * this->a2rely)) * this->b2->iinertia));
            	}


bool ZPP_PivotJoint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_858_applyImpulseVel)
            	HX_STACK_THIS(this)
HXLINE( 859)		HX_VARI( Float,Ex) = ((Float)0.0);
HXLINE( 860)		HX_VARI( Float,Ey) = ((Float)0.0);
HXLINE( 861)		{
HXLINE( 862)			Ex = (((this->b2->velx + this->b2->kinvelx) - (this->a2rely * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->velx + this->b1->kinvelx) - (this->a1rely * (this->b1->angvel + this->b1->kinangvel))));
HXLINE( 863)			Ey = (((this->b2->vely + this->b2->kinvely) + (this->a2relx * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->vely + this->b1->kinvely) + (this->a1relx * (this->b1->angvel + this->b1->kinangvel))));
            		}
HXLINE( 865)		HX_VARI( Float,Jx) = ((Float)0.0);
HXLINE( 866)		HX_VARI( Float,Jy) = ((Float)0.0);
HXLINE( 867)		{
HXLINE( 868)			Jx = (this->biasx - Ex);
HXLINE( 869)			Jy = (this->biasy - Ey);
            		}
HXLINE( 871)		{
HXLINE( 872)			HX_VARI( Float,t) = ((this->kMassa * Jx) + (this->kMassb * Jy));
HXLINE( 873)			Jy = ((this->kMassb * Jx) + (this->kMassc * Jy));
HXLINE( 874)			Jx = t;
            		}
HXLINE( 876)		{
HXLINE( 877)			HX_VARI_NAME( Float,t1,"t") = this->gamma;
HXLINE( 886)			Jx = (Jx - (this->jAccx * t1));
HXLINE( 887)			Jy = (Jy - (this->jAccy * t1));
            		}
HXLINE( 889)		{
HXLINE( 890)			HX_VARI( Float,jOldx) = ((Float)0.0);
HXLINE( 891)			HX_VARI( Float,jOldy) = ((Float)0.0);
HXLINE( 892)			{
HXLINE( 893)				jOldx = this->jAccx;
HXLINE( 894)				jOldy = this->jAccy;
            			}
HXLINE( 912)			{
HXLINE( 922)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 922)				_hx_tmp->jAccx = (_hx_tmp->jAccx + Jx);
HXLINE( 923)				 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 923)				_hx_tmp1->jAccy = (_hx_tmp1->jAccy + Jy);
            			}
HXLINE( 926)			if (this->breakUnderForce) {
HXLINE( 927)				if ((((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy)) > (this->jMax * this->jMax))) {
HXLINE( 927)					return true;
            				}
            			}
            			else {
HXLINE( 929)				if (!(this->stiff)) {
HXLINE( 930)					HX_VARI_NAME( Float,t2,"t") = this->jMax;
HXLINE( 939)					HX_VARI( Float,ls) = ((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy));
HXLINE( 940)					if ((ls > (t2 * t2))) {
HXLINE( 950)						HX_VARI_NAME( Float,t3,"t") = (t2 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls)));
HXLINE( 959)						 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 959)						_hx_tmp2->jAccx = (_hx_tmp2->jAccx * t3);
HXLINE( 960)						 ::zpp_nape::constraint::ZPP_PivotJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 960)						_hx_tmp3->jAccy = (_hx_tmp3->jAccy * t3);
            					}
            				}
            			}
HXLINE( 965)			{
HXLINE( 966)				Jx = (this->jAccx - jOldx);
HXLINE( 967)				Jy = (this->jAccy - jOldy);
            			}
            		}
HXLINE(1001)		{
HXLINE(1002)			{
HXLINE(1003)				HX_VARI_NAME( Float,t4,"t") = this->b1->imass;
HXLINE(1012)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN(1012)				_hx_tmp4->velx = (_hx_tmp4->velx - (Jx * t4));
HXLINE(1013)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(1013)				_hx_tmp5->vely = (_hx_tmp5->vely - (Jy * t4));
            			}
HXLINE(1015)			{
HXLINE(1016)				HX_VARI_NAME( Float,t5,"t") = this->b2->imass;
HXLINE(1025)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b2;
HXDLIN(1025)				_hx_tmp6->velx = (_hx_tmp6->velx + (Jx * t5));
HXLINE(1026)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1026)				_hx_tmp7->vely = (_hx_tmp7->vely + (Jy * t5));
            			}
HXLINE(1028)			 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(1028)			_hx_tmp8->angvel = (_hx_tmp8->angvel - (((Jy * this->a1relx) - (Jx * this->a1rely)) * this->b1->iinertia));
HXLINE(1029)			 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b2;
HXDLIN(1029)			_hx_tmp9->angvel = (_hx_tmp9->angvel + (((Jy * this->a2relx) - (Jx * this->a2rely)) * this->b2->iinertia));
            		}
HXLINE(1032)		return false;
            	}


bool ZPP_PivotJoint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_1034_applyImpulsePos)
            	HX_STACK_THIS(this)
HXLINE(1035)		HX_VARI( Float,r1x) = ((Float)0.0);
HXLINE(1036)		HX_VARI( Float,r1y) = ((Float)0.0);
HXLINE(1038)		{
HXLINE(1039)			r1x = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE(1040)			r1y = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE(1043)		HX_VARI( Float,r2x) = ((Float)0.0);
HXLINE(1044)		HX_VARI( Float,r2y) = ((Float)0.0);
HXLINE(1046)		{
HXLINE(1047)			r2x = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE(1048)			r2y = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE(1051)		HX_VARI( Float,Ex) = ((Float)0.0);
HXLINE(1052)		HX_VARI( Float,Ey) = ((Float)0.0);
HXLINE(1053)		{
HXLINE(1054)			Ex = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1055)			Ey = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
            		}
HXLINE(1057)		bool _hx_tmp;
HXDLIN(1057)		if (this->breakUnderError) {
HXLINE(1057)			_hx_tmp = (((Ex * Ex) + (Ey * Ey)) > (this->maxError * this->maxError));
            		}
            		else {
HXLINE(1057)			_hx_tmp = false;
            		}
HXDLIN(1057)		if (_hx_tmp) {
HXLINE(1057)			return true;
            		}
HXLINE(1058)		if ((((Ex * Ex) + (Ey * Ey)) < (::nape::Config_obj::constraintLinearSlop * ::nape::Config_obj::constraintLinearSlop))) {
HXLINE(1058)			return false;
            		}
HXLINE(1059)		{
HXLINE(1069)			Ex = (Ex * ((Float)0.5));
HXLINE(1070)			Ey = (Ey * ((Float)0.5));
            		}
HXLINE(1072)		HX_VARI( Float,Jx) = ((Float)0.0);
HXLINE(1073)		HX_VARI( Float,Jy) = ((Float)0.0);
HXLINE(1074)		if ((((Ex * Ex) + (Ey * Ey)) > (int)6)) {
HXLINE(1075)			HX_VARI( Float,k) = (this->b1->smass + this->b2->smass);
HXLINE(1076)			if ((k > ::nape::Config_obj::epsilon)) {
HXLINE(1077)				k = ((Float)((Float)0.75) / (Float)k);
HXLINE(1078)				{
HXLINE(1079)					Jx = (-(Ex) * k);
HXLINE(1080)					Jy = (-(Ey) * k);
            				}
HXLINE(1098)				{
HXLINE(1108)					HX_VARI( Float,ls) = ((Jx * Jx) + (Jy * Jy));
HXLINE(1109)					if ((ls > (int)400)) {
HXLINE(1119)						HX_VARI( Float,t) = ((int)20 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls)));
HXLINE(1128)						Jx = (Jx * t);
HXLINE(1129)						Jy = (Jy * t);
            					}
            				}
HXLINE(1133)				{
HXLINE(1134)					HX_VARI_NAME( Float,t1,"t") = this->b1->imass;
HXLINE(1143)					 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(1143)					_hx_tmp1->posx = (_hx_tmp1->posx - (Jx * t1));
HXLINE(1144)					 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(1144)					_hx_tmp2->posy = (_hx_tmp2->posy - (Jy * t1));
            				}
HXLINE(1146)				{
HXLINE(1147)					HX_VARI_NAME( Float,t2,"t") = this->b2->imass;
HXLINE(1156)					 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(1156)					_hx_tmp3->posx = (_hx_tmp3->posx + (Jx * t2));
HXLINE(1157)					 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(1157)					_hx_tmp4->posy = (_hx_tmp4->posy + (Jy * t2));
            				}
HXLINE(1159)				{
HXLINE(1160)					Ex = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1161)					Ey = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
            				}
HXLINE(1163)				{
HXLINE(1173)					Ex = (Ex * ((Float)0.5));
HXLINE(1174)					Ey = (Ey * ((Float)0.5));
            				}
            			}
            		}
HXLINE(1178)		HX_VARI( Float,Ka) = ((Float)0.0);
HXLINE(1179)		HX_VARI( Float,Kb) = ((Float)0.0);
HXLINE(1180)		HX_VARI( Float,Kc) = ((Float)0.0);
HXLINE(1181)		{
HXLINE(1182)			HX_VARI( Float,m) = (this->b1->smass + this->b2->smass);
HXLINE(1183)			{
HXLINE(1184)				Ka = m;
HXLINE(1185)				Kb = (int)0;
HXLINE(1186)				Kc = m;
            			}
HXLINE(1188)			if ((this->b1->sinertia != (int)0)) {
HXLINE(1190)				HX_VARI( Float,Y) = (r1y * this->b1->sinertia);
HXLINE(1191)				{
HXLINE(1192)					Ka = (m + (Y * r1y));
HXLINE(1193)					Kb = (Kb + (-(Y) * r1x));
HXLINE(1194)					Kc = (m + ((r1x * this->b1->sinertia) * r1x));
            				}
            			}
HXLINE(1197)			if ((this->b2->sinertia != (int)0)) {
HXLINE(1199)				HX_VARI_NAME( Float,Y1,"Y") = (r2y * this->b2->sinertia);
HXLINE(1200)				{
HXLINE(1201)					Ka = (Ka + (Y1 * r2y));
HXLINE(1202)					Kb = (Kb + (-(Y1) * r2x));
HXLINE(1203)					Kc = (Kc + ((r2x * this->b2->sinertia) * r2x));
            				}
            			}
            		}
HXLINE(1207)		{
HXLINE(1208)			Jx = -(Ex);
HXLINE(1209)			Jy = -(Ey);
            		}
HXLINE(1227)		{
HXLINE(1237)			HX_VARI_NAME( Float,ls1,"ls") = ((Jx * Jx) + (Jy * Jy));
HXLINE(1238)			if ((ls1 > (int)36)) {
HXLINE(1248)				HX_VARI_NAME( Float,t3,"t") = ((int)6 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls1)));
HXLINE(1257)				Jx = (Jx * t3);
HXLINE(1258)				Jy = (Jy * t3);
            			}
            		}
HXLINE(1262)		{
HXLINE(1263)			HX_VARI( Float,det) = ((Ka * Kc) - (Kb * Kb));
HXLINE(1264)			if ((det != det)) {
HXLINE(1264)				Jy = (int)0;
HXDLIN(1264)				Jx = Jy;
            			}
            			else {
HXLINE(1265)				if ((det == (int)0)) {
HXLINE(1266)					if ((Ka != (int)0)) {
HXLINE(1266)						Jx = ((Float)Jx / (Float)Ka);
            					}
            					else {
HXLINE(1267)						Jx = (int)0;
            					}
HXLINE(1268)					if ((Kc != (int)0)) {
HXLINE(1268)						Jy = ((Float)Jy / (Float)Kc);
            					}
            					else {
HXLINE(1269)						Jy = (int)0;
            					}
            				}
            				else {
HXLINE(1272)					det = ((Float)(int)1 / (Float)det);
HXLINE(1273)					HX_VARI_NAME( Float,t4,"t") = (det * ((Kc * Jx) - (Kb * Jy)));
HXLINE(1274)					Jy = (det * ((Ka * Jy) - (Kb * Jx)));
HXLINE(1275)					Jx = t4;
            				}
            			}
            		}
HXLINE(1279)		{
HXLINE(1280)			{
HXLINE(1281)				HX_VARI_NAME( Float,t5,"t") = this->b1->imass;
HXLINE(1290)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(1290)				_hx_tmp5->posx = (_hx_tmp5->posx - (Jx * t5));
HXLINE(1291)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(1291)				_hx_tmp6->posy = (_hx_tmp6->posy - (Jy * t5));
            			}
HXLINE(1293)			{
HXLINE(1294)				HX_VARI_NAME( Float,t6,"t") = this->b2->imass;
HXLINE(1303)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1303)				_hx_tmp7->posx = (_hx_tmp7->posx + (Jx * t6));
HXLINE(1304)				 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b2;
HXDLIN(1304)				_hx_tmp8->posy = (_hx_tmp8->posy + (Jy * t6));
            			}
HXLINE(1306)			{
HXLINE(1306)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->b1;
HXDLIN(1306)				HX_VARI( Float,dr) = (-(((Jy * r1x) - (Jx * r1y))) * this->b1->iinertia);
HXDLIN(1306)				_this->rot = (_this->rot + dr);
HXDLIN(1306)				if (((dr * dr) > ((Float)0.0001))) {
HXLINE(1306)					_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1306)					_this->axisy = ::Math_obj::cos(_this->rot);
            				}
            				else {
HXLINE(1306)					HX_VARI( Float,d2) = (dr * dr);
HXDLIN(1306)					HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN(1306)					HX_VARI_NAME( Float,m1,"m") = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN(1306)					HX_VARI( Float,nx) = (((p * _this->axisx) + (dr * _this->axisy)) * m1);
HXDLIN(1306)					_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m1);
HXDLIN(1306)					_this->axisx = nx;
            				}
            			}
HXLINE(1307)			{
HXLINE(1307)				HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this1,"_this") = this->b2;
HXDLIN(1307)				HX_VARI_NAME( Float,dr1,"dr") = (((Jy * r2x) - (Jx * r2y)) * this->b2->iinertia);
HXDLIN(1307)				_this1->rot = (_this1->rot + dr1);
HXDLIN(1307)				if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(1307)					_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN(1307)					_this1->axisy = ::Math_obj::cos(_this1->rot);
            				}
            				else {
HXLINE(1307)					HX_VARI_NAME( Float,d21,"d2") = (dr1 * dr1);
HXDLIN(1307)					HX_VARI_NAME( Float,p1,"p") = ((int)1 - (((Float)0.5) * d21));
HXDLIN(1307)					HX_VARI_NAME( Float,m2,"m") = ((int)1 - ((Float)(d21 * d21) / (Float)(int)8));
HXDLIN(1307)					HX_VARI_NAME( Float,nx1,"nx") = (((p1 * _this1->axisx) + (dr1 * _this1->axisy)) * m2);
HXDLIN(1307)					_this1->axisy = (((p1 * _this1->axisy) - (dr1 * _this1->axisx)) * m2);
HXDLIN(1307)					_this1->axisx = nx1;
            				}
            			}
            		}
HXLINE(1340)		return false;
            	}


void ZPP_PivotJoint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_e49efd2d085e96b5_1342_draw)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
HXLINE(1343)		HX_VARI(  ::nape::constraint::PivotJoint,me) = this->outer_zn;
HXLINE(1344)		HX_VAR(  ::nape::phys::Body,a1);
HXDLIN(1344)		if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1344)			a1 = null();
            		}
            		else {
HXLINE(1344)			a1 = me->zpp_inner_zn->b1->outer;
            		}
HXDLIN(1344)		if (hx::IsNull( me->zpp_inner_zn->wrap_a1 )) {
HXLINE(1344)			me->zpp_inner_zn->setup_a1();
            		}
HXDLIN(1344)		HX_VARI_NAME(  ::nape::geom::Vec2,a11,"a1") = a1->localPointToWorld(me->zpp_inner_zn->wrap_a1,null());
HXLINE(1345)		HX_VAR(  ::nape::phys::Body,a2);
HXDLIN(1345)		if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1345)			a2 = null();
            		}
            		else {
HXLINE(1345)			a2 = me->zpp_inner_zn->b2->outer;
            		}
HXDLIN(1345)		if (hx::IsNull( me->zpp_inner_zn->wrap_a2 )) {
HXLINE(1345)			me->zpp_inner_zn->setup_a2();
            		}
HXDLIN(1345)		HX_VARI_NAME(  ::nape::geom::Vec2,a21,"a2") = a2->localPointToWorld(me->zpp_inner_zn->wrap_a2,null());
HXLINE(1346)		if (!(this->stiff)) {
HXLINE(1347)			HX_VARI(  ::nape::geom::Vec2,n) = a21->sub(a11,null());
HXLINE(1348)			{
HXLINE(1348)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = n->zpp_inner;
HXDLIN(1348)				if (hx::IsNotNull( _this->_validate )) {
HXLINE(1348)					_this->_validate();
            				}
            			}
HXDLIN(1348)			HX_VARI( Float,nl) = n->zpp_inner->x;
HXDLIN(1348)			{
HXLINE(1348)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = n->zpp_inner;
HXDLIN(1348)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1348)					_this1->_validate();
            				}
            			}
HXDLIN(1348)			HX_VARI_NAME( Float,nl1,"nl") = (nl * n->zpp_inner->x);
HXDLIN(1348)			{
HXLINE(1348)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = n->zpp_inner;
HXDLIN(1348)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1348)					_this2->_validate();
            				}
            			}
HXDLIN(1348)			HX_VARI_NAME( Float,nl2,"nl") = n->zpp_inner->y;
HXDLIN(1348)			{
HXLINE(1348)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = n->zpp_inner;
HXDLIN(1348)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1348)					_this3->_validate();
            				}
            			}
HXLINE(1349)			if ((::Math_obj::sqrt((nl1 + (nl2 * n->zpp_inner->y))) != (int)0)) {
HXLINE(1349)				g->drawSpring(a11,a21,(int)16711935,null(),null());
            			}
HXLINE(1350)			{
HXLINE(1350)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = n->zpp_inner;
HXDLIN(1350)				n->zpp_inner->outer = null();
HXDLIN(1350)				n->zpp_inner = null();
HXDLIN(1350)				{
HXLINE(1350)					n->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1350)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = n;
            				}
HXDLIN(1350)				{
HXLINE(1350)					{
HXLINE(1350)						if (hx::IsNotNull( inner->outer )) {
HXLINE(1350)							inner->outer->zpp_inner = null();
HXDLIN(1350)							inner->outer = null();
            						}
HXDLIN(1350)						inner->_isimmutable = null();
HXDLIN(1350)						inner->_validate = null();
HXDLIN(1350)						inner->_invalidate = null();
            					}
HXDLIN(1350)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1350)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE(1352)		g->drawFilledCircle(a11,(int)2,(int)255);
HXLINE(1353)		g->drawFilledCircle(a21,(int)2,(int)16711680);
HXLINE(1354)		{
HXLINE(1354)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = a11->zpp_inner;
HXDLIN(1354)			a11->zpp_inner->outer = null();
HXDLIN(1354)			a11->zpp_inner = null();
HXDLIN(1354)			{
HXLINE(1354)				a11->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1354)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a11;
            			}
HXDLIN(1354)			{
HXLINE(1354)				{
HXLINE(1354)					if (hx::IsNotNull( inner1->outer )) {
HXLINE(1354)						inner1->outer->zpp_inner = null();
HXDLIN(1354)						inner1->outer = null();
            					}
HXDLIN(1354)					inner1->_isimmutable = null();
HXDLIN(1354)					inner1->_validate = null();
HXDLIN(1354)					inner1->_invalidate = null();
            				}
HXDLIN(1354)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1354)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE(1355)		{
HXLINE(1355)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = a21->zpp_inner;
HXDLIN(1355)			a21->zpp_inner->outer = null();
HXDLIN(1355)			a21->zpp_inner = null();
HXDLIN(1355)			{
HXLINE(1355)				a21->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1355)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a21;
            			}
HXDLIN(1355)			{
HXLINE(1355)				{
HXLINE(1355)					if (hx::IsNotNull( inner2->outer )) {
HXLINE(1355)						inner2->outer->zpp_inner = null();
HXDLIN(1355)						inner2->outer = null();
            					}
HXDLIN(1355)					inner2->_isimmutable = null();
HXDLIN(1355)					inner2->_validate = null();
HXDLIN(1355)					inner2->_invalidate = null();
            				}
HXDLIN(1355)				inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1355)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            			}
            		}
            	}



hx::ObjectPtr< ZPP_PivotJoint_obj > ZPP_PivotJoint_obj::__new() {
	hx::ObjectPtr< ZPP_PivotJoint_obj > __this = new ZPP_PivotJoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_PivotJoint_obj > ZPP_PivotJoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_PivotJoint_obj *__this = (ZPP_PivotJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_PivotJoint_obj), true, "zpp_nape.constraint.ZPP_PivotJoint"));
	*(void **)__this = ZPP_PivotJoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_PivotJoint_obj::ZPP_PivotJoint_obj()
{
}

void ZPP_PivotJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_PivotJoint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(a1localx,"a1localx");
	HX_MARK_MEMBER_NAME(a1localy,"a1localy");
	HX_MARK_MEMBER_NAME(a1relx,"a1relx");
	HX_MARK_MEMBER_NAME(a1rely,"a1rely");
	HX_MARK_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(a2localx,"a2localx");
	HX_MARK_MEMBER_NAME(a2localy,"a2localy");
	HX_MARK_MEMBER_NAME(a2relx,"a2relx");
	HX_MARK_MEMBER_NAME(a2rely,"a2rely");
	HX_MARK_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_MARK_MEMBER_NAME(kMassa,"kMassa");
	HX_MARK_MEMBER_NAME(kMassb,"kMassb");
	HX_MARK_MEMBER_NAME(kMassc,"kMassc");
	HX_MARK_MEMBER_NAME(jAccx,"jAccx");
	HX_MARK_MEMBER_NAME(jAccy,"jAccy");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(gamma,"gamma");
	HX_MARK_MEMBER_NAME(biasx,"biasx");
	HX_MARK_MEMBER_NAME(biasy,"biasy");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_PivotJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(a1localx,"a1localx");
	HX_VISIT_MEMBER_NAME(a1localy,"a1localy");
	HX_VISIT_MEMBER_NAME(a1relx,"a1relx");
	HX_VISIT_MEMBER_NAME(a1rely,"a1rely");
	HX_VISIT_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(a2localx,"a2localx");
	HX_VISIT_MEMBER_NAME(a2localy,"a2localy");
	HX_VISIT_MEMBER_NAME(a2relx,"a2relx");
	HX_VISIT_MEMBER_NAME(a2rely,"a2rely");
	HX_VISIT_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_VISIT_MEMBER_NAME(kMassa,"kMassa");
	HX_VISIT_MEMBER_NAME(kMassb,"kMassb");
	HX_VISIT_MEMBER_NAME(kMassc,"kMassc");
	HX_VISIT_MEMBER_NAME(jAccx,"jAccx");
	HX_VISIT_MEMBER_NAME(jAccy,"jAccy");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(gamma,"gamma");
	HX_VISIT_MEMBER_NAME(biasx,"biasx");
	HX_VISIT_MEMBER_NAME(biasy,"biasy");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_PivotJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"jAccx") ) { return hx::Val( jAccx); }
		if (HX_FIELD_EQ(inName,"jAccy") ) { return hx::Val( jAccy); }
		if (HX_FIELD_EQ(inName,"gamma") ) { return hx::Val( gamma); }
		if (HX_FIELD_EQ(inName,"biasx") ) { return hx::Val( biasx); }
		if (HX_FIELD_EQ(inName,"biasy") ) { return hx::Val( biasy); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { return hx::Val( a1relx); }
		if (HX_FIELD_EQ(inName,"a1rely") ) { return hx::Val( a1rely); }
		if (HX_FIELD_EQ(inName,"a2relx") ) { return hx::Val( a2relx); }
		if (HX_FIELD_EQ(inName,"a2rely") ) { return hx::Val( a2rely); }
		if (HX_FIELD_EQ(inName,"kMassa") ) { return hx::Val( kMassa); }
		if (HX_FIELD_EQ(inName,"kMassb") ) { return hx::Val( kMassb); }
		if (HX_FIELD_EQ(inName,"kMassc") ) { return hx::Val( kMassc); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { return hx::Val( wrap_a1); }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { return hx::Val( wrap_a2); }
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn); }
		if (HX_FIELD_EQ(inName,"a1localx") ) { return hx::Val( a1localx); }
		if (HX_FIELD_EQ(inName,"a1localy") ) { return hx::Val( a1localy); }
		if (HX_FIELD_EQ(inName,"setup_a1") ) { return hx::Val( setup_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"a2localx") ) { return hx::Val( a2localx); }
		if (HX_FIELD_EQ(inName,"a2localy") ) { return hx::Val( a2localy); }
		if (HX_FIELD_EQ(inName,"setup_a2") ) { return hx::Val( setup_a2_dyn()); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a1") ) { return hx::Val( validate_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a2") ) { return hx::Val( validate_a2_dyn()); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"invalidate_a1") ) { return hx::Val( invalidate_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_a2") ) { return hx::Val( invalidate_a2_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn()); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_PivotJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"jAccx") ) { jAccx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAccy") ) { jAccy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamma") ) { gamma=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasx") ) { biasx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasy") ) { biasy=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { a1relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1rely") ) { a1rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2relx") ) { a2relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2rely") ) { a2rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassa") ) { kMassa=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassb") ) { kMassb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassc") ) { kMassc=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { wrap_a1=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { wrap_a2=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::PivotJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localx") ) { a1localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localy") ) { a1localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localx") ) { a2localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localy") ) { a2localy=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_PivotJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"));
	outFields->push(HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb"));
	outFields->push(HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb"));
	outFields->push(HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a"));
	outFields->push(HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a"));
	outFields->push(HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("b2","\x90","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25"));
	outFields->push(HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25"));
	outFields->push(HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde"));
	outFields->push(HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde"));
	outFields->push(HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("kMassa","\x82","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("kMassb","\x83","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("kMassc","\x84","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("jAccx","\xa1","\xd1","\xbb","\x33"));
	outFields->push(HX_HCSTRING("jAccy","\xa2","\xd1","\xbb","\x33"));
	outFields->push(HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"));
	outFields->push(HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"));
	outFields->push(HX_HCSTRING("biasx","\xdf","\x3f","\xf6","\xb2"));
	outFields->push(HX_HCSTRING("biasy","\xe0","\x3f","\xf6","\xb2"));
	outFields->push(HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_PivotJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::constraint::PivotJoint*/ ,(int)offsetof(ZPP_PivotJoint_obj,outer_zn),HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_PivotJoint_obj,b1),HX_HCSTRING("b1","\x8f","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1localx),HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1localy),HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1relx),HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a1rely),HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_PivotJoint_obj,wrap_a1),HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_PivotJoint_obj,b2),HX_HCSTRING("b2","\x90","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2localx),HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2localy),HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2relx),HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,a2rely),HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_PivotJoint_obj,wrap_a2),HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,kMassa),HX_HCSTRING("kMassa","\x82","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,kMassb),HX_HCSTRING("kMassb","\x83","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,kMassc),HX_HCSTRING("kMassc","\x84","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,jAccx),HX_HCSTRING("jAccx","\xa1","\xd1","\xbb","\x33")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,jAccy),HX_HCSTRING("jAccy","\xa2","\xd1","\xbb","\x33")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,jMax),HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,gamma),HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,biasx),HX_HCSTRING("biasx","\xdf","\x3f","\xf6","\xb2")},
	{hx::fsFloat,(int)offsetof(ZPP_PivotJoint_obj,biasy),HX_HCSTRING("biasy","\xe0","\x3f","\xf6","\xb2")},
	{hx::fsBool,(int)offsetof(ZPP_PivotJoint_obj,stepped),HX_HCSTRING("stepped","\x03","\x05","\x60","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_PivotJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_PivotJoint_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("activeBodies","\xe6","\x69","\xf8","\xba"),
	HX_HCSTRING("inactiveBodies","\x4b","\x89","\xc5","\x8c"),
	HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"),
	HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb"),
	HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb"),
	HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a"),
	HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a"),
	HX_HCSTRING("validate_a1","\xf9","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a1","\x34","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a1","\x72","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d"),
	HX_HCSTRING("b2","\x90","\x55","\x00","\x00"),
	HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25"),
	HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25"),
	HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde"),
	HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde"),
	HX_HCSTRING("validate_a2","\xfa","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a2","\x35","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a2","\x73","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d"),
	HX_HCSTRING("kMassa","\x82","\xa0","\x7f","\x5e"),
	HX_HCSTRING("kMassb","\x83","\xa0","\x7f","\x5e"),
	HX_HCSTRING("kMassc","\x84","\xa0","\x7f","\x5e"),
	HX_HCSTRING("jAccx","\xa1","\xd1","\xbb","\x33"),
	HX_HCSTRING("jAccy","\xa2","\xd1","\xbb","\x33"),
	HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"),
	HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"),
	HX_HCSTRING("biasx","\xdf","\x3f","\xf6","\xb2"),
	HX_HCSTRING("biasy","\xe0","\x3f","\xf6","\xb2"),
	HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("wake_connected","\xae","\xcf","\xdd","\x3d"),
	HX_HCSTRING("forest","\xdd","\x8c","\x88","\xfd"),
	HX_HCSTRING("pair_exists","\xa1","\x6a","\x58","\x69"),
	HX_HCSTRING("clearcache","\x95","\x69","\xf1","\x82"),
	HX_HCSTRING("preStep","\x0f","\xc1","\xc0","\x24"),
	HX_HCSTRING("warmStart","\xdd","\x27","\x03","\xeb"),
	HX_HCSTRING("applyImpulseVel","\xb6","\xc7","\x50","\x1f"),
	HX_HCSTRING("applyImpulsePos","\xed","\x42","\x4c","\x1f"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	::String(null()) };

static void ZPP_PivotJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_PivotJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_PivotJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_PivotJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_PivotJoint_obj::__mClass;

void ZPP_PivotJoint_obj::__register()
{
	hx::Object *dummy = new ZPP_PivotJoint_obj;
	ZPP_PivotJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.constraint.ZPP_PivotJoint","\x9d","\x7a","\x47","\xba");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_PivotJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_PivotJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_PivotJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_PivotJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_PivotJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_PivotJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
