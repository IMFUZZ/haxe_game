// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_WeldJoint
#include <nape/constraint/WeldJoint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_AngleDraw
#include <zpp_nape/constraint/ZPP_AngleDraw.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_WeldJoint
#include <zpp_nape/constraint/ZPP_WeldJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_174_new,"zpp_nape.constraint.ZPP_WeldJoint","new",0x42b74c01,"zpp_nape.constraint.ZPP_WeldJoint.new","zpp_nape/constraint/WeldJoint.hx",174,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_177_bodyImpulse,"zpp_nape.constraint.ZPP_WeldJoint","bodyImpulse",0xe44bfad4,"zpp_nape.constraint.ZPP_WeldJoint.bodyImpulse","zpp_nape/constraint/WeldJoint.hx",177,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_183_activeBodies,"zpp_nape.constraint.ZPP_WeldJoint","activeBodies",0x4aa2f225,"zpp_nape.constraint.ZPP_WeldJoint.activeBodies","zpp_nape/constraint/WeldJoint.hx",183,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_191_inactiveBodies,"zpp_nape.constraint.ZPP_WeldJoint","inactiveBodies",0x4251df4a,"zpp_nape.constraint.ZPP_WeldJoint.inactiveBodies","zpp_nape/constraint/WeldJoint.hx",191,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_205_validate_a1,"zpp_nape.constraint.ZPP_WeldJoint","validate_a1",0x4f76209a,"zpp_nape.constraint.ZPP_WeldJoint.validate_a1","zpp_nape/constraint/WeldJoint.hx",205,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_226_invalidate_a1,"zpp_nape.constraint.ZPP_WeldJoint","invalidate_a1",0xcc8ddf15,"zpp_nape.constraint.ZPP_WeldJoint.invalidate_a1","zpp_nape/constraint/WeldJoint.hx",226,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_250_setup_a1,"zpp_nape.constraint.ZPP_WeldJoint","setup_a1",0x9ecce531,"zpp_nape.constraint.ZPP_WeldJoint.setup_a1","zpp_nape/constraint/WeldJoint.hx",250,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_263_validate_a2,"zpp_nape.constraint.ZPP_WeldJoint","validate_a2",0x4f76209b,"zpp_nape.constraint.ZPP_WeldJoint.validate_a2","zpp_nape/constraint/WeldJoint.hx",263,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_284_invalidate_a2,"zpp_nape.constraint.ZPP_WeldJoint","invalidate_a2",0xcc8ddf16,"zpp_nape.constraint.ZPP_WeldJoint.invalidate_a2","zpp_nape/constraint/WeldJoint.hx",284,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_308_setup_a2,"zpp_nape.constraint.ZPP_WeldJoint","setup_a2",0x9ecce532,"zpp_nape.constraint.ZPP_WeldJoint.setup_a2","zpp_nape/constraint/WeldJoint.hx",308,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_331_copy,"zpp_nape.constraint.ZPP_WeldJoint","copy",0x166d6cf4,"zpp_nape.constraint.ZPP_WeldJoint.copy","zpp_nape/constraint/WeldJoint.hx",331,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_352_copy,"zpp_nape.constraint.ZPP_WeldJoint","copy",0x166d6cf4,"zpp_nape.constraint.ZPP_WeldJoint.copy","zpp_nape/constraint/WeldJoint.hx",352,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_373_copy,"zpp_nape.constraint.ZPP_WeldJoint","copy",0x166d6cf4,"zpp_nape.constraint.ZPP_WeldJoint.copy","zpp_nape/constraint/WeldJoint.hx",373,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_491_validate,"zpp_nape.constraint.ZPP_WeldJoint","validate",0x80778d55,"zpp_nape.constraint.ZPP_WeldJoint.validate","zpp_nape/constraint/WeldJoint.hx",491,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_497_wake_connected,"zpp_nape.constraint.ZPP_WeldJoint","wake_connected",0xf36a25ad,"zpp_nape.constraint.ZPP_WeldJoint.wake_connected","zpp_nape/constraint/WeldJoint.hx",497,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_501_forest,"zpp_nape.constraint.ZPP_WeldJoint","forest",0xd2af4bdc,"zpp_nape.constraint.ZPP_WeldJoint.forest","zpp_nape/constraint/WeldJoint.hx",501,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_600_pair_exists,"zpp_nape.constraint.ZPP_WeldJoint","pair_exists",0xee01ef42,"zpp_nape.constraint.ZPP_WeldJoint.pair_exists","zpp_nape/constraint/WeldJoint.hx",600,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_602_clearcache,"zpp_nape.constraint.ZPP_WeldJoint","clearcache",0xd87d1414,"zpp_nape.constraint.ZPP_WeldJoint.clearcache","zpp_nape/constraint/WeldJoint.hx",602,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_628_preStep,"zpp_nape.constraint.ZPP_WeldJoint","preStep",0xd1812130,"zpp_nape.constraint.ZPP_WeldJoint.preStep","zpp_nape/constraint/WeldJoint.hx",628,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_890_warmStart,"zpp_nape.constraint.ZPP_WeldJoint","warmStart",0x90b4923e,"zpp_nape.constraint.ZPP_WeldJoint.warmStart","zpp_nape/constraint/WeldJoint.hx",890,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_922_applyImpulseVel,"zpp_nape.constraint.ZPP_WeldJoint","applyImpulseVel",0x448fb0d7,"zpp_nape.constraint.ZPP_WeldJoint.applyImpulseVel","zpp_nape/constraint/WeldJoint.hx",922,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_1143_applyImpulsePos,"zpp_nape.constraint.ZPP_WeldJoint","applyImpulsePos",0x448b2c0e,"zpp_nape.constraint.ZPP_WeldJoint.applyImpulsePos","zpp_nape/constraint/WeldJoint.hx",1143,0xc793a26a)
HX_DEFINE_STACK_FRAME(_hx_pos_5c63fbb3de5f6a74_1531_draw,"zpp_nape.constraint.ZPP_WeldJoint","draw",0x1718dd43,"zpp_nape.constraint.ZPP_WeldJoint.draw","zpp_nape/constraint/WeldJoint.hx",1531,0xc793a26a)
namespace zpp_nape{
namespace constraint{

void ZPP_WeldJoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_174_new)
            	HX_STACK_THIS(this)
HXLINE( 330)		this->stepped = false;
HXLINE( 329)		this->biasz = ((Float)0.0);
HXLINE( 328)		this->biasy = ((Float)0.0);
HXLINE( 327)		this->biasx = ((Float)0.0);
HXLINE( 326)		this->gamma = ((Float)0.0);
HXLINE( 325)		this->jMax = ((Float)0.0);
HXLINE( 324)		this->jAccz = ((Float)0.0);
HXLINE( 323)		this->jAccy = ((Float)0.0);
HXLINE( 322)		this->jAccx = ((Float)0.0);
HXLINE( 321)		this->kMassf = ((Float)0.0);
HXLINE( 320)		this->kMasse = ((Float)0.0);
HXLINE( 319)		this->kMassc = ((Float)0.0);
HXLINE( 318)		this->kMassd = ((Float)0.0);
HXLINE( 317)		this->kMassb = ((Float)0.0);
HXLINE( 316)		this->kMassa = ((Float)0.0);
HXLINE( 315)		this->phase = ((Float)0.0);
HXLINE( 314)		this->wrap_a2 = null();
HXLINE( 261)		this->a2rely = ((Float)0.0);
HXLINE( 260)		this->a2relx = ((Float)0.0);
HXLINE( 259)		this->a2localy = ((Float)0.0);
HXLINE( 258)		this->a2localx = ((Float)0.0);
HXLINE( 257)		this->b2 = null();
HXLINE( 256)		this->wrap_a1 = null();
HXLINE( 203)		this->a1rely = ((Float)0.0);
HXLINE( 202)		this->a1relx = ((Float)0.0);
HXLINE( 201)		this->a1localy = ((Float)0.0);
HXLINE( 200)		this->a1localx = ((Float)0.0);
HXLINE( 199)		this->b1 = null();
HXLINE( 175)		this->outer_zn = null();
HXLINE( 379)		super::__construct();
HXLINE( 380)		this->phase = (int)0;
HXLINE( 381)		{
HXLINE( 382)			{
HXLINE( 383)				this->jAccx = (int)0;
HXLINE( 384)				this->jAccy = (int)0;
            			}
HXLINE( 402)			this->jAccz = (int)0;
            		}
HXLINE( 404)		this->jMax = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 405)		this->stepped = false;
HXLINE( 406)		{
HXLINE( 407)			{
HXLINE( 408)				this->a1localx = (int)0;
HXLINE( 409)				this->a1localy = (int)0;
            			}
HXLINE( 427)			{
HXLINE( 428)				this->a1relx = (int)0;
HXLINE( 429)				this->a1rely = (int)0;
            			}
            		}
HXLINE( 448)		{
HXLINE( 449)			{
HXLINE( 450)				this->a2localx = (int)0;
HXLINE( 451)				this->a2localy = (int)0;
            			}
HXLINE( 469)			{
HXLINE( 470)				this->a2relx = (int)0;
HXLINE( 471)				this->a2rely = (int)0;
            			}
            		}
            	}

Dynamic ZPP_WeldJoint_obj::__CreateEmpty() { return new ZPP_WeldJoint_obj; }

void *ZPP_WeldJoint_obj::_hx_vtable = 0;

Dynamic ZPP_WeldJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_WeldJoint_obj > _hx_result = new ZPP_WeldJoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_WeldJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22d9baed) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x22d9baed;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

 ::nape::geom::Vec3 ZPP_WeldJoint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_177_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 177)		if (this->stepped) {
HXLINE( 178)			if (hx::IsEq( b,this->b1 )) {
HXLINE( 178)				return ::nape::geom::Vec3_obj::get(-(this->jAccx),-(this->jAccy),-((((this->jAccy * this->a1relx) - (this->jAccx * this->a1rely)) + this->jAccz)));
            			}
            			else {
HXLINE( 179)				return ::nape::geom::Vec3_obj::get(this->jAccx,this->jAccy,(((this->jAccy * this->a2relx) - (this->jAccx * this->a2rely)) + this->jAccz));
            			}
            		}
            		else {
HXLINE( 181)			return ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
            		}
HXLINE( 177)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_WeldJoint_obj,bodyImpulse,return )

void ZPP_WeldJoint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_183_activeBodies)
            	HX_STACK_THIS(this)
HXLINE( 185)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 185)			this->b1->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 187)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 188)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 188)				this->b2->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_WeldJoint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_191_inactiveBodies)
            	HX_STACK_THIS(this)
HXLINE( 193)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 193)			this->b1->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 195)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 196)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 196)				this->b2->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_WeldJoint_obj::validate_a1(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_205_validate_a1)
            	HX_STACK_THIS(this)
HXLINE( 206)		this->wrap_a1->zpp_inner->x = this->a1localx;
HXLINE( 207)		this->wrap_a1->zpp_inner->y = this->a1localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_WeldJoint_obj,validate_a1,(void))

void ZPP_WeldJoint_obj::invalidate_a1( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_226_invalidate_a1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 228)		{
HXLINE( 229)			this->a1localx = x->x;
HXLINE( 230)			this->a1localy = x->y;
            		}
HXLINE( 248)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_WeldJoint_obj,invalidate_a1,(void))

void ZPP_WeldJoint_obj::setup_a1(){
            	HX_GC_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_250_setup_a1)
            	HX_STACK_THIS(this)
HXLINE( 251)		HX_VARI( Float,x) = this->a1localx;
HXDLIN( 251)		HX_VARI( Float,y) = this->a1localy;
HXDLIN( 251)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 251)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 251)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 251)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 251)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 251)			ret->zpp_pool = null();
            		}
HXDLIN( 251)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 251)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 251)			{
HXLINE( 251)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 251)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 251)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 251)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 251)					ret1->next = null();
            				}
HXDLIN( 251)				ret1->weak = false;
            			}
HXDLIN( 251)			ret1->_immutable = false;
HXDLIN( 251)			{
HXLINE( 251)				ret1->x = x;
HXDLIN( 251)				ret1->y = y;
            			}
HXDLIN( 251)			ret->zpp_inner = ret1;
HXDLIN( 251)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 251)			bool _hx_tmp;
HXDLIN( 251)			{
HXLINE( 251)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 251)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 251)					_this->_validate();
            				}
            			}
HXDLIN( 251)			if ((ret->zpp_inner->x == x)) {
HXLINE( 251)				{
HXLINE( 251)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 251)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 251)						_this1->_validate();
            					}
            				}
HXDLIN( 251)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 251)				_hx_tmp = false;
            			}
HXDLIN( 251)			if (!(_hx_tmp)) {
HXLINE( 251)				{
HXLINE( 251)					ret->zpp_inner->x = x;
HXDLIN( 251)					ret->zpp_inner->y = y;
            				}
HXDLIN( 251)				{
HXLINE( 251)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 251)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 251)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 251)		ret->zpp_inner->weak = false;
HXDLIN( 251)		this->wrap_a1 = ret;
HXLINE( 252)		this->wrap_a1->zpp_inner->_inuse = true;
HXLINE( 253)		this->wrap_a1->zpp_inner->_validate = this->validate_a1_dyn();
HXLINE( 254)		this->wrap_a1->zpp_inner->_invalidate = this->invalidate_a1_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_WeldJoint_obj,setup_a1,(void))

void ZPP_WeldJoint_obj::validate_a2(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_263_validate_a2)
            	HX_STACK_THIS(this)
HXLINE( 264)		this->wrap_a2->zpp_inner->x = this->a2localx;
HXLINE( 265)		this->wrap_a2->zpp_inner->y = this->a2localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_WeldJoint_obj,validate_a2,(void))

void ZPP_WeldJoint_obj::invalidate_a2( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_284_invalidate_a2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 286)		{
HXLINE( 287)			this->a2localx = x->x;
HXLINE( 288)			this->a2localy = x->y;
            		}
HXLINE( 306)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_WeldJoint_obj,invalidate_a2,(void))

void ZPP_WeldJoint_obj::setup_a2(){
            	HX_GC_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_308_setup_a2)
            	HX_STACK_THIS(this)
HXLINE( 309)		HX_VARI( Float,x) = this->a2localx;
HXDLIN( 309)		HX_VARI( Float,y) = this->a2localy;
HXDLIN( 309)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 309)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 309)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 309)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 309)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 309)			ret->zpp_pool = null();
            		}
HXDLIN( 309)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 309)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 309)			{
HXLINE( 309)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 309)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 309)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 309)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 309)					ret1->next = null();
            				}
HXDLIN( 309)				ret1->weak = false;
            			}
HXDLIN( 309)			ret1->_immutable = false;
HXDLIN( 309)			{
HXLINE( 309)				ret1->x = x;
HXDLIN( 309)				ret1->y = y;
            			}
HXDLIN( 309)			ret->zpp_inner = ret1;
HXDLIN( 309)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 309)			bool _hx_tmp;
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 309)					_this->_validate();
            				}
            			}
HXDLIN( 309)			if ((ret->zpp_inner->x == x)) {
HXLINE( 309)				{
HXLINE( 309)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 309)						_this1->_validate();
            					}
            				}
HXDLIN( 309)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 309)				_hx_tmp = false;
            			}
HXDLIN( 309)			if (!(_hx_tmp)) {
HXLINE( 309)				{
HXLINE( 309)					ret->zpp_inner->x = x;
HXDLIN( 309)					ret->zpp_inner->y = y;
            				}
HXDLIN( 309)				{
HXLINE( 309)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 309)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 309)		ret->zpp_inner->weak = false;
HXDLIN( 309)		this->wrap_a2 = ret;
HXLINE( 310)		this->wrap_a2->zpp_inner->_inuse = true;
HXLINE( 311)		this->wrap_a2->zpp_inner->_validate = this->validate_a2_dyn();
HXLINE( 312)		this->wrap_a2->zpp_inner->_invalidate = this->invalidate_a2_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_WeldJoint_obj,setup_a2,(void))

 ::nape::constraint::Constraint ZPP_WeldJoint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_GC_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_331_copy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dict,"dict")
            	HX_STACK_ARG(todo,"todo")
HXLINE( 332)		HX_VARI(  ::nape::constraint::WeldJoint,_this) = this->outer_zn;
HXDLIN( 332)		if (hx::IsNull( _this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 332)			_this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 332)		HX_VARI(  ::nape::geom::Vec2,ret) = _this->zpp_inner_zn->wrap_a1;
HXDLIN( 332)		HX_VARI_NAME(  ::nape::constraint::WeldJoint,_this1,"_this") = this->outer_zn;
HXDLIN( 332)		if (hx::IsNull( _this1->zpp_inner_zn->wrap_a2 )) {
HXLINE( 332)			_this1->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 332)		HX_VARI_NAME(  ::nape::constraint::WeldJoint,ret1,"ret") =  ::nape::constraint::WeldJoint_obj::__alloc( HX_CTX ,null(),null(),ret,_this1->zpp_inner_zn->wrap_a2,null());
HXLINE( 333)		this->copyto(ret1);
HXLINE( 335)		bool _hx_tmp;
HXDLIN( 335)		if (hx::IsNotNull( dict )) {
HXLINE( 335)			_hx_tmp = hx::IsNotNull( this->b1 );
            		}
            		else {
HXLINE( 335)			_hx_tmp = false;
            		}
HXDLIN( 335)		if (_hx_tmp) {
HXLINE( 344)			HX_VARI(  ::nape::phys::Body,b) = null();
HXLINE( 345)			{
HXLINE( 345)				HX_VARI( int,_g) = (int)0;
HXDLIN( 345)				while((_g < dict->length)){
HXLINE( 345)					HX_VARI(  ::zpp_nape::constraint::ZPP_CopyHelper,idc) = dict->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 345)					_g = (_g + (int)1);
HXLINE( 346)					if ((idc->id == this->b1->id)) {
HXLINE( 347)						b = idc->bc;
HXLINE( 348)						goto _hx_goto_10;
            					}
            				}
            				_hx_goto_10:;
            			}
HXLINE( 351)			if (hx::IsNotNull( b )) {
HXLINE( 351)				ret1->zpp_inner_zn->b1 = b->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::nape::constraint::WeldJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b1){
            					HX_GC_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_352_copy)
            					HX_STACK_ARG(b1,"b1")
HXLINE( 352)					ret1->zpp_inner_zn->b1 = b1->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 352)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b1->id, ::Dynamic(new _hx_Closure_0(ret1))));
            			}
            		}
HXLINE( 356)		bool _hx_tmp1;
HXDLIN( 356)		if (hx::IsNotNull( dict )) {
HXLINE( 356)			_hx_tmp1 = hx::IsNotNull( this->b2 );
            		}
            		else {
HXLINE( 356)			_hx_tmp1 = false;
            		}
HXDLIN( 356)		if (_hx_tmp1) {
HXLINE( 365)			HX_VARI_NAME(  ::nape::phys::Body,b2,"b") = null();
HXLINE( 366)			{
HXLINE( 366)				HX_VARI_NAME( int,_g1,"_g") = (int)0;
HXDLIN( 366)				while((_g1 < dict->length)){
HXLINE( 366)					HX_VARI_NAME(  ::zpp_nape::constraint::ZPP_CopyHelper,idc1,"idc") = dict->__get(_g1).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 366)					_g1 = (_g1 + (int)1);
HXLINE( 367)					if ((idc1->id == this->b2->id)) {
HXLINE( 368)						b2 = idc1->bc;
HXLINE( 369)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
            			}
HXLINE( 372)			if (hx::IsNotNull( b2 )) {
HXLINE( 372)				ret1->zpp_inner_zn->b2 = b2->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::nape::constraint::WeldJoint,ret1) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b3){
            					HX_GC_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_373_copy)
            					HX_STACK_ARG(b3,"b3")
HXLINE( 373)					ret1->zpp_inner_zn->b2 = b3->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 373)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b2->id, ::Dynamic(new _hx_Closure_1(ret1))));
            			}
            		}
HXLINE( 376)		return ret1;
            	}


void ZPP_WeldJoint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_491_validate)
            	HX_STACK_THIS(this)
HXLINE( 492)		bool _hx_tmp;
HXDLIN( 492)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 492)			_hx_tmp = hx::IsNull( this->b2 );
            		}
            		else {
HXLINE( 492)			_hx_tmp = true;
            		}
HXDLIN( 492)		if (_hx_tmp) {
HXLINE( 492)			HX_STACK_DO_THROW(HX_("Error: AngleJoint cannot be simulated null bodies",fe,18,41,78));
            		}
HXLINE( 493)		if (hx::IsEq( this->b1,this->b2 )) {
HXLINE( 493)			HX_STACK_DO_THROW(HX_("Error: WeldJoint cannot be simulated with body1 == body2",31,e8,4a,66));
            		}
HXLINE( 494)		bool _hx_tmp1;
HXDLIN( 494)		if (hx::IsEq( this->b1->space,this->space )) {
HXLINE( 494)			_hx_tmp1 = hx::IsNotEq( this->b2->space,this->space );
            		}
            		else {
HXLINE( 494)			_hx_tmp1 = true;
            		}
HXDLIN( 494)		if (_hx_tmp1) {
HXLINE( 494)			HX_STACK_DO_THROW(HX_("Error: Constraints must have each body within the same space to which the constraint has been assigned",e8,8c,93,57));
            		}
HXLINE( 495)		bool _hx_tmp2;
HXDLIN( 495)		if ((this->b1->type != (int)2)) {
HXLINE( 495)			_hx_tmp2 = (this->b2->type != (int)2);
            		}
            		else {
HXLINE( 495)			_hx_tmp2 = false;
            		}
HXDLIN( 495)		if (_hx_tmp2) {
HXLINE( 495)			HX_STACK_DO_THROW(HX_("Error: Constraints cannot have both bodies non-dynamic",cb,b3,6c,eb));
            		}
            	}


void ZPP_WeldJoint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_497_wake_connected)
            	HX_STACK_THIS(this)
HXLINE( 498)		bool _hx_tmp;
HXDLIN( 498)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 498)			_hx_tmp = (this->b1->type == (int)2);
            		}
            		else {
HXLINE( 498)			_hx_tmp = false;
            		}
HXDLIN( 498)		if (_hx_tmp) {
HXLINE( 498)			this->b1->wake();
            		}
HXLINE( 499)		bool _hx_tmp1;
HXDLIN( 499)		if (hx::IsNotNull( this->b2 )) {
HXLINE( 499)			_hx_tmp1 = (this->b2->type == (int)2);
            		}
            		else {
HXLINE( 499)			_hx_tmp1 = false;
            		}
HXDLIN( 499)		if (_hx_tmp1) {
HXLINE( 499)			this->b2->wake();
            		}
            	}


void ZPP_WeldJoint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_501_forest)
            	HX_STACK_THIS(this)
HXLINE( 502)		if ((this->b1->type == (int)2)) {
HXLINE( 503)			HX_VAR(  ::zpp_nape::space::ZPP_Component,xr);
HXDLIN( 503)			if (hx::IsEq( this->b1->component,this->b1->component->parent )) {
HXLINE( 503)				xr = this->b1->component;
            			}
            			else {
HXLINE( 506)				HX_VARI(  ::zpp_nape::space::ZPP_Component,obj) = this->b1->component;
HXLINE( 507)				HX_VARI(  ::zpp_nape::space::ZPP_Component,stack) = null();
HXLINE( 508)				while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 509)					HX_VARI(  ::zpp_nape::space::ZPP_Component,nxt) = obj->parent;
HXLINE( 510)					obj->parent = stack;
HXLINE( 511)					stack = obj;
HXLINE( 512)					obj = nxt;
            				}
HXLINE( 514)				while(hx::IsNotNull( stack )){
HXLINE( 515)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt1,"nxt") = stack->parent;
HXLINE( 516)					stack->parent = obj;
HXLINE( 517)					stack = nxt1;
            				}
HXLINE( 503)				xr = obj;
            			}
HXLINE( 522)			HX_VAR(  ::zpp_nape::space::ZPP_Component,yr);
HXDLIN( 522)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 522)				yr = this->component;
            			}
            			else {
HXLINE( 525)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj1,"obj") = this->component;
HXLINE( 526)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack1,"stack") = null();
HXLINE( 527)				while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 528)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt2,"nxt") = obj1->parent;
HXLINE( 529)					obj1->parent = stack1;
HXLINE( 530)					stack1 = obj1;
HXLINE( 531)					obj1 = nxt2;
            				}
HXLINE( 533)				while(hx::IsNotNull( stack1 )){
HXLINE( 534)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt3,"nxt") = stack1->parent;
HXLINE( 535)					stack1->parent = obj1;
HXLINE( 536)					stack1 = nxt3;
            				}
HXLINE( 522)				yr = obj1;
            			}
HXLINE( 541)			if (hx::IsNotEq( xr,yr )) {
HXLINE( 542)				if ((xr->rank < yr->rank)) {
HXLINE( 542)					xr->parent = yr;
            				}
            				else {
HXLINE( 543)					if ((xr->rank > yr->rank)) {
HXLINE( 543)						yr->parent = xr;
            					}
            					else {
HXLINE( 545)						yr->parent = xr;
HXLINE( 546)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE( 550)		if ((this->b2->type == (int)2)) {
HXLINE( 551)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,xr1,"xr");
HXDLIN( 551)			if (hx::IsEq( this->b2->component,this->b2->component->parent )) {
HXLINE( 551)				xr1 = this->b2->component;
            			}
            			else {
HXLINE( 554)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj2,"obj") = this->b2->component;
HXLINE( 555)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack2,"stack") = null();
HXLINE( 556)				while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE( 557)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt4,"nxt") = obj2->parent;
HXLINE( 558)					obj2->parent = stack2;
HXLINE( 559)					stack2 = obj2;
HXLINE( 560)					obj2 = nxt4;
            				}
HXLINE( 562)				while(hx::IsNotNull( stack2 )){
HXLINE( 563)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt5,"nxt") = stack2->parent;
HXLINE( 564)					stack2->parent = obj2;
HXLINE( 565)					stack2 = nxt5;
            				}
HXLINE( 551)				xr1 = obj2;
            			}
HXLINE( 570)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,yr1,"yr");
HXDLIN( 570)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 570)				yr1 = this->component;
            			}
            			else {
HXLINE( 573)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj3,"obj") = this->component;
HXLINE( 574)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack3,"stack") = null();
HXLINE( 575)				while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE( 576)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt6,"nxt") = obj3->parent;
HXLINE( 577)					obj3->parent = stack3;
HXLINE( 578)					stack3 = obj3;
HXLINE( 579)					obj3 = nxt6;
            				}
HXLINE( 581)				while(hx::IsNotNull( stack3 )){
HXLINE( 582)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt7,"nxt") = stack3->parent;
HXLINE( 583)					stack3->parent = obj3;
HXLINE( 584)					stack3 = nxt7;
            				}
HXLINE( 570)				yr1 = obj3;
            			}
HXLINE( 589)			if (hx::IsNotEq( xr1,yr1 )) {
HXLINE( 590)				if ((xr1->rank < yr1->rank)) {
HXLINE( 590)					xr1->parent = yr1;
            				}
            				else {
HXLINE( 591)					if ((xr1->rank > yr1->rank)) {
HXLINE( 591)						yr1->parent = xr1;
            					}
            					else {
HXLINE( 593)						yr1->parent = xr1;
HXLINE( 594)						xr1->rank++;
            					}
            				}
            			}
            		}
            	}


bool ZPP_WeldJoint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_600_pair_exists)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE( 600)		bool _hx_tmp;
HXDLIN( 600)		if ((this->b1->id == id)) {
HXLINE( 600)			_hx_tmp = (this->b2->id == di);
            		}
            		else {
HXLINE( 600)			_hx_tmp = false;
            		}
HXDLIN( 600)		if (!(_hx_tmp)) {
HXLINE( 600)			if ((this->b1->id == di)) {
HXLINE( 600)				return (this->b2->id == id);
            			}
            			else {
HXLINE( 600)				return false;
            			}
            		}
            		else {
HXLINE( 600)			return true;
            		}
HXDLIN( 600)		return false;
            	}


void ZPP_WeldJoint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_602_clearcache)
            	HX_STACK_THIS(this)
HXLINE( 603)		{
HXLINE( 604)			{
HXLINE( 605)				this->jAccx = (int)0;
HXLINE( 606)				this->jAccy = (int)0;
            			}
HXLINE( 624)			this->jAccz = (int)0;
            		}
HXLINE( 626)		this->pre_dt = ((Float)-1.0);
            	}


bool ZPP_WeldJoint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_628_preStep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dt,"dt")
HXLINE( 629)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 629)			this->pre_dt = dt;
            		}
HXLINE( 630)		HX_VARI( Float,dtratio) = ((Float)dt / (Float)this->pre_dt);
HXLINE( 631)		this->pre_dt = dt;
HXLINE( 632)		this->stepped = true;
HXLINE( 633)		{
HXLINE( 634)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 635)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 637)		{
HXLINE( 638)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 639)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 641)		{
HXLINE( 642)			HX_VARI( Float,m) = (this->b1->smass + this->b2->smass);
HXLINE( 643)			{
HXLINE( 644)				this->kMassa = m;
HXLINE( 645)				this->kMassb = (int)0;
HXLINE( 646)				this->kMassd = m;
HXLINE( 647)				this->kMassc = (int)0;
HXLINE( 648)				this->kMasse = (int)0;
HXLINE( 649)				this->kMassf = (int)0;
            			}
HXLINE( 651)			if ((this->b1->sinertia != (int)0)) {
HXLINE( 652)				HX_VARI( Float,X) = (this->a1relx * this->b1->sinertia);
HXLINE( 653)				HX_VARI( Float,Y) = (this->a1rely * this->b1->sinertia);
HXLINE( 654)				{
HXLINE( 655)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 655)					_hx_tmp->kMassa = (_hx_tmp->kMassa + (Y * this->a1rely));
HXLINE( 656)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 656)					_hx_tmp1->kMassb = (_hx_tmp1->kMassb + (-(Y) * this->a1relx));
HXLINE( 657)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 657)					_hx_tmp2->kMassd = (_hx_tmp2->kMassd + (X * this->a1relx));
HXLINE( 658)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 658)					_hx_tmp3->kMassc = (_hx_tmp3->kMassc + -(Y));
HXLINE( 659)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 659)					_hx_tmp4->kMasse = (_hx_tmp4->kMasse + X);
HXLINE( 660)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 660)					_hx_tmp5->kMassf = (_hx_tmp5->kMassf + this->b1->sinertia);
            				}
            			}
HXLINE( 663)			if ((this->b2->sinertia != (int)0)) {
HXLINE( 664)				HX_VARI_NAME( Float,X1,"X") = (this->a2relx * this->b2->sinertia);
HXLINE( 665)				HX_VARI_NAME( Float,Y1,"Y") = (this->a2rely * this->b2->sinertia);
HXLINE( 666)				{
HXLINE( 667)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 667)					_hx_tmp6->kMassa = (_hx_tmp6->kMassa + (Y1 * this->a2rely));
HXLINE( 668)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 668)					_hx_tmp7->kMassb = (_hx_tmp7->kMassb + (-(Y1) * this->a2relx));
HXLINE( 669)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 669)					_hx_tmp8->kMassd = (_hx_tmp8->kMassd + (X1 * this->a2relx));
HXLINE( 670)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 670)					_hx_tmp9->kMassc = (_hx_tmp9->kMassc + -(Y1));
HXLINE( 671)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 671)					_hx_tmp10->kMasse = (_hx_tmp10->kMasse + X1);
HXLINE( 672)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 672)					_hx_tmp11->kMassf = (_hx_tmp11->kMassf + this->b2->sinertia);
            				}
            			}
            		}
HXLINE( 677)		HX_VARI( Float,det) = (((this->kMassa * ((this->kMassd * this->kMassf) - (this->kMasse * this->kMasse))) + (this->kMassb * ((this->kMassc * this->kMasse) - (this->kMassb * this->kMassf)))) + (this->kMassc * ((this->kMassb * this->kMasse) - (this->kMassc * this->kMassd))));
HXLINE( 676)		HX_VAR( int,flag);
HXLINE( 678)		if ((det != det)) {
HXLINE( 679)			{
HXLINE( 680)				this->kMassa = (int)0;
HXLINE( 681)				this->kMassb = (int)0;
HXLINE( 682)				this->kMassd = (int)0;
HXLINE( 683)				this->kMassc = (int)0;
HXLINE( 684)				this->kMasse = (int)0;
HXLINE( 685)				this->kMassf = (int)0;
            			}
HXLINE( 676)			flag = (int)7;
            		}
            		else {
HXLINE( 689)			if ((det == (int)0)) {
HXLINE( 690)				HX_VARI_NAME( int,flag1,"flag") = (int)0;
HXLINE( 691)				if ((this->kMassa != (int)0)) {
HXLINE( 691)					this->kMassa = ((Float)(int)1 / (Float)this->kMassa);
            				}
            				else {
HXLINE( 693)					this->kMassa = (int)0;
HXLINE( 694)					flag1 = (int)1;
            				}
HXLINE( 696)				if ((this->kMassd != (int)0)) {
HXLINE( 696)					this->kMassd = ((Float)(int)1 / (Float)this->kMassd);
            				}
            				else {
HXLINE( 698)					this->kMassd = (int)0;
HXLINE( 699)					flag1 = ((int)flag1 | (int)(int)2);
            				}
HXLINE( 701)				if ((this->kMassf != (int)0)) {
HXLINE( 701)					this->kMassf = ((Float)(int)1 / (Float)this->kMassf);
            				}
            				else {
HXLINE( 703)					this->kMassf = (int)0;
HXLINE( 704)					flag1 = ((int)flag1 | (int)(int)4);
            				}
HXLINE( 706)				this->kMassb = (this->kMassc = (this->kMasse = ((Float)0.0)));
HXLINE( 676)				flag = flag1;
            			}
            			else {
HXLINE( 710)				det = ((Float)(int)1 / (Float)det);
HXLINE( 713)				HX_VARI( Float,D) = (det * ((this->kMassa * this->kMassf) - (this->kMassc * this->kMassc)));
HXLINE( 714)				HX_VARI( Float,C) = (det * ((this->kMassb * this->kMasse) - (this->kMassc * this->kMassd)));
HXLINE( 715)				HX_VARI( Float,E) = (det * ((this->kMassb * this->kMassc) - (this->kMassa * this->kMasse)));
HXLINE( 716)				HX_VARI( Float,F) = (det * ((this->kMassa * this->kMassd) - (this->kMassb * this->kMassb)));
HXLINE( 717)				{
HXLINE( 718)					this->kMassa = (det * ((this->kMassd * this->kMassf) - (this->kMasse * this->kMasse)));
HXLINE( 719)					this->kMassb = (det * ((this->kMasse * this->kMassc) - (this->kMassb * this->kMassf)));
HXLINE( 720)					this->kMassd = D;
HXLINE( 721)					this->kMassc = C;
HXLINE( 722)					this->kMasse = E;
HXLINE( 723)					this->kMassf = F;
            				}
HXLINE( 676)				flag = (int)0;
            			}
            		}
HXLINE( 728)		if ((((int)flag & (int)(int)1) != (int)0)) {
HXLINE( 728)			this->jAccx = (int)0;
            		}
HXLINE( 729)		if ((((int)flag & (int)(int)2) != (int)0)) {
HXLINE( 729)			this->jAccy = (int)0;
            		}
HXLINE( 730)		if ((((int)flag & (int)(int)4) != (int)0)) {
HXLINE( 730)			this->jAccz = (int)0;
            		}
HXLINE( 731)		if (!(this->stiff)) {
HXLINE( 732)			HX_VAR( Float,biasCoef);
HXLINE( 733)			{
HXLINE( 735)				HX_VARI( Float,omega) = (((int)2 * ::Math_obj::PI) * this->frequency);
HXLINE( 736)				this->gamma = ((Float)(int)1 / (Float)((dt * omega) * (((int)2 * this->damping) + (omega * dt))));
HXLINE( 737)				HX_VARI( Float,ig) = ((Float)(int)1 / (Float)((int)1 + this->gamma));
HXLINE( 738)				biasCoef = (((dt * omega) * omega) * this->gamma);
HXLINE( 739)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 739)				_hx_tmp12->gamma = (_hx_tmp12->gamma * ig);
HXLINE( 742)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 742)				_hx_tmp13->kMassa = (_hx_tmp13->kMassa * ig);
HXLINE( 743)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 743)				_hx_tmp14->kMassb = (_hx_tmp14->kMassb * ig);
HXLINE( 744)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp15 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 744)				_hx_tmp15->kMassd = (_hx_tmp15->kMassd * ig);
HXLINE( 745)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp16 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 745)				_hx_tmp16->kMassc = (_hx_tmp16->kMassc * ig);
HXLINE( 746)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp17 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 746)				_hx_tmp17->kMasse = (_hx_tmp17->kMasse * ig);
HXLINE( 747)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp18 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 747)				_hx_tmp18->kMassf = (_hx_tmp18->kMassf * ig);
            			}
HXLINE( 749)			{
HXLINE( 750)				this->biasx = ((this->b2->posx + this->a2relx) - (this->b1->posx + this->a1relx));
HXLINE( 751)				this->biasy = ((this->b2->posy + this->a2rely) - (this->b1->posy + this->a1rely));
HXLINE( 752)				this->biasz = ((this->b2->rot - this->b1->rot) - this->phase);
            			}
HXLINE( 754)			bool _hx_tmp19;
HXDLIN( 754)			if (this->breakUnderError) {
HXLINE( 754)				_hx_tmp19 = ((((this->biasx * this->biasx) + (this->biasy * this->biasy)) + (this->biasz * this->biasz)) > (this->maxError * this->maxError));
            			}
            			else {
HXLINE( 754)				_hx_tmp19 = false;
            			}
HXDLIN( 754)			if (_hx_tmp19) {
HXLINE( 754)				return true;
            			}
HXLINE( 755)			{
HXLINE( 756)				HX_VARI( Float,t) = -(biasCoef);
HXLINE( 757)				{
HXLINE( 767)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp20 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 767)					_hx_tmp20->biasx = (_hx_tmp20->biasx * t);
HXLINE( 768)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp21 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 768)					_hx_tmp21->biasy = (_hx_tmp21->biasy * t);
            				}
HXLINE( 770)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp22 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 770)				_hx_tmp22->biasz = (_hx_tmp22->biasz * t);
            			}
HXLINE( 772)			{
HXLINE( 773)				HX_VARI_NAME( Float,t1,"t") = this->maxError;
HXLINE( 782)				HX_VARI( Float,ls) = (((this->biasx * this->biasx) + (this->biasy * this->biasy)) + (this->biasz * this->biasz));
HXLINE( 783)				if ((ls > (t1 * t1))) {
HXLINE( 793)					HX_VARI_NAME( Float,t2,"t") = (t1 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls)));
HXLINE( 794)					{
HXLINE( 804)						 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp23 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 804)						_hx_tmp23->biasx = (_hx_tmp23->biasx * t2);
HXLINE( 805)						 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp24 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 805)						_hx_tmp24->biasy = (_hx_tmp24->biasy * t2);
            					}
HXLINE( 807)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp25 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 807)					_hx_tmp25->biasz = (_hx_tmp25->biasz * t2);
            				}
            			}
            		}
            		else {
HXLINE( 813)			{
HXLINE( 814)				{
HXLINE( 815)					this->biasx = (int)0;
HXLINE( 816)					this->biasy = (int)0;
            				}
HXLINE( 834)				this->biasz = (int)0;
            			}
HXLINE( 836)			this->gamma = (int)0;
            		}
HXLINE( 838)		{
HXLINE( 840)			{
HXLINE( 850)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp26 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 850)				_hx_tmp26->jAccx = (_hx_tmp26->jAccx * dtratio);
HXLINE( 851)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp27 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 851)				_hx_tmp27->jAccy = (_hx_tmp27->jAccy * dtratio);
            			}
HXLINE( 853)			 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp28 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 853)			_hx_tmp28->jAccz = (_hx_tmp28->jAccz * dtratio);
            		}
HXLINE( 855)		this->jMax = (this->maxForce * dt);
HXLINE( 856)		return false;
            	}


void ZPP_WeldJoint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_890_warmStart)
            	HX_STACK_THIS(this)
HXLINE( 891)		{
HXLINE( 892)			HX_VARI( Float,t) = this->b1->imass;
HXLINE( 901)			 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN( 901)			_hx_tmp->velx = (_hx_tmp->velx - (this->jAccx * t));
HXLINE( 902)			 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN( 902)			_hx_tmp1->vely = (_hx_tmp1->vely - (this->jAccy * t));
            		}
HXLINE( 904)		{
HXLINE( 905)			HX_VARI_NAME( Float,t1,"t") = this->b2->imass;
HXLINE( 914)			 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b2;
HXDLIN( 914)			_hx_tmp2->velx = (_hx_tmp2->velx + (this->jAccx * t1));
HXLINE( 915)			 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN( 915)			_hx_tmp3->vely = (_hx_tmp3->vely + (this->jAccy * t1));
            		}
HXLINE( 917)		 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN( 917)		_hx_tmp4->angvel = (_hx_tmp4->angvel - ((((this->jAccy * this->a1relx) - (this->jAccx * this->a1rely)) + this->jAccz) * this->b1->iinertia));
HXLINE( 918)		 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN( 918)		_hx_tmp5->angvel = (_hx_tmp5->angvel + ((((this->jAccy * this->a2relx) - (this->jAccx * this->a2rely)) + this->jAccz) * this->b2->iinertia));
            	}


bool ZPP_WeldJoint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_922_applyImpulseVel)
            	HX_STACK_THIS(this)
HXLINE( 923)		HX_VARI( Float,Ex) = ((Float)0.0);
HXLINE( 924)		HX_VARI( Float,Ey) = ((Float)0.0);
HXLINE( 925)		HX_VARI( Float,Ez) = ((Float)0.0);
HXLINE( 926)		{
HXLINE( 927)			Ex = (((this->b2->velx + this->b2->kinvelx) - (this->a2rely * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->velx + this->b1->kinvelx) - (this->a1rely * (this->b1->angvel + this->b1->kinangvel))));
HXLINE( 928)			Ey = (((this->b2->vely + this->b2->kinvely) + (this->a2relx * (this->b2->angvel + this->b2->kinangvel))) - ((this->b1->vely + this->b1->kinvely) + (this->a1relx * (this->b1->angvel + this->b1->kinangvel))));
HXLINE( 929)			Ez = (((this->b2->angvel + this->b2->kinangvel) - this->b1->angvel) - this->b1->kinangvel);
            		}
HXLINE( 931)		HX_VARI( Float,Jx) = ((Float)0.0);
HXLINE( 932)		HX_VARI( Float,Jy) = ((Float)0.0);
HXLINE( 933)		HX_VARI( Float,Jz) = ((Float)0.0);
HXLINE( 934)		{
HXLINE( 935)			{
HXLINE( 936)				Jx = (this->biasx - Ex);
HXLINE( 937)				Jy = (this->biasy - Ey);
            			}
HXLINE( 939)			Jz = (this->biasz - Ez);
            		}
HXLINE( 941)		{
HXLINE( 942)			HX_VARI( Float,X) = (((this->kMassa * Jx) + (this->kMassb * Jy)) + (this->kMassc * Jz));
HXLINE( 943)			HX_VARI( Float,Y) = (((this->kMassb * Jx) + (this->kMassd * Jy)) + (this->kMasse * Jz));
HXLINE( 944)			Jz = (((this->kMassc * Jx) + (this->kMasse * Jy)) + (this->kMassf * Jz));
HXLINE( 945)			{
HXLINE( 946)				Jx = X;
HXLINE( 947)				Jy = Y;
            			}
            		}
HXLINE( 966)		{
HXLINE( 967)			HX_VARI( Float,t) = this->gamma;
HXLINE( 968)			{
HXLINE( 978)				Jx = (Jx - (this->jAccx * t));
HXLINE( 979)				Jy = (Jy - (this->jAccy * t));
            			}
HXLINE( 981)			Jz = (Jz - (this->jAccz * t));
            		}
HXLINE( 983)		{
HXLINE( 984)			HX_VARI( Float,jOldx) = ((Float)0.0);
HXLINE( 985)			HX_VARI( Float,jOldy) = ((Float)0.0);
HXLINE( 986)			HX_VARI( Float,jOldz) = ((Float)0.0);
HXLINE( 987)			{
HXLINE( 988)				{
HXLINE( 989)					jOldx = this->jAccx;
HXLINE( 990)					jOldy = this->jAccy;
            				}
HXLINE(1008)				jOldz = this->jAccz;
            			}
HXLINE(1010)			{
HXLINE(1012)				{
HXLINE(1022)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1022)					_hx_tmp->jAccx = (_hx_tmp->jAccx + Jx);
HXLINE(1023)					 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1023)					_hx_tmp1->jAccy = (_hx_tmp1->jAccy + Jy);
            				}
HXLINE(1025)				 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1025)				_hx_tmp2->jAccz = (_hx_tmp2->jAccz + Jz);
            			}
HXLINE(1028)			if (this->breakUnderForce) {
HXLINE(1029)				if (((((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy)) + (this->jAccz * this->jAccz)) > (this->jMax * this->jMax))) {
HXLINE(1029)					return true;
            				}
            			}
            			else {
HXLINE(1031)				if (!(this->stiff)) {
HXLINE(1032)					HX_VARI_NAME( Float,t1,"t") = this->jMax;
HXLINE(1041)					HX_VARI( Float,ls) = (((this->jAccx * this->jAccx) + (this->jAccy * this->jAccy)) + (this->jAccz * this->jAccz));
HXLINE(1042)					if ((ls > (t1 * t1))) {
HXLINE(1052)						HX_VARI_NAME( Float,t2,"t") = (t1 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls)));
HXLINE(1053)						{
HXLINE(1063)							 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1063)							_hx_tmp3->jAccx = (_hx_tmp3->jAccx * t2);
HXLINE(1064)							 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1064)							_hx_tmp4->jAccy = (_hx_tmp4->jAccy * t2);
            						}
HXLINE(1066)						 ::zpp_nape::constraint::ZPP_WeldJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1066)						_hx_tmp5->jAccz = (_hx_tmp5->jAccz * t2);
            					}
            				}
            			}
HXLINE(1071)			{
HXLINE(1072)				{
HXLINE(1073)					Jx = (this->jAccx - jOldx);
HXLINE(1074)					Jy = (this->jAccy - jOldy);
            				}
HXLINE(1076)				Jz = (this->jAccz - jOldz);
            			}
            		}
HXLINE(1110)		{
HXLINE(1111)			{
HXLINE(1112)				HX_VARI_NAME( Float,t3,"t") = this->b1->imass;
HXLINE(1121)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(1121)				_hx_tmp6->velx = (_hx_tmp6->velx - (Jx * t3));
HXLINE(1122)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b1;
HXDLIN(1122)				_hx_tmp7->vely = (_hx_tmp7->vely - (Jy * t3));
            			}
HXLINE(1124)			{
HXLINE(1125)				HX_VARI_NAME( Float,t4,"t") = this->b2->imass;
HXLINE(1134)				 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b2;
HXDLIN(1134)				_hx_tmp8->velx = (_hx_tmp8->velx + (Jx * t4));
HXLINE(1135)				 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b2;
HXDLIN(1135)				_hx_tmp9->vely = (_hx_tmp9->vely + (Jy * t4));
            			}
HXLINE(1137)			 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b1;
HXDLIN(1137)			_hx_tmp10->angvel = (_hx_tmp10->angvel - ((((Jy * this->a1relx) - (Jx * this->a1rely)) + Jz) * this->b1->iinertia));
HXLINE(1138)			 ::zpp_nape::phys::ZPP_Body _hx_tmp11 = this->b2;
HXDLIN(1138)			_hx_tmp11->angvel = (_hx_tmp11->angvel + ((((Jy * this->a2relx) - (Jx * this->a2rely)) + Jz) * this->b2->iinertia));
            		}
HXLINE(1141)		return false;
            	}


bool ZPP_WeldJoint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_1143_applyImpulsePos)
            	HX_STACK_THIS(this)
HXLINE(1144)		HX_VARI( Float,r1x) = ((Float)0.0);
HXLINE(1145)		HX_VARI( Float,r1y) = ((Float)0.0);
HXLINE(1147)		{
HXLINE(1148)			r1x = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE(1149)			r1y = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE(1152)		HX_VARI( Float,r2x) = ((Float)0.0);
HXLINE(1153)		HX_VARI( Float,r2y) = ((Float)0.0);
HXLINE(1155)		{
HXLINE(1156)			r2x = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE(1157)			r2y = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE(1160)		HX_VARI( Float,Ex) = ((Float)0.0);
HXLINE(1161)		HX_VARI( Float,Ey) = ((Float)0.0);
HXLINE(1162)		HX_VARI( Float,Ez) = ((Float)0.0);
HXLINE(1163)		{
HXLINE(1164)			Ex = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1165)			Ey = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
HXLINE(1166)			Ez = ((this->b2->rot - this->b1->rot) - this->phase);
            		}
HXLINE(1168)		HX_VARI( Float,Jx) = ((Float)0.0);
HXLINE(1169)		HX_VARI( Float,Jy) = ((Float)0.0);
HXLINE(1170)		HX_VARI( Float,Jz) = ((Float)0.0);
HXLINE(1171)		bool _hx_tmp;
HXDLIN(1171)		if (this->breakUnderError) {
HXLINE(1171)			_hx_tmp = ((((Ex * Ex) + (Ey * Ey)) + (Ez * Ez)) > (this->maxError * this->maxError));
            		}
            		else {
HXLINE(1171)			_hx_tmp = false;
            		}
HXDLIN(1171)		if (_hx_tmp) {
HXLINE(1171)			return true;
            		}
HXLINE(1172)		HX_VARI( bool,cont) = true;
HXLINE(1173)		if ((((Ex * Ex) + (Ey * Ey)) < (::nape::Config_obj::constraintLinearSlop * ::nape::Config_obj::constraintLinearSlop))) {
HXLINE(1174)			cont = false;
HXLINE(1175)			{
HXLINE(1176)				Ex = (int)0;
HXLINE(1177)				Ey = (int)0;
            			}
            		}
HXLINE(1196)		HX_VARI( Float,x) = ::nape::Config_obj::constraintAngularSlop;
HXDLIN(1196)		if (((Ez * Ez) < (x * x))) {
HXLINE(1197)			if (!(cont)) {
HXLINE(1197)				return false;
            			}
            			else {
HXLINE(1198)				Ez = (int)0;
            			}
            		}
HXLINE(1200)		{
HXLINE(1202)			{
HXLINE(1212)				Ex = (Ex * ((Float)0.5));
HXLINE(1213)				Ey = (Ey * ((Float)0.5));
            			}
HXLINE(1215)			Ez = (Ez * ((Float)0.5));
            		}
HXLINE(1217)		if ((((Ex * Ex) + (Ey * Ey)) > (int)6)) {
HXLINE(1218)			HX_VARI( Float,k) = (this->b1->smass + this->b2->smass);
HXLINE(1219)			if ((k > ::nape::Config_obj::epsilon)) {
HXLINE(1220)				k = ((Float)((Float)0.75) / (Float)k);
HXLINE(1221)				{
HXLINE(1222)					Jx = (-(Ex) * k);
HXLINE(1223)					Jy = (-(Ey) * k);
            				}
HXLINE(1241)				{
HXLINE(1251)					HX_VARI( Float,ls) = ((Jx * Jx) + (Jy * Jy));
HXLINE(1252)					if ((ls > (int)400)) {
HXLINE(1262)						HX_VARI( Float,t) = ((int)20 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls)));
HXLINE(1271)						Jx = (Jx * t);
HXLINE(1272)						Jy = (Jy * t);
            					}
            				}
HXLINE(1276)				{
HXLINE(1277)					HX_VARI_NAME( Float,t1,"t") = this->b1->imass;
HXLINE(1286)					 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(1286)					_hx_tmp1->posx = (_hx_tmp1->posx - (Jx * t1));
HXLINE(1287)					 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(1287)					_hx_tmp2->posy = (_hx_tmp2->posy - (Jy * t1));
            				}
HXLINE(1289)				{
HXLINE(1290)					HX_VARI_NAME( Float,t2,"t") = this->b2->imass;
HXLINE(1299)					 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(1299)					_hx_tmp3->posx = (_hx_tmp3->posx + (Jx * t2));
HXLINE(1300)					 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(1300)					_hx_tmp4->posy = (_hx_tmp4->posy + (Jy * t2));
            				}
HXLINE(1302)				{
HXLINE(1303)					Ex = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1304)					Ey = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
HXLINE(1305)					Ez = ((this->b2->rot - this->b1->rot) - this->phase);
            				}
HXLINE(1307)				{
HXLINE(1309)					{
HXLINE(1319)						Ex = (Ex * ((Float)0.5));
HXLINE(1320)						Ey = (Ey * ((Float)0.5));
            					}
HXLINE(1322)					Ez = (Ez * ((Float)0.5));
            				}
            			}
            		}
HXLINE(1326)		HX_VARI( Float,Ka) = ((Float)0.0);
HXLINE(1327)		HX_VARI( Float,Kb) = ((Float)0.0);
HXLINE(1328)		HX_VARI( Float,Kd) = ((Float)0.0);
HXLINE(1329)		HX_VARI( Float,Kc) = ((Float)0.0);
HXLINE(1330)		HX_VARI( Float,Ke) = ((Float)0.0);
HXLINE(1331)		HX_VARI( Float,Kf) = ((Float)0.0);
HXLINE(1332)		{
HXLINE(1333)			HX_VARI( Float,m) = (this->b1->smass + this->b2->smass);
HXLINE(1334)			{
HXLINE(1335)				Ka = m;
HXLINE(1336)				Kb = (int)0;
HXLINE(1337)				Kd = m;
HXLINE(1338)				Kc = (int)0;
HXLINE(1339)				Ke = (int)0;
HXLINE(1340)				Kf = (int)0;
            			}
HXLINE(1342)			if ((this->b1->sinertia != (int)0)) {
HXLINE(1343)				HX_VARI( Float,X) = (r1x * this->b1->sinertia);
HXLINE(1344)				HX_VARI( Float,Y) = (r1y * this->b1->sinertia);
HXLINE(1345)				{
HXLINE(1346)					Ka = (m + (Y * r1y));
HXLINE(1347)					Kb = (Kb + (-(Y) * r1x));
HXLINE(1348)					Kd = (m + (X * r1x));
HXLINE(1349)					Kc = (Kc + -(Y));
HXLINE(1350)					Ke = (Ke + X);
HXLINE(1351)					Kf = (Kf + this->b1->sinertia);
            				}
            			}
HXLINE(1354)			if ((this->b2->sinertia != (int)0)) {
HXLINE(1355)				HX_VARI_NAME( Float,X1,"X") = (r2x * this->b2->sinertia);
HXLINE(1356)				HX_VARI_NAME( Float,Y1,"Y") = (r2y * this->b2->sinertia);
HXLINE(1357)				{
HXLINE(1358)					Ka = (Ka + (Y1 * r2y));
HXLINE(1359)					Kb = (Kb + (-(Y1) * r2x));
HXLINE(1360)					Kd = (Kd + (X1 * r2x));
HXLINE(1361)					Kc = (Kc + -(Y1));
HXLINE(1362)					Ke = (Ke + X1);
HXLINE(1363)					Kf = (Kf + this->b2->sinertia);
            				}
            			}
            		}
HXLINE(1367)		{
HXLINE(1368)			{
HXLINE(1369)				Jx = -(Ex);
HXLINE(1370)				Jy = -(Ey);
            			}
HXLINE(1388)			Jz = -(Ez);
            		}
HXLINE(1390)		{
HXLINE(1400)			HX_VARI_NAME( Float,ls1,"ls") = ((Jx * Jx) + (Jy * Jy));
HXLINE(1401)			if ((ls1 > (int)36)) {
HXLINE(1411)				HX_VARI_NAME( Float,t3,"t") = ((int)6 * ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(ls1)));
HXLINE(1420)				Jx = (Jx * t3);
HXLINE(1421)				Jy = (Jy * t3);
            			}
            		}
HXLINE(1426)		{
HXLINE(1427)			HX_VARI( Float,det) = (((Ka * ((Kd * Kf) - (Ke * Ke))) + (Kb * ((Kc * Ke) - (Kb * Kf)))) + (Kc * ((Kb * Ke) - (Kc * Kd))));
HXLINE(1428)			if ((det != det)) {
HXLINE(1428)				Jz = (int)0;
HXDLIN(1428)				Jy = Jz;
HXDLIN(1428)				Jx = Jy;
            			}
            			else {
HXLINE(1429)				if ((det == (int)0)) {
HXLINE(1430)					if ((Ka != (int)0)) {
HXLINE(1430)						Jx = ((Float)Jx / (Float)Ka);
            					}
            					else {
HXLINE(1431)						Jx = (int)0;
            					}
HXLINE(1432)					if ((Kd != (int)0)) {
HXLINE(1432)						Jy = ((Float)Jy / (Float)Kd);
            					}
            					else {
HXLINE(1433)						Jy = (int)0;
            					}
HXLINE(1434)					if ((Kf != (int)0)) {
HXLINE(1434)						Jz = ((Float)Jz / (Float)Kf);
            					}
            					else {
HXLINE(1435)						Jz = (int)0;
            					}
            				}
            				else {
HXLINE(1438)					det = ((Float)(int)1 / (Float)det);
HXLINE(1439)					HX_VARI( Float,B) = ((Ke * Kc) - (Kb * Kf));
HXLINE(1440)					HX_VARI( Float,C) = ((Kb * Ke) - (Kc * Kd));
HXLINE(1441)					HX_VARI( Float,E) = ((Kb * Kc) - (Ka * Ke));
HXLINE(1442)					HX_VARI_NAME( Float,X2,"X") = (det * (((Jx * ((Kd * Kf) - (Ke * Ke))) + (Jy * B)) + (Jz * C)));
HXLINE(1443)					HX_VARI_NAME( Float,Y2,"Y") = (det * (((Jx * B) + (Jy * ((Ka * Kf) - (Kc * Kc)))) + (Jz * E)));
HXLINE(1444)					Jz = (det * (((Jx * C) + (Jy * E)) + (Jz * ((Ka * Kd) - (Kb * Kb)))));
HXLINE(1445)					{
HXLINE(1446)						Jx = X2;
HXLINE(1447)						Jy = Y2;
            					}
            				}
            			}
            		}
HXLINE(1468)		{
HXLINE(1469)			{
HXLINE(1470)				HX_VARI_NAME( Float,t4,"t") = this->b1->imass;
HXLINE(1479)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b1;
HXDLIN(1479)				_hx_tmp5->posx = (_hx_tmp5->posx - (Jx * t4));
HXLINE(1480)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b1;
HXDLIN(1480)				_hx_tmp6->posy = (_hx_tmp6->posy - (Jy * t4));
            			}
HXLINE(1482)			{
HXLINE(1483)				HX_VARI_NAME( Float,t5,"t") = this->b2->imass;
HXLINE(1492)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b2;
HXDLIN(1492)				_hx_tmp7->posx = (_hx_tmp7->posx + (Jx * t5));
HXLINE(1493)				 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b2;
HXDLIN(1493)				_hx_tmp8->posy = (_hx_tmp8->posy + (Jy * t5));
            			}
HXLINE(1495)			{
HXLINE(1495)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->b1;
HXDLIN(1495)				HX_VARI( Float,dr) = (-((((Jy * r1x) - (Jx * r1y)) + Jz)) * this->b1->iinertia);
HXDLIN(1495)				_this->rot = (_this->rot + dr);
HXDLIN(1495)				if (((dr * dr) > ((Float)0.0001))) {
HXLINE(1495)					_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1495)					_this->axisy = ::Math_obj::cos(_this->rot);
            				}
            				else {
HXLINE(1495)					HX_VARI( Float,d2) = (dr * dr);
HXDLIN(1495)					HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN(1495)					HX_VARI_NAME( Float,m1,"m") = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN(1495)					HX_VARI( Float,nx) = (((p * _this->axisx) + (dr * _this->axisy)) * m1);
HXDLIN(1495)					_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m1);
HXDLIN(1495)					_this->axisx = nx;
            				}
            			}
HXLINE(1496)			{
HXLINE(1496)				HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this1,"_this") = this->b2;
HXDLIN(1496)				HX_VARI_NAME( Float,dr1,"dr") = ((((Jy * r2x) - (Jx * r2y)) + Jz) * this->b2->iinertia);
HXDLIN(1496)				_this1->rot = (_this1->rot + dr1);
HXDLIN(1496)				if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(1496)					_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN(1496)					_this1->axisy = ::Math_obj::cos(_this1->rot);
            				}
            				else {
HXLINE(1496)					HX_VARI_NAME( Float,d21,"d2") = (dr1 * dr1);
HXDLIN(1496)					HX_VARI_NAME( Float,p1,"p") = ((int)1 - (((Float)0.5) * d21));
HXDLIN(1496)					HX_VARI_NAME( Float,m2,"m") = ((int)1 - ((Float)(d21 * d21) / (Float)(int)8));
HXDLIN(1496)					HX_VARI_NAME( Float,nx1,"nx") = (((p1 * _this1->axisx) + (dr1 * _this1->axisy)) * m2);
HXDLIN(1496)					_this1->axisy = (((p1 * _this1->axisy) - (dr1 * _this1->axisx)) * m2);
HXDLIN(1496)					_this1->axisx = nx1;
            				}
            			}
            		}
HXLINE(1529)		return false;
            	}


void ZPP_WeldJoint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_5c63fbb3de5f6a74_1531_draw)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
HXLINE(1532)		HX_VARI(  ::nape::constraint::WeldJoint,me) = this->outer_zn;
HXLINE(1533)		HX_VAR(  ::nape::phys::Body,a1);
HXDLIN(1533)		if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1533)			a1 = null();
            		}
            		else {
HXLINE(1533)			a1 = me->zpp_inner_zn->b1->outer;
            		}
HXDLIN(1533)		if (hx::IsNull( me->zpp_inner_zn->wrap_a1 )) {
HXLINE(1533)			me->zpp_inner_zn->setup_a1();
            		}
HXDLIN(1533)		HX_VARI_NAME(  ::nape::geom::Vec2,a11,"a1") = a1->localPointToWorld(me->zpp_inner_zn->wrap_a1,null());
HXLINE(1534)		HX_VAR(  ::nape::phys::Body,a2);
HXDLIN(1534)		if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1534)			a2 = null();
            		}
            		else {
HXLINE(1534)			a2 = me->zpp_inner_zn->b2->outer;
            		}
HXDLIN(1534)		if (hx::IsNull( me->zpp_inner_zn->wrap_a2 )) {
HXLINE(1534)			me->zpp_inner_zn->setup_a2();
            		}
HXDLIN(1534)		HX_VARI_NAME(  ::nape::geom::Vec2,a21,"a2") = a2->localPointToWorld(me->zpp_inner_zn->wrap_a2,null());
HXLINE(1535)		if (!(this->stiff)) {
HXLINE(1536)			HX_VARI(  ::nape::geom::Vec2,n) = a21->sub(a11,null());
HXLINE(1537)			{
HXLINE(1537)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = n->zpp_inner;
HXDLIN(1537)				if (hx::IsNotNull( _this->_validate )) {
HXLINE(1537)					_this->_validate();
            				}
            			}
HXDLIN(1537)			HX_VARI( Float,nl) = n->zpp_inner->x;
HXDLIN(1537)			{
HXLINE(1537)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = n->zpp_inner;
HXDLIN(1537)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1537)					_this1->_validate();
            				}
            			}
HXDLIN(1537)			HX_VARI_NAME( Float,nl1,"nl") = (nl * n->zpp_inner->x);
HXDLIN(1537)			{
HXLINE(1537)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = n->zpp_inner;
HXDLIN(1537)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1537)					_this2->_validate();
            				}
            			}
HXDLIN(1537)			HX_VARI_NAME( Float,nl2,"nl") = n->zpp_inner->y;
HXDLIN(1537)			{
HXLINE(1537)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = n->zpp_inner;
HXDLIN(1537)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1537)					_this3->_validate();
            				}
            			}
HXLINE(1538)			if ((::Math_obj::sqrt((nl1 + (nl2 * n->zpp_inner->y))) != (int)0)) {
HXLINE(1538)				g->drawSpring(a11,a21,(int)16711935,null(),null());
            			}
HXLINE(1539)			{
HXLINE(1539)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = n->zpp_inner;
HXDLIN(1539)				n->zpp_inner->outer = null();
HXDLIN(1539)				n->zpp_inner = null();
HXDLIN(1539)				{
HXLINE(1539)					n->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1539)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = n;
            				}
HXDLIN(1539)				{
HXLINE(1539)					{
HXLINE(1539)						if (hx::IsNotNull( inner->outer )) {
HXLINE(1539)							inner->outer->zpp_inner = null();
HXDLIN(1539)							inner->outer = null();
            						}
HXDLIN(1539)						inner->_isimmutable = null();
HXDLIN(1539)						inner->_validate = null();
HXDLIN(1539)						inner->_invalidate = null();
            					}
HXDLIN(1539)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1539)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
HXLINE(1541)			HX_VARI( Float,delrad) = ((Float)((Float)(int)5 / (Float)::Math_obj::PI) / (Float)(int)2);
HXLINE(1543)			 ::nape::phys::Body _hx_tmp;
HXDLIN(1543)			if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1543)				_hx_tmp = null();
            			}
            			else {
HXLINE(1543)				_hx_tmp = me->zpp_inner_zn->b1->outer;
            			}
HXDLIN(1543)			HX_VAR_NAME(  ::nape::phys::Body,_this4,"_this");
HXDLIN(1543)			if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1543)				_this4 = null();
            			}
            			else {
HXLINE(1543)				_this4 = me->zpp_inner_zn->b1->outer;
            			}
HXDLIN(1543)			 ::nape::space::Space _this5;
HXDLIN(1543)			if (hx::IsNull( _this4->zpp_inner->space )) {
HXLINE(1543)				_this5 = null();
            			}
            			else {
HXLINE(1543)				_this5 = _this4->zpp_inner->space->outer;
            			}
HXDLIN(1543)			if (hx::IsNotEq( _hx_tmp,_this5->zpp_inner->_hx___static )) {
HXLINE(1544)				 ::nape::phys::Body _this6;
HXDLIN(1544)				if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1544)					_this6 = null();
            				}
            				else {
HXLINE(1544)					_this6 = me->zpp_inner_zn->b2->outer;
            				}
HXDLIN(1544)				HX_VARI( Float,max) = (_this6->zpp_inner->rot - me->zpp_inner_zn->phase);
HXLINE(1545)				 ::nape::phys::Body _this7;
HXDLIN(1545)				if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1545)					_this7 = null();
            				}
            				else {
HXLINE(1545)					_this7 = me->zpp_inner_zn->b1->outer;
            				}
HXDLIN(1545)				HX_VARI( Float,min) = _this7->zpp_inner->rot;
HXLINE(1546)				if ((min > max)) {
HXLINE(1547)					HX_VARI( Float,t) = min;
HXLINE(1548)					min = max;
HXLINE(1549)					max = t;
            				}
HXLINE(1551)				HX_VAR_NAME(  ::nape::phys::Body,_this8,"_this");
HXDLIN(1551)				if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1551)					_this8 = null();
            				}
            				else {
HXLINE(1551)					_this8 = me->zpp_inner_zn->b1->outer;
            				}
HXDLIN(1551)				if (hx::IsNull( _this8->zpp_inner->wrap_pos )) {
HXLINE(1551)					_this8->zpp_inner->setupPosition();
            				}
HXDLIN(1551)				::zpp_nape::constraint::ZPP_AngleDraw_obj::drawSpiralSpring(g,_this8->zpp_inner->wrap_pos,min,max,((int)10 + ((min - min) * delrad)),((int)10 + ((max - min) * delrad)),(int)16711808,null());
HXLINE(1552)				HX_VAR_NAME(  ::nape::phys::Body,_this9,"_this");
HXDLIN(1552)				if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1552)					_this9 = null();
            				}
            				else {
HXLINE(1552)					_this9 = me->zpp_inner_zn->b1->outer;
            				}
HXDLIN(1552)				if (hx::IsNull( _this9->zpp_inner->wrap_pos )) {
HXLINE(1552)					_this9->zpp_inner->setupPosition();
            				}
HXDLIN(1552)				 ::nape::phys::Body _this10;
HXDLIN(1552)				if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1552)					_this10 = null();
            				}
            				else {
HXLINE(1552)					_this10 = me->zpp_inner_zn->b1->outer;
            				}
HXDLIN(1552)				 ::nape::phys::Body _this11;
HXDLIN(1552)				if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1552)					_this11 = null();
            				}
            				else {
HXLINE(1552)					_this11 = me->zpp_inner_zn->b1->outer;
            				}
HXDLIN(1552)				::zpp_nape::constraint::ZPP_AngleDraw_obj::indicator(g,_this9->zpp_inner->wrap_pos,_this10->zpp_inner->rot,((int)10 + ((_this11->zpp_inner->rot - min) * delrad)),(int)16711808);
            			}
HXLINE(1556)			 ::nape::phys::Body _hx_tmp1;
HXDLIN(1556)			if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1556)				_hx_tmp1 = null();
            			}
            			else {
HXLINE(1556)				_hx_tmp1 = me->zpp_inner_zn->b2->outer;
            			}
HXDLIN(1556)			HX_VAR_NAME(  ::nape::phys::Body,_this12,"_this");
HXDLIN(1556)			if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1556)				_this12 = null();
            			}
            			else {
HXLINE(1556)				_this12 = me->zpp_inner_zn->b2->outer;
            			}
HXDLIN(1556)			 ::nape::space::Space _this13;
HXDLIN(1556)			if (hx::IsNull( _this12->zpp_inner->space )) {
HXLINE(1556)				_this13 = null();
            			}
            			else {
HXLINE(1556)				_this13 = _this12->zpp_inner->space->outer;
            			}
HXDLIN(1556)			if (hx::IsNotEq( _hx_tmp1,_this13->zpp_inner->_hx___static )) {
HXLINE(1557)				 ::nape::phys::Body _this14;
HXDLIN(1557)				if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(1557)					_this14 = null();
            				}
            				else {
HXLINE(1557)					_this14 = me->zpp_inner_zn->b1->outer;
            				}
HXDLIN(1557)				HX_VARI_NAME( Float,max1,"max") = (me->zpp_inner_zn->phase + _this14->zpp_inner->rot);
HXLINE(1558)				 ::nape::phys::Body _this15;
HXDLIN(1558)				if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1558)					_this15 = null();
            				}
            				else {
HXLINE(1558)					_this15 = me->zpp_inner_zn->b2->outer;
            				}
HXDLIN(1558)				HX_VARI_NAME( Float,min1,"min") = _this15->zpp_inner->rot;
HXLINE(1559)				if ((min1 > max1)) {
HXLINE(1560)					HX_VARI_NAME( Float,t1,"t") = min1;
HXLINE(1561)					min1 = max1;
HXLINE(1562)					max1 = t1;
            				}
HXLINE(1564)				HX_VAR_NAME(  ::nape::phys::Body,_this16,"_this");
HXDLIN(1564)				if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1564)					_this16 = null();
            				}
            				else {
HXLINE(1564)					_this16 = me->zpp_inner_zn->b2->outer;
            				}
HXDLIN(1564)				if (hx::IsNull( _this16->zpp_inner->wrap_pos )) {
HXLINE(1564)					_this16->zpp_inner->setupPosition();
            				}
HXDLIN(1564)				::zpp_nape::constraint::ZPP_AngleDraw_obj::drawSpiralSpring(g,_this16->zpp_inner->wrap_pos,min1,max1,((int)10 + ((min1 - min1) * delrad)),((int)10 + ((max1 - min1) * delrad)),(int)8388863,null());
HXLINE(1565)				HX_VAR_NAME(  ::nape::phys::Body,_this17,"_this");
HXDLIN(1565)				if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1565)					_this17 = null();
            				}
            				else {
HXLINE(1565)					_this17 = me->zpp_inner_zn->b2->outer;
            				}
HXDLIN(1565)				if (hx::IsNull( _this17->zpp_inner->wrap_pos )) {
HXLINE(1565)					_this17->zpp_inner->setupPosition();
            				}
HXDLIN(1565)				 ::nape::phys::Body _this18;
HXDLIN(1565)				if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1565)					_this18 = null();
            				}
            				else {
HXLINE(1565)					_this18 = me->zpp_inner_zn->b2->outer;
            				}
HXDLIN(1565)				 ::nape::phys::Body _this19;
HXDLIN(1565)				if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(1565)					_this19 = null();
            				}
            				else {
HXLINE(1565)					_this19 = me->zpp_inner_zn->b2->outer;
            				}
HXDLIN(1565)				::zpp_nape::constraint::ZPP_AngleDraw_obj::indicator(g,_this17->zpp_inner->wrap_pos,_this18->zpp_inner->rot,((int)10 + ((_this19->zpp_inner->rot - min1) * delrad)),(int)8388863);
            			}
            		}
HXLINE(1569)		g->drawFilledCircle(a11,(int)2,(int)255);
HXLINE(1570)		g->drawFilledCircle(a21,(int)2,(int)16711680);
HXLINE(1571)		{
HXLINE(1571)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = a11->zpp_inner;
HXDLIN(1571)			a11->zpp_inner->outer = null();
HXDLIN(1571)			a11->zpp_inner = null();
HXDLIN(1571)			{
HXLINE(1571)				a11->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1571)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a11;
            			}
HXDLIN(1571)			{
HXLINE(1571)				{
HXLINE(1571)					if (hx::IsNotNull( inner1->outer )) {
HXLINE(1571)						inner1->outer->zpp_inner = null();
HXDLIN(1571)						inner1->outer = null();
            					}
HXDLIN(1571)					inner1->_isimmutable = null();
HXDLIN(1571)					inner1->_validate = null();
HXDLIN(1571)					inner1->_invalidate = null();
            				}
HXDLIN(1571)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1571)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE(1572)		{
HXLINE(1572)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = a21->zpp_inner;
HXDLIN(1572)			a21->zpp_inner->outer = null();
HXDLIN(1572)			a21->zpp_inner = null();
HXDLIN(1572)			{
HXLINE(1572)				a21->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1572)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a21;
            			}
HXDLIN(1572)			{
HXLINE(1572)				{
HXLINE(1572)					if (hx::IsNotNull( inner2->outer )) {
HXLINE(1572)						inner2->outer->zpp_inner = null();
HXDLIN(1572)						inner2->outer = null();
            					}
HXDLIN(1572)					inner2->_isimmutable = null();
HXDLIN(1572)					inner2->_validate = null();
HXDLIN(1572)					inner2->_invalidate = null();
            				}
HXDLIN(1572)				inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1572)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            			}
            		}
            	}



hx::ObjectPtr< ZPP_WeldJoint_obj > ZPP_WeldJoint_obj::__new() {
	hx::ObjectPtr< ZPP_WeldJoint_obj > __this = new ZPP_WeldJoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_WeldJoint_obj > ZPP_WeldJoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_WeldJoint_obj *__this = (ZPP_WeldJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_WeldJoint_obj), true, "zpp_nape.constraint.ZPP_WeldJoint"));
	*(void **)__this = ZPP_WeldJoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_WeldJoint_obj::ZPP_WeldJoint_obj()
{
}

void ZPP_WeldJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_WeldJoint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(a1localx,"a1localx");
	HX_MARK_MEMBER_NAME(a1localy,"a1localy");
	HX_MARK_MEMBER_NAME(a1relx,"a1relx");
	HX_MARK_MEMBER_NAME(a1rely,"a1rely");
	HX_MARK_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(a2localx,"a2localx");
	HX_MARK_MEMBER_NAME(a2localy,"a2localy");
	HX_MARK_MEMBER_NAME(a2relx,"a2relx");
	HX_MARK_MEMBER_NAME(a2rely,"a2rely");
	HX_MARK_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_MARK_MEMBER_NAME(phase,"phase");
	HX_MARK_MEMBER_NAME(kMassa,"kMassa");
	HX_MARK_MEMBER_NAME(kMassb,"kMassb");
	HX_MARK_MEMBER_NAME(kMassd,"kMassd");
	HX_MARK_MEMBER_NAME(kMassc,"kMassc");
	HX_MARK_MEMBER_NAME(kMasse,"kMasse");
	HX_MARK_MEMBER_NAME(kMassf,"kMassf");
	HX_MARK_MEMBER_NAME(jAccx,"jAccx");
	HX_MARK_MEMBER_NAME(jAccy,"jAccy");
	HX_MARK_MEMBER_NAME(jAccz,"jAccz");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(gamma,"gamma");
	HX_MARK_MEMBER_NAME(biasx,"biasx");
	HX_MARK_MEMBER_NAME(biasy,"biasy");
	HX_MARK_MEMBER_NAME(biasz,"biasz");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_WeldJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(a1localx,"a1localx");
	HX_VISIT_MEMBER_NAME(a1localy,"a1localy");
	HX_VISIT_MEMBER_NAME(a1relx,"a1relx");
	HX_VISIT_MEMBER_NAME(a1rely,"a1rely");
	HX_VISIT_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(a2localx,"a2localx");
	HX_VISIT_MEMBER_NAME(a2localy,"a2localy");
	HX_VISIT_MEMBER_NAME(a2relx,"a2relx");
	HX_VISIT_MEMBER_NAME(a2rely,"a2rely");
	HX_VISIT_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_VISIT_MEMBER_NAME(phase,"phase");
	HX_VISIT_MEMBER_NAME(kMassa,"kMassa");
	HX_VISIT_MEMBER_NAME(kMassb,"kMassb");
	HX_VISIT_MEMBER_NAME(kMassd,"kMassd");
	HX_VISIT_MEMBER_NAME(kMassc,"kMassc");
	HX_VISIT_MEMBER_NAME(kMasse,"kMasse");
	HX_VISIT_MEMBER_NAME(kMassf,"kMassf");
	HX_VISIT_MEMBER_NAME(jAccx,"jAccx");
	HX_VISIT_MEMBER_NAME(jAccy,"jAccy");
	HX_VISIT_MEMBER_NAME(jAccz,"jAccz");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(gamma,"gamma");
	HX_VISIT_MEMBER_NAME(biasx,"biasx");
	HX_VISIT_MEMBER_NAME(biasy,"biasy");
	HX_VISIT_MEMBER_NAME(biasz,"biasz");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_WeldJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"phase") ) { return hx::Val( phase); }
		if (HX_FIELD_EQ(inName,"jAccx") ) { return hx::Val( jAccx); }
		if (HX_FIELD_EQ(inName,"jAccy") ) { return hx::Val( jAccy); }
		if (HX_FIELD_EQ(inName,"jAccz") ) { return hx::Val( jAccz); }
		if (HX_FIELD_EQ(inName,"gamma") ) { return hx::Val( gamma); }
		if (HX_FIELD_EQ(inName,"biasx") ) { return hx::Val( biasx); }
		if (HX_FIELD_EQ(inName,"biasy") ) { return hx::Val( biasy); }
		if (HX_FIELD_EQ(inName,"biasz") ) { return hx::Val( biasz); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { return hx::Val( a1relx); }
		if (HX_FIELD_EQ(inName,"a1rely") ) { return hx::Val( a1rely); }
		if (HX_FIELD_EQ(inName,"a2relx") ) { return hx::Val( a2relx); }
		if (HX_FIELD_EQ(inName,"a2rely") ) { return hx::Val( a2rely); }
		if (HX_FIELD_EQ(inName,"kMassa") ) { return hx::Val( kMassa); }
		if (HX_FIELD_EQ(inName,"kMassb") ) { return hx::Val( kMassb); }
		if (HX_FIELD_EQ(inName,"kMassd") ) { return hx::Val( kMassd); }
		if (HX_FIELD_EQ(inName,"kMassc") ) { return hx::Val( kMassc); }
		if (HX_FIELD_EQ(inName,"kMasse") ) { return hx::Val( kMasse); }
		if (HX_FIELD_EQ(inName,"kMassf") ) { return hx::Val( kMassf); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { return hx::Val( wrap_a1); }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { return hx::Val( wrap_a2); }
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn); }
		if (HX_FIELD_EQ(inName,"a1localx") ) { return hx::Val( a1localx); }
		if (HX_FIELD_EQ(inName,"a1localy") ) { return hx::Val( a1localy); }
		if (HX_FIELD_EQ(inName,"setup_a1") ) { return hx::Val( setup_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"a2localx") ) { return hx::Val( a2localx); }
		if (HX_FIELD_EQ(inName,"a2localy") ) { return hx::Val( a2localy); }
		if (HX_FIELD_EQ(inName,"setup_a2") ) { return hx::Val( setup_a2_dyn()); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a1") ) { return hx::Val( validate_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a2") ) { return hx::Val( validate_a2_dyn()); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"invalidate_a1") ) { return hx::Val( invalidate_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_a2") ) { return hx::Val( invalidate_a2_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn()); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_WeldJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"phase") ) { phase=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAccx") ) { jAccx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAccy") ) { jAccy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAccz") ) { jAccz=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamma") ) { gamma=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasx") ) { biasx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasy") ) { biasy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"biasz") ) { biasz=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { a1relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1rely") ) { a1rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2relx") ) { a2relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2rely") ) { a2rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassa") ) { kMassa=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassb") ) { kMassb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassd") ) { kMassd=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassc") ) { kMassc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMasse") ) { kMasse=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMassf") ) { kMassf=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { wrap_a1=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { wrap_a2=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::WeldJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localx") ) { a1localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localy") ) { a1localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localx") ) { a2localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localy") ) { a2localy=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_WeldJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"));
	outFields->push(HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb"));
	outFields->push(HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb"));
	outFields->push(HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a"));
	outFields->push(HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a"));
	outFields->push(HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("b2","\x90","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25"));
	outFields->push(HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25"));
	outFields->push(HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde"));
	outFields->push(HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde"));
	outFields->push(HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("phase","\x3b","\x28","\xe9","\xc1"));
	outFields->push(HX_HCSTRING("kMassa","\x82","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("kMassb","\x83","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("kMassd","\x85","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("kMassc","\x84","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("kMasse","\x86","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("kMassf","\x87","\xa0","\x7f","\x5e"));
	outFields->push(HX_HCSTRING("jAccx","\xa1","\xd1","\xbb","\x33"));
	outFields->push(HX_HCSTRING("jAccy","\xa2","\xd1","\xbb","\x33"));
	outFields->push(HX_HCSTRING("jAccz","\xa3","\xd1","\xbb","\x33"));
	outFields->push(HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"));
	outFields->push(HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"));
	outFields->push(HX_HCSTRING("biasx","\xdf","\x3f","\xf6","\xb2"));
	outFields->push(HX_HCSTRING("biasy","\xe0","\x3f","\xf6","\xb2"));
	outFields->push(HX_HCSTRING("biasz","\xe1","\x3f","\xf6","\xb2"));
	outFields->push(HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_WeldJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::constraint::WeldJoint*/ ,(int)offsetof(ZPP_WeldJoint_obj,outer_zn),HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_WeldJoint_obj,b1),HX_HCSTRING("b1","\x8f","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a1localx),HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a1localy),HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a1relx),HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a1rely),HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_WeldJoint_obj,wrap_a1),HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_WeldJoint_obj,b2),HX_HCSTRING("b2","\x90","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a2localx),HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a2localy),HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a2relx),HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,a2rely),HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_WeldJoint_obj,wrap_a2),HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,phase),HX_HCSTRING("phase","\x3b","\x28","\xe9","\xc1")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,kMassa),HX_HCSTRING("kMassa","\x82","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,kMassb),HX_HCSTRING("kMassb","\x83","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,kMassd),HX_HCSTRING("kMassd","\x85","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,kMassc),HX_HCSTRING("kMassc","\x84","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,kMasse),HX_HCSTRING("kMasse","\x86","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,kMassf),HX_HCSTRING("kMassf","\x87","\xa0","\x7f","\x5e")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,jAccx),HX_HCSTRING("jAccx","\xa1","\xd1","\xbb","\x33")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,jAccy),HX_HCSTRING("jAccy","\xa2","\xd1","\xbb","\x33")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,jAccz),HX_HCSTRING("jAccz","\xa3","\xd1","\xbb","\x33")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,jMax),HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,gamma),HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,biasx),HX_HCSTRING("biasx","\xdf","\x3f","\xf6","\xb2")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,biasy),HX_HCSTRING("biasy","\xe0","\x3f","\xf6","\xb2")},
	{hx::fsFloat,(int)offsetof(ZPP_WeldJoint_obj,biasz),HX_HCSTRING("biasz","\xe1","\x3f","\xf6","\xb2")},
	{hx::fsBool,(int)offsetof(ZPP_WeldJoint_obj,stepped),HX_HCSTRING("stepped","\x03","\x05","\x60","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_WeldJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_WeldJoint_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("activeBodies","\xe6","\x69","\xf8","\xba"),
	HX_HCSTRING("inactiveBodies","\x4b","\x89","\xc5","\x8c"),
	HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"),
	HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb"),
	HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb"),
	HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a"),
	HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a"),
	HX_HCSTRING("validate_a1","\xf9","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a1","\x34","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a1","\x72","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d"),
	HX_HCSTRING("b2","\x90","\x55","\x00","\x00"),
	HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25"),
	HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25"),
	HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde"),
	HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde"),
	HX_HCSTRING("validate_a2","\xfa","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a2","\x35","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a2","\x73","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d"),
	HX_HCSTRING("phase","\x3b","\x28","\xe9","\xc1"),
	HX_HCSTRING("kMassa","\x82","\xa0","\x7f","\x5e"),
	HX_HCSTRING("kMassb","\x83","\xa0","\x7f","\x5e"),
	HX_HCSTRING("kMassd","\x85","\xa0","\x7f","\x5e"),
	HX_HCSTRING("kMassc","\x84","\xa0","\x7f","\x5e"),
	HX_HCSTRING("kMasse","\x86","\xa0","\x7f","\x5e"),
	HX_HCSTRING("kMassf","\x87","\xa0","\x7f","\x5e"),
	HX_HCSTRING("jAccx","\xa1","\xd1","\xbb","\x33"),
	HX_HCSTRING("jAccy","\xa2","\xd1","\xbb","\x33"),
	HX_HCSTRING("jAccz","\xa3","\xd1","\xbb","\x33"),
	HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"),
	HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"),
	HX_HCSTRING("biasx","\xdf","\x3f","\xf6","\xb2"),
	HX_HCSTRING("biasy","\xe0","\x3f","\xf6","\xb2"),
	HX_HCSTRING("biasz","\xe1","\x3f","\xf6","\xb2"),
	HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("wake_connected","\xae","\xcf","\xdd","\x3d"),
	HX_HCSTRING("forest","\xdd","\x8c","\x88","\xfd"),
	HX_HCSTRING("pair_exists","\xa1","\x6a","\x58","\x69"),
	HX_HCSTRING("clearcache","\x95","\x69","\xf1","\x82"),
	HX_HCSTRING("preStep","\x0f","\xc1","\xc0","\x24"),
	HX_HCSTRING("warmStart","\xdd","\x27","\x03","\xeb"),
	HX_HCSTRING("applyImpulseVel","\xb6","\xc7","\x50","\x1f"),
	HX_HCSTRING("applyImpulsePos","\xed","\x42","\x4c","\x1f"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	::String(null()) };

static void ZPP_WeldJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_WeldJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_WeldJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_WeldJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_WeldJoint_obj::__mClass;

void ZPP_WeldJoint_obj::__register()
{
	hx::Object *dummy = new ZPP_WeldJoint_obj;
	ZPP_WeldJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.constraint.ZPP_WeldJoint","\x8f","\x37","\x47","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_WeldJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_WeldJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_WeldJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_WeldJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_WeldJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_WeldJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
