// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_MotorJoint
#include <nape/constraint/MotorJoint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_MotorJoint
#include <zpp_nape/constraint/ZPP_MotorJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_174_new,"zpp_nape.constraint.ZPP_MotorJoint","new",0xa79859fc,"zpp_nape.constraint.ZPP_MotorJoint.new","zpp_nape/constraint/MotorJoint.hx",174,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_179_bodyImpulse,"zpp_nape.constraint.ZPP_MotorJoint","bodyImpulse",0xa733fbcf,"zpp_nape.constraint.ZPP_MotorJoint.bodyImpulse","zpp_nape/constraint/MotorJoint.hx",179,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_185_activeBodies,"zpp_nape.constraint.ZPP_MotorJoint","activeBodies",0x12bbccca,"zpp_nape.constraint.ZPP_MotorJoint.activeBodies","zpp_nape/constraint/MotorJoint.hx",185,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_193_inactiveBodies,"zpp_nape.constraint.ZPP_MotorJoint","inactiveBodies",0xe6526d2f,"zpp_nape.constraint.ZPP_MotorJoint.inactiveBodies","zpp_nape/constraint/MotorJoint.hx",193,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_207_copy,"zpp_nape.constraint.ZPP_MotorJoint","copy",0xf6789a99,"zpp_nape.constraint.ZPP_MotorJoint.copy","zpp_nape/constraint/MotorJoint.hx",207,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_228_copy,"zpp_nape.constraint.ZPP_MotorJoint","copy",0xf6789a99,"zpp_nape.constraint.ZPP_MotorJoint.copy","zpp_nape/constraint/MotorJoint.hx",228,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_249_copy,"zpp_nape.constraint.ZPP_MotorJoint","copy",0xf6789a99,"zpp_nape.constraint.ZPP_MotorJoint.copy","zpp_nape/constraint/MotorJoint.hx",249,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_260_validate,"zpp_nape.constraint.ZPP_MotorJoint","validate",0xcb3af17a,"zpp_nape.constraint.ZPP_MotorJoint.validate","zpp_nape/constraint/MotorJoint.hx",260,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_266_wake_connected,"zpp_nape.constraint.ZPP_MotorJoint","wake_connected",0x976ab392,"zpp_nape.constraint.ZPP_MotorJoint.wake_connected","zpp_nape/constraint/MotorJoint.hx",266,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_270_forest,"zpp_nape.constraint.ZPP_MotorJoint","forest",0x2e1cecc1,"zpp_nape.constraint.ZPP_MotorJoint.forest","zpp_nape/constraint/MotorJoint.hx",270,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_369_pair_exists,"zpp_nape.constraint.ZPP_MotorJoint","pair_exists",0xb0e9f03d,"zpp_nape.constraint.ZPP_MotorJoint.pair_exists","zpp_nape/constraint/MotorJoint.hx",369,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_371_clearcache,"zpp_nape.constraint.ZPP_MotorJoint","clearcache",0xe5fd8b79,"zpp_nape.constraint.ZPP_MotorJoint.clearcache","zpp_nape/constraint/MotorJoint.hx",371,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_375_preStep,"zpp_nape.constraint.ZPP_MotorJoint","preStep",0x760048ab,"zpp_nape.constraint.ZPP_MotorJoint.preStep","zpp_nape/constraint/MotorJoint.hx",375,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_397_warmStart,"zpp_nape.constraint.ZPP_MotorJoint","warmStart",0xb0e8ce79,"zpp_nape.constraint.ZPP_MotorJoint.warmStart","zpp_nape/constraint/MotorJoint.hx",397,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_402_applyImpulseVel,"zpp_nape.constraint.ZPP_MotorJoint","applyImpulseVel",0x210b4b52,"zpp_nape.constraint.ZPP_MotorJoint.applyImpulseVel","zpp_nape/constraint/MotorJoint.hx",402,0x608da4b9)
HX_DEFINE_STACK_FRAME(_hx_pos_088e1f9ee85e486b_436_applyImpulsePos,"zpp_nape.constraint.ZPP_MotorJoint","applyImpulsePos",0x2106c689,"zpp_nape.constraint.ZPP_MotorJoint.applyImpulsePos","zpp_nape/constraint/MotorJoint.hx",436,0x608da4b9)
namespace zpp_nape{
namespace constraint{

void ZPP_MotorJoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_174_new)
            	HX_STACK_THIS(this)
HXLINE( 206)		this->stepped = false;
HXLINE( 205)		this->jMax = ((Float)0.0);
HXLINE( 204)		this->jAcc = ((Float)0.0);
HXLINE( 203)		this->kMass = ((Float)0.0);
HXLINE( 202)		this->b2 = null();
HXLINE( 201)		this->b1 = null();
HXLINE( 177)		this->rate = ((Float)0.0);
HXLINE( 176)		this->ratio = ((Float)0.0);
HXLINE( 175)		this->outer_zn = null();
HXLINE( 255)		super::__construct();
HXLINE( 256)		this->jAcc = (int)0;
HXLINE( 257)		this->stepped = false;
HXLINE( 258)		this->_hx___velocity = true;
            	}

Dynamic ZPP_MotorJoint_obj::__CreateEmpty() { return new ZPP_MotorJoint_obj; }

void *ZPP_MotorJoint_obj::_hx_vtable = 0;

Dynamic ZPP_MotorJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_MotorJoint_obj > _hx_result = new ZPP_MotorJoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_MotorJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x212f4888) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x212f4888;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

 ::nape::geom::Vec3 ZPP_MotorJoint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_179_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 179)		if (this->stepped) {
HXLINE( 180)			if (hx::IsEq( b,this->b1 )) {
HXLINE( 180)				return ::nape::geom::Vec3_obj::get((int)0,(int)0,-(this->jAcc));
            			}
            			else {
HXLINE( 181)				return ::nape::geom::Vec3_obj::get((int)0,(int)0,(this->ratio * this->jAcc));
            			}
            		}
            		else {
HXLINE( 183)			return ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
            		}
HXLINE( 179)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_MotorJoint_obj,bodyImpulse,return )

void ZPP_MotorJoint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_185_activeBodies)
            	HX_STACK_THIS(this)
HXLINE( 187)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 187)			this->b1->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 189)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 190)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 190)				this->b2->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_MotorJoint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_193_inactiveBodies)
            	HX_STACK_THIS(this)
HXLINE( 195)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 195)			this->b1->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 197)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 198)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 198)				this->b2->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


 ::nape::constraint::Constraint ZPP_MotorJoint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_GC_STACKFRAME(&_hx_pos_088e1f9ee85e486b_207_copy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dict,"dict")
            	HX_STACK_ARG(todo,"todo")
HXLINE( 208)		HX_VARI(  ::nape::constraint::MotorJoint,ret) =  ::nape::constraint::MotorJoint_obj::__alloc( HX_CTX ,null(),null(),this->rate,this->ratio);
HXLINE( 209)		this->copyto(ret);
HXLINE( 211)		bool _hx_tmp;
HXDLIN( 211)		if (hx::IsNotNull( dict )) {
HXLINE( 211)			_hx_tmp = hx::IsNotNull( this->b1 );
            		}
            		else {
HXLINE( 211)			_hx_tmp = false;
            		}
HXDLIN( 211)		if (_hx_tmp) {
HXLINE( 220)			HX_VARI(  ::nape::phys::Body,b) = null();
HXLINE( 221)			{
HXLINE( 221)				HX_VARI( int,_g) = (int)0;
HXDLIN( 221)				while((_g < dict->length)){
HXLINE( 221)					HX_VARI(  ::zpp_nape::constraint::ZPP_CopyHelper,idc) = dict->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 221)					_g = (_g + (int)1);
HXLINE( 222)					if ((idc->id == this->b1->id)) {
HXLINE( 223)						b = idc->bc;
HXLINE( 224)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 227)			if (hx::IsNotNull( b )) {
HXLINE( 227)				ret->zpp_inner_zn->b1 = b->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::nape::constraint::MotorJoint,ret) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b1){
            					HX_GC_STACKFRAME(&_hx_pos_088e1f9ee85e486b_228_copy)
            					HX_STACK_ARG(b1,"b1")
HXLINE( 228)					ret->zpp_inner_zn->b1 = b1->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 228)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b1->id, ::Dynamic(new _hx_Closure_0(ret))));
            			}
            		}
HXLINE( 232)		bool _hx_tmp1;
HXDLIN( 232)		if (hx::IsNotNull( dict )) {
HXLINE( 232)			_hx_tmp1 = hx::IsNotNull( this->b2 );
            		}
            		else {
HXLINE( 232)			_hx_tmp1 = false;
            		}
HXDLIN( 232)		if (_hx_tmp1) {
HXLINE( 241)			HX_VARI_NAME(  ::nape::phys::Body,b2,"b") = null();
HXLINE( 242)			{
HXLINE( 242)				HX_VARI_NAME( int,_g1,"_g") = (int)0;
HXDLIN( 242)				while((_g1 < dict->length)){
HXLINE( 242)					HX_VARI_NAME(  ::zpp_nape::constraint::ZPP_CopyHelper,idc1,"idc") = dict->__get(_g1).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 242)					_g1 = (_g1 + (int)1);
HXLINE( 243)					if ((idc1->id == this->b2->id)) {
HXLINE( 244)						b2 = idc1->bc;
HXLINE( 245)						goto _hx_goto_5;
            					}
            				}
            				_hx_goto_5:;
            			}
HXLINE( 248)			if (hx::IsNotNull( b2 )) {
HXLINE( 248)				ret->zpp_inner_zn->b2 = b2->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::nape::constraint::MotorJoint,ret) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b3){
            					HX_GC_STACKFRAME(&_hx_pos_088e1f9ee85e486b_249_copy)
            					HX_STACK_ARG(b3,"b3")
HXLINE( 249)					ret->zpp_inner_zn->b2 = b3->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 249)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b2->id, ::Dynamic(new _hx_Closure_1(ret))));
            			}
            		}
HXLINE( 252)		return ret;
            	}


void ZPP_MotorJoint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_260_validate)
            	HX_STACK_THIS(this)
HXLINE( 261)		bool _hx_tmp;
HXDLIN( 261)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 261)			_hx_tmp = hx::IsNull( this->b2 );
            		}
            		else {
HXLINE( 261)			_hx_tmp = true;
            		}
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 261)			HX_STACK_DO_THROW(HX_("Error: AngleJoint cannot be simulated null bodies",fe,18,41,78));
            		}
HXLINE( 262)		if (hx::IsEq( this->b1,this->b2 )) {
HXLINE( 262)			HX_STACK_DO_THROW(HX_("Error: MotorJoint cannot be simulated with body1 == body2",7e,50,4d,d1));
            		}
HXLINE( 263)		bool _hx_tmp1;
HXDLIN( 263)		if (hx::IsEq( this->b1->space,this->space )) {
HXLINE( 263)			_hx_tmp1 = hx::IsNotEq( this->b2->space,this->space );
            		}
            		else {
HXLINE( 263)			_hx_tmp1 = true;
            		}
HXDLIN( 263)		if (_hx_tmp1) {
HXLINE( 263)			HX_STACK_DO_THROW(HX_("Error: Constraints must have each body within the same space to which the constraint has been assigned",e8,8c,93,57));
            		}
HXLINE( 264)		bool _hx_tmp2;
HXDLIN( 264)		if ((this->b1->type != (int)2)) {
HXLINE( 264)			_hx_tmp2 = (this->b2->type != (int)2);
            		}
            		else {
HXLINE( 264)			_hx_tmp2 = false;
            		}
HXDLIN( 264)		if (_hx_tmp2) {
HXLINE( 264)			HX_STACK_DO_THROW(HX_("Error: Constraints cannot have both bodies non-dynamic",cb,b3,6c,eb));
            		}
            	}


void ZPP_MotorJoint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_266_wake_connected)
            	HX_STACK_THIS(this)
HXLINE( 267)		bool _hx_tmp;
HXDLIN( 267)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 267)			_hx_tmp = (this->b1->type == (int)2);
            		}
            		else {
HXLINE( 267)			_hx_tmp = false;
            		}
HXDLIN( 267)		if (_hx_tmp) {
HXLINE( 267)			this->b1->wake();
            		}
HXLINE( 268)		bool _hx_tmp1;
HXDLIN( 268)		if (hx::IsNotNull( this->b2 )) {
HXLINE( 268)			_hx_tmp1 = (this->b2->type == (int)2);
            		}
            		else {
HXLINE( 268)			_hx_tmp1 = false;
            		}
HXDLIN( 268)		if (_hx_tmp1) {
HXLINE( 268)			this->b2->wake();
            		}
            	}


void ZPP_MotorJoint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_270_forest)
            	HX_STACK_THIS(this)
HXLINE( 271)		if ((this->b1->type == (int)2)) {
HXLINE( 272)			HX_VAR(  ::zpp_nape::space::ZPP_Component,xr);
HXDLIN( 272)			if (hx::IsEq( this->b1->component,this->b1->component->parent )) {
HXLINE( 272)				xr = this->b1->component;
            			}
            			else {
HXLINE( 275)				HX_VARI(  ::zpp_nape::space::ZPP_Component,obj) = this->b1->component;
HXLINE( 276)				HX_VARI(  ::zpp_nape::space::ZPP_Component,stack) = null();
HXLINE( 277)				while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 278)					HX_VARI(  ::zpp_nape::space::ZPP_Component,nxt) = obj->parent;
HXLINE( 279)					obj->parent = stack;
HXLINE( 280)					stack = obj;
HXLINE( 281)					obj = nxt;
            				}
HXLINE( 283)				while(hx::IsNotNull( stack )){
HXLINE( 284)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt1,"nxt") = stack->parent;
HXLINE( 285)					stack->parent = obj;
HXLINE( 286)					stack = nxt1;
            				}
HXLINE( 272)				xr = obj;
            			}
HXLINE( 291)			HX_VAR(  ::zpp_nape::space::ZPP_Component,yr);
HXDLIN( 291)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 291)				yr = this->component;
            			}
            			else {
HXLINE( 294)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj1,"obj") = this->component;
HXLINE( 295)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack1,"stack") = null();
HXLINE( 296)				while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 297)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt2,"nxt") = obj1->parent;
HXLINE( 298)					obj1->parent = stack1;
HXLINE( 299)					stack1 = obj1;
HXLINE( 300)					obj1 = nxt2;
            				}
HXLINE( 302)				while(hx::IsNotNull( stack1 )){
HXLINE( 303)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt3,"nxt") = stack1->parent;
HXLINE( 304)					stack1->parent = obj1;
HXLINE( 305)					stack1 = nxt3;
            				}
HXLINE( 291)				yr = obj1;
            			}
HXLINE( 310)			if (hx::IsNotEq( xr,yr )) {
HXLINE( 311)				if ((xr->rank < yr->rank)) {
HXLINE( 311)					xr->parent = yr;
            				}
            				else {
HXLINE( 312)					if ((xr->rank > yr->rank)) {
HXLINE( 312)						yr->parent = xr;
            					}
            					else {
HXLINE( 314)						yr->parent = xr;
HXLINE( 315)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE( 319)		if ((this->b2->type == (int)2)) {
HXLINE( 320)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,xr1,"xr");
HXDLIN( 320)			if (hx::IsEq( this->b2->component,this->b2->component->parent )) {
HXLINE( 320)				xr1 = this->b2->component;
            			}
            			else {
HXLINE( 323)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj2,"obj") = this->b2->component;
HXLINE( 324)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack2,"stack") = null();
HXLINE( 325)				while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE( 326)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt4,"nxt") = obj2->parent;
HXLINE( 327)					obj2->parent = stack2;
HXLINE( 328)					stack2 = obj2;
HXLINE( 329)					obj2 = nxt4;
            				}
HXLINE( 331)				while(hx::IsNotNull( stack2 )){
HXLINE( 332)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt5,"nxt") = stack2->parent;
HXLINE( 333)					stack2->parent = obj2;
HXLINE( 334)					stack2 = nxt5;
            				}
HXLINE( 320)				xr1 = obj2;
            			}
HXLINE( 339)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,yr1,"yr");
HXDLIN( 339)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 339)				yr1 = this->component;
            			}
            			else {
HXLINE( 342)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj3,"obj") = this->component;
HXLINE( 343)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack3,"stack") = null();
HXLINE( 344)				while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE( 345)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt6,"nxt") = obj3->parent;
HXLINE( 346)					obj3->parent = stack3;
HXLINE( 347)					stack3 = obj3;
HXLINE( 348)					obj3 = nxt6;
            				}
HXLINE( 350)				while(hx::IsNotNull( stack3 )){
HXLINE( 351)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt7,"nxt") = stack3->parent;
HXLINE( 352)					stack3->parent = obj3;
HXLINE( 353)					stack3 = nxt7;
            				}
HXLINE( 339)				yr1 = obj3;
            			}
HXLINE( 358)			if (hx::IsNotEq( xr1,yr1 )) {
HXLINE( 359)				if ((xr1->rank < yr1->rank)) {
HXLINE( 359)					xr1->parent = yr1;
            				}
            				else {
HXLINE( 360)					if ((xr1->rank > yr1->rank)) {
HXLINE( 360)						yr1->parent = xr1;
            					}
            					else {
HXLINE( 362)						yr1->parent = xr1;
HXLINE( 363)						xr1->rank++;
            					}
            				}
            			}
            		}
            	}


bool ZPP_MotorJoint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_369_pair_exists)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE( 369)		bool _hx_tmp;
HXDLIN( 369)		if ((this->b1->id == id)) {
HXLINE( 369)			_hx_tmp = (this->b2->id == di);
            		}
            		else {
HXLINE( 369)			_hx_tmp = false;
            		}
HXDLIN( 369)		if (!(_hx_tmp)) {
HXLINE( 369)			if ((this->b1->id == di)) {
HXLINE( 369)				return (this->b2->id == id);
            			}
            			else {
HXLINE( 369)				return false;
            			}
            		}
            		else {
HXLINE( 369)			return true;
            		}
HXDLIN( 369)		return false;
            	}


void ZPP_MotorJoint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_371_clearcache)
            	HX_STACK_THIS(this)
HXLINE( 372)		this->jAcc = (int)0;
HXLINE( 373)		this->pre_dt = ((Float)-1.0);
            	}


bool ZPP_MotorJoint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_375_preStep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dt,"dt")
HXLINE( 376)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 376)			this->pre_dt = dt;
            		}
HXLINE( 377)		HX_VARI( Float,dtratio) = ((Float)dt / (Float)this->pre_dt);
HXLINE( 378)		this->pre_dt = dt;
HXLINE( 379)		this->stepped = true;
HXLINE( 380)		this->kMass = (this->b1->sinertia + ((this->ratio * this->ratio) * this->b2->sinertia));
HXLINE( 391)		this->kMass = ((Float)((Float)1.0) / (Float)this->kMass);
HXLINE( 392)		 ::zpp_nape::constraint::ZPP_MotorJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 392)		_hx_tmp->jAcc = (_hx_tmp->jAcc * dtratio);
HXLINE( 393)		this->jMax = (this->maxForce * dt);
HXLINE( 394)		return false;
            	}


void ZPP_MotorJoint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_397_warmStart)
            	HX_STACK_THIS(this)
HXLINE( 398)		 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN( 398)		_hx_tmp->angvel = (_hx_tmp->angvel - (this->b1->iinertia * this->jAcc));
HXLINE( 399)		 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b2;
HXDLIN( 399)		_hx_tmp1->angvel = (_hx_tmp1->angvel + ((this->ratio * this->b2->iinertia) * this->jAcc));
            	}


bool ZPP_MotorJoint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_402_applyImpulseVel)
            	HX_STACK_THIS(this)
HXLINE( 406)		HX_VARI( Float,j) = (-(this->kMass) * ((((this->ratio * (this->b2->angvel + this->b2->kinangvel)) - this->b1->angvel) - this->b1->kinangvel) - this->rate));
HXLINE( 407)		{
HXLINE( 416)			HX_VARI( Float,jOld) = this->jAcc;
HXLINE( 417)			 ::zpp_nape::constraint::ZPP_MotorJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 417)			_hx_tmp->jAcc = (_hx_tmp->jAcc + j);
HXLINE( 419)			if (this->breakUnderForce) {
HXLINE( 420)				bool _hx_tmp1;
HXDLIN( 420)				if (!((this->jAcc > this->jMax))) {
HXLINE( 420)					_hx_tmp1 = (this->jAcc < -(this->jMax));
            				}
            				else {
HXLINE( 420)					_hx_tmp1 = true;
            				}
HXDLIN( 420)				if (_hx_tmp1) {
HXLINE( 420)					return true;
            				}
            			}
            			else {
HXLINE( 423)				if ((this->jAcc < -(this->jMax))) {
HXLINE( 423)					this->jAcc = -(this->jMax);
            				}
            				else {
HXLINE( 424)					if ((this->jAcc > this->jMax)) {
HXLINE( 424)						this->jAcc = this->jMax;
            					}
            				}
            			}
HXLINE( 427)			j = (this->jAcc - jOld);
            		}
HXLINE( 429)		{
HXLINE( 430)			 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN( 430)			_hx_tmp2->angvel = (_hx_tmp2->angvel - (this->b1->iinertia * j));
HXLINE( 431)			 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN( 431)			_hx_tmp3->angvel = (_hx_tmp3->angvel + ((this->ratio * this->b2->iinertia) * j));
            		}
HXLINE( 433)		return false;
            	}


bool ZPP_MotorJoint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_088e1f9ee85e486b_436_applyImpulsePos)
            	HX_STACK_THIS(this)
HXLINE( 436)		return false;
            	}



hx::ObjectPtr< ZPP_MotorJoint_obj > ZPP_MotorJoint_obj::__new() {
	hx::ObjectPtr< ZPP_MotorJoint_obj > __this = new ZPP_MotorJoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_MotorJoint_obj > ZPP_MotorJoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_MotorJoint_obj *__this = (ZPP_MotorJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_MotorJoint_obj), true, "zpp_nape.constraint.ZPP_MotorJoint"));
	*(void **)__this = ZPP_MotorJoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_MotorJoint_obj::ZPP_MotorJoint_obj()
{
}

void ZPP_MotorJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_MotorJoint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(ratio,"ratio");
	HX_MARK_MEMBER_NAME(rate,"rate");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(kMass,"kMass");
	HX_MARK_MEMBER_NAME(jAcc,"jAcc");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_MotorJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(ratio,"ratio");
	HX_VISIT_MEMBER_NAME(rate,"rate");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(kMass,"kMass");
	HX_VISIT_MEMBER_NAME(jAcc,"jAcc");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_MotorJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { return hx::Val( rate); }
		if (HX_FIELD_EQ(inName,"jAcc") ) { return hx::Val( jAcc); }
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ratio") ) { return hx::Val( ratio); }
		if (HX_FIELD_EQ(inName,"kMass") ) { return hx::Val( kMass); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn()); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_MotorJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { rate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAcc") ) { jAcc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ratio") ) { ratio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMass") ) { kMass=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::MotorJoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_MotorJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"));
	outFields->push(HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"));
	outFields->push(HX_HCSTRING("rate","\xe0","\x52","\xa4","\x4b"));
	outFields->push(HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("b2","\x90","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("kMass","\xff","\x7e","\x0f","\xcf"));
	outFields->push(HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46"));
	outFields->push(HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"));
	outFields->push(HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_MotorJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::constraint::MotorJoint*/ ,(int)offsetof(ZPP_MotorJoint_obj,outer_zn),HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2")},
	{hx::fsFloat,(int)offsetof(ZPP_MotorJoint_obj,ratio),HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4")},
	{hx::fsFloat,(int)offsetof(ZPP_MotorJoint_obj,rate),HX_HCSTRING("rate","\xe0","\x52","\xa4","\x4b")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_MotorJoint_obj,b1),HX_HCSTRING("b1","\x8f","\x55","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_MotorJoint_obj,b2),HX_HCSTRING("b2","\x90","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_MotorJoint_obj,kMass),HX_HCSTRING("kMass","\xff","\x7e","\x0f","\xcf")},
	{hx::fsFloat,(int)offsetof(ZPP_MotorJoint_obj,jAcc),HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46")},
	{hx::fsFloat,(int)offsetof(ZPP_MotorJoint_obj,jMax),HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46")},
	{hx::fsBool,(int)offsetof(ZPP_MotorJoint_obj,stepped),HX_HCSTRING("stepped","\x03","\x05","\x60","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_MotorJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_MotorJoint_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"),
	HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"),
	HX_HCSTRING("rate","\xe0","\x52","\xa4","\x4b"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("activeBodies","\xe6","\x69","\xf8","\xba"),
	HX_HCSTRING("inactiveBodies","\x4b","\x89","\xc5","\x8c"),
	HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"),
	HX_HCSTRING("b2","\x90","\x55","\x00","\x00"),
	HX_HCSTRING("kMass","\xff","\x7e","\x0f","\xcf"),
	HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46"),
	HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"),
	HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("wake_connected","\xae","\xcf","\xdd","\x3d"),
	HX_HCSTRING("forest","\xdd","\x8c","\x88","\xfd"),
	HX_HCSTRING("pair_exists","\xa1","\x6a","\x58","\x69"),
	HX_HCSTRING("clearcache","\x95","\x69","\xf1","\x82"),
	HX_HCSTRING("preStep","\x0f","\xc1","\xc0","\x24"),
	HX_HCSTRING("warmStart","\xdd","\x27","\x03","\xeb"),
	HX_HCSTRING("applyImpulseVel","\xb6","\xc7","\x50","\x1f"),
	HX_HCSTRING("applyImpulsePos","\xed","\x42","\x4c","\x1f"),
	::String(null()) };

static void ZPP_MotorJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_MotorJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_MotorJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_MotorJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_MotorJoint_obj::__mClass;

void ZPP_MotorJoint_obj::__register()
{
	hx::Object *dummy = new ZPP_MotorJoint_obj;
	ZPP_MotorJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.constraint.ZPP_MotorJoint","\x0a","\xec","\xf4","\x2b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_MotorJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_MotorJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_MotorJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_MotorJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_MotorJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_MotorJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
