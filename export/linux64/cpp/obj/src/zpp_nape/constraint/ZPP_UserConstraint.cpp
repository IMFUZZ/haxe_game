// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_UserConstraint
#include <nape/constraint/UserConstraint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_UserBody
#include <zpp_nape/constraint/ZPP_UserBody.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_UserConstraint
#include <zpp_nape/constraint/ZPP_UserConstraint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <zpp_nape/geom/ZPP_Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_174_new,"zpp_nape.constraint.ZPP_UserConstraint","new",0x54ee5fef,"zpp_nape.constraint.ZPP_UserConstraint.new","zpp_nape/constraint/UserConstraint.hx",174,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_177_bindVec2_invalidate,"zpp_nape.constraint.ZPP_UserConstraint","bindVec2_invalidate",0x941f4c4e,"zpp_nape.constraint.ZPP_UserConstraint.bindVec2_invalidate","zpp_nape/constraint/UserConstraint.hx",177,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_183_addBody,"zpp_nape.constraint.ZPP_UserConstraint","addBody",0xca33c072,"zpp_nape.constraint.ZPP_UserConstraint.addBody","zpp_nape/constraint/UserConstraint.hx",183,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_207_remBody,"zpp_nape.constraint.ZPP_UserConstraint","remBody",0x2217382b,"zpp_nape.constraint.ZPP_UserConstraint.remBody","zpp_nape/constraint/UserConstraint.hx",207,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_237_bodyImpulse,"zpp_nape.constraint.ZPP_UserConstraint","bodyImpulse",0x8cbdacc2,"zpp_nape.constraint.ZPP_UserConstraint.bodyImpulse","zpp_nape/constraint/UserConstraint.hx",237,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_244_activeBodies,"zpp_nape.constraint.ZPP_UserConstraint","activeBodies",0x05acf077,"zpp_nape.constraint.ZPP_UserConstraint.activeBodies","zpp_nape/constraint/UserConstraint.hx",244,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_249_inactiveBodies,"zpp_nape.constraint.ZPP_UserConstraint","inactiveBodies",0x5295961c,"zpp_nape.constraint.ZPP_UserConstraint.inactiveBodies","zpp_nape/constraint/UserConstraint.hx",249,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_254_copy,"zpp_nape.constraint.ZPP_UserConstraint","copy",0xf467c946,"zpp_nape.constraint.ZPP_UserConstraint.copy","zpp_nape/constraint/UserConstraint.hx",254,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_296_validate,"zpp_nape.constraint.ZPP_UserConstraint","validate",0xf7ab7aa7,"zpp_nape.constraint.ZPP_UserConstraint.validate","zpp_nape/constraint/UserConstraint.hx",296,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_300_wake_connected,"zpp_nape.constraint.ZPP_UserConstraint","wake_connected",0x03addc7f,"zpp_nape.constraint.ZPP_UserConstraint.wake_connected","zpp_nape/constraint/UserConstraint.hx",300,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_305_forest,"zpp_nape.constraint.ZPP_UserConstraint","forest",0xe936e0ae,"zpp_nape.constraint.ZPP_UserConstraint.forest","zpp_nape/constraint/UserConstraint.hx",305,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_356_pair_exists,"zpp_nape.constraint.ZPP_UserConstraint","pair_exists",0x9673a130,"zpp_nape.constraint.ZPP_UserConstraint.pair_exists","zpp_nape/constraint/UserConstraint.hx",356,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_373_broken,"zpp_nape.constraint.ZPP_UserConstraint","broken",0x08060a26,"zpp_nape.constraint.ZPP_UserConstraint.broken","zpp_nape/constraint/UserConstraint.hx",373,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_375_clearcache,"zpp_nape.constraint.ZPP_UserConstraint","clearcache",0x768479e6,"zpp_nape.constraint.ZPP_UserConstraint.clearcache","zpp_nape/constraint/UserConstraint.hx",375,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_379_lsq,"zpp_nape.constraint.ZPP_UserConstraint","lsq",0x54ece799,"zpp_nape.constraint.ZPP_UserConstraint.lsq","zpp_nape/constraint/UserConstraint.hx",379,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_384__clamp,"zpp_nape.constraint.ZPP_UserConstraint","_clamp",0x2fee0e0d,"zpp_nape.constraint.ZPP_UserConstraint._clamp","zpp_nape/constraint/UserConstraint.hx",384,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_392_solve,"zpp_nape.constraint.ZPP_UserConstraint","solve",0x1cce90ce,"zpp_nape.constraint.ZPP_UserConstraint.solve","zpp_nape/constraint/UserConstraint.hx",392,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_415_transform,"zpp_nape.constraint.ZPP_UserConstraint","transform",0xc180523b,"zpp_nape.constraint.ZPP_UserConstraint.transform","zpp_nape/constraint/UserConstraint.hx",415,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_441_preStep,"zpp_nape.constraint.ZPP_UserConstraint","preStep",0x719bc41e,"zpp_nape.constraint.ZPP_UserConstraint.preStep","zpp_nape/constraint/UserConstraint.hx",441,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_478_warmStart,"zpp_nape.constraint.ZPP_UserConstraint","warmStart",0x66f04cac,"zpp_nape.constraint.ZPP_UserConstraint.warmStart","zpp_nape/constraint/UserConstraint.hx",478,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_499_applyImpulseVel,"zpp_nape.constraint.ZPP_UserConstraint","applyImpulseVel",0x6f8bf1c5,"zpp_nape.constraint.ZPP_UserConstraint.applyImpulseVel","zpp_nape/constraint/UserConstraint.hx",499,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_533_applyImpulsePos,"zpp_nape.constraint.ZPP_UserConstraint","applyImpulsePos",0x6f876cfc,"zpp_nape.constraint.ZPP_UserConstraint.applyImpulsePos","zpp_nape/constraint/UserConstraint.hx",533,0x968ba4a6)
HX_DEFINE_STACK_FRAME(_hx_pos_62fa6ce655c689ca_565_draw,"zpp_nape.constraint.ZPP_UserConstraint","draw",0xf5133995,"zpp_nape.constraint.ZPP_UserConstraint.draw","zpp_nape/constraint/UserConstraint.hx",565,0x968ba4a6)
namespace zpp_nape{
namespace constraint{

void ZPP_UserConstraint_obj::__construct(int dim,bool velonly){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_174_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dim,"dim")
            	HX_STACK_ARG(velonly,"velonly")
HXLINE( 498)		this->jOld = null();
HXLINE( 497)		this->J = null();
HXLINE( 476)		this->vec3 = null();
HXLINE( 440)		this->Keff = null();
HXLINE( 439)		this->jMax = ((Float)0.0);
HXLINE( 438)		this->velonly = false;
HXLINE( 437)		this->gamma = ((Float)0.0);
HXLINE( 436)		this->soft = ((Float)0.0);
HXLINE( 414)		this->y = null();
HXLINE( 391)		this->L = null();
HXLINE( 253)		this->stepped = false;
HXLINE( 182)		this->bias = null();
HXLINE( 181)		this->jAcc = null();
HXLINE( 180)		this->dim = (int)0;
HXLINE( 179)		this->bodies = null();
HXLINE( 175)		this->outer_zn = null();
HXLINE( 261)		super::__construct();
HXLINE( 262)		this->bodies = ::Array_obj< ::Dynamic>::__new();
HXLINE( 265)		this->dim = dim;
HXLINE( 266)		this->velonly = velonly;
HXLINE( 267)		this->jAcc = ::Array_obj< Float >::__new();
HXLINE( 270)		this->bias = ::Array_obj< Float >::__new();
HXLINE( 273)		this->L = ::Array_obj< Float >::__new();
HXLINE( 276)		this->J = ::Array_obj< Float >::__new();
HXLINE( 279)		this->jOld = ::Array_obj< Float >::__new();
HXLINE( 282)		this->y = ::Array_obj< Float >::__new();
HXLINE( 285)		this->Keff = ::Array_obj< Float >::__new();
HXLINE( 288)		this->vec3 = ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
HXLINE( 289)		{
HXLINE( 289)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 289)			while((_g1 < dim)){
HXLINE( 289)				_g1 = (_g1 + (int)1);
HXDLIN( 289)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 290)				this->J[i] = (this->jOld[i] = (this->y[i] = ((Float)0.0)));
HXDLIN( 290)				this->bias[i] = ((Float)0.0);
HXDLIN( 290)				this->jAcc[i] = ((Float)0.0);
HXLINE( 291)				{
HXLINE( 291)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 291)					while((_g3 < dim)){
HXLINE( 291)						_g3 = (_g3 + (int)1);
HXDLIN( 291)						this->L[((i * dim) + (_g3 - (int)1))] = ((Float)0.0);
            					}
            				}
            			}
            		}
HXLINE( 293)		this->stepped = false;
            	}

Dynamic ZPP_UserConstraint_obj::__CreateEmpty() { return new ZPP_UserConstraint_obj; }

void *ZPP_UserConstraint_obj::_hx_vtable = 0;

Dynamic ZPP_UserConstraint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_UserConstraint_obj > _hx_result = new ZPP_UserConstraint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ZPP_UserConstraint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x294cc45f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x294cc45f;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

void ZPP_UserConstraint_obj::bindVec2_invalidate( ::zpp_nape::geom::ZPP_Vec2 _){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_177_bindVec2_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 177)		this->outer_zn->_hx___invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_UserConstraint_obj,bindVec2_invalidate,(void))

void ZPP_UserConstraint_obj::addBody( ::zpp_nape::phys::ZPP_Body b){
            	HX_GC_STACKFRAME(&_hx_pos_62fa6ce655c689ca_183_addBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 192)		HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,match) = null();
HXLINE( 193)		{
HXLINE( 193)			HX_VARI( int,_g) = (int)0;
HXDLIN( 193)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->bodies;
HXDLIN( 193)			while((_g < _g1->length)){
HXLINE( 193)				HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,x) = _g1->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 193)				_g = (_g + (int)1);
HXLINE( 194)				if (hx::IsEq( x->body,b )) {
HXLINE( 195)					match = x;
HXLINE( 196)					goto _hx_goto_4;
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 199)		if (hx::IsNull( match )) {
HXLINE( 200)			this->bodies->push( ::zpp_nape::constraint::ZPP_UserBody_obj::__alloc( HX_CTX ,(int)1,b));
HXLINE( 201)			bool _hx_tmp;
HXDLIN( 201)			if (this->active) {
HXLINE( 201)				_hx_tmp = hx::IsNotNull( this->space );
            			}
            			else {
HXLINE( 201)				_hx_tmp = false;
            			}
HXDLIN( 201)			if (_hx_tmp) {
HXLINE( 202)				if (hx::IsNotNull( b )) {
HXLINE( 202)					b->constraints->add(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
            		else {
HXLINE( 205)			match->cnt++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_UserConstraint_obj,addBody,(void))

bool ZPP_UserConstraint_obj::remBody( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_207_remBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 216)		HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,match) = null();
HXLINE( 217)		HX_VARI( int,bl) = ::Std_obj::_hx_int(this->bodies->length);
HXLINE( 218)		HX_VARI( int,i) = (int)0;
HXLINE( 219)		while((i < bl)){
HXLINE( 220)			HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,x) = this->bodies->__get(i).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXLINE( 221)			if (hx::IsEq( x->body,b )) {
HXLINE( 222)				x->cnt--;
HXLINE( 223)				if ((x->cnt == (int)0)) {
HXLINE( 224)					if ((bl > (int)0)) {
HXLINE( 224)						this->bodies[i] = this->bodies->__get((bl - (int)1)).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
            					}
HXLINE( 225)					this->bodies->pop().StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXLINE( 226)					bool _hx_tmp;
HXDLIN( 226)					if (this->active) {
HXLINE( 226)						_hx_tmp = hx::IsNotNull( this->space );
            					}
            					else {
HXLINE( 226)						_hx_tmp = false;
            					}
HXDLIN( 226)					if (_hx_tmp) {
HXLINE( 227)						if (hx::IsNotNull( b )) {
HXLINE( 227)							b->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            						}
            					}
            				}
HXLINE( 230)				match = x;
HXLINE( 231)				goto _hx_goto_6;
            			}
HXLINE( 233)			i = (i + (int)1);
            		}
            		_hx_goto_6:;
HXLINE( 235)		return hx::IsNotNull( match );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_UserConstraint_obj,remBody,return )

 ::nape::geom::Vec3 ZPP_UserConstraint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_237_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 238)		{
HXLINE( 238)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 238)			HX_VARI( int,_g) = this->dim;
HXDLIN( 238)			while((_g1 < _g)){
HXLINE( 238)				_g1 = (_g1 + (int)1);
HXDLIN( 238)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 238)				this->J[i] = this->jAcc->__get(i);
            			}
            		}
HXLINE( 241)		return ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_UserConstraint_obj,bodyImpulse,return )

void ZPP_UserConstraint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_244_activeBodies)
            	HX_STACK_THIS(this)
HXLINE( 244)		HX_VARI( int,_g) = (int)0;
HXDLIN( 244)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->bodies;
HXDLIN( 244)		while((_g < _g1->length)){
HXLINE( 244)			HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,b) = _g1->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 244)			_g = (_g + (int)1);
HXLINE( 245)			if (hx::IsNotNull( b->body )) {
HXLINE( 245)				b->body->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_UserConstraint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_249_inactiveBodies)
            	HX_STACK_THIS(this)
HXLINE( 249)		HX_VARI( int,_g) = (int)0;
HXDLIN( 249)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->bodies;
HXDLIN( 249)		while((_g < _g1->length)){
HXLINE( 249)			HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,b) = _g1->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 249)			_g = (_g + (int)1);
HXLINE( 250)			if (hx::IsNotNull( b->body )) {
HXLINE( 250)				b->body->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


 ::nape::constraint::Constraint ZPP_UserConstraint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_254_copy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dict,"dict")
            	HX_STACK_ARG(todo,"todo")
HXLINE( 256)		this->copyto(this->outer_zn->__copy());
HXLINE( 257)		HX_STACK_DO_THROW(HX_("not done yet",37,63,5d,38));
HXDLIN( 257)		return null();
            	}


void ZPP_UserConstraint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_296_validate)
            	HX_STACK_THIS(this)
HXLINE( 296)		HX_VARI( int,_g) = (int)0;
HXDLIN( 296)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->bodies;
HXDLIN( 296)		while((_g < _g1->length)){
HXLINE( 296)			HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,b) = _g1->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 296)			_g = (_g + (int)1);
HXDLIN( 296)			if (hx::IsNotEq( b->body->space,this->space )) {
HXLINE( 296)				HX_STACK_DO_THROW(HX_("Error: Constraints must have each body within the same sapce to which the constraint has been assigned",e6,bc,3b,9a));
            			}
            		}
            	}


void ZPP_UserConstraint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_300_wake_connected)
            	HX_STACK_THIS(this)
HXLINE( 300)		HX_VARI( int,_g) = (int)0;
HXDLIN( 300)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->bodies;
HXDLIN( 300)		while((_g < _g1->length)){
HXLINE( 300)			HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,b) = _g1->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 300)			_g = (_g + (int)1);
HXLINE( 301)			if ((b->body->type == (int)2)) {
HXLINE( 301)				b->body->wake();
            			}
            		}
            	}


void ZPP_UserConstraint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_305_forest)
            	HX_STACK_THIS(this)
HXLINE( 305)		HX_VARI( int,_g) = (int)0;
HXDLIN( 305)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->bodies;
HXDLIN( 305)		while((_g < _g1->length)){
HXLINE( 305)			HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,b) = _g1->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 305)			_g = (_g + (int)1);
HXLINE( 306)			if ((b->body->type == (int)2)) {
HXLINE( 307)				HX_VAR(  ::zpp_nape::space::ZPP_Component,xr);
HXDLIN( 307)				if (hx::IsEq( b->body->component,b->body->component->parent )) {
HXLINE( 307)					xr = b->body->component;
            				}
            				else {
HXLINE( 310)					HX_VARI(  ::zpp_nape::space::ZPP_Component,obj) = b->body->component;
HXLINE( 311)					HX_VARI(  ::zpp_nape::space::ZPP_Component,stack) = null();
HXLINE( 312)					while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 313)						HX_VARI(  ::zpp_nape::space::ZPP_Component,nxt) = obj->parent;
HXLINE( 314)						obj->parent = stack;
HXLINE( 315)						stack = obj;
HXLINE( 316)						obj = nxt;
            					}
HXLINE( 318)					while(hx::IsNotNull( stack )){
HXLINE( 319)						HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt1,"nxt") = stack->parent;
HXLINE( 320)						stack->parent = obj;
HXLINE( 321)						stack = nxt1;
            					}
HXLINE( 307)					xr = obj;
            				}
HXLINE( 326)				HX_VAR(  ::zpp_nape::space::ZPP_Component,yr);
HXDLIN( 326)				if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 326)					yr = this->component;
            				}
            				else {
HXLINE( 329)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj1,"obj") = this->component;
HXLINE( 330)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack1,"stack") = null();
HXLINE( 331)					while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 332)						HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt2,"nxt") = obj1->parent;
HXLINE( 333)						obj1->parent = stack1;
HXLINE( 334)						stack1 = obj1;
HXLINE( 335)						obj1 = nxt2;
            					}
HXLINE( 337)					while(hx::IsNotNull( stack1 )){
HXLINE( 338)						HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt3,"nxt") = stack1->parent;
HXLINE( 339)						stack1->parent = obj1;
HXLINE( 340)						stack1 = nxt3;
            					}
HXLINE( 326)					yr = obj1;
            				}
HXLINE( 345)				if (hx::IsNotEq( xr,yr )) {
HXLINE( 346)					if ((xr->rank < yr->rank)) {
HXLINE( 346)						xr->parent = yr;
            					}
            					else {
HXLINE( 347)						if ((xr->rank > yr->rank)) {
HXLINE( 347)							yr->parent = xr;
            						}
            						else {
HXLINE( 349)							yr->parent = xr;
HXLINE( 350)							xr->rank++;
            						}
            					}
            				}
            			}
            		}
            	}


bool ZPP_UserConstraint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_356_pair_exists)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE( 357)		HX_VARI( bool,ret) = false;
HXLINE( 358)		HX_VARI( int,bl) = ::Std_obj::_hx_int(this->bodies->length);
HXLINE( 359)		{
HXLINE( 359)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 359)			while((_g1 < bl)){
HXLINE( 359)				_g1 = (_g1 + (int)1);
HXDLIN( 359)				HX_VARI( int,bi) = (_g1 - (int)1);
HXLINE( 360)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,b) = this->bodies->__get(bi).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >()->body;
HXLINE( 361)				{
HXLINE( 361)					HX_VARI( int,_g3) = (bi + (int)1);
HXDLIN( 361)					while((_g3 < bl)){
HXLINE( 361)						_g3 = (_g3 + (int)1);
HXLINE( 362)						HX_VARI(  ::zpp_nape::phys::ZPP_Body,c) = this->bodies->__get((_g3 - (int)1)).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >()->body;
HXLINE( 363)						bool _hx_tmp;
HXDLIN( 363)						bool _hx_tmp1;
HXDLIN( 363)						if ((b->id == id)) {
HXLINE( 363)							_hx_tmp1 = (c->id == di);
            						}
            						else {
HXLINE( 363)							_hx_tmp1 = false;
            						}
HXDLIN( 363)						if (!(_hx_tmp1)) {
HXLINE( 363)							if ((b->id == di)) {
HXLINE( 363)								_hx_tmp = (c->id == id);
            							}
            							else {
HXLINE( 363)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 363)							_hx_tmp = true;
            						}
HXDLIN( 363)						if (_hx_tmp) {
HXLINE( 364)							ret = true;
HXLINE( 365)							goto _hx_goto_26;
            						}
            					}
            					_hx_goto_26:;
            				}
HXLINE( 368)				if (ret) {
HXLINE( 368)					goto _hx_goto_25;
            				}
            			}
            			_hx_goto_25:;
            		}
HXLINE( 370)		return ret;
            	}


void ZPP_UserConstraint_obj::broken(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_373_broken)
            	HX_STACK_THIS(this)
            	}


void ZPP_UserConstraint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_375_clearcache)
            	HX_STACK_THIS(this)
HXLINE( 376)		{
HXLINE( 376)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 376)			HX_VARI( int,_g) = this->dim;
HXDLIN( 376)			while((_g1 < _g)){
HXLINE( 376)				_g1 = (_g1 + (int)1);
HXDLIN( 376)				this->jAcc[(_g1 - (int)1)] = ((Float)0.0);
            			}
            		}
HXLINE( 377)		this->pre_dt = ((Float)-1.0);
            	}


Float ZPP_UserConstraint_obj::lsq(::Array< Float > v){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_379_lsq)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 380)		HX_VARI( Float,sum) = ((Float)0.0);
HXLINE( 381)		{
HXLINE( 381)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 381)			HX_VARI( int,_g) = this->dim;
HXDLIN( 381)			while((_g1 < _g)){
HXLINE( 381)				_g1 = (_g1 + (int)1);
HXDLIN( 381)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 381)				sum = (sum + (v->__get(i) * v->__get(i)));
            			}
            		}
HXLINE( 382)		return sum;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_UserConstraint_obj,lsq,return )

void ZPP_UserConstraint_obj::_clamp(::Array< Float > v,Float max){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_384__clamp)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(max,"max")
HXLINE( 385)		HX_VARI( Float,x) = this->lsq(v);
HXLINE( 386)		if ((x > (max * max))) {
HXLINE( 387)			HX_VARI( Float,scale) = ((Float)max / (Float)::Math_obj::sqrt(x));
HXLINE( 388)			{
HXLINE( 388)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 388)				HX_VARI( int,_g) = this->dim;
HXDLIN( 388)				while((_g1 < _g)){
HXLINE( 388)					_g1 = (_g1 + (int)1);
HXDLIN( 388)					HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 388)					v[i] = (v->__get(i) * scale);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_UserConstraint_obj,_clamp,(void))

::Array< Float > ZPP_UserConstraint_obj::solve(::Array< Float > m){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_392_solve)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(m,"m")
HXLINE( 393)		HX_VARI( int,ind) = (int)0;
HXLINE( 394)		{
HXLINE( 394)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 394)			HX_VARI( int,_g) = this->dim;
HXDLIN( 394)			while((_g1 < _g)){
HXLINE( 394)				_g1 = (_g1 + (int)1);
HXDLIN( 394)				HX_VARI( int,j) = (_g1 - (int)1);
HXLINE( 395)				HX_VARI( Float,sum) = ((Float)0.0);
HXLINE( 396)				{
HXLINE( 396)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 396)					HX_VARI( int,_g2) = (j - (int)1);
HXDLIN( 396)					while((_g3 < _g2)){
HXLINE( 396)						_g3 = (_g3 + (int)1);
HXDLIN( 396)						HX_VARI( int,k) = (_g3 - (int)1);
HXDLIN( 396)						sum = (sum + (this->L->__get(((j * this->dim) + k)) * this->L->__get(((j * this->dim) + k))));
            					}
            				}
HXLINE( 397)				ind = (ind + (int)1);
HXDLIN( 397)				HX_VARI( Float,rec) = ::Math_obj::sqrt((m->__get((ind - (int)1)) - sum));
HXLINE( 398)				this->L[((j * this->dim) + j)] = rec;
HXLINE( 399)				if ((rec != (int)0)) {
HXLINE( 400)					rec = ((Float)((Float)1.0) / (Float)rec);
HXLINE( 401)					{
HXLINE( 401)						HX_VARI_NAME( int,_g31,"_g3") = (j + (int)1);
HXDLIN( 401)						HX_VARI_NAME( int,_g21,"_g2") = this->dim;
HXDLIN( 401)						while((_g31 < _g21)){
HXLINE( 401)							_g31 = (_g31 + (int)1);
HXDLIN( 401)							HX_VARI( int,i) = (_g31 - (int)1);
HXLINE( 402)							HX_VARI_NAME( Float,sum1,"sum") = ((Float)0.0);
HXLINE( 403)							{
HXLINE( 403)								HX_VARI( int,_g5) = (int)0;
HXDLIN( 403)								HX_VARI( int,_g4) = (j - (int)1);
HXDLIN( 403)								while((_g5 < _g4)){
HXLINE( 403)									_g5 = (_g5 + (int)1);
HXDLIN( 403)									HX_VARI_NAME( int,k1,"k") = (_g5 - (int)1);
HXDLIN( 403)									sum1 = (sum1 + (this->L->__get(((i * this->dim) + k1)) * this->L->__get(((j * this->dim) + k1))));
            								}
            							}
HXLINE( 404)							ind = (ind + (int)1);
HXDLIN( 404)							this->L[((i * this->dim) + j)] = (rec * (m->__get((ind - (int)1)) - sum1));
            						}
            					}
            				}
            				else {
HXLINE( 408)					{
HXLINE( 408)						HX_VARI_NAME( int,_g32,"_g3") = (j + (int)1);
HXDLIN( 408)						HX_VARI_NAME( int,_g22,"_g2") = this->dim;
HXDLIN( 408)						while((_g32 < _g22)){
HXLINE( 408)							_g32 = (_g32 + (int)1);
HXDLIN( 408)							this->L[(((_g32 - (int)1) * this->dim) + j)] = ((Float)0.0);
            						}
            					}
HXLINE( 409)					ind = (ind + ((this->dim - j) - (int)1));
            				}
            			}
            		}
HXLINE( 412)		return this->L;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_UserConstraint_obj,solve,return )

void ZPP_UserConstraint_obj::transform(::Array< Float > L,::Array< Float > x){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_415_transform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(L,"L")
            	HX_STACK_ARG(x,"x")
HXLINE( 416)		{
HXLINE( 416)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 416)			HX_VARI( int,_g) = this->dim;
HXDLIN( 416)			while((_g1 < _g)){
HXLINE( 416)				_g1 = (_g1 + (int)1);
HXDLIN( 416)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 417)				HX_VARI( Float,sum) = x->__get(i);
HXLINE( 418)				HX_VARI( Float,lii) = L->__get(((i * this->dim) + i));
HXLINE( 419)				if ((lii != (int)0)) {
HXLINE( 420)					{
HXLINE( 420)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 420)						while((_g3 < i)){
HXLINE( 420)							_g3 = (_g3 + (int)1);
HXDLIN( 420)							HX_VARI( int,k) = (_g3 - (int)1);
HXDLIN( 420)							sum = (sum - (L->__get(((i * this->dim) + k)) * this->y->__get(k)));
            						}
            					}
HXLINE( 421)					this->y[i] = ((Float)sum / (Float)lii);
            				}
            				else {
HXLINE( 423)					this->y[i] = ((Float)0.0);
            				}
            			}
            		}
HXLINE( 425)		{
HXLINE( 425)			HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN( 425)			HX_VARI_NAME( int,_g2,"_g") = this->dim;
HXDLIN( 425)			while((_g11 < _g2)){
HXLINE( 425)				_g11 = (_g11 + (int)1);
HXLINE( 426)				HX_VARI_NAME( int,i1,"i") = ((this->dim - (int)1) - (_g11 - (int)1));
HXLINE( 427)				HX_VARI_NAME( Float,lii1,"lii") = L->__get(((i1 * this->dim) + i1));
HXLINE( 428)				if ((lii1 != (int)0)) {
HXLINE( 429)					HX_VARI_NAME( Float,sum1,"sum") = this->y->__get(i1);
HXLINE( 430)					{
HXLINE( 430)						HX_VARI_NAME( int,_g31,"_g3") = (i1 + (int)1);
HXDLIN( 430)						HX_VARI_NAME( int,_g21,"_g2") = this->dim;
HXDLIN( 430)						while((_g31 < _g21)){
HXLINE( 430)							_g31 = (_g31 + (int)1);
HXDLIN( 430)							HX_VARI_NAME( int,k1,"k") = (_g31 - (int)1);
HXDLIN( 430)							sum1 = (sum1 - (L->__get(((k1 * this->dim) + i1)) * x->__get(k1)));
            						}
            					}
HXLINE( 431)					x[i1] = ((Float)sum1 / (Float)lii1);
            				}
            				else {
HXLINE( 433)					x[i1] = ((Float)0.0);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_UserConstraint_obj,transform,(void))

bool ZPP_UserConstraint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_441_preStep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dt,"dt")
HXLINE( 445)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE( 445)			this->pre_dt = dt;
            		}
HXLINE( 446)		HX_VARI( Float,dtratio) = ((Float)dt / (Float)this->pre_dt);
HXLINE( 447)		this->pre_dt = dt;
HXLINE( 448)		this->stepped = true;
HXLINE( 451)		this->L = this->solve(this->Keff);
HXLINE( 452)		bool _hx_tmp;
HXDLIN( 452)		if (!(this->stiff)) {
HXLINE( 452)			_hx_tmp = !(this->velonly);
            		}
            		else {
HXLINE( 452)			_hx_tmp = false;
            		}
HXDLIN( 452)		if (_hx_tmp) {
HXLINE( 453)			HX_VAR( Float,biasCoef);
HXLINE( 455)			HX_VARI( Float,omega) = (((int)2 * ::Math_obj::PI) * this->frequency);
HXLINE( 456)			this->gamma = ((Float)(int)1 / (Float)((dt * omega) * (((int)2 * this->damping) + (omega * dt))));
HXLINE( 457)			HX_VARI( Float,ig) = ((Float)(int)1 / (Float)((int)1 + this->gamma));
HXLINE( 458)			biasCoef = (((dt * omega) * omega) * this->gamma);
HXLINE( 459)			 ::zpp_nape::constraint::ZPP_UserConstraint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 459)			_hx_tmp1->gamma = (_hx_tmp1->gamma * ig);
HXLINE( 454)			this->soft = ig;
HXLINE( 463)			bool _hx_tmp2;
HXDLIN( 463)			if (this->breakUnderError) {
HXLINE( 463)				_hx_tmp2 = (this->lsq(this->bias) > (this->maxError * this->maxError));
            			}
            			else {
HXLINE( 463)				_hx_tmp2 = false;
            			}
HXDLIN( 463)			if (_hx_tmp2) {
HXLINE( 463)				return true;
            			}
HXLINE( 464)			{
HXLINE( 464)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 464)				HX_VARI( int,_g) = this->dim;
HXDLIN( 464)				while((_g1 < _g)){
HXLINE( 464)					_g1 = (_g1 + (int)1);
HXDLIN( 464)					HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 464)					::Array< Float > _hx_tmp3 = this->bias;
HXDLIN( 464)					_hx_tmp3[i] = (_hx_tmp3->__get(i) * -(biasCoef));
            				}
            			}
HXLINE( 465)			this->_clamp(this->bias,this->maxError);
            		}
            		else {
HXLINE( 468)			{
HXLINE( 468)				HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN( 468)				HX_VARI_NAME( int,_g2,"_g") = this->dim;
HXDLIN( 468)				while((_g11 < _g2)){
HXLINE( 468)					_g11 = (_g11 + (int)1);
HXDLIN( 468)					this->bias[(_g11 - (int)1)] = ((Float)0.0);
            				}
            			}
HXLINE( 469)			this->gamma = ((Float)0.0);
HXLINE( 470)			this->soft = ((Float)1.0);
            		}
HXLINE( 472)		{
HXLINE( 472)			HX_VARI_NAME( int,_g12,"_g1") = (int)0;
HXDLIN( 472)			HX_VARI_NAME( int,_g3,"_g") = this->dim;
HXDLIN( 472)			while((_g12 < _g3)){
HXLINE( 472)				_g12 = (_g12 + (int)1);
HXDLIN( 472)				HX_VARI_NAME( int,i1,"i") = (_g12 - (int)1);
HXDLIN( 472)				::Array< Float > _hx_tmp4 = this->jAcc;
HXDLIN( 472)				_hx_tmp4[i1] = (_hx_tmp4->__get(i1) * dtratio);
            			}
            		}
HXLINE( 473)		this->jMax = (this->maxForce * dt);
HXLINE( 474)		return false;
            	}


void ZPP_UserConstraint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_478_warmStart)
            	HX_STACK_THIS(this)
HXLINE( 478)		HX_VARI( int,_g) = (int)0;
HXDLIN( 478)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->bodies;
HXDLIN( 478)		while((_g < _g1->length)){
HXLINE( 478)			HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,bs) = _g1->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 478)			_g = (_g + (int)1);
HXLINE( 479)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,b) = bs->body;
HXLINE( 481)			{
HXLINE( 482)				HX_VARI( Float,t) = b->imass;
HXLINE( 491)				Float b1 = b->velx;
HXDLIN( 491)				HX_VARI(  ::nape::geom::Vec3,_this) = this->vec3;
HXDLIN( 491)				{
HXLINE( 491)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = _this->zpp_inner;
HXDLIN( 491)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 491)						_this1->_validate();
            					}
            				}
HXDLIN( 491)				b->velx = (b1 + (_this->zpp_inner->x * t));
HXLINE( 492)				Float b2 = b->vely;
HXDLIN( 492)				HX_VARI_NAME(  ::nape::geom::Vec3,_this2,"_this") = this->vec3;
HXDLIN( 492)				{
HXLINE( 492)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = _this2->zpp_inner;
HXDLIN( 492)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 492)						_this3->_validate();
            					}
            				}
HXDLIN( 492)				b->vely = (b2 + (_this2->zpp_inner->y * t));
            			}
HXLINE( 494)			Float b3 = b->angvel;
HXDLIN( 494)			HX_VARI_NAME(  ::nape::geom::Vec3,_this4,"_this") = this->vec3;
HXDLIN( 494)			{
HXLINE( 494)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this5,"_this") = _this4->zpp_inner;
HXDLIN( 494)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 494)					_this5->_validate();
            				}
            			}
HXDLIN( 494)			b->angvel = (b3 + (_this4->zpp_inner->z * b->iinertia));
            		}
            	}


bool ZPP_UserConstraint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_499_applyImpulseVel)
            	HX_STACK_THIS(this)
HXLINE( 501)		{
HXLINE( 501)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 501)			HX_VARI( int,_g) = this->dim;
HXDLIN( 501)			while((_g1 < _g)){
HXLINE( 501)				_g1 = (_g1 + (int)1);
HXDLIN( 501)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 501)				this->J[i] = (this->bias->__get(i) - this->J->__get(i));
            			}
            		}
HXLINE( 502)		this->transform(this->L,this->J);
HXLINE( 503)		{
HXLINE( 503)			HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN( 503)			HX_VARI_NAME( int,_g2,"_g") = this->dim;
HXDLIN( 503)			while((_g11 < _g2)){
HXLINE( 503)				_g11 = (_g11 + (int)1);
HXDLIN( 503)				HX_VARI_NAME( int,i1,"i") = (_g11 - (int)1);
HXLINE( 504)				this->jOld[i1] = this->jAcc->__get(i1);
HXLINE( 505)				::Array< Float > _hx_tmp = this->jAcc;
HXDLIN( 505)				Float _hx_tmp1 = _hx_tmp->__get(i1);
HXDLIN( 505)				_hx_tmp[i1] = (_hx_tmp1 + (this->J[i1] = ((this->J->__get(i1) * this->soft) - (this->jAcc->__get(i1) * this->gamma))));
            			}
            		}
HXLINE( 508)		bool _hx_tmp2;
HXDLIN( 508)		bool _hx_tmp3;
HXDLIN( 508)		if (!(this->breakUnderForce)) {
HXLINE( 508)			_hx_tmp3 = !(this->stiff);
            		}
            		else {
HXLINE( 508)			_hx_tmp3 = true;
            		}
HXDLIN( 508)		if (_hx_tmp3) {
HXLINE( 508)			_hx_tmp2 = (this->lsq(this->jAcc) > (this->jMax * this->jMax));
            		}
            		else {
HXLINE( 508)			_hx_tmp2 = false;
            		}
HXDLIN( 508)		if (_hx_tmp2) {
HXLINE( 509)			if (this->breakUnderForce) {
HXLINE( 509)				return true;
            			}
            			else {
HXLINE( 510)				if (!(this->stiff)) {
HXLINE( 510)					this->_clamp(this->jAcc,this->jMax);
            				}
            			}
            		}
HXLINE( 512)		{
HXLINE( 512)			HX_VARI_NAME( int,_g12,"_g1") = (int)0;
HXDLIN( 512)			HX_VARI_NAME( int,_g3,"_g") = this->dim;
HXDLIN( 512)			while((_g12 < _g3)){
HXLINE( 512)				_g12 = (_g12 + (int)1);
HXDLIN( 512)				HX_VARI_NAME( int,i2,"i") = (_g12 - (int)1);
HXDLIN( 512)				this->J[i2] = (this->jAcc->__get(i2) - this->jOld->__get(i2));
            			}
            		}
HXLINE( 513)		{
HXLINE( 513)			HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 513)			HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = this->bodies;
HXDLIN( 513)			while((_g4 < _g13->length)){
HXLINE( 513)				HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,bs) = _g13->__get(_g4).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 513)				_g4 = (_g4 + (int)1);
HXLINE( 514)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,b) = bs->body;
HXLINE( 516)				{
HXLINE( 517)					HX_VARI( Float,t) = b->imass;
HXLINE( 526)					Float b1 = b->velx;
HXDLIN( 526)					HX_VARI(  ::nape::geom::Vec3,_this) = this->vec3;
HXDLIN( 526)					{
HXLINE( 526)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = _this->zpp_inner;
HXDLIN( 526)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 526)							_this1->_validate();
            						}
            					}
HXDLIN( 526)					b->velx = (b1 + (_this->zpp_inner->x * t));
HXLINE( 527)					Float b2 = b->vely;
HXDLIN( 527)					HX_VARI_NAME(  ::nape::geom::Vec3,_this2,"_this") = this->vec3;
HXDLIN( 527)					{
HXLINE( 527)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = _this2->zpp_inner;
HXDLIN( 527)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 527)							_this3->_validate();
            						}
            					}
HXDLIN( 527)					b->vely = (b2 + (_this2->zpp_inner->y * t));
            				}
HXLINE( 529)				Float b3 = b->angvel;
HXDLIN( 529)				HX_VARI_NAME(  ::nape::geom::Vec3,_this4,"_this") = this->vec3;
HXDLIN( 529)				{
HXLINE( 529)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this5,"_this") = _this4->zpp_inner;
HXDLIN( 529)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 529)						_this5->_validate();
            					}
            				}
HXDLIN( 529)				b->angvel = (b3 + (_this4->zpp_inner->z * b->iinertia));
            			}
            		}
HXLINE( 531)		return false;
            	}


bool ZPP_UserConstraint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_533_applyImpulsePos)
            	HX_STACK_THIS(this)
HXLINE( 534)		if (this->velonly) {
HXLINE( 534)			return false;
            		}
HXLINE( 537)		HX_VARI( Float,lj) = this->lsq(this->J);
HXLINE( 538)		bool _hx_tmp;
HXDLIN( 538)		if (this->breakUnderError) {
HXLINE( 538)			_hx_tmp = (lj > (this->maxError * this->maxError));
            		}
            		else {
HXLINE( 538)			_hx_tmp = false;
            		}
HXDLIN( 538)		if (_hx_tmp) {
HXLINE( 538)			return true;
            		}
            		else {
HXLINE( 539)			if ((lj < (::nape::Config_obj::constraintLinearSlop * ::nape::Config_obj::constraintLinearSlop))) {
HXLINE( 539)				return false;
            			}
            		}
HXLINE( 540)		{
HXLINE( 540)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 540)			HX_VARI( int,_g) = this->dim;
HXDLIN( 540)			while((_g1 < _g)){
HXLINE( 540)				_g1 = (_g1 + (int)1);
HXDLIN( 540)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 540)				::Array< Float > _hx_tmp1 = this->J;
HXDLIN( 540)				_hx_tmp1[i] = (_hx_tmp1->__get(i) * (int)-1);
            			}
            		}
HXLINE( 542)		::Array< Float > _hx_tmp2 = this->solve(this->Keff);
HXDLIN( 542)		this->transform(_hx_tmp2,this->J);
HXLINE( 544)		{
HXLINE( 544)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 544)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->bodies;
HXDLIN( 544)			while((_g2 < _g11->length)){
HXLINE( 544)				HX_VARI(  ::zpp_nape::constraint::ZPP_UserBody,bs) = _g11->__get(_g2).StaticCast<  ::zpp_nape::constraint::ZPP_UserBody >();
HXDLIN( 544)				_g2 = (_g2 + (int)1);
HXLINE( 545)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,b) = bs->body;
HXLINE( 547)				{
HXLINE( 548)					HX_VARI( Float,t) = b->imass;
HXLINE( 557)					Float b1 = b->posx;
HXDLIN( 557)					HX_VARI(  ::nape::geom::Vec3,_this) = this->vec3;
HXDLIN( 557)					{
HXLINE( 557)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = _this->zpp_inner;
HXDLIN( 557)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 557)							_this1->_validate();
            						}
            					}
HXDLIN( 557)					b->posx = (b1 + (_this->zpp_inner->x * t));
HXLINE( 558)					Float b2 = b->posy;
HXDLIN( 558)					HX_VARI_NAME(  ::nape::geom::Vec3,_this2,"_this") = this->vec3;
HXDLIN( 558)					{
HXLINE( 558)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = _this2->zpp_inner;
HXDLIN( 558)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 558)							_this3->_validate();
            						}
            					}
HXDLIN( 558)					b->posy = (b2 + (_this2->zpp_inner->y * t));
            				}
HXLINE( 560)				{
HXLINE( 560)					HX_VARI_NAME(  ::nape::geom::Vec3,_this4,"_this") = this->vec3;
HXDLIN( 560)					{
HXLINE( 560)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this5,"_this") = _this4->zpp_inner;
HXDLIN( 560)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 560)							_this5->_validate();
            						}
            					}
HXDLIN( 560)					HX_VARI( Float,dr) = (_this4->zpp_inner->z * b->iinertia);
HXDLIN( 560)					b->rot = (b->rot + dr);
HXDLIN( 560)					if (((dr * dr) > ((Float)0.0001))) {
HXLINE( 560)						b->axisx = ::Math_obj::sin(b->rot);
HXDLIN( 560)						b->axisy = ::Math_obj::cos(b->rot);
            					}
            					else {
HXLINE( 560)						HX_VARI( Float,d2) = (dr * dr);
HXDLIN( 560)						HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN( 560)						HX_VARI( Float,m) = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN( 560)						HX_VARI( Float,nx) = (((p * b->axisx) + (dr * b->axisy)) * m);
HXDLIN( 560)						b->axisy = (((p * b->axisy) - (dr * b->axisx)) * m);
HXDLIN( 560)						b->axisx = nx;
            					}
            				}
            			}
            		}
HXLINE( 562)		return false;
            	}


void ZPP_UserConstraint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_62fa6ce655c689ca_565_draw)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
            	}



hx::ObjectPtr< ZPP_UserConstraint_obj > ZPP_UserConstraint_obj::__new(int dim,bool velonly) {
	hx::ObjectPtr< ZPP_UserConstraint_obj > __this = new ZPP_UserConstraint_obj();
	__this->__construct(dim,velonly);
	return __this;
}

hx::ObjectPtr< ZPP_UserConstraint_obj > ZPP_UserConstraint_obj::__alloc(hx::Ctx *_hx_ctx,int dim,bool velonly) {
	ZPP_UserConstraint_obj *__this = (ZPP_UserConstraint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_UserConstraint_obj), true, "zpp_nape.constraint.ZPP_UserConstraint"));
	*(void **)__this = ZPP_UserConstraint_obj::_hx_vtable;
	__this->__construct(dim,velonly);
	return __this;
}

ZPP_UserConstraint_obj::ZPP_UserConstraint_obj()
{
}

void ZPP_UserConstraint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_UserConstraint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(bodies,"bodies");
	HX_MARK_MEMBER_NAME(dim,"dim");
	HX_MARK_MEMBER_NAME(jAcc,"jAcc");
	HX_MARK_MEMBER_NAME(bias,"bias");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	HX_MARK_MEMBER_NAME(L,"L");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(soft,"soft");
	HX_MARK_MEMBER_NAME(gamma,"gamma");
	HX_MARK_MEMBER_NAME(velonly,"velonly");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(Keff,"Keff");
	HX_MARK_MEMBER_NAME(vec3,"vec3");
	HX_MARK_MEMBER_NAME(J,"J");
	HX_MARK_MEMBER_NAME(jOld,"jOld");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_UserConstraint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(bodies,"bodies");
	HX_VISIT_MEMBER_NAME(dim,"dim");
	HX_VISIT_MEMBER_NAME(jAcc,"jAcc");
	HX_VISIT_MEMBER_NAME(bias,"bias");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	HX_VISIT_MEMBER_NAME(L,"L");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(soft,"soft");
	HX_VISIT_MEMBER_NAME(gamma,"gamma");
	HX_VISIT_MEMBER_NAME(velonly,"velonly");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(Keff,"Keff");
	HX_VISIT_MEMBER_NAME(vec3,"vec3");
	HX_VISIT_MEMBER_NAME(J,"J");
	HX_VISIT_MEMBER_NAME(jOld,"jOld");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_UserConstraint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"L") ) { return hx::Val( L); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		if (HX_FIELD_EQ(inName,"J") ) { return hx::Val( J); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dim") ) { return hx::Val( dim); }
		if (HX_FIELD_EQ(inName,"lsq") ) { return hx::Val( lsq_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jAcc") ) { return hx::Val( jAcc); }
		if (HX_FIELD_EQ(inName,"bias") ) { return hx::Val( bias); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"soft") ) { return hx::Val( soft); }
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax); }
		if (HX_FIELD_EQ(inName,"Keff") ) { return hx::Val( Keff); }
		if (HX_FIELD_EQ(inName,"vec3") ) { return hx::Val( vec3); }
		if (HX_FIELD_EQ(inName,"jOld") ) { return hx::Val( jOld); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"solve") ) { return hx::Val( solve_dyn()); }
		if (HX_FIELD_EQ(inName,"gamma") ) { return hx::Val( gamma); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { return hx::Val( bodies); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn()); }
		if (HX_FIELD_EQ(inName,"broken") ) { return hx::Val( broken_dyn()); }
		if (HX_FIELD_EQ(inName,"_clamp") ) { return hx::Val( _clamp_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addBody") ) { return hx::Val( addBody_dyn()); }
		if (HX_FIELD_EQ(inName,"remBody") ) { return hx::Val( remBody_dyn()); }
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped); }
		if (HX_FIELD_EQ(inName,"velonly") ) { return hx::Val( velonly); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn()); }
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn()); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"bindVec2_invalidate") ) { return hx::Val( bindVec2_invalidate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_UserConstraint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"L") ) { L=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"J") ) { J=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dim") ) { dim=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jAcc") ) { jAcc=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bias") ) { bias=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"soft") ) { soft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Keff") ) { Keff=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vec3") ) { vec3=inValue.Cast<  ::nape::geom::Vec3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jOld") ) { jOld=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"gamma") ) { gamma=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { bodies=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"velonly") ) { velonly=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::UserConstraint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_UserConstraint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"));
	outFields->push(HX_HCSTRING("bodies","\x80","\x1b","\xdd","\x5a"));
	outFields->push(HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00"));
	outFields->push(HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46"));
	outFields->push(HX_HCSTRING("bias","\x79","\xea","\x16","\x41"));
	outFields->push(HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"));
	outFields->push(HX_HCSTRING("L","\x4c","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("soft","\xea","\x1c","\x58","\x4c"));
	outFields->push(HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"));
	outFields->push(HX_HCSTRING("velonly","\x49","\x5a","\xe9","\x05"));
	outFields->push(HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"));
	outFields->push(HX_HCSTRING("Keff","\x7a","\xfd","\xdf","\x31"));
	outFields->push(HX_HCSTRING("vec3","\x5f","\x27","\x4c","\x4e"));
	outFields->push(HX_HCSTRING("J","\x4a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("jOld","\x5d","\xee","\x4c","\x46"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_UserConstraint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::constraint::UserConstraint*/ ,(int)offsetof(ZPP_UserConstraint_obj,outer_zn),HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ZPP_UserConstraint_obj,bodies),HX_HCSTRING("bodies","\x80","\x1b","\xdd","\x5a")},
	{hx::fsInt,(int)offsetof(ZPP_UserConstraint_obj,dim),HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ZPP_UserConstraint_obj,jAcc),HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ZPP_UserConstraint_obj,bias),HX_HCSTRING("bias","\x79","\xea","\x16","\x41")},
	{hx::fsBool,(int)offsetof(ZPP_UserConstraint_obj,stepped),HX_HCSTRING("stepped","\x03","\x05","\x60","\x81")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ZPP_UserConstraint_obj,L),HX_HCSTRING("L","\x4c","\x00","\x00","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ZPP_UserConstraint_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_UserConstraint_obj,soft),HX_HCSTRING("soft","\xea","\x1c","\x58","\x4c")},
	{hx::fsFloat,(int)offsetof(ZPP_UserConstraint_obj,gamma),HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e")},
	{hx::fsBool,(int)offsetof(ZPP_UserConstraint_obj,velonly),HX_HCSTRING("velonly","\x49","\x5a","\xe9","\x05")},
	{hx::fsFloat,(int)offsetof(ZPP_UserConstraint_obj,jMax),HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ZPP_UserConstraint_obj,Keff),HX_HCSTRING("Keff","\x7a","\xfd","\xdf","\x31")},
	{hx::fsObject /*::nape::geom::Vec3*/ ,(int)offsetof(ZPP_UserConstraint_obj,vec3),HX_HCSTRING("vec3","\x5f","\x27","\x4c","\x4e")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ZPP_UserConstraint_obj,J),HX_HCSTRING("J","\x4a","\x00","\x00","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ZPP_UserConstraint_obj,jOld),HX_HCSTRING("jOld","\x5d","\xee","\x4c","\x46")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_UserConstraint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_UserConstraint_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"),
	HX_HCSTRING("bindVec2_invalidate","\xbf","\x6e","\x04","\x93"),
	HX_HCSTRING("bodies","\x80","\x1b","\xdd","\x5a"),
	HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00"),
	HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46"),
	HX_HCSTRING("bias","\x79","\xea","\x16","\x41"),
	HX_HCSTRING("addBody","\x63","\xbd","\x58","\x7d"),
	HX_HCSTRING("remBody","\x1c","\x35","\x3c","\xd5"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("activeBodies","\xe6","\x69","\xf8","\xba"),
	HX_HCSTRING("inactiveBodies","\x4b","\x89","\xc5","\x8c"),
	HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("wake_connected","\xae","\xcf","\xdd","\x3d"),
	HX_HCSTRING("forest","\xdd","\x8c","\x88","\xfd"),
	HX_HCSTRING("pair_exists","\xa1","\x6a","\x58","\x69"),
	HX_HCSTRING("broken","\x55","\xb6","\x57","\x1c"),
	HX_HCSTRING("clearcache","\x95","\x69","\xf1","\x82"),
	HX_HCSTRING("lsq","\x0a","\x58","\x52","\x00"),
	HX_HCSTRING("_clamp","\x3c","\xba","\x3f","\x44"),
	HX_HCSTRING("L","\x4c","\x00","\x00","\x00"),
	HX_HCSTRING("solve","\x7f","\xbf","\xc5","\x80"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("soft","\xea","\x1c","\x58","\x4c"),
	HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"),
	HX_HCSTRING("velonly","\x49","\x5a","\xe9","\x05"),
	HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"),
	HX_HCSTRING("Keff","\x7a","\xfd","\xdf","\x31"),
	HX_HCSTRING("preStep","\x0f","\xc1","\xc0","\x24"),
	HX_HCSTRING("vec3","\x5f","\x27","\x4c","\x4e"),
	HX_HCSTRING("warmStart","\xdd","\x27","\x03","\xeb"),
	HX_HCSTRING("J","\x4a","\x00","\x00","\x00"),
	HX_HCSTRING("jOld","\x5d","\xee","\x4c","\x46"),
	HX_HCSTRING("applyImpulseVel","\xb6","\xc7","\x50","\x1f"),
	HX_HCSTRING("applyImpulsePos","\xed","\x42","\x4c","\x1f"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	::String(null()) };

static void ZPP_UserConstraint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_UserConstraint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_UserConstraint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_UserConstraint_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_UserConstraint_obj::__mClass;

void ZPP_UserConstraint_obj::__register()
{
	hx::Object *dummy = new ZPP_UserConstraint_obj;
	ZPP_UserConstraint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.constraint.ZPP_UserConstraint","\x7d","\x3c","\x4e","\x73");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_UserConstraint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_UserConstraint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_UserConstraint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_UserConstraint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_UserConstraint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_UserConstraint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
