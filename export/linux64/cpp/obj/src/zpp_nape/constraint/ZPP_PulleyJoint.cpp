// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_PulleyJoint
#include <nape/constraint/PulleyJoint.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_CopyHelper
#include <zpp_nape/constraint/ZPP_CopyHelper.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_PulleyJoint
#include <zpp_nape/constraint/ZPP_PulleyJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <zpp_nape/geom/ZPP_Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_174_new,"zpp_nape.constraint.ZPP_PulleyJoint","new",0xe3d84cee,"zpp_nape.constraint.ZPP_PulleyJoint.new","zpp_nape/constraint/PulleyJoint.hx",174,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_183_is_slack,"zpp_nape.constraint.ZPP_PulleyJoint","is_slack",0x83e561ad,"zpp_nape.constraint.ZPP_PulleyJoint.is_slack","zpp_nape/constraint/PulleyJoint.hx",183,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_354_bodyImpulse,"zpp_nape.constraint.ZPP_PulleyJoint","bodyImpulse",0x57eb30c1,"zpp_nape.constraint.ZPP_PulleyJoint.bodyImpulse","zpp_nape/constraint/PulleyJoint.hx",354,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_380_activeBodies,"zpp_nape.constraint.ZPP_PulleyJoint","activeBodies",0x0252eb98,"zpp_nape.constraint.ZPP_PulleyJoint.activeBodies","zpp_nape/constraint/PulleyJoint.hx",380,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_394_inactiveBodies,"zpp_nape.constraint.ZPP_PulleyJoint","inactiveBodies",0x41095b7d,"zpp_nape.constraint.ZPP_PulleyJoint.inactiveBodies","zpp_nape/constraint/PulleyJoint.hx",394,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_414_validate_a1,"zpp_nape.constraint.ZPP_PulleyJoint","validate_a1",0xc3155687,"zpp_nape.constraint.ZPP_PulleyJoint.validate_a1","zpp_nape/constraint/PulleyJoint.hx",414,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_435_invalidate_a1,"zpp_nape.constraint.ZPP_PulleyJoint","invalidate_a1",0xced82a42,"zpp_nape.constraint.ZPP_PulleyJoint.invalidate_a1","zpp_nape/constraint/PulleyJoint.hx",435,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_459_setup_a1,"zpp_nape.constraint.ZPP_PulleyJoint","setup_a1",0x08a06924,"zpp_nape.constraint.ZPP_PulleyJoint.setup_a1","zpp_nape/constraint/PulleyJoint.hx",459,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_472_validate_a2,"zpp_nape.constraint.ZPP_PulleyJoint","validate_a2",0xc3155688,"zpp_nape.constraint.ZPP_PulleyJoint.validate_a2","zpp_nape/constraint/PulleyJoint.hx",472,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_493_invalidate_a2,"zpp_nape.constraint.ZPP_PulleyJoint","invalidate_a2",0xced82a43,"zpp_nape.constraint.ZPP_PulleyJoint.invalidate_a2","zpp_nape/constraint/PulleyJoint.hx",493,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_517_setup_a2,"zpp_nape.constraint.ZPP_PulleyJoint","setup_a2",0x08a06925,"zpp_nape.constraint.ZPP_PulleyJoint.setup_a2","zpp_nape/constraint/PulleyJoint.hx",517,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_530_validate_a3,"zpp_nape.constraint.ZPP_PulleyJoint","validate_a3",0xc3155689,"zpp_nape.constraint.ZPP_PulleyJoint.validate_a3","zpp_nape/constraint/PulleyJoint.hx",530,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_551_invalidate_a3,"zpp_nape.constraint.ZPP_PulleyJoint","invalidate_a3",0xced82a44,"zpp_nape.constraint.ZPP_PulleyJoint.invalidate_a3","zpp_nape/constraint/PulleyJoint.hx",551,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_575_setup_a3,"zpp_nape.constraint.ZPP_PulleyJoint","setup_a3",0x08a06926,"zpp_nape.constraint.ZPP_PulleyJoint.setup_a3","zpp_nape/constraint/PulleyJoint.hx",575,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_588_validate_a4,"zpp_nape.constraint.ZPP_PulleyJoint","validate_a4",0xc315568a,"zpp_nape.constraint.ZPP_PulleyJoint.validate_a4","zpp_nape/constraint/PulleyJoint.hx",588,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_609_invalidate_a4,"zpp_nape.constraint.ZPP_PulleyJoint","invalidate_a4",0xced82a45,"zpp_nape.constraint.ZPP_PulleyJoint.invalidate_a4","zpp_nape/constraint/PulleyJoint.hx",609,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_633_setup_a4,"zpp_nape.constraint.ZPP_PulleyJoint","setup_a4",0x08a06927,"zpp_nape.constraint.ZPP_PulleyJoint.setup_a4","zpp_nape/constraint/PulleyJoint.hx",633,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_646_copy,"zpp_nape.constraint.ZPP_PulleyJoint","copy",0x722d3b67,"zpp_nape.constraint.ZPP_PulleyJoint.copy","zpp_nape/constraint/PulleyJoint.hx",646,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_667_copy,"zpp_nape.constraint.ZPP_PulleyJoint","copy",0x722d3b67,"zpp_nape.constraint.ZPP_PulleyJoint.copy","zpp_nape/constraint/PulleyJoint.hx",667,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_688_copy,"zpp_nape.constraint.ZPP_PulleyJoint","copy",0x722d3b67,"zpp_nape.constraint.ZPP_PulleyJoint.copy","zpp_nape/constraint/PulleyJoint.hx",688,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_709_copy,"zpp_nape.constraint.ZPP_PulleyJoint","copy",0x722d3b67,"zpp_nape.constraint.ZPP_PulleyJoint.copy","zpp_nape/constraint/PulleyJoint.hx",709,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_730_copy,"zpp_nape.constraint.ZPP_PulleyJoint","copy",0x722d3b67,"zpp_nape.constraint.ZPP_PulleyJoint.copy","zpp_nape/constraint/PulleyJoint.hx",730,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_950_validate,"zpp_nape.constraint.ZPP_PulleyJoint","validate",0xea4b1148,"zpp_nape.constraint.ZPP_PulleyJoint.validate","zpp_nape/constraint/PulleyJoint.hx",950,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_958_wake_connected,"zpp_nape.constraint.ZPP_PulleyJoint","wake_connected",0xf221a1e0,"zpp_nape.constraint.ZPP_PulleyJoint.wake_connected","zpp_nape/constraint/PulleyJoint.hx",958,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_964_forest,"zpp_nape.constraint.ZPP_PulleyJoint","forest",0x78d5dd0f,"zpp_nape.constraint.ZPP_PulleyJoint.forest","zpp_nape/constraint/PulleyJoint.hx",964,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_1159_pair_exists,"zpp_nape.constraint.ZPP_PulleyJoint","pair_exists",0x61a1252f,"zpp_nape.constraint.ZPP_PulleyJoint.pair_exists","zpp_nape/constraint/PulleyJoint.hx",1159,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_1161_clearcache,"zpp_nape.constraint.ZPP_PulleyJoint","clearcache",0x012fbac7,"zpp_nape.constraint.ZPP_PulleyJoint.clearcache","zpp_nape/constraint/PulleyJoint.hx",1161,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_1165_preStep,"zpp_nape.constraint.ZPP_PulleyJoint","preStep",0x8d199c9d,"zpp_nape.constraint.ZPP_PulleyJoint.preStep","zpp_nape/constraint/PulleyJoint.hx",1165,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_1368_warmStart,"zpp_nape.constraint.ZPP_PulleyJoint","warmStart",0xbff482eb,"zpp_nape.constraint.ZPP_PulleyJoint.warmStart","zpp_nape/constraint/PulleyJoint.hx",1368,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_1487_applyImpulseVel,"zpp_nape.constraint.ZPP_PulleyJoint","applyImpulseVel",0x2664e144,"zpp_nape.constraint.ZPP_PulleyJoint.applyImpulseVel","zpp_nape/constraint/PulleyJoint.hx",1487,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_1633_applyImpulsePos,"zpp_nape.constraint.ZPP_PulleyJoint","applyImpulsePos",0x26605c7b,"zpp_nape.constraint.ZPP_PulleyJoint.applyImpulsePos","zpp_nape/constraint/PulleyJoint.hx",1633,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_2192_draw,"zpp_nape.constraint.ZPP_PulleyJoint","draw",0x72d8abb6,"zpp_nape.constraint.ZPP_PulleyJoint.draw","zpp_nape/constraint/PulleyJoint.hx",2192,0xdaffcadd)
HX_DEFINE_STACK_FRAME(_hx_pos_5950ec0309aae648_2217_drawLink,"zpp_nape.constraint.ZPP_PulleyJoint","drawLink",0x418402d0,"zpp_nape.constraint.ZPP_PulleyJoint.drawLink","zpp_nape/constraint/PulleyJoint.hx",2217,0xdaffcadd)
namespace zpp_nape{
namespace constraint{

void ZPP_PulleyJoint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_174_new)
            	HX_STACK_THIS(this)
HXLINE( 645)		this->stepped = false;
HXLINE( 644)		this->bias = ((Float)0.0);
HXLINE( 643)		this->gamma = ((Float)0.0);
HXLINE( 642)		this->jMax = ((Float)0.0);
HXLINE( 641)		this->jAcc = ((Float)0.0);
HXLINE( 640)		this->kMass = ((Float)0.0);
HXLINE( 639)		this->wrap_a4 = null();
HXLINE( 586)		this->a4rely = ((Float)0.0);
HXLINE( 585)		this->a4relx = ((Float)0.0);
HXLINE( 584)		this->a4localy = ((Float)0.0);
HXLINE( 583)		this->a4localx = ((Float)0.0);
HXLINE( 582)		this->b4 = null();
HXLINE( 581)		this->wrap_a3 = null();
HXLINE( 528)		this->a3rely = ((Float)0.0);
HXLINE( 527)		this->a3relx = ((Float)0.0);
HXLINE( 526)		this->a3localy = ((Float)0.0);
HXLINE( 525)		this->a3localx = ((Float)0.0);
HXLINE( 524)		this->b3 = null();
HXLINE( 523)		this->wrap_a2 = null();
HXLINE( 470)		this->a2rely = ((Float)0.0);
HXLINE( 469)		this->a2relx = ((Float)0.0);
HXLINE( 468)		this->a2localy = ((Float)0.0);
HXLINE( 467)		this->a2localx = ((Float)0.0);
HXLINE( 466)		this->b2 = null();
HXLINE( 465)		this->wrap_a1 = null();
HXLINE( 412)		this->a1rely = ((Float)0.0);
HXLINE( 411)		this->a1relx = ((Float)0.0);
HXLINE( 410)		this->a1localy = ((Float)0.0);
HXLINE( 409)		this->a1localx = ((Float)0.0);
HXLINE( 408)		this->b1 = null();
HXLINE( 352)		this->cx4 = ((Float)0.0);
HXLINE( 351)		this->cx3 = ((Float)0.0);
HXLINE( 350)		this->cx2 = ((Float)0.0);
HXLINE( 349)		this->cx1 = ((Float)0.0);
HXLINE( 348)		this->n34y = ((Float)0.0);
HXLINE( 347)		this->n34x = ((Float)0.0);
HXLINE( 346)		this->n12y = ((Float)0.0);
HXLINE( 345)		this->n12x = ((Float)0.0);
HXLINE( 180)		this->equal = false;
HXLINE( 179)		this->slack = false;
HXLINE( 178)		this->jointMax = ((Float)0.0);
HXLINE( 177)		this->jointMin = ((Float)0.0);
HXLINE( 176)		this->ratio = ((Float)1.0);
HXLINE( 175)		this->outer_zn = null();
HXLINE( 736)		super::__construct();
HXLINE( 737)		{
HXLINE( 738)			{
HXLINE( 739)				this->a1localx = (int)0;
HXLINE( 740)				this->a1localy = (int)0;
            			}
HXLINE( 758)			{
HXLINE( 759)				this->a1relx = (int)0;
HXLINE( 760)				this->a1rely = (int)0;
            			}
            		}
HXLINE( 779)		{
HXLINE( 780)			{
HXLINE( 781)				this->a2localx = (int)0;
HXLINE( 782)				this->a2localy = (int)0;
            			}
HXLINE( 800)			{
HXLINE( 801)				this->a2relx = (int)0;
HXLINE( 802)				this->a2rely = (int)0;
            			}
            		}
HXLINE( 821)		{
HXLINE( 822)			{
HXLINE( 823)				this->a3localx = (int)0;
HXLINE( 824)				this->a3localy = (int)0;
            			}
HXLINE( 842)			{
HXLINE( 843)				this->a3relx = (int)0;
HXLINE( 844)				this->a3rely = (int)0;
            			}
            		}
HXLINE( 863)		{
HXLINE( 864)			{
HXLINE( 865)				this->a4localx = (int)0;
HXLINE( 866)				this->a4localy = (int)0;
            			}
HXLINE( 884)			{
HXLINE( 885)				this->a4relx = (int)0;
HXLINE( 886)				this->a4rely = (int)0;
            			}
            		}
HXLINE( 905)		{
HXLINE( 906)			this->n12x = (int)1;
HXLINE( 907)			this->n12y = (int)0;
            		}
HXLINE( 925)		{
HXLINE( 926)			this->n34x = (int)1;
HXLINE( 927)			this->n34y = (int)0;
            		}
HXLINE( 945)		this->jAcc = (int)0;
HXLINE( 946)		this->jMax = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 947)		this->stepped = false;
HXLINE( 948)		this->cx1 = (this->cx2 = (this->cx3 = (this->cx4 = (int)0)));
            	}

Dynamic ZPP_PulleyJoint_obj::__CreateEmpty() { return new ZPP_PulleyJoint_obj; }

void *ZPP_PulleyJoint_obj::_hx_vtable = 0;

Dynamic ZPP_PulleyJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_PulleyJoint_obj > _hx_result = new ZPP_PulleyJoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_PulleyJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x70cc8aa2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x70cc8aa2;
	} else {
		return inClassId==(int)0x7c84a5ec;
	}
}

bool ZPP_PulleyJoint_obj::is_slack(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_183_is_slack)
            	HX_STACK_THIS(this)
HXLINE( 184)		HX_VAR( bool,slack);
HXLINE( 185)		{
HXLINE( 186)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE( 187)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE( 189)		{
HXLINE( 190)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE( 191)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE( 193)		{
HXLINE( 194)			this->a3relx = ((this->b3->axisy * this->a3localx) - (this->b3->axisx * this->a3localy));
HXLINE( 195)			this->a3rely = ((this->a3localx * this->b3->axisx) + (this->a3localy * this->b3->axisy));
            		}
HXLINE( 197)		{
HXLINE( 198)			this->a4relx = ((this->b4->axisy * this->a4localx) - (this->b4->axisx * this->a4localy));
HXLINE( 199)			this->a4rely = ((this->a4localx * this->b4->axisx) + (this->a4localy * this->b4->axisy));
            		}
HXLINE( 205)		{
HXLINE( 206)			HX_VARI( Float,t12x) = ((Float)0.0);
HXLINE( 207)			HX_VARI( Float,t12y) = ((Float)0.0);
HXLINE( 208)			HX_VARI( Float,t34x) = ((Float)0.0);
HXLINE( 209)			HX_VARI( Float,t34y) = ((Float)0.0);
HXLINE( 210)			t12x = ((this->b2->posx + this->a2relx) - (this->b1->posx + this->a1relx));
HXLINE( 211)			t12y = ((this->b2->posy + this->a2rely) - (this->b1->posy + this->a1rely));
HXLINE( 212)			t34x = ((this->b4->posx + this->a4relx) - (this->b3->posx + this->a3relx));
HXLINE( 213)			t34y = ((this->b4->posy + this->a4rely) - (this->b3->posy + this->a3rely));
HXLINE( 274)			HX_VARI( Float,C) = (::Math_obj::sqrt(((t12x * t12x) + (t12y * t12y))) + (this->ratio * ::Math_obj::sqrt(((t34x * t34x) + (t34y * t34y)))));
HXLINE( 275)			if (this->equal) {
HXLINE( 277)				slack = false;
            			}
            			else {
HXLINE( 280)				if ((C < this->jointMin)) {
HXLINE( 290)					slack = false;
            				}
            				else {
HXLINE( 292)					if ((C > this->jointMax)) {
HXLINE( 293)						C = (C - this->jointMax);
HXLINE( 294)						slack = false;
            					}
            					else {
HXLINE( 337)						C = (int)0;
HXLINE( 338)						slack = true;
            					}
            				}
            			}
            		}
HXLINE( 343)		return slack;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,is_slack,return )

 ::nape::geom::Vec3 ZPP_PulleyJoint_obj::bodyImpulse( ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_354_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 354)		if (this->stepped) {
HXLINE( 355)			HX_VARI(  ::nape::geom::Vec3,ret) = ::nape::geom::Vec3_obj::get(null(),null(),null());
HXLINE( 356)			if (hx::IsEq( b,this->b1 )) {
HXLINE( 357)				{
HXLINE( 357)					{
HXLINE( 357)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec3,_this) = ret->zpp_inner;
HXDLIN( 357)						if (hx::IsNotNull( _this->_validate )) {
HXLINE( 357)							_this->_validate();
            						}
            					}
HXDLIN( 357)					ret->zpp_inner->x = (ret->zpp_inner->x - (this->jAcc * this->n12x));
HXDLIN( 357)					{
HXLINE( 357)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = ret->zpp_inner;
HXDLIN( 357)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 357)							_this1->_validate();
            						}
            					}
            				}
HXLINE( 358)				{
HXLINE( 358)					{
HXLINE( 358)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = ret->zpp_inner;
HXDLIN( 358)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 358)							_this2->_validate();
            						}
            					}
HXDLIN( 358)					ret->zpp_inner->y = (ret->zpp_inner->y - (this->jAcc * this->n12y));
HXDLIN( 358)					{
HXLINE( 358)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = ret->zpp_inner;
HXDLIN( 358)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 358)							_this3->_validate();
            						}
            					}
            				}
HXLINE( 359)				{
HXLINE( 359)					{
HXLINE( 359)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this4,"_this") = ret->zpp_inner;
HXDLIN( 359)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 359)							_this4->_validate();
            						}
            					}
HXDLIN( 359)					ret->zpp_inner->z = (ret->zpp_inner->z - (this->cx1 * this->jAcc));
HXDLIN( 359)					{
HXLINE( 359)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this5,"_this") = ret->zpp_inner;
HXDLIN( 359)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 359)							_this5->_validate();
            						}
            					}
            				}
            			}
HXLINE( 361)			if (hx::IsEq( b,this->b2 )) {
HXLINE( 362)				{
HXLINE( 362)					{
HXLINE( 362)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this6,"_this") = ret->zpp_inner;
HXDLIN( 362)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 362)							_this6->_validate();
            						}
            					}
HXDLIN( 362)					ret->zpp_inner->x = (ret->zpp_inner->x + (this->jAcc * this->n12x));
HXDLIN( 362)					{
HXLINE( 362)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this7,"_this") = ret->zpp_inner;
HXDLIN( 362)						if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 362)							_this7->_validate();
            						}
            					}
            				}
HXLINE( 363)				{
HXLINE( 363)					{
HXLINE( 363)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this8,"_this") = ret->zpp_inner;
HXDLIN( 363)						if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 363)							_this8->_validate();
            						}
            					}
HXDLIN( 363)					ret->zpp_inner->y = (ret->zpp_inner->y + (this->jAcc * this->n12y));
HXDLIN( 363)					{
HXLINE( 363)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this9,"_this") = ret->zpp_inner;
HXDLIN( 363)						if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 363)							_this9->_validate();
            						}
            					}
            				}
HXLINE( 364)				{
HXLINE( 364)					{
HXLINE( 364)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this10,"_this") = ret->zpp_inner;
HXDLIN( 364)						if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 364)							_this10->_validate();
            						}
            					}
HXDLIN( 364)					ret->zpp_inner->z = (ret->zpp_inner->z + (this->cx2 * this->jAcc));
HXDLIN( 364)					{
HXLINE( 364)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this11,"_this") = ret->zpp_inner;
HXDLIN( 364)						if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 364)							_this11->_validate();
            						}
            					}
            				}
            			}
HXLINE( 366)			if (hx::IsEq( b,this->b3 )) {
HXLINE( 367)				{
HXLINE( 367)					{
HXLINE( 367)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this12,"_this") = ret->zpp_inner;
HXDLIN( 367)						if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 367)							_this12->_validate();
            						}
            					}
HXDLIN( 367)					ret->zpp_inner->x = (ret->zpp_inner->x - (this->jAcc * this->n34x));
HXDLIN( 367)					{
HXLINE( 367)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this13,"_this") = ret->zpp_inner;
HXDLIN( 367)						if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 367)							_this13->_validate();
            						}
            					}
            				}
HXLINE( 368)				{
HXLINE( 368)					{
HXLINE( 368)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this14,"_this") = ret->zpp_inner;
HXDLIN( 368)						if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 368)							_this14->_validate();
            						}
            					}
HXDLIN( 368)					ret->zpp_inner->y = (ret->zpp_inner->y - (this->jAcc * this->n34y));
HXDLIN( 368)					{
HXLINE( 368)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this15,"_this") = ret->zpp_inner;
HXDLIN( 368)						if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 368)							_this15->_validate();
            						}
            					}
            				}
HXLINE( 369)				{
HXLINE( 369)					{
HXLINE( 369)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this16,"_this") = ret->zpp_inner;
HXDLIN( 369)						if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 369)							_this16->_validate();
            						}
            					}
HXDLIN( 369)					ret->zpp_inner->z = (ret->zpp_inner->z - (this->cx3 * this->jAcc));
HXDLIN( 369)					{
HXLINE( 369)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this17,"_this") = ret->zpp_inner;
HXDLIN( 369)						if (hx::IsNotNull( _this17->_validate )) {
HXLINE( 369)							_this17->_validate();
            						}
            					}
            				}
            			}
HXLINE( 371)			if (hx::IsEq( b,this->b4 )) {
HXLINE( 372)				{
HXLINE( 372)					{
HXLINE( 372)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this18,"_this") = ret->zpp_inner;
HXDLIN( 372)						if (hx::IsNotNull( _this18->_validate )) {
HXLINE( 372)							_this18->_validate();
            						}
            					}
HXDLIN( 372)					ret->zpp_inner->x = (ret->zpp_inner->x + (this->jAcc * this->n34x));
HXDLIN( 372)					{
HXLINE( 372)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this19,"_this") = ret->zpp_inner;
HXDLIN( 372)						if (hx::IsNotNull( _this19->_validate )) {
HXLINE( 372)							_this19->_validate();
            						}
            					}
            				}
HXLINE( 373)				{
HXLINE( 373)					{
HXLINE( 373)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this20,"_this") = ret->zpp_inner;
HXDLIN( 373)						if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 373)							_this20->_validate();
            						}
            					}
HXDLIN( 373)					ret->zpp_inner->y = (ret->zpp_inner->y + (this->jAcc * this->n34y));
HXDLIN( 373)					{
HXLINE( 373)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this21,"_this") = ret->zpp_inner;
HXDLIN( 373)						if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 373)							_this21->_validate();
            						}
            					}
            				}
HXLINE( 374)				{
HXLINE( 374)					{
HXLINE( 374)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this22,"_this") = ret->zpp_inner;
HXDLIN( 374)						if (hx::IsNotNull( _this22->_validate )) {
HXLINE( 374)							_this22->_validate();
            						}
            					}
HXDLIN( 374)					ret->zpp_inner->z = (ret->zpp_inner->z + (this->cx4 * this->jAcc));
HXDLIN( 374)					{
HXLINE( 374)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this23,"_this") = ret->zpp_inner;
HXDLIN( 374)						if (hx::IsNotNull( _this23->_validate )) {
HXLINE( 374)							_this23->_validate();
            						}
            					}
            				}
            			}
HXLINE( 376)			return ret;
            		}
            		else {
HXLINE( 378)			return ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
            		}
HXLINE( 354)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PulleyJoint_obj,bodyImpulse,return )

void ZPP_PulleyJoint_obj::activeBodies(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_380_activeBodies)
            	HX_STACK_THIS(this)
HXLINE( 382)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 382)			this->b1->constraints->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 384)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 385)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 385)				this->b2->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 387)		bool _hx_tmp;
HXDLIN( 387)		if (hx::IsNotEq( this->b3,this->b1 )) {
HXLINE( 387)			_hx_tmp = hx::IsNotEq( this->b3,this->b2 );
            		}
            		else {
HXLINE( 387)			_hx_tmp = false;
            		}
HXDLIN( 387)		if (_hx_tmp) {
HXLINE( 388)			if (hx::IsNotNull( this->b3 )) {
HXLINE( 388)				this->b3->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 390)		bool _hx_tmp1;
HXDLIN( 390)		bool _hx_tmp2;
HXDLIN( 390)		if (hx::IsNotEq( this->b4,this->b1 )) {
HXLINE( 390)			_hx_tmp2 = hx::IsNotEq( this->b4,this->b2 );
            		}
            		else {
HXLINE( 390)			_hx_tmp2 = false;
            		}
HXDLIN( 390)		if (_hx_tmp2) {
HXLINE( 390)			_hx_tmp1 = hx::IsNotEq( this->b4,this->b3 );
            		}
            		else {
HXLINE( 390)			_hx_tmp1 = false;
            		}
HXDLIN( 390)		if (_hx_tmp1) {
HXLINE( 391)			if (hx::IsNotNull( this->b4 )) {
HXLINE( 391)				this->b4->constraints->add(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_PulleyJoint_obj::inactiveBodies(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_394_inactiveBodies)
            	HX_STACK_THIS(this)
HXLINE( 396)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 396)			this->b1->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 398)		if (hx::IsNotEq( this->b2,this->b1 )) {
HXLINE( 399)			if (hx::IsNotNull( this->b2 )) {
HXLINE( 399)				this->b2->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 401)		bool _hx_tmp;
HXDLIN( 401)		if (hx::IsNotEq( this->b3,this->b1 )) {
HXLINE( 401)			_hx_tmp = hx::IsNotEq( this->b3,this->b2 );
            		}
            		else {
HXLINE( 401)			_hx_tmp = false;
            		}
HXDLIN( 401)		if (_hx_tmp) {
HXLINE( 402)			if (hx::IsNotNull( this->b3 )) {
HXLINE( 402)				this->b3->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 404)		bool _hx_tmp1;
HXDLIN( 404)		bool _hx_tmp2;
HXDLIN( 404)		if (hx::IsNotEq( this->b4,this->b1 )) {
HXLINE( 404)			_hx_tmp2 = hx::IsNotEq( this->b4,this->b2 );
            		}
            		else {
HXLINE( 404)			_hx_tmp2 = false;
            		}
HXDLIN( 404)		if (_hx_tmp2) {
HXLINE( 404)			_hx_tmp1 = hx::IsNotEq( this->b4,this->b3 );
            		}
            		else {
HXLINE( 404)			_hx_tmp1 = false;
            		}
HXDLIN( 404)		if (_hx_tmp1) {
HXLINE( 405)			if (hx::IsNotNull( this->b4 )) {
HXLINE( 405)				this->b4->constraints->remove(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


void ZPP_PulleyJoint_obj::validate_a1(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_414_validate_a1)
            	HX_STACK_THIS(this)
HXLINE( 415)		this->wrap_a1->zpp_inner->x = this->a1localx;
HXLINE( 416)		this->wrap_a1->zpp_inner->y = this->a1localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,validate_a1,(void))

void ZPP_PulleyJoint_obj::invalidate_a1( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_435_invalidate_a1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 437)		{
HXLINE( 438)			this->a1localx = x->x;
HXLINE( 439)			this->a1localy = x->y;
            		}
HXLINE( 457)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PulleyJoint_obj,invalidate_a1,(void))

void ZPP_PulleyJoint_obj::setup_a1(){
            	HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_459_setup_a1)
            	HX_STACK_THIS(this)
HXLINE( 460)		HX_VARI( Float,x) = this->a1localx;
HXDLIN( 460)		HX_VARI( Float,y) = this->a1localy;
HXDLIN( 460)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 460)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 460)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 460)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 460)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 460)			ret->zpp_pool = null();
            		}
HXDLIN( 460)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 460)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 460)			{
HXLINE( 460)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 460)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 460)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 460)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 460)					ret1->next = null();
            				}
HXDLIN( 460)				ret1->weak = false;
            			}
HXDLIN( 460)			ret1->_immutable = false;
HXDLIN( 460)			{
HXLINE( 460)				ret1->x = x;
HXDLIN( 460)				ret1->y = y;
            			}
HXDLIN( 460)			ret->zpp_inner = ret1;
HXDLIN( 460)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 460)			bool _hx_tmp;
HXDLIN( 460)			{
HXLINE( 460)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 460)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 460)					_this->_validate();
            				}
            			}
HXDLIN( 460)			if ((ret->zpp_inner->x == x)) {
HXLINE( 460)				{
HXLINE( 460)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 460)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 460)						_this1->_validate();
            					}
            				}
HXDLIN( 460)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 460)				_hx_tmp = false;
            			}
HXDLIN( 460)			if (!(_hx_tmp)) {
HXLINE( 460)				{
HXLINE( 460)					ret->zpp_inner->x = x;
HXDLIN( 460)					ret->zpp_inner->y = y;
            				}
HXDLIN( 460)				{
HXLINE( 460)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 460)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 460)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 460)		ret->zpp_inner->weak = false;
HXDLIN( 460)		this->wrap_a1 = ret;
HXLINE( 461)		this->wrap_a1->zpp_inner->_inuse = true;
HXLINE( 462)		this->wrap_a1->zpp_inner->_validate = this->validate_a1_dyn();
HXLINE( 463)		this->wrap_a1->zpp_inner->_invalidate = this->invalidate_a1_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,setup_a1,(void))

void ZPP_PulleyJoint_obj::validate_a2(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_472_validate_a2)
            	HX_STACK_THIS(this)
HXLINE( 473)		this->wrap_a2->zpp_inner->x = this->a2localx;
HXLINE( 474)		this->wrap_a2->zpp_inner->y = this->a2localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,validate_a2,(void))

void ZPP_PulleyJoint_obj::invalidate_a2( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_493_invalidate_a2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 495)		{
HXLINE( 496)			this->a2localx = x->x;
HXLINE( 497)			this->a2localy = x->y;
            		}
HXLINE( 515)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PulleyJoint_obj,invalidate_a2,(void))

void ZPP_PulleyJoint_obj::setup_a2(){
            	HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_517_setup_a2)
            	HX_STACK_THIS(this)
HXLINE( 518)		HX_VARI( Float,x) = this->a2localx;
HXDLIN( 518)		HX_VARI( Float,y) = this->a2localy;
HXDLIN( 518)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 518)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 518)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 518)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 518)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 518)			ret->zpp_pool = null();
            		}
HXDLIN( 518)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 518)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 518)			{
HXLINE( 518)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 518)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 518)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 518)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 518)					ret1->next = null();
            				}
HXDLIN( 518)				ret1->weak = false;
            			}
HXDLIN( 518)			ret1->_immutable = false;
HXDLIN( 518)			{
HXLINE( 518)				ret1->x = x;
HXDLIN( 518)				ret1->y = y;
            			}
HXDLIN( 518)			ret->zpp_inner = ret1;
HXDLIN( 518)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 518)			bool _hx_tmp;
HXDLIN( 518)			{
HXLINE( 518)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 518)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 518)					_this->_validate();
            				}
            			}
HXDLIN( 518)			if ((ret->zpp_inner->x == x)) {
HXLINE( 518)				{
HXLINE( 518)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 518)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 518)						_this1->_validate();
            					}
            				}
HXDLIN( 518)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 518)				_hx_tmp = false;
            			}
HXDLIN( 518)			if (!(_hx_tmp)) {
HXLINE( 518)				{
HXLINE( 518)					ret->zpp_inner->x = x;
HXDLIN( 518)					ret->zpp_inner->y = y;
            				}
HXDLIN( 518)				{
HXLINE( 518)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 518)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 518)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 518)		ret->zpp_inner->weak = false;
HXDLIN( 518)		this->wrap_a2 = ret;
HXLINE( 519)		this->wrap_a2->zpp_inner->_inuse = true;
HXLINE( 520)		this->wrap_a2->zpp_inner->_validate = this->validate_a2_dyn();
HXLINE( 521)		this->wrap_a2->zpp_inner->_invalidate = this->invalidate_a2_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,setup_a2,(void))

void ZPP_PulleyJoint_obj::validate_a3(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_530_validate_a3)
            	HX_STACK_THIS(this)
HXLINE( 531)		this->wrap_a3->zpp_inner->x = this->a3localx;
HXLINE( 532)		this->wrap_a3->zpp_inner->y = this->a3localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,validate_a3,(void))

void ZPP_PulleyJoint_obj::invalidate_a3( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_551_invalidate_a3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 553)		{
HXLINE( 554)			this->a3localx = x->x;
HXLINE( 555)			this->a3localy = x->y;
            		}
HXLINE( 573)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PulleyJoint_obj,invalidate_a3,(void))

void ZPP_PulleyJoint_obj::setup_a3(){
            	HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_575_setup_a3)
            	HX_STACK_THIS(this)
HXLINE( 576)		HX_VARI( Float,x) = this->a3localx;
HXDLIN( 576)		HX_VARI( Float,y) = this->a3localy;
HXDLIN( 576)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 576)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 576)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 576)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 576)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 576)			ret->zpp_pool = null();
            		}
HXDLIN( 576)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 576)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 576)			{
HXLINE( 576)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 576)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 576)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 576)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 576)					ret1->next = null();
            				}
HXDLIN( 576)				ret1->weak = false;
            			}
HXDLIN( 576)			ret1->_immutable = false;
HXDLIN( 576)			{
HXLINE( 576)				ret1->x = x;
HXDLIN( 576)				ret1->y = y;
            			}
HXDLIN( 576)			ret->zpp_inner = ret1;
HXDLIN( 576)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 576)			bool _hx_tmp;
HXDLIN( 576)			{
HXLINE( 576)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 576)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 576)					_this->_validate();
            				}
            			}
HXDLIN( 576)			if ((ret->zpp_inner->x == x)) {
HXLINE( 576)				{
HXLINE( 576)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 576)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 576)						_this1->_validate();
            					}
            				}
HXDLIN( 576)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 576)				_hx_tmp = false;
            			}
HXDLIN( 576)			if (!(_hx_tmp)) {
HXLINE( 576)				{
HXLINE( 576)					ret->zpp_inner->x = x;
HXDLIN( 576)					ret->zpp_inner->y = y;
            				}
HXDLIN( 576)				{
HXLINE( 576)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 576)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 576)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 576)		ret->zpp_inner->weak = false;
HXDLIN( 576)		this->wrap_a3 = ret;
HXLINE( 577)		this->wrap_a3->zpp_inner->_inuse = true;
HXLINE( 578)		this->wrap_a3->zpp_inner->_validate = this->validate_a3_dyn();
HXLINE( 579)		this->wrap_a3->zpp_inner->_invalidate = this->invalidate_a3_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,setup_a3,(void))

void ZPP_PulleyJoint_obj::validate_a4(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_588_validate_a4)
            	HX_STACK_THIS(this)
HXLINE( 589)		this->wrap_a4->zpp_inner->x = this->a4localx;
HXLINE( 590)		this->wrap_a4->zpp_inner->y = this->a4localy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,validate_a4,(void))

void ZPP_PulleyJoint_obj::invalidate_a4( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_609_invalidate_a4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 611)		{
HXLINE( 612)			this->a4localx = x->x;
HXLINE( 613)			this->a4localy = x->y;
            		}
HXLINE( 631)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PulleyJoint_obj,invalidate_a4,(void))

void ZPP_PulleyJoint_obj::setup_a4(){
            	HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_633_setup_a4)
            	HX_STACK_THIS(this)
HXLINE( 634)		HX_VARI( Float,x) = this->a4localx;
HXDLIN( 634)		HX_VARI( Float,y) = this->a4localy;
HXDLIN( 634)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 634)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 634)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 634)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 634)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 634)			ret->zpp_pool = null();
            		}
HXDLIN( 634)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 634)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 634)			{
HXLINE( 634)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 634)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 634)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 634)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 634)					ret1->next = null();
            				}
HXDLIN( 634)				ret1->weak = false;
            			}
HXDLIN( 634)			ret1->_immutable = false;
HXDLIN( 634)			{
HXLINE( 634)				ret1->x = x;
HXDLIN( 634)				ret1->y = y;
            			}
HXDLIN( 634)			ret->zpp_inner = ret1;
HXDLIN( 634)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 634)			bool _hx_tmp;
HXDLIN( 634)			{
HXLINE( 634)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 634)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 634)					_this->_validate();
            				}
            			}
HXDLIN( 634)			if ((ret->zpp_inner->x == x)) {
HXLINE( 634)				{
HXLINE( 634)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 634)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 634)						_this1->_validate();
            					}
            				}
HXDLIN( 634)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 634)				_hx_tmp = false;
            			}
HXDLIN( 634)			if (!(_hx_tmp)) {
HXLINE( 634)				{
HXLINE( 634)					ret->zpp_inner->x = x;
HXDLIN( 634)					ret->zpp_inner->y = y;
            				}
HXDLIN( 634)				{
HXLINE( 634)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 634)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 634)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 634)		ret->zpp_inner->weak = false;
HXDLIN( 634)		this->wrap_a4 = ret;
HXLINE( 635)		this->wrap_a4->zpp_inner->_inuse = true;
HXLINE( 636)		this->wrap_a4->zpp_inner->_validate = this->validate_a4_dyn();
HXLINE( 637)		this->wrap_a4->zpp_inner->_invalidate = this->invalidate_a4_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PulleyJoint_obj,setup_a4,(void))

 ::nape::constraint::Constraint ZPP_PulleyJoint_obj::copy(::Array< ::Dynamic> dict,::Array< ::Dynamic> todo){
            	HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_646_copy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dict,"dict")
            	HX_STACK_ARG(todo,"todo")
HXLINE( 647)		HX_VARI(  ::nape::constraint::PulleyJoint,_this) = this->outer_zn;
HXDLIN( 647)		if (hx::IsNull( _this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 647)			_this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 647)		HX_VARI(  ::nape::geom::Vec2,ret) = _this->zpp_inner_zn->wrap_a1;
HXDLIN( 647)		HX_VARI_NAME(  ::nape::constraint::PulleyJoint,_this1,"_this") = this->outer_zn;
HXDLIN( 647)		if (hx::IsNull( _this1->zpp_inner_zn->wrap_a2 )) {
HXLINE( 647)			_this1->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 647)		HX_VARI_NAME(  ::nape::geom::Vec2,ret1,"ret") = _this1->zpp_inner_zn->wrap_a2;
HXDLIN( 647)		HX_VARI_NAME(  ::nape::constraint::PulleyJoint,_this2,"_this") = this->outer_zn;
HXDLIN( 647)		if (hx::IsNull( _this2->zpp_inner_zn->wrap_a3 )) {
HXLINE( 647)			_this2->zpp_inner_zn->setup_a3();
            		}
HXDLIN( 647)		HX_VARI_NAME(  ::nape::geom::Vec2,ret2,"ret") = _this2->zpp_inner_zn->wrap_a3;
HXDLIN( 647)		HX_VARI_NAME(  ::nape::constraint::PulleyJoint,_this3,"_this") = this->outer_zn;
HXDLIN( 647)		if (hx::IsNull( _this3->zpp_inner_zn->wrap_a4 )) {
HXLINE( 647)			_this3->zpp_inner_zn->setup_a4();
            		}
HXDLIN( 647)		HX_VARI_NAME(  ::nape::constraint::PulleyJoint,ret3,"ret") =  ::nape::constraint::PulleyJoint_obj::__alloc( HX_CTX ,null(),null(),null(),null(),ret,ret1,ret2,_this3->zpp_inner_zn->wrap_a4,this->jointMin,this->jointMax,this->ratio);
HXLINE( 648)		this->copyto(ret3);
HXLINE( 650)		bool _hx_tmp;
HXDLIN( 650)		if (hx::IsNotNull( dict )) {
HXLINE( 650)			_hx_tmp = hx::IsNotNull( this->b1 );
            		}
            		else {
HXLINE( 650)			_hx_tmp = false;
            		}
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 659)			HX_VARI(  ::nape::phys::Body,b) = null();
HXLINE( 660)			{
HXLINE( 660)				HX_VARI( int,_g) = (int)0;
HXDLIN( 660)				while((_g < dict->length)){
HXLINE( 660)					HX_VARI(  ::zpp_nape::constraint::ZPP_CopyHelper,idc) = dict->__get(_g).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 660)					_g = (_g + (int)1);
HXLINE( 661)					if ((idc->id == this->b1->id)) {
HXLINE( 662)						b = idc->bc;
HXLINE( 663)						goto _hx_goto_17;
            					}
            				}
            				_hx_goto_17:;
            			}
HXLINE( 666)			if (hx::IsNotNull( b )) {
HXLINE( 666)				ret3->zpp_inner_zn->b1 = b->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::nape::constraint::PulleyJoint,ret3) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b1){
            					HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_667_copy)
            					HX_STACK_ARG(b1,"b1")
HXLINE( 667)					ret3->zpp_inner_zn->b1 = b1->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 667)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b1->id, ::Dynamic(new _hx_Closure_0(ret3))));
            			}
            		}
HXLINE( 671)		bool _hx_tmp1;
HXDLIN( 671)		if (hx::IsNotNull( dict )) {
HXLINE( 671)			_hx_tmp1 = hx::IsNotNull( this->b2 );
            		}
            		else {
HXLINE( 671)			_hx_tmp1 = false;
            		}
HXDLIN( 671)		if (_hx_tmp1) {
HXLINE( 680)			HX_VARI_NAME(  ::nape::phys::Body,b2,"b") = null();
HXLINE( 681)			{
HXLINE( 681)				HX_VARI_NAME( int,_g1,"_g") = (int)0;
HXDLIN( 681)				while((_g1 < dict->length)){
HXLINE( 681)					HX_VARI_NAME(  ::zpp_nape::constraint::ZPP_CopyHelper,idc1,"idc") = dict->__get(_g1).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 681)					_g1 = (_g1 + (int)1);
HXLINE( 682)					if ((idc1->id == this->b2->id)) {
HXLINE( 683)						b2 = idc1->bc;
HXLINE( 684)						goto _hx_goto_18;
            					}
            				}
            				_hx_goto_18:;
            			}
HXLINE( 687)			if (hx::IsNotNull( b2 )) {
HXLINE( 687)				ret3->zpp_inner_zn->b2 = b2->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::nape::constraint::PulleyJoint,ret3) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b3){
            					HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_688_copy)
            					HX_STACK_ARG(b3,"b3")
HXLINE( 688)					ret3->zpp_inner_zn->b2 = b3->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 688)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b2->id, ::Dynamic(new _hx_Closure_1(ret3))));
            			}
            		}
HXLINE( 692)		bool _hx_tmp2;
HXDLIN( 692)		if (hx::IsNotNull( dict )) {
HXLINE( 692)			_hx_tmp2 = hx::IsNotNull( this->b3 );
            		}
            		else {
HXLINE( 692)			_hx_tmp2 = false;
            		}
HXDLIN( 692)		if (_hx_tmp2) {
HXLINE( 701)			HX_VARI_NAME(  ::nape::phys::Body,b4,"b") = null();
HXLINE( 702)			{
HXLINE( 702)				HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 702)				while((_g2 < dict->length)){
HXLINE( 702)					HX_VARI_NAME(  ::zpp_nape::constraint::ZPP_CopyHelper,idc2,"idc") = dict->__get(_g2).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 702)					_g2 = (_g2 + (int)1);
HXLINE( 703)					if ((idc2->id == this->b3->id)) {
HXLINE( 704)						b4 = idc2->bc;
HXLINE( 705)						goto _hx_goto_19;
            					}
            				}
            				_hx_goto_19:;
            			}
HXLINE( 708)			if (hx::IsNotNull( b4 )) {
HXLINE( 708)				ret3->zpp_inner_zn->b3 = b4->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::nape::constraint::PulleyJoint,ret3) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b5){
            					HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_709_copy)
            					HX_STACK_ARG(b5,"b5")
HXLINE( 709)					ret3->zpp_inner_zn->b3 = b5->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 709)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b3->id, ::Dynamic(new _hx_Closure_2(ret3))));
            			}
            		}
HXLINE( 713)		bool _hx_tmp3;
HXDLIN( 713)		if (hx::IsNotNull( dict )) {
HXLINE( 713)			_hx_tmp3 = hx::IsNotNull( this->b4 );
            		}
            		else {
HXLINE( 713)			_hx_tmp3 = false;
            		}
HXDLIN( 713)		if (_hx_tmp3) {
HXLINE( 722)			HX_VARI_NAME(  ::nape::phys::Body,b6,"b") = null();
HXLINE( 723)			{
HXLINE( 723)				HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN( 723)				while((_g3 < dict->length)){
HXLINE( 723)					HX_VARI_NAME(  ::zpp_nape::constraint::ZPP_CopyHelper,idc3,"idc") = dict->__get(_g3).StaticCast<  ::zpp_nape::constraint::ZPP_CopyHelper >();
HXDLIN( 723)					_g3 = (_g3 + (int)1);
HXLINE( 724)					if ((idc3->id == this->b4->id)) {
HXLINE( 725)						b6 = idc3->bc;
HXLINE( 726)						goto _hx_goto_20;
            					}
            				}
            				_hx_goto_20:;
            			}
HXLINE( 729)			if (hx::IsNotNull( b6 )) {
HXLINE( 729)				ret3->zpp_inner_zn->b4 = b6->zpp_inner;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::nape::constraint::PulleyJoint,ret3) HXARGC(1)
            				void _hx_run( ::nape::phys::Body b7){
            					HX_GC_STACKFRAME(&_hx_pos_5950ec0309aae648_730_copy)
            					HX_STACK_ARG(b7,"b7")
HXLINE( 730)					ret3->zpp_inner_zn->b4 = b7->zpp_inner;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 730)				todo->push(::zpp_nape::constraint::ZPP_CopyHelper_obj::todo(this->b4->id, ::Dynamic(new _hx_Closure_3(ret3))));
            			}
            		}
HXLINE( 733)		return ret3;
            	}


void ZPP_PulleyJoint_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_950_validate)
            	HX_STACK_THIS(this)
HXLINE( 951)		bool _hx_tmp;
HXDLIN( 951)		bool _hx_tmp1;
HXDLIN( 951)		bool _hx_tmp2;
HXDLIN( 951)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 951)			_hx_tmp2 = hx::IsNull( this->b2 );
            		}
            		else {
HXLINE( 951)			_hx_tmp2 = true;
            		}
HXDLIN( 951)		if (!(_hx_tmp2)) {
HXLINE( 951)			_hx_tmp1 = hx::IsNull( this->b3 );
            		}
            		else {
HXLINE( 951)			_hx_tmp1 = true;
            		}
HXDLIN( 951)		if (!(_hx_tmp1)) {
HXLINE( 951)			_hx_tmp = hx::IsNull( this->b4 );
            		}
            		else {
HXLINE( 951)			_hx_tmp = true;
            		}
HXDLIN( 951)		if (_hx_tmp) {
HXLINE( 951)			HX_STACK_DO_THROW(HX_("Error: PulleyJoint cannot be simulated with null bodies",fc,bf,51,2e));
            		}
HXLINE( 952)		bool _hx_tmp3;
HXDLIN( 952)		if (hx::IsNotEq( this->b1,this->b2 )) {
HXLINE( 952)			_hx_tmp3 = hx::IsEq( this->b3,this->b4 );
            		}
            		else {
HXLINE( 952)			_hx_tmp3 = true;
            		}
HXDLIN( 952)		if (_hx_tmp3) {
HXLINE( 952)			HX_STACK_DO_THROW(HX_("Error: PulleyJoint cannot have body1==body2 or body3==body4",f7,ec,91,21));
            		}
HXLINE( 953)		bool _hx_tmp4;
HXDLIN( 953)		bool _hx_tmp5;
HXDLIN( 953)		bool _hx_tmp6;
HXDLIN( 953)		if (hx::IsEq( this->b1->space,this->space )) {
HXLINE( 953)			_hx_tmp6 = hx::IsNotEq( this->b2->space,this->space );
            		}
            		else {
HXLINE( 953)			_hx_tmp6 = true;
            		}
HXDLIN( 953)		if (!(_hx_tmp6)) {
HXLINE( 953)			_hx_tmp5 = hx::IsNotEq( this->b3->space,this->space );
            		}
            		else {
HXLINE( 953)			_hx_tmp5 = true;
            		}
HXDLIN( 953)		if (!(_hx_tmp5)) {
HXLINE( 953)			_hx_tmp4 = hx::IsNotEq( this->b4->space,this->space );
            		}
            		else {
HXLINE( 953)			_hx_tmp4 = true;
            		}
HXDLIN( 953)		if (_hx_tmp4) {
HXLINE( 953)			HX_STACK_DO_THROW(HX_("Error: Constraints must have each body within the same space to which the constraint has been assigned",e8,8c,93,57));
            		}
HXLINE( 954)		if ((this->jointMin > this->jointMax)) {
HXLINE( 954)			HX_STACK_DO_THROW(HX_("Error: PulleyJoint must have jointMin <= jointMax",3f,77,0d,db));
            		}
HXLINE( 955)		bool _hx_tmp7;
HXDLIN( 955)		if ((this->b1->type != (int)2)) {
HXLINE( 955)			_hx_tmp7 = (this->b2->type != (int)2);
            		}
            		else {
HXLINE( 955)			_hx_tmp7 = false;
            		}
HXDLIN( 955)		if (_hx_tmp7) {
HXLINE( 955)			HX_STACK_DO_THROW(HX_("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic",9f,a4,74,61));
            		}
HXLINE( 956)		bool _hx_tmp8;
HXDLIN( 956)		if ((this->b3->type != (int)2)) {
HXLINE( 956)			_hx_tmp8 = (this->b4->type != (int)2);
            		}
            		else {
HXLINE( 956)			_hx_tmp8 = false;
            		}
HXDLIN( 956)		if (_hx_tmp8) {
HXLINE( 956)			HX_STACK_DO_THROW(HX_("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic",9f,a4,74,61));
            		}
            	}


void ZPP_PulleyJoint_obj::wake_connected(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_958_wake_connected)
            	HX_STACK_THIS(this)
HXLINE( 959)		bool _hx_tmp;
HXDLIN( 959)		if (hx::IsNotNull( this->b1 )) {
HXLINE( 959)			_hx_tmp = (this->b1->type == (int)2);
            		}
            		else {
HXLINE( 959)			_hx_tmp = false;
            		}
HXDLIN( 959)		if (_hx_tmp) {
HXLINE( 959)			this->b1->wake();
            		}
HXLINE( 960)		bool _hx_tmp1;
HXDLIN( 960)		if (hx::IsNotNull( this->b2 )) {
HXLINE( 960)			_hx_tmp1 = (this->b2->type == (int)2);
            		}
            		else {
HXLINE( 960)			_hx_tmp1 = false;
            		}
HXDLIN( 960)		if (_hx_tmp1) {
HXLINE( 960)			this->b2->wake();
            		}
HXLINE( 961)		bool _hx_tmp2;
HXDLIN( 961)		if (hx::IsNotNull( this->b3 )) {
HXLINE( 961)			_hx_tmp2 = (this->b3->type == (int)2);
            		}
            		else {
HXLINE( 961)			_hx_tmp2 = false;
            		}
HXDLIN( 961)		if (_hx_tmp2) {
HXLINE( 961)			this->b3->wake();
            		}
HXLINE( 962)		bool _hx_tmp3;
HXDLIN( 962)		if (hx::IsNotNull( this->b4 )) {
HXLINE( 962)			_hx_tmp3 = (this->b4->type == (int)2);
            		}
            		else {
HXLINE( 962)			_hx_tmp3 = false;
            		}
HXDLIN( 962)		if (_hx_tmp3) {
HXLINE( 962)			this->b4->wake();
            		}
            	}


void ZPP_PulleyJoint_obj::forest(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_964_forest)
            	HX_STACK_THIS(this)
HXLINE( 965)		if ((this->b1->type == (int)2)) {
HXLINE( 966)			HX_VAR(  ::zpp_nape::space::ZPP_Component,xr);
HXDLIN( 966)			if (hx::IsEq( this->b1->component,this->b1->component->parent )) {
HXLINE( 966)				xr = this->b1->component;
            			}
            			else {
HXLINE( 969)				HX_VARI(  ::zpp_nape::space::ZPP_Component,obj) = this->b1->component;
HXLINE( 970)				HX_VARI(  ::zpp_nape::space::ZPP_Component,stack) = null();
HXLINE( 971)				while(hx::IsNotEq( obj,obj->parent )){
HXLINE( 972)					HX_VARI(  ::zpp_nape::space::ZPP_Component,nxt) = obj->parent;
HXLINE( 973)					obj->parent = stack;
HXLINE( 974)					stack = obj;
HXLINE( 975)					obj = nxt;
            				}
HXLINE( 977)				while(hx::IsNotNull( stack )){
HXLINE( 978)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt1,"nxt") = stack->parent;
HXLINE( 979)					stack->parent = obj;
HXLINE( 980)					stack = nxt1;
            				}
HXLINE( 966)				xr = obj;
            			}
HXLINE( 985)			HX_VAR(  ::zpp_nape::space::ZPP_Component,yr);
HXDLIN( 985)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE( 985)				yr = this->component;
            			}
            			else {
HXLINE( 988)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj1,"obj") = this->component;
HXLINE( 989)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack1,"stack") = null();
HXLINE( 990)				while(hx::IsNotEq( obj1,obj1->parent )){
HXLINE( 991)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt2,"nxt") = obj1->parent;
HXLINE( 992)					obj1->parent = stack1;
HXLINE( 993)					stack1 = obj1;
HXLINE( 994)					obj1 = nxt2;
            				}
HXLINE( 996)				while(hx::IsNotNull( stack1 )){
HXLINE( 997)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt3,"nxt") = stack1->parent;
HXLINE( 998)					stack1->parent = obj1;
HXLINE( 999)					stack1 = nxt3;
            				}
HXLINE( 985)				yr = obj1;
            			}
HXLINE(1004)			if (hx::IsNotEq( xr,yr )) {
HXLINE(1005)				if ((xr->rank < yr->rank)) {
HXLINE(1005)					xr->parent = yr;
            				}
            				else {
HXLINE(1006)					if ((xr->rank > yr->rank)) {
HXLINE(1006)						yr->parent = xr;
            					}
            					else {
HXLINE(1008)						yr->parent = xr;
HXLINE(1009)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE(1013)		if ((this->b2->type == (int)2)) {
HXLINE(1014)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,xr1,"xr");
HXDLIN(1014)			if (hx::IsEq( this->b2->component,this->b2->component->parent )) {
HXLINE(1014)				xr1 = this->b2->component;
            			}
            			else {
HXLINE(1017)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj2,"obj") = this->b2->component;
HXLINE(1018)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack2,"stack") = null();
HXLINE(1019)				while(hx::IsNotEq( obj2,obj2->parent )){
HXLINE(1020)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt4,"nxt") = obj2->parent;
HXLINE(1021)					obj2->parent = stack2;
HXLINE(1022)					stack2 = obj2;
HXLINE(1023)					obj2 = nxt4;
            				}
HXLINE(1025)				while(hx::IsNotNull( stack2 )){
HXLINE(1026)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt5,"nxt") = stack2->parent;
HXLINE(1027)					stack2->parent = obj2;
HXLINE(1028)					stack2 = nxt5;
            				}
HXLINE(1014)				xr1 = obj2;
            			}
HXLINE(1033)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,yr1,"yr");
HXDLIN(1033)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE(1033)				yr1 = this->component;
            			}
            			else {
HXLINE(1036)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj3,"obj") = this->component;
HXLINE(1037)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack3,"stack") = null();
HXLINE(1038)				while(hx::IsNotEq( obj3,obj3->parent )){
HXLINE(1039)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt6,"nxt") = obj3->parent;
HXLINE(1040)					obj3->parent = stack3;
HXLINE(1041)					stack3 = obj3;
HXLINE(1042)					obj3 = nxt6;
            				}
HXLINE(1044)				while(hx::IsNotNull( stack3 )){
HXLINE(1045)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt7,"nxt") = stack3->parent;
HXLINE(1046)					stack3->parent = obj3;
HXLINE(1047)					stack3 = nxt7;
            				}
HXLINE(1033)				yr1 = obj3;
            			}
HXLINE(1052)			if (hx::IsNotEq( xr1,yr1 )) {
HXLINE(1053)				if ((xr1->rank < yr1->rank)) {
HXLINE(1053)					xr1->parent = yr1;
            				}
            				else {
HXLINE(1054)					if ((xr1->rank > yr1->rank)) {
HXLINE(1054)						yr1->parent = xr1;
            					}
            					else {
HXLINE(1056)						yr1->parent = xr1;
HXLINE(1057)						xr1->rank++;
            					}
            				}
            			}
            		}
HXLINE(1061)		if ((this->b3->type == (int)2)) {
HXLINE(1062)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,xr2,"xr");
HXDLIN(1062)			if (hx::IsEq( this->b3->component,this->b3->component->parent )) {
HXLINE(1062)				xr2 = this->b3->component;
            			}
            			else {
HXLINE(1065)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj4,"obj") = this->b3->component;
HXLINE(1066)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack4,"stack") = null();
HXLINE(1067)				while(hx::IsNotEq( obj4,obj4->parent )){
HXLINE(1068)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt8,"nxt") = obj4->parent;
HXLINE(1069)					obj4->parent = stack4;
HXLINE(1070)					stack4 = obj4;
HXLINE(1071)					obj4 = nxt8;
            				}
HXLINE(1073)				while(hx::IsNotNull( stack4 )){
HXLINE(1074)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt9,"nxt") = stack4->parent;
HXLINE(1075)					stack4->parent = obj4;
HXLINE(1076)					stack4 = nxt9;
            				}
HXLINE(1062)				xr2 = obj4;
            			}
HXLINE(1081)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,yr2,"yr");
HXDLIN(1081)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE(1081)				yr2 = this->component;
            			}
            			else {
HXLINE(1084)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj5,"obj") = this->component;
HXLINE(1085)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack5,"stack") = null();
HXLINE(1086)				while(hx::IsNotEq( obj5,obj5->parent )){
HXLINE(1087)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt10,"nxt") = obj5->parent;
HXLINE(1088)					obj5->parent = stack5;
HXLINE(1089)					stack5 = obj5;
HXLINE(1090)					obj5 = nxt10;
            				}
HXLINE(1092)				while(hx::IsNotNull( stack5 )){
HXLINE(1093)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt11,"nxt") = stack5->parent;
HXLINE(1094)					stack5->parent = obj5;
HXLINE(1095)					stack5 = nxt11;
            				}
HXLINE(1081)				yr2 = obj5;
            			}
HXLINE(1100)			if (hx::IsNotEq( xr2,yr2 )) {
HXLINE(1101)				if ((xr2->rank < yr2->rank)) {
HXLINE(1101)					xr2->parent = yr2;
            				}
            				else {
HXLINE(1102)					if ((xr2->rank > yr2->rank)) {
HXLINE(1102)						yr2->parent = xr2;
            					}
            					else {
HXLINE(1104)						yr2->parent = xr2;
HXLINE(1105)						xr2->rank++;
            					}
            				}
            			}
            		}
HXLINE(1109)		if ((this->b4->type == (int)2)) {
HXLINE(1110)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,xr3,"xr");
HXDLIN(1110)			if (hx::IsEq( this->b4->component,this->b4->component->parent )) {
HXLINE(1110)				xr3 = this->b4->component;
            			}
            			else {
HXLINE(1113)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj6,"obj") = this->b4->component;
HXLINE(1114)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack6,"stack") = null();
HXLINE(1115)				while(hx::IsNotEq( obj6,obj6->parent )){
HXLINE(1116)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt12,"nxt") = obj6->parent;
HXLINE(1117)					obj6->parent = stack6;
HXLINE(1118)					stack6 = obj6;
HXLINE(1119)					obj6 = nxt12;
            				}
HXLINE(1121)				while(hx::IsNotNull( stack6 )){
HXLINE(1122)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt13,"nxt") = stack6->parent;
HXLINE(1123)					stack6->parent = obj6;
HXLINE(1124)					stack6 = nxt13;
            				}
HXLINE(1110)				xr3 = obj6;
            			}
HXLINE(1129)			HX_VAR_NAME(  ::zpp_nape::space::ZPP_Component,yr3,"yr");
HXDLIN(1129)			if (hx::IsEq( this->component,this->component->parent )) {
HXLINE(1129)				yr3 = this->component;
            			}
            			else {
HXLINE(1132)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,obj7,"obj") = this->component;
HXLINE(1133)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,stack7,"stack") = null();
HXLINE(1134)				while(hx::IsNotEq( obj7,obj7->parent )){
HXLINE(1135)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt14,"nxt") = obj7->parent;
HXLINE(1136)					obj7->parent = stack7;
HXLINE(1137)					stack7 = obj7;
HXLINE(1138)					obj7 = nxt14;
            				}
HXLINE(1140)				while(hx::IsNotNull( stack7 )){
HXLINE(1141)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt15,"nxt") = stack7->parent;
HXLINE(1142)					stack7->parent = obj7;
HXLINE(1143)					stack7 = nxt15;
            				}
HXLINE(1129)				yr3 = obj7;
            			}
HXLINE(1148)			if (hx::IsNotEq( xr3,yr3 )) {
HXLINE(1149)				if ((xr3->rank < yr3->rank)) {
HXLINE(1149)					xr3->parent = yr3;
            				}
            				else {
HXLINE(1150)					if ((xr3->rank > yr3->rank)) {
HXLINE(1150)						yr3->parent = xr3;
            					}
            					else {
HXLINE(1152)						yr3->parent = xr3;
HXLINE(1153)						xr3->rank++;
            					}
            				}
            			}
            		}
            	}


bool ZPP_PulleyJoint_obj::pair_exists(int id,int di){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_1159_pair_exists)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(di,"di")
HXLINE(1159)		bool _hx_tmp;
HXDLIN(1159)		bool _hx_tmp1;
HXDLIN(1159)		bool _hx_tmp2;
HXDLIN(1159)		if ((this->b1->id == id)) {
HXLINE(1159)			bool _hx_tmp3;
HXDLIN(1159)			if ((this->b2->id != di)) {
HXLINE(1159)				_hx_tmp3 = (this->b3->id == di);
            			}
            			else {
HXLINE(1159)				_hx_tmp3 = true;
            			}
HXDLIN(1159)			if (!(_hx_tmp3)) {
HXLINE(1159)				_hx_tmp2 = (this->b4->id == di);
            			}
            			else {
HXLINE(1159)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(1159)			_hx_tmp2 = false;
            		}
HXDLIN(1159)		if (!(_hx_tmp2)) {
HXLINE(1159)			if ((this->b2->id == id)) {
HXLINE(1159)				bool _hx_tmp4;
HXDLIN(1159)				if ((this->b3->id != di)) {
HXLINE(1159)					_hx_tmp4 = (this->b4->id == di);
            				}
            				else {
HXLINE(1159)					_hx_tmp4 = true;
            				}
HXDLIN(1159)				if (!(_hx_tmp4)) {
HXLINE(1159)					_hx_tmp1 = (this->b1->id == di);
            				}
            				else {
HXLINE(1159)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(1159)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1159)			_hx_tmp1 = true;
            		}
HXDLIN(1159)		if (!(_hx_tmp1)) {
HXLINE(1159)			if ((this->b3->id == id)) {
HXLINE(1159)				bool _hx_tmp5;
HXDLIN(1159)				if ((this->b4->id != di)) {
HXLINE(1159)					_hx_tmp5 = (this->b1->id == di);
            				}
            				else {
HXLINE(1159)					_hx_tmp5 = true;
            				}
HXDLIN(1159)				if (!(_hx_tmp5)) {
HXLINE(1159)					_hx_tmp = (this->b2->id == di);
            				}
            				else {
HXLINE(1159)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1159)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1159)			_hx_tmp = true;
            		}
HXDLIN(1159)		if (!(_hx_tmp)) {
HXLINE(1159)			if ((this->b4->id == id)) {
HXLINE(1159)				bool _hx_tmp6;
HXDLIN(1159)				if ((this->b1->id != di)) {
HXLINE(1159)					_hx_tmp6 = (this->b2->id == di);
            				}
            				else {
HXLINE(1159)					_hx_tmp6 = true;
            				}
HXDLIN(1159)				if (!(_hx_tmp6)) {
HXLINE(1159)					return (this->b3->id == di);
            				}
            				else {
HXLINE(1159)					return true;
            				}
            			}
            			else {
HXLINE(1159)				return false;
            			}
            		}
            		else {
HXLINE(1159)			return true;
            		}
HXDLIN(1159)		return false;
            	}


void ZPP_PulleyJoint_obj::clearcache(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_1161_clearcache)
            	HX_STACK_THIS(this)
HXLINE(1162)		this->jAcc = (int)0;
HXLINE(1163)		this->pre_dt = ((Float)-1.0);
            	}


bool ZPP_PulleyJoint_obj::preStep(Float dt){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_1165_preStep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dt,"dt")
HXLINE(1166)		if ((this->pre_dt == ((Float)-1.0))) {
HXLINE(1166)			this->pre_dt = dt;
            		}
HXLINE(1167)		HX_VARI( Float,dtratio) = ((Float)dt / (Float)this->pre_dt);
HXLINE(1168)		this->pre_dt = dt;
HXLINE(1169)		this->stepped = true;
HXLINE(1170)		this->equal = (this->jointMin == this->jointMax);
HXLINE(1171)		{
HXLINE(1172)			this->a1relx = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE(1173)			this->a1rely = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE(1175)		{
HXLINE(1176)			this->a2relx = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE(1177)			this->a2rely = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE(1179)		{
HXLINE(1180)			this->a3relx = ((this->b3->axisy * this->a3localx) - (this->b3->axisx * this->a3localy));
HXLINE(1181)			this->a3rely = ((this->a3localx * this->b3->axisx) + (this->a3localy * this->b3->axisy));
            		}
HXLINE(1183)		{
HXLINE(1184)			this->a4relx = ((this->b4->axisy * this->a4localx) - (this->b4->axisx * this->a4localy));
HXLINE(1185)			this->a4rely = ((this->a4localx * this->b4->axisx) + (this->a4localy * this->b4->axisy));
            		}
HXLINE(1188)		HX_VARI( Float,t12x) = ((Float)0.0);
HXLINE(1189)		HX_VARI( Float,t12y) = ((Float)0.0);
HXLINE(1190)		HX_VARI( Float,t34x) = ((Float)0.0);
HXLINE(1191)		HX_VARI( Float,t34y) = ((Float)0.0);
HXLINE(1192)		t12x = ((this->b2->posx + this->a2relx) - (this->b1->posx + this->a1relx));
HXLINE(1193)		t12y = ((this->b2->posy + this->a2rely) - (this->b1->posy + this->a1rely));
HXLINE(1194)		t34x = ((this->b4->posx + this->a4relx) - (this->b3->posx + this->a3relx));
HXLINE(1195)		t34y = ((this->b4->posy + this->a4rely) - (this->b3->posy + this->a3rely));
HXLINE(1196)		HX_VARI( Float,C12) = ::Math_obj::sqrt(((t12x * t12x) + (t12y * t12y)));
HXLINE(1197)		HX_VARI( Float,C34) = ::Math_obj::sqrt(((t34x * t34x) + (t34y * t34y)));
HXLINE(1198)		if ((C12 != (int)0)) {
HXLINE(1200)			HX_VARI( Float,t) = ((Float)((Float)1.0) / (Float)C12);
HXLINE(1209)			this->n12x = (t12x * t);
HXLINE(1210)			this->n12y = (t12y * t);
            		}
HXLINE(1213)		if ((C34 != (int)0)) {
HXLINE(1214)			{
HXLINE(1215)				HX_VARI_NAME( Float,t1,"t") = ((Float)((Float)1.0) / (Float)C34);
HXLINE(1224)				this->n34x = (t34x * t1);
HXLINE(1225)				this->n34y = (t34y * t1);
            			}
HXLINE(1227)			{
HXLINE(1228)				HX_VARI_NAME( Float,t2,"t") = this->ratio;
HXLINE(1237)				 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1237)				_hx_tmp->n34x = (_hx_tmp->n34x * t2);
HXLINE(1238)				 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1238)				_hx_tmp1->n34y = (_hx_tmp1->n34y * t2);
            			}
            		}
            		else {
HXLINE(1243)			HX_VARI_NAME( Float,t3,"t") = ((Float)this->ratio / (Float)::Math_obj::sqrt(((this->n34x * this->n34x) + (this->n34y * this->n34y))));
HXLINE(1252)			 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1252)			_hx_tmp2->n34x = (_hx_tmp2->n34x * t3);
HXLINE(1253)			 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1253)			_hx_tmp3->n34y = (_hx_tmp3->n34y * t3);
            		}
HXLINE(1256)		HX_VARI( Float,C) = (C12 + (this->ratio * C34));
HXLINE(1257)		if (this->equal) {
HXLINE(1258)			C = (C - this->jointMax);
HXLINE(1259)			this->slack = false;
            		}
            		else {
HXLINE(1262)			if ((C < this->jointMin)) {
HXLINE(1263)				C = (this->jointMin - C);
HXLINE(1264)				{
HXLINE(1265)					this->n12x = -(this->n12x);
HXLINE(1266)					this->n12y = -(this->n12y);
            				}
HXLINE(1268)				{
HXLINE(1269)					this->n34x = -(this->n34x);
HXLINE(1270)					this->n34y = -(this->n34y);
            				}
HXLINE(1272)				this->slack = false;
            			}
            			else {
HXLINE(1274)				if ((C > this->jointMax)) {
HXLINE(1275)					C = (C - this->jointMax);
HXLINE(1276)					this->slack = false;
            				}
            				else {
HXLINE(1279)					{
HXLINE(1280)						this->n12x = (int)0;
HXLINE(1281)						this->n12y = (int)0;
            					}
HXLINE(1299)					{
HXLINE(1300)						this->n34x = (int)0;
HXLINE(1301)						this->n34y = (int)0;
            					}
HXLINE(1319)					C = (int)0;
HXLINE(1320)					this->slack = true;
            				}
            			}
            		}
HXLINE(1187)		HX_VARI_NAME( Float,C1,"C") = C;
HXLINE(1325)		if (!(this->slack)) {
HXLINE(1327)			this->cx1 = ((this->n12y * this->a1relx) - (this->n12x * this->a1rely));
HXLINE(1328)			this->cx2 = ((this->n12y * this->a2relx) - (this->n12x * this->a2rely));
HXLINE(1329)			this->cx3 = ((this->n34y * this->a3relx) - (this->n34x * this->a3rely));
HXLINE(1330)			this->cx4 = ((this->n34y * this->a4relx) - (this->n34x * this->a4rely));
HXLINE(1332)			HX_VARI( Float,K) = ((((((this->b1->smass + this->b2->smass) + ((this->ratio * this->ratio) * (this->b3->smass + this->b4->smass))) + ((this->b1->sinertia * this->cx1) * this->cx1)) + ((this->b2->sinertia * this->cx2) * this->cx2)) + ((this->b3->sinertia * this->cx3) * this->cx3)) + ((this->b4->sinertia * this->cx4) * this->cx4));
HXLINE(1333)			if (hx::IsEq( this->b1,this->b4 )) {
HXLINE(1333)				K = (K - ((int)2 * ((((this->n12x * this->n34x) + (this->n12y * this->n34y)) * this->b1->smass) + ((this->cx1 * this->cx4) * this->b1->sinertia))));
            			}
HXLINE(1334)			if (hx::IsEq( this->b1,this->b3 )) {
HXLINE(1334)				K = (K + ((int)2 * ((((this->n12x * this->n34x) + (this->n12y * this->n34y)) * this->b1->smass) + ((this->cx1 * this->cx3) * this->b1->sinertia))));
            			}
HXLINE(1335)			if (hx::IsEq( this->b2,this->b3 )) {
HXLINE(1335)				K = (K - ((int)2 * ((((this->n12x * this->n34x) + (this->n12y * this->n34y)) * this->b2->smass) + ((this->cx2 * this->cx3) * this->b2->sinertia))));
            			}
HXLINE(1336)			if (hx::IsEq( this->b2,this->b4 )) {
HXLINE(1336)				K = (K + ((int)2 * ((((this->n12x * this->n34x) + (this->n12y * this->n34y)) * this->b2->smass) + ((this->cx2 * this->cx4) * this->b2->sinertia))));
            			}
HXLINE(1326)			this->kMass = K;
HXLINE(1339)			if ((this->kMass != (int)0)) {
HXLINE(1339)				this->kMass = ((Float)(int)1 / (Float)this->kMass);
            			}
            			else {
HXLINE(1340)				this->jAcc = (int)0;
            			}
HXLINE(1341)			if (!(this->stiff)) {
HXLINE(1342)				bool _hx_tmp4;
HXDLIN(1342)				if (this->breakUnderError) {
HXLINE(1342)					_hx_tmp4 = ((C1 * C1) > (this->maxError * this->maxError));
            				}
            				else {
HXLINE(1342)					_hx_tmp4 = false;
            				}
HXDLIN(1342)				if (_hx_tmp4) {
HXLINE(1342)					return true;
            				}
HXLINE(1343)				HX_VAR( Float,biasCoef);
HXLINE(1344)				 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXLINE(1345)				HX_VARI( Float,omega) = (((int)2 * ::Math_obj::PI) * this->frequency);
HXLINE(1346)				this->gamma = ((Float)(int)1 / (Float)((dt * omega) * (((int)2 * this->damping) + (omega * dt))));
HXLINE(1347)				HX_VARI( Float,ig) = ((Float)(int)1 / (Float)((int)1 + this->gamma));
HXLINE(1348)				biasCoef = (((dt * omega) * omega) * this->gamma);
HXLINE(1349)				 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1349)				_hx_tmp6->gamma = (_hx_tmp6->gamma * ig);
HXLINE(1344)				_hx_tmp5->kMass = (_hx_tmp5->kMass * ig);
HXLINE(1352)				this->bias = (-(C1) * biasCoef);
HXLINE(1354)				if ((this->bias < -(this->maxError))) {
HXLINE(1354)					this->bias = -(this->maxError);
            				}
            				else {
HXLINE(1355)					if ((this->bias > this->maxError)) {
HXLINE(1355)						this->bias = this->maxError;
            					}
            				}
            			}
            			else {
HXLINE(1359)				this->bias = (int)0;
HXLINE(1360)				this->gamma = (int)0;
            			}
HXLINE(1362)			 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1362)			_hx_tmp7->jAcc = (_hx_tmp7->jAcc * dtratio);
HXLINE(1363)			this->jMax = (this->maxForce * dt);
            		}
HXLINE(1365)		return false;
            	}


void ZPP_PulleyJoint_obj::warmStart(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_1368_warmStart)
            	HX_STACK_THIS(this)
HXLINE(1368)		if (!(this->slack)) {
HXLINE(1428)			{
HXLINE(1429)				HX_VARI( Float,t) = (this->b1->imass * this->jAcc);
HXLINE(1438)				 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->b1;
HXDLIN(1438)				_hx_tmp->velx = (_hx_tmp->velx - (this->n12x * t));
HXLINE(1439)				 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->b1;
HXDLIN(1439)				_hx_tmp1->vely = (_hx_tmp1->vely - (this->n12y * t));
            			}
HXLINE(1441)			{
HXLINE(1442)				HX_VARI_NAME( Float,t1,"t") = (this->b2->imass * this->jAcc);
HXLINE(1451)				 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b2;
HXDLIN(1451)				_hx_tmp2->velx = (_hx_tmp2->velx + (this->n12x * t1));
HXLINE(1452)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b2;
HXDLIN(1452)				_hx_tmp3->vely = (_hx_tmp3->vely + (this->n12y * t1));
            			}
HXLINE(1454)			{
HXLINE(1455)				HX_VARI_NAME( Float,t2,"t") = (this->b3->imass * this->jAcc);
HXLINE(1464)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b3;
HXDLIN(1464)				_hx_tmp4->velx = (_hx_tmp4->velx - (this->n34x * t2));
HXLINE(1465)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b3;
HXDLIN(1465)				_hx_tmp5->vely = (_hx_tmp5->vely - (this->n34y * t2));
            			}
HXLINE(1467)			{
HXLINE(1468)				HX_VARI_NAME( Float,t3,"t") = (this->b4->imass * this->jAcc);
HXLINE(1477)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b4;
HXDLIN(1477)				_hx_tmp6->velx = (_hx_tmp6->velx + (this->n34x * t3));
HXLINE(1478)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b4;
HXDLIN(1478)				_hx_tmp7->vely = (_hx_tmp7->vely + (this->n34y * t3));
            			}
HXLINE(1480)			 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b1;
HXDLIN(1480)			_hx_tmp8->angvel = (_hx_tmp8->angvel - ((this->cx1 * this->b1->iinertia) * this->jAcc));
HXLINE(1481)			 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b2;
HXDLIN(1481)			_hx_tmp9->angvel = (_hx_tmp9->angvel + ((this->cx2 * this->b2->iinertia) * this->jAcc));
HXLINE(1482)			 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b3;
HXDLIN(1482)			_hx_tmp10->angvel = (_hx_tmp10->angvel - ((this->cx3 * this->b3->iinertia) * this->jAcc));
HXLINE(1483)			 ::zpp_nape::phys::ZPP_Body _hx_tmp11 = this->b4;
HXDLIN(1483)			_hx_tmp11->angvel = (_hx_tmp11->angvel + ((this->cx4 * this->b4->iinertia) * this->jAcc));
            		}
            	}


bool ZPP_PulleyJoint_obj::applyImpulseVel(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_1487_applyImpulseVel)
            	HX_STACK_THIS(this)
HXLINE(1488)		if (this->slack) {
HXLINE(1488)			return false;
            		}
HXLINE(1492)		HX_VARI( Float,j) = ((this->kMass * (this->bias - ((((((((this->n12x * (((this->b2->velx + this->b2->kinvelx) - this->b1->velx) - this->b1->kinvelx)) + (this->n12y * (((this->b2->vely + this->b2->kinvely) - this->b1->vely) - this->b1->kinvely))) + (this->n34x * (((this->b4->velx + this->b4->kinvelx) - this->b3->velx) - this->b3->kinvelx))) + (this->n34y * (((this->b4->vely + this->b4->kinvely) - this->b3->vely) - this->b3->kinvely))) + ((this->b2->angvel + this->b2->kinangvel) * this->cx2)) - ((this->b1->angvel + this->b1->kinangvel) * this->cx1)) + ((this->b4->angvel + this->b4->kinangvel) * this->cx4)) - ((this->b3->angvel + this->b3->kinangvel) * this->cx3)))) - (this->jAcc * this->gamma));
HXLINE(1493)		{
HXLINE(1502)			HX_VARI( Float,jOld) = this->jAcc;
HXLINE(1503)			 ::zpp_nape::constraint::ZPP_PulleyJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1503)			_hx_tmp->jAcc = (_hx_tmp->jAcc + j);
HXLINE(1504)			{
HXLINE(1505)				bool _hx_tmp1;
HXDLIN(1505)				if (!(this->equal)) {
HXLINE(1505)					_hx_tmp1 = (this->jAcc > (int)0);
            				}
            				else {
HXLINE(1505)					_hx_tmp1 = false;
            				}
HXDLIN(1505)				if (_hx_tmp1) {
HXLINE(1505)					this->jAcc = (int)0;
            				}
HXLINE(1506)				bool _hx_tmp2;
HXDLIN(1506)				if (this->breakUnderForce) {
HXLINE(1506)					_hx_tmp2 = (this->jAcc < -(this->jMax));
            				}
            				else {
HXLINE(1506)					_hx_tmp2 = false;
            				}
HXDLIN(1506)				if (_hx_tmp2) {
HXLINE(1506)					return true;
            				}
HXLINE(1507)				if (!(this->stiff)) {
HXLINE(1508)					if ((this->jAcc < -(this->jMax))) {
HXLINE(1508)						this->jAcc = -(this->jMax);
            					}
            				}
            			}
HXLINE(1511)			j = (this->jAcc - jOld);
            		}
HXLINE(1572)		{
HXLINE(1573)			{
HXLINE(1574)				HX_VARI( Float,t) = (this->b1->imass * j);
HXLINE(1583)				 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN(1583)				_hx_tmp3->velx = (_hx_tmp3->velx - (this->n12x * t));
HXLINE(1584)				 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b1;
HXDLIN(1584)				_hx_tmp4->vely = (_hx_tmp4->vely - (this->n12y * t));
            			}
HXLINE(1586)			{
HXLINE(1587)				HX_VARI_NAME( Float,t1,"t") = (this->b2->imass * j);
HXLINE(1596)				 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(1596)				_hx_tmp5->velx = (_hx_tmp5->velx + (this->n12x * t1));
HXLINE(1597)				 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b2;
HXDLIN(1597)				_hx_tmp6->vely = (_hx_tmp6->vely + (this->n12y * t1));
            			}
HXLINE(1599)			{
HXLINE(1600)				HX_VARI_NAME( Float,t2,"t") = (this->b3->imass * j);
HXLINE(1609)				 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b3;
HXDLIN(1609)				_hx_tmp7->velx = (_hx_tmp7->velx - (this->n34x * t2));
HXLINE(1610)				 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b3;
HXDLIN(1610)				_hx_tmp8->vely = (_hx_tmp8->vely - (this->n34y * t2));
            			}
HXLINE(1612)			{
HXLINE(1613)				HX_VARI_NAME( Float,t3,"t") = (this->b4->imass * j);
HXLINE(1622)				 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b4;
HXDLIN(1622)				_hx_tmp9->velx = (_hx_tmp9->velx + (this->n34x * t3));
HXLINE(1623)				 ::zpp_nape::phys::ZPP_Body _hx_tmp10 = this->b4;
HXDLIN(1623)				_hx_tmp10->vely = (_hx_tmp10->vely + (this->n34y * t3));
            			}
HXLINE(1625)			 ::zpp_nape::phys::ZPP_Body _hx_tmp11 = this->b1;
HXDLIN(1625)			_hx_tmp11->angvel = (_hx_tmp11->angvel - ((this->cx1 * this->b1->iinertia) * j));
HXLINE(1626)			 ::zpp_nape::phys::ZPP_Body _hx_tmp12 = this->b2;
HXDLIN(1626)			_hx_tmp12->angvel = (_hx_tmp12->angvel + ((this->cx2 * this->b2->iinertia) * j));
HXLINE(1627)			 ::zpp_nape::phys::ZPP_Body _hx_tmp13 = this->b3;
HXDLIN(1627)			_hx_tmp13->angvel = (_hx_tmp13->angvel - ((this->cx3 * this->b3->iinertia) * j));
HXLINE(1628)			 ::zpp_nape::phys::ZPP_Body _hx_tmp14 = this->b4;
HXDLIN(1628)			_hx_tmp14->angvel = (_hx_tmp14->angvel + ((this->cx4 * this->b4->iinertia) * j));
            		}
HXLINE(1631)		return false;
            	}


bool ZPP_PulleyJoint_obj::applyImpulsePos(){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_1633_applyImpulsePos)
            	HX_STACK_THIS(this)
HXLINE(1634)		HX_VAR( Float,E);
HXLINE(1635)		HX_VAR( Float,j);
HXLINE(1636)		HX_VARI( Float,r1x) = ((Float)0.0);
HXLINE(1637)		HX_VARI( Float,r1y) = ((Float)0.0);
HXLINE(1639)		{
HXLINE(1640)			r1x = ((this->b1->axisy * this->a1localx) - (this->b1->axisx * this->a1localy));
HXLINE(1641)			r1y = ((this->a1localx * this->b1->axisx) + (this->a1localy * this->b1->axisy));
            		}
HXLINE(1644)		HX_VARI( Float,r2x) = ((Float)0.0);
HXLINE(1645)		HX_VARI( Float,r2y) = ((Float)0.0);
HXLINE(1647)		{
HXLINE(1648)			r2x = ((this->b2->axisy * this->a2localx) - (this->b2->axisx * this->a2localy));
HXLINE(1649)			r2y = ((this->a2localx * this->b2->axisx) + (this->a2localy * this->b2->axisy));
            		}
HXLINE(1652)		HX_VARI( Float,r3x) = ((Float)0.0);
HXLINE(1653)		HX_VARI( Float,r3y) = ((Float)0.0);
HXLINE(1655)		{
HXLINE(1656)			r3x = ((this->b3->axisy * this->a3localx) - (this->b3->axisx * this->a3localy));
HXLINE(1657)			r3y = ((this->a3localx * this->b3->axisx) + (this->a3localy * this->b3->axisy));
            		}
HXLINE(1660)		HX_VARI( Float,r4x) = ((Float)0.0);
HXLINE(1661)		HX_VARI( Float,r4y) = ((Float)0.0);
HXLINE(1663)		{
HXLINE(1664)			r4x = ((this->b4->axisy * this->a4localx) - (this->b4->axisx * this->a4localy));
HXLINE(1665)			r4y = ((this->a4localx * this->b4->axisx) + (this->a4localy * this->b4->axisy));
            		}
HXLINE(1668)		HX_VAR( bool,slack);
HXLINE(1669)		HX_VARI( Float,n12x) = ((Float)0.0);
HXLINE(1670)		HX_VARI( Float,n12y) = ((Float)0.0);
HXLINE(1671)		HX_VARI( Float,n34x) = ((Float)0.0);
HXLINE(1672)		HX_VARI( Float,n34y) = ((Float)0.0);
HXLINE(1673)		{
HXLINE(1674)			n12x = this->n12x;
HXLINE(1675)			n12y = this->n12y;
            		}
HXLINE(1693)		{
HXLINE(1694)			n34x = this->n34x;
HXLINE(1695)			n34y = this->n34y;
            		}
HXLINE(1714)		HX_VARI( Float,t12x) = ((Float)0.0);
HXLINE(1715)		HX_VARI( Float,t12y) = ((Float)0.0);
HXLINE(1716)		HX_VARI( Float,t34x) = ((Float)0.0);
HXLINE(1717)		HX_VARI( Float,t34y) = ((Float)0.0);
HXLINE(1718)		t12x = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1719)		t12y = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
HXLINE(1720)		t34x = ((this->b4->posx + r4x) - (this->b3->posx + r3x));
HXLINE(1721)		t34y = ((this->b4->posy + r4y) - (this->b3->posy + r3y));
HXLINE(1722)		HX_VARI( Float,C12) = ::Math_obj::sqrt(((t12x * t12x) + (t12y * t12y)));
HXLINE(1723)		HX_VARI( Float,C34) = ::Math_obj::sqrt(((t34x * t34x) + (t34y * t34y)));
HXLINE(1724)		if ((C12 != (int)0)) {
HXLINE(1726)			HX_VARI( Float,t) = ((Float)((Float)1.0) / (Float)C12);
HXLINE(1735)			n12x = (t12x * t);
HXLINE(1736)			n12y = (t12y * t);
            		}
HXLINE(1739)		if ((C34 != (int)0)) {
HXLINE(1740)			{
HXLINE(1741)				HX_VARI_NAME( Float,t1,"t") = ((Float)((Float)1.0) / (Float)C34);
HXLINE(1750)				n34x = (t34x * t1);
HXLINE(1751)				n34y = (t34y * t1);
            			}
HXLINE(1753)			{
HXLINE(1754)				HX_VARI_NAME( Float,t2,"t") = this->ratio;
HXLINE(1763)				n34x = (n34x * t2);
HXLINE(1764)				n34y = (n34y * t2);
            			}
            		}
            		else {
HXLINE(1769)			HX_VARI_NAME( Float,t3,"t") = ((Float)this->ratio / (Float)::Math_obj::sqrt(((n34x * n34x) + (n34y * n34y))));
HXLINE(1778)			n34x = (n34x * t3);
HXLINE(1779)			n34y = (n34y * t3);
            		}
HXLINE(1782)		HX_VARI( Float,C) = (C12 + (this->ratio * C34));
HXLINE(1783)		if (this->equal) {
HXLINE(1784)			C = (C - this->jointMax);
HXLINE(1785)			slack = false;
            		}
            		else {
HXLINE(1788)			if ((C < this->jointMin)) {
HXLINE(1789)				C = (this->jointMin - C);
HXLINE(1790)				{
HXLINE(1791)					n12x = -(n12x);
HXLINE(1792)					n12y = -(n12y);
            				}
HXLINE(1794)				{
HXLINE(1795)					n34x = -(n34x);
HXLINE(1796)					n34y = -(n34y);
            				}
HXLINE(1798)				slack = false;
            			}
            			else {
HXLINE(1800)				if ((C > this->jointMax)) {
HXLINE(1801)					C = (C - this->jointMax);
HXLINE(1802)					slack = false;
            				}
            				else {
HXLINE(1805)					{
HXLINE(1806)						n12x = (int)0;
HXLINE(1807)						n12y = (int)0;
            					}
HXLINE(1825)					{
HXLINE(1826)						n34x = (int)0;
HXLINE(1827)						n34y = (int)0;
            					}
HXLINE(1845)					C = (int)0;
HXLINE(1846)					slack = true;
            				}
            			}
            		}
HXLINE(1849)		E = C;
HXLINE(1851)		if (!(slack)) {
HXLINE(1852)			bool _hx_tmp;
HXDLIN(1852)			if (this->breakUnderError) {
HXLINE(1852)				_hx_tmp = ((E * E) > (this->maxError * this->maxError));
            			}
            			else {
HXLINE(1852)				_hx_tmp = false;
            			}
HXDLIN(1852)			if (_hx_tmp) {
HXLINE(1852)				return true;
            			}
HXLINE(1853)			if (((E * E) < (::nape::Config_obj::constraintLinearSlop * ::nape::Config_obj::constraintLinearSlop))) {
HXLINE(1853)				return false;
            			}
HXLINE(1854)			E = (E * ((Float)0.5));
HXLINE(1855)			if (((E * E) > (int)6)) {
HXLINE(1856)				HX_VARI( Float,k) = (this->b1->smass + this->b2->smass);
HXLINE(1857)				if ((k > ::nape::Config_obj::epsilon)) {
HXLINE(1858)					k = ((Float)((Float)0.75) / (Float)k);
HXLINE(1859)					j = (-(E) * k);
HXLINE(1860)					bool _hx_tmp1;
HXDLIN(1860)					if (!(this->equal)) {
HXLINE(1860)						_hx_tmp1 = (j < (int)0);
            					}
            					else {
HXLINE(1860)						_hx_tmp1 = true;
            					}
HXDLIN(1860)					if (_hx_tmp1) {
HXLINE(1861)						{
HXLINE(1862)							HX_VARI_NAME( Float,t4,"t") = (j * this->b1->imass);
HXLINE(1871)							 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = this->b1;
HXDLIN(1871)							_hx_tmp2->posx = (_hx_tmp2->posx - (n12x * t4));
HXLINE(1872)							 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->b1;
HXDLIN(1872)							_hx_tmp3->posy = (_hx_tmp3->posy - (n12y * t4));
            						}
HXLINE(1874)						{
HXLINE(1875)							HX_VARI_NAME( Float,t5,"t") = (j * this->b2->imass);
HXLINE(1884)							 ::zpp_nape::phys::ZPP_Body _hx_tmp4 = this->b2;
HXDLIN(1884)							_hx_tmp4->posx = (_hx_tmp4->posx + (n12x * t5));
HXLINE(1885)							 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->b2;
HXDLIN(1885)							_hx_tmp5->posy = (_hx_tmp5->posy + (n12y * t5));
            						}
HXLINE(1887)						{
HXLINE(1888)							HX_VARI_NAME( Float,t6,"t") = (j * this->b3->imass);
HXLINE(1897)							 ::zpp_nape::phys::ZPP_Body _hx_tmp6 = this->b3;
HXDLIN(1897)							_hx_tmp6->posx = (_hx_tmp6->posx - (n34x * t6));
HXLINE(1898)							 ::zpp_nape::phys::ZPP_Body _hx_tmp7 = this->b3;
HXDLIN(1898)							_hx_tmp7->posy = (_hx_tmp7->posy - (n34y * t6));
            						}
HXLINE(1900)						{
HXLINE(1901)							HX_VARI_NAME( Float,t7,"t") = (j * this->b4->imass);
HXLINE(1910)							 ::zpp_nape::phys::ZPP_Body _hx_tmp8 = this->b4;
HXDLIN(1910)							_hx_tmp8->posx = (_hx_tmp8->posx + (n34x * t7));
HXLINE(1911)							 ::zpp_nape::phys::ZPP_Body _hx_tmp9 = this->b4;
HXDLIN(1911)							_hx_tmp9->posy = (_hx_tmp9->posy + (n34y * t7));
            						}
HXLINE(1914)						HX_VARI_NAME( Float,t12x1,"t12x") = ((Float)0.0);
HXLINE(1915)						HX_VARI_NAME( Float,t12y1,"t12y") = ((Float)0.0);
HXLINE(1916)						HX_VARI_NAME( Float,t34x1,"t34x") = ((Float)0.0);
HXLINE(1917)						HX_VARI_NAME( Float,t34y1,"t34y") = ((Float)0.0);
HXLINE(1918)						t12x1 = ((this->b2->posx + r2x) - (this->b1->posx + r1x));
HXLINE(1919)						t12y1 = ((this->b2->posy + r2y) - (this->b1->posy + r1y));
HXLINE(1920)						t34x1 = ((this->b4->posx + r4x) - (this->b3->posx + r3x));
HXLINE(1921)						t34y1 = ((this->b4->posy + r4y) - (this->b3->posy + r3y));
HXLINE(1922)						HX_VARI_NAME( Float,C121,"C12") = ::Math_obj::sqrt(((t12x1 * t12x1) + (t12y1 * t12y1)));
HXLINE(1923)						HX_VARI_NAME( Float,C341,"C34") = ::Math_obj::sqrt(((t34x1 * t34x1) + (t34y1 * t34y1)));
HXLINE(1924)						if ((C121 != (int)0)) {
HXLINE(1926)							HX_VARI_NAME( Float,t8,"t") = ((Float)((Float)1.0) / (Float)C121);
HXLINE(1935)							n12x = (t12x1 * t8);
HXLINE(1936)							n12y = (t12y1 * t8);
            						}
HXLINE(1939)						if ((C341 != (int)0)) {
HXLINE(1940)							{
HXLINE(1941)								HX_VARI_NAME( Float,t9,"t") = ((Float)((Float)1.0) / (Float)C341);
HXLINE(1950)								n34x = (t34x1 * t9);
HXLINE(1951)								n34y = (t34y1 * t9);
            							}
HXLINE(1953)							{
HXLINE(1954)								HX_VARI_NAME( Float,t10,"t") = this->ratio;
HXLINE(1963)								n34x = (n34x * t10);
HXLINE(1964)								n34y = (n34y * t10);
            							}
            						}
            						else {
HXLINE(1969)							HX_VARI_NAME( Float,t11,"t") = ((Float)this->ratio / (Float)::Math_obj::sqrt(((n34x * n34x) + (n34y * n34y))));
HXLINE(1978)							n34x = (n34x * t11);
HXLINE(1979)							n34y = (n34y * t11);
            						}
HXLINE(1982)						HX_VARI_NAME( Float,C1,"C") = (C121 + (this->ratio * C341));
HXLINE(1983)						if (this->equal) {
HXLINE(1984)							C1 = (C1 - this->jointMax);
            						}
            						else {
HXLINE(1988)							if ((C1 < this->jointMin)) {
HXLINE(1989)								C1 = (this->jointMin - C1);
HXLINE(1990)								{
HXLINE(1991)									n12x = -(n12x);
HXLINE(1992)									n12y = -(n12y);
            								}
HXLINE(1994)								{
HXLINE(1995)									n34x = -(n34x);
HXLINE(1996)									n34y = -(n34y);
            								}
            							}
            							else {
HXLINE(2000)								if ((C1 > this->jointMax)) {
HXLINE(2001)									C1 = (C1 - this->jointMax);
            								}
            								else {
HXLINE(2005)									{
HXLINE(2006)										n12x = (int)0;
HXLINE(2007)										n12y = (int)0;
            									}
HXLINE(2025)									{
HXLINE(2026)										n34x = (int)0;
HXLINE(2027)										n34y = (int)0;
            									}
HXLINE(2045)									C1 = (int)0;
            								}
            							}
            						}
HXLINE(2049)						E = C1;
HXLINE(2051)						E = (E * ((Float)0.5));
            					}
            				}
            			}
HXLINE(2055)			HX_VAR( Float,cx1);
HXDLIN(2055)			HX_VAR( Float,cx2);
HXDLIN(2055)			HX_VAR( Float,cx3);
HXDLIN(2055)			HX_VAR( Float,cx4);
HXLINE(2057)			cx1 = ((n12y * r1x) - (n12x * r1y));
HXLINE(2058)			cx2 = ((n12y * r2x) - (n12x * r2y));
HXLINE(2059)			cx3 = ((n34y * r3x) - (n34x * r3y));
HXLINE(2060)			cx4 = ((n34y * r4x) - (n34x * r4y));
HXLINE(2062)			HX_VARI( Float,K) = ((((((this->b1->smass + this->b2->smass) + ((this->ratio * this->ratio) * (this->b3->smass + this->b4->smass))) + ((this->b1->sinertia * cx1) * cx1)) + ((this->b2->sinertia * cx2) * cx2)) + ((this->b3->sinertia * cx3) * cx3)) + ((this->b4->sinertia * cx4) * cx4));
HXLINE(2063)			if (hx::IsEq( this->b1,this->b4 )) {
HXLINE(2063)				K = (K - ((int)2 * ((((n12x * n34x) + (n12y * n34y)) * this->b1->smass) + ((cx1 * cx4) * this->b1->sinertia))));
            			}
HXLINE(2064)			if (hx::IsEq( this->b1,this->b3 )) {
HXLINE(2064)				K = (K + ((int)2 * ((((n12x * n34x) + (n12y * n34y)) * this->b1->smass) + ((cx1 * cx3) * this->b1->sinertia))));
            			}
HXLINE(2065)			if (hx::IsEq( this->b2,this->b3 )) {
HXLINE(2065)				K = (K - ((int)2 * ((((n12x * n34x) + (n12y * n34y)) * this->b2->smass) + ((cx2 * cx3) * this->b2->sinertia))));
            			}
HXLINE(2066)			if (hx::IsEq( this->b2,this->b4 )) {
HXLINE(2066)				K = (K + ((int)2 * ((((n12x * n34x) + (n12y * n34y)) * this->b2->smass) + ((cx2 * cx4) * this->b2->sinertia))));
            			}
HXLINE(2056)			HX_VARI_NAME( Float,k1,"k") = K;
HXLINE(2069)			if ((k1 != (int)0)) {
HXLINE(2069)				k1 = ((Float)(int)1 / (Float)k1);
            			}
HXLINE(2070)			j = (-(E) * k1);
HXLINE(2071)			bool _hx_tmp10;
HXDLIN(2071)			if (!(this->equal)) {
HXLINE(2071)				_hx_tmp10 = (j < (int)0);
            			}
            			else {
HXLINE(2071)				_hx_tmp10 = true;
            			}
HXDLIN(2071)			if (_hx_tmp10) {
HXLINE(2073)				{
HXLINE(2074)					HX_VARI_NAME( Float,t12,"t") = (this->b1->imass * j);
HXLINE(2083)					 ::zpp_nape::phys::ZPP_Body _hx_tmp11 = this->b1;
HXDLIN(2083)					_hx_tmp11->posx = (_hx_tmp11->posx - (n12x * t12));
HXLINE(2084)					 ::zpp_nape::phys::ZPP_Body _hx_tmp12 = this->b1;
HXDLIN(2084)					_hx_tmp12->posy = (_hx_tmp12->posy - (n12y * t12));
            				}
HXLINE(2086)				{
HXLINE(2087)					HX_VARI_NAME( Float,t13,"t") = (this->b2->imass * j);
HXLINE(2096)					 ::zpp_nape::phys::ZPP_Body _hx_tmp13 = this->b2;
HXDLIN(2096)					_hx_tmp13->posx = (_hx_tmp13->posx + (n12x * t13));
HXLINE(2097)					 ::zpp_nape::phys::ZPP_Body _hx_tmp14 = this->b2;
HXDLIN(2097)					_hx_tmp14->posy = (_hx_tmp14->posy + (n12y * t13));
            				}
HXLINE(2099)				{
HXLINE(2100)					HX_VARI_NAME( Float,t14,"t") = (this->b3->imass * j);
HXLINE(2109)					 ::zpp_nape::phys::ZPP_Body _hx_tmp15 = this->b3;
HXDLIN(2109)					_hx_tmp15->posx = (_hx_tmp15->posx - (n34x * t14));
HXLINE(2110)					 ::zpp_nape::phys::ZPP_Body _hx_tmp16 = this->b3;
HXDLIN(2110)					_hx_tmp16->posy = (_hx_tmp16->posy - (n34y * t14));
            				}
HXLINE(2112)				{
HXLINE(2113)					HX_VARI_NAME( Float,t15,"t") = (this->b4->imass * j);
HXLINE(2122)					 ::zpp_nape::phys::ZPP_Body _hx_tmp17 = this->b4;
HXDLIN(2122)					_hx_tmp17->posx = (_hx_tmp17->posx + (n34x * t15));
HXLINE(2123)					 ::zpp_nape::phys::ZPP_Body _hx_tmp18 = this->b4;
HXDLIN(2123)					_hx_tmp18->posy = (_hx_tmp18->posy + (n34y * t15));
            				}
HXLINE(2125)				{
HXLINE(2125)					HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->b1;
HXDLIN(2125)					HX_VARI( Float,dr) = ((-(cx1) * this->b1->iinertia) * j);
HXDLIN(2125)					_this->rot = (_this->rot + dr);
HXDLIN(2125)					if (((dr * dr) > ((Float)0.0001))) {
HXLINE(2125)						_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(2125)						_this->axisy = ::Math_obj::cos(_this->rot);
            					}
            					else {
HXLINE(2125)						HX_VARI( Float,d2) = (dr * dr);
HXDLIN(2125)						HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN(2125)						HX_VARI( Float,m) = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN(2125)						HX_VARI( Float,nx) = (((p * _this->axisx) + (dr * _this->axisy)) * m);
HXDLIN(2125)						_this->axisy = (((p * _this->axisy) - (dr * _this->axisx)) * m);
HXDLIN(2125)						_this->axisx = nx;
            					}
            				}
HXLINE(2126)				{
HXLINE(2126)					HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this1,"_this") = this->b2;
HXDLIN(2126)					HX_VARI_NAME( Float,dr1,"dr") = ((cx2 * this->b2->iinertia) * j);
HXDLIN(2126)					_this1->rot = (_this1->rot + dr1);
HXDLIN(2126)					if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE(2126)						_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN(2126)						_this1->axisy = ::Math_obj::cos(_this1->rot);
            					}
            					else {
HXLINE(2126)						HX_VARI_NAME( Float,d21,"d2") = (dr1 * dr1);
HXDLIN(2126)						HX_VARI_NAME( Float,p1,"p") = ((int)1 - (((Float)0.5) * d21));
HXDLIN(2126)						HX_VARI_NAME( Float,m1,"m") = ((int)1 - ((Float)(d21 * d21) / (Float)(int)8));
HXDLIN(2126)						HX_VARI_NAME( Float,nx1,"nx") = (((p1 * _this1->axisx) + (dr1 * _this1->axisy)) * m1);
HXDLIN(2126)						_this1->axisy = (((p1 * _this1->axisy) - (dr1 * _this1->axisx)) * m1);
HXDLIN(2126)						_this1->axisx = nx1;
            					}
            				}
HXLINE(2127)				{
HXLINE(2127)					HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = this->b3;
HXDLIN(2127)					HX_VARI_NAME( Float,dr2,"dr") = ((-(cx3) * this->b3->iinertia) * j);
HXDLIN(2127)					_this2->rot = (_this2->rot + dr2);
HXDLIN(2127)					if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE(2127)						_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(2127)						_this2->axisy = ::Math_obj::cos(_this2->rot);
            					}
            					else {
HXLINE(2127)						HX_VARI_NAME( Float,d22,"d2") = (dr2 * dr2);
HXDLIN(2127)						HX_VARI_NAME( Float,p2,"p") = ((int)1 - (((Float)0.5) * d22));
HXDLIN(2127)						HX_VARI_NAME( Float,m2,"m") = ((int)1 - ((Float)(d22 * d22) / (Float)(int)8));
HXDLIN(2127)						HX_VARI_NAME( Float,nx2,"nx") = (((p2 * _this2->axisx) + (dr2 * _this2->axisy)) * m2);
HXDLIN(2127)						_this2->axisy = (((p2 * _this2->axisy) - (dr2 * _this2->axisx)) * m2);
HXDLIN(2127)						_this2->axisx = nx2;
            					}
            				}
HXLINE(2128)				{
HXLINE(2128)					HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this3,"_this") = this->b4;
HXDLIN(2128)					HX_VARI_NAME( Float,dr3,"dr") = ((cx4 * this->b4->iinertia) * j);
HXDLIN(2128)					_this3->rot = (_this3->rot + dr3);
HXDLIN(2128)					if (((dr3 * dr3) > ((Float)0.0001))) {
HXLINE(2128)						_this3->axisx = ::Math_obj::sin(_this3->rot);
HXDLIN(2128)						_this3->axisy = ::Math_obj::cos(_this3->rot);
            					}
            					else {
HXLINE(2128)						HX_VARI_NAME( Float,d23,"d2") = (dr3 * dr3);
HXDLIN(2128)						HX_VARI_NAME( Float,p3,"p") = ((int)1 - (((Float)0.5) * d23));
HXDLIN(2128)						HX_VARI_NAME( Float,m3,"m") = ((int)1 - ((Float)(d23 * d23) / (Float)(int)8));
HXDLIN(2128)						HX_VARI_NAME( Float,nx3,"nx") = (((p3 * _this3->axisx) + (dr3 * _this3->axisy)) * m3);
HXDLIN(2128)						_this3->axisy = (((p3 * _this3->axisy) - (dr3 * _this3->axisx)) * m3);
HXDLIN(2128)						_this3->axisx = nx3;
            					}
            				}
            			}
            		}
HXLINE(2190)		return false;
            	}


void ZPP_PulleyJoint_obj::draw( ::nape::util::Debug g){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_2192_draw)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
HXLINE(2193)		HX_VARI(  ::nape::constraint::PulleyJoint,me) = this->outer_zn;
HXLINE(2194)		HX_VAR(  ::nape::phys::Body,a1);
HXDLIN(2194)		if (hx::IsNull( me->zpp_inner_zn->b1 )) {
HXLINE(2194)			a1 = null();
            		}
            		else {
HXLINE(2194)			a1 = me->zpp_inner_zn->b1->outer;
            		}
HXDLIN(2194)		if (hx::IsNull( me->zpp_inner_zn->wrap_a1 )) {
HXLINE(2194)			me->zpp_inner_zn->setup_a1();
            		}
HXDLIN(2194)		HX_VARI_NAME(  ::nape::geom::Vec2,a11,"a1") = a1->localPointToWorld(me->zpp_inner_zn->wrap_a1,null());
HXLINE(2195)		HX_VAR(  ::nape::phys::Body,a2);
HXDLIN(2195)		if (hx::IsNull( me->zpp_inner_zn->b2 )) {
HXLINE(2195)			a2 = null();
            		}
            		else {
HXLINE(2195)			a2 = me->zpp_inner_zn->b2->outer;
            		}
HXDLIN(2195)		if (hx::IsNull( me->zpp_inner_zn->wrap_a2 )) {
HXLINE(2195)			me->zpp_inner_zn->setup_a2();
            		}
HXDLIN(2195)		HX_VARI_NAME(  ::nape::geom::Vec2,a21,"a2") = a2->localPointToWorld(me->zpp_inner_zn->wrap_a2,null());
HXLINE(2196)		HX_VAR(  ::nape::phys::Body,a3);
HXDLIN(2196)		if (hx::IsNull( me->zpp_inner_zn->b3 )) {
HXLINE(2196)			a3 = null();
            		}
            		else {
HXLINE(2196)			a3 = me->zpp_inner_zn->b3->outer;
            		}
HXDLIN(2196)		if (hx::IsNull( me->zpp_inner_zn->wrap_a3 )) {
HXLINE(2196)			me->zpp_inner_zn->setup_a3();
            		}
HXDLIN(2196)		HX_VARI_NAME(  ::nape::geom::Vec2,a31,"a3") = a3->localPointToWorld(me->zpp_inner_zn->wrap_a3,null());
HXLINE(2197)		HX_VAR(  ::nape::phys::Body,a4);
HXDLIN(2197)		if (hx::IsNull( me->zpp_inner_zn->b4 )) {
HXLINE(2197)			a4 = null();
            		}
            		else {
HXLINE(2197)			a4 = me->zpp_inner_zn->b4->outer;
            		}
HXDLIN(2197)		if (hx::IsNull( me->zpp_inner_zn->wrap_a4 )) {
HXLINE(2197)			me->zpp_inner_zn->setup_a4();
            		}
HXDLIN(2197)		HX_VARI_NAME(  ::nape::geom::Vec2,a41,"a4") = a4->localPointToWorld(me->zpp_inner_zn->wrap_a4,null());
HXLINE(2198)		HX_VARI(  ::nape::geom::Vec2,n12) = a21->sub(a11,null());
HXLINE(2199)		HX_VARI(  ::nape::geom::Vec2,n34) = a41->sub(a31,null());
HXLINE(2200)		{
HXLINE(2200)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = n12->zpp_inner;
HXDLIN(2200)			if (hx::IsNotNull( _this->_validate )) {
HXLINE(2200)				_this->_validate();
            			}
            		}
HXDLIN(2200)		HX_VARI( Float,nl12) = n12->zpp_inner->x;
HXDLIN(2200)		{
HXLINE(2200)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = n12->zpp_inner;
HXDLIN(2200)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2200)				_this1->_validate();
            			}
            		}
HXDLIN(2200)		HX_VARI_NAME( Float,nl121,"nl12") = (nl12 * n12->zpp_inner->x);
HXDLIN(2200)		{
HXLINE(2200)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = n12->zpp_inner;
HXDLIN(2200)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2200)				_this2->_validate();
            			}
            		}
HXDLIN(2200)		HX_VARI_NAME( Float,nl122,"nl12") = n12->zpp_inner->y;
HXDLIN(2200)		{
HXLINE(2200)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = n12->zpp_inner;
HXDLIN(2200)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(2200)				_this3->_validate();
            			}
            		}
HXDLIN(2200)		HX_VARI_NAME( Float,nl123,"nl12") = ::Math_obj::sqrt((nl121 + (nl122 * n12->zpp_inner->y)));
HXLINE(2201)		{
HXLINE(2201)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = n34->zpp_inner;
HXDLIN(2201)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE(2201)				_this4->_validate();
            			}
            		}
HXDLIN(2201)		HX_VARI( Float,nl34) = n34->zpp_inner->x;
HXDLIN(2201)		{
HXLINE(2201)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = n34->zpp_inner;
HXDLIN(2201)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE(2201)				_this5->_validate();
            			}
            		}
HXDLIN(2201)		HX_VARI_NAME( Float,nl341,"nl34") = (nl34 * n34->zpp_inner->x);
HXDLIN(2201)		{
HXLINE(2201)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = n34->zpp_inner;
HXDLIN(2201)			if (hx::IsNotNull( _this6->_validate )) {
HXLINE(2201)				_this6->_validate();
            			}
            		}
HXDLIN(2201)		HX_VARI_NAME( Float,nl342,"nl34") = n34->zpp_inner->y;
HXDLIN(2201)		{
HXLINE(2201)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = n34->zpp_inner;
HXDLIN(2201)			if (hx::IsNotNull( _this7->_validate )) {
HXLINE(2201)				_this7->_validate();
            			}
            		}
HXDLIN(2201)		HX_VARI_NAME( Float,nl343,"nl34") = ::Math_obj::sqrt((nl341 + (nl342 * n34->zpp_inner->y)));
HXLINE(2202)		this->drawLink(g,a11,a21,n12,nl123,(nl343 * this->ratio),((Float)1.0),(int)16776960,(int)65535);
HXLINE(2203)		this->drawLink(g,a31,a41,n34,nl343,nl123,((Float)(int)1 / (Float)this->ratio),(int)65535,(int)16711935);
HXLINE(2204)		g->drawFilledCircle(a11,(int)2,(int)255);
HXLINE(2205)		g->drawFilledCircle(a21,(int)2,(int)16711680);
HXLINE(2206)		g->drawFilledCircle(a31,(int)2,(int)65280);
HXLINE(2207)		g->drawFilledCircle(a41,(int)2,(int)16711935);
HXLINE(2208)		{
HXLINE(2208)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = a11->zpp_inner;
HXDLIN(2208)			a11->zpp_inner->outer = null();
HXDLIN(2208)			a11->zpp_inner = null();
HXDLIN(2208)			{
HXLINE(2208)				a11->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2208)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a11;
            			}
HXDLIN(2208)			{
HXLINE(2208)				{
HXLINE(2208)					if (hx::IsNotNull( inner->outer )) {
HXLINE(2208)						inner->outer->zpp_inner = null();
HXDLIN(2208)						inner->outer = null();
            					}
HXDLIN(2208)					inner->_isimmutable = null();
HXDLIN(2208)					inner->_validate = null();
HXDLIN(2208)					inner->_invalidate = null();
            				}
HXDLIN(2208)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2208)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(2209)		{
HXLINE(2209)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = a21->zpp_inner;
HXDLIN(2209)			a21->zpp_inner->outer = null();
HXDLIN(2209)			a21->zpp_inner = null();
HXDLIN(2209)			{
HXLINE(2209)				a21->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2209)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a21;
            			}
HXDLIN(2209)			{
HXLINE(2209)				{
HXLINE(2209)					if (hx::IsNotNull( inner1->outer )) {
HXLINE(2209)						inner1->outer->zpp_inner = null();
HXDLIN(2209)						inner1->outer = null();
            					}
HXDLIN(2209)					inner1->_isimmutable = null();
HXDLIN(2209)					inner1->_validate = null();
HXDLIN(2209)					inner1->_invalidate = null();
            				}
HXDLIN(2209)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2209)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE(2210)		{
HXLINE(2210)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = a31->zpp_inner;
HXDLIN(2210)			a31->zpp_inner->outer = null();
HXDLIN(2210)			a31->zpp_inner = null();
HXDLIN(2210)			{
HXLINE(2210)				a31->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2210)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a31;
            			}
HXDLIN(2210)			{
HXLINE(2210)				{
HXLINE(2210)					if (hx::IsNotNull( inner2->outer )) {
HXLINE(2210)						inner2->outer->zpp_inner = null();
HXDLIN(2210)						inner2->outer = null();
            					}
HXDLIN(2210)					inner2->_isimmutable = null();
HXDLIN(2210)					inner2->_validate = null();
HXDLIN(2210)					inner2->_invalidate = null();
            				}
HXDLIN(2210)				inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2210)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            			}
            		}
HXLINE(2211)		{
HXLINE(2211)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner3,"inner") = a41->zpp_inner;
HXDLIN(2211)			a41->zpp_inner->outer = null();
HXDLIN(2211)			a41->zpp_inner = null();
HXDLIN(2211)			{
HXLINE(2211)				a41->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2211)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = a41;
            			}
HXDLIN(2211)			{
HXLINE(2211)				{
HXLINE(2211)					if (hx::IsNotNull( inner3->outer )) {
HXLINE(2211)						inner3->outer->zpp_inner = null();
HXDLIN(2211)						inner3->outer = null();
            					}
HXDLIN(2211)					inner3->_isimmutable = null();
HXDLIN(2211)					inner3->_validate = null();
HXDLIN(2211)					inner3->_invalidate = null();
            				}
HXDLIN(2211)				inner3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2211)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner3;
            			}
            		}
HXLINE(2212)		{
HXLINE(2212)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner4,"inner") = n12->zpp_inner;
HXDLIN(2212)			n12->zpp_inner->outer = null();
HXDLIN(2212)			n12->zpp_inner = null();
HXDLIN(2212)			{
HXLINE(2212)				n12->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2212)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = n12;
            			}
HXDLIN(2212)			{
HXLINE(2212)				{
HXLINE(2212)					if (hx::IsNotNull( inner4->outer )) {
HXLINE(2212)						inner4->outer->zpp_inner = null();
HXDLIN(2212)						inner4->outer = null();
            					}
HXDLIN(2212)					inner4->_isimmutable = null();
HXDLIN(2212)					inner4->_validate = null();
HXDLIN(2212)					inner4->_invalidate = null();
            				}
HXDLIN(2212)				inner4->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2212)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner4;
            			}
            		}
HXLINE(2213)		{
HXLINE(2213)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner5,"inner") = n34->zpp_inner;
HXDLIN(2213)			n34->zpp_inner->outer = null();
HXDLIN(2213)			n34->zpp_inner = null();
HXDLIN(2213)			{
HXLINE(2213)				n34->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2213)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = n34;
            			}
HXDLIN(2213)			{
HXLINE(2213)				{
HXLINE(2213)					if (hx::IsNotNull( inner5->outer )) {
HXLINE(2213)						inner5->outer->zpp_inner = null();
HXDLIN(2213)						inner5->outer = null();
            					}
HXDLIN(2213)					inner5->_isimmutable = null();
HXDLIN(2213)					inner5->_validate = null();
HXDLIN(2213)					inner5->_invalidate = null();
            				}
HXDLIN(2213)				inner5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2213)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner5;
            			}
            		}
            	}


void ZPP_PulleyJoint_obj::drawLink( ::nape::util::Debug g, ::nape::geom::Vec2 a1, ::nape::geom::Vec2 a2, ::nape::geom::Vec2 n,Float nl,Float bias,Float scale,int ca,int cb){
            	HX_STACKFRAME(&_hx_pos_5950ec0309aae648_2217_drawLink)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(a1,"a1")
            	HX_STACK_ARG(a2,"a2")
            	HX_STACK_ARG(n,"n")
            	HX_STACK_ARG(nl,"nl")
            	HX_STACK_ARG(bias,"bias")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(ca,"ca")
            	HX_STACK_ARG(cb,"cb")
HXLINE(2217)		if ((nl != (int)0)) {
HXLINE(2218)			n->muleq(((Float)(int)1 / (Float)nl));
HXLINE(2219)			HX_VARI(  ::nape::geom::Vec2,mid) = a1->add(a2,null())->muleq(((Float)0.5));
HXLINE(2220)			HX_VARI( Float,cmin) = ((this->jointMin - bias) * scale);
HXLINE(2221)			if ((cmin < (int)0)) {
HXLINE(2221)				cmin = (int)0;
            			}
HXLINE(2222)			HX_VARI( Float,cmax) = ((this->jointMax - bias) * scale);
HXLINE(2223)			if ((cmax < (int)0)) {
HXLINE(2223)				cmax = (int)0;
            			}
HXLINE(2224)			HX_VARI(  ::nape::geom::Vec2,min1) = mid->sub(n->mul((cmin * ((Float)0.5)),true),null());
HXLINE(2225)			HX_VARI(  ::nape::geom::Vec2,min2) = mid->add(n->mul((cmin * ((Float)0.5)),true),null());
HXLINE(2226)			HX_VARI(  ::nape::geom::Vec2,max1) = mid->sub(n->mul((cmax * ((Float)0.5)),true),null());
HXLINE(2227)			HX_VARI(  ::nape::geom::Vec2,max2) = mid->add(n->mul((cmax * ((Float)0.5)),true),null());
HXLINE(2228)			g->drawLine(min1,min2,ca);
HXLINE(2229)			g->drawLine(max1,min1,cb);
HXLINE(2230)			g->drawLine(max2,min2,cb);
HXLINE(2231)			if (!(this->stiff)) {
HXLINE(2232)				if ((nl > cmax)) {
HXLINE(2233)					g->drawSpring(max1,a1,cb,null(),null());
HXLINE(2234)					g->drawSpring(max2,a2,cb,null(),null());
            				}
            				else {
HXLINE(2236)					if ((nl < cmin)) {
HXLINE(2237)						g->drawSpring(min1,a1,ca,null(),null());
HXLINE(2238)						g->drawSpring(min2,a2,ca,null(),null());
            					}
            				}
            			}
HXLINE(2241)			{
HXLINE(2241)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = mid->zpp_inner;
HXDLIN(2241)				mid->zpp_inner->outer = null();
HXDLIN(2241)				mid->zpp_inner = null();
HXDLIN(2241)				{
HXLINE(2241)					mid->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2241)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = mid;
            				}
HXDLIN(2241)				{
HXLINE(2241)					{
HXLINE(2241)						if (hx::IsNotNull( inner->outer )) {
HXLINE(2241)							inner->outer->zpp_inner = null();
HXDLIN(2241)							inner->outer = null();
            						}
HXDLIN(2241)						inner->_isimmutable = null();
HXDLIN(2241)						inner->_validate = null();
HXDLIN(2241)						inner->_invalidate = null();
            					}
HXDLIN(2241)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2241)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
HXLINE(2242)			{
HXLINE(2242)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = min1->zpp_inner;
HXDLIN(2242)				min1->zpp_inner->outer = null();
HXDLIN(2242)				min1->zpp_inner = null();
HXDLIN(2242)				{
HXLINE(2242)					min1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2242)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = min1;
            				}
HXDLIN(2242)				{
HXLINE(2242)					{
HXLINE(2242)						if (hx::IsNotNull( inner1->outer )) {
HXLINE(2242)							inner1->outer->zpp_inner = null();
HXDLIN(2242)							inner1->outer = null();
            						}
HXDLIN(2242)						inner1->_isimmutable = null();
HXDLIN(2242)						inner1->_validate = null();
HXDLIN(2242)						inner1->_invalidate = null();
            					}
HXDLIN(2242)					inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2242)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            				}
            			}
HXLINE(2243)			{
HXLINE(2243)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = min2->zpp_inner;
HXDLIN(2243)				min2->zpp_inner->outer = null();
HXDLIN(2243)				min2->zpp_inner = null();
HXDLIN(2243)				{
HXLINE(2243)					min2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2243)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = min2;
            				}
HXDLIN(2243)				{
HXLINE(2243)					{
HXLINE(2243)						if (hx::IsNotNull( inner2->outer )) {
HXLINE(2243)							inner2->outer->zpp_inner = null();
HXDLIN(2243)							inner2->outer = null();
            						}
HXDLIN(2243)						inner2->_isimmutable = null();
HXDLIN(2243)						inner2->_validate = null();
HXDLIN(2243)						inner2->_invalidate = null();
            					}
HXDLIN(2243)					inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2243)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            				}
            			}
HXLINE(2244)			{
HXLINE(2244)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner3,"inner") = max1->zpp_inner;
HXDLIN(2244)				max1->zpp_inner->outer = null();
HXDLIN(2244)				max1->zpp_inner = null();
HXDLIN(2244)				{
HXLINE(2244)					max1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2244)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = max1;
            				}
HXDLIN(2244)				{
HXLINE(2244)					{
HXLINE(2244)						if (hx::IsNotNull( inner3->outer )) {
HXLINE(2244)							inner3->outer->zpp_inner = null();
HXDLIN(2244)							inner3->outer = null();
            						}
HXDLIN(2244)						inner3->_isimmutable = null();
HXDLIN(2244)						inner3->_validate = null();
HXDLIN(2244)						inner3->_invalidate = null();
            					}
HXDLIN(2244)					inner3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2244)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner3;
            				}
            			}
HXLINE(2245)			{
HXLINE(2245)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner4,"inner") = max2->zpp_inner;
HXDLIN(2245)				max2->zpp_inner->outer = null();
HXDLIN(2245)				max2->zpp_inner = null();
HXDLIN(2245)				{
HXLINE(2245)					max2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2245)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = max2;
            				}
HXDLIN(2245)				{
HXLINE(2245)					{
HXLINE(2245)						if (hx::IsNotNull( inner4->outer )) {
HXLINE(2245)							inner4->outer->zpp_inner = null();
HXDLIN(2245)							inner4->outer = null();
            						}
HXDLIN(2245)						inner4->_isimmutable = null();
HXDLIN(2245)						inner4->_validate = null();
HXDLIN(2245)						inner4->_invalidate = null();
            					}
HXDLIN(2245)					inner4->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2245)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner4;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC9(ZPP_PulleyJoint_obj,drawLink,(void))


hx::ObjectPtr< ZPP_PulleyJoint_obj > ZPP_PulleyJoint_obj::__new() {
	hx::ObjectPtr< ZPP_PulleyJoint_obj > __this = new ZPP_PulleyJoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_PulleyJoint_obj > ZPP_PulleyJoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_PulleyJoint_obj *__this = (ZPP_PulleyJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_PulleyJoint_obj), true, "zpp_nape.constraint.ZPP_PulleyJoint"));
	*(void **)__this = ZPP_PulleyJoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_PulleyJoint_obj::ZPP_PulleyJoint_obj()
{
}

void ZPP_PulleyJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_PulleyJoint);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(ratio,"ratio");
	HX_MARK_MEMBER_NAME(jointMin,"jointMin");
	HX_MARK_MEMBER_NAME(jointMax,"jointMax");
	HX_MARK_MEMBER_NAME(slack,"slack");
	HX_MARK_MEMBER_NAME(equal,"equal");
	HX_MARK_MEMBER_NAME(n12x,"n12x");
	HX_MARK_MEMBER_NAME(n12y,"n12y");
	HX_MARK_MEMBER_NAME(n34x,"n34x");
	HX_MARK_MEMBER_NAME(n34y,"n34y");
	HX_MARK_MEMBER_NAME(cx1,"cx1");
	HX_MARK_MEMBER_NAME(cx2,"cx2");
	HX_MARK_MEMBER_NAME(cx3,"cx3");
	HX_MARK_MEMBER_NAME(cx4,"cx4");
	HX_MARK_MEMBER_NAME(b1,"b1");
	HX_MARK_MEMBER_NAME(a1localx,"a1localx");
	HX_MARK_MEMBER_NAME(a1localy,"a1localy");
	HX_MARK_MEMBER_NAME(a1relx,"a1relx");
	HX_MARK_MEMBER_NAME(a1rely,"a1rely");
	HX_MARK_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_MARK_MEMBER_NAME(b2,"b2");
	HX_MARK_MEMBER_NAME(a2localx,"a2localx");
	HX_MARK_MEMBER_NAME(a2localy,"a2localy");
	HX_MARK_MEMBER_NAME(a2relx,"a2relx");
	HX_MARK_MEMBER_NAME(a2rely,"a2rely");
	HX_MARK_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_MARK_MEMBER_NAME(b3,"b3");
	HX_MARK_MEMBER_NAME(a3localx,"a3localx");
	HX_MARK_MEMBER_NAME(a3localy,"a3localy");
	HX_MARK_MEMBER_NAME(a3relx,"a3relx");
	HX_MARK_MEMBER_NAME(a3rely,"a3rely");
	HX_MARK_MEMBER_NAME(wrap_a3,"wrap_a3");
	HX_MARK_MEMBER_NAME(b4,"b4");
	HX_MARK_MEMBER_NAME(a4localx,"a4localx");
	HX_MARK_MEMBER_NAME(a4localy,"a4localy");
	HX_MARK_MEMBER_NAME(a4relx,"a4relx");
	HX_MARK_MEMBER_NAME(a4rely,"a4rely");
	HX_MARK_MEMBER_NAME(wrap_a4,"wrap_a4");
	HX_MARK_MEMBER_NAME(kMass,"kMass");
	HX_MARK_MEMBER_NAME(jAcc,"jAcc");
	HX_MARK_MEMBER_NAME(jMax,"jMax");
	HX_MARK_MEMBER_NAME(gamma,"gamma");
	HX_MARK_MEMBER_NAME(bias,"bias");
	HX_MARK_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_PulleyJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(ratio,"ratio");
	HX_VISIT_MEMBER_NAME(jointMin,"jointMin");
	HX_VISIT_MEMBER_NAME(jointMax,"jointMax");
	HX_VISIT_MEMBER_NAME(slack,"slack");
	HX_VISIT_MEMBER_NAME(equal,"equal");
	HX_VISIT_MEMBER_NAME(n12x,"n12x");
	HX_VISIT_MEMBER_NAME(n12y,"n12y");
	HX_VISIT_MEMBER_NAME(n34x,"n34x");
	HX_VISIT_MEMBER_NAME(n34y,"n34y");
	HX_VISIT_MEMBER_NAME(cx1,"cx1");
	HX_VISIT_MEMBER_NAME(cx2,"cx2");
	HX_VISIT_MEMBER_NAME(cx3,"cx3");
	HX_VISIT_MEMBER_NAME(cx4,"cx4");
	HX_VISIT_MEMBER_NAME(b1,"b1");
	HX_VISIT_MEMBER_NAME(a1localx,"a1localx");
	HX_VISIT_MEMBER_NAME(a1localy,"a1localy");
	HX_VISIT_MEMBER_NAME(a1relx,"a1relx");
	HX_VISIT_MEMBER_NAME(a1rely,"a1rely");
	HX_VISIT_MEMBER_NAME(wrap_a1,"wrap_a1");
	HX_VISIT_MEMBER_NAME(b2,"b2");
	HX_VISIT_MEMBER_NAME(a2localx,"a2localx");
	HX_VISIT_MEMBER_NAME(a2localy,"a2localy");
	HX_VISIT_MEMBER_NAME(a2relx,"a2relx");
	HX_VISIT_MEMBER_NAME(a2rely,"a2rely");
	HX_VISIT_MEMBER_NAME(wrap_a2,"wrap_a2");
	HX_VISIT_MEMBER_NAME(b3,"b3");
	HX_VISIT_MEMBER_NAME(a3localx,"a3localx");
	HX_VISIT_MEMBER_NAME(a3localy,"a3localy");
	HX_VISIT_MEMBER_NAME(a3relx,"a3relx");
	HX_VISIT_MEMBER_NAME(a3rely,"a3rely");
	HX_VISIT_MEMBER_NAME(wrap_a3,"wrap_a3");
	HX_VISIT_MEMBER_NAME(b4,"b4");
	HX_VISIT_MEMBER_NAME(a4localx,"a4localx");
	HX_VISIT_MEMBER_NAME(a4localy,"a4localy");
	HX_VISIT_MEMBER_NAME(a4relx,"a4relx");
	HX_VISIT_MEMBER_NAME(a4rely,"a4rely");
	HX_VISIT_MEMBER_NAME(wrap_a4,"wrap_a4");
	HX_VISIT_MEMBER_NAME(kMass,"kMass");
	HX_VISIT_MEMBER_NAME(jAcc,"jAcc");
	HX_VISIT_MEMBER_NAME(jMax,"jMax");
	HX_VISIT_MEMBER_NAME(gamma,"gamma");
	HX_VISIT_MEMBER_NAME(bias,"bias");
	HX_VISIT_MEMBER_NAME(stepped,"stepped");
	 ::zpp_nape::constraint::ZPP_Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_PulleyJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { return hx::Val( b1); }
		if (HX_FIELD_EQ(inName,"b2") ) { return hx::Val( b2); }
		if (HX_FIELD_EQ(inName,"b3") ) { return hx::Val( b3); }
		if (HX_FIELD_EQ(inName,"b4") ) { return hx::Val( b4); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { return hx::Val( cx1); }
		if (HX_FIELD_EQ(inName,"cx2") ) { return hx::Val( cx2); }
		if (HX_FIELD_EQ(inName,"cx3") ) { return hx::Val( cx3); }
		if (HX_FIELD_EQ(inName,"cx4") ) { return hx::Val( cx4); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"n12x") ) { return hx::Val( n12x); }
		if (HX_FIELD_EQ(inName,"n12y") ) { return hx::Val( n12y); }
		if (HX_FIELD_EQ(inName,"n34x") ) { return hx::Val( n34x); }
		if (HX_FIELD_EQ(inName,"n34y") ) { return hx::Val( n34y); }
		if (HX_FIELD_EQ(inName,"jAcc") ) { return hx::Val( jAcc); }
		if (HX_FIELD_EQ(inName,"jMax") ) { return hx::Val( jMax); }
		if (HX_FIELD_EQ(inName,"bias") ) { return hx::Val( bias); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ratio") ) { return hx::Val( ratio); }
		if (HX_FIELD_EQ(inName,"slack") ) { return hx::Val( slack); }
		if (HX_FIELD_EQ(inName,"equal") ) { return hx::Val( equal); }
		if (HX_FIELD_EQ(inName,"kMass") ) { return hx::Val( kMass); }
		if (HX_FIELD_EQ(inName,"gamma") ) { return hx::Val( gamma); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { return hx::Val( a1relx); }
		if (HX_FIELD_EQ(inName,"a1rely") ) { return hx::Val( a1rely); }
		if (HX_FIELD_EQ(inName,"a2relx") ) { return hx::Val( a2relx); }
		if (HX_FIELD_EQ(inName,"a2rely") ) { return hx::Val( a2rely); }
		if (HX_FIELD_EQ(inName,"a3relx") ) { return hx::Val( a3relx); }
		if (HX_FIELD_EQ(inName,"a3rely") ) { return hx::Val( a3rely); }
		if (HX_FIELD_EQ(inName,"a4relx") ) { return hx::Val( a4relx); }
		if (HX_FIELD_EQ(inName,"a4rely") ) { return hx::Val( a4rely); }
		if (HX_FIELD_EQ(inName,"forest") ) { return hx::Val( forest_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { return hx::Val( wrap_a1); }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { return hx::Val( wrap_a2); }
		if (HX_FIELD_EQ(inName,"wrap_a3") ) { return hx::Val( wrap_a3); }
		if (HX_FIELD_EQ(inName,"wrap_a4") ) { return hx::Val( wrap_a4); }
		if (HX_FIELD_EQ(inName,"stepped") ) { return hx::Val( stepped); }
		if (HX_FIELD_EQ(inName,"preStep") ) { return hx::Val( preStep_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn); }
		if (HX_FIELD_EQ(inName,"jointMin") ) { return hx::Val( jointMin); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { return hx::Val( jointMax); }
		if (HX_FIELD_EQ(inName,"is_slack") ) { return hx::Val( is_slack_dyn()); }
		if (HX_FIELD_EQ(inName,"a1localx") ) { return hx::Val( a1localx); }
		if (HX_FIELD_EQ(inName,"a1localy") ) { return hx::Val( a1localy); }
		if (HX_FIELD_EQ(inName,"setup_a1") ) { return hx::Val( setup_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"a2localx") ) { return hx::Val( a2localx); }
		if (HX_FIELD_EQ(inName,"a2localy") ) { return hx::Val( a2localy); }
		if (HX_FIELD_EQ(inName,"setup_a2") ) { return hx::Val( setup_a2_dyn()); }
		if (HX_FIELD_EQ(inName,"a3localx") ) { return hx::Val( a3localx); }
		if (HX_FIELD_EQ(inName,"a3localy") ) { return hx::Val( a3localy); }
		if (HX_FIELD_EQ(inName,"setup_a3") ) { return hx::Val( setup_a3_dyn()); }
		if (HX_FIELD_EQ(inName,"a4localx") ) { return hx::Val( a4localx); }
		if (HX_FIELD_EQ(inName,"a4localy") ) { return hx::Val( a4localy); }
		if (HX_FIELD_EQ(inName,"setup_a4") ) { return hx::Val( setup_a4_dyn()); }
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		if (HX_FIELD_EQ(inName,"drawLink") ) { return hx::Val( drawLink_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"warmStart") ) { return hx::Val( warmStart_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearcache") ) { return hx::Val( clearcache_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a1") ) { return hx::Val( validate_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a2") ) { return hx::Val( validate_a2_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a3") ) { return hx::Val( validate_a3_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_a4") ) { return hx::Val( validate_a4_dyn()); }
		if (HX_FIELD_EQ(inName,"pair_exists") ) { return hx::Val( pair_exists_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeBodies") ) { return hx::Val( activeBodies_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"invalidate_a1") ) { return hx::Val( invalidate_a1_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_a2") ) { return hx::Val( invalidate_a2_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_a3") ) { return hx::Val( invalidate_a3_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_a4") ) { return hx::Val( invalidate_a4_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inactiveBodies") ) { return hx::Val( inactiveBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"wake_connected") ) { return hx::Val( wake_connected_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyImpulseVel") ) { return hx::Val( applyImpulseVel_dyn()); }
		if (HX_FIELD_EQ(inName,"applyImpulsePos") ) { return hx::Val( applyImpulsePos_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_PulleyJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"b1") ) { b1=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b2") ) { b2=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b3") ) { b3=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b4") ) { b4=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { cx1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx2") ) { cx2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx3") ) { cx3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx4") ) { cx4=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"n12x") ) { n12x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n12y") ) { n12y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n34x") ) { n34x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n34y") ) { n34y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jAcc") ) { jAcc=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jMax") ) { jMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bias") ) { bias=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ratio") ) { ratio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"slack") ) { slack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"equal") ) { equal=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kMass") ) { kMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamma") ) { gamma=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"a1relx") ) { a1relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1rely") ) { a1rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2relx") ) { a2relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2rely") ) { a2rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a3relx") ) { a3relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a3rely") ) { a3rely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a4relx") ) { a4relx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a4rely") ) { a4rely=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrap_a1") ) { wrap_a1=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a2") ) { wrap_a2=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a3") ) { wrap_a3=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_a4") ) { wrap_a4=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepped") ) { stepped=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::constraint::PulleyJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jointMin") ) { jointMin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jointMax") ) { jointMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localx") ) { a1localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a1localy") ) { a1localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localx") ) { a2localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a2localy") ) { a2localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a3localx") ) { a3localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a3localy") ) { a3localy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a4localx") ) { a4localx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a4localy") ) { a4localy=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_PulleyJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"));
	outFields->push(HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"));
	outFields->push(HX_HCSTRING("jointMin","\x68","\xfa","\x25","\x55"));
	outFields->push(HX_HCSTRING("jointMax","\x7a","\xf3","\x25","\x55"));
	outFields->push(HX_HCSTRING("slack","\x50","\xb2","\xc1","\x7e"));
	outFields->push(HX_HCSTRING("equal","\xb4","\xcf","\x82","\x72"));
	outFields->push(HX_HCSTRING("n12x","\xc9","\xd2","\xda","\x48"));
	outFields->push(HX_HCSTRING("n12y","\xca","\xd2","\xda","\x48"));
	outFields->push(HX_HCSTRING("n34x","\x09","\x59","\xdc","\x48"));
	outFields->push(HX_HCSTRING("n34y","\x0a","\x59","\xdc","\x48"));
	outFields->push(HX_HCSTRING("cx1","\xdc","\x87","\x4b","\x00"));
	outFields->push(HX_HCSTRING("cx2","\xdd","\x87","\x4b","\x00"));
	outFields->push(HX_HCSTRING("cx3","\xde","\x87","\x4b","\x00"));
	outFields->push(HX_HCSTRING("cx4","\xdf","\x87","\x4b","\x00"));
	outFields->push(HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb"));
	outFields->push(HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb"));
	outFields->push(HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a"));
	outFields->push(HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a"));
	outFields->push(HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("b2","\x90","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25"));
	outFields->push(HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25"));
	outFields->push(HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde"));
	outFields->push(HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde"));
	outFields->push(HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("b3","\x91","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a3localx","\xdf","\x5a","\xa3","\x4e"));
	outFields->push(HX_HCSTRING("a3localy","\xe0","\x5a","\xa3","\x4e"));
	outFields->push(HX_HCSTRING("a3relx","\xb1","\xea","\xb4","\x71"));
	outFields->push(HX_HCSTRING("a3rely","\xb2","\xea","\xb4","\x71"));
	outFields->push(HX_HCSTRING("wrap_a3","\x47","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("b4","\x92","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("a4localx","\xa0","\xd1","\x38","\x78"));
	outFields->push(HX_HCSTRING("a4localy","\xa1","\xd1","\x38","\x78"));
	outFields->push(HX_HCSTRING("a4relx","\x32","\x7f","\x1b","\x05"));
	outFields->push(HX_HCSTRING("a4rely","\x33","\x7f","\x1b","\x05"));
	outFields->push(HX_HCSTRING("wrap_a4","\x48","\xeb","\x57","\x0d"));
	outFields->push(HX_HCSTRING("kMass","\xff","\x7e","\x0f","\xcf"));
	outFields->push(HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46"));
	outFields->push(HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"));
	outFields->push(HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"));
	outFields->push(HX_HCSTRING("bias","\x79","\xea","\x16","\x41"));
	outFields->push(HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_PulleyJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::constraint::PulleyJoint*/ ,(int)offsetof(ZPP_PulleyJoint_obj,outer_zn),HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,ratio),HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,jointMin),HX_HCSTRING("jointMin","\x68","\xfa","\x25","\x55")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,jointMax),HX_HCSTRING("jointMax","\x7a","\xf3","\x25","\x55")},
	{hx::fsBool,(int)offsetof(ZPP_PulleyJoint_obj,slack),HX_HCSTRING("slack","\x50","\xb2","\xc1","\x7e")},
	{hx::fsBool,(int)offsetof(ZPP_PulleyJoint_obj,equal),HX_HCSTRING("equal","\xb4","\xcf","\x82","\x72")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,n12x),HX_HCSTRING("n12x","\xc9","\xd2","\xda","\x48")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,n12y),HX_HCSTRING("n12y","\xca","\xd2","\xda","\x48")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,n34x),HX_HCSTRING("n34x","\x09","\x59","\xdc","\x48")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,n34y),HX_HCSTRING("n34y","\x0a","\x59","\xdc","\x48")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,cx1),HX_HCSTRING("cx1","\xdc","\x87","\x4b","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,cx2),HX_HCSTRING("cx2","\xdd","\x87","\x4b","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,cx3),HX_HCSTRING("cx3","\xde","\x87","\x4b","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,cx4),HX_HCSTRING("cx4","\xdf","\x87","\x4b","\x00")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_PulleyJoint_obj,b1),HX_HCSTRING("b1","\x8f","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a1localx),HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a1localy),HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a1relx),HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a1rely),HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_PulleyJoint_obj,wrap_a1),HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_PulleyJoint_obj,b2),HX_HCSTRING("b2","\x90","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a2localx),HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a2localy),HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a2relx),HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a2rely),HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_PulleyJoint_obj,wrap_a2),HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_PulleyJoint_obj,b3),HX_HCSTRING("b3","\x91","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a3localx),HX_HCSTRING("a3localx","\xdf","\x5a","\xa3","\x4e")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a3localy),HX_HCSTRING("a3localy","\xe0","\x5a","\xa3","\x4e")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a3relx),HX_HCSTRING("a3relx","\xb1","\xea","\xb4","\x71")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a3rely),HX_HCSTRING("a3rely","\xb2","\xea","\xb4","\x71")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_PulleyJoint_obj,wrap_a3),HX_HCSTRING("wrap_a3","\x47","\xeb","\x57","\x0d")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_PulleyJoint_obj,b4),HX_HCSTRING("b4","\x92","\x55","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a4localx),HX_HCSTRING("a4localx","\xa0","\xd1","\x38","\x78")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a4localy),HX_HCSTRING("a4localy","\xa1","\xd1","\x38","\x78")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a4relx),HX_HCSTRING("a4relx","\x32","\x7f","\x1b","\x05")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,a4rely),HX_HCSTRING("a4rely","\x33","\x7f","\x1b","\x05")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_PulleyJoint_obj,wrap_a4),HX_HCSTRING("wrap_a4","\x48","\xeb","\x57","\x0d")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,kMass),HX_HCSTRING("kMass","\xff","\x7e","\x0f","\xcf")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,jAcc),HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,jMax),HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,gamma),HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e")},
	{hx::fsFloat,(int)offsetof(ZPP_PulleyJoint_obj,bias),HX_HCSTRING("bias","\x79","\xea","\x16","\x41")},
	{hx::fsBool,(int)offsetof(ZPP_PulleyJoint_obj,stepped),HX_HCSTRING("stepped","\x03","\x05","\x60","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_PulleyJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_PulleyJoint_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"),
	HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"),
	HX_HCSTRING("jointMin","\x68","\xfa","\x25","\x55"),
	HX_HCSTRING("jointMax","\x7a","\xf3","\x25","\x55"),
	HX_HCSTRING("slack","\x50","\xb2","\xc1","\x7e"),
	HX_HCSTRING("equal","\xb4","\xcf","\x82","\x72"),
	HX_HCSTRING("is_slack","\xfb","\x20","\x7e","\x9e"),
	HX_HCSTRING("n12x","\xc9","\xd2","\xda","\x48"),
	HX_HCSTRING("n12y","\xca","\xd2","\xda","\x48"),
	HX_HCSTRING("n34x","\x09","\x59","\xdc","\x48"),
	HX_HCSTRING("n34y","\x0a","\x59","\xdc","\x48"),
	HX_HCSTRING("cx1","\xdc","\x87","\x4b","\x00"),
	HX_HCSTRING("cx2","\xdd","\x87","\x4b","\x00"),
	HX_HCSTRING("cx3","\xde","\x87","\x4b","\x00"),
	HX_HCSTRING("cx4","\xdf","\x87","\x4b","\x00"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("activeBodies","\xe6","\x69","\xf8","\xba"),
	HX_HCSTRING("inactiveBodies","\x4b","\x89","\xc5","\x8c"),
	HX_HCSTRING("b1","\x8f","\x55","\x00","\x00"),
	HX_HCSTRING("a1localx","\x5d","\x6d","\x78","\xfb"),
	HX_HCSTRING("a1localy","\x5e","\x6d","\x78","\xfb"),
	HX_HCSTRING("a1relx","\xaf","\xc1","\xe7","\x4a"),
	HX_HCSTRING("a1rely","\xb0","\xc1","\xe7","\x4a"),
	HX_HCSTRING("validate_a1","\xf9","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a1","\x34","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a1","\x72","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a1","\x45","\xeb","\x57","\x0d"),
	HX_HCSTRING("b2","\x90","\x55","\x00","\x00"),
	HX_HCSTRING("a2localx","\x1e","\xe4","\x0d","\x25"),
	HX_HCSTRING("a2localy","\x1f","\xe4","\x0d","\x25"),
	HX_HCSTRING("a2relx","\x30","\x56","\x4e","\xde"),
	HX_HCSTRING("a2rely","\x31","\x56","\x4e","\xde"),
	HX_HCSTRING("validate_a2","\xfa","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a2","\x35","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a2","\x73","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a2","\x46","\xeb","\x57","\x0d"),
	HX_HCSTRING("b3","\x91","\x55","\x00","\x00"),
	HX_HCSTRING("a3localx","\xdf","\x5a","\xa3","\x4e"),
	HX_HCSTRING("a3localy","\xe0","\x5a","\xa3","\x4e"),
	HX_HCSTRING("a3relx","\xb1","\xea","\xb4","\x71"),
	HX_HCSTRING("a3rely","\xb2","\xea","\xb4","\x71"),
	HX_HCSTRING("validate_a3","\xfb","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a3","\x36","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a3","\x74","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a3","\x47","\xeb","\x57","\x0d"),
	HX_HCSTRING("b4","\x92","\x55","\x00","\x00"),
	HX_HCSTRING("a4localx","\xa0","\xd1","\x38","\x78"),
	HX_HCSTRING("a4localy","\xa1","\xd1","\x38","\x78"),
	HX_HCSTRING("a4relx","\x32","\x7f","\x1b","\x05"),
	HX_HCSTRING("a4rely","\x33","\x7f","\x1b","\x05"),
	HX_HCSTRING("validate_a4","\xfc","\x9b","\xcc","\xca"),
	HX_HCSTRING("invalidate_a4","\x37","\x30","\x01","\xa7"),
	HX_HCSTRING("setup_a4","\x75","\x28","\x39","\x23"),
	HX_HCSTRING("wrap_a4","\x48","\xeb","\x57","\x0d"),
	HX_HCSTRING("kMass","\xff","\x7e","\x0f","\xcf"),
	HX_HCSTRING("jAcc","\xf7","\x46","\x42","\x46"),
	HX_HCSTRING("jMax","\x5a","\x60","\x4b","\x46"),
	HX_HCSTRING("gamma","\x27","\x87","\xb6","\x8e"),
	HX_HCSTRING("bias","\x79","\xea","\x16","\x41"),
	HX_HCSTRING("stepped","\x03","\x05","\x60","\x81"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("wake_connected","\xae","\xcf","\xdd","\x3d"),
	HX_HCSTRING("forest","\xdd","\x8c","\x88","\xfd"),
	HX_HCSTRING("pair_exists","\xa1","\x6a","\x58","\x69"),
	HX_HCSTRING("clearcache","\x95","\x69","\xf1","\x82"),
	HX_HCSTRING("preStep","\x0f","\xc1","\xc0","\x24"),
	HX_HCSTRING("warmStart","\xdd","\x27","\x03","\xeb"),
	HX_HCSTRING("applyImpulseVel","\xb6","\xc7","\x50","\x1f"),
	HX_HCSTRING("applyImpulsePos","\xed","\x42","\x4c","\x1f"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawLink","\x1e","\xc2","\x1c","\x5c"),
	::String(null()) };

static void ZPP_PulleyJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_PulleyJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_PulleyJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_PulleyJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_PulleyJoint_obj::__mClass;

void ZPP_PulleyJoint_obj::__register()
{
	hx::Object *dummy = new ZPP_PulleyJoint_obj;
	ZPP_PulleyJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.constraint.ZPP_PulleyJoint","\xfc","\xfd","\xdf","\x6f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_PulleyJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_PulleyJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_PulleyJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_PulleyJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_PulleyJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_PulleyJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace constraint
