// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbType
#include <nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbTypeIterator
#include <nape/callbacks/CbTypeIterator.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbTypeList
#include <nape/callbacks/CbTypeList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_ZPP_ID
#include <zpp_nape/ZPP_ID.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CallbackSet
#include <zpp_nape/util/ZNPList_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CallbackSet
#include <zpp_nape/util/ZNPNode_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CbTypeList
#include <zpp_nape/util/ZPP_CbTypeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_174_new,"zpp_nape.phys.ZPP_Interactor","new",0xc4ed842b,"zpp_nape.phys.ZPP_Interactor.new","zpp_nape/phys/Interactor.hx",174,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_184_isShape,"zpp_nape.phys.ZPP_Interactor","isShape",0x39e97c22,"zpp_nape.phys.ZPP_Interactor.isShape","zpp_nape/phys/Interactor.hx",184,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_189_isBody,"zpp_nape.phys.ZPP_Interactor","isBody",0x96e8bcc1,"zpp_nape.phys.ZPP_Interactor.isBody","zpp_nape/phys/Interactor.hx",189,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_194_isCompound,"zpp_nape.phys.ZPP_Interactor","isCompound",0x8dd2010a,"zpp_nape.phys.ZPP_Interactor.isCompound","zpp_nape/phys/Interactor.hx",194,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_196___iaddedToSpace,"zpp_nape.phys.ZPP_Interactor","__iaddedToSpace",0xdad3af7f,"zpp_nape.phys.ZPP_Interactor.__iaddedToSpace","zpp_nape/phys/Interactor.hx",196,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_208___iremovedFromSpace,"zpp_nape.phys.ZPP_Interactor","__iremovedFromSpace",0xba89c850,"zpp_nape.phys.ZPP_Interactor.__iremovedFromSpace","zpp_nape/phys/Interactor.hx",208,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_221_wake,"zpp_nape.phys.ZPP_Interactor","wake",0x90d5f9f9,"zpp_nape.phys.ZPP_Interactor.wake","zpp_nape/phys/Interactor.hx",221,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_282_getSpace,"zpp_nape.phys.ZPP_Interactor","getSpace",0xde0d48a5,"zpp_nape.phys.ZPP_Interactor.getSpace","zpp_nape/phys/Interactor.hx",282,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_288_setupcbTypes,"zpp_nape.phys.ZPP_Interactor","setupcbTypes",0xcfc7ef52,"zpp_nape.phys.ZPP_Interactor.setupcbTypes","zpp_nape/phys/Interactor.hx",288,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_302_wrap_cbTypes_subber,"zpp_nape.phys.ZPP_Interactor","wrap_cbTypes_subber",0xbcc9ff34,"zpp_nape.phys.ZPP_Interactor.wrap_cbTypes_subber","zpp_nape/phys/Interactor.hx",302,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_317_wrap_cbTypes_adder,"zpp_nape.phys.ZPP_Interactor","wrap_cbTypes_adder",0xa3e20509,"zpp_nape.phys.ZPP_Interactor.wrap_cbTypes_adder","zpp_nape/phys/Interactor.hx",317,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_322_insert_cbtype,"zpp_nape.phys.ZPP_Interactor","insert_cbtype",0xc92c9bea,"zpp_nape.phys.ZPP_Interactor.insert_cbtype","zpp_nape/phys/Interactor.hx",322,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_349_alloc_cbSet,"zpp_nape.phys.ZPP_Interactor","alloc_cbSet",0xa841d284,"zpp_nape.phys.ZPP_Interactor.alloc_cbSet","zpp_nape/phys/Interactor.hx",349,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_366_dealloc_cbSet,"zpp_nape.phys.ZPP_Interactor","dealloc_cbSet",0xd3bca163,"zpp_nape.phys.ZPP_Interactor.dealloc_cbSet","zpp_nape/phys/Interactor.hx",366,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_403_setGroup,"zpp_nape.phys.ZPP_Interactor","setGroup",0xa4f8c892,"zpp_nape.phys.ZPP_Interactor.setGroup","zpp_nape/phys/Interactor.hx",403,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_416_immutable_midstep,"zpp_nape.phys.ZPP_Interactor","immutable_midstep",0x3d4391a2,"zpp_nape.phys.ZPP_Interactor.immutable_midstep","zpp_nape/phys/Interactor.hx",416,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_440_lookup_group,"zpp_nape.phys.ZPP_Interactor","lookup_group",0x00d6af4f,"zpp_nape.phys.ZPP_Interactor.lookup_group","zpp_nape/phys/Interactor.hx",440,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_449_copyto,"zpp_nape.phys.ZPP_Interactor","copyto",0x0199b585,"zpp_nape.phys.ZPP_Interactor.copyto","zpp_nape/phys/Interactor.hx",449,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_235_get,"zpp_nape.phys.ZPP_Interactor","get",0xc4e83461,"zpp_nape.phys.ZPP_Interactor.get","zpp_nape/phys/Interactor.hx",235,0x9650902a)
HX_DEFINE_STACK_FRAME(_hx_pos_f253ffd5653f4b0a_426_int_callback,"zpp_nape.phys.ZPP_Interactor","int_callback",0x2c95e92a,"zpp_nape.phys.ZPP_Interactor.int_callback","zpp_nape/phys/Interactor.hx",426,0x9650902a)
namespace zpp_nape{
namespace phys{

void ZPP_Interactor_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_174_new)
            	HX_STACK_THIS(this)
HXLINE( 287)		this->wrap_cbTypes = null();
HXLINE( 286)		this->cbSet = null();
HXLINE( 285)		this->cbTypes = null();
HXLINE( 284)		this->group = null();
HXLINE( 234)		this->cbsets = null();
HXLINE( 180)		this->icompound = null();
HXLINE( 179)		this->ibody = null();
HXLINE( 178)		this->ishape = null();
HXLINE( 177)		this->userData = null();
HXLINE( 176)		this->id = (int)0;
HXLINE( 175)		this->outer_i = null();
HXLINE( 421)		this->id = ::zpp_nape::ZPP_ID_obj::Interactor();
HXLINE( 422)		this->cbsets =  ::zpp_nape::util::ZNPList_ZPP_CallbackSet_obj::__alloc( HX_CTX );
HXLINE( 423)		this->cbTypes =  ::zpp_nape::util::ZNPList_ZPP_CbType_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_Interactor_obj::__CreateEmpty() { return new ZPP_Interactor_obj; }

void *ZPP_Interactor_obj::_hx_vtable = 0;

Dynamic ZPP_Interactor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Interactor_obj > _hx_result = new ZPP_Interactor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Interactor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x247ad52d;
}

bool ZPP_Interactor_obj::isShape(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_184_isShape)
            	HX_STACK_THIS(this)
HXLINE( 184)		return hx::IsNotNull( this->ishape );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,isShape,return )

bool ZPP_Interactor_obj::isBody(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_189_isBody)
            	HX_STACK_THIS(this)
HXLINE( 189)		return hx::IsNotNull( this->ibody );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,isBody,return )

bool ZPP_Interactor_obj::isCompound(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_194_isCompound)
            	HX_STACK_THIS(this)
HXLINE( 194)		return hx::IsNotNull( this->icompound );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,isCompound,return )

void ZPP_Interactor_obj::_hx___iaddedToSpace(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_196___iaddedToSpace)
            	HX_STACK_THIS(this)
HXLINE( 197)		if (hx::IsNotNull( this->group )) {
HXLINE( 197)			this->group->interactors->add(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 198)		{
HXLINE( 199)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = this->cbTypes->head;
HXLINE( 200)			while(hx::IsNotNull( cx_ite )){
HXLINE( 202)				cx_ite->elt->interactors->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 203)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 206)		this->alloc_cbSet();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,_hx___iaddedToSpace,(void))

void ZPP_Interactor_obj::_hx___iremovedFromSpace(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_208___iremovedFromSpace)
            	HX_STACK_THIS(this)
HXLINE( 209)		if (hx::IsNotNull( this->group )) {
HXLINE( 209)			this->group->interactors->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 210)		{
HXLINE( 211)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = this->cbTypes->head;
HXLINE( 212)			while(hx::IsNotNull( cx_ite )){
HXLINE( 214)				cx_ite->elt->interactors->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE( 215)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 218)		this->dealloc_cbSet();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,_hx___iremovedFromSpace,(void))

void ZPP_Interactor_obj::wake(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_221_wake)
            	HX_STACK_THIS(this)
HXLINE( 221)		if (hx::IsNotNull( this->ishape )) {
HXLINE( 222)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,body) = this->ishape->body;
HXLINE( 223)			bool _hx_tmp;
HXDLIN( 223)			if (hx::IsNotNull( body )) {
HXLINE( 223)				_hx_tmp = hx::IsNotNull( body->space );
            			}
            			else {
HXLINE( 223)				_hx_tmp = false;
            			}
HXDLIN( 223)			if (_hx_tmp) {
HXLINE( 223)				body->space->non_inlined_wake(body,null());
            			}
            		}
            		else {
HXLINE( 226)			if (hx::IsNotNull( this->ibody )) {
HXLINE( 227)				if (hx::IsNotNull( this->ibody->space )) {
HXLINE( 227)					this->ibody->space->non_inlined_wake(this->ibody,null());
            				}
            			}
            			else {
HXLINE( 230)				if (hx::IsNotNull( this->icompound->space )) {
HXLINE( 230)					this->icompound->space->wakeCompound(this->icompound);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,wake,(void))

 ::zpp_nape::space::ZPP_Space ZPP_Interactor_obj::getSpace(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_282_getSpace)
            	HX_STACK_THIS(this)
HXLINE( 282)		if (hx::IsNotNull( this->ishape )) {
HXLINE( 282)			if (hx::IsNull( this->ishape->body )) {
HXLINE( 282)				return null();
            			}
            			else {
HXLINE( 282)				return this->ishape->body->space;
            			}
            		}
            		else {
HXLINE( 282)			if (hx::IsNotNull( this->ibody )) {
HXLINE( 282)				return this->ibody->space;
            			}
            			else {
HXLINE( 282)				return this->icompound->space;
            			}
            		}
HXDLIN( 282)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,getSpace,return )

void ZPP_Interactor_obj::setupcbTypes(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_288_setupcbTypes)
            	HX_STACK_THIS(this)
HXLINE( 289)		this->wrap_cbTypes = ::zpp_nape::util::ZPP_CbTypeList_obj::get(this->cbTypes,null());
HXLINE( 290)		this->wrap_cbTypes->zpp_inner->adder = this->wrap_cbTypes_adder_dyn();
HXLINE( 291)		this->wrap_cbTypes->zpp_inner->subber = this->wrap_cbTypes_subber_dyn();
HXLINE( 292)		this->wrap_cbTypes->zpp_inner->dontremove = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,setupcbTypes,(void))

void ZPP_Interactor_obj::wrap_cbTypes_subber( ::nape::callbacks::CbType pcb){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_302_wrap_cbTypes_subber)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pcb,"pcb")
HXLINE( 303)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb) = pcb->zpp_inner;
HXLINE( 304)		if (this->cbTypes->has(cb)) {
HXLINE( 305)			HX_VAR(  ::zpp_nape::space::ZPP_Space,space);
HXDLIN( 305)			if (hx::IsNotNull( this->ishape )) {
HXLINE( 305)				if (hx::IsNull( this->ishape->body )) {
HXLINE( 305)					space = null();
            				}
            				else {
HXLINE( 305)					space = this->ishape->body->space;
            				}
            			}
            			else {
HXLINE( 305)				if (hx::IsNotNull( this->ibody )) {
HXLINE( 305)					space = this->ibody->space;
            				}
            				else {
HXLINE( 305)					space = this->icompound->space;
            				}
            			}
HXLINE( 306)			if (hx::IsNotNull( space )) {
HXLINE( 307)				this->dealloc_cbSet();
HXLINE( 308)				cb->interactors->remove(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 310)			this->cbTypes->remove(cb);
HXLINE( 311)			if (hx::IsNotNull( space )) {
HXLINE( 312)				this->alloc_cbSet();
HXLINE( 313)				this->wake();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Interactor_obj,wrap_cbTypes_subber,(void))

bool ZPP_Interactor_obj::wrap_cbTypes_adder( ::nape::callbacks::CbType cb){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_317_wrap_cbTypes_adder)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cb,"cb")
HXLINE( 318)		this->insert_cbtype(cb->zpp_inner);
HXLINE( 319)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Interactor_obj,wrap_cbTypes_adder,return )

void ZPP_Interactor_obj::insert_cbtype( ::zpp_nape::callbacks::ZPP_CbType cb){
            	HX_GC_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_322_insert_cbtype)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cb,"cb")
HXLINE( 322)		if (!(this->cbTypes->has(cb))) {
HXLINE( 323)			HX_VAR(  ::zpp_nape::space::ZPP_Space,space);
HXDLIN( 323)			if (hx::IsNotNull( this->ishape )) {
HXLINE( 323)				if (hx::IsNull( this->ishape->body )) {
HXLINE( 323)					space = null();
            				}
            				else {
HXLINE( 323)					space = this->ishape->body->space;
            				}
            			}
            			else {
HXLINE( 323)				if (hx::IsNotNull( this->ibody )) {
HXLINE( 323)					space = this->ibody->space;
            				}
            				else {
HXLINE( 323)					space = this->icompound->space;
            				}
            			}
HXLINE( 324)			if (hx::IsNotNull( space )) {
HXLINE( 325)				this->dealloc_cbSet();
HXLINE( 326)				cb->interactors->add(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 328)			{
HXLINE( 329)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre) = null();
HXLINE( 330)				{
HXLINE( 331)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = this->cbTypes->head;
HXLINE( 332)					while(hx::IsNotNull( cx_ite )){
HXLINE( 334)						{
HXLINE( 335)							if ((cb->id < cx_ite->elt->id)) {
HXLINE( 335)								goto _hx_goto_13;
            							}
HXLINE( 336)							pre = cx_ite;
            						}
HXLINE( 338)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_13:;
            				}
HXLINE( 341)				{
HXLINE( 341)					HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,_this) = this->cbTypes;
HXDLIN( 341)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 341)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 341)						ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 341)						ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 341)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 341)						ret->next = null();
            					}
HXDLIN( 341)					ret->elt = cb;
HXDLIN( 341)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXDLIN( 341)					if (hx::IsNull( pre )) {
HXLINE( 341)						temp->next = _this->head;
HXDLIN( 341)						_this->head = temp;
            					}
            					else {
HXLINE( 341)						temp->next = pre->next;
HXDLIN( 341)						pre->next = temp;
            					}
HXDLIN( 341)					_this->pushmod = (_this->modified = true);
HXDLIN( 341)					_this->length++;
            				}
            			}
HXLINE( 343)			if (hx::IsNotNull( space )) {
HXLINE( 344)				this->alloc_cbSet();
HXLINE( 345)				this->wake();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Interactor_obj,insert_cbtype,(void))

void ZPP_Interactor_obj::alloc_cbSet(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_349_alloc_cbSet)
            	HX_STACK_THIS(this)
HXLINE( 350)		HX_VAR(  ::zpp_nape::space::ZPP_Space,space);
HXDLIN( 350)		if (hx::IsNotNull( this->ishape )) {
HXLINE( 350)			if (hx::IsNull( this->ishape->body )) {
HXLINE( 350)				space = null();
            			}
            			else {
HXLINE( 350)				space = this->ishape->body->space;
            			}
            		}
            		else {
HXLINE( 350)			if (hx::IsNotNull( this->ibody )) {
HXLINE( 350)				space = this->ibody->space;
            			}
            			else {
HXLINE( 350)				space = this->icompound->space;
            			}
            		}
HXLINE( 359)		if (hx::IsNotNull( (this->cbSet = space->cbsets->get(this->cbTypes)) )) {
HXLINE( 360)			this->cbSet->count++;
HXLINE( 361)			this->cbSet->interactors->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 362)			this->cbSet->validate();
HXLINE( 363)			space->freshInteractorType(hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,alloc_cbSet,(void))

void ZPP_Interactor_obj::dealloc_cbSet(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_366_dealloc_cbSet)
            	HX_STACK_THIS(this)
HXLINE( 367)		HX_VAR(  ::zpp_nape::space::ZPP_Space,space);
HXDLIN( 367)		if (hx::IsNotNull( this->ishape )) {
HXLINE( 367)			if (hx::IsNull( this->ishape->body )) {
HXLINE( 367)				space = null();
            			}
            			else {
HXLINE( 367)				space = this->ishape->body->space;
            			}
            		}
            		else {
HXLINE( 367)			if (hx::IsNotNull( this->ibody )) {
HXLINE( 367)				space = this->ibody->space;
            			}
            			else {
HXLINE( 367)				space = this->icompound->space;
            			}
            		}
HXLINE( 376)		if (hx::IsNotNull( this->cbSet )) {
HXLINE( 377)			this->cbSet->interactors->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE( 378)			space->nullInteractorType(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 379)			if ((--this->cbSet->count == (int)0)) {
HXLINE( 380)				space->cbsets->remove(this->cbSet);
HXLINE( 381)				{
HXLINE( 382)					HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,o) = this->cbSet;
HXLINE( 391)					{
HXLINE( 391)						o->listeners->clear();
HXDLIN( 391)						o->zip_listeners = true;
HXDLIN( 391)						o->bodylisteners->clear();
HXDLIN( 391)						o->zip_bodylisteners = true;
HXDLIN( 391)						o->conlisteners->clear();
HXDLIN( 391)						o->zip_conlisteners = true;
HXDLIN( 391)						while(hx::IsNotNull( o->cbTypes->head )){
HXLINE( 391)							o->cbTypes->pop_unsafe()->cbsets->remove(o);
            						}
            					}
HXLINE( 392)					o->next = ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool;
HXLINE( 393)					::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool = o;
            				}
            			}
HXLINE( 399)			this->cbSet = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,dealloc_cbSet,(void))

void ZPP_Interactor_obj::setGroup( ::zpp_nape::dynamics::ZPP_InteractionGroup group){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_403_setGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(group,"group")
HXLINE( 403)		if (hx::IsNotEq( this->group,group )) {
HXLINE( 404)			 ::zpp_nape::space::ZPP_Space inspace;
HXDLIN( 404)			if (hx::IsNotNull( this->ishape )) {
HXLINE( 404)				if (hx::IsNull( this->ishape->body )) {
HXLINE( 404)					inspace = null();
            				}
            				else {
HXLINE( 404)					inspace = this->ishape->body->space;
            				}
            			}
            			else {
HXLINE( 404)				if (hx::IsNotNull( this->ibody )) {
HXLINE( 404)					inspace = this->ibody->space;
            				}
            				else {
HXLINE( 404)					inspace = this->icompound->space;
            				}
            			}
HXDLIN( 404)			HX_VARI_NAME( bool,inspace1,"inspace") = hx::IsNotNull( inspace );
HXLINE( 405)			bool _hx_tmp;
HXDLIN( 405)			if (inspace1) {
HXLINE( 405)				_hx_tmp = hx::IsNotNull( this->group );
            			}
            			else {
HXLINE( 405)				_hx_tmp = false;
            			}
HXDLIN( 405)			if (_hx_tmp) {
HXLINE( 405)				this->group->interactors->remove(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 406)			this->group = group;
HXLINE( 407)			bool _hx_tmp1;
HXDLIN( 407)			if (inspace1) {
HXLINE( 407)				_hx_tmp1 = hx::IsNotNull( group );
            			}
            			else {
HXLINE( 407)				_hx_tmp1 = false;
            			}
HXDLIN( 407)			if (_hx_tmp1) {
HXLINE( 407)				group->interactors->add(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 408)			if (inspace1) {
HXLINE( 409)				if (hx::IsNotNull( this->ishape )) {
HXLINE( 409)					this->ishape->body->wake();
            				}
            				else {
HXLINE( 410)					if (hx::IsNotNull( this->ibody )) {
HXLINE( 410)						this->ibody->wake();
            					}
            					else {
HXLINE( 411)						this->icompound->wake();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Interactor_obj,setGroup,(void))

void ZPP_Interactor_obj::immutable_midstep(::String n){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_416_immutable_midstep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Interactor_obj,immutable_midstep,(void))

 ::zpp_nape::dynamics::ZPP_InteractionGroup ZPP_Interactor_obj::lookup_group(){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_440_lookup_group)
            	HX_STACK_THIS(this)
HXLINE( 441)		HX_VARI(  ::zpp_nape::phys::ZPP_Interactor,cur) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 442)		while(true){
HXLINE( 442)			bool _hx_tmp;
HXDLIN( 442)			if (hx::IsNotNull( cur )) {
HXLINE( 442)				_hx_tmp = hx::IsNull( cur->group );
            			}
            			else {
HXLINE( 442)				_hx_tmp = false;
            			}
HXDLIN( 442)			if (!(_hx_tmp)) {
HXLINE( 442)				goto _hx_goto_20;
            			}
HXLINE( 443)			if (hx::IsNotNull( cur->ishape )) {
HXLINE( 443)				cur = cur->ishape->body;
            			}
            			else {
HXLINE( 444)				if (hx::IsNotNull( cur->icompound )) {
HXLINE( 444)					cur = cur->icompound->compound;
            				}
            				else {
HXLINE( 445)					cur = cur->ibody->compound;
            				}
            			}
            		}
            		_hx_goto_20:;
HXLINE( 447)		if (hx::IsNull( cur )) {
HXLINE( 447)			return null();
            		}
            		else {
HXLINE( 447)			return cur->group;
            		}
HXDLIN( 447)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Interactor_obj,lookup_group,return )

void ZPP_Interactor_obj::copyto( ::nape::phys::Interactor ret){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_449_copyto)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ret,"ret")
HXLINE( 450)		ret->zpp_inner_i->group = this->group;
HXLINE( 451)		{
HXLINE( 451)			HX_VARI(  ::nape::phys::Interactor,_this) = this->outer_i;
HXDLIN( 451)			if (hx::IsNull( _this->zpp_inner_i->wrap_cbTypes )) {
HXLINE( 451)				_this->zpp_inner_i->setupcbTypes();
            			}
HXDLIN( 451)			HX_VARI_NAME(  ::nape::callbacks::CbTypeList,_this1,"_this") = _this->zpp_inner_i->wrap_cbTypes;
HXDLIN( 451)			_this1->zpp_inner->valmod();
HXDLIN( 451)			HX_VARI(  ::nape::callbacks::CbTypeIterator,_g) = ::nape::callbacks::CbTypeIterator_obj::get(_this1);
HXDLIN( 451)			while(true){
HXLINE( 451)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 451)				HX_VARI_NAME(  ::nape::callbacks::CbTypeList,_this2,"_this") = _g->zpp_inner;
HXDLIN( 451)				_this2->zpp_inner->valmod();
HXDLIN( 451)				if (_this2->zpp_inner->zip_length) {
HXLINE( 451)					_this2->zpp_inner->zip_length = false;
HXDLIN( 451)					_this2->zpp_inner->user_length = _this2->zpp_inner->inner->length;
            				}
HXDLIN( 451)				_g->zpp_critical = true;
HXDLIN( 451)				bool _hx_tmp;
HXDLIN( 451)				if ((_g->zpp_i < _this2->zpp_inner->user_length)) {
HXLINE( 451)					_hx_tmp = true;
            				}
            				else {
HXLINE( 451)					{
HXLINE( 451)						_g->zpp_next = ::nape::callbacks::CbTypeIterator_obj::zpp_pool;
HXDLIN( 451)						::nape::callbacks::CbTypeIterator_obj::zpp_pool = _g;
HXDLIN( 451)						_g->zpp_inner = null();
            					}
HXDLIN( 451)					_hx_tmp = false;
            				}
HXDLIN( 451)				if (!(_hx_tmp)) {
HXLINE( 451)					goto _hx_goto_22;
            				}
HXDLIN( 451)				_g->zpp_critical = false;
HXDLIN( 451)				HX_VARI(  ::nape::callbacks::CbType,cb) = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 451)				{
HXLINE( 451)					if (hx::IsNull( ret->zpp_inner_i->wrap_cbTypes )) {
HXLINE( 451)						ret->zpp_inner_i->setupcbTypes();
            					}
HXDLIN( 451)					HX_VARI_NAME(  ::nape::callbacks::CbTypeList,_this3,"_this") = ret->zpp_inner_i->wrap_cbTypes;
HXDLIN( 451)					if (_this3->zpp_inner->reverse_flag) {
HXLINE( 451)						_this3->push(cb);
            					}
            					else {
HXLINE( 451)						_this3->unshift(cb);
            					}
            				}
            			}
            			_hx_goto_22:;
            		}
HXLINE( 452)		if (hx::IsNotNull( this->userData )) {
HXLINE( 452)			ret->zpp_inner_i->userData = ::Reflect_obj::copy(this->userData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Interactor_obj,copyto,(void))

 ::zpp_nape::space::ZPP_CallbackSet ZPP_Interactor_obj::get( ::zpp_nape::phys::ZPP_Interactor i1, ::zpp_nape::phys::ZPP_Interactor i2){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_235_get)
            	HX_STACK_ARG(i1,"i1")
            	HX_STACK_ARG(i2,"i2")
HXLINE( 244)		HX_VAR( int,id);
HXDLIN( 244)		if ((i1->id < i2->id)) {
HXLINE( 244)			id = i1->id;
            		}
            		else {
HXLINE( 244)			id = i2->id;
            		}
HXLINE( 245)		HX_VAR( int,di);
HXDLIN( 245)		if ((i1->id < i2->id)) {
HXLINE( 245)			di = i2->id;
            		}
            		else {
HXLINE( 245)			di = i1->id;
            		}
HXLINE( 254)		HX_VAR(  ::zpp_nape::util::ZNPList_ZPP_CallbackSet,xs);
HXDLIN( 254)		if ((i1->cbsets->length < i2->cbsets->length)) {
HXLINE( 254)			xs = i1->cbsets;
            		}
            		else {
HXLINE( 254)			xs = i2->cbsets;
            		}
HXLINE( 255)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,ret) = null();
HXLINE( 256)		{
HXLINE( 257)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cx_ite) = xs->head;
HXLINE( 258)			while(hx::IsNotNull( cx_ite )){
HXLINE( 259)				HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,x) = cx_ite->elt;
HXLINE( 269)				bool _hx_tmp;
HXDLIN( 269)				if ((x->id == id)) {
HXLINE( 269)					_hx_tmp = (x->di == di);
            				}
            				else {
HXLINE( 269)					_hx_tmp = false;
            				}
HXDLIN( 269)				if (_hx_tmp) {
HXLINE( 270)					ret = x;
HXLINE( 271)					goto _hx_goto_24;
            				}
HXLINE( 274)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_24:;
            		}
HXLINE( 277)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Interactor_obj,get,return )

void ZPP_Interactor_obj::int_callback( ::zpp_nape::space::ZPP_CallbackSet set, ::zpp_nape::callbacks::ZPP_InteractionListener x, ::zpp_nape::callbacks::ZPP_Callback cb){
            	HX_STACKFRAME(&_hx_pos_f253ffd5653f4b0a_426_int_callback)
            	HX_STACK_ARG(set,"set")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(cb,"cb")
HXLINE( 427)		HX_VARI(  ::zpp_nape::phys::ZPP_Interactor,o1) = set->int1;
HXLINE( 428)		HX_VARI(  ::zpp_nape::phys::ZPP_Interactor,o2) = set->int2;
HXLINE( 429)		bool _hx_tmp;
HXDLIN( 429)		HX_VARI(  ::zpp_nape::callbacks::ZPP_OptionType,_this) = x->options1;
HXDLIN( 429)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs) = o1->cbTypes;
HXDLIN( 429)		bool _hx_tmp1;
HXDLIN( 429)		if (_this->nonemptyintersection(xs,_this->includes)) {
HXLINE( 429)			_hx_tmp1 = !(_this->nonemptyintersection(xs,_this->excludes));
            		}
            		else {
HXLINE( 429)			_hx_tmp1 = false;
            		}
HXDLIN( 429)		if (_hx_tmp1) {
HXLINE( 429)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_OptionType,_this1,"_this") = x->options2;
HXDLIN( 429)			HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs1,"xs") = o2->cbTypes;
HXDLIN( 429)			if (_this1->nonemptyintersection(xs1,_this1->includes)) {
HXLINE( 429)				_hx_tmp = !(_this1->nonemptyintersection(xs1,_this1->excludes));
            			}
            			else {
HXLINE( 429)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 429)			_hx_tmp = false;
            		}
HXDLIN( 429)		if (_hx_tmp) {
HXLINE( 430)			cb->int1 = o1;
HXLINE( 431)			cb->int2 = o2;
            		}
            		else {
HXLINE( 434)			cb->int1 = o2;
HXLINE( 435)			cb->int2 = o1;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_Interactor_obj,int_callback,(void))


hx::ObjectPtr< ZPP_Interactor_obj > ZPP_Interactor_obj::__new() {
	hx::ObjectPtr< ZPP_Interactor_obj > __this = new ZPP_Interactor_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Interactor_obj > ZPP_Interactor_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Interactor_obj *__this = (ZPP_Interactor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Interactor_obj), true, "zpp_nape.phys.ZPP_Interactor"));
	*(void **)__this = ZPP_Interactor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Interactor_obj::ZPP_Interactor_obj()
{
}

void ZPP_Interactor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Interactor);
	HX_MARK_MEMBER_NAME(outer_i,"outer_i");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(ishape,"ishape");
	HX_MARK_MEMBER_NAME(ibody,"ibody");
	HX_MARK_MEMBER_NAME(icompound,"icompound");
	HX_MARK_MEMBER_NAME(cbsets,"cbsets");
	HX_MARK_MEMBER_NAME(group,"group");
	HX_MARK_MEMBER_NAME(cbTypes,"cbTypes");
	HX_MARK_MEMBER_NAME(cbSet,"cbSet");
	HX_MARK_MEMBER_NAME(wrap_cbTypes,"wrap_cbTypes");
	HX_MARK_END_CLASS();
}

void ZPP_Interactor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_i,"outer_i");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(ishape,"ishape");
	HX_VISIT_MEMBER_NAME(ibody,"ibody");
	HX_VISIT_MEMBER_NAME(icompound,"icompound");
	HX_VISIT_MEMBER_NAME(cbsets,"cbsets");
	HX_VISIT_MEMBER_NAME(group,"group");
	HX_VISIT_MEMBER_NAME(cbTypes,"cbTypes");
	HX_VISIT_MEMBER_NAME(cbSet,"cbSet");
	HX_VISIT_MEMBER_NAME(wrap_cbTypes,"wrap_cbTypes");
}

hx::Val ZPP_Interactor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"wake") ) { return hx::Val( wake_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ibody") ) { return hx::Val( ibody); }
		if (HX_FIELD_EQ(inName,"group") ) { return hx::Val( group); }
		if (HX_FIELD_EQ(inName,"cbSet") ) { return hx::Val( cbSet); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ishape") ) { return hx::Val( ishape); }
		if (HX_FIELD_EQ(inName,"isBody") ) { return hx::Val( isBody_dyn()); }
		if (HX_FIELD_EQ(inName,"cbsets") ) { return hx::Val( cbsets); }
		if (HX_FIELD_EQ(inName,"copyto") ) { return hx::Val( copyto_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outer_i") ) { return hx::Val( outer_i); }
		if (HX_FIELD_EQ(inName,"isShape") ) { return hx::Val( isShape_dyn()); }
		if (HX_FIELD_EQ(inName,"cbTypes") ) { return hx::Val( cbTypes); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData); }
		if (HX_FIELD_EQ(inName,"getSpace") ) { return hx::Val( getSpace_dyn()); }
		if (HX_FIELD_EQ(inName,"setGroup") ) { return hx::Val( setGroup_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"icompound") ) { return hx::Val( icompound); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isCompound") ) { return hx::Val( isCompound_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alloc_cbSet") ) { return hx::Val( alloc_cbSet_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_cbTypes") ) { return hx::Val( wrap_cbTypes); }
		if (HX_FIELD_EQ(inName,"setupcbTypes") ) { return hx::Val( setupcbTypes_dyn()); }
		if (HX_FIELD_EQ(inName,"lookup_group") ) { return hx::Val( lookup_group_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"insert_cbtype") ) { return hx::Val( insert_cbtype_dyn()); }
		if (HX_FIELD_EQ(inName,"dealloc_cbSet") ) { return hx::Val( dealloc_cbSet_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__iaddedToSpace") ) { return hx::Val( _hx___iaddedToSpace_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"immutable_midstep") ) { return hx::Val( immutable_midstep_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"wrap_cbTypes_adder") ) { return hx::Val( wrap_cbTypes_adder_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__iremovedFromSpace") ) { return hx::Val( _hx___iremovedFromSpace_dyn()); }
		if (HX_FIELD_EQ(inName,"wrap_cbTypes_subber") ) { return hx::Val( wrap_cbTypes_subber_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Interactor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"int_callback") ) { outValue = int_callback_dyn(); return true; }
	}
	return false;
}

hx::Val ZPP_Interactor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ibody") ) { ibody=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"group") ) { group=inValue.Cast<  ::zpp_nape::dynamics::ZPP_InteractionGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbSet") ) { cbSet=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSet >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ishape") ) { ishape=inValue.Cast<  ::zpp_nape::shape::ZPP_Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { cbsets=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CallbackSet >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outer_i") ) { outer_i=inValue.Cast<  ::nape::phys::Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbTypes") ) { cbTypes=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbType >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"icompound") ) { icompound=inValue.Cast<  ::zpp_nape::phys::ZPP_Compound >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_cbTypes") ) { wrap_cbTypes=inValue.Cast<  ::nape::callbacks::CbTypeList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Interactor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_i","\x65","\x60","\x24","\xdd"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("ishape","\x18","\xc6","\x95","\x77"));
	outFields->push(HX_HCSTRING("ibody","\x8b","\x63","\x2e","\xb6"));
	outFields->push(HX_HCSTRING("icompound","\xd4","\xd4","\xd3","\x06"));
	outFields->push(HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"));
	outFields->push(HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"));
	outFields->push(HX_HCSTRING("cbTypes","\x5a","\x29","\xbf","\xf1"));
	outFields->push(HX_HCSTRING("cbSet","\x43","\xaa","\xb1","\x41"));
	outFields->push(HX_HCSTRING("wrap_cbTypes","\xa5","\x96","\x54","\x44"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Interactor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::phys::Interactor*/ ,(int)offsetof(ZPP_Interactor_obj,outer_i),HX_HCSTRING("outer_i","\x65","\x60","\x24","\xdd")},
	{hx::fsInt,(int)offsetof(ZPP_Interactor_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Interactor_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsObject /*::zpp_nape::shape::ZPP_Shape*/ ,(int)offsetof(ZPP_Interactor_obj,ishape),HX_HCSTRING("ishape","\x18","\xc6","\x95","\x77")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_Interactor_obj,ibody),HX_HCSTRING("ibody","\x8b","\x63","\x2e","\xb6")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Compound*/ ,(int)offsetof(ZPP_Interactor_obj,icompound),HX_HCSTRING("icompound","\xd4","\xd4","\xd3","\x06")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CallbackSet*/ ,(int)offsetof(ZPP_Interactor_obj,cbsets),HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e")},
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_InteractionGroup*/ ,(int)offsetof(ZPP_Interactor_obj,group),HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbType*/ ,(int)offsetof(ZPP_Interactor_obj,cbTypes),HX_HCSTRING("cbTypes","\x5a","\x29","\xbf","\xf1")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_CbSet*/ ,(int)offsetof(ZPP_Interactor_obj,cbSet),HX_HCSTRING("cbSet","\x43","\xaa","\xb1","\x41")},
	{hx::fsObject /*::nape::callbacks::CbTypeList*/ ,(int)offsetof(ZPP_Interactor_obj,wrap_cbTypes),HX_HCSTRING("wrap_cbTypes","\xa5","\x96","\x54","\x44")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Interactor_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Interactor_obj_sMemberFields[] = {
	HX_HCSTRING("outer_i","\x65","\x60","\x24","\xdd"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("ishape","\x18","\xc6","\x95","\x77"),
	HX_HCSTRING("ibody","\x8b","\x63","\x2e","\xb6"),
	HX_HCSTRING("icompound","\xd4","\xd4","\xd3","\x06"),
	HX_HCSTRING("isShape","\xd7","\x86","\xa2","\x18"),
	HX_HCSTRING("isBody","\xac","\x3f","\x82","\x5e"),
	HX_HCSTRING("isCompound","\x75","\xd5","\x7e","\xfc"),
	HX_HCSTRING("__iaddedToSpace","\x34","\xf7","\x55","\x2d"),
	HX_HCSTRING("__iremovedFromSpace","\x85","\x8e","\xc2","\x20"),
	HX_HCSTRING("wake","\x24","\x5c","\xf2","\x4e"),
	HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"),
	HX_HCSTRING("getSpace","\x50","\x9c","\x3d","\xe1"),
	HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"),
	HX_HCSTRING("cbTypes","\x5a","\x29","\xbf","\xf1"),
	HX_HCSTRING("cbSet","\x43","\xaa","\xb1","\x41"),
	HX_HCSTRING("wrap_cbTypes","\xa5","\x96","\x54","\x44"),
	HX_HCSTRING("setupcbTypes","\x7d","\xf4","\xa2","\xe2"),
	HX_HCSTRING("wrap_cbTypes_subber","\x69","\xc5","\x02","\x23"),
	HX_HCSTRING("wrap_cbTypes_adder","\x74","\xbc","\x69","\xb4"),
	HX_HCSTRING("insert_cbtype","\x5f","\x1c","\xf6","\x35"),
	HX_HCSTRING("alloc_cbSet","\xb9","\xdb","\xce","\x10"),
	HX_HCSTRING("dealloc_cbSet","\xd8","\x21","\x86","\x40"),
	HX_HCSTRING("setGroup","\x3d","\x1c","\x29","\xa8"),
	HX_HCSTRING("immutable_midstep","\x97","\xf0","\xae","\xea"),
	HX_HCSTRING("lookup_group","\x7a","\xb4","\xb1","\x13"),
	HX_HCSTRING("copyto","\x70","\x38","\x33","\xc9"),
	::String(null()) };

static void ZPP_Interactor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Interactor_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Interactor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Interactor_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_Interactor_obj::__mClass;

static ::String ZPP_Interactor_obj_sStaticFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("int_callback","\x55","\xee","\x70","\x3f"),
	::String(null())
};

void ZPP_Interactor_obj::__register()
{
	hx::Object *dummy = new ZPP_Interactor_obj;
	ZPP_Interactor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.phys.ZPP_Interactor","\xb9","\x92","\xdf","\x44");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Interactor_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_Interactor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Interactor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Interactor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Interactor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Interactor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Interactor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Interactor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace phys
