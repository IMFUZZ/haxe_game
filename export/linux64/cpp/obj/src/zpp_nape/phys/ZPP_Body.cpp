// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <zpp_nape/geom/ZPP_Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_Body
#include <zpp_nape/util/ZPP_Set_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_174_new,"zpp_nape.phys.ZPP_Body","new",0x86c808f4,"zpp_nape.phys.ZPP_Body.new","zpp_nape/phys/Body.hx",174,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_181_isStatic,"zpp_nape.phys.ZPP_Body","isStatic",0x1c77a724,"zpp_nape.phys.ZPP_Body.isStatic","zpp_nape/phys/Body.hx",181,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_186_isDynamic,"zpp_nape.phys.ZPP_Body","isDynamic",0xcbeafc49,"zpp_nape.phys.ZPP_Body.isDynamic","zpp_nape/phys/Body.hx",186,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_191_isKinematic,"zpp_nape.phys.ZPP_Body","isKinematic",0x9f7d1c4f,"zpp_nape.phys.ZPP_Body.isKinematic","zpp_nape/phys/Body.hx",191,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_194_invalidate_type,"zpp_nape.phys.ZPP_Body","invalidate_type",0x2dcb7dd2,"zpp_nape.phys.ZPP_Body.invalidate_type","zpp_nape/phys/Body.hx",194,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_201_invalidate_shapes,"zpp_nape.phys.ZPP_Body","invalidate_shapes",0x9bf75b4a,"zpp_nape.phys.ZPP_Body.invalidate_shapes","zpp_nape/phys/Body.hx",201,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_221_init_bodysetlist,"zpp_nape.phys.ZPP_Body","init_bodysetlist",0xcfa86a9b,"zpp_nape.phys.ZPP_Body.init_bodysetlist","zpp_nape/phys/Body.hx",221,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_245_connectedBodies_cont,"zpp_nape.phys.ZPP_Body","connectedBodies_cont",0xd567f2f4,"zpp_nape.phys.ZPP_Body.connectedBodies_cont","zpp_nape/phys/Body.hx",245,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_250_connectedBodies,"zpp_nape.phys.ZPP_Body","connectedBodies",0x3b48f5bd,"zpp_nape.phys.ZPP_Body.connectedBodies","zpp_nape/phys/Body.hx",250,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_274_interactingBodies,"zpp_nape.phys.ZPP_Body","interactingBodies",0x873f5320,"zpp_nape.phys.ZPP_Body.interactingBodies","zpp_nape/phys/Body.hx",274,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_306_atRest,"zpp_nape.phys.ZPP_Body","atRest",0x296c2d93,"zpp_nape.phys.ZPP_Body.atRest","zpp_nape/phys/Body.hx",306,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_331_refreshArbiters,"zpp_nape.phys.ZPP_Body","refreshArbiters",0xf23b5bf9,"zpp_nape.phys.ZPP_Body.refreshArbiters","zpp_nape/phys/Body.hx",331,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_349_sweepIntegrate,"zpp_nape.phys.ZPP_Body","sweepIntegrate",0x201742d1,"zpp_nape.phys.ZPP_Body.sweepIntegrate","zpp_nape/phys/Body.hx",349,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_388_sweepValidate,"zpp_nape.phys.ZPP_Body","sweepValidate",0x8a49a836,"zpp_nape.phys.ZPP_Body.sweepValidate","zpp_nape/phys/Body.hx",388,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_467_invalidate_pos,"zpp_nape.phys.ZPP_Body","invalidate_pos",0x42c6bd7c,"zpp_nape.phys.ZPP_Body.invalidate_pos","zpp_nape/phys/Body.hx",467,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_484_pos_invalidate,"zpp_nape.phys.ZPP_Body","pos_invalidate",0x15af3172,"zpp_nape.phys.ZPP_Body.pos_invalidate","zpp_nape/phys/Body.hx",484,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_515_pos_validate,"zpp_nape.phys.ZPP_Body","pos_validate",0xd2702ccd,"zpp_nape.phys.ZPP_Body.pos_validate","zpp_nape/phys/Body.hx",515,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_536_vel_invalidate,"zpp_nape.phys.ZPP_Body","vel_invalidate",0x1ffe3f49,"zpp_nape.phys.ZPP_Body.vel_invalidate","zpp_nape/phys/Body.hx",536,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_563_vel_validate,"zpp_nape.phys.ZPP_Body","vel_validate",0x123346e4,"zpp_nape.phys.ZPP_Body.vel_validate","zpp_nape/phys/Body.hx",563,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_584_kinvel_invalidate,"zpp_nape.phys.ZPP_Body","kinvel_invalidate",0x5ff2f401,"zpp_nape.phys.ZPP_Body.kinvel_invalidate","zpp_nape/phys/Body.hx",584,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_608_kinvel_validate,"zpp_nape.phys.ZPP_Body","kinvel_validate",0x7c0add9c,"zpp_nape.phys.ZPP_Body.kinvel_validate","zpp_nape/phys/Body.hx",608,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_629_svel_invalidate,"zpp_nape.phys.ZPP_Body","svel_invalidate",0x1785a1a4,"zpp_nape.phys.ZPP_Body.svel_invalidate","zpp_nape/phys/Body.hx",629,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_653_svel_validate,"zpp_nape.phys.ZPP_Body","svel_validate",0xaed9cc7f,"zpp_nape.phys.ZPP_Body.svel_validate","zpp_nape/phys/Body.hx",653,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_674_force_invalidate,"zpp_nape.phys.ZPP_Body","force_invalidate",0xe2a1717b,"zpp_nape.phys.ZPP_Body.force_invalidate","zpp_nape/phys/Body.hx",674,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_700_force_validate,"zpp_nape.phys.ZPP_Body","force_validate",0xdf552896,"zpp_nape.phys.ZPP_Body.force_validate","zpp_nape/phys/Body.hx",700,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_720_setupPosition,"zpp_nape.phys.ZPP_Body","setupPosition",0x429a89da,"zpp_nape.phys.ZPP_Body.setupPosition","zpp_nape/phys/Body.hx",720,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_729_setupVelocity,"zpp_nape.phys.ZPP_Body","setupVelocity",0x969deb4e,"zpp_nape.phys.ZPP_Body.setupVelocity","zpp_nape/phys/Body.hx",729,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_738_setupkinvel,"zpp_nape.phys.ZPP_Body","setupkinvel",0x0f6ff61e,"zpp_nape.phys.ZPP_Body.setupkinvel","zpp_nape/phys/Body.hx",738,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_747_setupsvel,"zpp_nape.phys.ZPP_Body","setupsvel",0x4de97c5b,"zpp_nape.phys.ZPP_Body.setupsvel","zpp_nape/phys/Body.hx",747,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_756_setupForce,"zpp_nape.phys.ZPP_Body","setupForce",0xf0c4901a,"zpp_nape.phys.ZPP_Body.setupForce","zpp_nape/phys/Body.hx",756,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_765_cvel_validate,"zpp_nape.phys.ZPP_Body","cvel_validate",0x52d1f46f,"zpp_nape.phys.ZPP_Body.cvel_validate","zpp_nape/phys/Body.hx",765,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_771_setup_cvel,"zpp_nape.phys.ZPP_Body","setup_cvel",0x4ddd8c08,"zpp_nape.phys.ZPP_Body.setup_cvel","zpp_nape/phys/Body.hx",771,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_784_invalidate_rot,"zpp_nape.phys.ZPP_Body","invalidate_rot",0x42c841ff,"zpp_nape.phys.ZPP_Body.invalidate_rot","zpp_nape/phys/Body.hx",784,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_807_validate_axis,"zpp_nape.phys.ZPP_Body","validate_axis",0x53dcc1be,"zpp_nape.phys.ZPP_Body.validate_axis","zpp_nape/phys/Body.hx",807,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_815_quick_validate_axis,"zpp_nape.phys.ZPP_Body","quick_validate_axis",0x294704ac,"zpp_nape.phys.ZPP_Body.quick_validate_axis","zpp_nape/phys/Body.hx",815,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_838_delta_rot,"zpp_nape.phys.ZPP_Body","delta_rot",0x8e7f4aa4,"zpp_nape.phys.ZPP_Body.delta_rot","zpp_nape/phys/Body.hx",838,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_858_invalidate_mass,"zpp_nape.phys.ZPP_Body","invalidate_mass",0x2918cc0c,"zpp_nape.phys.ZPP_Body.invalidate_mass","zpp_nape/phys/Body.hx",858,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_862_validate_mass,"zpp_nape.phys.ZPP_Body","validate_mass",0x5bb9e611,"zpp_nape.phys.ZPP_Body.validate_mass","zpp_nape/phys/Body.hx",862,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_897_invalidate_gravMass,"zpp_nape.phys.ZPP_Body","invalidate_gravMass",0x62f2a40c,"zpp_nape.phys.ZPP_Body.invalidate_gravMass","zpp_nape/phys/Body.hx",897,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_903_validate_gravMass,"zpp_nape.phys.ZPP_Body","validate_gravMass",0x4629a491,"zpp_nape.phys.ZPP_Body.validate_gravMass","zpp_nape/phys/Body.hx",903,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_917_invalidate_gravMassScale,"zpp_nape.phys.ZPP_Body","invalidate_gravMassScale",0x0f3f6ede,"zpp_nape.phys.ZPP_Body.invalidate_gravMassScale","zpp_nape/phys/Body.hx",917,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_921_validate_gravMassScale,"zpp_nape.phys.ZPP_Body","validate_gravMassScale",0x521f6c39,"zpp_nape.phys.ZPP_Body.validate_gravMassScale","zpp_nape/phys/Body.hx",921,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_937_invalidate_inertia,"zpp_nape.phys.ZPP_Body","invalidate_inertia",0xf1be24e2,"zpp_nape.phys.ZPP_Body.invalidate_inertia","zpp_nape/phys/Body.hx",937,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_941_validate_inertia,"zpp_nape.phys.ZPP_Body","validate_inertia",0x8c975bfd,"zpp_nape.phys.ZPP_Body.validate_inertia","zpp_nape/phys/Body.hx",941,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_974_invalidate_wake,"zpp_nape.phys.ZPP_Body","invalidate_wake",0x2fb4e73c,"zpp_nape.phys.ZPP_Body.invalidate_wake","zpp_nape/phys/Body.hx",974,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_983_validate_aabb,"zpp_nape.phys.ZPP_Body","validate_aabb",0x53cb47bd,"zpp_nape.phys.ZPP_Body.validate_aabb","zpp_nape/phys/Body.hx",983,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1041_invalidate_aabb,"zpp_nape.phys.ZPP_Body","invalidate_aabb",0x212a2db8,"zpp_nape.phys.ZPP_Body.invalidate_aabb","zpp_nape/phys/Body.hx",1041,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1053_invalidate_localCOM,"zpp_nape.phys.ZPP_Body","invalidate_localCOM",0xcde1beae,"zpp_nape.phys.ZPP_Body.invalidate_localCOM","zpp_nape/phys/Body.hx",1053,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1060_invalidate_worldCOM,"zpp_nape.phys.ZPP_Body","invalidate_worldCOM",0x9285bc27,"zpp_nape.phys.ZPP_Body.invalidate_worldCOM","zpp_nape/phys/Body.hx",1060,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1063_validate_localCOM,"zpp_nape.phys.ZPP_Body","validate_localCOM",0xb118bf33,"zpp_nape.phys.ZPP_Body.validate_localCOM","zpp_nape/phys/Body.hx",1063,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1159_validate_worldCOM,"zpp_nape.phys.ZPP_Body","validate_worldCOM",0x75bcbcac,"zpp_nape.phys.ZPP_Body.validate_worldCOM","zpp_nape/phys/Body.hx",1159,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1193_getlocalCOM,"zpp_nape.phys.ZPP_Body","getlocalCOM",0x091ebac0,"zpp_nape.phys.ZPP_Body.getlocalCOM","zpp_nape/phys/Body.hx",1193,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1199_getworldCOM,"zpp_nape.phys.ZPP_Body","getworldCOM",0xcdc2b839,"zpp_nape.phys.ZPP_Body.getworldCOM","zpp_nape/phys/Body.hx",1199,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1203___immutable_midstep,"zpp_nape.phys.ZPP_Body","__immutable_midstep",0x56f8ba0b,"zpp_nape.phys.ZPP_Body.__immutable_midstep","zpp_nape/phys/Body.hx",1203,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1208_clear,"zpp_nape.phys.ZPP_Body","clear",0x7ebdf721,"zpp_nape.phys.ZPP_Body.clear","zpp_nape/phys/Body.hx",1208,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1390_aabb_validate,"zpp_nape.phys.ZPP_Body","aabb_validate",0x5d190ae9,"zpp_nape.phys.ZPP_Body.aabb_validate","zpp_nape/phys/Body.hx",1390,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1393_shapes_adder,"zpp_nape.phys.ZPP_Body","shapes_adder",0xe0b7bcad,"zpp_nape.phys.ZPP_Body.shapes_adder","zpp_nape/phys/Body.hx",1393,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1406_shapes_subber,"zpp_nape.phys.ZPP_Body","shapes_subber",0xbaf4f710,"zpp_nape.phys.ZPP_Body.shapes_subber","zpp_nape/phys/Body.hx",1406,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1412_shapes_invalidate,"zpp_nape.phys.ZPP_Body","shapes_invalidate",0x5bc6493c,"zpp_nape.phys.ZPP_Body.shapes_invalidate","zpp_nape/phys/Body.hx",1412,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1633_addedToSpace,"zpp_nape.phys.ZPP_Body","addedToSpace",0x8a025957,"zpp_nape.phys.ZPP_Body.addedToSpace","zpp_nape/phys/Body.hx",1633,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1663_removedFromSpace,"zpp_nape.phys.ZPP_Body","removedFromSpace",0xaf4e3e28,"zpp_nape.phys.ZPP_Body.removedFromSpace","zpp_nape/phys/Body.hx",1663,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1688_copy,"zpp_nape.phys.ZPP_Body","copy",0x610204a1,"zpp_nape.phys.ZPP_Body.copy","zpp_nape/phys/Body.hx",1688,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_216_bodysetlt,"zpp_nape.phys.ZPP_Body","bodysetlt",0x38e1405c,"zpp_nape.phys.ZPP_Body.bodysetlt","zpp_nape/phys/Body.hx",216,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_1376___static,"zpp_nape.phys.ZPP_Body","__static",0x6c3d76ba,"zpp_nape.phys.ZPP_Body.__static","zpp_nape/phys/Body.hx",1376,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_193_boot,"zpp_nape.phys.ZPP_Body","boot",0x6058cd1e,"zpp_nape.phys.ZPP_Body.boot","zpp_nape/phys/Body.hx",193,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_213_boot,"zpp_nape.phys.ZPP_Body","boot",0x6058cd1e,"zpp_nape.phys.ZPP_Body.boot","zpp_nape/phys/Body.hx",213,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_214_boot,"zpp_nape.phys.ZPP_Body","boot",0x6058cd1e,"zpp_nape.phys.ZPP_Body.boot","zpp_nape/phys/Body.hx",214,0x4bb115c1)
HX_DEFINE_STACK_FRAME(_hx_pos_ee80641dc58d12ee_243_boot,"zpp_nape.phys.ZPP_Body","boot",0x6058cd1e,"zpp_nape.phys.ZPP_Body.boot","zpp_nape/phys/Body.hx",243,0x4bb115c1)
namespace zpp_nape{
namespace phys{

void ZPP_Body_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_174_new)
            	HX_STACK_THIS(this)
HXLINE(1050)		this->wrap_worldCOM = null();
HXLINE(1049)		this->wrap_localCOM = null();
HXLINE(1048)		this->zip_worldCOM = false;
HXLINE(1047)		this->worldCOMy = ((Float)0.0);
HXLINE(1046)		this->worldCOMx = ((Float)0.0);
HXLINE(1045)		this->zip_localCOM = false;
HXLINE(1044)		this->localCOMy = ((Float)0.0);
HXLINE(1043)		this->localCOMx = ((Float)0.0);
HXLINE( 977)		this->zip_aabb = false;
HXLINE( 976)		this->aabb = null();
HXLINE( 936)		this->norotate = false;
HXLINE( 935)		this->sinertia = ((Float)0.0);
HXLINE( 934)		this->iinertia = ((Float)0.0);
HXLINE( 933)		this->cinertia = ((Float)0.0);
HXLINE( 932)		this->zip_inertia = false;
HXLINE( 931)		this->inertia = ((Float)0.0);
HXLINE( 930)		this->inertiaMode = (int)0;
HXLINE( 896)		this->zip_gravMassScale = false;
HXLINE( 895)		this->gravMassScale = ((Float)0.0);
HXLINE( 894)		this->gravMassMode = (int)0;
HXLINE( 893)		this->zip_gravMass = false;
HXLINE( 892)		this->gravMass = ((Float)0.0);
HXLINE( 857)		this->nomove = false;
HXLINE( 856)		this->cmass = ((Float)0.0);
HXLINE( 855)		this->smass = ((Float)0.0);
HXLINE( 854)		this->imass = ((Float)0.0);
HXLINE( 853)		this->massMode = (int)0;
HXLINE( 852)		this->zip_mass = false;
HXLINE( 851)		this->mass = ((Float)0.0);
HXLINE( 804)		this->zip_axis = false;
HXLINE( 803)		this->axisy = ((Float)0.0);
HXLINE( 802)		this->axisx = ((Float)0.0);
HXLINE( 781)		this->rot = ((Float)0.0);
HXLINE( 780)		this->pre_rot = ((Float)0.0);
HXLINE( 779)		this->kinangvel = ((Float)0.0);
HXLINE( 778)		this->torque = ((Float)0.0);
HXLINE( 777)		this->angvel = ((Float)0.0);
HXLINE( 770)		this->wrapcvel = null();
HXLINE( 464)		this->wrap_svel = null();
HXLINE( 463)		this->svely = ((Float)0.0);
HXLINE( 462)		this->svelx = ((Float)0.0);
HXLINE( 461)		this->wrap_kinvel = null();
HXLINE( 460)		this->kinvely = ((Float)0.0);
HXLINE( 459)		this->kinvelx = ((Float)0.0);
HXLINE( 458)		this->wrap_force = null();
HXLINE( 457)		this->forcey = ((Float)0.0);
HXLINE( 456)		this->forcex = ((Float)0.0);
HXLINE( 455)		this->wrap_vel = null();
HXLINE( 454)		this->vely = ((Float)0.0);
HXLINE( 453)		this->velx = ((Float)0.0);
HXLINE( 452)		this->wrap_pos = null();
HXLINE( 451)		this->posy = ((Float)0.0);
HXLINE( 450)		this->posx = ((Float)0.0);
HXLINE( 449)		this->pre_posy = ((Float)0.0);
HXLINE( 448)		this->pre_posx = ((Float)0.0);
HXLINE( 346)		this->disableCCD = false;
HXLINE( 345)		this->bulletEnabled = false;
HXLINE( 344)		this->bullet = false;
HXLINE( 343)		this->sweepRadius = ((Float)0.0);
HXLINE( 342)		this->sweepFrozen = false;
HXLINE( 341)		this->sweep_angvel = ((Float)0.0);
HXLINE( 340)		this->sweepTime = ((Float)0.0);
HXLINE( 218)		this->graph_depth = (int)0;
HXLINE( 212)		this->component = null();
HXLINE( 211)		this->wrap_constraints = null();
HXLINE( 210)		this->constraints = null();
HXLINE( 209)		this->wrap_arbiters = null();
HXLINE( 208)		this->arbiters = null();
HXLINE( 207)		this->space = null();
HXLINE( 200)		this->wrap_shapes = null();
HXLINE( 199)		this->shapes = null();
HXLINE( 198)		this->compound = null();
HXLINE( 177)		this->type = (int)0;
HXLINE( 176)		this->world = false;
HXLINE( 175)		this->outer = null();
HXLINE(1421)		super::__construct();
HXLINE(1422)		this->ibody = hx::ObjectPtr<OBJ_>(this);
HXLINE(1423)		this->world = false;
HXLINE(1424)		this->bulletEnabled = false;
HXLINE(1425)		this->sweepTime = (int)0;
HXLINE(1426)		this->sweep_angvel = (int)0;
HXLINE(1427)		this->norotate = (this->nomove = false);
HXLINE(1428)		this->disableCCD = false;
HXLINE(1429)		{
HXLINE(1430)			this->posx = (int)0;
HXLINE(1431)			this->posy = (int)0;
            		}
HXLINE(1449)		this->rot = (int)0;
HXLINE(1450)		{
HXLINE(1451)			this->axisx = (int)0;
HXLINE(1452)			this->axisy = (int)1;
            		}
HXLINE(1470)		{
HXLINE(1471)			this->svelx = (int)0;
HXLINE(1472)			this->svely = (int)0;
            		}
HXLINE(1490)		{
HXLINE(1491)			this->velx = (int)0;
HXLINE(1492)			this->vely = (int)0;
            		}
HXLINE(1510)		{
HXLINE(1511)			this->kinvelx = (int)0;
HXLINE(1512)			this->kinvely = (int)0;
            		}
HXLINE(1530)		{
HXLINE(1531)			this->forcex = (int)0;
HXLINE(1532)			this->forcey = (int)0;
            		}
HXLINE(1550)		this->torque = (this->angvel = (this->kinangvel = (int)0));
HXLINE(1551)		{
HXLINE(1552)			this->pre_posx = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1553)			this->pre_posy = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(1571)		this->pre_rot = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1572)		{
HXLINE(1573)			this->localCOMx = (int)0;
HXLINE(1574)			this->localCOMy = (int)0;
            		}
HXLINE(1592)		{
HXLINE(1593)			this->worldCOMx = (int)0;
HXLINE(1594)			this->worldCOMy = (int)0;
            		}
HXLINE(1612)		this->zip_aabb = true;
HXLINE(1613)		HX_VAR(  ::zpp_nape::geom::ZPP_AABB,ret);
HXDLIN(1613)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE(1613)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1613)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN(1613)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN(1613)			ret->next = null();
            		}
HXDLIN(1613)		{
HXLINE(1613)			ret->minx = (int)0;
HXDLIN(1613)			ret->miny = (int)0;
            		}
HXDLIN(1613)		{
HXLINE(1613)			ret->maxx = (int)0;
HXDLIN(1613)			ret->maxy = (int)0;
            		}
HXDLIN(1613)		this->aabb = ret;
HXLINE(1614)		this->aabb->_immutable = true;
HXLINE(1616)		this->aabb->_validate = this->aabb_validate_dyn();
HXLINE(1617)		this->massMode = (int)0;
HXLINE(1618)		this->gravMassMode = (int)0;
HXLINE(1619)		this->gravMassScale = ((Float)1.0);
HXLINE(1620)		this->inertiaMode = (int)0;
HXLINE(1621)		this->arbiters =  ::zpp_nape::util::ZNPList_ZPP_Arbiter_obj::__alloc( HX_CTX );
HXLINE(1622)		this->constraints =  ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__alloc( HX_CTX );
HXLINE(1623)		this->shapes =  ::zpp_nape::util::ZNPList_ZPP_Shape_obj::__alloc( HX_CTX );
HXLINE(1624)		this->wrap_shapes = ::zpp_nape::util::ZPP_ShapeList_obj::get(this->shapes,null());
HXLINE(1625)		this->wrap_shapes->zpp_inner->adder = this->shapes_adder_dyn();
HXLINE(1626)		this->wrap_shapes->zpp_inner->subber = this->shapes_subber_dyn();
HXLINE(1627)		this->wrap_shapes->zpp_inner->_invalidate = this->shapes_invalidate_dyn();
HXLINE(1631)		this->kinematicDelaySleep = false;
            	}

Dynamic ZPP_Body_obj::__CreateEmpty() { return new ZPP_Body_obj; }

void *ZPP_Body_obj::_hx_vtable = 0;

Dynamic ZPP_Body_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Body_obj > _hx_result = new ZPP_Body_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Body_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x247ad52d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x247ad52d;
	} else {
		return inClassId==(int)0x4ef3cd4a;
	}
}

bool ZPP_Body_obj::isStatic(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_181_isStatic)
            	HX_STACK_THIS(this)
HXLINE( 181)		return (this->type == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,isStatic,return )

bool ZPP_Body_obj::isDynamic(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_186_isDynamic)
            	HX_STACK_THIS(this)
HXLINE( 186)		return (this->type == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,isDynamic,return )

bool ZPP_Body_obj::isKinematic(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_191_isKinematic)
            	HX_STACK_THIS(this)
HXLINE( 191)		return (this->type == (int)3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,isKinematic,return )

void ZPP_Body_obj::invalidate_type(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_194_invalidate_type)
            	HX_STACK_THIS(this)
HXLINE( 195)		this->invalidate_mass();
HXLINE( 196)		this->invalidate_inertia();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_type,(void))

void ZPP_Body_obj::invalidate_shapes(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_201_invalidate_shapes)
            	HX_STACK_THIS(this)
HXLINE( 202)		this->zip_aabb = true;
HXLINE( 203)		{
HXLINE( 203)			this->zip_localCOM = true;
HXDLIN( 203)			this->zip_worldCOM = true;
            		}
HXLINE( 204)		this->invalidate_mass();
HXLINE( 205)		this->invalidate_inertia();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_shapes,(void))

void ZPP_Body_obj::init_bodysetlist(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_221_init_bodysetlist)
            	HX_STACK_THIS(this)
HXLINE( 221)		if (hx::IsNull( ::zpp_nape::phys::ZPP_Body_obj::bodyset )) {
HXLINE( 222)			::zpp_nape::phys::ZPP_Body_obj::bodyset =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
HXLINE( 223)			::zpp_nape::phys::ZPP_Body_obj::bodyset->lt = ::zpp_nape::phys::ZPP_Body_obj::bodysetlt_dyn();
HXLINE( 224)			::zpp_nape::phys::ZPP_Body_obj::bodystack =  ::zpp_nape::util::ZNPList_ZPP_Body_obj::__alloc( HX_CTX );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,init_bodysetlist,(void))

void ZPP_Body_obj::connectedBodies_cont( ::nape::phys::Body b){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_245_connectedBodies_cont)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 245)		if (::zpp_nape::phys::ZPP_Body_obj::bodyset->try_insert_bool(b->zpp_inner)) {
HXLINE( 246)			::zpp_nape::phys::ZPP_Body_obj::bodystack->add(b->zpp_inner);
HXLINE( 247)			b->zpp_inner->graph_depth = (::zpp_nape::phys::ZPP_Body_obj::cur_graph_depth + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,connectedBodies_cont,(void))

 ::nape::phys::BodyList ZPP_Body_obj::connectedBodies(int depth, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_250_connectedBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(output,"output")
HXLINE( 250)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 251)		if (hx::IsNull( ::zpp_nape::phys::ZPP_Body_obj::bodyset )) {
HXLINE( 251)			::zpp_nape::phys::ZPP_Body_obj::bodyset =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
HXDLIN( 251)			::zpp_nape::phys::ZPP_Body_obj::bodyset->lt = ::zpp_nape::phys::ZPP_Body_obj::bodysetlt_dyn();
HXDLIN( 251)			::zpp_nape::phys::ZPP_Body_obj::bodystack =  ::zpp_nape::util::ZNPList_ZPP_Body_obj::__alloc( HX_CTX );
            		}
HXLINE( 252)		HX_VAR(  ::nape::phys::BodyList,ret);
HXDLIN( 252)		if (hx::IsNull( output )) {
HXLINE( 252)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 252)			ret = output;
            		}
HXLINE( 253)		::zpp_nape::phys::ZPP_Body_obj::bodystack->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 254)		::zpp_nape::phys::ZPP_Body_obj::bodyset->insert(hx::ObjectPtr<OBJ_>(this));
HXLINE( 255)		this->graph_depth = (int)0;
HXLINE( 256)		while(hx::IsNotNull( ::zpp_nape::phys::ZPP_Body_obj::bodystack->head )){
HXLINE( 257)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,cur) = ::zpp_nape::phys::ZPP_Body_obj::bodystack->pop_unsafe();
HXLINE( 258)			if ((cur->graph_depth == depth)) {
HXLINE( 258)				continue;
            			}
HXLINE( 259)			::zpp_nape::phys::ZPP_Body_obj::cur_graph_depth = cur->graph_depth;
HXLINE( 260)			{
HXLINE( 261)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cx_ite) = cur->constraints->head;
HXLINE( 262)				while(hx::IsNotNull( cx_ite )){
HXLINE( 264)					cx_ite->elt->outer->visitBodies(this->connectedBodies_cont_dyn());
HXLINE( 265)					cx_ite = cx_ite->next;
            				}
            			}
            		}
HXLINE( 269)		{
HXLINE( 269)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,_this) = ::zpp_nape::phys::ZPP_Body_obj::bodyset;
HXDLIN( 269)			if (hx::IsNotNull( _this->parent )) {
HXLINE( 269)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur1,"cur") = _this->parent;
HXDLIN( 269)				while(hx::IsNotNull( cur1 )){
HXLINE( 269)					if (hx::IsNotNull( cur1->prev )) {
HXLINE( 269)						cur1 = cur1->prev;
            					}
            					else {
HXLINE( 269)						if (hx::IsNotNull( cur1->next )) {
HXLINE( 269)							cur1 = cur1->next;
            						}
            						else {
HXLINE( 270)							{
HXLINE( 270)								HX_VARI(  ::zpp_nape::phys::ZPP_Body,b) = cur1->data;
HXDLIN( 270)								if (hx::IsNotEq( b,_gthis )) {
HXLINE( 270)									HX_VARI(  ::nape::phys::Body,obj) = b->outer;
HXDLIN( 270)									if (ret->zpp_inner->reverse_flag) {
HXLINE( 270)										ret->push(obj);
            									}
            									else {
HXLINE( 270)										ret->unshift(obj);
            									}
            								}
            							}
HXLINE( 269)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,ret1,"ret") = cur1->parent;
HXDLIN( 269)							if (hx::IsNotNull( ret1 )) {
HXLINE( 269)								if (hx::IsEq( cur1,ret1->prev )) {
HXLINE( 269)									ret1->prev = null();
            								}
            								else {
HXLINE( 269)									ret1->next = null();
            								}
HXDLIN( 269)								cur1->parent = null();
            							}
HXDLIN( 269)							{
HXLINE( 269)								HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,o) = cur1;
HXDLIN( 269)								{
HXLINE( 269)									o->data = null();
HXDLIN( 269)									o->lt = null();
HXDLIN( 269)									o->swapped = null();
            								}
HXDLIN( 269)								o->next = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXDLIN( 269)								::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = o;
            							}
HXDLIN( 269)							cur1 = ret1;
            						}
            					}
            				}
HXDLIN( 269)				_this->parent = null();
            			}
            		}
HXLINE( 272)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Body_obj,connectedBodies,return )

 ::nape::phys::BodyList ZPP_Body_obj::interactingBodies(int arbiter_type,int depth, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_274_interactingBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(arbiter_type,"arbiter_type")
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(output,"output")
HXLINE( 274)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 275)		if (hx::IsNull( ::zpp_nape::phys::ZPP_Body_obj::bodyset )) {
HXLINE( 275)			::zpp_nape::phys::ZPP_Body_obj::bodyset =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
HXDLIN( 275)			::zpp_nape::phys::ZPP_Body_obj::bodyset->lt = ::zpp_nape::phys::ZPP_Body_obj::bodysetlt_dyn();
HXDLIN( 275)			::zpp_nape::phys::ZPP_Body_obj::bodystack =  ::zpp_nape::util::ZNPList_ZPP_Body_obj::__alloc( HX_CTX );
            		}
HXLINE( 276)		HX_VAR(  ::nape::phys::BodyList,ret);
HXDLIN( 276)		if (hx::IsNull( output )) {
HXLINE( 276)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 276)			ret = output;
            		}
HXLINE( 277)		::zpp_nape::phys::ZPP_Body_obj::bodyset->insert(hx::ObjectPtr<OBJ_>(this));
HXLINE( 278)		::zpp_nape::phys::ZPP_Body_obj::bodystack->add(hx::ObjectPtr<OBJ_>(this));
HXLINE( 279)		this->graph_depth = (int)0;
HXLINE( 280)		while(hx::IsNotNull( ::zpp_nape::phys::ZPP_Body_obj::bodystack->head )){
HXLINE( 281)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,cur) = ::zpp_nape::phys::ZPP_Body_obj::bodystack->pop_unsafe();
HXLINE( 282)			if ((cur->graph_depth == depth)) {
HXLINE( 282)				continue;
            			}
HXLINE( 283)			{
HXLINE( 284)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = cur->arbiters->head;
HXLINE( 285)				while(hx::IsNotNull( cx_ite )){
HXLINE( 286)					HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = cx_ite->elt;
HXLINE( 288)					if ((((int)arb->type & (int)arbiter_type) != (int)0)) {
HXLINE( 289)						HX_VAR(  ::zpp_nape::phys::ZPP_Body,other);
HXDLIN( 289)						if (hx::IsEq( arb->b1,cur )) {
HXLINE( 289)							other = arb->b2;
            						}
            						else {
HXLINE( 289)							other = arb->b1;
            						}
HXLINE( 290)						if (::zpp_nape::phys::ZPP_Body_obj::bodyset->try_insert_bool(other)) {
HXLINE( 291)							::zpp_nape::phys::ZPP_Body_obj::bodystack->add(other);
HXLINE( 292)							other->graph_depth = (cur->graph_depth + (int)1);
            						}
            					}
HXLINE( 296)					cx_ite = cx_ite->next;
            				}
            			}
            		}
HXLINE( 300)		{
HXLINE( 300)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,_this) = ::zpp_nape::phys::ZPP_Body_obj::bodyset;
HXDLIN( 300)			if (hx::IsNotNull( _this->parent )) {
HXLINE( 300)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur1,"cur") = _this->parent;
HXDLIN( 300)				while(hx::IsNotNull( cur1 )){
HXLINE( 300)					if (hx::IsNotNull( cur1->prev )) {
HXLINE( 300)						cur1 = cur1->prev;
            					}
            					else {
HXLINE( 300)						if (hx::IsNotNull( cur1->next )) {
HXLINE( 300)							cur1 = cur1->next;
            						}
            						else {
HXLINE( 301)							{
HXLINE( 301)								HX_VARI(  ::zpp_nape::phys::ZPP_Body,b) = cur1->data;
HXDLIN( 301)								if (hx::IsNotEq( b,_gthis )) {
HXLINE( 301)									HX_VARI(  ::nape::phys::Body,obj) = b->outer;
HXDLIN( 301)									if (ret->zpp_inner->reverse_flag) {
HXLINE( 301)										ret->push(obj);
            									}
            									else {
HXLINE( 301)										ret->unshift(obj);
            									}
            								}
            							}
HXLINE( 300)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,ret1,"ret") = cur1->parent;
HXDLIN( 300)							if (hx::IsNotNull( ret1 )) {
HXLINE( 300)								if (hx::IsEq( cur1,ret1->prev )) {
HXLINE( 300)									ret1->prev = null();
            								}
            								else {
HXLINE( 300)									ret1->next = null();
            								}
HXDLIN( 300)								cur1->parent = null();
            							}
HXDLIN( 300)							{
HXLINE( 300)								HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,o) = cur1;
HXDLIN( 300)								{
HXLINE( 300)									o->data = null();
HXDLIN( 300)									o->lt = null();
HXDLIN( 300)									o->swapped = null();
            								}
HXDLIN( 300)								o->next = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXDLIN( 300)								::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = o;
            							}
HXDLIN( 300)							cur1 = ret1;
            						}
            					}
            				}
HXDLIN( 300)				_this->parent = null();
            			}
            		}
HXLINE( 303)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Body_obj,interactingBodies,return )

bool ZPP_Body_obj::atRest(Float dt){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_306_atRest)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dt,"dt")
HXLINE( 306)		if ((this->type != (int)2)) {
HXLINE( 306)			return this->component->sleeping;
            		}
            		else {
HXLINE( 308)			HX_VARI( Float,linSq) = ::nape::Config_obj::linearSleepThreshold;
HXLINE( 309)			linSq = (linSq * linSq);
HXLINE( 310)			HX_VAR( bool,cansleep);
HXDLIN( 310)			if ((((this->velx * this->velx) + (this->vely * this->vely)) > linSq)) {
HXLINE( 310)				cansleep = false;
            			}
            			else {
HXLINE( 311)				HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN( 311)				HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN( 311)				{
HXLINE( 311)					dx = (this->posx - this->pre_posx);
HXDLIN( 311)					dy = (this->posy - this->pre_posy);
            				}
HXDLIN( 311)				if ((((dx * dx) + (dy * dy)) > (((((Float)0.25) * linSq) * dt) * dt))) {
HXLINE( 310)					cansleep = false;
            				}
            				else {
HXLINE( 312)					HX_VARI_NAME( Float,dx1,"dx") = ((Float)0.0);
HXLINE( 313)					HX_VARI_NAME( Float,dy1,"dy") = ((Float)0.0);
HXLINE( 314)					{
HXLINE( 315)						dx1 = (this->aabb->maxx - this->aabb->minx);
HXLINE( 316)						dy1 = (this->aabb->maxy - this->aabb->miny);
            					}
HXLINE( 318)					HX_VARI( Float,idl) = ((dx1 * dx1) + (dy1 * dy1));
HXLINE( 319)					HX_VARI( Float,angSq) = ::nape::Config_obj::angularSleepThreshold;
HXLINE( 320)					angSq = (angSq * angSq);
HXLINE( 321)					if ((((((int)4 * this->angvel) * this->angvel) * idl) > angSq)) {
HXLINE( 310)						cansleep = false;
            					}
            					else {
HXLINE( 322)						HX_VARI( Float,dr) = (this->rot - this->pre_rot);
HXLINE( 323)						if ((((dr * dr) * idl) > ((angSq * dt) * dt))) {
HXLINE( 310)							cansleep = false;
            						}
            						else {
HXLINE( 310)							cansleep = true;
            						}
            					}
            				}
            			}
HXLINE( 326)			if (!(cansleep)) {
HXLINE( 326)				this->component->waket = this->space->stamp;
            			}
HXLINE( 327)			return ((this->component->waket + ::nape::Config_obj::sleepDelay) < this->space->stamp);
            		}
HXLINE( 306)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,atRest,return )

void ZPP_Body_obj::refreshArbiters(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_331_refreshArbiters)
            	HX_STACK_THIS(this)
HXLINE( 332)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = this->arbiters->head;
HXLINE( 333)		while(hx::IsNotNull( cx_ite )){
HXLINE( 335)			cx_ite->elt->invalidated = true;
HXLINE( 336)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,refreshArbiters,(void))

void ZPP_Body_obj::sweepIntegrate(Float dt){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_349_sweepIntegrate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dt,"dt")
HXLINE( 350)		HX_VARI( Float,delta) = (dt - this->sweepTime);
HXLINE( 351)		if ((delta != (int)0)) {
HXLINE( 360)			this->sweepTime = dt;
HXLINE( 361)			{
HXLINE( 371)				 ::zpp_nape::phys::ZPP_Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 371)				_hx_tmp->posx = (_hx_tmp->posx + (this->velx * delta));
HXLINE( 372)				 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 372)				_hx_tmp1->posy = (_hx_tmp1->posy + (this->vely * delta));
            			}
HXLINE( 374)			if ((this->angvel != (int)0)) {
HXLINE( 374)				HX_VARI( Float,dr) = (this->sweep_angvel * delta);
HXDLIN( 374)				 ::zpp_nape::phys::ZPP_Body _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 374)				_hx_tmp2->rot = (_hx_tmp2->rot + dr);
HXDLIN( 374)				if (((dr * dr) > ((Float)0.0001))) {
HXLINE( 374)					this->axisx = ::Math_obj::sin(this->rot);
HXDLIN( 374)					this->axisy = ::Math_obj::cos(this->rot);
            				}
            				else {
HXLINE( 374)					HX_VARI( Float,d2) = (dr * dr);
HXDLIN( 374)					HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN( 374)					HX_VARI( Float,m) = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN( 374)					HX_VARI( Float,nx) = (((p * this->axisx) + (dr * this->axisy)) * m);
HXDLIN( 374)					this->axisy = (((p * this->axisy) - (dr * this->axisx)) * m);
HXDLIN( 374)					this->axisx = nx;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,sweepIntegrate,(void))

void ZPP_Body_obj::sweepValidate( ::zpp_nape::shape::ZPP_Shape s){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_388_sweepValidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 388)		if ((s->type == (int)0)) {
HXLINE( 390)			s->worldCOMx = (this->posx + ((this->axisy * s->localCOMx) - (this->axisx * s->localCOMy)));
HXLINE( 391)			s->worldCOMy = (this->posy + ((s->localCOMx * this->axisx) + (s->localCOMy * this->axisy)));
            		}
            		else {
HXLINE( 395)			HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,p) = s->polygon;
HXLINE( 396)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = p->lverts->next;
HXLINE( 397)			{
HXLINE( 398)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = p->gverts->next;
HXLINE( 399)				while(hx::IsNotNull( cx_ite )){
HXLINE( 400)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite;
HXLINE( 401)					{
HXLINE( 402)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXLINE( 403)						li = li->next;
HXLINE( 404)						{
HXLINE( 405)							g->x = (this->posx + ((this->axisy * l->x) - (this->axisx * l->y)));
HXLINE( 406)							g->y = (this->posy + ((l->x * this->axisx) + (l->y * this->axisy)));
            						}
            					}
HXLINE( 409)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE( 412)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite) = p->edges->head;
HXLINE( 413)			{
HXLINE( 414)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = p->gverts->next;
HXLINE( 415)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXLINE( 416)				cx_ite1 = cx_ite1->next;
HXLINE( 417)				while(hx::IsNotNull( cx_ite1 )){
HXLINE( 418)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXLINE( 419)					{
HXLINE( 420)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = ite->elt;
HXLINE( 421)						ite = ite->next;
HXLINE( 422)						{
HXLINE( 423)							e->gnormx = ((this->axisy * e->lnormx) - (this->axisx * e->lnormy));
HXLINE( 424)							e->gnormy = ((e->lnormx * this->axisx) + (e->lnormy * this->axisy));
            						}
HXLINE( 426)						e->gprojection = (((this->posx * e->gnormx) + (this->posy * e->gnormy)) + e->lprojection);
HXLINE( 427)						e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
HXLINE( 428)						e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
            					}
HXLINE( 430)					u = v;
HXLINE( 431)					cx_ite1 = cx_ite1->next;
            				}
HXLINE( 433)				 ::zpp_nape::geom::ZPP_Vec2 _this = p->gverts->next;
HXLINE( 434)				{
HXLINE( 435)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e1,"e") = ite->elt;
HXLINE( 437)					{
HXLINE( 438)						e1->gnormx = ((this->axisy * e1->lnormx) - (this->axisx * e1->lnormy));
HXLINE( 439)						e1->gnormy = ((e1->lnormx * this->axisx) + (e1->lnormy * this->axisy));
            					}
HXLINE( 441)					e1->gprojection = (((this->posx * e1->gnormx) + (this->posy * e1->gnormy)) + e1->lprojection);
HXLINE( 442)					e1->tp0 = ((u->y * e1->gnormx) - (u->x * e1->gnormy));
HXLINE( 443)					e1->tp1 = ((_this->y * e1->gnormx) - (_this->x * e1->gnormy));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,sweepValidate,(void))

void ZPP_Body_obj::invalidate_pos(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_467_invalidate_pos)
            	HX_STACK_THIS(this)
HXLINE( 468)		{
HXLINE( 469)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE( 470)			while(hx::IsNotNull( cx_ite )){
HXLINE( 471)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXLINE( 472)				{
HXLINE( 473)					if ((s->type == (int)1)) {
HXLINE( 474)						s->polygon->invalidate_gverts();
HXLINE( 475)						s->polygon->invalidate_gaxi();
            					}
HXLINE( 477)					s->invalidate_worldCOM();
            				}
HXLINE( 479)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 482)		this->zip_worldCOM = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_pos,(void))

void ZPP_Body_obj::pos_invalidate( ::zpp_nape::geom::ZPP_Vec2 pos){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_484_pos_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 485)		this->immutable_midstep(HX_("Body::position",ab,00,99,2d));
HXLINE( 489)		bool _hx_tmp;
HXDLIN( 489)		if ((this->posx == pos->x)) {
HXLINE( 489)			_hx_tmp = (this->posy == pos->y);
            		}
            		else {
HXLINE( 489)			_hx_tmp = false;
            		}
HXDLIN( 489)		if (!(_hx_tmp)) {
HXLINE( 490)			{
HXLINE( 491)				this->posx = pos->x;
HXLINE( 492)				this->posy = pos->y;
            			}
HXLINE( 510)			{
HXLINE( 510)				{
HXLINE( 510)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXDLIN( 510)					while(hx::IsNotNull( cx_ite )){
HXLINE( 510)						HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXDLIN( 510)						{
HXLINE( 510)							if ((s->type == (int)1)) {
HXLINE( 510)								s->polygon->invalidate_gverts();
HXDLIN( 510)								s->polygon->invalidate_gaxi();
            							}
HXDLIN( 510)							s->invalidate_worldCOM();
            						}
HXDLIN( 510)						cx_ite = cx_ite->next;
            					}
            				}
HXDLIN( 510)				this->zip_worldCOM = true;
            			}
HXLINE( 511)			this->wake();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,pos_invalidate,(void))

void ZPP_Body_obj::pos_validate(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_515_pos_validate)
            	HX_STACK_THIS(this)
HXLINE( 516)		this->wrap_pos->zpp_inner->x = this->posx;
HXLINE( 517)		this->wrap_pos->zpp_inner->y = this->posy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,pos_validate,(void))

void ZPP_Body_obj::vel_invalidate( ::zpp_nape::geom::ZPP_Vec2 vel){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_536_vel_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vel,"vel")
HXLINE( 540)		{
HXLINE( 541)			this->velx = vel->x;
HXLINE( 542)			this->vely = vel->y;
            		}
HXLINE( 560)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,vel_invalidate,(void))

void ZPP_Body_obj::vel_validate(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_563_vel_validate)
            	HX_STACK_THIS(this)
HXLINE( 564)		this->wrap_vel->zpp_inner->x = this->velx;
HXLINE( 565)		this->wrap_vel->zpp_inner->y = this->vely;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,vel_validate,(void))

void ZPP_Body_obj::kinvel_invalidate( ::zpp_nape::geom::ZPP_Vec2 vel){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_584_kinvel_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vel,"vel")
HXLINE( 585)		{
HXLINE( 586)			this->kinvelx = vel->x;
HXLINE( 587)			this->kinvely = vel->y;
            		}
HXLINE( 605)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,kinvel_invalidate,(void))

void ZPP_Body_obj::kinvel_validate(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_608_kinvel_validate)
            	HX_STACK_THIS(this)
HXLINE( 609)		this->wrap_kinvel->zpp_inner->x = this->kinvelx;
HXLINE( 610)		this->wrap_kinvel->zpp_inner->y = this->kinvely;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,kinvel_validate,(void))

void ZPP_Body_obj::svel_invalidate( ::zpp_nape::geom::ZPP_Vec2 vel){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_629_svel_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vel,"vel")
HXLINE( 630)		{
HXLINE( 631)			this->svelx = vel->x;
HXLINE( 632)			this->svely = vel->y;
            		}
HXLINE( 650)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,svel_invalidate,(void))

void ZPP_Body_obj::svel_validate(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_653_svel_validate)
            	HX_STACK_THIS(this)
HXLINE( 654)		this->wrap_svel->zpp_inner->x = this->svelx;
HXLINE( 655)		this->wrap_svel->zpp_inner->y = this->svely;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,svel_validate,(void))

void ZPP_Body_obj::force_invalidate( ::zpp_nape::geom::ZPP_Vec2 force){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_674_force_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(force,"force")
HXLINE( 678)		{
HXLINE( 679)			this->forcex = force->x;
HXLINE( 680)			this->forcey = force->y;
            		}
HXLINE( 698)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,force_invalidate,(void))

void ZPP_Body_obj::force_validate(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_700_force_validate)
            	HX_STACK_THIS(this)
HXLINE( 701)		this->wrap_force->zpp_inner->x = this->forcex;
HXLINE( 702)		this->wrap_force->zpp_inner->y = this->forcey;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,force_validate,(void))

void ZPP_Body_obj::setupPosition(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_720_setupPosition)
            	HX_STACK_THIS(this)
HXLINE( 721)		HX_VARI( Float,x) = this->posx;
HXDLIN( 721)		HX_VARI( Float,y) = this->posy;
HXDLIN( 721)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 721)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 721)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 721)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 721)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 721)			ret->zpp_pool = null();
            		}
HXDLIN( 721)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 721)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 721)			{
HXLINE( 721)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 721)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 721)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 721)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 721)					ret1->next = null();
            				}
HXDLIN( 721)				ret1->weak = false;
            			}
HXDLIN( 721)			ret1->_immutable = false;
HXDLIN( 721)			{
HXLINE( 721)				ret1->x = x;
HXDLIN( 721)				ret1->y = y;
            			}
HXDLIN( 721)			ret->zpp_inner = ret1;
HXDLIN( 721)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 721)			bool _hx_tmp;
HXDLIN( 721)			{
HXLINE( 721)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 721)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 721)					_this->_validate();
            				}
            			}
HXDLIN( 721)			if ((ret->zpp_inner->x == x)) {
HXLINE( 721)				{
HXLINE( 721)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 721)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 721)						_this1->_validate();
            					}
            				}
HXDLIN( 721)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 721)				_hx_tmp = false;
            			}
HXDLIN( 721)			if (!(_hx_tmp)) {
HXLINE( 721)				{
HXLINE( 721)					ret->zpp_inner->x = x;
HXDLIN( 721)					ret->zpp_inner->y = y;
            				}
HXDLIN( 721)				{
HXLINE( 721)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 721)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 721)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 721)		ret->zpp_inner->weak = false;
HXDLIN( 721)		this->wrap_pos = ret;
HXLINE( 722)		this->wrap_pos->zpp_inner->_inuse = true;
HXLINE( 723)		if (this->world) {
HXLINE( 723)			this->wrap_pos->zpp_inner->_immutable = true;
            		}
            		else {
HXLINE( 725)			this->wrap_pos->zpp_inner->_invalidate = this->pos_invalidate_dyn();
HXLINE( 726)			this->wrap_pos->zpp_inner->_validate = this->pos_validate_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,setupPosition,(void))

void ZPP_Body_obj::setupVelocity(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_729_setupVelocity)
            	HX_STACK_THIS(this)
HXLINE( 730)		HX_VARI( Float,x) = this->velx;
HXDLIN( 730)		HX_VARI( Float,y) = this->vely;
HXDLIN( 730)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 730)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 730)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 730)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 730)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 730)			ret->zpp_pool = null();
            		}
HXDLIN( 730)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 730)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 730)			{
HXLINE( 730)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 730)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 730)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 730)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 730)					ret1->next = null();
            				}
HXDLIN( 730)				ret1->weak = false;
            			}
HXDLIN( 730)			ret1->_immutable = false;
HXDLIN( 730)			{
HXLINE( 730)				ret1->x = x;
HXDLIN( 730)				ret1->y = y;
            			}
HXDLIN( 730)			ret->zpp_inner = ret1;
HXDLIN( 730)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 730)			bool _hx_tmp;
HXDLIN( 730)			{
HXLINE( 730)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 730)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 730)					_this->_validate();
            				}
            			}
HXDLIN( 730)			if ((ret->zpp_inner->x == x)) {
HXLINE( 730)				{
HXLINE( 730)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 730)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 730)						_this1->_validate();
            					}
            				}
HXDLIN( 730)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 730)				_hx_tmp = false;
            			}
HXDLIN( 730)			if (!(_hx_tmp)) {
HXLINE( 730)				{
HXLINE( 730)					ret->zpp_inner->x = x;
HXDLIN( 730)					ret->zpp_inner->y = y;
            				}
HXDLIN( 730)				{
HXLINE( 730)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 730)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 730)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 730)		ret->zpp_inner->weak = false;
HXDLIN( 730)		this->wrap_vel = ret;
HXLINE( 731)		this->wrap_vel->zpp_inner->_inuse = true;
HXLINE( 732)		if (this->world) {
HXLINE( 732)			this->wrap_vel->zpp_inner->_immutable = true;
            		}
            		else {
HXLINE( 734)			this->wrap_vel->zpp_inner->_invalidate = this->vel_invalidate_dyn();
HXLINE( 735)			this->wrap_vel->zpp_inner->_validate = this->vel_validate_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,setupVelocity,(void))

void ZPP_Body_obj::setupkinvel(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_738_setupkinvel)
            	HX_STACK_THIS(this)
HXLINE( 739)		HX_VARI( Float,x) = this->kinvelx;
HXDLIN( 739)		HX_VARI( Float,y) = this->kinvely;
HXDLIN( 739)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 739)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 739)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 739)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 739)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 739)			ret->zpp_pool = null();
            		}
HXDLIN( 739)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 739)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 739)			{
HXLINE( 739)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 739)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 739)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 739)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 739)					ret1->next = null();
            				}
HXDLIN( 739)				ret1->weak = false;
            			}
HXDLIN( 739)			ret1->_immutable = false;
HXDLIN( 739)			{
HXLINE( 739)				ret1->x = x;
HXDLIN( 739)				ret1->y = y;
            			}
HXDLIN( 739)			ret->zpp_inner = ret1;
HXDLIN( 739)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 739)			bool _hx_tmp;
HXDLIN( 739)			{
HXLINE( 739)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 739)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 739)					_this->_validate();
            				}
            			}
HXDLIN( 739)			if ((ret->zpp_inner->x == x)) {
HXLINE( 739)				{
HXLINE( 739)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 739)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 739)						_this1->_validate();
            					}
            				}
HXDLIN( 739)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 739)				_hx_tmp = false;
            			}
HXDLIN( 739)			if (!(_hx_tmp)) {
HXLINE( 739)				{
HXLINE( 739)					ret->zpp_inner->x = x;
HXDLIN( 739)					ret->zpp_inner->y = y;
            				}
HXDLIN( 739)				{
HXLINE( 739)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 739)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 739)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 739)		ret->zpp_inner->weak = false;
HXDLIN( 739)		this->wrap_kinvel = ret;
HXLINE( 740)		this->wrap_kinvel->zpp_inner->_inuse = true;
HXLINE( 741)		if (this->world) {
HXLINE( 741)			this->wrap_kinvel->zpp_inner->_immutable = true;
            		}
            		else {
HXLINE( 743)			this->wrap_kinvel->zpp_inner->_invalidate = this->kinvel_invalidate_dyn();
HXLINE( 744)			this->wrap_kinvel->zpp_inner->_validate = this->kinvel_validate_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,setupkinvel,(void))

void ZPP_Body_obj::setupsvel(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_747_setupsvel)
            	HX_STACK_THIS(this)
HXLINE( 748)		HX_VARI( Float,x) = this->svelx;
HXDLIN( 748)		HX_VARI( Float,y) = this->svely;
HXDLIN( 748)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 748)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 748)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 748)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 748)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 748)			ret->zpp_pool = null();
            		}
HXDLIN( 748)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 748)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 748)			{
HXLINE( 748)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 748)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 748)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 748)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 748)					ret1->next = null();
            				}
HXDLIN( 748)				ret1->weak = false;
            			}
HXDLIN( 748)			ret1->_immutable = false;
HXDLIN( 748)			{
HXLINE( 748)				ret1->x = x;
HXDLIN( 748)				ret1->y = y;
            			}
HXDLIN( 748)			ret->zpp_inner = ret1;
HXDLIN( 748)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 748)			bool _hx_tmp;
HXDLIN( 748)			{
HXLINE( 748)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 748)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 748)					_this->_validate();
            				}
            			}
HXDLIN( 748)			if ((ret->zpp_inner->x == x)) {
HXLINE( 748)				{
HXLINE( 748)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 748)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 748)						_this1->_validate();
            					}
            				}
HXDLIN( 748)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 748)				_hx_tmp = false;
            			}
HXDLIN( 748)			if (!(_hx_tmp)) {
HXLINE( 748)				{
HXLINE( 748)					ret->zpp_inner->x = x;
HXDLIN( 748)					ret->zpp_inner->y = y;
            				}
HXDLIN( 748)				{
HXLINE( 748)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 748)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 748)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 748)		ret->zpp_inner->weak = false;
HXDLIN( 748)		this->wrap_svel = ret;
HXLINE( 749)		this->wrap_svel->zpp_inner->_inuse = true;
HXLINE( 750)		if (this->world) {
HXLINE( 750)			this->wrap_svel->zpp_inner->_immutable = true;
            		}
            		else {
HXLINE( 752)			this->wrap_svel->zpp_inner->_invalidate = this->svel_invalidate_dyn();
HXLINE( 753)			this->wrap_svel->zpp_inner->_validate = this->svel_validate_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,setupsvel,(void))

void ZPP_Body_obj::setupForce(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_756_setupForce)
            	HX_STACK_THIS(this)
HXLINE( 757)		HX_VARI( Float,x) = this->forcex;
HXDLIN( 757)		HX_VARI( Float,y) = this->forcey;
HXDLIN( 757)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 757)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 757)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 757)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 757)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 757)			ret->zpp_pool = null();
            		}
HXDLIN( 757)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 757)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 757)			{
HXLINE( 757)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 757)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 757)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 757)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 757)					ret1->next = null();
            				}
HXDLIN( 757)				ret1->weak = false;
            			}
HXDLIN( 757)			ret1->_immutable = false;
HXDLIN( 757)			{
HXLINE( 757)				ret1->x = x;
HXDLIN( 757)				ret1->y = y;
            			}
HXDLIN( 757)			ret->zpp_inner = ret1;
HXDLIN( 757)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 757)			bool _hx_tmp;
HXDLIN( 757)			{
HXLINE( 757)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 757)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 757)					_this->_validate();
            				}
            			}
HXDLIN( 757)			if ((ret->zpp_inner->x == x)) {
HXLINE( 757)				{
HXLINE( 757)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 757)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 757)						_this1->_validate();
            					}
            				}
HXDLIN( 757)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 757)				_hx_tmp = false;
            			}
HXDLIN( 757)			if (!(_hx_tmp)) {
HXLINE( 757)				{
HXLINE( 757)					ret->zpp_inner->x = x;
HXDLIN( 757)					ret->zpp_inner->y = y;
            				}
HXDLIN( 757)				{
HXLINE( 757)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 757)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 757)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 757)		ret->zpp_inner->weak = false;
HXDLIN( 757)		this->wrap_force = ret;
HXLINE( 758)		this->wrap_force->zpp_inner->_inuse = true;
HXLINE( 759)		if (this->world) {
HXLINE( 759)			this->wrap_force->zpp_inner->_immutable = true;
            		}
            		else {
HXLINE( 761)			this->wrap_force->zpp_inner->_invalidate = this->force_invalidate_dyn();
HXLINE( 762)			this->wrap_force->zpp_inner->_validate = this->force_validate_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,setupForce,(void))

void ZPP_Body_obj::cvel_validate(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_765_cvel_validate)
            	HX_STACK_THIS(this)
HXLINE( 766)		this->wrapcvel->zpp_inner->x = (this->velx + this->kinvelx);
HXLINE( 767)		this->wrapcvel->zpp_inner->y = (this->vely + this->kinvely);
HXLINE( 768)		this->wrapcvel->zpp_inner->z = (this->angvel + this->kinangvel);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,cvel_validate,(void))

void ZPP_Body_obj::setup_cvel(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_771_setup_cvel)
            	HX_STACK_THIS(this)
HXLINE( 773)		this->wrapcvel = ::nape::geom::Vec3_obj::get(null(),null(),null());
HXLINE( 774)		this->wrapcvel->zpp_inner->immutable = true;
HXLINE( 775)		this->wrapcvel->zpp_inner->_validate = this->cvel_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,setup_cvel,(void))

void ZPP_Body_obj::invalidate_rot(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_784_invalidate_rot)
            	HX_STACK_THIS(this)
HXLINE( 785)		this->zip_axis = true;
HXLINE( 786)		{
HXLINE( 787)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE( 788)			while(hx::IsNotNull( cx_ite )){
HXLINE( 789)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXLINE( 790)				{
HXLINE( 791)					if ((s->type == (int)1)) {
HXLINE( 792)						s->polygon->invalidate_gverts();
HXLINE( 793)						s->polygon->invalidate_gaxi();
            					}
HXLINE( 795)					s->invalidate_worldCOM();
            				}
HXLINE( 797)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 800)		this->zip_worldCOM = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_rot,(void))

void ZPP_Body_obj::validate_axis(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_807_validate_axis)
            	HX_STACK_THIS(this)
HXLINE( 807)		if (this->zip_axis) {
HXLINE( 808)			this->zip_axis = false;
HXLINE( 809)			{
HXLINE( 809)				this->axisx = ::Math_obj::sin(this->rot);
HXDLIN( 809)				this->axisy = ::Math_obj::cos(this->rot);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_axis,(void))

void ZPP_Body_obj::quick_validate_axis(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_815_quick_validate_axis)
            	HX_STACK_THIS(this)
HXLINE( 816)		this->axisx = ::Math_obj::sin(this->rot);
HXLINE( 817)		this->axisy = ::Math_obj::cos(this->rot);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,quick_validate_axis,(void))

void ZPP_Body_obj::delta_rot(Float dr){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_838_delta_rot)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dr,"dr")
HXLINE( 839)		 ::zpp_nape::phys::ZPP_Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 839)		_hx_tmp->rot = (_hx_tmp->rot + dr);
HXLINE( 840)		if (((dr * dr) > ((Float)0.0001))) {
HXLINE( 840)			this->axisx = ::Math_obj::sin(this->rot);
HXDLIN( 840)			this->axisy = ::Math_obj::cos(this->rot);
            		}
            		else {
HXLINE( 842)			HX_VARI( Float,d2) = (dr * dr);
HXLINE( 843)			HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXLINE( 844)			HX_VARI( Float,m) = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXLINE( 845)			HX_VARI( Float,nx) = (((p * this->axisx) + (dr * this->axisy)) * m);
HXLINE( 846)			this->axisy = (((p * this->axisy) - (dr * this->axisx)) * m);
HXLINE( 847)			this->axisx = nx;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,delta_rot,(void))

void ZPP_Body_obj::invalidate_mass(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_858_invalidate_mass)
            	HX_STACK_THIS(this)
HXLINE( 859)		this->zip_mass = true;
HXLINE( 860)		this->invalidate_gravMass();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_mass,(void))

void ZPP_Body_obj::validate_mass(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_862_validate_mass)
            	HX_STACK_THIS(this)
HXLINE( 864)		bool _hx_tmp;
HXDLIN( 864)		if (!(this->zip_mass)) {
HXLINE( 864)			if ((this->massMode == (int)0)) {
HXLINE( 864)				_hx_tmp = false;
            			}
            			else {
HXLINE( 864)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 864)			_hx_tmp = true;
            		}
HXDLIN( 864)		if (_hx_tmp) {
HXLINE( 865)			this->zip_mass = false;
HXLINE( 866)			if ((this->massMode == (int)0)) {
HXLINE( 867)				this->cmass = (int)0;
HXLINE( 868)				{
HXLINE( 869)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE( 870)					while(hx::IsNotNull( cx_ite )){
HXLINE( 871)						HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXLINE( 872)						{
HXLINE( 873)							s->refmaterial->density = s->material->density;
HXLINE( 874)							s->validate_area_inertia();
HXLINE( 875)							 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 875)							_hx_tmp1->cmass = (_hx_tmp1->cmass + (s->area * s->material->density));
            						}
HXLINE( 877)						cx_ite = cx_ite->next;
            					}
            				}
            			}
HXLINE( 881)			bool _hx_tmp2;
HXDLIN( 881)			if ((this->type == (int)2)) {
HXLINE( 881)				_hx_tmp2 = !(this->nomove);
            			}
            			else {
HXLINE( 881)				_hx_tmp2 = false;
            			}
HXDLIN( 881)			if (_hx_tmp2) {
HXLINE( 882)				this->mass = this->cmass;
HXLINE( 883)				this->imass = (this->smass = ((Float)((Float)1.0) / (Float)this->mass));
            			}
            			else {
HXLINE( 886)				this->mass = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 887)				this->imass = (this->smass = ((Float)0.0));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_mass,(void))

void ZPP_Body_obj::invalidate_gravMass(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_897_invalidate_gravMass)
            	HX_STACK_THIS(this)
HXLINE( 898)		if ((this->gravMassMode != (int)1)) {
HXLINE( 898)			this->zip_gravMass = true;
            		}
HXLINE( 899)		if ((this->gravMassMode != (int)2)) {
HXLINE( 899)			this->zip_gravMassScale = true;
            		}
HXLINE( 900)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_gravMass,(void))

void ZPP_Body_obj::validate_gravMass(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_903_validate_gravMass)
            	HX_STACK_THIS(this)
HXLINE( 903)		if (this->zip_gravMass) {
HXLINE( 904)			this->zip_gravMass = false;
HXLINE( 905)			this->validate_mass();
HXLINE( 906)			if ((this->gravMassMode == (int)0)) {
HXLINE( 907)				this->validate_mass();
HXLINE( 908)				this->gravMass = this->cmass;
            			}
            			else {
HXLINE( 910)				if ((this->gravMassMode == (int)2)) {
HXLINE( 911)					this->validate_mass();
HXLINE( 912)					this->gravMass = (this->cmass * this->gravMassScale);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_gravMass,(void))

void ZPP_Body_obj::invalidate_gravMassScale(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_917_invalidate_gravMassScale)
            	HX_STACK_THIS(this)
HXLINE( 917)		if ((this->gravMassMode != (int)2)) {
HXLINE( 917)			this->zip_gravMassScale = true;
            		}
            		else {
HXLINE( 918)			this->invalidate_gravMass();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_gravMassScale,(void))

void ZPP_Body_obj::validate_gravMassScale(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_921_validate_gravMassScale)
            	HX_STACK_THIS(this)
HXLINE( 921)		if (this->zip_gravMassScale) {
HXLINE( 922)			this->zip_gravMassScale = false;
HXLINE( 923)			if ((this->gravMassMode == (int)0)) {
HXLINE( 923)				this->gravMassScale = ((Float)1.0);
            			}
            			else {
HXLINE( 924)				if ((this->gravMassMode == (int)1)) {
HXLINE( 925)					this->validate_mass();
HXLINE( 926)					this->gravMassScale = ((Float)this->gravMass / (Float)this->cmass);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_gravMassScale,(void))

void ZPP_Body_obj::invalidate_inertia(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_937_invalidate_inertia)
            	HX_STACK_THIS(this)
HXLINE( 938)		this->zip_inertia = true;
HXLINE( 939)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_inertia,(void))

void ZPP_Body_obj::validate_inertia(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_941_validate_inertia)
            	HX_STACK_THIS(this)
HXLINE( 943)		bool _hx_tmp;
HXDLIN( 943)		if (!(this->zip_inertia)) {
HXLINE( 943)			if ((this->inertiaMode == (int)0)) {
HXLINE( 943)				_hx_tmp = false;
            			}
            			else {
HXLINE( 943)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 943)			_hx_tmp = true;
            		}
HXDLIN( 943)		if (_hx_tmp) {
HXLINE( 944)			this->zip_inertia = false;
HXLINE( 945)			if ((this->inertiaMode == (int)0)) {
HXLINE( 946)				this->cinertia = (int)0;
HXLINE( 947)				{
HXLINE( 948)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE( 949)					while(hx::IsNotNull( cx_ite )){
HXLINE( 950)						HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXLINE( 951)						{
HXLINE( 952)							s->refmaterial->density = s->material->density;
HXLINE( 953)							s->validate_area_inertia();
HXLINE( 954)							 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 954)							_hx_tmp1->cinertia = (_hx_tmp1->cinertia + ((s->inertia * s->area) * s->material->density));
            						}
HXLINE( 956)						cx_ite = cx_ite->next;
            					}
            				}
            			}
HXLINE( 960)			bool _hx_tmp2;
HXDLIN( 960)			if ((this->type == (int)2)) {
HXLINE( 960)				_hx_tmp2 = !(this->norotate);
            			}
            			else {
HXLINE( 960)				_hx_tmp2 = false;
            			}
HXDLIN( 960)			if (_hx_tmp2) {
HXLINE( 961)				this->inertia = this->cinertia;
HXLINE( 962)				this->sinertia = (this->iinertia = ((Float)((Float)1.0) / (Float)this->inertia));
            			}
            			else {
HXLINE( 965)				this->inertia = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 966)				this->sinertia = (this->iinertia = (int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_inertia,(void))

void ZPP_Body_obj::invalidate_wake(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_974_invalidate_wake)
            	HX_STACK_THIS(this)
HXLINE( 974)		this->wake();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_wake,(void))

void ZPP_Body_obj::validate_aabb(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_983_validate_aabb)
            	HX_STACK_THIS(this)
HXLINE( 983)		if (this->zip_aabb) {
HXLINE( 984)			this->zip_aabb = false;
HXLINE( 985)			{
HXLINE( 986)				this->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 987)				this->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
            			}
HXLINE(1005)			{
HXLINE(1006)				this->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(1007)				this->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
            			}
HXLINE(1025)			{
HXLINE(1026)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE(1027)				while(hx::IsNotNull( cx_ite )){
HXLINE(1028)					HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXLINE(1029)					{
HXLINE(1030)						if (s->zip_aabb) {
HXLINE(1030)							if (hx::IsNotNull( s->body )) {
HXLINE(1030)								s->zip_aabb = false;
HXDLIN(1030)								if ((s->type == (int)0)) {
HXLINE(1030)									HX_VARI(  ::zpp_nape::shape::ZPP_Circle,_this) = s->circle;
HXDLIN(1030)									if (_this->zip_worldCOM) {
HXLINE(1030)										if (hx::IsNotNull( _this->body )) {
HXLINE(1030)											_this->zip_worldCOM = false;
HXDLIN(1030)											if (_this->zip_localCOM) {
HXLINE(1030)												_this->zip_localCOM = false;
HXDLIN(1030)												if ((_this->type == (int)1)) {
HXLINE(1030)													HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this1,"_this") = _this->polygon;
HXDLIN(1030)													if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE(1030)														_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(1030)														_this1->localCOMy = _this1->lverts->next->y;
            													}
            													else {
HXLINE(1030)														if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE(1030)															{
HXLINE(1030)																_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(1030)																_this1->localCOMy = _this1->lverts->next->y;
            															}
HXDLIN(1030)															{
HXLINE(1030)																_this1->localCOMx = (_this1->localCOMx + _this1->lverts->next->next->x);
HXDLIN(1030)																_this1->localCOMy = (_this1->localCOMy + _this1->lverts->next->next->y);
            															}
HXDLIN(1030)															{
HXLINE(1030)																_this1->localCOMx = (_this1->localCOMx * ((Float)0.5));
HXDLIN(1030)																_this1->localCOMy = (_this1->localCOMy * ((Float)0.5));
            															}
            														}
            														else {
HXLINE(1030)															{
HXLINE(1030)																_this1->localCOMx = (int)0;
HXDLIN(1030)																_this1->localCOMy = (int)0;
            															}
HXDLIN(1030)															HX_VARI( Float,area) = ((Float)0.0);
HXDLIN(1030)															{
HXLINE(1030)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this1->lverts->next;
HXDLIN(1030)																HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN(1030)																cx_ite1 = cx_ite1->next;
HXDLIN(1030)																HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN(1030)																cx_ite1 = cx_ite1->next;
HXDLIN(1030)																while(hx::IsNotNull( cx_ite1 )){
HXLINE(1030)																	HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite1;
HXDLIN(1030)																	{
HXLINE(1030)																		area = (area + (v->x * (w->y - u->y)));
HXDLIN(1030)																		HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN(1030)																		_this1->localCOMx = (_this1->localCOMx + ((v->x + w->x) * cf));
HXDLIN(1030)																		_this1->localCOMy = (_this1->localCOMy + ((v->y + w->y) * cf));
            																	}
HXDLIN(1030)																	u = v;
HXDLIN(1030)																	v = w;
HXDLIN(1030)																	cx_ite1 = cx_ite1->next;
            																}
HXDLIN(1030)																cx_ite1 = _this1->lverts->next;
HXDLIN(1030)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite1;
HXDLIN(1030)																{
HXLINE(1030)																	area = (area + (v->x * (w1->y - u->y)));
HXDLIN(1030)																	HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(1030)																	_this1->localCOMx = (_this1->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(1030)																	_this1->localCOMy = (_this1->localCOMy + ((v->y + w1->y) * cf1));
            																}
HXDLIN(1030)																u = v;
HXDLIN(1030)																cx_ite1 = cx_ite1->next;
HXDLIN(1030)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite1;
HXDLIN(1030)																{
HXLINE(1030)																	area = (area + (w1->x * (w2->y - u->y)));
HXDLIN(1030)																	HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN(1030)																	_this1->localCOMx = (_this1->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN(1030)																	_this1->localCOMy = (_this1->localCOMy + ((w1->y + w2->y) * cf2));
            																}
            															}
HXDLIN(1030)															area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN(1030)															{
HXLINE(1030)																HX_VARI( Float,t) = area;
HXDLIN(1030)																_this1->localCOMx = (_this1->localCOMx * t);
HXDLIN(1030)																_this1->localCOMy = (_this1->localCOMy * t);
            															}
            														}
            													}
            												}
HXDLIN(1030)												if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE(1030)													_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN(1030)													_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            												}
            											}
HXDLIN(1030)											{
HXLINE(1030)												HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN(1030)												if (_this2->zip_axis) {
HXLINE(1030)													_this2->zip_axis = false;
HXDLIN(1030)													{
HXLINE(1030)														_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(1030)														_this2->axisy = ::Math_obj::cos(_this2->rot);
            													}
            												}
            											}
HXDLIN(1030)											{
HXLINE(1030)												_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(1030)												_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            											}
            										}
            									}
HXDLIN(1030)									HX_VARI( Float,rx) = _this->radius;
HXDLIN(1030)									HX_VARI( Float,ry) = _this->radius;
HXDLIN(1030)									{
HXLINE(1030)										_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN(1030)										_this->aabb->miny = (_this->worldCOMy - ry);
            									}
HXDLIN(1030)									{
HXLINE(1030)										_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN(1030)										_this->aabb->maxy = (_this->worldCOMy + ry);
            									}
            								}
            								else {
HXLINE(1030)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this3,"_this") = s->polygon;
HXDLIN(1030)									if (_this3->zip_gverts) {
HXLINE(1030)										if (hx::IsNotNull( _this3->body )) {
HXLINE(1030)											_this3->zip_gverts = false;
HXDLIN(1030)											_this3->validate_lverts();
HXDLIN(1030)											{
HXLINE(1030)												HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this4,"_this") = _this3->body;
HXDLIN(1030)												if (_this4->zip_axis) {
HXLINE(1030)													_this4->zip_axis = false;
HXDLIN(1030)													{
HXLINE(1030)														_this4->axisx = ::Math_obj::sin(_this4->rot);
HXDLIN(1030)														_this4->axisy = ::Math_obj::cos(_this4->rot);
            													}
            												}
            											}
HXDLIN(1030)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this3->lverts->next;
HXDLIN(1030)											{
HXLINE(1030)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this3->gverts->next;
HXDLIN(1030)												while(hx::IsNotNull( cx_ite2 )){
HXLINE(1030)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite2;
HXDLIN(1030)													{
HXLINE(1030)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN(1030)														li = li->next;
HXDLIN(1030)														{
HXLINE(1030)															g->x = (_this3->body->posx + ((_this3->body->axisy * l->x) - (_this3->body->axisx * l->y)));
HXDLIN(1030)															g->y = (_this3->body->posy + ((l->x * _this3->body->axisx) + (l->y * _this3->body->axisy)));
            														}
            													}
HXDLIN(1030)													cx_ite2 = cx_ite2->next;
            												}
            											}
            										}
            									}
HXDLIN(1030)									 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this3->gverts->next;
HXDLIN(1030)									{
HXLINE(1030)										_this3->aabb->minx = _this5->x;
HXDLIN(1030)										_this3->aabb->miny = _this5->y;
            									}
HXDLIN(1030)									{
HXLINE(1030)										_this3->aabb->maxx = _this5->x;
HXDLIN(1030)										_this3->aabb->maxy = _this5->y;
            									}
HXDLIN(1030)									{
HXLINE(1030)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = _this3->gverts->next->next;
HXDLIN(1030)										while(hx::IsNotNull( cx_ite3 )){
HXLINE(1030)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite3;
HXDLIN(1030)											{
HXLINE(1030)												if ((p->x < _this3->aabb->minx)) {
HXLINE(1030)													_this3->aabb->minx = p->x;
            												}
HXDLIN(1030)												if ((p->x > _this3->aabb->maxx)) {
HXLINE(1030)													_this3->aabb->maxx = p->x;
            												}
HXDLIN(1030)												if ((p->y < _this3->aabb->miny)) {
HXLINE(1030)													_this3->aabb->miny = p->y;
            												}
HXDLIN(1030)												if ((p->y > _this3->aabb->maxy)) {
HXLINE(1030)													_this3->aabb->maxy = p->y;
            												}
            											}
HXDLIN(1030)											cx_ite3 = cx_ite3->next;
            										}
            									}
            								}
            							}
            						}
HXLINE(1031)						{
HXLINE(1031)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = this->aabb;
HXDLIN(1031)							HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = s->aabb;
HXDLIN(1031)							if ((x->minx < _this6->minx)) {
HXLINE(1031)								_this6->minx = x->minx;
            							}
HXDLIN(1031)							if ((x->maxx > _this6->maxx)) {
HXLINE(1031)								_this6->maxx = x->maxx;
            							}
HXDLIN(1031)							if ((x->miny < _this6->miny)) {
HXLINE(1031)								_this6->miny = x->miny;
            							}
HXDLIN(1031)							if ((x->maxy > _this6->maxy)) {
HXLINE(1031)								_this6->maxy = x->maxy;
            							}
            						}
            					}
HXLINE(1033)					cx_ite = cx_ite->next;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_aabb,(void))

void ZPP_Body_obj::invalidate_aabb(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1041_invalidate_aabb)
            	HX_STACK_THIS(this)
HXLINE(1041)		this->zip_aabb = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_aabb,(void))

void ZPP_Body_obj::invalidate_localCOM(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1053_invalidate_localCOM)
            	HX_STACK_THIS(this)
HXLINE(1054)		this->zip_localCOM = true;
HXLINE(1055)		this->zip_worldCOM = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_localCOM,(void))

void ZPP_Body_obj::invalidate_worldCOM(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1060_invalidate_worldCOM)
            	HX_STACK_THIS(this)
HXLINE(1060)		this->zip_worldCOM = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,invalidate_worldCOM,(void))

void ZPP_Body_obj::validate_localCOM(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1063_validate_localCOM)
            	HX_STACK_THIS(this)
HXLINE(1063)		if (this->zip_localCOM) {
HXLINE(1064)			this->zip_localCOM = false;
HXLINE(1065)			HX_VARI( Float,tempx) = (int)0;
HXLINE(1066)			HX_VARI( Float,tempy) = (int)0;
HXLINE(1083)			HX_VARI( Float,msum) = ((Float)0.0);
HXLINE(1084)			{
HXLINE(1085)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE(1086)				while(hx::IsNotNull( cx_ite )){
HXLINE(1087)					HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXLINE(1088)					{
HXLINE(1089)						if (s->zip_localCOM) {
HXLINE(1089)							s->zip_localCOM = false;
HXDLIN(1089)							if ((s->type == (int)1)) {
HXLINE(1089)								HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,_this) = s->polygon;
HXDLIN(1089)								if (hx::IsNull( _this->lverts->next->next )) {
HXLINE(1089)									_this->localCOMx = _this->lverts->next->x;
HXDLIN(1089)									_this->localCOMy = _this->lverts->next->y;
            								}
            								else {
HXLINE(1089)									if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE(1089)										{
HXLINE(1089)											_this->localCOMx = _this->lverts->next->x;
HXDLIN(1089)											_this->localCOMy = _this->lverts->next->y;
            										}
HXDLIN(1089)										{
HXLINE(1089)											_this->localCOMx = (_this->localCOMx + _this->lverts->next->next->x);
HXDLIN(1089)											_this->localCOMy = (_this->localCOMy + _this->lverts->next->next->y);
            										}
HXDLIN(1089)										{
HXLINE(1089)											_this->localCOMx = (_this->localCOMx * ((Float)0.5));
HXDLIN(1089)											_this->localCOMy = (_this->localCOMy * ((Float)0.5));
            										}
            									}
            									else {
HXLINE(1089)										{
HXLINE(1089)											_this->localCOMx = (int)0;
HXDLIN(1089)											_this->localCOMy = (int)0;
            										}
HXDLIN(1089)										HX_VARI( Float,area) = ((Float)0.0);
HXDLIN(1089)										{
HXLINE(1089)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this->lverts->next;
HXDLIN(1089)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN(1089)											cx_ite1 = cx_ite1->next;
HXDLIN(1089)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN(1089)											cx_ite1 = cx_ite1->next;
HXDLIN(1089)											while(hx::IsNotNull( cx_ite1 )){
HXLINE(1089)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite1;
HXDLIN(1089)												{
HXLINE(1089)													area = (area + (v->x * (w->y - u->y)));
HXDLIN(1089)													HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN(1089)													_this->localCOMx = (_this->localCOMx + ((v->x + w->x) * cf));
HXDLIN(1089)													_this->localCOMy = (_this->localCOMy + ((v->y + w->y) * cf));
            												}
HXDLIN(1089)												u = v;
HXDLIN(1089)												v = w;
HXDLIN(1089)												cx_ite1 = cx_ite1->next;
            											}
HXDLIN(1089)											cx_ite1 = _this->lverts->next;
HXDLIN(1089)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite1;
HXDLIN(1089)											{
HXLINE(1089)												area = (area + (v->x * (w1->y - u->y)));
HXDLIN(1089)												HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(1089)												_this->localCOMx = (_this->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(1089)												_this->localCOMy = (_this->localCOMy + ((v->y + w1->y) * cf1));
            											}
HXDLIN(1089)											u = v;
HXDLIN(1089)											cx_ite1 = cx_ite1->next;
HXDLIN(1089)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite1;
HXDLIN(1089)											{
HXLINE(1089)												area = (area + (w1->x * (w2->y - u->y)));
HXDLIN(1089)												HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN(1089)												_this->localCOMx = (_this->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN(1089)												_this->localCOMy = (_this->localCOMy + ((w1->y + w2->y) * cf2));
            											}
            										}
HXDLIN(1089)										area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN(1089)										{
HXLINE(1089)											HX_VARI( Float,t) = area;
HXDLIN(1089)											_this->localCOMx = (_this->localCOMx * t);
HXDLIN(1089)											_this->localCOMy = (_this->localCOMy * t);
            										}
            									}
            								}
            							}
HXDLIN(1089)							if (hx::IsNotNull( s->wrap_localCOM )) {
HXLINE(1089)								s->wrap_localCOM->zpp_inner->x = s->localCOMx;
HXDLIN(1089)								s->wrap_localCOM->zpp_inner->y = s->localCOMy;
            							}
            						}
HXLINE(1090)						s->validate_area_inertia();
HXLINE(1091)						{
HXLINE(1092)							HX_VARI_NAME( Float,t1,"t") = (s->area * s->material->density);
HXLINE(1101)							tempx = (tempx + (s->localCOMx * t1));
HXLINE(1102)							tempy = (tempy + (s->localCOMy * t1));
            						}
HXLINE(1104)						msum = (msum + (s->area * s->material->density));
            					}
HXLINE(1106)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(1109)			if ((msum != (int)0)) {
HXLINE(1111)				HX_VARI_NAME( Float,t2,"t") = ((Float)((Float)1.0) / (Float)msum);
HXLINE(1120)				this->localCOMx = (tempx * t2);
HXLINE(1121)				this->localCOMy = (tempy * t2);
            			}
HXLINE(1124)			if (hx::IsNotNull( this->wrap_localCOM )) {
HXLINE(1125)				this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXLINE(1126)				this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            			}
HXLINE(1144)			bool _hx_tmp;
HXDLIN(1144)			if (this->zip_mass) {
HXLINE(1144)				_hx_tmp = (this->massMode == (int)0);
            			}
            			else {
HXLINE(1144)				_hx_tmp = false;
            			}
HXDLIN(1144)			if (_hx_tmp) {
HXLINE(1145)				this->zip_mass = false;
HXLINE(1146)				this->cmass = msum;
HXLINE(1147)				if ((this->type == (int)2)) {
HXLINE(1148)					this->mass = this->cmass;
HXLINE(1149)					this->imass = (this->smass = ((Float)((Float)1.0) / (Float)this->mass));
            				}
            				else {
HXLINE(1152)					this->mass = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1153)					this->imass = (this->smass = ((Float)0.0));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_localCOM,(void))

void ZPP_Body_obj::validate_worldCOM(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1159_validate_worldCOM)
            	HX_STACK_THIS(this)
HXLINE(1159)		if (this->zip_worldCOM) {
HXLINE(1160)			this->zip_worldCOM = false;
HXLINE(1161)			this->validate_localCOM();
HXLINE(1162)			if (this->zip_axis) {
HXLINE(1162)				this->zip_axis = false;
HXDLIN(1162)				{
HXLINE(1162)					this->axisx = ::Math_obj::sin(this->rot);
HXDLIN(1162)					this->axisy = ::Math_obj::cos(this->rot);
            				}
            			}
HXLINE(1163)			{
HXLINE(1164)				this->worldCOMx = (this->posx + ((this->axisy * this->localCOMx) - (this->axisx * this->localCOMy)));
HXLINE(1165)				this->worldCOMy = (this->posy + ((this->localCOMx * this->axisx) + (this->localCOMy * this->axisy)));
            			}
HXLINE(1167)			if (hx::IsNotNull( this->wrap_worldCOM )) {
HXLINE(1168)				this->wrap_worldCOM->zpp_inner->x = this->worldCOMx;
HXLINE(1169)				this->wrap_worldCOM->zpp_inner->y = this->worldCOMy;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,validate_worldCOM,(void))

void ZPP_Body_obj::getlocalCOM(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1193_getlocalCOM)
            	HX_STACK_THIS(this)
HXLINE(1193)		this->validate_localCOM();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,getlocalCOM,(void))

void ZPP_Body_obj::getworldCOM(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1199_getworldCOM)
            	HX_STACK_THIS(this)
HXLINE(1199)		this->validate_worldCOM();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,getworldCOM,(void))

void ZPP_Body_obj::_hx___immutable_midstep(::String name){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1203___immutable_midstep)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,_hx___immutable_midstep,(void))

void ZPP_Body_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1208_clear)
            	HX_STACK_THIS(this)
HXLINE(1216)		while(hx::IsNotNull( this->shapes->head )){
HXLINE(1220)			this->shapes->pop_unsafe()->body = null();
            		}
HXLINE(1224)		this->invalidate_shapes();
HXLINE(1225)		{
HXLINE(1226)			this->pre_posx = (int)0;
HXLINE(1227)			this->pre_posy = (int)0;
            		}
HXLINE(1245)		{
HXLINE(1246)			this->posx = (int)0;
HXLINE(1247)			this->posy = (int)0;
            		}
HXLINE(1265)		{
HXLINE(1266)			this->velx = (int)0;
HXLINE(1267)			this->vely = (int)0;
            		}
HXLINE(1285)		{
HXLINE(1286)			this->forcex = (int)0;
HXLINE(1287)			this->forcey = (int)0;
            		}
HXLINE(1305)		{
HXLINE(1306)			this->kinvelx = (int)0;
HXLINE(1307)			this->kinvely = (int)0;
            		}
HXLINE(1325)		{
HXLINE(1326)			this->svelx = (int)0;
HXLINE(1327)			this->svely = (int)0;
            		}
HXLINE(1345)		this->angvel = (this->torque = (this->kinangvel = (this->pre_rot = (this->rot = (int)0))));
HXLINE(1346)		{
HXLINE(1346)			{
HXLINE(1346)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXDLIN(1346)				while(hx::IsNotNull( cx_ite )){
HXLINE(1346)					HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXDLIN(1346)					{
HXLINE(1346)						if ((s->type == (int)1)) {
HXLINE(1346)							s->polygon->invalidate_gverts();
HXDLIN(1346)							s->polygon->invalidate_gaxi();
            						}
HXDLIN(1346)						s->invalidate_worldCOM();
            					}
HXDLIN(1346)					cx_ite = cx_ite->next;
            				}
            			}
HXDLIN(1346)			this->zip_worldCOM = true;
            		}
HXLINE(1347)		{
HXLINE(1347)			this->zip_axis = true;
HXDLIN(1347)			{
HXLINE(1347)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite1,"cx_ite") = this->shapes->head;
HXDLIN(1347)				while(hx::IsNotNull( cx_ite1 )){
HXLINE(1347)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s1,"s") = cx_ite1->elt;
HXDLIN(1347)					{
HXLINE(1347)						if ((s1->type == (int)1)) {
HXLINE(1347)							s1->polygon->invalidate_gverts();
HXDLIN(1347)							s1->polygon->invalidate_gaxi();
            						}
HXDLIN(1347)						s1->invalidate_worldCOM();
            					}
HXDLIN(1347)					cx_ite1 = cx_ite1->next;
            				}
            			}
HXDLIN(1347)			this->zip_worldCOM = true;
            		}
HXLINE(1348)		{
HXLINE(1349)			this->axisx = (int)0;
HXLINE(1350)			this->axisy = (int)1;
            		}
HXLINE(1368)		this->zip_axis = false;
HXLINE(1369)		this->massMode = (int)0;
HXLINE(1370)		this->gravMassMode = (int)0;
HXLINE(1371)		this->gravMassScale = ((Float)1.0);
HXLINE(1372)		this->inertiaMode = (int)0;
HXLINE(1373)		this->norotate = false;
HXLINE(1374)		this->nomove = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,clear,(void))

void ZPP_Body_obj::aabb_validate(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1390_aabb_validate)
            	HX_STACK_THIS(this)
HXLINE(1390)		if (this->zip_aabb) {
HXLINE(1390)			this->zip_aabb = false;
HXDLIN(1390)			{
HXLINE(1390)				this->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(1390)				this->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
            			}
HXDLIN(1390)			{
HXLINE(1390)				this->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(1390)				this->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
            			}
HXDLIN(1390)			{
HXLINE(1390)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXDLIN(1390)				while(hx::IsNotNull( cx_ite )){
HXLINE(1390)					HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXDLIN(1390)					{
HXLINE(1390)						if (s->zip_aabb) {
HXLINE(1390)							if (hx::IsNotNull( s->body )) {
HXLINE(1390)								s->zip_aabb = false;
HXDLIN(1390)								if ((s->type == (int)0)) {
HXLINE(1390)									HX_VARI(  ::zpp_nape::shape::ZPP_Circle,_this) = s->circle;
HXDLIN(1390)									if (_this->zip_worldCOM) {
HXLINE(1390)										if (hx::IsNotNull( _this->body )) {
HXLINE(1390)											_this->zip_worldCOM = false;
HXDLIN(1390)											if (_this->zip_localCOM) {
HXLINE(1390)												_this->zip_localCOM = false;
HXDLIN(1390)												if ((_this->type == (int)1)) {
HXLINE(1390)													HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this1,"_this") = _this->polygon;
HXDLIN(1390)													if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE(1390)														_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(1390)														_this1->localCOMy = _this1->lverts->next->y;
            													}
            													else {
HXLINE(1390)														if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE(1390)															{
HXLINE(1390)																_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(1390)																_this1->localCOMy = _this1->lverts->next->y;
            															}
HXDLIN(1390)															{
HXLINE(1390)																_this1->localCOMx = (_this1->localCOMx + _this1->lverts->next->next->x);
HXDLIN(1390)																_this1->localCOMy = (_this1->localCOMy + _this1->lverts->next->next->y);
            															}
HXDLIN(1390)															{
HXLINE(1390)																_this1->localCOMx = (_this1->localCOMx * ((Float)0.5));
HXDLIN(1390)																_this1->localCOMy = (_this1->localCOMy * ((Float)0.5));
            															}
            														}
            														else {
HXLINE(1390)															{
HXLINE(1390)																_this1->localCOMx = (int)0;
HXDLIN(1390)																_this1->localCOMy = (int)0;
            															}
HXDLIN(1390)															HX_VARI( Float,area) = ((Float)0.0);
HXDLIN(1390)															{
HXLINE(1390)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this1->lverts->next;
HXDLIN(1390)																HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN(1390)																cx_ite1 = cx_ite1->next;
HXDLIN(1390)																HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN(1390)																cx_ite1 = cx_ite1->next;
HXDLIN(1390)																while(hx::IsNotNull( cx_ite1 )){
HXLINE(1390)																	HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite1;
HXDLIN(1390)																	{
HXLINE(1390)																		area = (area + (v->x * (w->y - u->y)));
HXDLIN(1390)																		HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN(1390)																		_this1->localCOMx = (_this1->localCOMx + ((v->x + w->x) * cf));
HXDLIN(1390)																		_this1->localCOMy = (_this1->localCOMy + ((v->y + w->y) * cf));
            																	}
HXDLIN(1390)																	u = v;
HXDLIN(1390)																	v = w;
HXDLIN(1390)																	cx_ite1 = cx_ite1->next;
            																}
HXDLIN(1390)																cx_ite1 = _this1->lverts->next;
HXDLIN(1390)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite1;
HXDLIN(1390)																{
HXLINE(1390)																	area = (area + (v->x * (w1->y - u->y)));
HXDLIN(1390)																	HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN(1390)																	_this1->localCOMx = (_this1->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN(1390)																	_this1->localCOMy = (_this1->localCOMy + ((v->y + w1->y) * cf1));
            																}
HXDLIN(1390)																u = v;
HXDLIN(1390)																cx_ite1 = cx_ite1->next;
HXDLIN(1390)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite1;
HXDLIN(1390)																{
HXLINE(1390)																	area = (area + (w1->x * (w2->y - u->y)));
HXDLIN(1390)																	HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN(1390)																	_this1->localCOMx = (_this1->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN(1390)																	_this1->localCOMy = (_this1->localCOMy + ((w1->y + w2->y) * cf2));
            																}
            															}
HXDLIN(1390)															area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN(1390)															{
HXLINE(1390)																HX_VARI( Float,t) = area;
HXDLIN(1390)																_this1->localCOMx = (_this1->localCOMx * t);
HXDLIN(1390)																_this1->localCOMy = (_this1->localCOMy * t);
            															}
            														}
            													}
            												}
HXDLIN(1390)												if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE(1390)													_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN(1390)													_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            												}
            											}
HXDLIN(1390)											{
HXLINE(1390)												HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN(1390)												if (_this2->zip_axis) {
HXLINE(1390)													_this2->zip_axis = false;
HXDLIN(1390)													{
HXLINE(1390)														_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(1390)														_this2->axisy = ::Math_obj::cos(_this2->rot);
            													}
            												}
            											}
HXDLIN(1390)											{
HXLINE(1390)												_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(1390)												_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            											}
            										}
            									}
HXDLIN(1390)									HX_VARI( Float,rx) = _this->radius;
HXDLIN(1390)									HX_VARI( Float,ry) = _this->radius;
HXDLIN(1390)									{
HXLINE(1390)										_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN(1390)										_this->aabb->miny = (_this->worldCOMy - ry);
            									}
HXDLIN(1390)									{
HXLINE(1390)										_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN(1390)										_this->aabb->maxy = (_this->worldCOMy + ry);
            									}
            								}
            								else {
HXLINE(1390)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this3,"_this") = s->polygon;
HXDLIN(1390)									if (_this3->zip_gverts) {
HXLINE(1390)										if (hx::IsNotNull( _this3->body )) {
HXLINE(1390)											_this3->zip_gverts = false;
HXDLIN(1390)											_this3->validate_lverts();
HXDLIN(1390)											{
HXLINE(1390)												HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this4,"_this") = _this3->body;
HXDLIN(1390)												if (_this4->zip_axis) {
HXLINE(1390)													_this4->zip_axis = false;
HXDLIN(1390)													{
HXLINE(1390)														_this4->axisx = ::Math_obj::sin(_this4->rot);
HXDLIN(1390)														_this4->axisy = ::Math_obj::cos(_this4->rot);
            													}
            												}
            											}
HXDLIN(1390)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this3->lverts->next;
HXDLIN(1390)											{
HXLINE(1390)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this3->gverts->next;
HXDLIN(1390)												while(hx::IsNotNull( cx_ite2 )){
HXLINE(1390)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite2;
HXDLIN(1390)													{
HXLINE(1390)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN(1390)														li = li->next;
HXDLIN(1390)														{
HXLINE(1390)															g->x = (_this3->body->posx + ((_this3->body->axisy * l->x) - (_this3->body->axisx * l->y)));
HXDLIN(1390)															g->y = (_this3->body->posy + ((l->x * _this3->body->axisx) + (l->y * _this3->body->axisy)));
            														}
            													}
HXDLIN(1390)													cx_ite2 = cx_ite2->next;
            												}
            											}
            										}
            									}
HXDLIN(1390)									 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this3->gverts->next;
HXDLIN(1390)									{
HXLINE(1390)										_this3->aabb->minx = _this5->x;
HXDLIN(1390)										_this3->aabb->miny = _this5->y;
            									}
HXDLIN(1390)									{
HXLINE(1390)										_this3->aabb->maxx = _this5->x;
HXDLIN(1390)										_this3->aabb->maxy = _this5->y;
            									}
HXDLIN(1390)									{
HXLINE(1390)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = _this3->gverts->next->next;
HXDLIN(1390)										while(hx::IsNotNull( cx_ite3 )){
HXLINE(1390)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite3;
HXDLIN(1390)											{
HXLINE(1390)												if ((p->x < _this3->aabb->minx)) {
HXLINE(1390)													_this3->aabb->minx = p->x;
            												}
HXDLIN(1390)												if ((p->x > _this3->aabb->maxx)) {
HXLINE(1390)													_this3->aabb->maxx = p->x;
            												}
HXDLIN(1390)												if ((p->y < _this3->aabb->miny)) {
HXLINE(1390)													_this3->aabb->miny = p->y;
            												}
HXDLIN(1390)												if ((p->y > _this3->aabb->maxy)) {
HXLINE(1390)													_this3->aabb->maxy = p->y;
            												}
            											}
HXDLIN(1390)											cx_ite3 = cx_ite3->next;
            										}
            									}
            								}
            							}
            						}
HXDLIN(1390)						{
HXLINE(1390)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = this->aabb;
HXDLIN(1390)							HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = s->aabb;
HXDLIN(1390)							if ((x->minx < _this6->minx)) {
HXLINE(1390)								_this6->minx = x->minx;
            							}
HXDLIN(1390)							if ((x->maxx > _this6->maxx)) {
HXLINE(1390)								_this6->maxx = x->maxx;
            							}
HXDLIN(1390)							if ((x->miny < _this6->miny)) {
HXLINE(1390)								_this6->miny = x->miny;
            							}
HXDLIN(1390)							if ((x->maxy > _this6->maxy)) {
HXLINE(1390)								_this6->maxy = x->maxy;
            							}
            						}
            					}
HXDLIN(1390)					cx_ite = cx_ite->next;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,aabb_validate,(void))

bool ZPP_Body_obj::shapes_adder( ::nape::shape::Shape s){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1393_shapes_adder)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(1393)		if (hx::IsNotEq( s->zpp_inner->body,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1394)			if (hx::IsNotNull( s->zpp_inner->body )) {
HXLINE(1394)				s->zpp_inner->body->wrap_shapes->remove(s);
            			}
HXLINE(1395)			s->zpp_inner->body = hx::ObjectPtr<OBJ_>(this);
HXLINE(1396)			s->zpp_inner->addedToBody();
HXLINE(1397)			if (hx::IsNotNull( this->space )) {
HXLINE(1397)				HX_VARI(  ::zpp_nape::space::ZPP_Space,_this) = this->space;
HXDLIN(1397)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s1,"s") = s->zpp_inner;
HXDLIN(1397)				{
HXLINE(1397)					HX_VARI(  ::zpp_nape::phys::ZPP_Body,o) = s1->body;
HXDLIN(1397)					if (!(o->world)) {
HXLINE(1397)						int _hx_tmp;
HXDLIN(1397)						if (_this->midstep) {
HXLINE(1397)							_hx_tmp = (int)0;
            						}
            						else {
HXLINE(1397)							_hx_tmp = (int)1;
            						}
HXDLIN(1397)						o->component->waket = (_this->stamp + _hx_tmp);
HXDLIN(1397)						if ((o->type == (int)3)) {
HXLINE(1397)							o->kinematicDelaySleep = true;
            						}
HXDLIN(1397)						if (o->component->sleeping) {
HXLINE(1397)							_this->really_wake(o,false);
            						}
            					}
            				}
HXDLIN(1397)				_this->bphase->insert(s1);
HXDLIN(1397)				s1->addedToSpace();
            			}
HXLINE(1398)			if ((s->zpp_inner->type == (int)1)) {
HXLINE(1399)				s->zpp_inner->polygon->invalidate_gaxi();
HXLINE(1400)				s->zpp_inner->polygon->invalidate_gverts();
            			}
HXLINE(1402)			return true;
            		}
            		else {
HXLINE(1404)			return false;
            		}
HXLINE(1393)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,shapes_adder,return )

void ZPP_Body_obj::shapes_subber( ::nape::shape::Shape s){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1406_shapes_subber)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(1407)		if (hx::IsNotNull( this->space )) {
HXLINE(1407)			this->space->removed_shape(s->zpp_inner,null());
            		}
HXLINE(1408)		s->zpp_inner->body = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,shapes_subber,(void))

void ZPP_Body_obj::shapes_invalidate( ::zpp_nape::util::ZPP_ShapeList _){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1412_shapes_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE(1412)		this->invalidate_shapes();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Body_obj,shapes_invalidate,(void))

void ZPP_Body_obj::addedToSpace(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1633_addedToSpace)
            	HX_STACK_THIS(this)
HXLINE(1643)		if (hx::IsNull( ::zpp_nape::space::ZPP_Component_obj::zpp_pool )) {
HXLINE(1644)			this->component =  ::zpp_nape::space::ZPP_Component_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1650)			this->component = ::zpp_nape::space::ZPP_Component_obj::zpp_pool;
HXLINE(1651)			::zpp_nape::space::ZPP_Component_obj::zpp_pool = this->component->next;
HXLINE(1652)			this->component->next = null();
            		}
HXLINE(1659)		this->component->isBody = true;
HXLINE(1660)		this->component->body = hx::ObjectPtr<OBJ_>(this);
HXLINE(1661)		this->_hx___iaddedToSpace();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,addedToSpace,(void))

void ZPP_Body_obj::removedFromSpace(){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1663_removedFromSpace)
            	HX_STACK_THIS(this)
HXLINE(1664)		while(hx::IsNotNull( this->arbiters->head )){
HXLINE(1665)			HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = this->arbiters->pop_unsafe();
HXLINE(1666)			{
HXLINE(1666)				 ::zpp_nape::space::ZPP_Space s = this->space;
HXDLIN(1666)				arb->cleared = true;
HXDLIN(1666)				if (hx::IsEq( arb->b2,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1666)					HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = arb->b1->arbiters;
HXDLIN(1666)					{
HXLINE(1666)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN(1666)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = _this->head;
HXDLIN(1666)						while(hx::IsNotNull( cur )){
HXLINE(1666)							if (hx::IsEq( cur->elt,arb )) {
HXLINE(1666)								{
HXLINE(1666)									HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN(1666)									HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN(1666)									if (hx::IsNull( pre )) {
HXLINE(1666)										old = _this->head;
HXDLIN(1666)										ret = old->next;
HXDLIN(1666)										_this->head = ret;
HXDLIN(1666)										if (hx::IsNull( _this->head )) {
HXLINE(1666)											_this->pushmod = true;
            										}
            									}
            									else {
HXLINE(1666)										old = pre->next;
HXDLIN(1666)										ret = old->next;
HXDLIN(1666)										pre->next = ret;
HXDLIN(1666)										if (hx::IsNull( ret )) {
HXLINE(1666)											_this->pushmod = true;
            										}
            									}
HXDLIN(1666)									{
HXLINE(1666)										HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN(1666)										o->elt = null();
HXDLIN(1666)										o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1666)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            									}
HXDLIN(1666)									_this->modified = true;
HXDLIN(1666)									_this->length--;
HXDLIN(1666)									_this->pushmod = true;
            								}
HXDLIN(1666)								goto _hx_goto_88;
            							}
HXDLIN(1666)							pre = cur;
HXDLIN(1666)							cur = cur->next;
            						}
            						_hx_goto_88:;
            					}
            				}
HXDLIN(1666)				if (hx::IsEq( arb->b1,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1666)					HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this1,"_this") = arb->b2->arbiters;
HXDLIN(1666)					{
HXLINE(1666)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre1,"pre") = null();
HXDLIN(1666)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur1,"cur") = _this1->head;
HXDLIN(1666)						while(hx::IsNotNull( cur1 )){
HXLINE(1666)							if (hx::IsEq( cur1->elt,arb )) {
HXLINE(1666)								{
HXLINE(1666)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old1,"old");
HXDLIN(1666)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN(1666)									if (hx::IsNull( pre1 )) {
HXLINE(1666)										old1 = _this1->head;
HXDLIN(1666)										ret1 = old1->next;
HXDLIN(1666)										_this1->head = ret1;
HXDLIN(1666)										if (hx::IsNull( _this1->head )) {
HXLINE(1666)											_this1->pushmod = true;
            										}
            									}
            									else {
HXLINE(1666)										old1 = pre1->next;
HXDLIN(1666)										ret1 = old1->next;
HXDLIN(1666)										pre1->next = ret1;
HXDLIN(1666)										if (hx::IsNull( ret1 )) {
HXLINE(1666)											_this1->pushmod = true;
            										}
            									}
HXDLIN(1666)									{
HXLINE(1666)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o1,"o") = old1;
HXDLIN(1666)										o1->elt = null();
HXDLIN(1666)										o1->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1666)										::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o1;
            									}
HXDLIN(1666)									_this1->modified = true;
HXDLIN(1666)									_this1->length--;
HXDLIN(1666)									_this1->pushmod = true;
            								}
HXDLIN(1666)								goto _hx_goto_89;
            							}
HXDLIN(1666)							pre1 = cur1;
HXDLIN(1666)							cur1 = cur1->next;
            						}
            						_hx_goto_89:;
            					}
            				}
HXDLIN(1666)				if (hx::IsNotNull( arb->pair )) {
HXLINE(1666)					arb->pair->arb = null();
HXDLIN(1666)					arb->pair = null();
            				}
HXDLIN(1666)				arb->active = false;
HXDLIN(1666)				s->f_arbiters->modified = true;
            			}
            		}
HXLINE(1668)		{
HXLINE(1669)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,o2,"o") = this->component;
HXLINE(1678)			{
HXLINE(1678)				o2->body = null();
HXDLIN(1678)				o2->constraint = null();
            			}
HXLINE(1679)			o2->next = ::zpp_nape::space::ZPP_Component_obj::zpp_pool;
HXLINE(1680)			::zpp_nape::space::ZPP_Component_obj::zpp_pool = o2;
            		}
HXLINE(1685)		this->component = null();
HXLINE(1686)		this->_hx___iremovedFromSpace();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,removedFromSpace,(void))

 ::nape::phys::Body ZPP_Body_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1688_copy)
            	HX_STACK_THIS(this)
HXLINE(1689)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,ret) =  ::nape::phys::Body_obj::__alloc( HX_CTX ,null(),null())->zpp_inner;
HXLINE(1690)		ret->type = this->type;
HXLINE(1691)		ret->bulletEnabled = this->bulletEnabled;
HXLINE(1692)		ret->disableCCD = this->disableCCD;
HXLINE(1693)		{
HXLINE(1694)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE(1695)			while(hx::IsNotNull( cx_ite )){
HXLINE(1698)				{
HXLINE(1698)					HX_VARI(  ::nape::shape::ShapeList,_this) = ret->outer->zpp_inner->wrap_shapes;
HXDLIN(1698)					HX_VARI(  ::nape::shape::Shape,obj) = cx_ite->elt->outer->copy();
HXDLIN(1698)					if (_this->zpp_inner->reverse_flag) {
HXLINE(1698)						_this->push(obj);
            					}
            					else {
HXLINE(1698)						_this->unshift(obj);
            					}
            				}
HXLINE(1700)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1703)		{
HXLINE(1704)			ret->posx = this->posx;
HXLINE(1705)			ret->posy = this->posy;
            		}
HXLINE(1723)		{
HXLINE(1724)			ret->velx = this->velx;
HXLINE(1725)			ret->vely = this->vely;
            		}
HXLINE(1743)		{
HXLINE(1744)			ret->forcex = this->forcex;
HXLINE(1745)			ret->forcey = this->forcey;
            		}
HXLINE(1763)		ret->rot = this->rot;
HXLINE(1764)		ret->angvel = this->angvel;
HXLINE(1765)		ret->torque = this->torque;
HXLINE(1766)		{
HXLINE(1767)			ret->kinvelx = this->kinvelx;
HXLINE(1768)			ret->kinvely = this->kinvely;
            		}
HXLINE(1786)		ret->kinangvel = this->kinangvel;
HXLINE(1787)		{
HXLINE(1788)			ret->svelx = this->svelx;
HXLINE(1789)			ret->svely = this->svely;
            		}
HXLINE(1807)		if (!(this->zip_axis)) {
HXLINE(1808)			ret->axisx = this->axisx;
HXLINE(1809)			ret->axisy = this->axisy;
            		}
            		else {
HXLINE(1827)			ret->zip_axis = true;
HXDLIN(1827)			{
HXLINE(1827)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite1,"cx_ite") = ret->shapes->head;
HXDLIN(1827)				while(hx::IsNotNull( cx_ite1 )){
HXLINE(1827)					HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite1->elt;
HXDLIN(1827)					{
HXLINE(1827)						if ((s->type == (int)1)) {
HXLINE(1827)							s->polygon->invalidate_gverts();
HXDLIN(1827)							s->polygon->invalidate_gaxi();
            						}
HXDLIN(1827)						s->invalidate_worldCOM();
            					}
HXDLIN(1827)					cx_ite1 = cx_ite1->next;
            				}
            			}
HXDLIN(1827)			ret->zip_worldCOM = true;
            		}
HXLINE(1828)		ret->rot = this->rot;
HXLINE(1829)		ret->massMode = this->massMode;
HXLINE(1830)		ret->gravMassMode = this->gravMassMode;
HXLINE(1831)		ret->inertiaMode = this->inertiaMode;
HXLINE(1832)		ret->norotate = this->norotate;
HXLINE(1833)		ret->nomove = this->nomove;
HXLINE(1834)		ret->cmass = this->cmass;
HXLINE(1835)		ret->cinertia = this->cinertia;
HXLINE(1836)		if (!(this->zip_mass)) {
HXLINE(1836)			ret->mass = this->mass;
            		}
            		else {
HXLINE(1837)			ret->invalidate_mass();
            		}
HXLINE(1838)		if (!(this->zip_gravMass)) {
HXLINE(1838)			ret->gravMass = this->gravMass;
            		}
            		else {
HXLINE(1839)			ret->invalidate_gravMass();
            		}
HXLINE(1840)		if (!(this->zip_gravMassScale)) {
HXLINE(1840)			ret->gravMassScale = this->gravMassScale;
            		}
            		else {
HXLINE(1841)			ret->invalidate_gravMassScale();
            		}
HXLINE(1842)		if (!(this->zip_inertia)) {
HXLINE(1842)			ret->inertia = this->inertia;
            		}
            		else {
HXLINE(1843)			ret->invalidate_inertia();
            		}
HXLINE(1844)		if (!(this->zip_aabb)) {
HXLINE(1845)			{
HXLINE(1846)				ret->aabb->minx = this->aabb->minx;
HXLINE(1847)				ret->aabb->miny = this->aabb->miny;
            			}
HXLINE(1865)			{
HXLINE(1866)				ret->aabb->maxx = this->aabb->maxx;
HXLINE(1867)				ret->aabb->maxy = this->aabb->maxy;
            			}
            		}
            		else {
HXLINE(1886)			ret->zip_aabb = true;
            		}
HXLINE(1887)		if (!(this->zip_localCOM)) {
HXLINE(1888)			ret->localCOMx = this->localCOMx;
HXLINE(1889)			ret->localCOMy = this->localCOMy;
            		}
            		else {
HXLINE(1907)			ret->zip_localCOM = true;
HXDLIN(1907)			ret->zip_worldCOM = true;
            		}
HXLINE(1908)		if (!(this->zip_worldCOM)) {
HXLINE(1909)			ret->worldCOMx = this->worldCOMx;
HXLINE(1910)			ret->worldCOMy = this->worldCOMy;
            		}
            		else {
HXLINE(1928)			ret->zip_worldCOM = true;
            		}
HXLINE(1929)		this->copyto(ret->outer);
HXLINE(1930)		return ret->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,copy,return )

::Array< ::Dynamic> ZPP_Body_obj::types;

 ::zpp_nape::util::ZNPList_ZPP_Body ZPP_Body_obj::bodystack;

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Body_obj::bodyset;

bool ZPP_Body_obj::bodysetlt( ::zpp_nape::phys::ZPP_Body a, ::zpp_nape::phys::ZPP_Body b){
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_216_bodysetlt)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 216)		return (a->id < b->id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Body_obj,bodysetlt,return )

int ZPP_Body_obj::cur_graph_depth;

 ::nape::phys::Body ZPP_Body_obj::_hx___static(){
            	HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_1376___static)
HXLINE(1377)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE(1377)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1377)			::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN(1377)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1377)		HX_VARI(  ::nape::phys::Body,ret) =  ::nape::phys::Body_obj::__alloc( HX_CTX ,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC,null());
HXLINE(1378)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,si) = ret->zpp_inner;
HXLINE(1379)		si->world = true;
HXLINE(1380)		si->wrap_shapes->zpp_inner->immutable = true;
HXLINE(1381)		si->smass = (si->imass = (si->cmass = (si->mass = (si->gravMass = ((Float)0.0)))));
HXLINE(1382)		si->sinertia = (si->iinertia = (si->cinertia = (si->inertia = ((Float)0.0))));
HXLINE(1383)		si->cbTypes->clear();
HXLINE(1384)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ZPP_Body_obj,_hx___static,return )


hx::ObjectPtr< ZPP_Body_obj > ZPP_Body_obj::__new() {
	hx::ObjectPtr< ZPP_Body_obj > __this = new ZPP_Body_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Body_obj > ZPP_Body_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Body_obj *__this = (ZPP_Body_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Body_obj), true, "zpp_nape.phys.ZPP_Body"));
	*(void **)__this = ZPP_Body_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Body_obj::ZPP_Body_obj()
{
}

void ZPP_Body_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Body);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(compound,"compound");
	HX_MARK_MEMBER_NAME(shapes,"shapes");
	HX_MARK_MEMBER_NAME(wrap_shapes,"wrap_shapes");
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(arbiters,"arbiters");
	HX_MARK_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_MARK_MEMBER_NAME(component,"component");
	HX_MARK_MEMBER_NAME(graph_depth,"graph_depth");
	HX_MARK_MEMBER_NAME(sweepTime,"sweepTime");
	HX_MARK_MEMBER_NAME(sweep_angvel,"sweep_angvel");
	HX_MARK_MEMBER_NAME(sweepFrozen,"sweepFrozen");
	HX_MARK_MEMBER_NAME(sweepRadius,"sweepRadius");
	HX_MARK_MEMBER_NAME(bullet,"bullet");
	HX_MARK_MEMBER_NAME(bulletEnabled,"bulletEnabled");
	HX_MARK_MEMBER_NAME(disableCCD,"disableCCD");
	HX_MARK_MEMBER_NAME(pre_posx,"pre_posx");
	HX_MARK_MEMBER_NAME(pre_posy,"pre_posy");
	HX_MARK_MEMBER_NAME(posx,"posx");
	HX_MARK_MEMBER_NAME(posy,"posy");
	HX_MARK_MEMBER_NAME(wrap_pos,"wrap_pos");
	HX_MARK_MEMBER_NAME(velx,"velx");
	HX_MARK_MEMBER_NAME(vely,"vely");
	HX_MARK_MEMBER_NAME(wrap_vel,"wrap_vel");
	HX_MARK_MEMBER_NAME(forcex,"forcex");
	HX_MARK_MEMBER_NAME(forcey,"forcey");
	HX_MARK_MEMBER_NAME(wrap_force,"wrap_force");
	HX_MARK_MEMBER_NAME(kinvelx,"kinvelx");
	HX_MARK_MEMBER_NAME(kinvely,"kinvely");
	HX_MARK_MEMBER_NAME(wrap_kinvel,"wrap_kinvel");
	HX_MARK_MEMBER_NAME(svelx,"svelx");
	HX_MARK_MEMBER_NAME(svely,"svely");
	HX_MARK_MEMBER_NAME(wrap_svel,"wrap_svel");
	HX_MARK_MEMBER_NAME(wrapcvel,"wrapcvel");
	HX_MARK_MEMBER_NAME(angvel,"angvel");
	HX_MARK_MEMBER_NAME(torque,"torque");
	HX_MARK_MEMBER_NAME(kinangvel,"kinangvel");
	HX_MARK_MEMBER_NAME(pre_rot,"pre_rot");
	HX_MARK_MEMBER_NAME(rot,"rot");
	HX_MARK_MEMBER_NAME(axisx,"axisx");
	HX_MARK_MEMBER_NAME(axisy,"axisy");
	HX_MARK_MEMBER_NAME(zip_axis,"zip_axis");
	HX_MARK_MEMBER_NAME(kinematicDelaySleep,"kinematicDelaySleep");
	HX_MARK_MEMBER_NAME(mass,"mass");
	HX_MARK_MEMBER_NAME(zip_mass,"zip_mass");
	HX_MARK_MEMBER_NAME(massMode,"massMode");
	HX_MARK_MEMBER_NAME(imass,"imass");
	HX_MARK_MEMBER_NAME(smass,"smass");
	HX_MARK_MEMBER_NAME(cmass,"cmass");
	HX_MARK_MEMBER_NAME(nomove,"nomove");
	HX_MARK_MEMBER_NAME(gravMass,"gravMass");
	HX_MARK_MEMBER_NAME(zip_gravMass,"zip_gravMass");
	HX_MARK_MEMBER_NAME(gravMassMode,"gravMassMode");
	HX_MARK_MEMBER_NAME(gravMassScale,"gravMassScale");
	HX_MARK_MEMBER_NAME(zip_gravMassScale,"zip_gravMassScale");
	HX_MARK_MEMBER_NAME(inertiaMode,"inertiaMode");
	HX_MARK_MEMBER_NAME(inertia,"inertia");
	HX_MARK_MEMBER_NAME(zip_inertia,"zip_inertia");
	HX_MARK_MEMBER_NAME(cinertia,"cinertia");
	HX_MARK_MEMBER_NAME(iinertia,"iinertia");
	HX_MARK_MEMBER_NAME(sinertia,"sinertia");
	HX_MARK_MEMBER_NAME(norotate,"norotate");
	HX_MARK_MEMBER_NAME(aabb,"aabb");
	HX_MARK_MEMBER_NAME(zip_aabb,"zip_aabb");
	HX_MARK_MEMBER_NAME(localCOMx,"localCOMx");
	HX_MARK_MEMBER_NAME(localCOMy,"localCOMy");
	HX_MARK_MEMBER_NAME(zip_localCOM,"zip_localCOM");
	HX_MARK_MEMBER_NAME(worldCOMx,"worldCOMx");
	HX_MARK_MEMBER_NAME(worldCOMy,"worldCOMy");
	HX_MARK_MEMBER_NAME(zip_worldCOM,"zip_worldCOM");
	HX_MARK_MEMBER_NAME(wrap_localCOM,"wrap_localCOM");
	HX_MARK_MEMBER_NAME(wrap_worldCOM,"wrap_worldCOM");
	 ::zpp_nape::phys::ZPP_Interactor_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_Body_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(compound,"compound");
	HX_VISIT_MEMBER_NAME(shapes,"shapes");
	HX_VISIT_MEMBER_NAME(wrap_shapes,"wrap_shapes");
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(arbiters,"arbiters");
	HX_VISIT_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_VISIT_MEMBER_NAME(component,"component");
	HX_VISIT_MEMBER_NAME(graph_depth,"graph_depth");
	HX_VISIT_MEMBER_NAME(sweepTime,"sweepTime");
	HX_VISIT_MEMBER_NAME(sweep_angvel,"sweep_angvel");
	HX_VISIT_MEMBER_NAME(sweepFrozen,"sweepFrozen");
	HX_VISIT_MEMBER_NAME(sweepRadius,"sweepRadius");
	HX_VISIT_MEMBER_NAME(bullet,"bullet");
	HX_VISIT_MEMBER_NAME(bulletEnabled,"bulletEnabled");
	HX_VISIT_MEMBER_NAME(disableCCD,"disableCCD");
	HX_VISIT_MEMBER_NAME(pre_posx,"pre_posx");
	HX_VISIT_MEMBER_NAME(pre_posy,"pre_posy");
	HX_VISIT_MEMBER_NAME(posx,"posx");
	HX_VISIT_MEMBER_NAME(posy,"posy");
	HX_VISIT_MEMBER_NAME(wrap_pos,"wrap_pos");
	HX_VISIT_MEMBER_NAME(velx,"velx");
	HX_VISIT_MEMBER_NAME(vely,"vely");
	HX_VISIT_MEMBER_NAME(wrap_vel,"wrap_vel");
	HX_VISIT_MEMBER_NAME(forcex,"forcex");
	HX_VISIT_MEMBER_NAME(forcey,"forcey");
	HX_VISIT_MEMBER_NAME(wrap_force,"wrap_force");
	HX_VISIT_MEMBER_NAME(kinvelx,"kinvelx");
	HX_VISIT_MEMBER_NAME(kinvely,"kinvely");
	HX_VISIT_MEMBER_NAME(wrap_kinvel,"wrap_kinvel");
	HX_VISIT_MEMBER_NAME(svelx,"svelx");
	HX_VISIT_MEMBER_NAME(svely,"svely");
	HX_VISIT_MEMBER_NAME(wrap_svel,"wrap_svel");
	HX_VISIT_MEMBER_NAME(wrapcvel,"wrapcvel");
	HX_VISIT_MEMBER_NAME(angvel,"angvel");
	HX_VISIT_MEMBER_NAME(torque,"torque");
	HX_VISIT_MEMBER_NAME(kinangvel,"kinangvel");
	HX_VISIT_MEMBER_NAME(pre_rot,"pre_rot");
	HX_VISIT_MEMBER_NAME(rot,"rot");
	HX_VISIT_MEMBER_NAME(axisx,"axisx");
	HX_VISIT_MEMBER_NAME(axisy,"axisy");
	HX_VISIT_MEMBER_NAME(zip_axis,"zip_axis");
	HX_VISIT_MEMBER_NAME(kinematicDelaySleep,"kinematicDelaySleep");
	HX_VISIT_MEMBER_NAME(mass,"mass");
	HX_VISIT_MEMBER_NAME(zip_mass,"zip_mass");
	HX_VISIT_MEMBER_NAME(massMode,"massMode");
	HX_VISIT_MEMBER_NAME(imass,"imass");
	HX_VISIT_MEMBER_NAME(smass,"smass");
	HX_VISIT_MEMBER_NAME(cmass,"cmass");
	HX_VISIT_MEMBER_NAME(nomove,"nomove");
	HX_VISIT_MEMBER_NAME(gravMass,"gravMass");
	HX_VISIT_MEMBER_NAME(zip_gravMass,"zip_gravMass");
	HX_VISIT_MEMBER_NAME(gravMassMode,"gravMassMode");
	HX_VISIT_MEMBER_NAME(gravMassScale,"gravMassScale");
	HX_VISIT_MEMBER_NAME(zip_gravMassScale,"zip_gravMassScale");
	HX_VISIT_MEMBER_NAME(inertiaMode,"inertiaMode");
	HX_VISIT_MEMBER_NAME(inertia,"inertia");
	HX_VISIT_MEMBER_NAME(zip_inertia,"zip_inertia");
	HX_VISIT_MEMBER_NAME(cinertia,"cinertia");
	HX_VISIT_MEMBER_NAME(iinertia,"iinertia");
	HX_VISIT_MEMBER_NAME(sinertia,"sinertia");
	HX_VISIT_MEMBER_NAME(norotate,"norotate");
	HX_VISIT_MEMBER_NAME(aabb,"aabb");
	HX_VISIT_MEMBER_NAME(zip_aabb,"zip_aabb");
	HX_VISIT_MEMBER_NAME(localCOMx,"localCOMx");
	HX_VISIT_MEMBER_NAME(localCOMy,"localCOMy");
	HX_VISIT_MEMBER_NAME(zip_localCOM,"zip_localCOM");
	HX_VISIT_MEMBER_NAME(worldCOMx,"worldCOMx");
	HX_VISIT_MEMBER_NAME(worldCOMy,"worldCOMy");
	HX_VISIT_MEMBER_NAME(zip_worldCOM,"zip_worldCOM");
	HX_VISIT_MEMBER_NAME(wrap_localCOM,"wrap_localCOM");
	HX_VISIT_MEMBER_NAME(wrap_worldCOM,"wrap_worldCOM");
	 ::zpp_nape::phys::ZPP_Interactor_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_Body_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"rot") ) { return hx::Val( rot); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"posx") ) { return hx::Val( posx); }
		if (HX_FIELD_EQ(inName,"posy") ) { return hx::Val( posy); }
		if (HX_FIELD_EQ(inName,"velx") ) { return hx::Val( velx); }
		if (HX_FIELD_EQ(inName,"vely") ) { return hx::Val( vely); }
		if (HX_FIELD_EQ(inName,"mass") ) { return hx::Val( mass); }
		if (HX_FIELD_EQ(inName,"aabb") ) { return hx::Val( aabb); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world); }
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space); }
		if (HX_FIELD_EQ(inName,"svelx") ) { return hx::Val( svelx); }
		if (HX_FIELD_EQ(inName,"svely") ) { return hx::Val( svely); }
		if (HX_FIELD_EQ(inName,"axisx") ) { return hx::Val( axisx); }
		if (HX_FIELD_EQ(inName,"axisy") ) { return hx::Val( axisy); }
		if (HX_FIELD_EQ(inName,"imass") ) { return hx::Val( imass); }
		if (HX_FIELD_EQ(inName,"smass") ) { return hx::Val( smass); }
		if (HX_FIELD_EQ(inName,"cmass") ) { return hx::Val( cmass); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { return hx::Val( shapes); }
		if (HX_FIELD_EQ(inName,"atRest") ) { return hx::Val( atRest_dyn()); }
		if (HX_FIELD_EQ(inName,"bullet") ) { return hx::Val( bullet); }
		if (HX_FIELD_EQ(inName,"forcex") ) { return hx::Val( forcex); }
		if (HX_FIELD_EQ(inName,"forcey") ) { return hx::Val( forcey); }
		if (HX_FIELD_EQ(inName,"angvel") ) { return hx::Val( angvel); }
		if (HX_FIELD_EQ(inName,"torque") ) { return hx::Val( torque); }
		if (HX_FIELD_EQ(inName,"nomove") ) { return hx::Val( nomove); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"kinvelx") ) { return hx::Val( kinvelx); }
		if (HX_FIELD_EQ(inName,"kinvely") ) { return hx::Val( kinvely); }
		if (HX_FIELD_EQ(inName,"pre_rot") ) { return hx::Val( pre_rot); }
		if (HX_FIELD_EQ(inName,"inertia") ) { return hx::Val( inertia); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isStatic") ) { return hx::Val( isStatic_dyn()); }
		if (HX_FIELD_EQ(inName,"compound") ) { return hx::Val( compound); }
		if (HX_FIELD_EQ(inName,"arbiters") ) { return hx::Val( arbiters); }
		if (HX_FIELD_EQ(inName,"pre_posx") ) { return hx::Val( pre_posx); }
		if (HX_FIELD_EQ(inName,"pre_posy") ) { return hx::Val( pre_posy); }
		if (HX_FIELD_EQ(inName,"wrap_pos") ) { return hx::Val( wrap_pos); }
		if (HX_FIELD_EQ(inName,"wrap_vel") ) { return hx::Val( wrap_vel); }
		if (HX_FIELD_EQ(inName,"wrapcvel") ) { return hx::Val( wrapcvel); }
		if (HX_FIELD_EQ(inName,"zip_axis") ) { return hx::Val( zip_axis); }
		if (HX_FIELD_EQ(inName,"zip_mass") ) { return hx::Val( zip_mass); }
		if (HX_FIELD_EQ(inName,"massMode") ) { return hx::Val( massMode); }
		if (HX_FIELD_EQ(inName,"gravMass") ) { return hx::Val( gravMass); }
		if (HX_FIELD_EQ(inName,"cinertia") ) { return hx::Val( cinertia); }
		if (HX_FIELD_EQ(inName,"iinertia") ) { return hx::Val( iinertia); }
		if (HX_FIELD_EQ(inName,"sinertia") ) { return hx::Val( sinertia); }
		if (HX_FIELD_EQ(inName,"norotate") ) { return hx::Val( norotate); }
		if (HX_FIELD_EQ(inName,"zip_aabb") ) { return hx::Val( zip_aabb); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isDynamic") ) { return hx::Val( isDynamic_dyn()); }
		if (HX_FIELD_EQ(inName,"component") ) { return hx::Val( component); }
		if (HX_FIELD_EQ(inName,"sweepTime") ) { return hx::Val( sweepTime); }
		if (HX_FIELD_EQ(inName,"wrap_svel") ) { return hx::Val( wrap_svel); }
		if (HX_FIELD_EQ(inName,"setupsvel") ) { return hx::Val( setupsvel_dyn()); }
		if (HX_FIELD_EQ(inName,"kinangvel") ) { return hx::Val( kinangvel); }
		if (HX_FIELD_EQ(inName,"delta_rot") ) { return hx::Val( delta_rot_dyn()); }
		if (HX_FIELD_EQ(inName,"localCOMx") ) { return hx::Val( localCOMx); }
		if (HX_FIELD_EQ(inName,"localCOMy") ) { return hx::Val( localCOMy); }
		if (HX_FIELD_EQ(inName,"worldCOMx") ) { return hx::Val( worldCOMx); }
		if (HX_FIELD_EQ(inName,"worldCOMy") ) { return hx::Val( worldCOMy); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"disableCCD") ) { return hx::Val( disableCCD); }
		if (HX_FIELD_EQ(inName,"wrap_force") ) { return hx::Val( wrap_force); }
		if (HX_FIELD_EQ(inName,"setupForce") ) { return hx::Val( setupForce_dyn()); }
		if (HX_FIELD_EQ(inName,"setup_cvel") ) { return hx::Val( setup_cvel_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isKinematic") ) { return hx::Val( isKinematic_dyn()); }
		if (HX_FIELD_EQ(inName,"wrap_shapes") ) { return hx::Val( wrap_shapes); }
		if (HX_FIELD_EQ(inName,"constraints") ) { return hx::Val( constraints); }
		if (HX_FIELD_EQ(inName,"graph_depth") ) { return hx::Val( graph_depth); }
		if (HX_FIELD_EQ(inName,"sweepFrozen") ) { return hx::Val( sweepFrozen); }
		if (HX_FIELD_EQ(inName,"sweepRadius") ) { return hx::Val( sweepRadius); }
		if (HX_FIELD_EQ(inName,"wrap_kinvel") ) { return hx::Val( wrap_kinvel); }
		if (HX_FIELD_EQ(inName,"setupkinvel") ) { return hx::Val( setupkinvel_dyn()); }
		if (HX_FIELD_EQ(inName,"inertiaMode") ) { return hx::Val( inertiaMode); }
		if (HX_FIELD_EQ(inName,"zip_inertia") ) { return hx::Val( zip_inertia); }
		if (HX_FIELD_EQ(inName,"getlocalCOM") ) { return hx::Val( getlocalCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"getworldCOM") ) { return hx::Val( getworldCOM_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sweep_angvel") ) { return hx::Val( sweep_angvel); }
		if (HX_FIELD_EQ(inName,"pos_validate") ) { return hx::Val( pos_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"vel_validate") ) { return hx::Val( vel_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"zip_gravMass") ) { return hx::Val( zip_gravMass); }
		if (HX_FIELD_EQ(inName,"gravMassMode") ) { return hx::Val( gravMassMode); }
		if (HX_FIELD_EQ(inName,"zip_localCOM") ) { return hx::Val( zip_localCOM); }
		if (HX_FIELD_EQ(inName,"zip_worldCOM") ) { return hx::Val( zip_worldCOM); }
		if (HX_FIELD_EQ(inName,"shapes_adder") ) { return hx::Val( shapes_adder_dyn()); }
		if (HX_FIELD_EQ(inName,"addedToSpace") ) { return hx::Val( addedToSpace_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { return hx::Val( wrap_arbiters); }
		if (HX_FIELD_EQ(inName,"bulletEnabled") ) { return hx::Val( bulletEnabled); }
		if (HX_FIELD_EQ(inName,"sweepValidate") ) { return hx::Val( sweepValidate_dyn()); }
		if (HX_FIELD_EQ(inName,"svel_validate") ) { return hx::Val( svel_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"setupPosition") ) { return hx::Val( setupPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"setupVelocity") ) { return hx::Val( setupVelocity_dyn()); }
		if (HX_FIELD_EQ(inName,"cvel_validate") ) { return hx::Val( cvel_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_axis") ) { return hx::Val( validate_axis_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_mass") ) { return hx::Val( validate_mass_dyn()); }
		if (HX_FIELD_EQ(inName,"gravMassScale") ) { return hx::Val( gravMassScale); }
		if (HX_FIELD_EQ(inName,"validate_aabb") ) { return hx::Val( validate_aabb_dyn()); }
		if (HX_FIELD_EQ(inName,"wrap_localCOM") ) { return hx::Val( wrap_localCOM); }
		if (HX_FIELD_EQ(inName,"wrap_worldCOM") ) { return hx::Val( wrap_worldCOM); }
		if (HX_FIELD_EQ(inName,"aabb_validate") ) { return hx::Val( aabb_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"shapes_subber") ) { return hx::Val( shapes_subber_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sweepIntegrate") ) { return hx::Val( sweepIntegrate_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_pos") ) { return hx::Val( invalidate_pos_dyn()); }
		if (HX_FIELD_EQ(inName,"pos_invalidate") ) { return hx::Val( pos_invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"vel_invalidate") ) { return hx::Val( vel_invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"force_validate") ) { return hx::Val( force_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_rot") ) { return hx::Val( invalidate_rot_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"invalidate_type") ) { return hx::Val( invalidate_type_dyn()); }
		if (HX_FIELD_EQ(inName,"connectedBodies") ) { return hx::Val( connectedBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"refreshArbiters") ) { return hx::Val( refreshArbiters_dyn()); }
		if (HX_FIELD_EQ(inName,"kinvel_validate") ) { return hx::Val( kinvel_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"svel_invalidate") ) { return hx::Val( svel_invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_mass") ) { return hx::Val( invalidate_mass_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_wake") ) { return hx::Val( invalidate_wake_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_aabb") ) { return hx::Val( invalidate_aabb_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { return hx::Val( wrap_constraints); }
		if (HX_FIELD_EQ(inName,"init_bodysetlist") ) { return hx::Val( init_bodysetlist_dyn()); }
		if (HX_FIELD_EQ(inName,"force_invalidate") ) { return hx::Val( force_invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_inertia") ) { return hx::Val( validate_inertia_dyn()); }
		if (HX_FIELD_EQ(inName,"removedFromSpace") ) { return hx::Val( removedFromSpace_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"invalidate_shapes") ) { return hx::Val( invalidate_shapes_dyn()); }
		if (HX_FIELD_EQ(inName,"interactingBodies") ) { return hx::Val( interactingBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"kinvel_invalidate") ) { return hx::Val( kinvel_invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"zip_gravMassScale") ) { return hx::Val( zip_gravMassScale); }
		if (HX_FIELD_EQ(inName,"validate_gravMass") ) { return hx::Val( validate_gravMass_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_localCOM") ) { return hx::Val( validate_localCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"validate_worldCOM") ) { return hx::Val( validate_worldCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"shapes_invalidate") ) { return hx::Val( shapes_invalidate_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"invalidate_inertia") ) { return hx::Val( invalidate_inertia_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"quick_validate_axis") ) { return hx::Val( quick_validate_axis_dyn()); }
		if (HX_FIELD_EQ(inName,"kinematicDelaySleep") ) { return hx::Val( kinematicDelaySleep); }
		if (HX_FIELD_EQ(inName,"invalidate_gravMass") ) { return hx::Val( invalidate_gravMass_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_localCOM") ) { return hx::Val( invalidate_localCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate_worldCOM") ) { return hx::Val( invalidate_worldCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"__immutable_midstep") ) { return hx::Val( _hx___immutable_midstep_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"connectedBodies_cont") ) { return hx::Val( connectedBodies_cont_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"validate_gravMassScale") ) { return hx::Val( validate_gravMassScale_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"invalidate_gravMassScale") ) { return hx::Val( invalidate_gravMassScale_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Body_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { outValue = types; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bodyset") ) { outValue = bodyset; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__static") ) { outValue = _hx___static_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bodystack") ) { outValue = bodystack; return true; }
		if (HX_FIELD_EQ(inName,"bodysetlt") ) { outValue = bodysetlt_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cur_graph_depth") ) { outValue = cur_graph_depth; return true; }
	}
	return false;
}

hx::Val ZPP_Body_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"rot") ) { rot=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"posx") ) { posx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"posy") ) { posy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"velx") ) { velx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vely") ) { vely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mass") ) { mass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aabb") ) { aabb=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::phys::Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"svelx") ) { svelx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"svely") ) { svely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"axisx") ) { axisx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"axisy") ) { axisy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imass") ) { imass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"smass") ) { smass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cmass") ) { cmass=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { shapes=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullet") ) { bullet=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forcex") ) { forcex=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forcey") ) { forcey=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angvel") ) { angvel=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"torque") ) { torque=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nomove") ) { nomove=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"kinvelx") ) { kinvelx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kinvely") ) { kinvely=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_rot") ) { pre_rot=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inertia") ) { inertia=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"compound") ) { compound=inValue.Cast<  ::zpp_nape::phys::ZPP_Compound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arbiters") ) { arbiters=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Arbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_posx") ) { pre_posx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_posy") ) { pre_posy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_pos") ) { wrap_pos=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_vel") ) { wrap_vel=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrapcvel") ) { wrapcvel=inValue.Cast<  ::nape::geom::Vec3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_axis") ) { zip_axis=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_mass") ) { zip_mass=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"massMode") ) { massMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravMass") ) { gravMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cinertia") ) { cinertia=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iinertia") ) { iinertia=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sinertia") ) { sinertia=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"norotate") ) { norotate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_aabb") ) { zip_aabb=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"component") ) { component=inValue.Cast<  ::zpp_nape::space::ZPP_Component >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepTime") ) { sweepTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_svel") ) { wrap_svel=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kinangvel") ) { kinangvel=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localCOMx") ) { localCOMx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localCOMy") ) { localCOMy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"worldCOMx") ) { worldCOMx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"worldCOMy") ) { worldCOMy=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"disableCCD") ) { disableCCD=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_force") ) { wrap_force=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_shapes") ) { wrap_shapes=inValue.Cast<  ::nape::shape::ShapeList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graph_depth") ) { graph_depth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepFrozen") ) { sweepFrozen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepRadius") ) { sweepRadius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_kinvel") ) { wrap_kinvel=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inertiaMode") ) { inertiaMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_inertia") ) { zip_inertia=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sweep_angvel") ) { sweep_angvel=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_gravMass") ) { zip_gravMass=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravMassMode") ) { gravMassMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_localCOM") ) { zip_localCOM=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zip_worldCOM") ) { zip_worldCOM=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { wrap_arbiters=inValue.Cast<  ::nape::dynamics::ArbiterList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bulletEnabled") ) { bulletEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravMassScale") ) { gravMassScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_localCOM") ) { wrap_localCOM=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_worldCOM") ) { wrap_worldCOM=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { wrap_constraints=inValue.Cast<  ::nape::constraint::ConstraintList >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"zip_gravMassScale") ) { zip_gravMassScale=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kinematicDelaySleep") ) { kinematicDelaySleep=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Body_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bodyset") ) { bodyset=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_Body >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bodystack") ) { bodystack=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Body >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cur_graph_depth") ) { cur_graph_depth=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void ZPP_Body_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("compound","\x6b","\xc3","\xcf","\x81"));
	outFields->push(HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"));
	outFields->push(HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07"));
	outFields->push(HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"));
	outFields->push(HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21"));
	outFields->push(HX_HCSTRING("wrap_arbiters","\xbf","\x60","\xdc","\x11"));
	outFields->push(HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"));
	outFields->push(HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5"));
	outFields->push(HX_HCSTRING("component","\xbd","\xf0","\x53","\x0f"));
	outFields->push(HX_HCSTRING("graph_depth","\x12","\xb6","\xfa","\x25"));
	outFields->push(HX_HCSTRING("sweepTime","\x19","\x74","\x9f","\xd7"));
	outFields->push(HX_HCSTRING("sweep_angvel","\xf6","\x7c","\xab","\x5e"));
	outFields->push(HX_HCSTRING("sweepFrozen","\xac","\x4c","\x76","\x2c"));
	outFields->push(HX_HCSTRING("sweepRadius","\x5e","\x93","\x9c","\x27"));
	outFields->push(HX_HCSTRING("bullet","\x42","\x92","\x90","\xd4"));
	outFields->push(HX_HCSTRING("bulletEnabled","\x5f","\x46","\x09","\xad"));
	outFields->push(HX_HCSTRING("disableCCD","\xbc","\xc8","\x9b","\xb6"));
	outFields->push(HX_HCSTRING("pre_posx","\x40","\xe1","\x19","\xea"));
	outFields->push(HX_HCSTRING("pre_posy","\x41","\xe1","\x19","\xea"));
	outFields->push(HX_HCSTRING("posx","\x64","\x84","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("posy","\x65","\x84","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("wrap_pos","\x5f","\x89","\xa1","\x9f"));
	outFields->push(HX_HCSTRING("velx","\x7b","\x2f","\x4c","\x4e"));
	outFields->push(HX_HCSTRING("vely","\x7c","\x2f","\x4c","\x4e"));
	outFields->push(HX_HCSTRING("wrap_vel","\x28","\x0e","\xa6","\x9f"));
	outFields->push(HX_HCSTRING("forcex","\x2d","\xfc","\x86","\xfd"));
	outFields->push(HX_HCSTRING("forcey","\x2e","\xfc","\x86","\xfd"));
	outFields->push(HX_HCSTRING("wrap_force","\x76","\xa6","\x1b","\x30"));
	outFields->push(HX_HCSTRING("kinvelx","\x8b","\x84","\x51","\x01"));
	outFields->push(HX_HCSTRING("kinvely","\x8c","\x84","\x51","\x01"));
	outFields->push(HX_HCSTRING("wrap_kinvel","\x62","\xe4","\xe0","\x70"));
	outFields->push(HX_HCSTRING("svelx","\x6e","\xe5","\x60","\x85"));
	outFields->push(HX_HCSTRING("svely","\x6f","\xe5","\x60","\x85"));
	outFields->push(HX_HCSTRING("wrap_svel","\x9f","\x91","\xb7","\x0f"));
	outFields->push(HX_HCSTRING("wrapcvel","\xa4","\xe8","\x4a","\xa2"));
	outFields->push(HX_HCSTRING("angvel","\xc3","\xab","\x20","\x63"));
	outFields->push(HX_HCSTRING("torque","\xca","\xb6","\x90","\x96"));
	outFields->push(HX_HCSTRING("kinangvel","\xd3","\x64","\xf1","\xe1"));
	outFields->push(HX_HCSTRING("pre_rot","\xbb","\xd4","\xad","\x2c"));
	outFields->push(HX_HCSTRING("rot","\x17","\xe2","\x56","\x00"));
	outFields->push(HX_HCSTRING("axisx","\xb7","\xf0","\x7f","\x29"));
	outFields->push(HX_HCSTRING("axisy","\xb8","\xf0","\x7f","\x29"));
	outFields->push(HX_HCSTRING("zip_axis","\xff","\xb9","\xda","\x0b"));
	outFields->push(HX_HCSTRING("kinematicDelaySleep","\xf9","\x0f","\xda","\xc0"));
	outFields->push(HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("zip_mass","\x52","\xde","\xb7","\x13"));
	outFields->push(HX_HCSTRING("massMode","\x77","\xca","\x75","\x81"));
	outFields->push(HX_HCSTRING("imass","\xdd","\x29","\x69","\xbd"));
	outFields->push(HX_HCSTRING("smass","\xe7","\xf6","\x6a","\x7f"));
	outFields->push(HX_HCSTRING("cmass","\xd7","\xae","\x01","\x49"));
	outFields->push(HX_HCSTRING("nomove","\xd2","\xf7","\x1c","\x2d"));
	outFields->push(HX_HCSTRING("gravMass","\xf4","\xac","\xf0","\x74"));
	outFields->push(HX_HCSTRING("zip_gravMass","\x52","\x51","\x8f","\x0d"));
	outFields->push(HX_HCSTRING("gravMassMode","\x77","\x36","\xb6","\x49"));
	outFields->push(HX_HCSTRING("gravMassScale","\xf6","\x1c","\x30","\xa2"));
	outFields->push(HX_HCSTRING("zip_gravMassScale","\xd8","\xe3","\x8a","\x29"));
	outFields->push(HX_HCSTRING("inertiaMode","\x7d","\xb5","\x39","\x0d"));
	outFields->push(HX_HCSTRING("inertia","\xfa","\xb0","\xba","\x7c"));
	outFields->push(HX_HCSTRING("zip_inertia","\x5c","\x42","\x9b","\x48"));
	outFields->push(HX_HCSTRING("cinertia","\xf7","\xd2","\x3c","\x9b"));
	outFields->push(HX_HCSTRING("iinertia","\xb1","\x7f","\x6b","\xf2"));
	outFields->push(HX_HCSTRING("sinertia","\xe7","\xf4","\x63","\x2e"));
	outFields->push(HX_HCSTRING("norotate","\x5c","\xcd","\x9b","\x66"));
	outFields->push(HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"));
	outFields->push(HX_HCSTRING("zip_aabb","\xfe","\x3f","\xc9","\x0b"));
	outFields->push(HX_HCSTRING("localCOMx","\x22","\xdc","\xee","\x03"));
	outFields->push(HX_HCSTRING("localCOMy","\x23","\xdc","\xee","\x03"));
	outFields->push(HX_HCSTRING("zip_localCOM","\xf4","\x6b","\x7e","\x78"));
	outFields->push(HX_HCSTRING("worldCOMx","\x89","\xa8","\xc8","\x4e"));
	outFields->push(HX_HCSTRING("worldCOMy","\x8a","\xa8","\xc8","\x4e"));
	outFields->push(HX_HCSTRING("zip_worldCOM","\x6d","\x69","\x22","\x3d"));
	outFields->push(HX_HCSTRING("wrap_localCOM","\xeb","\xfb","\x09","\xd0"));
	outFields->push(HX_HCSTRING("wrap_worldCOM","\x64","\xf9","\xad","\x94"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Body_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::phys::Body*/ ,(int)offsetof(ZPP_Body_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{hx::fsInt,(int)offsetof(ZPP_Body_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Compound*/ ,(int)offsetof(ZPP_Body_obj,compound),HX_HCSTRING("compound","\x6b","\xc3","\xcf","\x81")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Shape*/ ,(int)offsetof(ZPP_Body_obj,shapes),HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d")},
	{hx::fsObject /*::nape::shape::ShapeList*/ ,(int)offsetof(ZPP_Body_obj,wrap_shapes),HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Space*/ ,(int)offsetof(ZPP_Body_obj,space),HX_HCSTRING("space","\xc6","\x8c","\x66","\x81")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Arbiter*/ ,(int)offsetof(ZPP_Body_obj,arbiters),HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21")},
	{hx::fsObject /*::nape::dynamics::ArbiterList*/ ,(int)offsetof(ZPP_Body_obj,wrap_arbiters),HX_HCSTRING("wrap_arbiters","\xbf","\x60","\xdc","\x11")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Constraint*/ ,(int)offsetof(ZPP_Body_obj,constraints),HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17")},
	{hx::fsObject /*::nape::constraint::ConstraintList*/ ,(int)offsetof(ZPP_Body_obj,wrap_constraints),HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Component*/ ,(int)offsetof(ZPP_Body_obj,component),HX_HCSTRING("component","\xbd","\xf0","\x53","\x0f")},
	{hx::fsInt,(int)offsetof(ZPP_Body_obj,graph_depth),HX_HCSTRING("graph_depth","\x12","\xb6","\xfa","\x25")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,sweepTime),HX_HCSTRING("sweepTime","\x19","\x74","\x9f","\xd7")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,sweep_angvel),HX_HCSTRING("sweep_angvel","\xf6","\x7c","\xab","\x5e")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,sweepFrozen),HX_HCSTRING("sweepFrozen","\xac","\x4c","\x76","\x2c")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,sweepRadius),HX_HCSTRING("sweepRadius","\x5e","\x93","\x9c","\x27")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,bullet),HX_HCSTRING("bullet","\x42","\x92","\x90","\xd4")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,bulletEnabled),HX_HCSTRING("bulletEnabled","\x5f","\x46","\x09","\xad")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,disableCCD),HX_HCSTRING("disableCCD","\xbc","\xc8","\x9b","\xb6")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,pre_posx),HX_HCSTRING("pre_posx","\x40","\xe1","\x19","\xea")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,pre_posy),HX_HCSTRING("pre_posy","\x41","\xe1","\x19","\xea")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,posx),HX_HCSTRING("posx","\x64","\x84","\x5c","\x4a")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,posy),HX_HCSTRING("posy","\x65","\x84","\x5c","\x4a")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Body_obj,wrap_pos),HX_HCSTRING("wrap_pos","\x5f","\x89","\xa1","\x9f")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,velx),HX_HCSTRING("velx","\x7b","\x2f","\x4c","\x4e")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,vely),HX_HCSTRING("vely","\x7c","\x2f","\x4c","\x4e")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Body_obj,wrap_vel),HX_HCSTRING("wrap_vel","\x28","\x0e","\xa6","\x9f")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,forcex),HX_HCSTRING("forcex","\x2d","\xfc","\x86","\xfd")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,forcey),HX_HCSTRING("forcey","\x2e","\xfc","\x86","\xfd")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Body_obj,wrap_force),HX_HCSTRING("wrap_force","\x76","\xa6","\x1b","\x30")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,kinvelx),HX_HCSTRING("kinvelx","\x8b","\x84","\x51","\x01")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,kinvely),HX_HCSTRING("kinvely","\x8c","\x84","\x51","\x01")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Body_obj,wrap_kinvel),HX_HCSTRING("wrap_kinvel","\x62","\xe4","\xe0","\x70")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,svelx),HX_HCSTRING("svelx","\x6e","\xe5","\x60","\x85")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,svely),HX_HCSTRING("svely","\x6f","\xe5","\x60","\x85")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Body_obj,wrap_svel),HX_HCSTRING("wrap_svel","\x9f","\x91","\xb7","\x0f")},
	{hx::fsObject /*::nape::geom::Vec3*/ ,(int)offsetof(ZPP_Body_obj,wrapcvel),HX_HCSTRING("wrapcvel","\xa4","\xe8","\x4a","\xa2")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,angvel),HX_HCSTRING("angvel","\xc3","\xab","\x20","\x63")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,torque),HX_HCSTRING("torque","\xca","\xb6","\x90","\x96")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,kinangvel),HX_HCSTRING("kinangvel","\xd3","\x64","\xf1","\xe1")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,pre_rot),HX_HCSTRING("pre_rot","\xbb","\xd4","\xad","\x2c")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,rot),HX_HCSTRING("rot","\x17","\xe2","\x56","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,axisx),HX_HCSTRING("axisx","\xb7","\xf0","\x7f","\x29")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,axisy),HX_HCSTRING("axisy","\xb8","\xf0","\x7f","\x29")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_axis),HX_HCSTRING("zip_axis","\xff","\xb9","\xda","\x0b")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,kinematicDelaySleep),HX_HCSTRING("kinematicDelaySleep","\xf9","\x0f","\xda","\xc0")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,mass),HX_HCSTRING("mass","\xf4","\x40","\x56","\x48")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_mass),HX_HCSTRING("zip_mass","\x52","\xde","\xb7","\x13")},
	{hx::fsInt,(int)offsetof(ZPP_Body_obj,massMode),HX_HCSTRING("massMode","\x77","\xca","\x75","\x81")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,imass),HX_HCSTRING("imass","\xdd","\x29","\x69","\xbd")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,smass),HX_HCSTRING("smass","\xe7","\xf6","\x6a","\x7f")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,cmass),HX_HCSTRING("cmass","\xd7","\xae","\x01","\x49")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,nomove),HX_HCSTRING("nomove","\xd2","\xf7","\x1c","\x2d")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,gravMass),HX_HCSTRING("gravMass","\xf4","\xac","\xf0","\x74")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_gravMass),HX_HCSTRING("zip_gravMass","\x52","\x51","\x8f","\x0d")},
	{hx::fsInt,(int)offsetof(ZPP_Body_obj,gravMassMode),HX_HCSTRING("gravMassMode","\x77","\x36","\xb6","\x49")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,gravMassScale),HX_HCSTRING("gravMassScale","\xf6","\x1c","\x30","\xa2")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_gravMassScale),HX_HCSTRING("zip_gravMassScale","\xd8","\xe3","\x8a","\x29")},
	{hx::fsInt,(int)offsetof(ZPP_Body_obj,inertiaMode),HX_HCSTRING("inertiaMode","\x7d","\xb5","\x39","\x0d")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,inertia),HX_HCSTRING("inertia","\xfa","\xb0","\xba","\x7c")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_inertia),HX_HCSTRING("zip_inertia","\x5c","\x42","\x9b","\x48")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,cinertia),HX_HCSTRING("cinertia","\xf7","\xd2","\x3c","\x9b")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,iinertia),HX_HCSTRING("iinertia","\xb1","\x7f","\x6b","\xf2")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,sinertia),HX_HCSTRING("sinertia","\xe7","\xf4","\x63","\x2e")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,norotate),HX_HCSTRING("norotate","\x5c","\xcd","\x9b","\x66")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(int)offsetof(ZPP_Body_obj,aabb),HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_aabb),HX_HCSTRING("zip_aabb","\xfe","\x3f","\xc9","\x0b")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,localCOMx),HX_HCSTRING("localCOMx","\x22","\xdc","\xee","\x03")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,localCOMy),HX_HCSTRING("localCOMy","\x23","\xdc","\xee","\x03")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_localCOM),HX_HCSTRING("zip_localCOM","\xf4","\x6b","\x7e","\x78")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,worldCOMx),HX_HCSTRING("worldCOMx","\x89","\xa8","\xc8","\x4e")},
	{hx::fsFloat,(int)offsetof(ZPP_Body_obj,worldCOMy),HX_HCSTRING("worldCOMy","\x8a","\xa8","\xc8","\x4e")},
	{hx::fsBool,(int)offsetof(ZPP_Body_obj,zip_worldCOM),HX_HCSTRING("zip_worldCOM","\x6d","\x69","\x22","\x3d")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Body_obj,wrap_localCOM),HX_HCSTRING("wrap_localCOM","\xeb","\xfb","\x09","\xd0")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Body_obj,wrap_worldCOM),HX_HCSTRING("wrap_worldCOM","\x64","\xf9","\xad","\x94")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Body_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &ZPP_Body_obj::types,HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(void *) &ZPP_Body_obj::bodystack,HX_HCSTRING("bodystack","\x66","\x21","\xe6","\xb0")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_Body*/ ,(void *) &ZPP_Body_obj::bodyset,HX_HCSTRING("bodyset","\x40","\xf2","\x38","\x31")},
	{hx::fsInt,(void *) &ZPP_Body_obj::cur_graph_depth,HX_HCSTRING("cur_graph_depth","\x93","\x29","\x42","\x32")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Body_obj_sMemberFields[] = {
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("isStatic","\x38","\x78","\x65","\x5e"),
	HX_HCSTRING("isDynamic","\xb5","\x1c","\x14","\x3a"),
	HX_HCSTRING("isKinematic","\xbb","\x2f","\x80","\xc2"),
	HX_HCSTRING("invalidate_type","\x3e","\xb7","\x9a","\x5a"),
	HX_HCSTRING("compound","\x6b","\xc3","\xcf","\x81"),
	HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"),
	HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07"),
	HX_HCSTRING("invalidate_shapes","\xb6","\xc7","\x18","\x06"),
	HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"),
	HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21"),
	HX_HCSTRING("wrap_arbiters","\xbf","\x60","\xdc","\x11"),
	HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"),
	HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5"),
	HX_HCSTRING("component","\xbd","\xf0","\x53","\x0f"),
	HX_HCSTRING("graph_depth","\x12","\xb6","\xfa","\x25"),
	HX_HCSTRING("init_bodysetlist","\xaf","\x6f","\x2b","\xd8"),
	HX_HCSTRING("connectedBodies_cont","\x08","\x12","\x55","\x60"),
	HX_HCSTRING("connectedBodies","\x29","\x2f","\x18","\x68"),
	HX_HCSTRING("interactingBodies","\x8c","\xbf","\x60","\xf1"),
	HX_HCSTRING("atRest","\xa7","\xd1","\x99","\xc9"),
	HX_HCSTRING("refreshArbiters","\x65","\x95","\x0a","\x1f"),
	HX_HCSTRING("sweepTime","\x19","\x74","\x9f","\xd7"),
	HX_HCSTRING("sweep_angvel","\xf6","\x7c","\xab","\x5e"),
	HX_HCSTRING("sweepFrozen","\xac","\x4c","\x76","\x2c"),
	HX_HCSTRING("sweepRadius","\x5e","\x93","\x9c","\x27"),
	HX_HCSTRING("bullet","\x42","\x92","\x90","\xd4"),
	HX_HCSTRING("bulletEnabled","\x5f","\x46","\x09","\xad"),
	HX_HCSTRING("disableCCD","\xbc","\xc8","\x9b","\xb6"),
	HX_HCSTRING("sweepIntegrate","\xe5","\x1a","\x65","\x57"),
	HX_HCSTRING("sweepValidate","\xa2","\x6e","\xc9","\xc2"),
	HX_HCSTRING("pre_posx","\x40","\xe1","\x19","\xea"),
	HX_HCSTRING("pre_posy","\x41","\xe1","\x19","\xea"),
	HX_HCSTRING("posx","\x64","\x84","\x5c","\x4a"),
	HX_HCSTRING("posy","\x65","\x84","\x5c","\x4a"),
	HX_HCSTRING("wrap_pos","\x5f","\x89","\xa1","\x9f"),
	HX_HCSTRING("velx","\x7b","\x2f","\x4c","\x4e"),
	HX_HCSTRING("vely","\x7c","\x2f","\x4c","\x4e"),
	HX_HCSTRING("wrap_vel","\x28","\x0e","\xa6","\x9f"),
	HX_HCSTRING("forcex","\x2d","\xfc","\x86","\xfd"),
	HX_HCSTRING("forcey","\x2e","\xfc","\x86","\xfd"),
	HX_HCSTRING("wrap_force","\x76","\xa6","\x1b","\x30"),
	HX_HCSTRING("kinvelx","\x8b","\x84","\x51","\x01"),
	HX_HCSTRING("kinvely","\x8c","\x84","\x51","\x01"),
	HX_HCSTRING("wrap_kinvel","\x62","\xe4","\xe0","\x70"),
	HX_HCSTRING("svelx","\x6e","\xe5","\x60","\x85"),
	HX_HCSTRING("svely","\x6f","\xe5","\x60","\x85"),
	HX_HCSTRING("wrap_svel","\x9f","\x91","\xb7","\x0f"),
	HX_HCSTRING("invalidate_pos","\x90","\x95","\x14","\x7a"),
	HX_HCSTRING("pos_invalidate","\x86","\x09","\xfd","\x4c"),
	HX_HCSTRING("pos_validate","\xe1","\x17","\x1e","\x52"),
	HX_HCSTRING("vel_invalidate","\x5d","\x17","\x4c","\x57"),
	HX_HCSTRING("vel_validate","\xf8","\x31","\xe1","\x91"),
	HX_HCSTRING("kinvel_invalidate","\x6d","\x60","\x14","\xca"),
	HX_HCSTRING("kinvel_validate","\x08","\x17","\xda","\xa8"),
	HX_HCSTRING("svel_invalidate","\x10","\xdb","\x54","\x44"),
	HX_HCSTRING("svel_validate","\xeb","\x92","\x59","\xe7"),
	HX_HCSTRING("force_invalidate","\x8f","\x76","\x24","\xeb"),
	HX_HCSTRING("force_validate","\xaa","\x00","\xa3","\x16"),
	HX_HCSTRING("setupPosition","\x46","\x50","\x1a","\x7b"),
	HX_HCSTRING("setupVelocity","\xba","\xb1","\x1d","\xcf"),
	HX_HCSTRING("setupkinvel","\x8a","\x09","\x73","\x32"),
	HX_HCSTRING("setupsvel","\xc7","\x9c","\x12","\xbc"),
	HX_HCSTRING("setupForce","\x2e","\xce","\x97","\xe6"),
	HX_HCSTRING("cvel_validate","\xdb","\xba","\x51","\x8b"),
	HX_HCSTRING("wrapcvel","\xa4","\xe8","\x4a","\xa2"),
	HX_HCSTRING("setup_cvel","\x1c","\xca","\xb0","\x43"),
	HX_HCSTRING("angvel","\xc3","\xab","\x20","\x63"),
	HX_HCSTRING("torque","\xca","\xb6","\x90","\x96"),
	HX_HCSTRING("kinangvel","\xd3","\x64","\xf1","\xe1"),
	HX_HCSTRING("pre_rot","\xbb","\xd4","\xad","\x2c"),
	HX_HCSTRING("rot","\x17","\xe2","\x56","\x00"),
	HX_HCSTRING("invalidate_rot","\x13","\x1a","\x16","\x7a"),
	HX_HCSTRING("axisx","\xb7","\xf0","\x7f","\x29"),
	HX_HCSTRING("axisy","\xb8","\xf0","\x7f","\x29"),
	HX_HCSTRING("zip_axis","\xff","\xb9","\xda","\x0b"),
	HX_HCSTRING("validate_axis","\x2a","\x88","\x5c","\x8c"),
	HX_HCSTRING("quick_validate_axis","\x18","\x64","\xed","\x6f"),
	HX_HCSTRING("delta_rot","\x10","\x6b","\xa8","\xfc"),
	HX_HCSTRING("kinematicDelaySleep","\xf9","\x0f","\xda","\xc0"),
	HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"),
	HX_HCSTRING("zip_mass","\x52","\xde","\xb7","\x13"),
	HX_HCSTRING("massMode","\x77","\xca","\x75","\x81"),
	HX_HCSTRING("imass","\xdd","\x29","\x69","\xbd"),
	HX_HCSTRING("smass","\xe7","\xf6","\x6a","\x7f"),
	HX_HCSTRING("cmass","\xd7","\xae","\x01","\x49"),
	HX_HCSTRING("nomove","\xd2","\xf7","\x1c","\x2d"),
	HX_HCSTRING("invalidate_mass","\x78","\x05","\xe8","\x55"),
	HX_HCSTRING("validate_mass","\x7d","\xac","\x39","\x94"),
	HX_HCSTRING("gravMass","\xf4","\xac","\xf0","\x74"),
	HX_HCSTRING("zip_gravMass","\x52","\x51","\x8f","\x0d"),
	HX_HCSTRING("gravMassMode","\x77","\x36","\xb6","\x49"),
	HX_HCSTRING("gravMassScale","\xf6","\x1c","\x30","\xa2"),
	HX_HCSTRING("zip_gravMassScale","\xd8","\xe3","\x8a","\x29"),
	HX_HCSTRING("invalidate_gravMass","\x78","\x03","\x99","\xa9"),
	HX_HCSTRING("validate_gravMass","\xfd","\x10","\x4b","\xb0"),
	HX_HCSTRING("invalidate_gravMassScale","\xf2","\xa7","\xab","\x04"),
	HX_HCSTRING("validate_gravMassScale","\x4d","\x78","\xe1","\x49"),
	HX_HCSTRING("inertiaMode","\x7d","\xb5","\x39","\x0d"),
	HX_HCSTRING("inertia","\xfa","\xb0","\xba","\x7c"),
	HX_HCSTRING("zip_inertia","\x5c","\x42","\x9b","\x48"),
	HX_HCSTRING("cinertia","\xf7","\xd2","\x3c","\x9b"),
	HX_HCSTRING("iinertia","\xb1","\x7f","\x6b","\xf2"),
	HX_HCSTRING("sinertia","\xe7","\xf4","\x63","\x2e"),
	HX_HCSTRING("norotate","\x5c","\xcd","\x9b","\x66"),
	HX_HCSTRING("invalidate_inertia","\xf6","\x96","\xdb","\x64"),
	HX_HCSTRING("validate_inertia","\x11","\x61","\x1a","\x95"),
	HX_HCSTRING("invalidate_wake","\xa8","\x20","\x84","\x5c"),
	HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"),
	HX_HCSTRING("zip_aabb","\xfe","\x3f","\xc9","\x0b"),
	HX_HCSTRING("validate_aabb","\x29","\x0e","\x4b","\x8c"),
	HX_HCSTRING("invalidate_aabb","\x24","\x67","\xf9","\x4d"),
	HX_HCSTRING("localCOMx","\x22","\xdc","\xee","\x03"),
	HX_HCSTRING("localCOMy","\x23","\xdc","\xee","\x03"),
	HX_HCSTRING("zip_localCOM","\xf4","\x6b","\x7e","\x78"),
	HX_HCSTRING("worldCOMx","\x89","\xa8","\xc8","\x4e"),
	HX_HCSTRING("worldCOMy","\x8a","\xa8","\xc8","\x4e"),
	HX_HCSTRING("zip_worldCOM","\x6d","\x69","\x22","\x3d"),
	HX_HCSTRING("wrap_localCOM","\xeb","\xfb","\x09","\xd0"),
	HX_HCSTRING("wrap_worldCOM","\x64","\xf9","\xad","\x94"),
	HX_HCSTRING("invalidate_localCOM","\x1a","\x1e","\x88","\x14"),
	HX_HCSTRING("invalidate_worldCOM","\x93","\x1b","\x2c","\xd9"),
	HX_HCSTRING("validate_localCOM","\x9f","\x2b","\x3a","\x1b"),
	HX_HCSTRING("validate_worldCOM","\x18","\x29","\xde","\xdf"),
	HX_HCSTRING("getlocalCOM","\x2c","\xce","\x21","\x2c"),
	HX_HCSTRING("getworldCOM","\xa5","\xcb","\xc5","\xf0"),
	HX_HCSTRING("__immutable_midstep","\x77","\x19","\x9f","\x9d"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("aabb_validate","\x55","\xd1","\x98","\x95"),
	HX_HCSTRING("shapes_adder","\xc1","\xa7","\x65","\x60"),
	HX_HCSTRING("shapes_subber","\x7c","\xbd","\x74","\xf3"),
	HX_HCSTRING("shapes_invalidate","\xa8","\xb5","\xe7","\xc5"),
	HX_HCSTRING("addedToSpace","\x6b","\x44","\xb0","\x09"),
	HX_HCSTRING("removedFromSpace","\x3c","\x43","\xd1","\xb7"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	::String(null()) };

static void ZPP_Body_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Body_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Body_obj::types,"types");
	HX_MARK_MEMBER_NAME(ZPP_Body_obj::bodystack,"bodystack");
	HX_MARK_MEMBER_NAME(ZPP_Body_obj::bodyset,"bodyset");
	HX_MARK_MEMBER_NAME(ZPP_Body_obj::cur_graph_depth,"cur_graph_depth");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Body_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Body_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Body_obj::types,"types");
	HX_VISIT_MEMBER_NAME(ZPP_Body_obj::bodystack,"bodystack");
	HX_VISIT_MEMBER_NAME(ZPP_Body_obj::bodyset,"bodyset");
	HX_VISIT_MEMBER_NAME(ZPP_Body_obj::cur_graph_depth,"cur_graph_depth");
};

#endif

hx::Class ZPP_Body_obj::__mClass;

static ::String ZPP_Body_obj_sStaticFields[] = {
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("bodystack","\x66","\x21","\xe6","\xb0"),
	HX_HCSTRING("bodyset","\x40","\xf2","\x38","\x31"),
	HX_HCSTRING("bodysetlt","\xc8","\x60","\x0a","\xa7"),
	HX_HCSTRING("cur_graph_depth","\x93","\x29","\x42","\x32"),
	HX_HCSTRING("__static","\xce","\x47","\x2b","\xae"),
	::String(null())
};

void ZPP_Body_obj::__register()
{
	hx::Object *dummy = new ZPP_Body_obj;
	ZPP_Body_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.phys.ZPP_Body","\x02","\xbf","\xf3","\xc2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Body_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Body_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Body_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Body_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Body_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Body_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Body_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Body_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Body_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Body_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_ee80641dc58d12ee_193_boot)
HXLINE( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			return ::Array_obj< ::Dynamic>::__new(4)->init(0,null())->init(1,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC)->init(2,::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC)->init(3,::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_193_boot)
HXLINE( 193)		types =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_213_boot)
HXLINE( 213)		bodystack = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_214_boot)
HXLINE( 214)		bodyset = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_ee80641dc58d12ee_243_boot)
HXLINE( 243)		cur_graph_depth = (int)0;
            	}
}

} // end namespace zpp_nape
} // end namespace phys
