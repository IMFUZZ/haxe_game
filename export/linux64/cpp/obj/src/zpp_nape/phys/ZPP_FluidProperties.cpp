// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_FluidProperties
#include <nape/phys/FluidProperties.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_174_new,"zpp_nape.phys.ZPP_FluidProperties","new",0x991565af,"zpp_nape.phys.ZPP_FluidProperties.new","zpp_nape/phys/FluidProperties.hx",174,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_202_wrapper,"zpp_nape.phys.ZPP_FluidProperties","wrapper",0xcbbcbe22,"zpp_nape.phys.ZPP_FluidProperties.wrapper","zpp_nape/phys/FluidProperties.hx",202,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_229_free,"zpp_nape.phys.ZPP_FluidProperties","free",0x5463ac7d,"zpp_nape.phys.ZPP_FluidProperties.free","zpp_nape/phys/FluidProperties.hx",229,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_233_alloc,"zpp_nape.phys.ZPP_FluidProperties","alloc",0x9de06b84,"zpp_nape.phys.ZPP_FluidProperties.alloc","zpp_nape/phys/FluidProperties.hx",233,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_239_feature_cons,"zpp_nape.phys.ZPP_FluidProperties","feature_cons",0xf0fe182b,"zpp_nape.phys.ZPP_FluidProperties.feature_cons","zpp_nape/phys/FluidProperties.hx",239,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_244_addShape,"zpp_nape.phys.ZPP_FluidProperties","addShape",0xc40dd591,"zpp_nape.phys.ZPP_FluidProperties.addShape","zpp_nape/phys/FluidProperties.hx",244,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_249_remShape,"zpp_nape.phys.ZPP_FluidProperties","remShape",0x53331fb8,"zpp_nape.phys.ZPP_FluidProperties.remShape","zpp_nape/phys/FluidProperties.hx",249,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_251_copy,"zpp_nape.phys.ZPP_FluidProperties","copy",0x5265cb86,"zpp_nape.phys.ZPP_FluidProperties.copy","zpp_nape/phys/FluidProperties.hx",251,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_304_gravity_invalidate,"zpp_nape.phys.ZPP_FluidProperties","gravity_invalidate",0xa5ad5a9d,"zpp_nape.phys.ZPP_FluidProperties.gravity_invalidate","zpp_nape/phys/FluidProperties.hx",304,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_328_gravity_validate,"zpp_nape.phys.ZPP_FluidProperties","gravity_validate",0x2a6f2538,"zpp_nape.phys.ZPP_FluidProperties.gravity_validate","zpp_nape/phys/FluidProperties.hx",328,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_349_getgravity,"zpp_nape.phys.ZPP_FluidProperties","getgravity",0x6e6c0f09,"zpp_nape.phys.ZPP_FluidProperties.getgravity","zpp_nape/phys/FluidProperties.hx",349,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_356_invalidate,"zpp_nape.phys.ZPP_FluidProperties","invalidate",0xfb865c0c,"zpp_nape.phys.ZPP_FluidProperties.invalidate","zpp_nape/phys/FluidProperties.hx",356,0x45ff3bfc)
HX_DEFINE_STACK_FRAME(_hx_pos_af7aa9d0d706d724_176_boot,"zpp_nape.phys.ZPP_FluidProperties","boot",0x51bc9403,"zpp_nape.phys.ZPP_FluidProperties.boot","zpp_nape/phys/FluidProperties.hx",176,0x45ff3bfc)
namespace zpp_nape{
namespace phys{

void ZPP_FluidProperties_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_af7aa9d0d706d724_174_new)
            	HX_STACK_THIS(this)
HXLINE( 303)		this->wrap_gravity = null();
HXLINE( 302)		this->gravityy = ((Float)0.0);
HXLINE( 301)		this->gravityx = ((Float)0.0);
HXLINE( 300)		this->density = ((Float)0.0);
HXLINE( 299)		this->viscosity = ((Float)0.0);
HXLINE( 235)		this->wrap_shapes = null();
HXLINE( 234)		this->shapes = null();
HXLINE( 201)		this->outer = null();
HXLINE( 200)		this->userData = null();
HXLINE( 175)		this->next = null();
HXLINE( 275)		this->shapes =  ::zpp_nape::util::ZNPList_ZPP_Shape_obj::__alloc( HX_CTX );
HXLINE( 276)		this->density = (this->viscosity = (int)1);
HXLINE( 277)		this->wrap_gravity = null();
HXLINE( 278)		{
HXLINE( 279)			this->gravityx = (int)0;
HXLINE( 280)			this->gravityy = (int)0;
            		}
            	}

Dynamic ZPP_FluidProperties_obj::__CreateEmpty() { return new ZPP_FluidProperties_obj; }

void *ZPP_FluidProperties_obj::_hx_vtable = 0;

Dynamic ZPP_FluidProperties_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_FluidProperties_obj > _hx_result = new ZPP_FluidProperties_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_FluidProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c64e8f5;
}

 ::nape::phys::FluidProperties ZPP_FluidProperties_obj::wrapper(){
            	HX_GC_STACKFRAME(&_hx_pos_af7aa9d0d706d724_202_wrapper)
            	HX_STACK_THIS(this)
HXLINE( 203)		if (hx::IsNull( this->outer )) {
HXLINE( 204)			this->outer =  ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 205)			{
HXLINE( 206)				HX_VARI(  ::zpp_nape::phys::ZPP_FluidProperties,o) = this->outer->zpp_inner;
HXLINE( 215)				o->outer = null();
HXLINE( 216)				o->next = ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool;
HXLINE( 217)				::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool = o;
            			}
HXLINE( 222)			this->outer->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 224)		return this->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,wrapper,return )

void ZPP_FluidProperties_obj::free(){
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_229_free)
            	HX_STACK_THIS(this)
HXLINE( 229)		this->outer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,free,(void))

void ZPP_FluidProperties_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_233_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,alloc,(void))

void ZPP_FluidProperties_obj::feature_cons(){
            	HX_GC_STACKFRAME(&_hx_pos_af7aa9d0d706d724_239_feature_cons)
            	HX_STACK_THIS(this)
HXLINE( 239)		this->shapes =  ::zpp_nape::util::ZNPList_ZPP_Shape_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,feature_cons,(void))

void ZPP_FluidProperties_obj::addShape( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_244_addShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 244)		this->shapes->add(shape);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_FluidProperties_obj,addShape,(void))

void ZPP_FluidProperties_obj::remShape( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_249_remShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 249)		this->shapes->remove(shape);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_FluidProperties_obj,remShape,(void))

 ::zpp_nape::phys::ZPP_FluidProperties ZPP_FluidProperties_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_af7aa9d0d706d724_251_copy)
            	HX_STACK_THIS(this)
HXLINE( 252)		HX_VAR(  ::zpp_nape::phys::ZPP_FluidProperties,ret);
HXLINE( 254)		if (hx::IsNull( ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool )) {
HXLINE( 255)			ret =  ::zpp_nape::phys::ZPP_FluidProperties_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 261)			ret = ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool;
HXLINE( 262)			::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool = ret->next;
HXLINE( 263)			ret->next = null();
            		}
HXLINE( 270)		ret->viscosity = this->viscosity;
HXLINE( 271)		ret->density = this->density;
HXLINE( 272)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,copy,return )

void ZPP_FluidProperties_obj::gravity_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_304_gravity_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 305)		{
HXLINE( 306)			this->gravityx = x->x;
HXLINE( 307)			this->gravityy = x->y;
            		}
HXLINE( 325)		this->invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_FluidProperties_obj,gravity_invalidate,(void))

void ZPP_FluidProperties_obj::gravity_validate(){
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_328_gravity_validate)
            	HX_STACK_THIS(this)
HXLINE( 329)		this->wrap_gravity->zpp_inner->x = this->gravityx;
HXLINE( 330)		this->wrap_gravity->zpp_inner->y = this->gravityy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,gravity_validate,(void))

void ZPP_FluidProperties_obj::getgravity(){
            	HX_GC_STACKFRAME(&_hx_pos_af7aa9d0d706d724_349_getgravity)
            	HX_STACK_THIS(this)
HXLINE( 350)		HX_VARI( Float,x) = this->gravityx;
HXDLIN( 350)		HX_VARI( Float,y) = this->gravityy;
HXDLIN( 350)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 350)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 350)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 350)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 350)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 350)			ret->zpp_pool = null();
            		}
HXDLIN( 350)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 350)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 350)			{
HXLINE( 350)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 350)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 350)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 350)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 350)					ret1->next = null();
            				}
HXDLIN( 350)				ret1->weak = false;
            			}
HXDLIN( 350)			ret1->_immutable = false;
HXDLIN( 350)			{
HXLINE( 350)				ret1->x = x;
HXDLIN( 350)				ret1->y = y;
            			}
HXDLIN( 350)			ret->zpp_inner = ret1;
HXDLIN( 350)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 350)			bool _hx_tmp;
HXDLIN( 350)			{
HXLINE( 350)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 350)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 350)					_this->_validate();
            				}
            			}
HXDLIN( 350)			if ((ret->zpp_inner->x == x)) {
HXLINE( 350)				{
HXLINE( 350)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 350)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 350)						_this1->_validate();
            					}
            				}
HXDLIN( 350)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 350)				_hx_tmp = false;
            			}
HXDLIN( 350)			if (!(_hx_tmp)) {
HXLINE( 350)				{
HXLINE( 350)					ret->zpp_inner->x = x;
HXDLIN( 350)					ret->zpp_inner->y = y;
            				}
HXDLIN( 350)				{
HXLINE( 350)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 350)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 350)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 350)		ret->zpp_inner->weak = false;
HXDLIN( 350)		this->wrap_gravity = ret;
HXLINE( 351)		this->wrap_gravity->zpp_inner->_inuse = true;
HXLINE( 352)		this->wrap_gravity->zpp_inner->_invalidate = this->gravity_invalidate_dyn();
HXLINE( 353)		this->wrap_gravity->zpp_inner->_validate = this->gravity_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,getgravity,(void))

void ZPP_FluidProperties_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_356_invalidate)
            	HX_STACK_THIS(this)
HXLINE( 357)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->shapes->head;
HXLINE( 358)		while(hx::IsNotNull( cx_ite )){
HXLINE( 360)			cx_ite->elt->invalidate_fluidprops();
HXLINE( 361)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_FluidProperties_obj,invalidate,(void))

 ::zpp_nape::phys::ZPP_FluidProperties ZPP_FluidProperties_obj::zpp_pool;


hx::ObjectPtr< ZPP_FluidProperties_obj > ZPP_FluidProperties_obj::__new() {
	hx::ObjectPtr< ZPP_FluidProperties_obj > __this = new ZPP_FluidProperties_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_FluidProperties_obj > ZPP_FluidProperties_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_FluidProperties_obj *__this = (ZPP_FluidProperties_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_FluidProperties_obj), true, "zpp_nape.phys.ZPP_FluidProperties"));
	*(void **)__this = ZPP_FluidProperties_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_FluidProperties_obj::ZPP_FluidProperties_obj()
{
}

void ZPP_FluidProperties_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_FluidProperties);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(shapes,"shapes");
	HX_MARK_MEMBER_NAME(wrap_shapes,"wrap_shapes");
	HX_MARK_MEMBER_NAME(viscosity,"viscosity");
	HX_MARK_MEMBER_NAME(density,"density");
	HX_MARK_MEMBER_NAME(gravityx,"gravityx");
	HX_MARK_MEMBER_NAME(gravityy,"gravityy");
	HX_MARK_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_MARK_END_CLASS();
}

void ZPP_FluidProperties_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(shapes,"shapes");
	HX_VISIT_MEMBER_NAME(wrap_shapes,"wrap_shapes");
	HX_VISIT_MEMBER_NAME(viscosity,"viscosity");
	HX_VISIT_MEMBER_NAME(density,"density");
	HX_VISIT_MEMBER_NAME(gravityx,"gravityx");
	HX_VISIT_MEMBER_NAME(gravityy,"gravityy");
	HX_VISIT_MEMBER_NAME(wrap_gravity,"wrap_gravity");
}

hx::Val ZPP_FluidProperties_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { return hx::Val( shapes); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrapper") ) { return hx::Val( wrapper_dyn()); }
		if (HX_FIELD_EQ(inName,"density") ) { return hx::Val( density); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData); }
		if (HX_FIELD_EQ(inName,"addShape") ) { return hx::Val( addShape_dyn()); }
		if (HX_FIELD_EQ(inName,"remShape") ) { return hx::Val( remShape_dyn()); }
		if (HX_FIELD_EQ(inName,"gravityx") ) { return hx::Val( gravityx); }
		if (HX_FIELD_EQ(inName,"gravityy") ) { return hx::Val( gravityy); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viscosity") ) { return hx::Val( viscosity); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getgravity") ) { return hx::Val( getgravity_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_shapes") ) { return hx::Val( wrap_shapes); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"feature_cons") ) { return hx::Val( feature_cons_dyn()); }
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { return hx::Val( wrap_gravity); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gravity_validate") ) { return hx::Val( gravity_validate_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gravity_invalidate") ) { return hx::Val( gravity_invalidate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_FluidProperties_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_FluidProperties_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::phys::ZPP_FluidProperties >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::phys::FluidProperties >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { shapes=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Shape >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { density=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { gravityx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { gravityy=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viscosity") ) { viscosity=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_shapes") ) { wrap_shapes=inValue.Cast<  ::nape::shape::ShapeList >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { wrap_gravity=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_FluidProperties_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::phys::ZPP_FluidProperties >(); return true; }
	}
	return false;
}

void ZPP_FluidProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"));
	outFields->push(HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07"));
	outFields->push(HX_HCSTRING("viscosity","\x27","\x46","\x3e","\x2a"));
	outFields->push(HX_HCSTRING("density","\xe8","\x3f","\xd5","\x42"));
	outFields->push(HX_HCSTRING("gravityx","\x6a","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("gravityy","\x6b","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("wrap_gravity","\x99","\xdb","\x94","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_FluidProperties_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::phys::ZPP_FluidProperties*/ ,(int)offsetof(ZPP_FluidProperties_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_FluidProperties_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsObject /*::nape::phys::FluidProperties*/ ,(int)offsetof(ZPP_FluidProperties_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Shape*/ ,(int)offsetof(ZPP_FluidProperties_obj,shapes),HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d")},
	{hx::fsObject /*::nape::shape::ShapeList*/ ,(int)offsetof(ZPP_FluidProperties_obj,wrap_shapes),HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidProperties_obj,viscosity),HX_HCSTRING("viscosity","\x27","\x46","\x3e","\x2a")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidProperties_obj,density),HX_HCSTRING("density","\xe8","\x3f","\xd5","\x42")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidProperties_obj,gravityx),HX_HCSTRING("gravityx","\x6a","\x16","\x81","\x87")},
	{hx::fsFloat,(int)offsetof(ZPP_FluidProperties_obj,gravityy),HX_HCSTRING("gravityy","\x6b","\x16","\x81","\x87")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_FluidProperties_obj,wrap_gravity),HX_HCSTRING("wrap_gravity","\x99","\xdb","\x94","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_FluidProperties_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::phys::ZPP_FluidProperties*/ ,(void *) &ZPP_FluidProperties_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_FluidProperties_obj_sMemberFields[] = {
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("wrapper","\x53","\xd5","\x64","\x0d"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"),
	HX_HCSTRING("wrap_shapes","\x47","\xdf","\xb8","\x07"),
	HX_HCSTRING("feature_cons","\x5a","\x4f","\x1f","\x7b"),
	HX_HCSTRING("addShape","\x40","\x09","\x7a","\xf5"),
	HX_HCSTRING("remShape","\x67","\x53","\x9f","\x84"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("viscosity","\x27","\x46","\x3e","\x2a"),
	HX_HCSTRING("density","\xe8","\x3f","\xd5","\x42"),
	HX_HCSTRING("gravityx","\x6a","\x16","\x81","\x87"),
	HX_HCSTRING("gravityy","\x6b","\x16","\x81","\x87"),
	HX_HCSTRING("wrap_gravity","\x99","\xdb","\x94","\xca"),
	HX_HCSTRING("gravity_invalidate","\x0c","\x9f","\x82","\xbd"),
	HX_HCSTRING("gravity_validate","\xe7","\x1f","\xcd","\xf2"),
	HX_HCSTRING("getgravity","\x78","\xcc","\x0f","\xfa"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	::String(null()) };

static void ZPP_FluidProperties_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_FluidProperties_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_FluidProperties_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_FluidProperties_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_FluidProperties_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_FluidProperties_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_FluidProperties_obj::__mClass;

static ::String ZPP_FluidProperties_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_FluidProperties_obj::__register()
{
	hx::Object *dummy = new ZPP_FluidProperties_obj;
	ZPP_FluidProperties_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.phys.ZPP_FluidProperties","\x3d","\x62","\x8f","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_FluidProperties_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_FluidProperties_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_FluidProperties_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_FluidProperties_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_FluidProperties_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_FluidProperties_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_FluidProperties_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_FluidProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_FluidProperties_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_FluidProperties_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af7aa9d0d706d724_176_boot)
HXLINE( 176)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace phys
