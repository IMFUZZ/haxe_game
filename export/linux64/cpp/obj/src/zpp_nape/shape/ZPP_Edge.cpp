// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_shape_Edge
#include <nape/shape/Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_174_new,"zpp_nape.shape.ZPP_Edge","new",0x28a22ac2,"zpp_nape.shape.ZPP_Edge.new","zpp_nape/shape/Edge.hx",174,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_203_free,"zpp_nape.shape.ZPP_Edge","free",0x6003580a,"zpp_nape.shape.ZPP_Edge.free","zpp_nape/shape/Edge.hx",203,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_207_alloc,"zpp_nape.shape.ZPP_Edge","alloc",0xbdf6db57,"zpp_nape.shape.ZPP_Edge.alloc","zpp_nape/shape/Edge.hx",207,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_211_wrapper,"zpp_nape.shape.ZPP_Edge","wrapper",0xf22d08b5,"zpp_nape.shape.ZPP_Edge.wrapper","zpp_nape/shape/Edge.hx",211,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_235_lnorm_validate,"zpp_nape.shape.ZPP_Edge","lnorm_validate",0xe154132b,"zpp_nape.shape.ZPP_Edge.lnorm_validate","zpp_nape/shape/Edge.hx",235,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_261_gnorm_validate,"zpp_nape.shape.ZPP_Edge","gnorm_validate",0x13f17250,"zpp_nape.shape.ZPP_Edge.gnorm_validate","zpp_nape/shape/Edge.hx",261,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_288_getlnorm,"zpp_nape.shape.ZPP_Edge","getlnorm",0x8f5f1eb0,"zpp_nape.shape.ZPP_Edge.getlnorm","zpp_nape/shape/Edge.hx",288,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_293_getgnorm,"zpp_nape.shape.ZPP_Edge","getgnorm",0xae5e382b,"zpp_nape.shape.ZPP_Edge.getgnorm","zpp_nape/shape/Edge.hx",293,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_176_boot,"zpp_nape.shape.ZPP_Edge","boot",0x5d5c3f90,"zpp_nape.shape.ZPP_Edge.boot","zpp_nape/shape/Edge.hx",176,0x9f6a6311)
HX_DEFINE_STACK_FRAME(_hx_pos_14f4cdc48d2739cb_209_boot,"zpp_nape.shape.ZPP_Edge","boot",0x5d5c3f90,"zpp_nape.shape.ZPP_Edge.boot","zpp_nape/shape/Edge.hx",209,0x9f6a6311)
namespace zpp_nape{
namespace shape{

void ZPP_Edge_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_174_new)
            	HX_STACK_THIS(this)
HXLINE( 234)		this->tp1 = ((Float)0.0);
HXLINE( 233)		this->tp0 = ((Float)0.0);
HXLINE( 232)		this->gp1 = null();
HXLINE( 231)		this->lp1 = null();
HXLINE( 230)		this->gp0 = null();
HXLINE( 229)		this->lp0 = null();
HXLINE( 228)		this->gprojection = ((Float)0.0);
HXLINE( 227)		this->lprojection = ((Float)0.0);
HXLINE( 226)		this->length = ((Float)0.0);
HXLINE( 225)		this->wrap_gnorm = null();
HXLINE( 224)		this->gnormy = ((Float)0.0);
HXLINE( 223)		this->gnormx = ((Float)0.0);
HXLINE( 222)		this->wrap_lnorm = null();
HXLINE( 221)		this->lnormy = ((Float)0.0);
HXLINE( 220)		this->lnormx = ((Float)0.0);
HXLINE( 210)		this->outer = null();
HXLINE( 208)		this->polygon = null();
HXLINE( 175)		this->next = null();
HXLINE( 299)		{
HXLINE( 300)			this->lnormx = (int)0;
HXLINE( 301)			this->lnormy = (int)0;
            		}
HXLINE( 319)		{
HXLINE( 320)			this->gnormx = (int)0;
HXLINE( 321)			this->gnormy = (int)0;
            		}
HXLINE( 339)		this->length = (int)0;
HXLINE( 340)		this->lprojection = (int)0;
HXLINE( 341)		this->gprojection = (int)0;
            	}

Dynamic ZPP_Edge_obj::__CreateEmpty() { return new ZPP_Edge_obj; }

void *ZPP_Edge_obj::_hx_vtable = 0;

Dynamic ZPP_Edge_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Edge_obj > _hx_result = new ZPP_Edge_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Edge_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50b16272;
}

void ZPP_Edge_obj::free(){
            	HX_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_203_free)
            	HX_STACK_THIS(this)
HXLINE( 203)		this->polygon = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Edge_obj,free,(void))

void ZPP_Edge_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_207_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Edge_obj,alloc,(void))

 ::nape::shape::Edge ZPP_Edge_obj::wrapper(){
            	HX_GC_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_211_wrapper)
            	HX_STACK_THIS(this)
HXLINE( 212)		if (hx::IsNull( this->outer )) {
HXLINE( 213)			::zpp_nape::shape::ZPP_Edge_obj::internal = true;
HXLINE( 214)			this->outer =  ::nape::shape::Edge_obj::__alloc( HX_CTX );
HXLINE( 215)			::zpp_nape::shape::ZPP_Edge_obj::internal = false;
HXLINE( 216)			this->outer->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 218)		return this->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Edge_obj,wrapper,return )

void ZPP_Edge_obj::lnorm_validate(){
            	HX_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_235_lnorm_validate)
            	HX_STACK_THIS(this)
HXLINE( 239)		this->polygon->validate_laxi();
HXLINE( 240)		{
HXLINE( 241)			this->wrap_lnorm->zpp_inner->x = this->lnormx;
HXLINE( 242)			this->wrap_lnorm->zpp_inner->y = this->lnormy;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Edge_obj,lnorm_validate,(void))

void ZPP_Edge_obj::gnorm_validate(){
            	HX_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_261_gnorm_validate)
            	HX_STACK_THIS(this)
HXLINE( 266)		{
HXLINE( 266)			HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,_this) = this->polygon;
HXDLIN( 266)			if (_this->zip_gaxi) {
HXLINE( 266)				if (hx::IsNotNull( _this->body )) {
HXLINE( 266)					_this->zip_gaxi = false;
HXDLIN( 266)					_this->validate_laxi();
HXDLIN( 266)					{
HXLINE( 266)						HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this1,"_this") = _this->body;
HXDLIN( 266)						if (_this1->zip_axis) {
HXLINE( 266)							_this1->zip_axis = false;
HXDLIN( 266)							{
HXLINE( 266)								_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN( 266)								_this1->axisy = ::Math_obj::cos(_this1->rot);
            							}
            						}
            					}
HXDLIN( 266)					if (_this->zip_gverts) {
HXLINE( 266)						if (hx::IsNotNull( _this->body )) {
HXLINE( 266)							_this->zip_gverts = false;
HXDLIN( 266)							_this->validate_lverts();
HXDLIN( 266)							{
HXLINE( 266)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN( 266)								if (_this2->zip_axis) {
HXLINE( 266)									_this2->zip_axis = false;
HXDLIN( 266)									{
HXLINE( 266)										_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN( 266)										_this2->axisy = ::Math_obj::cos(_this2->rot);
            									}
            								}
            							}
HXDLIN( 266)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this->lverts->next;
HXDLIN( 266)							{
HXLINE( 266)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this->gverts->next;
HXDLIN( 266)								while(hx::IsNotNull( cx_ite )){
HXLINE( 266)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite;
HXDLIN( 266)									{
HXLINE( 266)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 266)										li = li->next;
HXDLIN( 266)										{
HXLINE( 266)											g->x = (_this->body->posx + ((_this->body->axisy * l->x) - (_this->body->axisx * l->y)));
HXDLIN( 266)											g->y = (_this->body->posy + ((l->x * _this->body->axisx) + (l->y * _this->body->axisy)));
            										}
            									}
HXDLIN( 266)									cx_ite = cx_ite->next;
            								}
            							}
            						}
            					}
HXDLIN( 266)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite) = _this->edges->head;
HXDLIN( 266)					{
HXLINE( 266)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this->gverts->next;
HXDLIN( 266)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN( 266)						cx_ite1 = cx_ite1->next;
HXDLIN( 266)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 266)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN( 266)							{
HXLINE( 266)								HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = ite->elt;
HXDLIN( 266)								ite = ite->next;
HXDLIN( 266)								e->gp0 = u;
HXDLIN( 266)								e->gp1 = v;
HXDLIN( 266)								{
HXLINE( 266)									e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
HXDLIN( 266)									e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
            								}
HXDLIN( 266)								e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
HXDLIN( 266)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE( 266)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN( 266)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN( 266)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN( 266)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN( 266)							u = v;
HXDLIN( 266)							cx_ite1 = cx_ite1->next;
            						}
HXDLIN( 266)						{
HXLINE( 266)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e1,"e") = ite->elt;
HXDLIN( 266)							e1->gp0 = u;
HXDLIN( 266)							e1->gp1 = _this->gverts->next;
HXDLIN( 266)							{
HXLINE( 266)								e1->gnormx = ((_this->body->axisy * e1->lnormx) - (_this->body->axisx * e1->lnormy));
HXDLIN( 266)								e1->gnormy = ((e1->lnormx * _this->body->axisx) + (e1->lnormy * _this->body->axisy));
            							}
HXDLIN( 266)							e1->gprojection = (((_this->body->posx * e1->gnormx) + (_this->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 266)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE( 266)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN( 266)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN( 266)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN( 266)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
HXLINE( 267)		{
HXLINE( 268)			this->wrap_gnorm->zpp_inner->x = this->gnormx;
HXLINE( 269)			this->wrap_gnorm->zpp_inner->y = this->gnormy;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Edge_obj,gnorm_validate,(void))

void ZPP_Edge_obj::getlnorm(){
            	HX_GC_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_288_getlnorm)
            	HX_STACK_THIS(this)
HXLINE( 289)		HX_VARI( Float,x) = this->lnormx;
HXDLIN( 289)		HX_VARI( Float,y) = this->lnormy;
HXDLIN( 289)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 289)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 289)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 289)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 289)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 289)			ret->zpp_pool = null();
            		}
HXDLIN( 289)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 289)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 289)			{
HXLINE( 289)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 289)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 289)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 289)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 289)					ret1->next = null();
            				}
HXDLIN( 289)				ret1->weak = false;
            			}
HXDLIN( 289)			ret1->_immutable = false;
HXDLIN( 289)			{
HXLINE( 289)				ret1->x = x;
HXDLIN( 289)				ret1->y = y;
            			}
HXDLIN( 289)			ret->zpp_inner = ret1;
HXDLIN( 289)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 289)			bool _hx_tmp;
HXDLIN( 289)			{
HXLINE( 289)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 289)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 289)					_this->_validate();
            				}
            			}
HXDLIN( 289)			if ((ret->zpp_inner->x == x)) {
HXLINE( 289)				{
HXLINE( 289)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 289)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 289)						_this1->_validate();
            					}
            				}
HXDLIN( 289)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 289)				_hx_tmp = false;
            			}
HXDLIN( 289)			if (!(_hx_tmp)) {
HXLINE( 289)				{
HXLINE( 289)					ret->zpp_inner->x = x;
HXDLIN( 289)					ret->zpp_inner->y = y;
            				}
HXDLIN( 289)				{
HXLINE( 289)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 289)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 289)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 289)		ret->zpp_inner->weak = false;
HXDLIN( 289)		this->wrap_lnorm = ret;
HXLINE( 290)		this->wrap_lnorm->zpp_inner->_immutable = true;
HXLINE( 291)		this->wrap_lnorm->zpp_inner->_validate = this->lnorm_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Edge_obj,getlnorm,(void))

void ZPP_Edge_obj::getgnorm(){
            	HX_GC_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_293_getgnorm)
            	HX_STACK_THIS(this)
HXLINE( 294)		HX_VARI( Float,x) = this->gnormx;
HXDLIN( 294)		HX_VARI( Float,y) = this->gnormy;
HXDLIN( 294)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 294)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 294)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 294)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 294)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 294)			ret->zpp_pool = null();
            		}
HXDLIN( 294)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 294)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 294)			{
HXLINE( 294)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 294)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 294)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 294)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 294)					ret1->next = null();
            				}
HXDLIN( 294)				ret1->weak = false;
            			}
HXDLIN( 294)			ret1->_immutable = false;
HXDLIN( 294)			{
HXLINE( 294)				ret1->x = x;
HXDLIN( 294)				ret1->y = y;
            			}
HXDLIN( 294)			ret->zpp_inner = ret1;
HXDLIN( 294)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 294)			bool _hx_tmp;
HXDLIN( 294)			{
HXLINE( 294)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 294)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 294)					_this->_validate();
            				}
            			}
HXDLIN( 294)			if ((ret->zpp_inner->x == x)) {
HXLINE( 294)				{
HXLINE( 294)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 294)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 294)						_this1->_validate();
            					}
            				}
HXDLIN( 294)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 294)				_hx_tmp = false;
            			}
HXDLIN( 294)			if (!(_hx_tmp)) {
HXLINE( 294)				{
HXLINE( 294)					ret->zpp_inner->x = x;
HXDLIN( 294)					ret->zpp_inner->y = y;
            				}
HXDLIN( 294)				{
HXLINE( 294)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 294)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 294)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 294)		ret->zpp_inner->weak = false;
HXDLIN( 294)		this->wrap_gnorm = ret;
HXLINE( 295)		this->wrap_gnorm->zpp_inner->_immutable = true;
HXLINE( 296)		this->wrap_gnorm->zpp_inner->_validate = this->gnorm_validate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Edge_obj,getgnorm,(void))

 ::zpp_nape::shape::ZPP_Edge ZPP_Edge_obj::zpp_pool;

bool ZPP_Edge_obj::internal;


hx::ObjectPtr< ZPP_Edge_obj > ZPP_Edge_obj::__new() {
	hx::ObjectPtr< ZPP_Edge_obj > __this = new ZPP_Edge_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Edge_obj > ZPP_Edge_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Edge_obj *__this = (ZPP_Edge_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Edge_obj), true, "zpp_nape.shape.ZPP_Edge"));
	*(void **)__this = ZPP_Edge_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Edge_obj::ZPP_Edge_obj()
{
}

void ZPP_Edge_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Edge);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(polygon,"polygon");
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(lnormx,"lnormx");
	HX_MARK_MEMBER_NAME(lnormy,"lnormy");
	HX_MARK_MEMBER_NAME(wrap_lnorm,"wrap_lnorm");
	HX_MARK_MEMBER_NAME(gnormx,"gnormx");
	HX_MARK_MEMBER_NAME(gnormy,"gnormy");
	HX_MARK_MEMBER_NAME(wrap_gnorm,"wrap_gnorm");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(lprojection,"lprojection");
	HX_MARK_MEMBER_NAME(gprojection,"gprojection");
	HX_MARK_MEMBER_NAME(lp0,"lp0");
	HX_MARK_MEMBER_NAME(gp0,"gp0");
	HX_MARK_MEMBER_NAME(lp1,"lp1");
	HX_MARK_MEMBER_NAME(gp1,"gp1");
	HX_MARK_MEMBER_NAME(tp0,"tp0");
	HX_MARK_MEMBER_NAME(tp1,"tp1");
	HX_MARK_END_CLASS();
}

void ZPP_Edge_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(polygon,"polygon");
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(lnormx,"lnormx");
	HX_VISIT_MEMBER_NAME(lnormy,"lnormy");
	HX_VISIT_MEMBER_NAME(wrap_lnorm,"wrap_lnorm");
	HX_VISIT_MEMBER_NAME(gnormx,"gnormx");
	HX_VISIT_MEMBER_NAME(gnormy,"gnormy");
	HX_VISIT_MEMBER_NAME(wrap_gnorm,"wrap_gnorm");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(lprojection,"lprojection");
	HX_VISIT_MEMBER_NAME(gprojection,"gprojection");
	HX_VISIT_MEMBER_NAME(lp0,"lp0");
	HX_VISIT_MEMBER_NAME(gp0,"gp0");
	HX_VISIT_MEMBER_NAME(lp1,"lp1");
	HX_VISIT_MEMBER_NAME(gp1,"gp1");
	HX_VISIT_MEMBER_NAME(tp0,"tp0");
	HX_VISIT_MEMBER_NAME(tp1,"tp1");
}

hx::Val ZPP_Edge_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lp0") ) { return hx::Val( lp0); }
		if (HX_FIELD_EQ(inName,"gp0") ) { return hx::Val( gp0); }
		if (HX_FIELD_EQ(inName,"lp1") ) { return hx::Val( lp1); }
		if (HX_FIELD_EQ(inName,"gp1") ) { return hx::Val( gp1); }
		if (HX_FIELD_EQ(inName,"tp0") ) { return hx::Val( tp0); }
		if (HX_FIELD_EQ(inName,"tp1") ) { return hx::Val( tp1); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lnormx") ) { return hx::Val( lnormx); }
		if (HX_FIELD_EQ(inName,"lnormy") ) { return hx::Val( lnormy); }
		if (HX_FIELD_EQ(inName,"gnormx") ) { return hx::Val( gnormx); }
		if (HX_FIELD_EQ(inName,"gnormy") ) { return hx::Val( gnormy); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"polygon") ) { return hx::Val( polygon); }
		if (HX_FIELD_EQ(inName,"wrapper") ) { return hx::Val( wrapper_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getlnorm") ) { return hx::Val( getlnorm_dyn()); }
		if (HX_FIELD_EQ(inName,"getgnorm") ) { return hx::Val( getgnorm_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wrap_lnorm") ) { return hx::Val( wrap_lnorm); }
		if (HX_FIELD_EQ(inName,"wrap_gnorm") ) { return hx::Val( wrap_gnorm); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lprojection") ) { return hx::Val( lprojection); }
		if (HX_FIELD_EQ(inName,"gprojection") ) { return hx::Val( gprojection); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lnorm_validate") ) { return hx::Val( lnorm_validate_dyn()); }
		if (HX_FIELD_EQ(inName,"gnorm_validate") ) { return hx::Val( gnorm_validate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Edge_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = internal; return true; }
	}
	return false;
}

hx::Val ZPP_Edge_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lp0") ) { lp0=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gp0") ) { gp0=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lp1") ) { lp1=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gp1") ) { gp1=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tp0") ) { tp0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tp1") ) { tp1=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::shape::ZPP_Edge >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::shape::Edge >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lnormx") ) { lnormx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lnormy") ) { lnormy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gnormx") ) { gnormx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gnormy") ) { gnormy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"polygon") ) { polygon=inValue.Cast<  ::zpp_nape::shape::ZPP_Polygon >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wrap_lnorm") ) { wrap_lnorm=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_gnorm") ) { wrap_gnorm=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lprojection") ) { lprojection=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gprojection") ) { gprojection=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Edge_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::shape::ZPP_Edge >(); return true; }
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void ZPP_Edge_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("polygon","\x7a","\x02","\x91","\x12"));
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("lnormx","\xd0","\x56","\x54","\xce"));
	outFields->push(HX_HCSTRING("lnormy","\xd1","\x56","\x54","\xce"));
	outFields->push(HX_HCSTRING("wrap_lnorm","\x33","\xb1","\xd7","\xa3"));
	outFields->push(HX_HCSTRING("gnormx","\xf5","\x88","\x8b","\xce"));
	outFields->push(HX_HCSTRING("gnormy","\xf6","\x88","\x8b","\xce"));
	outFields->push(HX_HCSTRING("wrap_gnorm","\xae","\xca","\xd6","\xc2"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("lprojection","\xfb","\xc7","\x60","\x22"));
	outFields->push(HX_HCSTRING("gprojection","\xb6","\xaf","\x08","\x9e"));
	outFields->push(HX_HCSTRING("lp0","\x2c","\x55","\x52","\x00"));
	outFields->push(HX_HCSTRING("gp0","\xe7","\x89","\x4e","\x00"));
	outFields->push(HX_HCSTRING("lp1","\x2d","\x55","\x52","\x00"));
	outFields->push(HX_HCSTRING("gp1","\xe8","\x89","\x4e","\x00"));
	outFields->push(HX_HCSTRING("tp0","\x34","\x67","\x58","\x00"));
	outFields->push(HX_HCSTRING("tp1","\x35","\x67","\x58","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Edge_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::shape::ZPP_Edge*/ ,(int)offsetof(ZPP_Edge_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::shape::ZPP_Polygon*/ ,(int)offsetof(ZPP_Edge_obj,polygon),HX_HCSTRING("polygon","\x7a","\x02","\x91","\x12")},
	{hx::fsObject /*::nape::shape::Edge*/ ,(int)offsetof(ZPP_Edge_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,lnormx),HX_HCSTRING("lnormx","\xd0","\x56","\x54","\xce")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,lnormy),HX_HCSTRING("lnormy","\xd1","\x56","\x54","\xce")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Edge_obj,wrap_lnorm),HX_HCSTRING("wrap_lnorm","\x33","\xb1","\xd7","\xa3")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,gnormx),HX_HCSTRING("gnormx","\xf5","\x88","\x8b","\xce")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,gnormy),HX_HCSTRING("gnormy","\xf6","\x88","\x8b","\xce")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Edge_obj,wrap_gnorm),HX_HCSTRING("wrap_gnorm","\xae","\xca","\xd6","\xc2")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,lprojection),HX_HCSTRING("lprojection","\xfb","\xc7","\x60","\x22")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,gprojection),HX_HCSTRING("gprojection","\xb6","\xaf","\x08","\x9e")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_Vec2*/ ,(int)offsetof(ZPP_Edge_obj,lp0),HX_HCSTRING("lp0","\x2c","\x55","\x52","\x00")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_Vec2*/ ,(int)offsetof(ZPP_Edge_obj,gp0),HX_HCSTRING("gp0","\xe7","\x89","\x4e","\x00")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_Vec2*/ ,(int)offsetof(ZPP_Edge_obj,lp1),HX_HCSTRING("lp1","\x2d","\x55","\x52","\x00")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_Vec2*/ ,(int)offsetof(ZPP_Edge_obj,gp1),HX_HCSTRING("gp1","\xe8","\x89","\x4e","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,tp0),HX_HCSTRING("tp0","\x34","\x67","\x58","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_Edge_obj,tp1),HX_HCSTRING("tp1","\x35","\x67","\x58","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Edge_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::shape::ZPP_Edge*/ ,(void *) &ZPP_Edge_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{hx::fsBool,(void *) &ZPP_Edge_obj::internal,HX_HCSTRING("internal","\x3d","\x67","\x76","\x28")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Edge_obj_sMemberFields[] = {
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("polygon","\x7a","\x02","\x91","\x12"),
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("wrapper","\x53","\xd5","\x64","\x0d"),
	HX_HCSTRING("lnormx","\xd0","\x56","\x54","\xce"),
	HX_HCSTRING("lnormy","\xd1","\x56","\x54","\xce"),
	HX_HCSTRING("wrap_lnorm","\x33","\xb1","\xd7","\xa3"),
	HX_HCSTRING("gnormx","\xf5","\x88","\x8b","\xce"),
	HX_HCSTRING("gnormy","\xf6","\x88","\x8b","\xce"),
	HX_HCSTRING("wrap_gnorm","\xae","\xca","\xd6","\xc2"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("lprojection","\xfb","\xc7","\x60","\x22"),
	HX_HCSTRING("gprojection","\xb6","\xaf","\x08","\x9e"),
	HX_HCSTRING("lp0","\x2c","\x55","\x52","\x00"),
	HX_HCSTRING("gp0","\xe7","\x89","\x4e","\x00"),
	HX_HCSTRING("lp1","\x2d","\x55","\x52","\x00"),
	HX_HCSTRING("gp1","\xe8","\x89","\x4e","\x00"),
	HX_HCSTRING("tp0","\x34","\x67","\x58","\x00"),
	HX_HCSTRING("tp1","\x35","\x67","\x58","\x00"),
	HX_HCSTRING("lnorm_validate","\x4d","\x36","\x10","\x2b"),
	HX_HCSTRING("gnorm_validate","\x72","\x95","\xad","\x5d"),
	HX_HCSTRING("getlnorm","\x52","\x5c","\xfa","\x44"),
	HX_HCSTRING("getgnorm","\xcd","\x75","\xf9","\x63"),
	::String(null()) };

static void ZPP_Edge_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Edge_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Edge_obj::zpp_pool,"zpp_pool");
	HX_MARK_MEMBER_NAME(ZPP_Edge_obj::internal,"internal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Edge_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Edge_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Edge_obj::zpp_pool,"zpp_pool");
	HX_VISIT_MEMBER_NAME(ZPP_Edge_obj::internal,"internal");
};

#endif

hx::Class ZPP_Edge_obj::__mClass;

static ::String ZPP_Edge_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("internal","\x3d","\x67","\x76","\x28"),
	::String(null())
};

void ZPP_Edge_obj::__register()
{
	hx::Object *dummy = new ZPP_Edge_obj;
	ZPP_Edge_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.shape.ZPP_Edge","\xd0","\x61","\xc9","\x4f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Edge_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Edge_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Edge_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Edge_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Edge_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Edge_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Edge_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Edge_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Edge_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Edge_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_176_boot)
HXLINE( 176)		zpp_pool = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_14f4cdc48d2739cb_209_boot)
HXLINE( 209)		internal = false;
            	}
}

} // end namespace zpp_nape
} // end namespace shape
