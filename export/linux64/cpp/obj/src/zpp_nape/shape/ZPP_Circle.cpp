// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_174_new,"zpp_nape.shape.ZPP_Circle","new",0x6cd9e4d5,"zpp_nape.shape.ZPP_Circle.new","zpp_nape/shape/Circle.hx",174,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_182___clear,"zpp_nape.shape.ZPP_Circle","__clear",0x3bbbbd62,"zpp_nape.shape.ZPP_Circle.__clear","zpp_nape/shape/Circle.hx",182,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_183_invalidate_radius,"zpp_nape.shape.ZPP_Circle","invalidate_radius",0x6466d50b,"zpp_nape.shape.ZPP_Circle.invalidate_radius","zpp_nape/shape/Circle.hx",183,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_189_localCOM_validate,"zpp_nape.shape.ZPP_Circle","localCOM_validate",0x520c74d4,"zpp_nape.shape.ZPP_Circle.localCOM_validate","zpp_nape/shape/Circle.hx",189,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_209_localCOM_invalidate,"zpp_nape.shape.ZPP_Circle","localCOM_invalidate",0xeaf2c939,"zpp_nape.shape.ZPP_Circle.localCOM_invalidate","zpp_nape/shape/Circle.hx",209,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_238_setupLocalCOM,"zpp_nape.shape.ZPP_Circle","setupLocalCOM",0x660d8fe8,"zpp_nape.shape.ZPP_Circle.setupLocalCOM","zpp_nape/shape/Circle.hx",238,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_250___validate_aabb,"zpp_nape.shape.ZPP_Circle","__validate_aabb",0x1c4ab6fe,"zpp_nape.shape.ZPP_Circle.__validate_aabb","zpp_nape/shape/Circle.hx",250,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_281__force_validate_aabb,"zpp_nape.shape.ZPP_Circle","_force_validate_aabb",0x3909c481,"zpp_nape.shape.ZPP_Circle._force_validate_aabb","zpp_nape/shape/Circle.hx",281,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_291___validate_sweepRadius,"zpp_nape.shape.ZPP_Circle","__validate_sweepRadius",0xcf89e6c0,"zpp_nape.shape.ZPP_Circle.__validate_sweepRadius","zpp_nape/shape/Circle.hx",291,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_295___validate_area_inertia,"zpp_nape.shape.ZPP_Circle","__validate_area_inertia",0x159d0d66,"zpp_nape.shape.ZPP_Circle.__validate_area_inertia","zpp_nape/shape/Circle.hx",295,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_300___validate_angDrag,"zpp_nape.shape.ZPP_Circle","__validate_angDrag",0x22d64250,"zpp_nape.shape.ZPP_Circle.__validate_angDrag","zpp_nape/shape/Circle.hx",300,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_307___scale,"zpp_nape.shape.ZPP_Circle","__scale",0x6c2f1a5f,"zpp_nape.shape.ZPP_Circle.__scale","zpp_nape/shape/Circle.hx",307,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_317___translate,"zpp_nape.shape.ZPP_Circle","__translate",0x1ebb31a3,"zpp_nape.shape.ZPP_Circle.__translate","zpp_nape/shape/Circle.hx",317,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_334___rotate,"zpp_nape.shape.ZPP_Circle","__rotate",0xcc0254e6,"zpp_nape.shape.ZPP_Circle.__rotate","zpp_nape/shape/Circle.hx",334,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_364___transform,"zpp_nape.shape.ZPP_Circle","__transform",0x1ace87c1,"zpp_nape.shape.ZPP_Circle.__transform","zpp_nape/shape/Circle.hx",364,0x3e895b1e)
HX_DEFINE_STACK_FRAME(_hx_pos_63e7c9490f5a9e14_376___copy,"zpp_nape.shape.ZPP_Circle","__copy",0x21918180,"zpp_nape.shape.ZPP_Circle.__copy","zpp_nape/shape/Circle.hx",376,0x3e895b1e)
namespace zpp_nape{
namespace shape{

void ZPP_Circle_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_174_new)
            	HX_STACK_THIS(this)
HXLINE( 176)		this->radius = ((Float)0.0);
HXLINE( 175)		this->outer_zn = null();
HXLINE( 178)		super::__construct((int)0);
HXLINE( 179)		this->circle = hx::ObjectPtr<OBJ_>(this);
HXLINE( 180)		this->zip_localCOM = false;
            	}

Dynamic ZPP_Circle_obj::__CreateEmpty() { return new ZPP_Circle_obj; }

void *ZPP_Circle_obj::_hx_vtable = 0;

Dynamic ZPP_Circle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Circle_obj > _hx_result = new ZPP_Circle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Circle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x247ad52d) {
		if (inClassId<=(int)0x0532c385) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0532c385;
		} else {
			return inClassId==(int)0x247ad52d;
		}
	} else {
		return inClassId==(int)0x31c749e8;
	}
}

void ZPP_Circle_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_182___clear)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,_hx___clear,(void))

void ZPP_Circle_obj::invalidate_radius(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_183_invalidate_radius)
            	HX_STACK_THIS(this)
HXLINE( 184)		this->invalidate_area_inertia();
HXLINE( 185)		this->invalidate_angDrag();
HXLINE( 186)		{
HXLINE( 186)			this->zip_aabb = true;
HXDLIN( 186)			if (hx::IsNotNull( this->body )) {
HXLINE( 186)				this->body->zip_aabb = true;
            			}
            		}
HXLINE( 187)		if (hx::IsNotNull( this->body )) {
HXLINE( 187)			this->body->wake();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,invalidate_radius,(void))

void ZPP_Circle_obj::localCOM_validate(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_189_localCOM_validate)
            	HX_STACK_THIS(this)
HXLINE( 190)		this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXLINE( 191)		this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,localCOM_validate,(void))

void ZPP_Circle_obj::localCOM_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_209_localCOM_invalidate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 210)		{
HXLINE( 211)			this->localCOMx = x->x;
HXLINE( 212)			this->localCOMy = x->y;
            		}
HXLINE( 230)		this->invalidate_localCOM();
HXLINE( 231)		if (hx::IsNotNull( this->body )) {
HXLINE( 231)			this->body->wake();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Circle_obj,localCOM_invalidate,(void))

void ZPP_Circle_obj::setupLocalCOM(){
            	HX_GC_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_238_setupLocalCOM)
            	HX_STACK_THIS(this)
HXLINE( 240)		HX_VARI( Float,x) = this->localCOMx;
HXDLIN( 240)		HX_VARI( Float,y) = this->localCOMy;
HXDLIN( 240)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 240)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 240)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 240)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 240)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 240)			ret->zpp_pool = null();
            		}
HXDLIN( 240)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 240)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 240)			{
HXLINE( 240)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 240)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 240)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 240)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 240)					ret1->next = null();
            				}
HXDLIN( 240)				ret1->weak = false;
            			}
HXDLIN( 240)			ret1->_immutable = false;
HXDLIN( 240)			{
HXLINE( 240)				ret1->x = x;
HXDLIN( 240)				ret1->y = y;
            			}
HXDLIN( 240)			ret->zpp_inner = ret1;
HXDLIN( 240)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 240)			bool _hx_tmp;
HXDLIN( 240)			{
HXLINE( 240)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 240)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 240)					_this->_validate();
            				}
            			}
HXDLIN( 240)			if ((ret->zpp_inner->x == x)) {
HXLINE( 240)				{
HXLINE( 240)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 240)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 240)						_this1->_validate();
            					}
            				}
HXDLIN( 240)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 240)				_hx_tmp = false;
            			}
HXDLIN( 240)			if (!(_hx_tmp)) {
HXLINE( 240)				{
HXLINE( 240)					ret->zpp_inner->x = x;
HXDLIN( 240)					ret->zpp_inner->y = y;
            				}
HXDLIN( 240)				{
HXLINE( 240)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 240)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 240)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 240)		ret->zpp_inner->weak = false;
HXDLIN( 240)		this->wrap_localCOM = ret;
HXLINE( 241)		this->wrap_localCOM->zpp_inner->_inuse = true;
HXLINE( 242)		this->wrap_localCOM->zpp_inner->_validate = this->localCOM_validate_dyn();
HXLINE( 243)		this->wrap_localCOM->zpp_inner->_invalidate = this->localCOM_invalidate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,setupLocalCOM,(void))

void ZPP_Circle_obj::_hx___validate_aabb(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_250___validate_aabb)
            	HX_STACK_THIS(this)
HXLINE( 251)		if (this->zip_worldCOM) {
HXLINE( 251)			if (hx::IsNotNull( this->body )) {
HXLINE( 251)				this->zip_worldCOM = false;
HXDLIN( 251)				if (this->zip_localCOM) {
HXLINE( 251)					this->zip_localCOM = false;
HXDLIN( 251)					if ((this->type == (int)1)) {
HXLINE( 251)						HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,_this) = this->polygon;
HXDLIN( 251)						if (hx::IsNull( _this->lverts->next->next )) {
HXLINE( 251)							_this->localCOMx = _this->lverts->next->x;
HXDLIN( 251)							_this->localCOMy = _this->lverts->next->y;
            						}
            						else {
HXLINE( 251)							if (hx::IsNull( _this->lverts->next->next->next )) {
HXLINE( 251)								{
HXLINE( 251)									_this->localCOMx = _this->lverts->next->x;
HXDLIN( 251)									_this->localCOMy = _this->lverts->next->y;
            								}
HXDLIN( 251)								{
HXLINE( 251)									_this->localCOMx = (_this->localCOMx + _this->lverts->next->next->x);
HXDLIN( 251)									_this->localCOMy = (_this->localCOMy + _this->lverts->next->next->y);
            								}
HXDLIN( 251)								{
HXLINE( 251)									_this->localCOMx = (_this->localCOMx * ((Float)0.5));
HXDLIN( 251)									_this->localCOMy = (_this->localCOMy * ((Float)0.5));
            								}
            							}
            							else {
HXLINE( 251)								{
HXLINE( 251)									_this->localCOMx = (int)0;
HXDLIN( 251)									_this->localCOMy = (int)0;
            								}
HXDLIN( 251)								HX_VARI( Float,area) = ((Float)0.0);
HXDLIN( 251)								{
HXLINE( 251)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this->lverts->next;
HXDLIN( 251)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite;
HXDLIN( 251)									cx_ite = cx_ite->next;
HXDLIN( 251)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite;
HXDLIN( 251)									cx_ite = cx_ite->next;
HXDLIN( 251)									while(hx::IsNotNull( cx_ite )){
HXLINE( 251)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite;
HXDLIN( 251)										{
HXLINE( 251)											area = (area + (v->x * (w->y - u->y)));
HXDLIN( 251)											HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 251)											_this->localCOMx = (_this->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 251)											_this->localCOMy = (_this->localCOMy + ((v->y + w->y) * cf));
            										}
HXDLIN( 251)										u = v;
HXDLIN( 251)										v = w;
HXDLIN( 251)										cx_ite = cx_ite->next;
            									}
HXDLIN( 251)									cx_ite = _this->lverts->next;
HXDLIN( 251)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite;
HXDLIN( 251)									{
HXLINE( 251)										area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 251)										HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 251)										_this->localCOMx = (_this->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 251)										_this->localCOMy = (_this->localCOMy + ((v->y + w1->y) * cf1));
            									}
HXDLIN( 251)									u = v;
HXDLIN( 251)									cx_ite = cx_ite->next;
HXDLIN( 251)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite;
HXDLIN( 251)									{
HXLINE( 251)										area = (area + (w1->x * (w2->y - u->y)));
HXDLIN( 251)										HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN( 251)										_this->localCOMx = (_this->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN( 251)										_this->localCOMy = (_this->localCOMy + ((w1->y + w2->y) * cf2));
            									}
            								}
HXDLIN( 251)								area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN( 251)								{
HXLINE( 251)									HX_VARI( Float,t) = area;
HXDLIN( 251)									_this->localCOMx = (_this->localCOMx * t);
HXDLIN( 251)									_this->localCOMy = (_this->localCOMy * t);
            								}
            							}
            						}
            					}
HXDLIN( 251)					if (hx::IsNotNull( this->wrap_localCOM )) {
HXLINE( 251)						this->wrap_localCOM->zpp_inner->x = this->localCOMx;
HXDLIN( 251)						this->wrap_localCOM->zpp_inner->y = this->localCOMy;
            					}
            				}
HXDLIN( 251)				{
HXLINE( 251)					HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this1,"_this") = this->body;
HXDLIN( 251)					if (_this1->zip_axis) {
HXLINE( 251)						_this1->zip_axis = false;
HXDLIN( 251)						{
HXLINE( 251)							_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN( 251)							_this1->axisy = ::Math_obj::cos(_this1->rot);
            						}
            					}
            				}
HXDLIN( 251)				{
HXLINE( 251)					this->worldCOMx = (this->body->posx + ((this->body->axisy * this->localCOMx) - (this->body->axisx * this->localCOMy)));
HXDLIN( 251)					this->worldCOMy = (this->body->posy + ((this->localCOMx * this->body->axisx) + (this->localCOMy * this->body->axisy)));
            				}
            			}
            		}
HXLINE( 252)		HX_VARI( Float,rx) = this->radius;
HXLINE( 253)		HX_VARI( Float,ry) = this->radius;
HXLINE( 270)		{
HXLINE( 271)			this->aabb->minx = (this->worldCOMx - rx);
HXLINE( 272)			this->aabb->miny = (this->worldCOMy - ry);
            		}
HXLINE( 274)		{
HXLINE( 275)			this->aabb->maxx = (this->worldCOMx + rx);
HXLINE( 276)			this->aabb->maxy = (this->worldCOMy + ry);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,_hx___validate_aabb,(void))

void ZPP_Circle_obj::_force_validate_aabb(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_281__force_validate_aabb)
            	HX_STACK_THIS(this)
HXLINE( 282)		{
HXLINE( 283)			this->worldCOMx = (this->body->posx + ((this->body->axisy * this->localCOMx) - (this->body->axisx * this->localCOMy)));
HXLINE( 284)			this->worldCOMy = (this->body->posy + ((this->localCOMx * this->body->axisx) + (this->localCOMy * this->body->axisy)));
            		}
HXLINE( 286)		this->aabb->minx = (this->worldCOMx - this->radius);
HXLINE( 287)		this->aabb->miny = (this->worldCOMy - this->radius);
HXLINE( 288)		this->aabb->maxx = (this->worldCOMx + this->radius);
HXLINE( 289)		this->aabb->maxy = (this->worldCOMy + this->radius);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,_force_validate_aabb,(void))

void ZPP_Circle_obj::_hx___validate_sweepRadius(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_291___validate_sweepRadius)
            	HX_STACK_THIS(this)
HXLINE( 292)		this->sweepCoef = ::Math_obj::sqrt(((this->localCOMx * this->localCOMx) + (this->localCOMy * this->localCOMy)));
HXLINE( 293)		this->sweepRadius = (this->sweepCoef + this->radius);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,_hx___validate_sweepRadius,(void))

void ZPP_Circle_obj::_hx___validate_area_inertia(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_295___validate_area_inertia)
            	HX_STACK_THIS(this)
HXLINE( 296)		HX_VARI( Float,r2) = (this->radius * this->radius);
HXLINE( 297)		this->area = (r2 * ::Math_obj::PI);
HXLINE( 298)		this->inertia = ((r2 * ((Float)0.5)) + ((this->localCOMx * this->localCOMx) + (this->localCOMy * this->localCOMy)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,_hx___validate_area_inertia,(void))

void ZPP_Circle_obj::_hx___validate_angDrag(){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_300___validate_angDrag)
            	HX_STACK_THIS(this)
HXLINE( 301)		HX_VARI( Float,lc) = ((this->localCOMx * this->localCOMx) + (this->localCOMy * this->localCOMy));
HXLINE( 302)		HX_VARI( Float,r2) = (this->radius * this->radius);
HXLINE( 304)		this->angDrag = (((lc + ((int)2 * r2)) * (this->material->dynamicFriction * ::nape::Config_obj::fluidAngularDragFriction)) + (((((Float)0.5) * ::nape::Config_obj::fluidAngularDrag) * ((int)1 + ::nape::Config_obj::fluidVacuumDrag)) * lc));
HXLINE( 305)		 ::zpp_nape::shape::ZPP_Circle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 305)		_hx_tmp->angDrag = ((Float)_hx_tmp->angDrag / (Float)((int)2 * (lc + (((Float)0.5) * r2))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,_hx___validate_angDrag,(void))

void ZPP_Circle_obj::_hx___scale(Float sx,Float sy){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_307___scale)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
HXLINE( 308)		Float factor;
HXDLIN( 308)		if ((sx < (int)0)) {
HXLINE( 308)			factor = -(sx);
            		}
            		else {
HXLINE( 308)			factor = sx;
            		}
HXDLIN( 308)		Float factor1;
HXDLIN( 308)		if ((sy < (int)0)) {
HXLINE( 308)			factor1 = -(sy);
            		}
            		else {
HXLINE( 308)			factor1 = sy;
            		}
HXDLIN( 308)		HX_VARI_NAME( Float,factor2,"factor") = ((Float)(factor + factor1) / (Float)(int)2);
HXLINE( 309)		 ::zpp_nape::shape::ZPP_Circle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 309)		Float _hx_tmp1;
HXDLIN( 309)		if ((factor2 < (int)0)) {
HXLINE( 309)			_hx_tmp1 = -(factor2);
            		}
            		else {
HXLINE( 309)			_hx_tmp1 = factor2;
            		}
HXDLIN( 309)		_hx_tmp->radius = (_hx_tmp->radius * _hx_tmp1);
HXLINE( 310)		this->invalidate_radius();
HXLINE( 311)		if ((((this->localCOMx * this->localCOMx) + (this->localCOMy * this->localCOMy)) > (int)0)) {
HXLINE( 312)			 ::zpp_nape::shape::ZPP_Circle _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 312)			_hx_tmp2->localCOMx = (_hx_tmp2->localCOMx * sx);
HXLINE( 313)			 ::zpp_nape::shape::ZPP_Circle _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 313)			_hx_tmp3->localCOMy = (_hx_tmp3->localCOMy * sy);
HXLINE( 314)			this->invalidate_localCOM();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Circle_obj,_hx___scale,(void))

void ZPP_Circle_obj::_hx___translate(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_317___translate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 318)		{
HXLINE( 328)			 ::zpp_nape::shape::ZPP_Circle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 328)			_hx_tmp->localCOMx = (_hx_tmp->localCOMx + x);
HXLINE( 329)			 ::zpp_nape::shape::ZPP_Circle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 329)			_hx_tmp1->localCOMy = (_hx_tmp1->localCOMy + y);
            		}
HXLINE( 331)		this->invalidate_localCOM();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Circle_obj,_hx___translate,(void))

void ZPP_Circle_obj::_hx___rotate(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_334___rotate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 334)		if ((((this->localCOMx * this->localCOMx) + (this->localCOMy * this->localCOMy)) > (int)0)) {
HXLINE( 335)			HX_VARI( Float,tx) = ((Float)0.0);
HXLINE( 336)			HX_VARI( Float,ty) = ((Float)0.0);
HXLINE( 337)			{
HXLINE( 338)				tx = ((y * this->localCOMx) - (x * this->localCOMy));
HXLINE( 339)				ty = ((this->localCOMx * x) + (this->localCOMy * y));
            			}
HXLINE( 341)			{
HXLINE( 342)				this->localCOMx = tx;
HXLINE( 343)				this->localCOMy = ty;
            			}
HXLINE( 361)			this->invalidate_localCOM();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Circle_obj,_hx___rotate,(void))

void ZPP_Circle_obj::_hx___transform( ::nape::geom::Mat23 m){
            	HX_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_364___transform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(m,"m")
HXLINE( 365)		HX_VARI( Float,det) = ((m->zpp_inner->a * m->zpp_inner->d) - (m->zpp_inner->b * m->zpp_inner->c));
HXLINE( 366)		if ((det < (int)0)) {
HXLINE( 366)			det = -(det);
            		}
HXLINE( 367)		 ::zpp_nape::shape::ZPP_Circle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 367)		_hx_tmp->radius = (_hx_tmp->radius * ::Math_obj::sqrt(det));
HXLINE( 368)		{
HXLINE( 369)			HX_VARI( Float,t) = (((m->zpp_inner->a * this->localCOMx) + (m->zpp_inner->b * this->localCOMy)) + m->zpp_inner->tx);
HXLINE( 370)			this->localCOMy = (((m->zpp_inner->c * this->localCOMx) + (m->zpp_inner->d * this->localCOMy)) + m->zpp_inner->ty);
HXLINE( 371)			this->localCOMx = t;
            		}
HXLINE( 373)		this->invalidate_radius();
HXLINE( 374)		this->invalidate_localCOM();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Circle_obj,_hx___transform,(void))

 ::zpp_nape::shape::ZPP_Circle ZPP_Circle_obj::__copy(){
            	HX_GC_STACKFRAME(&_hx_pos_63e7c9490f5a9e14_376___copy)
            	HX_STACK_THIS(this)
HXLINE( 377)		HX_VARI(  ::zpp_nape::shape::ZPP_Circle,ret) =  ::nape::shape::Circle_obj::__alloc( HX_CTX ,this->radius,null(),null(),null())->zpp_inner_zn;
HXLINE( 378)		{
HXLINE( 379)			ret->localCOMx = this->localCOMx;
HXLINE( 380)			ret->localCOMy = this->localCOMy;
            		}
HXLINE( 398)		ret->zip_localCOM = false;
HXLINE( 399)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Circle_obj,__copy,return )


hx::ObjectPtr< ZPP_Circle_obj > ZPP_Circle_obj::__new() {
	hx::ObjectPtr< ZPP_Circle_obj > __this = new ZPP_Circle_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Circle_obj > ZPP_Circle_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Circle_obj *__this = (ZPP_Circle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Circle_obj), true, "zpp_nape.shape.ZPP_Circle"));
	*(void **)__this = ZPP_Circle_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Circle_obj::ZPP_Circle_obj()
{
}

void ZPP_Circle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Circle);
	HX_MARK_MEMBER_NAME(outer_zn,"outer_zn");
	HX_MARK_MEMBER_NAME(radius,"radius");
	 ::zpp_nape::shape::ZPP_Shape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_Circle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zn,"outer_zn");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	 ::zpp_nape::shape::ZPP_Shape_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_Circle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius); }
		if (HX_FIELD_EQ(inName,"__copy") ) { return hx::Val( __copy_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__clear") ) { return hx::Val( _hx___clear_dyn()); }
		if (HX_FIELD_EQ(inName,"__scale") ) { return hx::Val( _hx___scale_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { return hx::Val( outer_zn); }
		if (HX_FIELD_EQ(inName,"__rotate") ) { return hx::Val( _hx___rotate_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__translate") ) { return hx::Val( _hx___translate_dyn()); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setupLocalCOM") ) { return hx::Val( setupLocalCOM_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__validate_aabb") ) { return hx::Val( _hx___validate_aabb_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"invalidate_radius") ) { return hx::Val( invalidate_radius_dyn()); }
		if (HX_FIELD_EQ(inName,"localCOM_validate") ) { return hx::Val( localCOM_validate_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__validate_angDrag") ) { return hx::Val( _hx___validate_angDrag_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"localCOM_invalidate") ) { return hx::Val( localCOM_invalidate_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_force_validate_aabb") ) { return hx::Val( _force_validate_aabb_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__validate_sweepRadius") ) { return hx::Val( _hx___validate_sweepRadius_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__validate_area_inertia") ) { return hx::Val( _hx___validate_area_inertia_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_Circle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"outer_zn") ) { outer_zn=inValue.Cast<  ::nape::shape::Circle >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Circle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"));
	outFields->push(HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Circle_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::shape::Circle*/ ,(int)offsetof(ZPP_Circle_obj,outer_zn),HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2")},
	{hx::fsFloat,(int)offsetof(ZPP_Circle_obj,radius),HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Circle_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Circle_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zn","\x38","\x07","\xb0","\xa2"),
	HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"),
	HX_HCSTRING("__clear","\x6d","\xca","\xb9","\xb2"),
	HX_HCSTRING("invalidate_radius","\xd6","\xbd","\xe5","\x99"),
	HX_HCSTRING("localCOM_validate","\x9f","\x5d","\x8b","\x87"),
	HX_HCSTRING("localCOM_invalidate","\xc4","\xba","\x95","\xac"),
	HX_HCSTRING("setupLocalCOM","\x33","\x77","\xff","\x8f"),
	HX_HCSTRING("__validate_aabb","\x09","\x47","\xfd","\x13"),
	HX_HCSTRING("_force_validate_aabb","\x96","\x2c","\xfa","\xe5"),
	HX_HCSTRING("__validate_sweepRadius","\x15","\x3e","\x74","\xe7"),
	HX_HCSTRING("__validate_area_inertia","\x71","\x20","\xbf","\xea"),
	HX_HCSTRING("__validate_angDrag","\x25","\x0b","\x63","\xbc"),
	HX_HCSTRING("__scale","\x6a","\x27","\x2d","\xe3"),
	HX_HCSTRING("__translate","\x2e","\x20","\xac","\x77"),
	HX_HCSTRING("__rotate","\x7b","\xb1","\x4f","\x73"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__copy","\xd5","\x1e","\xbd","\xf0"),
	::String(null()) };

static void ZPP_Circle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Circle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Circle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Circle_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_Circle_obj::__mClass;

void ZPP_Circle_obj::__register()
{
	hx::Object *dummy = new ZPP_Circle_obj;
	ZPP_Circle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.shape.ZPP_Circle","\x63","\xd6","\xcf","\xf9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_Circle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Circle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Circle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Circle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Circle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Circle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace shape
