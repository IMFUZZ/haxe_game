// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionVertex
#include <zpp_nape/util/ZPP_Set_ZPP_PartitionVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_1953_new,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","new",0xa7a6988e,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.new","zpp_nape/util/RBTree.hx",1953,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_1980_free,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","free",0x04defcbe,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.free","zpp_nape/util/RBTree.hx",1980,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_1987_alloc,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","alloc",0x594b5423,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.alloc","zpp_nape/util/RBTree.hx",1987,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_1996_verify,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","verify",0x2a418c0b,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.verify","zpp_nape/util/RBTree.hx",1996,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2062_empty,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","empty",0xa791ea3b,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.empty","zpp_nape/util/RBTree.hx",2062,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2065_singular,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","singular",0xab2979e9,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.singular","zpp_nape/util/RBTree.hx",2065,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2067_size,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","size",0x0d7000d3,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.size","zpp_nape/util/RBTree.hx",2067,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2098_has,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","has",0xa7a20788,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.has","zpp_nape/util/RBTree.hx",2098,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2100_find,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","find",0x04d8304b,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.find","zpp_nape/util/RBTree.hx",2100,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2109_has_weak,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","has_weak",0x4f3423cf,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.has_weak","zpp_nape/util/RBTree.hx",2109,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2111_find_weak,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","find_weak",0x8c44582c,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.find_weak","zpp_nape/util/RBTree.hx",2111,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2121_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","lower_bound",0x5f6c8e6e,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.lower_bound","zpp_nape/util/RBTree.hx",2121,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2157_first,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","first",0x385527de,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.first","zpp_nape/util/RBTree.hx",2157,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2170_pop_front,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","pop_front",0x78cadee9,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.pop_front","zpp_nape/util/RBTree.hx",2170,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2195_remove,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","remove",0x8d8aa4d6,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.remove","zpp_nape/util/RBTree.hx",2195,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2197_successor_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","successor_node",0xb5ee190d,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.successor_node","zpp_nape/util/RBTree.hx",2197,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2220_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","predecessor_node",0x4d06798a,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.predecessor_node","zpp_nape/util/RBTree.hx",2220,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2243_successor,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","successor",0x32e9dc54,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.successor","zpp_nape/util/RBTree.hx",2243,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2255_predecessor,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","predecessor",0xcf474cf7,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.predecessor","zpp_nape/util/RBTree.hx",2255,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2267_remove_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","remove_node",0x31dd394b,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.remove_node","zpp_nape/util/RBTree.hx",2267,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2388_clear,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","clear",0x8013213b,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.clear","zpp_nape/util/RBTree.hx",2388,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2392_clear_with,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","clear_with",0xbb0d1aca,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.clear_with","zpp_nape/util/RBTree.hx",2392,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2400_clear_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","clear_node",0xb51eaec6,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.clear_node","zpp_nape/util/RBTree.hx",2400,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2435___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","__fix_neg_red",0x15c41d86,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.__fix_neg_red","zpp_nape/util/RBTree.hx",2435,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2503___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","__fix_dbl_red",0x23dc4b64,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.__fix_dbl_red","zpp_nape/util/RBTree.hx",2503,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2591_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","try_insert_bool",0x7ee1e71a,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.try_insert_bool","zpp_nape/util/RBTree.hx",2591,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2683_try_insert,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","try_insert",0x9d92128f,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.try_insert","zpp_nape/util/RBTree.hx",2683,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_2775_insert,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","insert",0x26df4bcb,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.insert","zpp_nape/util/RBTree.hx",2775,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_03b953c698427010_1954_boot,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","boot",0x0237e444,"zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.boot","zpp_nape/util/RBTree.hx",1954,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_PartitionVertex_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_1953_new)
            	HX_STACK_THIS(this)
HXLINE(1994)		this->colour = (int)0;
HXLINE(1993)		this->parent = null();
HXLINE(1992)		this->next = null();
HXLINE(1991)		this->prev = null();
HXLINE(1990)		this->data = null();
HXLINE(1989)		this->swapped = null();
HXLINE(1988)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_PartitionVertex_obj::__CreateEmpty() { return new ZPP_Set_ZPP_PartitionVertex_obj; }

void *ZPP_Set_ZPP_PartitionVertex_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_PartitionVertex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_PartitionVertex_obj > _hx_result = new ZPP_Set_ZPP_PartitionVertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_PartitionVertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6ac993d8;
}

void ZPP_Set_ZPP_PartitionVertex_obj::free(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_1980_free)
            	HX_STACK_THIS(this)
HXLINE(1981)		this->data = null();
HXLINE(1982)		this->lt = null();
HXLINE(1983)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,free,(void))

void ZPP_Set_ZPP_PartitionVertex_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_1987_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,alloc,(void))

bool ZPP_Set_ZPP_PartitionVertex_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_1996_verify)
            	HX_STACK_THIS(this)
HXLINE(2006)		if (!(this->empty())) {
HXLINE(2007)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,set_ite) = this->parent;
HXLINE(2008)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(2008)				set_ite = set_ite->prev;
            			}
HXLINE(2009)			while(hx::IsNotNull( set_ite )){
HXLINE(2010)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,i) = set_ite->data;
HXLINE(2011)				{
HXLINE(2012)					HX_VARI( bool,prei) = true;
HXLINE(2022)					if (!(this->empty())) {
HXLINE(2023)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,set_ite1,"set_ite") = this->parent;
HXLINE(2024)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE(2024)							set_ite1 = set_ite1->prev;
            						}
HXLINE(2025)						while(hx::IsNotNull( set_ite1 )){
HXLINE(2026)							HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,j) = set_ite1->data;
HXLINE(2028)							if (!(prei)) {
HXLINE(2029)								bool _hx_tmp;
HXDLIN(2029)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE(2029)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE(2029)									_hx_tmp = false;
            								}
HXDLIN(2029)								if (_hx_tmp) {
HXLINE(2029)									return false;
            								}
            							}
            							else {
HXLINE(2031)								if (hx::IsEq( i,j )) {
HXLINE(2031)									prei = false;
            								}
            								else {
HXLINE(2033)									bool _hx_tmp1;
HXDLIN(2033)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE(2033)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE(2033)										_hx_tmp1 = false;
            									}
HXDLIN(2033)									if (_hx_tmp1) {
HXLINE(2033)										return false;
            									}
            								}
            							}
HXLINE(2036)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE(2037)								set_ite1 = set_ite1->next;
HXLINE(2038)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE(2038)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE(2041)								while(true){
HXLINE(2041)									bool _hx_tmp2;
HXDLIN(2041)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE(2041)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE(2041)										_hx_tmp2 = false;
            									}
HXDLIN(2041)									if (!(_hx_tmp2)) {
HXLINE(2041)										goto _hx_goto_8;
            									}
HXDLIN(2041)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE(2042)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE(2048)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(2049)					set_ite = set_ite->next;
HXLINE(2050)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(2050)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(2053)					while(true){
HXLINE(2053)						bool _hx_tmp3;
HXDLIN(2053)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(2053)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(2053)							_hx_tmp3 = false;
            						}
HXDLIN(2053)						if (!(_hx_tmp3)) {
HXLINE(2053)							goto _hx_goto_10;
            						}
HXDLIN(2053)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE(2054)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(2059)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,verify,return )

bool ZPP_Set_ZPP_PartitionVertex_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2062_empty)
            	HX_STACK_THIS(this)
HXLINE(2062)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,empty,return )

bool ZPP_Set_ZPP_PartitionVertex_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2065_singular)
            	HX_STACK_THIS(this)
HXLINE(2065)		bool _hx_tmp;
HXDLIN(2065)		if (hx::IsNotNull( this->parent )) {
HXLINE(2065)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE(2065)			_hx_tmp = false;
            		}
HXDLIN(2065)		if (_hx_tmp) {
HXLINE(2065)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE(2065)			return false;
            		}
HXDLIN(2065)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,singular,return )

int ZPP_Set_ZPP_PartitionVertex_obj::size(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2067_size)
            	HX_STACK_THIS(this)
HXLINE(2068)		HX_VARI( int,ret) = (int)0;
HXLINE(2078)		if (!(this->empty())) {
HXLINE(2079)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,set_ite) = this->parent;
HXLINE(2080)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(2080)				set_ite = set_ite->prev;
            			}
HXLINE(2081)			while(hx::IsNotNull( set_ite )){
HXLINE(2083)				ret = (ret + (int)1);
HXLINE(2084)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(2085)					set_ite = set_ite->next;
HXLINE(2086)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(2086)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(2089)					while(true){
HXLINE(2089)						bool _hx_tmp;
HXDLIN(2089)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(2089)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(2089)							_hx_tmp = false;
            						}
HXDLIN(2089)						if (!(_hx_tmp)) {
HXLINE(2089)							goto _hx_goto_17;
            						}
HXDLIN(2089)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE(2090)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(2095)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,size,return )

bool ZPP_Set_ZPP_PartitionVertex_obj::has( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2098_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2098)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::find( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2100_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2101)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = this->parent;
HXLINE(2102)		while(true){
HXLINE(2102)			bool _hx_tmp;
HXDLIN(2102)			if (hx::IsNotNull( cur )) {
HXLINE(2102)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE(2102)				_hx_tmp = false;
            			}
HXDLIN(2102)			if (!(_hx_tmp)) {
HXLINE(2102)				goto _hx_goto_20;
            			}
HXLINE(2103)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(2103)				cur = cur->prev;
            			}
            			else {
HXLINE(2104)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE(2106)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,find,return )

bool ZPP_Set_ZPP_PartitionVertex_obj::has_weak( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2109_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2109)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::find_weak( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2111_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2112)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = this->parent;
HXLINE(2113)		while(hx::IsNotNull( cur )){
HXLINE(2114)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(2114)				cur = cur->prev;
            			}
            			else {
HXLINE(2115)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(2115)					cur = cur->next;
            				}
            				else {
HXLINE(2116)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE(2118)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,find_weak,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::lower_bound( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2121_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2122)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,ret) = null();
HXLINE(2132)		if (!(this->empty())) {
HXLINE(2133)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,set_ite) = this->parent;
HXLINE(2134)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(2134)				set_ite = set_ite->prev;
            			}
HXLINE(2135)			while(hx::IsNotNull( set_ite )){
HXLINE(2136)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,elt) = set_ite->data;
HXLINE(2138)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE(2139)					ret = elt;
HXLINE(2140)					goto _hx_goto_26;
            				}
HXLINE(2143)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(2144)					set_ite = set_ite->next;
HXLINE(2145)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(2145)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(2148)					while(true){
HXLINE(2148)						bool _hx_tmp;
HXDLIN(2148)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(2148)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(2148)							_hx_tmp = false;
            						}
HXDLIN(2148)						if (!(_hx_tmp)) {
HXLINE(2148)							goto _hx_goto_28;
            						}
HXDLIN(2148)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE(2149)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE(2121)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,lower_bound,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::first(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2157_first)
            	HX_STACK_THIS(this)
HXLINE(2166)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = this->parent;
HXLINE(2167)		while(hx::IsNotNull( cur->prev )){
HXLINE(2167)			cur = cur->prev;
            		}
HXLINE(2168)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,first,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2170_pop_front)
            	HX_STACK_THIS(this)
HXLINE(2179)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = this->parent;
HXLINE(2180)		while(hx::IsNotNull( cur->prev )){
HXLINE(2180)			cur = cur->prev;
            		}
HXLINE(2181)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,ret) = cur->data;
HXLINE(2182)		this->remove_node(cur);
HXLINE(2183)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,pop_front,return )

void ZPP_Set_ZPP_PartitionVertex_obj::remove( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2195_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2195)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex cur){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2197_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(2206)		if (hx::IsNotNull( cur->next )) {
HXLINE(2207)			cur = cur->next;
HXLINE(2208)			while(hx::IsNotNull( cur->prev )){
HXLINE(2208)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE(2211)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,pre) = cur;
HXLINE(2212)			cur = cur->parent;
HXLINE(2213)			while(true){
HXLINE(2213)				bool _hx_tmp;
HXDLIN(2213)				if (hx::IsNotNull( cur )) {
HXLINE(2213)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE(2213)					_hx_tmp = false;
            				}
HXDLIN(2213)				if (!(_hx_tmp)) {
HXLINE(2213)					goto _hx_goto_36;
            				}
HXLINE(2214)				pre = cur;
HXLINE(2215)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE(2218)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex cur){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2220_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(2229)		if (hx::IsNotNull( cur->prev )) {
HXLINE(2230)			cur = cur->prev;
HXLINE(2231)			while(hx::IsNotNull( cur->next )){
HXLINE(2231)				cur = cur->next;
            			}
            		}
            		else {
HXLINE(2234)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,pre) = cur;
HXLINE(2235)			cur = cur->parent;
HXLINE(2236)			while(true){
HXLINE(2236)				bool _hx_tmp;
HXDLIN(2236)				if (hx::IsNotNull( cur )) {
HXLINE(2236)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE(2236)					_hx_tmp = false;
            				}
HXDLIN(2236)				if (!(_hx_tmp)) {
HXLINE(2236)					goto _hx_goto_39;
            				}
HXLINE(2237)				pre = cur;
HXLINE(2238)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE(2241)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,predecessor_node,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::successor( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2243_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2252)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,node) = this->successor_node(this->find(obj));
HXLINE(2253)		if (hx::IsNull( node )) {
HXLINE(2253)			return null();
            		}
            		else {
HXLINE(2253)			return node->data;
            		}
HXDLIN(2253)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,successor,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::predecessor( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2255_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2264)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,node) = this->predecessor_node(this->find(obj));
HXLINE(2265)		if (hx::IsNull( node )) {
HXLINE(2265)			return null();
            		}
            		else {
HXLINE(2265)			return node->data;
            		}
HXDLIN(2265)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,predecessor,return )

void ZPP_Set_ZPP_PartitionVertex_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex cur){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2267_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(2276)		bool _hx_tmp;
HXDLIN(2276)		if (hx::IsNotNull( cur->next )) {
HXLINE(2276)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE(2276)			_hx_tmp = false;
            		}
HXDLIN(2276)		if (_hx_tmp) {
HXLINE(2277)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,sm) = cur->next;
HXLINE(2278)			while(hx::IsNotNull( sm->prev )){
HXLINE(2278)				sm = sm->prev;
            			}
HXLINE(2279)			{
HXLINE(2280)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,t) = cur->data;
HXLINE(2281)				cur->data = sm->data;
HXLINE(2282)				sm->data = t;
            			}
HXLINE(2284)			if (hx::IsNotNull( this->swapped )) {
HXLINE(2284)				this->swapped(cur->data,sm->data);
            			}
HXLINE(2285)			cur = sm;
            		}
HXLINE(2295)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,child);
HXDLIN(2295)		if (hx::IsNull( cur->prev )) {
HXLINE(2295)			child = cur->next;
            		}
            		else {
HXLINE(2295)			child = cur->prev;
            		}
HXLINE(2296)		if ((cur->colour == (int)1)) {
HXLINE(2297)			bool _hx_tmp1;
HXDLIN(2297)			if (hx::IsNull( cur->prev )) {
HXLINE(2297)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE(2297)				_hx_tmp1 = true;
            			}
HXDLIN(2297)			if (_hx_tmp1) {
HXLINE(2297)				child->colour = (int)1;
            			}
            			else {
HXLINE(2298)				if (hx::IsNotNull( cur->parent )) {
HXLINE(2299)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,parent) = cur->parent;
HXLINE(2300)					while(true){
HXLINE(2301)						parent->colour++;
HXLINE(2302)						parent->prev->colour--;
HXLINE(2303)						parent->next->colour--;
HXLINE(2304)						{
HXLINE(2305)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,child1,"child") = parent->prev;
HXLINE(2306)							if ((child1->colour == (int)-1)) {
HXLINE(2307)								this->_hx___fix_neg_red(child1);
HXLINE(2308)								goto _hx_goto_44;
            							}
            							else {
HXLINE(2310)								if ((child1->colour == (int)0)) {
HXLINE(2312)									bool _hx_tmp2;
HXDLIN(2312)									if (hx::IsNotNull( child1->prev )) {
HXLINE(2312)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE(2312)										_hx_tmp2 = false;
            									}
HXDLIN(2312)									if (_hx_tmp2) {
HXLINE(2313)										this->_hx___fix_dbl_red(child1->prev);
HXLINE(2314)										goto _hx_goto_44;
            									}
HXLINE(2318)									bool _hx_tmp3;
HXDLIN(2318)									if (hx::IsNotNull( child1->next )) {
HXLINE(2318)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE(2318)										_hx_tmp3 = false;
            									}
HXDLIN(2318)									if (_hx_tmp3) {
HXLINE(2319)										this->_hx___fix_dbl_red(child1->next);
HXLINE(2320)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(2325)						{
HXLINE(2326)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,child2,"child") = parent->next;
HXLINE(2327)							if ((child2->colour == (int)-1)) {
HXLINE(2328)								this->_hx___fix_neg_red(child2);
HXLINE(2329)								goto _hx_goto_44;
            							}
            							else {
HXLINE(2331)								if ((child2->colour == (int)0)) {
HXLINE(2333)									bool _hx_tmp4;
HXDLIN(2333)									if (hx::IsNotNull( child2->prev )) {
HXLINE(2333)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE(2333)										_hx_tmp4 = false;
            									}
HXDLIN(2333)									if (_hx_tmp4) {
HXLINE(2334)										this->_hx___fix_dbl_red(child2->prev);
HXLINE(2335)										goto _hx_goto_44;
            									}
HXLINE(2339)									bool _hx_tmp5;
HXDLIN(2339)									if (hx::IsNotNull( child2->next )) {
HXLINE(2339)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE(2339)										_hx_tmp5 = false;
            									}
HXDLIN(2339)									if (_hx_tmp5) {
HXLINE(2340)										this->_hx___fix_dbl_red(child2->next);
HXLINE(2341)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(2346)						if ((parent->colour == (int)2)) {
HXLINE(2347)							if (hx::IsNull( parent->parent )) {
HXLINE(2348)								parent->colour = (int)1;
            							}
            							else {
HXLINE(2351)								parent = parent->parent;
HXLINE(2352)								continue;
            							}
            						}
HXLINE(2355)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE(2359)		{
HXLINE(2360)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,par) = cur->parent;
HXLINE(2361)			if (hx::IsNull( par )) {
HXLINE(2362)				this->parent = child;
            			}
            			else {
HXLINE(2364)				if (hx::IsEq( par->prev,cur )) {
HXLINE(2364)					par->prev = child;
            				}
            				else {
HXLINE(2365)					par->next = child;
            				}
            			}
HXLINE(2366)			if (hx::IsNotNull( child )) {
HXLINE(2366)				child->parent = par;
            			}
            		}
HXLINE(2368)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE(2369)		{
HXLINE(2370)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,o) = cur;
HXLINE(2379)			{
HXLINE(2379)				o->data = null();
HXDLIN(2379)				o->lt = null();
HXDLIN(2379)				o->swapped = null();
            			}
HXLINE(2380)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2381)			::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,remove_node,(void))

void ZPP_Set_ZPP_PartitionVertex_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2388_clear)
            	HX_STACK_THIS(this)
HXLINE(2388)		if (hx::IsNotNull( this->parent )) {
HXLINE(2388)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = this->parent;
HXDLIN(2388)			while(hx::IsNotNull( cur )){
HXLINE(2388)				if (hx::IsNotNull( cur->prev )) {
HXLINE(2388)					cur = cur->prev;
            				}
            				else {
HXLINE(2388)					if (hx::IsNotNull( cur->next )) {
HXLINE(2388)						cur = cur->next;
            					}
            					else {
HXLINE(2388)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,ret) = cur->parent;
HXDLIN(2388)						if (hx::IsNotNull( ret )) {
HXLINE(2388)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(2388)								ret->prev = null();
            							}
            							else {
HXLINE(2388)								ret->next = null();
            							}
HXDLIN(2388)							cur->parent = null();
            						}
HXDLIN(2388)						{
HXLINE(2388)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,o) = cur;
HXDLIN(2388)							{
HXLINE(2388)								o->data = null();
HXDLIN(2388)								o->lt = null();
HXDLIN(2388)								o->swapped = null();
            							}
HXDLIN(2388)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(2388)							::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = o;
            						}
HXDLIN(2388)						cur = ret;
            					}
            				}
            			}
HXDLIN(2388)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionVertex_obj,clear,(void))

void ZPP_Set_ZPP_PartitionVertex_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2392_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(2392)		if (hx::IsNull( this->parent )) {
HXLINE(2392)			return;
            		}
            		else {
HXLINE(2394)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = this->parent;
HXLINE(2395)			while(hx::IsNotNull( cur )){
HXLINE(2395)				if (hx::IsNotNull( cur->prev )) {
HXLINE(2395)					cur = cur->prev;
            				}
            				else {
HXLINE(2395)					if (hx::IsNotNull( cur->next )) {
HXLINE(2395)						cur = cur->next;
            					}
            					else {
HXLINE(2395)						lambda(cur->data);
HXDLIN(2395)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,ret) = cur->parent;
HXDLIN(2395)						if (hx::IsNotNull( ret )) {
HXLINE(2395)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(2395)								ret->prev = null();
            							}
            							else {
HXLINE(2395)								ret->next = null();
            							}
HXDLIN(2395)							cur->parent = null();
            						}
HXDLIN(2395)						{
HXLINE(2395)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,o) = cur;
HXDLIN(2395)							{
HXLINE(2395)								o->data = null();
HXDLIN(2395)								o->lt = null();
HXDLIN(2395)								o->swapped = null();
            							}
HXDLIN(2395)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(2395)							::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = o;
            						}
HXDLIN(2395)						cur = ret;
            					}
            				}
            			}
HXLINE(2396)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2400_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(2409)		lambda(node->data);
HXLINE(2410)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,ret) = node->parent;
HXLINE(2411)		if (hx::IsNotNull( ret )) {
HXLINE(2412)			if (hx::IsEq( node,ret->prev )) {
HXLINE(2412)				ret->prev = null();
            			}
            			else {
HXLINE(2413)				ret->next = null();
            			}
HXLINE(2414)			node->parent = null();
            		}
HXLINE(2416)		{
HXLINE(2426)			{
HXLINE(2426)				node->data = null();
HXDLIN(2426)				node->lt = null();
HXDLIN(2426)				node->swapped = null();
            			}
HXLINE(2427)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2428)			::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = node;
            		}
HXLINE(2433)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_PartitionVertex_obj,clear_node,return )

void ZPP_Set_ZPP_PartitionVertex_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex negred){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2435___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE(2436)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,parent) = negred->parent;
HXLINE(2437)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,child);
HXDLIN(2437)		if (hx::IsEq( parent->prev,negred )) {
HXLINE(2438)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,nl) = negred->prev;
HXLINE(2439)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,nr) = negred->next;
HXLINE(2440)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,trl) = nr->prev;
HXLINE(2441)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,trr) = nr->next;
HXLINE(2442)			nl->colour = (int)0;
HXLINE(2443)			negred->colour = (parent->colour = (int)1);
HXLINE(2444)			{
HXLINE(2445)				negred->next = trl;
HXLINE(2446)				if (hx::IsNotNull( trl )) {
HXLINE(2446)					trl->parent = negred;
            				}
            			}
HXLINE(2448)			{
HXLINE(2449)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,t) = parent->data;
HXLINE(2450)				parent->data = nr->data;
HXLINE(2451)				nr->data = t;
            			}
HXLINE(2453)			if (hx::IsNotNull( this->swapped )) {
HXLINE(2453)				this->swapped(parent->data,nr->data);
            			}
HXLINE(2454)			{
HXLINE(2455)				nr->prev = trr;
HXLINE(2456)				if (hx::IsNotNull( trr )) {
HXLINE(2456)					trr->parent = nr;
            				}
            			}
HXLINE(2458)			{
HXLINE(2459)				nr->next = parent->next;
HXLINE(2460)				if (hx::IsNotNull( parent->next )) {
HXLINE(2460)					parent->next->parent = nr;
            				}
            			}
HXLINE(2462)			{
HXLINE(2463)				parent->next = nr;
HXLINE(2464)				if (hx::IsNotNull( nr )) {
HXLINE(2464)					nr->parent = parent;
            				}
            			}
HXLINE(2437)			child = nl;
            		}
            		else {
HXLINE(2469)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,nl1,"nl") = negred->next;
HXLINE(2470)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,nr1,"nr") = negred->prev;
HXLINE(2471)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,trl1,"trl") = nr1->next;
HXLINE(2472)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,trr1,"trr") = nr1->prev;
HXLINE(2473)			nl1->colour = (int)0;
HXLINE(2474)			negred->colour = (parent->colour = (int)1);
HXLINE(2475)			{
HXLINE(2476)				negred->prev = trl1;
HXLINE(2477)				if (hx::IsNotNull( trl1 )) {
HXLINE(2477)					trl1->parent = negred;
            				}
            			}
HXLINE(2479)			{
HXLINE(2480)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,t1,"t") = parent->data;
HXLINE(2481)				parent->data = nr1->data;
HXLINE(2482)				nr1->data = t1;
            			}
HXLINE(2484)			if (hx::IsNotNull( this->swapped )) {
HXLINE(2484)				this->swapped(parent->data,nr1->data);
            			}
HXLINE(2485)			{
HXLINE(2486)				nr1->next = trr1;
HXLINE(2487)				if (hx::IsNotNull( trr1 )) {
HXLINE(2487)					trr1->parent = nr1;
            				}
            			}
HXLINE(2489)			{
HXLINE(2490)				nr1->prev = parent->prev;
HXLINE(2491)				if (hx::IsNotNull( parent->prev )) {
HXLINE(2491)					parent->prev->parent = nr1;
            				}
            			}
HXLINE(2493)			{
HXLINE(2494)				parent->prev = nr1;
HXLINE(2495)				if (hx::IsNotNull( nr1 )) {
HXLINE(2495)					nr1->parent = parent;
            				}
            			}
HXLINE(2437)			child = nl1;
            		}
HXLINE(2499)		bool _hx_tmp;
HXDLIN(2499)		if (hx::IsNotNull( child->prev )) {
HXLINE(2499)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE(2499)			_hx_tmp = false;
            		}
HXDLIN(2499)		if (_hx_tmp) {
HXLINE(2499)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE(2500)			bool _hx_tmp1;
HXDLIN(2500)			if (hx::IsNotNull( child->next )) {
HXLINE(2500)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE(2500)				_hx_tmp1 = false;
            			}
HXDLIN(2500)			if (_hx_tmp1) {
HXLINE(2500)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_PartitionVertex_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex x){
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_2503___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(2503)		while(true){
HXLINE(2504)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,par) = x->parent;
HXLINE(2505)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,g) = par->parent;
HXLINE(2506)			if (hx::IsNull( g )) {
HXLINE(2507)				par->colour = (int)1;
HXLINE(2508)				goto _hx_goto_52;
            			}
HXLINE(2510)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,n1);
HXDLIN(2510)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,n2);
HXDLIN(2510)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,n3);
HXDLIN(2510)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,t1);
HXDLIN(2510)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,t2);
HXDLIN(2510)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,t3);
HXDLIN(2510)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,t4);
HXLINE(2511)			if (hx::IsEq( par,g->prev )) {
HXLINE(2512)				n3 = g;
HXLINE(2513)				t4 = g->next;
HXLINE(2514)				if (hx::IsEq( x,par->prev )) {
HXLINE(2515)					n1 = x;
HXLINE(2516)					n2 = par;
HXLINE(2517)					t1 = x->prev;
HXLINE(2518)					t2 = x->next;
HXLINE(2519)					t3 = par->next;
            				}
            				else {
HXLINE(2522)					n1 = par;
HXLINE(2523)					n2 = x;
HXLINE(2524)					t1 = par->prev;
HXLINE(2525)					t2 = x->prev;
HXLINE(2526)					t3 = x->next;
            				}
            			}
            			else {
HXLINE(2530)				n1 = g;
HXLINE(2531)				t1 = g->prev;
HXLINE(2532)				if (hx::IsEq( x,par->prev )) {
HXLINE(2533)					n2 = x;
HXLINE(2534)					n3 = par;
HXLINE(2535)					t2 = x->prev;
HXLINE(2536)					t3 = x->next;
HXLINE(2537)					t4 = par->next;
            				}
            				else {
HXLINE(2540)					n2 = par;
HXLINE(2541)					n3 = x;
HXLINE(2542)					t2 = par->prev;
HXLINE(2543)					t3 = x->prev;
HXLINE(2544)					t4 = x->next;
            				}
            			}
HXLINE(2547)			{
HXLINE(2548)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,par1,"par") = g->parent;
HXLINE(2549)				if (hx::IsNull( par1 )) {
HXLINE(2550)					this->parent = n2;
            				}
            				else {
HXLINE(2552)					if (hx::IsEq( par1->prev,g )) {
HXLINE(2552)						par1->prev = n2;
            					}
            					else {
HXLINE(2553)						par1->next = n2;
            					}
            				}
HXLINE(2554)				if (hx::IsNotNull( n2 )) {
HXLINE(2554)					n2->parent = par1;
            				}
            			}
HXLINE(2556)			{
HXLINE(2557)				n1->prev = t1;
HXLINE(2558)				if (hx::IsNotNull( t1 )) {
HXLINE(2558)					t1->parent = n1;
            				}
            			}
HXLINE(2560)			{
HXLINE(2561)				n1->next = t2;
HXLINE(2562)				if (hx::IsNotNull( t2 )) {
HXLINE(2562)					t2->parent = n1;
            				}
            			}
HXLINE(2564)			{
HXLINE(2565)				n2->prev = n1;
HXLINE(2566)				if (hx::IsNotNull( n1 )) {
HXLINE(2566)					n1->parent = n2;
            				}
            			}
HXLINE(2568)			{
HXLINE(2569)				n2->next = n3;
HXLINE(2570)				if (hx::IsNotNull( n3 )) {
HXLINE(2570)					n3->parent = n2;
            				}
            			}
HXLINE(2572)			{
HXLINE(2573)				n3->prev = t3;
HXLINE(2574)				if (hx::IsNotNull( t3 )) {
HXLINE(2574)					t3->parent = n3;
            				}
            			}
HXLINE(2576)			{
HXLINE(2577)				n3->next = t4;
HXLINE(2578)				if (hx::IsNotNull( t4 )) {
HXLINE(2578)					t4->parent = n3;
            				}
            			}
HXLINE(2580)			n2->colour = (g->colour - (int)1);
HXLINE(2581)			n1->colour = (int)1;
HXLINE(2582)			n3->colour = (int)1;
HXLINE(2583)			if (hx::IsEq( n2,this->parent )) {
HXLINE(2583)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE(2584)				bool _hx_tmp;
HXDLIN(2584)				if ((n2->colour == (int)0)) {
HXLINE(2584)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE(2584)					_hx_tmp = false;
            				}
HXDLIN(2584)				if (_hx_tmp) {
HXLINE(2585)					x = n2;
HXLINE(2586)					continue;
            				}
            			}
HXLINE(2588)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_PartitionVertex_obj::try_insert_bool( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_GC_STACKFRAME(&_hx_pos_03b953c698427010_2591_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2592)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,x) = null();
HXLINE(2593)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = null();
HXLINE(2594)		if (hx::IsNull( this->parent )) {
HXLINE(2596)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(2597)				x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(2603)				x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2604)				::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = x->next;
HXLINE(2605)				x->next = null();
            			}
HXLINE(2612)			x->data = obj;
HXLINE(2613)			this->parent = x;
            		}
            		else {
HXLINE(2616)			cur = this->parent;
HXLINE(2617)			while(true){
HXLINE(2618)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(2619)					if (hx::IsNull( cur->prev )) {
HXLINE(2621)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(2622)							x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(2628)							x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2629)							::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = x->next;
HXLINE(2630)							x->next = null();
            						}
HXLINE(2637)						x->data = obj;
HXLINE(2638)						cur->prev = x;
HXLINE(2639)						x->parent = cur;
HXLINE(2640)						goto _hx_goto_54;
            					}
            					else {
HXLINE(2642)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(2644)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(2645)						if (hx::IsNull( cur->next )) {
HXLINE(2647)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(2648)								x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(2654)								x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2655)								::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = x->next;
HXLINE(2656)								x->next = null();
            							}
HXLINE(2663)							x->data = obj;
HXLINE(2664)							cur->next = x;
HXLINE(2665)							x->parent = cur;
HXLINE(2666)							goto _hx_goto_54;
            						}
            						else {
HXLINE(2668)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(2670)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE(2673)		if (hx::IsNull( x )) {
HXLINE(2673)			return false;
            		}
            		else {
HXLINE(2675)			if (hx::IsNull( x->parent )) {
HXLINE(2675)				x->colour = (int)1;
            			}
            			else {
HXLINE(2677)				x->colour = (int)0;
HXLINE(2678)				if ((x->parent->colour == (int)0)) {
HXLINE(2678)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(2680)			return true;
            		}
HXLINE(2673)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::try_insert( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_GC_STACKFRAME(&_hx_pos_03b953c698427010_2683_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2684)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,x) = null();
HXLINE(2685)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = null();
HXLINE(2686)		if (hx::IsNull( this->parent )) {
HXLINE(2688)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(2689)				x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(2695)				x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2696)				::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = x->next;
HXLINE(2697)				x->next = null();
            			}
HXLINE(2704)			x->data = obj;
HXLINE(2705)			this->parent = x;
            		}
            		else {
HXLINE(2708)			cur = this->parent;
HXLINE(2709)			while(true){
HXLINE(2710)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(2711)					if (hx::IsNull( cur->prev )) {
HXLINE(2713)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(2714)							x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(2720)							x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2721)							::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = x->next;
HXLINE(2722)							x->next = null();
            						}
HXLINE(2729)						x->data = obj;
HXLINE(2730)						cur->prev = x;
HXLINE(2731)						x->parent = cur;
HXLINE(2732)						goto _hx_goto_56;
            					}
            					else {
HXLINE(2734)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(2736)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(2737)						if (hx::IsNull( cur->next )) {
HXLINE(2739)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(2740)								x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(2746)								x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2747)								::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = x->next;
HXLINE(2748)								x->next = null();
            							}
HXLINE(2755)							x->data = obj;
HXLINE(2756)							cur->next = x;
HXLINE(2757)							x->parent = cur;
HXLINE(2758)							goto _hx_goto_56;
            						}
            						else {
HXLINE(2760)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(2762)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE(2765)		if (hx::IsNull( x )) {
HXLINE(2765)			return cur;
            		}
            		else {
HXLINE(2767)			if (hx::IsNull( x->parent )) {
HXLINE(2767)				x->colour = (int)1;
            			}
            			else {
HXLINE(2769)				x->colour = (int)0;
HXLINE(2770)				if ((x->parent->colour == (int)0)) {
HXLINE(2770)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(2772)			return x;
            		}
HXLINE(2765)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::insert( ::zpp_nape::geom::ZPP_PartitionVertex obj){
            	HX_GC_STACKFRAME(&_hx_pos_03b953c698427010_2775_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2784)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,x);
HXLINE(2786)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(2787)			x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2793)			x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(2794)			::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = x->next;
HXLINE(2795)			x->next = null();
            		}
HXLINE(2802)		x->data = obj;
HXLINE(2803)		if (hx::IsNull( this->parent )) {
HXLINE(2803)			this->parent = x;
            		}
            		else {
HXLINE(2805)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,cur) = this->parent;
HXLINE(2806)			while(true){
HXLINE(2807)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(2808)					if (hx::IsNull( cur->prev )) {
HXLINE(2809)						cur->prev = x;
HXLINE(2810)						x->parent = cur;
HXLINE(2811)						goto _hx_goto_58;
            					}
            					else {
HXLINE(2813)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(2816)					if (hx::IsNull( cur->next )) {
HXLINE(2817)						cur->next = x;
HXLINE(2818)						x->parent = cur;
HXLINE(2819)						goto _hx_goto_58;
            					}
            					else {
HXLINE(2821)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(2825)		if (hx::IsNull( x->parent )) {
HXLINE(2825)			x->colour = (int)1;
            		}
            		else {
HXLINE(2827)			x->colour = (int)0;
HXLINE(2828)			if ((x->parent->colour == (int)0)) {
HXLINE(2828)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(2838)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionVertex_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_PartitionVertex_obj > ZPP_Set_ZPP_PartitionVertex_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_PartitionVertex_obj > __this = new ZPP_Set_ZPP_PartitionVertex_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_PartitionVertex_obj > ZPP_Set_ZPP_PartitionVertex_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_PartitionVertex_obj *__this = (ZPP_Set_ZPP_PartitionVertex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_PartitionVertex_obj), true, "zpp_nape.util.ZPP_Set_ZPP_PartitionVertex"));
	*(void **)__this = ZPP_Set_ZPP_PartitionVertex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_PartitionVertex_obj::ZPP_Set_ZPP_PartitionVertex_obj()
{
}

void ZPP_Set_ZPP_PartitionVertex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_PartitionVertex);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_PartitionVertex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_PartitionVertex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_PartitionVertex_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_PartitionVertex_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_PartitionVertex_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_PartitionVertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_PartitionVertex_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionVertex_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionVertex_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionVertex_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionVertex_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionVertex_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionVertex_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_PartitionVertex_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_PartitionVertex_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex*/ ,(void *) &ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_PartitionVertex_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_PartitionVertex_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_PartitionVertex_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_PartitionVertex_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_PartitionVertex_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_PartitionVertex_obj::__mClass;

static ::String ZPP_Set_ZPP_PartitionVertex_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_PartitionVertex_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_PartitionVertex_obj;
	ZPP_Set_ZPP_PartitionVertex_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_PartitionVertex","\x9c","\xf9","\x77","\xe8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_PartitionVertex_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_PartitionVertex_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_PartitionVertex_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_PartitionVertex_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_PartitionVertex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_PartitionVertex_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_PartitionVertex_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_PartitionVertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_PartitionVertex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_PartitionVertex_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_03b953c698427010_1954_boot)
HXLINE(1954)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
