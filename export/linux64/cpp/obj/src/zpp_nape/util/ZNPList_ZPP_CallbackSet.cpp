// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CallbackSet
#include <zpp_nape/util/ZNPList_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CallbackSet
#include <zpp_nape/util/ZNPNode_ZPP_CallbackSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_592_new,"zpp_nape.util.ZNPList_ZPP_CallbackSet","new",0x554ed6ba,"zpp_nape.util.ZNPList_ZPP_CallbackSet.new","zpp_nape/util/Lists.hx",592,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_598_begin,"zpp_nape.util.ZNPList_ZPP_CallbackSet","begin",0x7ee2bb03,"zpp_nape.util.ZNPList_ZPP_CallbackSet.begin","zpp_nape/util/Lists.hx",598,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_605_setbegin,"zpp_nape.util.ZNPList_ZPP_CallbackSet","setbegin",0x08ca96ad,"zpp_nape.util.ZNPList_ZPP_CallbackSet.setbegin","zpp_nape/util/Lists.hx",605,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_611_add,"zpp_nape.util.ZNPList_ZPP_CallbackSet","add",0x5544f87b,"zpp_nape.util.ZNPList_ZPP_CallbackSet.add","zpp_nape/util/Lists.hx",611,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_615_inlined_add,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_add",0x1b7e3ce7,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_add","zpp_nape/util/Lists.hx",615,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_661_addAll,"zpp_nape.util.ZNPList_ZPP_CallbackSet","addAll",0x8ba4f766,"zpp_nape.util.ZNPList_ZPP_CallbackSet.addAll","zpp_nape/util/Lists.hx",661,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_671_insert,"zpp_nape.util.ZNPList_ZPP_CallbackSet","insert",0x8a87311f,"zpp_nape.util.ZNPList_ZPP_CallbackSet.insert","zpp_nape/util/Lists.hx",671,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_675_inlined_insert,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_insert",0xe7d37833,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_insert","zpp_nape/util/Lists.hx",675,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_719_pop,"zpp_nape.util.ZNPList_ZPP_CallbackSet","pop",0x555063eb,"zpp_nape.util.ZNPList_ZPP_CallbackSet.pop","zpp_nape/util/Lists.hx",719,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_723_inlined_pop,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_pop",0x1b89a857,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_pop","zpp_nape/util/Lists.hx",723,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_757_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CallbackSet","pop_unsafe",0xd0ba553a,"zpp_nape.util.ZNPList_ZPP_CallbackSet.pop_unsafe","zpp_nape/util/Lists.hx",757,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_761_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_pop_unsafe",0xbb39b64e,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_pop_unsafe","zpp_nape/util/Lists.hx",761,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_783_remove,"zpp_nape.util.ZNPList_ZPP_CallbackSet","remove",0xf1328a2a,"zpp_nape.util.ZNPList_ZPP_CallbackSet.remove","zpp_nape/util/Lists.hx",783,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_785_try_remove,"zpp_nape.util.ZNPList_ZPP_CallbackSet","try_remove",0xe7e48aee,"zpp_nape.util.ZNPList_ZPP_CallbackSet.try_remove","zpp_nape/util/Lists.hx",785,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_819_inlined_remove,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_remove",0x4e7ed13e,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_remove","zpp_nape/util/Lists.hx",819,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_823_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_try_remove",0xd263ec02,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_try_remove","zpp_nape/util/Lists.hx",823,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_847_erase,"zpp_nape.util.ZNPList_ZPP_CallbackSet","erase",0x41a9b9c0,"zpp_nape.util.ZNPList_ZPP_CallbackSet.erase","zpp_nape/util/Lists.hx",847,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_851_inlined_erase,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_erase",0xfc0df12c,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_erase","zpp_nape/util/Lists.hx",851,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_897_splice,"zpp_nape.util.ZNPList_ZPP_CallbackSet","splice",0xac487362,"zpp_nape.util.ZNPList_ZPP_CallbackSet.splice","zpp_nape/util/Lists.hx",897,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_902_clear,"zpp_nape.util.ZNPList_ZPP_CallbackSet","clear",0x16e84267,"zpp_nape.util.ZNPList_ZPP_CallbackSet.clear","zpp_nape/util/Lists.hx",902,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_907_inlined_clear,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_clear",0xd14c79d3,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_clear","zpp_nape/util/Lists.hx",907,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_912_reverse,"zpp_nape.util.ZNPList_ZPP_CallbackSet","reverse",0x4302747c,"zpp_nape.util.ZNPList_ZPP_CallbackSet.reverse","zpp_nape/util/Lists.hx",912,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_928_empty,"zpp_nape.util.ZNPList_ZPP_CallbackSet","empty",0x3e670b67,"zpp_nape.util.ZNPList_ZPP_CallbackSet.empty","zpp_nape/util/Lists.hx",928,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_933_size,"zpp_nape.util.ZNPList_ZPP_CallbackSet","size",0x52fe2927,"zpp_nape.util.ZNPList_ZPP_CallbackSet.size","zpp_nape/util/Lists.hx",933,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_936_has,"zpp_nape.util.ZNPList_ZPP_CallbackSet","has",0x554a45b4,"zpp_nape.util.ZNPList_ZPP_CallbackSet.has","zpp_nape/util/Lists.hx",936,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_940_inlined_has,"zpp_nape.util.ZNPList_ZPP_CallbackSet","inlined_has",0x1b838a20,"zpp_nape.util.ZNPList_ZPP_CallbackSet.inlined_has","zpp_nape/util/Lists.hx",940,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_971_front,"zpp_nape.util.ZNPList_ZPP_CallbackSet","front",0xd51ae983,"zpp_nape.util.ZNPList_ZPP_CallbackSet.front","zpp_nape/util/Lists.hx",971,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_973_back,"zpp_nape.util.ZNPList_ZPP_CallbackSet","back",0x47bb628d,"zpp_nape.util.ZNPList_ZPP_CallbackSet.back","zpp_nape/util/Lists.hx",973,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_982_iterator_at,"zpp_nape.util.ZNPList_ZPP_CallbackSet","iterator_at",0x20227a3e,"zpp_nape.util.ZNPList_ZPP_CallbackSet.iterator_at","zpp_nape/util/Lists.hx",982,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_f57875ca1cc5d515_995_at,"zpp_nape.util.ZNPList_ZPP_CallbackSet","at",0x4f97d7d9,"zpp_nape.util.ZNPList_ZPP_CallbackSet.at","zpp_nape/util/Lists.hx",995,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_CallbackSet_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_592_new)
            	HX_STACK_THIS(this)
HXLINE( 602)		this->length = (int)0;
HXLINE( 601)		this->pushmod = false;
HXLINE( 600)		this->modified = false;
HXLINE( 593)		this->head = null();
            	}

Dynamic ZNPList_ZPP_CallbackSet_obj::__CreateEmpty() { return new ZNPList_ZPP_CallbackSet_obj; }

void *ZNPList_ZPP_CallbackSet_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_CallbackSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_CallbackSet_obj > _hx_result = new ZNPList_ZPP_CallbackSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_CallbackSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x18b37e04;
}

 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_598_begin)
            	HX_STACK_THIS(this)
HXLINE( 598)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,begin,return )

void ZNPList_ZPP_CallbackSet_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet i){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_605_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 606)		this->head = i;
HXLINE( 607)		this->modified = true;
HXLINE( 608)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,setbegin,(void))

 ::zpp_nape::space::ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::add( ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_GC_STACKFRAME(&_hx_pos_f57875ca1cc5d515_611_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE( 611)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXDLIN( 611)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool )) {
HXLINE( 611)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 611)			ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 611)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
HXDLIN( 611)			ret->next = null();
            		}
HXDLIN( 611)		ret->elt = o;
HXDLIN( 611)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,temp) = ret;
HXDLIN( 611)		temp->next = this->head;
HXDLIN( 611)		this->head = temp;
HXDLIN( 611)		this->modified = true;
HXDLIN( 611)		this->length++;
HXDLIN( 611)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,add,return )

 ::zpp_nape::space::ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::inlined_add( ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_GC_STACKFRAME(&_hx_pos_f57875ca1cc5d515_615_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE( 625)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXLINE( 627)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool )) {
HXLINE( 628)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 634)			ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXLINE( 635)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
HXLINE( 636)			ret->next = null();
            		}
HXLINE( 643)		ret->elt = o;
HXLINE( 624)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,temp) = ret;
HXLINE( 646)		temp->next = this->head;
HXLINE( 647)		this->head = temp;
HXLINE( 648)		this->modified = true;
HXLINE( 649)		this->length++;
HXLINE( 650)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,inlined_add,return )

void ZNPList_ZPP_CallbackSet_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_CallbackSet x){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_661_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 662)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cx_ite) = x->head;
HXLINE( 663)		while(hx::IsNotNull( cx_ite )){
HXLINE( 665)			this->add(cx_ite->elt);
HXLINE( 666)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur, ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_GC_STACKFRAME(&_hx_pos_f57875ca1cc5d515_671_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE( 671)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXDLIN( 671)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool )) {
HXLINE( 671)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 671)			ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 671)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
HXDLIN( 671)			ret->next = null();
            		}
HXDLIN( 671)		ret->elt = o;
HXDLIN( 671)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,temp) = ret;
HXDLIN( 671)		if (hx::IsNull( cur )) {
HXLINE( 671)			temp->next = this->head;
HXDLIN( 671)			this->head = temp;
            		}
            		else {
HXLINE( 671)			temp->next = cur->next;
HXDLIN( 671)			cur->next = temp;
            		}
HXDLIN( 671)		this->pushmod = (this->modified = true);
HXDLIN( 671)		this->length++;
HXDLIN( 671)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CallbackSet_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur, ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_GC_STACKFRAME(&_hx_pos_f57875ca1cc5d515_675_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE( 685)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXLINE( 687)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool )) {
HXLINE( 688)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 694)			ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXLINE( 695)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
HXLINE( 696)			ret->next = null();
            		}
HXLINE( 703)		ret->elt = o;
HXLINE( 684)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,temp) = ret;
HXLINE( 706)		if (hx::IsNull( cur )) {
HXLINE( 707)			temp->next = this->head;
HXLINE( 708)			this->head = temp;
            		}
            		else {
HXLINE( 711)			temp->next = cur->next;
HXLINE( 712)			cur->next = temp;
            		}
HXLINE( 714)		this->pushmod = (this->modified = true);
HXLINE( 715)		this->length++;
HXLINE( 716)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CallbackSet_obj,inlined_insert,return )

void ZNPList_ZPP_CallbackSet_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_719_pop)
            	HX_STACK_THIS(this)
HXLINE( 719)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret) = this->head;
HXDLIN( 719)		this->head = ret->next;
HXDLIN( 719)		{
HXLINE( 719)			ret->elt = null();
HXDLIN( 719)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 719)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret;
            		}
HXDLIN( 719)		if (hx::IsNull( this->head )) {
HXLINE( 719)			this->pushmod = true;
            		}
HXDLIN( 719)		this->modified = true;
HXDLIN( 719)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,pop,(void))

void ZNPList_ZPP_CallbackSet_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_723_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE( 732)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret) = this->head;
HXLINE( 733)		this->head = ret->next;
HXLINE( 735)		{
HXLINE( 745)			ret->elt = null();
HXLINE( 746)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXLINE( 747)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret;
            		}
HXLINE( 752)		if (hx::IsNull( this->head )) {
HXLINE( 752)			this->pushmod = true;
            		}
HXLINE( 753)		this->modified = true;
HXLINE( 754)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,inlined_pop,(void))

 ::zpp_nape::space::ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_757_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE( 757)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,ret) = this->head->elt;
HXDLIN( 757)		this->pop();
HXDLIN( 757)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,pop_unsafe,return )

 ::zpp_nape::space::ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_761_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE( 770)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,ret) = this->head->elt;
HXLINE( 771)		this->pop();
HXLINE( 772)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_CallbackSet_obj::remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_783_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 783)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,pre) = null();
HXDLIN( 783)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cur) = this->head;
HXDLIN( 783)		while(hx::IsNotNull( cur )){
HXLINE( 783)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 783)				{
HXLINE( 783)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,old);
HXDLIN( 783)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXDLIN( 783)					if (hx::IsNull( pre )) {
HXLINE( 783)						old = this->head;
HXDLIN( 783)						ret = old->next;
HXDLIN( 783)						this->head = ret;
HXDLIN( 783)						if (hx::IsNull( this->head )) {
HXLINE( 783)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 783)						old = pre->next;
HXDLIN( 783)						ret = old->next;
HXDLIN( 783)						pre->next = ret;
HXDLIN( 783)						if (hx::IsNull( ret )) {
HXLINE( 783)							this->pushmod = true;
            						}
            					}
HXDLIN( 783)					{
HXLINE( 783)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,o) = old;
HXDLIN( 783)						o->elt = null();
HXDLIN( 783)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 783)						::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
            					}
HXDLIN( 783)					this->modified = true;
HXDLIN( 783)					this->length--;
HXDLIN( 783)					this->pushmod = true;
            				}
HXDLIN( 783)				goto _hx_goto_13;
            			}
HXDLIN( 783)			pre = cur;
HXDLIN( 783)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,remove,(void))

bool ZNPList_ZPP_CallbackSet_obj::try_remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_785_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 794)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,pre) = null();
HXLINE( 795)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cur) = this->head;
HXLINE( 796)		HX_VARI( bool,ret) = false;
HXLINE( 797)		while(hx::IsNotNull( cur )){
HXLINE( 798)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 799)				this->erase(pre);
HXLINE( 800)				ret = true;
HXLINE( 801)				goto _hx_goto_15;
            			}
HXLINE( 803)			pre = cur;
HXLINE( 804)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE( 806)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,try_remove,return )

void ZNPList_ZPP_CallbackSet_obj::inlined_remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_819_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 819)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,pre) = null();
HXDLIN( 819)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cur) = this->head;
HXDLIN( 819)		while(hx::IsNotNull( cur )){
HXLINE( 819)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 819)				{
HXLINE( 819)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,old);
HXDLIN( 819)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXDLIN( 819)					if (hx::IsNull( pre )) {
HXLINE( 819)						old = this->head;
HXDLIN( 819)						ret = old->next;
HXDLIN( 819)						this->head = ret;
HXDLIN( 819)						if (hx::IsNull( this->head )) {
HXLINE( 819)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 819)						old = pre->next;
HXDLIN( 819)						ret = old->next;
HXDLIN( 819)						pre->next = ret;
HXDLIN( 819)						if (hx::IsNull( ret )) {
HXLINE( 819)							this->pushmod = true;
            						}
            					}
HXDLIN( 819)					{
HXLINE( 819)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,o) = old;
HXDLIN( 819)						o->elt = null();
HXDLIN( 819)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 819)						::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
            					}
HXDLIN( 819)					this->modified = true;
HXDLIN( 819)					this->length--;
HXDLIN( 819)					this->pushmod = true;
            				}
HXDLIN( 819)				goto _hx_goto_17;
            			}
HXDLIN( 819)			pre = cur;
HXDLIN( 819)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,inlined_remove,(void))

bool ZNPList_ZPP_CallbackSet_obj::inlined_try_remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_823_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 832)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,pre) = null();
HXLINE( 833)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cur) = this->head;
HXLINE( 834)		HX_VARI( bool,ret) = false;
HXLINE( 835)		while(hx::IsNotNull( cur )){
HXLINE( 836)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 837)				{
HXLINE( 837)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,old);
HXDLIN( 837)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret1,"ret");
HXDLIN( 837)					if (hx::IsNull( pre )) {
HXLINE( 837)						old = this->head;
HXDLIN( 837)						ret1 = old->next;
HXDLIN( 837)						this->head = ret1;
HXDLIN( 837)						if (hx::IsNull( this->head )) {
HXLINE( 837)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 837)						old = pre->next;
HXDLIN( 837)						ret1 = old->next;
HXDLIN( 837)						pre->next = ret1;
HXDLIN( 837)						if (hx::IsNull( ret1 )) {
HXLINE( 837)							this->pushmod = true;
            						}
            					}
HXDLIN( 837)					{
HXLINE( 837)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,o) = old;
HXDLIN( 837)						o->elt = null();
HXDLIN( 837)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 837)						::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
            					}
HXDLIN( 837)					this->modified = true;
HXDLIN( 837)					this->length--;
HXDLIN( 837)					this->pushmod = true;
            				}
HXLINE( 838)				ret = true;
HXLINE( 839)				goto _hx_goto_19;
            			}
HXLINE( 841)			pre = cur;
HXLINE( 842)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE( 844)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_847_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE( 847)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,old);
HXDLIN( 847)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXDLIN( 847)		if (hx::IsNull( pre )) {
HXLINE( 847)			old = this->head;
HXDLIN( 847)			ret = old->next;
HXDLIN( 847)			this->head = ret;
HXDLIN( 847)			if (hx::IsNull( this->head )) {
HXLINE( 847)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 847)			old = pre->next;
HXDLIN( 847)			ret = old->next;
HXDLIN( 847)			pre->next = ret;
HXDLIN( 847)			if (hx::IsNull( ret )) {
HXLINE( 847)				this->pushmod = true;
            			}
            		}
HXDLIN( 847)		{
HXLINE( 847)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,o) = old;
HXDLIN( 847)			o->elt = null();
HXDLIN( 847)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 847)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
            		}
HXDLIN( 847)		this->modified = true;
HXDLIN( 847)		this->length--;
HXDLIN( 847)		this->pushmod = true;
HXDLIN( 847)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_851_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE( 860)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,old);
HXLINE( 861)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret);
HXLINE( 862)		if (hx::IsNull( pre )) {
HXLINE( 863)			old = this->head;
HXLINE( 864)			ret = old->next;
HXLINE( 865)			this->head = ret;
HXLINE( 866)			if (hx::IsNull( this->head )) {
HXLINE( 866)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 869)			old = pre->next;
HXLINE( 870)			ret = old->next;
HXLINE( 871)			pre->next = ret;
HXLINE( 872)			if (hx::IsNull( ret )) {
HXLINE( 872)				this->pushmod = true;
            			}
            		}
HXLINE( 875)		{
HXLINE( 876)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,o) = old;
HXLINE( 885)			o->elt = null();
HXLINE( 886)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXLINE( 887)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
            		}
HXLINE( 892)		this->modified = true;
HXLINE( 893)		this->length--;
HXLINE( 894)		this->pushmod = true;
HXLINE( 895)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre,int n){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_897_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE( 898)		while(true){
HXLINE( 898)			bool _hx_tmp;
HXDLIN( 898)			n = (n - (int)1);
HXDLIN( 898)			if (((n + (int)1) > (int)0)) {
HXLINE( 898)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE( 898)				_hx_tmp = false;
            			}
HXDLIN( 898)			if (!(_hx_tmp)) {
HXLINE( 898)				goto _hx_goto_23;
            			}
HXDLIN( 898)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE( 899)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CallbackSet_obj,splice,return )

void ZNPList_ZPP_CallbackSet_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_902_clear)
            	HX_STACK_THIS(this)
HXLINE( 902)		while(hx::IsNotNull( this->head )){
HXLINE( 902)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret) = this->head;
HXDLIN( 902)			this->head = ret->next;
HXDLIN( 902)			{
HXLINE( 902)				ret->elt = null();
HXDLIN( 902)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 902)				::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret;
            			}
HXDLIN( 902)			if (hx::IsNull( this->head )) {
HXLINE( 902)				this->pushmod = true;
            			}
HXDLIN( 902)			this->modified = true;
HXDLIN( 902)			this->length--;
            		}
HXDLIN( 902)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,clear,(void))

void ZNPList_ZPP_CallbackSet_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_907_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE( 908)		while(hx::IsNotNull( this->head )){
HXLINE( 908)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret) = this->head;
HXDLIN( 908)			this->head = ret->next;
HXDLIN( 908)			{
HXLINE( 908)				ret->elt = null();
HXDLIN( 908)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
HXDLIN( 908)				::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret;
            			}
HXDLIN( 908)			if (hx::IsNull( this->head )) {
HXLINE( 908)				this->pushmod = true;
            			}
HXDLIN( 908)			this->modified = true;
HXDLIN( 908)			this->length--;
            		}
HXLINE( 909)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,inlined_clear,(void))

void ZNPList_ZPP_CallbackSet_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_912_reverse)
            	HX_STACK_THIS(this)
HXLINE( 913)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cur) = this->head;
HXLINE( 914)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,pre) = null();
HXLINE( 915)		while(hx::IsNotNull( cur )){
HXLINE( 916)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,nx) = cur->next;
HXLINE( 917)			cur->next = pre;
HXLINE( 918)			this->head = cur;
HXLINE( 919)			pre = cur;
HXLINE( 920)			cur = nx;
            		}
HXLINE( 922)		this->modified = true;
HXLINE( 923)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,reverse,(void))

bool ZNPList_ZPP_CallbackSet_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_928_empty)
            	HX_STACK_THIS(this)
HXLINE( 928)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,empty,return )

int ZNPList_ZPP_CallbackSet_obj::size(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_933_size)
            	HX_STACK_THIS(this)
HXLINE( 933)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,size,return )

bool ZNPList_ZPP_CallbackSet_obj::has( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_936_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 936)		HX_VAR( bool,ret);
HXDLIN( 936)		{
HXLINE( 936)			ret = false;
HXDLIN( 936)			{
HXLINE( 936)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cx_ite) = this->head;
HXDLIN( 936)				while(hx::IsNotNull( cx_ite )){
HXLINE( 936)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE( 936)						ret = true;
HXDLIN( 936)						goto _hx_goto_33;
            					}
HXDLIN( 936)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN( 936)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,has,return )

bool ZNPList_ZPP_CallbackSet_obj::inlined_has( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_940_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 949)		HX_VAR( bool,ret);
HXLINE( 950)		{
HXLINE( 951)			ret = false;
HXLINE( 952)			{
HXLINE( 953)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cx_ite) = this->head;
HXLINE( 954)				while(hx::IsNotNull( cx_ite )){
HXLINE( 957)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE( 958)						ret = true;
HXLINE( 959)						goto _hx_goto_35;
            					}
HXLINE( 962)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE( 966)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,inlined_has,return )

 ::zpp_nape::space::ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::front(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_971_front)
            	HX_STACK_THIS(this)
HXLINE( 971)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,front,return )

 ::zpp_nape::space::ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::back(){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_973_back)
            	HX_STACK_THIS(this)
HXLINE( 974)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret) = this->head;
HXLINE( 975)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,cur) = ret;
HXLINE( 976)		while(hx::IsNotNull( cur )){
HXLINE( 977)			ret = cur;
HXLINE( 978)			cur = cur->next;
            		}
HXLINE( 980)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CallbackSet_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_982_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE( 991)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,ret) = this->head;
HXLINE( 992)		while(true){
HXLINE( 992)			bool _hx_tmp;
HXDLIN( 992)			ind = (ind - (int)1);
HXDLIN( 992)			if (((ind + (int)1) > (int)0)) {
HXLINE( 992)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE( 992)				_hx_tmp = false;
            			}
HXDLIN( 992)			if (!(_hx_tmp)) {
HXLINE( 992)				goto _hx_goto_40;
            			}
HXDLIN( 992)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE( 993)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,iterator_at,return )

 ::zpp_nape::space::ZPP_CallbackSet ZNPList_ZPP_CallbackSet_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_f57875ca1cc5d515_995_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(1004)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,it) = this->iterator_at(ind);
HXLINE(1005)		if (hx::IsNotNull( it )) {
HXLINE(1005)			return it->elt;
            		}
            		else {
HXLINE(1005)			return null();
            		}
HXDLIN(1005)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CallbackSet_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_CallbackSet_obj > ZNPList_ZPP_CallbackSet_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_CallbackSet_obj > __this = new ZNPList_ZPP_CallbackSet_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_CallbackSet_obj > ZNPList_ZPP_CallbackSet_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_CallbackSet_obj *__this = (ZNPList_ZPP_CallbackSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_CallbackSet_obj), true, "zpp_nape.util.ZNPList_ZPP_CallbackSet"));
	*(void **)__this = ZNPList_ZPP_CallbackSet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_CallbackSet_obj::ZNPList_ZPP_CallbackSet_obj()
{
}

void ZNPList_ZPP_CallbackSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_CallbackSet);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_CallbackSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_CallbackSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_CallbackSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_CallbackSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_CallbackSet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_CallbackSet*/ ,(int)offsetof(ZNPList_ZPP_CallbackSet_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CallbackSet_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CallbackSet_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_CallbackSet_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_CallbackSet_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_CallbackSet_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_CallbackSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_CallbackSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_CallbackSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_CallbackSet_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_CallbackSet_obj::__mClass;

void ZNPList_ZPP_CallbackSet_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_CallbackSet_obj;
	ZNPList_ZPP_CallbackSet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_CallbackSet","\xc8","\xb1","\xc2","\x98");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_CallbackSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_CallbackSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_CallbackSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_CallbackSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_CallbackSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_CallbackSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
