// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <nape/util/Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Debug
#include <zpp_nape/util/ZPP_Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeDebug
#include <zpp_nape/util/ZPP_ShapeDebug.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dbb0886236d3ab82_174_new,"zpp_nape.util.ZPP_Debug","new",0x869f8a95,"zpp_nape.util.ZPP_Debug.new","zpp_nape/util/Debug.hx",174,0xeecbde16)
HX_DEFINE_STACK_FRAME(_hx_pos_dbb0886236d3ab82_201_xform_invalidate,"zpp_nape.util.ZPP_Debug","xform_invalidate",0xef33d309,"zpp_nape.util.ZPP_Debug.xform_invalidate","zpp_nape/util/Debug.hx",201,0xeecbde16)
HX_DEFINE_STACK_FRAME(_hx_pos_dbb0886236d3ab82_265_setform,"zpp_nape.util.ZPP_Debug","setform",0x3258ee9b,"zpp_nape.util.ZPP_Debug.setform","zpp_nape/util/Debug.hx",265,0xeecbde16)
HX_DEFINE_STACK_FRAME(_hx_pos_dbb0886236d3ab82_271_cull,"zpp_nape.util.ZPP_Debug","cull",0x3dc079dd,"zpp_nape.util.ZPP_Debug.cull","zpp_nape/util/Debug.hx",271,0xeecbde16)
HX_DEFINE_STACK_FRAME(_hx_pos_dbb0886236d3ab82_422_sup_setbg,"zpp_nape.util.ZPP_Debug","sup_setbg",0x92bffd2b,"zpp_nape.util.ZPP_Debug.sup_setbg","zpp_nape/util/Debug.hx",422,0xeecbde16)
HX_DEFINE_STACK_FRAME(_hx_pos_dbb0886236d3ab82_175_boot,"zpp_nape.util.ZPP_Debug","boot",0x3d12b85d,"zpp_nape.util.ZPP_Debug.boot","zpp_nape/util/Debug.hx",175,0xeecbde16)
namespace zpp_nape{
namespace util{

void ZPP_Debug_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_dbb0886236d3ab82_174_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 269)		this->tmpab = null();
HXLINE( 191)		this->iport = null();
HXLINE( 190)		this->viewport = null();
HXLINE( 189)		this->height = (int)0;
HXLINE( 188)		this->width = (int)0;
HXLINE( 187)		this->xdet = ((Float)0.0);
HXLINE( 186)		this->xnull = false;
HXLINE( 185)		this->xform = null();
HXLINE( 184)		this->bg_col = (int)0;
HXLINE( 183)		this->bg_b = ((Float)0.0);
HXLINE( 182)		this->bg_g = ((Float)0.0);
HXLINE( 181)		this->bg_r = ((Float)0.0);
HXLINE( 180)		this->d_shape = null();
HXLINE( 177)		this->isbmp = false;
HXLINE( 176)		this->outer = null();
HXLINE( 193)		this->xnull = true;
HXLINE( 194)		this->xdet = ((Float)1.0);
HXLINE( 195)		this->width = width;
HXLINE( 196)		this->height = height;
HXLINE( 197)		HX_VAR(  ::zpp_nape::geom::ZPP_AABB,ret);
HXDLIN( 197)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 197)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 197)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 197)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 197)			ret->next = null();
            		}
HXDLIN( 197)		{
HXLINE( 197)			ret->minx = (int)0;
HXDLIN( 197)			ret->miny = (int)0;
            		}
HXDLIN( 197)		{
HXLINE( 197)			ret->maxx = width;
HXDLIN( 197)			ret->maxy = height;
            		}
HXDLIN( 197)		this->viewport = ret;
HXLINE( 198)		HX_VAR_NAME(  ::zpp_nape::geom::ZPP_AABB,ret1,"ret");
HXDLIN( 198)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 198)			ret1 =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 198)			ret1 = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 198)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret1->next;
HXDLIN( 198)			ret1->next = null();
            		}
HXDLIN( 198)		{
HXLINE( 198)			ret1->minx = (int)0;
HXDLIN( 198)			ret1->miny = (int)0;
            		}
HXDLIN( 198)		{
HXLINE( 198)			ret1->maxx = width;
HXDLIN( 198)			ret1->maxy = height;
            		}
HXDLIN( 198)		this->iport = ret1;
HXLINE( 199)		this->tmpab =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_Debug_obj::__CreateEmpty() { return new ZPP_Debug_obj; }

void *ZPP_Debug_obj::_hx_vtable = 0;

Dynamic ZPP_Debug_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Debug_obj > _hx_result = new ZPP_Debug_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ZPP_Debug_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x557db75f;
}

void ZPP_Debug_obj::xform_invalidate(){
            	HX_GC_STACKFRAME(&_hx_pos_dbb0886236d3ab82_201_xform_invalidate)
            	HX_STACK_THIS(this)
HXLINE( 203)		HX_VARI(  ::nape::geom::Mat23,_this) = this->xform->outer;
HXDLIN( 203)		HX_VARI( Float,x) = ((_this->zpp_inner->a * _this->zpp_inner->d) - (_this->zpp_inner->b * _this->zpp_inner->c));
HXLINE( 202)		Float x1;
HXLINE( 204)		if ((x < (int)0)) {
HXLINE( 202)			x1 = -(x);
            		}
            		else {
HXLINE( 202)			x1 = x;
            		}
HXDLIN( 202)		this->xdet = ::Math_obj::sqrt(x1);
HXLINE( 206)		bool _hx_tmp;
HXDLIN( 206)		bool _hx_tmp1;
HXDLIN( 206)		bool _hx_tmp2;
HXDLIN( 206)		bool _hx_tmp3;
HXDLIN( 206)		bool _hx_tmp4;
HXDLIN( 206)		if ((this->xform->a == ((Float)1.0))) {
HXLINE( 206)			_hx_tmp4 = (this->xform->b == ((Float)0.0));
            		}
            		else {
HXLINE( 206)			_hx_tmp4 = false;
            		}
HXDLIN( 206)		if (_hx_tmp4) {
HXLINE( 206)			_hx_tmp3 = (this->xform->c == ((Float)0.0));
            		}
            		else {
HXLINE( 206)			_hx_tmp3 = false;
            		}
HXDLIN( 206)		if (_hx_tmp3) {
HXLINE( 206)			_hx_tmp2 = (this->xform->d == ((Float)1.0));
            		}
            		else {
HXLINE( 206)			_hx_tmp2 = false;
            		}
HXDLIN( 206)		if (_hx_tmp2) {
HXLINE( 206)			_hx_tmp1 = (this->xform->tx == ((Float)0.0));
            		}
            		else {
HXLINE( 206)			_hx_tmp1 = false;
            		}
HXDLIN( 206)		if (_hx_tmp1) {
HXLINE( 206)			_hx_tmp = (this->xform->ty == ((Float)0.0));
            		}
            		else {
HXLINE( 206)			_hx_tmp = false;
            		}
HXDLIN( 206)		this->xnull = _hx_tmp;
HXLINE( 207)		HX_VARI(  ::nape::geom::Mat23,qmat) = this->xform->outer->inverse();
HXLINE( 208)		HX_VARI_NAME( Float,x2,"x") = (int)0;
HXDLIN( 208)		HX_VARI( Float,y) = (int)0;
HXDLIN( 208)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 208)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 208)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 208)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 208)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 208)			ret->zpp_pool = null();
            		}
HXDLIN( 208)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 208)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 208)			{
HXLINE( 208)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 208)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 208)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 208)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 208)					ret1->next = null();
            				}
HXDLIN( 208)				ret1->weak = false;
            			}
HXDLIN( 208)			ret1->_immutable = false;
HXDLIN( 208)			{
HXLINE( 208)				ret1->x = x2;
HXDLIN( 208)				ret1->y = y;
            			}
HXDLIN( 208)			ret->zpp_inner = ret1;
HXDLIN( 208)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 208)			bool _hx_tmp5;
HXDLIN( 208)			{
HXLINE( 208)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 208)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 208)					_this1->_validate();
            				}
            			}
HXDLIN( 208)			if ((ret->zpp_inner->x == x2)) {
HXLINE( 208)				{
HXLINE( 208)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 208)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 208)						_this2->_validate();
            					}
            				}
HXDLIN( 208)				_hx_tmp5 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 208)				_hx_tmp5 = false;
            			}
HXDLIN( 208)			if (!(_hx_tmp5)) {
HXLINE( 208)				{
HXLINE( 208)					ret->zpp_inner->x = x2;
HXDLIN( 208)					ret->zpp_inner->y = y;
            				}
HXDLIN( 208)				{
HXLINE( 208)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN( 208)					if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 208)						_this3->_invalidate(_this3);
            					}
            				}
            			}
            		}
HXDLIN( 208)		ret->zpp_inner->weak = false;
HXDLIN( 208)		HX_VARI(  ::nape::geom::Vec2,q) = ret;
HXLINE( 209)		HX_VARI(  ::nape::geom::Vec2,v) = qmat->transform(q,null(),null());
HXLINE( 210)		{
HXLINE( 211)			{
HXLINE( 211)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = v->zpp_inner;
HXDLIN( 211)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 211)					_this4->_validate();
            				}
            			}
HXDLIN( 211)			this->iport->minx = v->zpp_inner->x;
HXLINE( 212)			{
HXLINE( 212)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = v->zpp_inner;
HXDLIN( 212)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 212)					_this5->_validate();
            				}
            			}
HXDLIN( 212)			this->iport->miny = v->zpp_inner->y;
            		}
HXLINE( 230)		{
HXLINE( 231)			this->iport->maxx = this->iport->minx;
HXLINE( 232)			this->iport->maxy = this->iport->miny;
            		}
HXLINE( 250)		{
HXLINE( 250)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = v->zpp_inner;
HXDLIN( 250)			v->zpp_inner->outer = null();
HXDLIN( 250)			v->zpp_inner = null();
HXDLIN( 250)			{
HXLINE( 250)				HX_VARI(  ::nape::geom::Vec2,o) = v;
HXDLIN( 250)				o->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 250)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
            			}
HXDLIN( 250)			{
HXLINE( 250)				{
HXLINE( 250)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 250)						inner->outer->zpp_inner = null();
HXDLIN( 250)						inner->outer = null();
            					}
HXDLIN( 250)					inner->_isimmutable = null();
HXDLIN( 250)					inner->_validate = null();
HXDLIN( 250)					inner->_invalidate = null();
            				}
HXDLIN( 250)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 250)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 251)		{
HXLINE( 251)			HX_VARI_NAME( Float,x3,"x") = this->width;
HXDLIN( 251)			{
HXLINE( 251)				{
HXLINE( 251)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = q->zpp_inner;
HXDLIN( 251)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 251)						_this6->_validate();
            					}
            				}
HXDLIN( 251)				if ((q->zpp_inner->x != x3)) {
HXLINE( 251)					q->zpp_inner->x = x3;
HXDLIN( 251)					{
HXLINE( 251)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = q->zpp_inner;
HXDLIN( 251)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 251)							_this7->_invalidate(_this7);
            						}
            					}
            				}
            			}
HXDLIN( 251)			{
HXLINE( 251)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = q->zpp_inner;
HXDLIN( 251)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 251)					_this8->_validate();
            				}
            			}
            		}
HXLINE( 252)		v = qmat->transform(q,null(),null());
HXLINE( 253)		{
HXLINE( 253)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this9,"_this") = this->iport;
HXDLIN( 253)			{
HXLINE( 253)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = v->zpp_inner;
HXDLIN( 253)				if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 253)					_this10->_validate();
            				}
            			}
HXDLIN( 253)			HX_VARI_NAME( Float,x4,"x") = v->zpp_inner->x;
HXDLIN( 253)			{
HXLINE( 253)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = v->zpp_inner;
HXDLIN( 253)				if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 253)					_this11->_validate();
            				}
            			}
HXDLIN( 253)			HX_VARI_NAME( Float,y1,"y") = v->zpp_inner->y;
HXDLIN( 253)			if ((x4 < _this9->minx)) {
HXLINE( 253)				_this9->minx = x4;
            			}
HXDLIN( 253)			if ((x4 > _this9->maxx)) {
HXLINE( 253)				_this9->maxx = x4;
            			}
HXDLIN( 253)			if ((y1 < _this9->miny)) {
HXLINE( 253)				_this9->miny = y1;
            			}
HXDLIN( 253)			if ((y1 > _this9->maxy)) {
HXLINE( 253)				_this9->maxy = y1;
            			}
            		}
HXLINE( 254)		{
HXLINE( 254)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = v->zpp_inner;
HXDLIN( 254)			v->zpp_inner->outer = null();
HXDLIN( 254)			v->zpp_inner = null();
HXDLIN( 254)			{
HXLINE( 254)				HX_VARI_NAME(  ::nape::geom::Vec2,o1,"o") = v;
HXDLIN( 254)				o1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 254)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o1;
            			}
HXDLIN( 254)			{
HXLINE( 254)				{
HXLINE( 254)					if (hx::IsNotNull( inner1->outer )) {
HXLINE( 254)						inner1->outer->zpp_inner = null();
HXDLIN( 254)						inner1->outer = null();
            					}
HXDLIN( 254)					inner1->_isimmutable = null();
HXDLIN( 254)					inner1->_validate = null();
HXDLIN( 254)					inner1->_invalidate = null();
            				}
HXDLIN( 254)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 254)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE( 255)		{
HXLINE( 255)			HX_VARI_NAME( Float,y2,"y") = this->height;
HXDLIN( 255)			{
HXLINE( 255)				{
HXLINE( 255)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this12,"_this") = q->zpp_inner;
HXDLIN( 255)					if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 255)						_this12->_validate();
            					}
            				}
HXDLIN( 255)				if ((q->zpp_inner->y != y2)) {
HXLINE( 255)					q->zpp_inner->y = y2;
HXDLIN( 255)					{
HXLINE( 255)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = q->zpp_inner;
HXDLIN( 255)						if (hx::IsNotNull( _this13->_invalidate )) {
HXLINE( 255)							_this13->_invalidate(_this13);
            						}
            					}
            				}
            			}
HXDLIN( 255)			{
HXLINE( 255)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this14,"_this") = q->zpp_inner;
HXDLIN( 255)				if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 255)					_this14->_validate();
            				}
            			}
            		}
HXLINE( 256)		v = qmat->transform(q,null(),null());
HXLINE( 257)		{
HXLINE( 257)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this15,"_this") = this->iport;
HXDLIN( 257)			{
HXLINE( 257)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this16,"_this") = v->zpp_inner;
HXDLIN( 257)				if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 257)					_this16->_validate();
            				}
            			}
HXDLIN( 257)			HX_VARI_NAME( Float,x5,"x") = v->zpp_inner->x;
HXDLIN( 257)			{
HXLINE( 257)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this17,"_this") = v->zpp_inner;
HXDLIN( 257)				if (hx::IsNotNull( _this17->_validate )) {
HXLINE( 257)					_this17->_validate();
            				}
            			}
HXDLIN( 257)			HX_VARI_NAME( Float,y3,"y") = v->zpp_inner->y;
HXDLIN( 257)			if ((x5 < _this15->minx)) {
HXLINE( 257)				_this15->minx = x5;
            			}
HXDLIN( 257)			if ((x5 > _this15->maxx)) {
HXLINE( 257)				_this15->maxx = x5;
            			}
HXDLIN( 257)			if ((y3 < _this15->miny)) {
HXLINE( 257)				_this15->miny = y3;
            			}
HXDLIN( 257)			if ((y3 > _this15->maxy)) {
HXLINE( 257)				_this15->maxy = y3;
            			}
            		}
HXLINE( 258)		{
HXLINE( 258)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = v->zpp_inner;
HXDLIN( 258)			v->zpp_inner->outer = null();
HXDLIN( 258)			v->zpp_inner = null();
HXDLIN( 258)			{
HXLINE( 258)				HX_VARI_NAME(  ::nape::geom::Vec2,o2,"o") = v;
HXDLIN( 258)				o2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 258)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o2;
            			}
HXDLIN( 258)			{
HXLINE( 258)				{
HXLINE( 258)					if (hx::IsNotNull( inner2->outer )) {
HXLINE( 258)						inner2->outer->zpp_inner = null();
HXDLIN( 258)						inner2->outer = null();
            					}
HXDLIN( 258)					inner2->_isimmutable = null();
HXDLIN( 258)					inner2->_validate = null();
HXDLIN( 258)					inner2->_invalidate = null();
            				}
HXDLIN( 258)				inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 258)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            			}
            		}
HXLINE( 259)		{
HXLINE( 259)			{
HXLINE( 259)				{
HXLINE( 259)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this18,"_this") = q->zpp_inner;
HXDLIN( 259)					if (hx::IsNotNull( _this18->_validate )) {
HXLINE( 259)						_this18->_validate();
            					}
            				}
HXDLIN( 259)				if ((q->zpp_inner->x != (int)0)) {
HXLINE( 259)					q->zpp_inner->x = (int)0;
HXDLIN( 259)					{
HXLINE( 259)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this19,"_this") = q->zpp_inner;
HXDLIN( 259)						if (hx::IsNotNull( _this19->_invalidate )) {
HXLINE( 259)							_this19->_invalidate(_this19);
            						}
            					}
            				}
            			}
HXDLIN( 259)			{
HXLINE( 259)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this20,"_this") = q->zpp_inner;
HXDLIN( 259)				if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 259)					_this20->_validate();
            				}
            			}
            		}
HXLINE( 260)		v = qmat->transform(q,null(),null());
HXLINE( 261)		{
HXLINE( 261)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this21,"_this") = this->iport;
HXDLIN( 261)			{
HXLINE( 261)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this22,"_this") = v->zpp_inner;
HXDLIN( 261)				if (hx::IsNotNull( _this22->_validate )) {
HXLINE( 261)					_this22->_validate();
            				}
            			}
HXDLIN( 261)			HX_VARI_NAME( Float,x6,"x") = v->zpp_inner->x;
HXDLIN( 261)			{
HXLINE( 261)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this23,"_this") = v->zpp_inner;
HXDLIN( 261)				if (hx::IsNotNull( _this23->_validate )) {
HXLINE( 261)					_this23->_validate();
            				}
            			}
HXDLIN( 261)			HX_VARI_NAME( Float,y4,"y") = v->zpp_inner->y;
HXDLIN( 261)			if ((x6 < _this21->minx)) {
HXLINE( 261)				_this21->minx = x6;
            			}
HXDLIN( 261)			if ((x6 > _this21->maxx)) {
HXLINE( 261)				_this21->maxx = x6;
            			}
HXDLIN( 261)			if ((y4 < _this21->miny)) {
HXLINE( 261)				_this21->miny = y4;
            			}
HXDLIN( 261)			if ((y4 > _this21->maxy)) {
HXLINE( 261)				_this21->maxy = y4;
            			}
            		}
HXLINE( 262)		{
HXLINE( 262)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner3,"inner") = v->zpp_inner;
HXDLIN( 262)			v->zpp_inner->outer = null();
HXDLIN( 262)			v->zpp_inner = null();
HXDLIN( 262)			{
HXLINE( 262)				HX_VARI_NAME(  ::nape::geom::Vec2,o3,"o") = v;
HXDLIN( 262)				o3->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 262)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o3;
            			}
HXDLIN( 262)			{
HXLINE( 262)				{
HXLINE( 262)					if (hx::IsNotNull( inner3->outer )) {
HXLINE( 262)						inner3->outer->zpp_inner = null();
HXDLIN( 262)						inner3->outer = null();
            					}
HXDLIN( 262)					inner3->_isimmutable = null();
HXDLIN( 262)					inner3->_validate = null();
HXDLIN( 262)					inner3->_invalidate = null();
            				}
HXDLIN( 262)				inner3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 262)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner3;
            			}
            		}
HXLINE( 263)		{
HXLINE( 263)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner4,"inner") = q->zpp_inner;
HXDLIN( 263)			q->zpp_inner->outer = null();
HXDLIN( 263)			q->zpp_inner = null();
HXDLIN( 263)			{
HXLINE( 263)				q->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 263)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = q;
            			}
HXDLIN( 263)			{
HXLINE( 263)				{
HXLINE( 263)					if (hx::IsNotNull( inner4->outer )) {
HXLINE( 263)						inner4->outer->zpp_inner = null();
HXDLIN( 263)						inner4->outer = null();
            					}
HXDLIN( 263)					inner4->_isimmutable = null();
HXDLIN( 263)					inner4->_validate = null();
HXDLIN( 263)					inner4->_invalidate = null();
            				}
HXDLIN( 263)				inner4->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 263)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner4;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Debug_obj,xform_invalidate,(void))

void ZPP_Debug_obj::setform(){
            	HX_GC_STACKFRAME(&_hx_pos_dbb0886236d3ab82_265_setform)
            	HX_STACK_THIS(this)
HXLINE( 266)		this->xform =  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null())->zpp_inner;
HXLINE( 267)		this->xform->_invalidate = this->xform_invalidate_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Debug_obj,setform,(void))

bool ZPP_Debug_obj::cull( ::zpp_nape::geom::ZPP_AABB aabb){
            	HX_STACKFRAME(&_hx_pos_dbb0886236d3ab82_271_cull)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
HXLINE( 271)		if (this->xnull) {
HXLINE( 271)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = this->viewport;
HXDLIN( 271)			bool _hx_tmp;
HXDLIN( 271)			bool _hx_tmp1;
HXDLIN( 271)			if ((x->miny <= aabb->maxy)) {
HXLINE( 271)				_hx_tmp1 = (aabb->miny <= x->maxy);
            			}
            			else {
HXLINE( 271)				_hx_tmp1 = false;
            			}
HXDLIN( 271)			if (_hx_tmp1) {
HXLINE( 271)				_hx_tmp = (x->minx <= aabb->maxx);
            			}
            			else {
HXLINE( 271)				_hx_tmp = false;
            			}
HXDLIN( 271)			if (_hx_tmp) {
HXLINE( 271)				return (aabb->minx <= x->maxx);
            			}
            			else {
HXLINE( 271)				return false;
            			}
            		}
            		else {
HXLINE( 273)			HX_VARI( Float,qx) = ((Float)0.0);
HXLINE( 274)			HX_VARI( Float,qy) = ((Float)0.0);
HXLINE( 275)			HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 276)			HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 277)			{
HXLINE( 278)				vx = aabb->minx;
HXLINE( 279)				vy = aabb->miny;
            			}
HXLINE( 317)			{
HXLINE( 318)				this->tmpab->minx = (((this->xform->a * vx) + (this->xform->b * vy)) + this->xform->tx);
HXLINE( 319)				this->tmpab->miny = (((this->xform->c * vx) + (this->xform->d * vy)) + this->xform->ty);
            			}
HXLINE( 321)			{
HXLINE( 322)				this->tmpab->maxx = this->tmpab->minx;
HXLINE( 323)				this->tmpab->maxy = this->tmpab->miny;
            			}
HXLINE( 341)			vx = aabb->maxx;
HXLINE( 362)			{
HXLINE( 363)				qx = (((this->xform->a * vx) + (this->xform->b * vy)) + this->xform->tx);
HXLINE( 364)				qy = (((this->xform->c * vx) + (this->xform->d * vy)) + this->xform->ty);
            			}
HXLINE( 366)			{
HXLINE( 366)				HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->tmpab;
HXDLIN( 366)				if ((qx < _this->minx)) {
HXLINE( 366)					_this->minx = qx;
            				}
HXDLIN( 366)				if ((qx > _this->maxx)) {
HXLINE( 366)					_this->maxx = qx;
            				}
HXDLIN( 366)				if ((qy < _this->miny)) {
HXLINE( 366)					_this->miny = qy;
            				}
HXDLIN( 366)				if ((qy > _this->maxy)) {
HXLINE( 366)					_this->maxy = qy;
            				}
            			}
HXLINE( 367)			vy = aabb->maxy;
HXLINE( 388)			{
HXLINE( 389)				qx = (((this->xform->a * vx) + (this->xform->b * vy)) + this->xform->tx);
HXLINE( 390)				qy = (((this->xform->c * vx) + (this->xform->d * vy)) + this->xform->ty);
            			}
HXLINE( 392)			{
HXLINE( 392)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->tmpab;
HXDLIN( 392)				if ((qx < _this1->minx)) {
HXLINE( 392)					_this1->minx = qx;
            				}
HXDLIN( 392)				if ((qx > _this1->maxx)) {
HXLINE( 392)					_this1->maxx = qx;
            				}
HXDLIN( 392)				if ((qy < _this1->miny)) {
HXLINE( 392)					_this1->miny = qy;
            				}
HXDLIN( 392)				if ((qy > _this1->maxy)) {
HXLINE( 392)					_this1->maxy = qy;
            				}
            			}
HXLINE( 393)			vx = aabb->minx;
HXLINE( 414)			{
HXLINE( 415)				qx = (((this->xform->a * vx) + (this->xform->b * vy)) + this->xform->tx);
HXLINE( 416)				qy = (((this->xform->c * vx) + (this->xform->d * vy)) + this->xform->ty);
            			}
HXLINE( 418)			{
HXLINE( 418)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = this->tmpab;
HXDLIN( 418)				if ((qx < _this2->minx)) {
HXLINE( 418)					_this2->minx = qx;
            				}
HXDLIN( 418)				if ((qx > _this2->maxx)) {
HXLINE( 418)					_this2->maxx = qx;
            				}
HXDLIN( 418)				if ((qy < _this2->miny)) {
HXLINE( 418)					_this2->miny = qy;
            				}
HXDLIN( 418)				if ((qy > _this2->maxy)) {
HXLINE( 418)					_this2->maxy = qy;
            				}
            			}
HXLINE( 419)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = this->tmpab;
HXDLIN( 419)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,x1,"x") = this->viewport;
HXDLIN( 419)			bool _hx_tmp2;
HXDLIN( 419)			bool _hx_tmp3;
HXDLIN( 419)			if ((x1->miny <= _this3->maxy)) {
HXLINE( 419)				_hx_tmp3 = (_this3->miny <= x1->maxy);
            			}
            			else {
HXLINE( 419)				_hx_tmp3 = false;
            			}
HXDLIN( 419)			if (_hx_tmp3) {
HXLINE( 419)				_hx_tmp2 = (x1->minx <= _this3->maxx);
            			}
            			else {
HXLINE( 419)				_hx_tmp2 = false;
            			}
HXDLIN( 419)			if (_hx_tmp2) {
HXLINE( 419)				return (_this3->minx <= x1->maxx);
            			}
            			else {
HXLINE( 419)				return false;
            			}
            		}
HXLINE( 271)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Debug_obj,cull,return )

void ZPP_Debug_obj::sup_setbg(int bgcol){
            	HX_STACKFRAME(&_hx_pos_dbb0886236d3ab82_422_sup_setbg)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bgcol,"bgcol")
HXLINE( 423)		this->bg_r = ((int)((int)bgcol >> (int)(int)16) & (int)(int)255);
HXLINE( 424)		this->bg_g = ((int)((int)bgcol >> (int)(int)8) & (int)(int)255);
HXLINE( 425)		this->bg_b = ((int)bgcol & (int)(int)255);
HXLINE( 426)		this->bg_col = bgcol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Debug_obj,sup_setbg,(void))

bool ZPP_Debug_obj::internal;


hx::ObjectPtr< ZPP_Debug_obj > ZPP_Debug_obj::__new(int width,int height) {
	hx::ObjectPtr< ZPP_Debug_obj > __this = new ZPP_Debug_obj();
	__this->__construct(width,height);
	return __this;
}

hx::ObjectPtr< ZPP_Debug_obj > ZPP_Debug_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height) {
	ZPP_Debug_obj *__this = (ZPP_Debug_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Debug_obj), true, "zpp_nape.util.ZPP_Debug"));
	*(void **)__this = ZPP_Debug_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

ZPP_Debug_obj::ZPP_Debug_obj()
{
}

void ZPP_Debug_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Debug);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(isbmp,"isbmp");
	HX_MARK_MEMBER_NAME(d_shape,"d_shape");
	HX_MARK_MEMBER_NAME(bg_r,"bg_r");
	HX_MARK_MEMBER_NAME(bg_g,"bg_g");
	HX_MARK_MEMBER_NAME(bg_b,"bg_b");
	HX_MARK_MEMBER_NAME(bg_col,"bg_col");
	HX_MARK_MEMBER_NAME(xform,"xform");
	HX_MARK_MEMBER_NAME(xnull,"xnull");
	HX_MARK_MEMBER_NAME(xdet,"xdet");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(viewport,"viewport");
	HX_MARK_MEMBER_NAME(iport,"iport");
	HX_MARK_MEMBER_NAME(tmpab,"tmpab");
	HX_MARK_END_CLASS();
}

void ZPP_Debug_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(isbmp,"isbmp");
	HX_VISIT_MEMBER_NAME(d_shape,"d_shape");
	HX_VISIT_MEMBER_NAME(bg_r,"bg_r");
	HX_VISIT_MEMBER_NAME(bg_g,"bg_g");
	HX_VISIT_MEMBER_NAME(bg_b,"bg_b");
	HX_VISIT_MEMBER_NAME(bg_col,"bg_col");
	HX_VISIT_MEMBER_NAME(xform,"xform");
	HX_VISIT_MEMBER_NAME(xnull,"xnull");
	HX_VISIT_MEMBER_NAME(xdet,"xdet");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(viewport,"viewport");
	HX_VISIT_MEMBER_NAME(iport,"iport");
	HX_VISIT_MEMBER_NAME(tmpab,"tmpab");
}

hx::Val ZPP_Debug_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bg_r") ) { return hx::Val( bg_r); }
		if (HX_FIELD_EQ(inName,"bg_g") ) { return hx::Val( bg_g); }
		if (HX_FIELD_EQ(inName,"bg_b") ) { return hx::Val( bg_b); }
		if (HX_FIELD_EQ(inName,"xdet") ) { return hx::Val( xdet); }
		if (HX_FIELD_EQ(inName,"cull") ) { return hx::Val( cull_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"isbmp") ) { return hx::Val( isbmp); }
		if (HX_FIELD_EQ(inName,"xform") ) { return hx::Val( xform); }
		if (HX_FIELD_EQ(inName,"xnull") ) { return hx::Val( xnull); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"iport") ) { return hx::Val( iport); }
		if (HX_FIELD_EQ(inName,"tmpab") ) { return hx::Val( tmpab); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bg_col") ) { return hx::Val( bg_col); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"d_shape") ) { return hx::Val( d_shape); }
		if (HX_FIELD_EQ(inName,"setform") ) { return hx::Val( setform_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewport") ) { return hx::Val( viewport); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sup_setbg") ) { return hx::Val( sup_setbg_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"xform_invalidate") ) { return hx::Val( xform_invalidate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Debug_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = internal; return true; }
	}
	return false;
}

hx::Val ZPP_Debug_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bg_r") ) { bg_r=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bg_g") ) { bg_g=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bg_b") ) { bg_b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xdet") ) { xdet=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::util::Debug >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isbmp") ) { isbmp=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xform") ) { xform=inValue.Cast<  ::zpp_nape::geom::ZPP_Mat23 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xnull") ) { xnull=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iport") ) { iport=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tmpab") ) { tmpab=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bg_col") ) { bg_col=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"d_shape") ) { d_shape=inValue.Cast<  ::zpp_nape::util::ZPP_ShapeDebug >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewport") ) { viewport=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Debug_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void ZPP_Debug_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("isbmp","\x9b","\x2e","\x61","\xc1"));
	outFields->push(HX_HCSTRING("d_shape","\xc6","\x8d","\x66","\xb6"));
	outFields->push(HX_HCSTRING("bg_r","\x38","\x64","\x15","\x41"));
	outFields->push(HX_HCSTRING("bg_g","\x2d","\x64","\x15","\x41"));
	outFields->push(HX_HCSTRING("bg_b","\x28","\x64","\x15","\x41"));
	outFields->push(HX_HCSTRING("bg_col","\x86","\xe1","\x55","\xbc"));
	outFields->push(HX_HCSTRING("xform","\xbc","\xfd","\xd5","\x5b"));
	outFields->push(HX_HCSTRING("xnull","\xff","\x3a","\x24","\x61"));
	outFields->push(HX_HCSTRING("xdet","\x5b","\xd4","\x9d","\x4f"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"));
	outFields->push(HX_HCSTRING("iport","\x6a","\x6c","\x6f","\xbf"));
	outFields->push(HX_HCSTRING("tmpab","\x78","\xdd","\xdc","\x12"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Debug_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::util::Debug*/ ,(int)offsetof(ZPP_Debug_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsBool,(int)offsetof(ZPP_Debug_obj,isbmp),HX_HCSTRING("isbmp","\x9b","\x2e","\x61","\xc1")},
	{hx::fsObject /*::zpp_nape::util::ZPP_ShapeDebug*/ ,(int)offsetof(ZPP_Debug_obj,d_shape),HX_HCSTRING("d_shape","\xc6","\x8d","\x66","\xb6")},
	{hx::fsFloat,(int)offsetof(ZPP_Debug_obj,bg_r),HX_HCSTRING("bg_r","\x38","\x64","\x15","\x41")},
	{hx::fsFloat,(int)offsetof(ZPP_Debug_obj,bg_g),HX_HCSTRING("bg_g","\x2d","\x64","\x15","\x41")},
	{hx::fsFloat,(int)offsetof(ZPP_Debug_obj,bg_b),HX_HCSTRING("bg_b","\x28","\x64","\x15","\x41")},
	{hx::fsInt,(int)offsetof(ZPP_Debug_obj,bg_col),HX_HCSTRING("bg_col","\x86","\xe1","\x55","\xbc")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_Mat23*/ ,(int)offsetof(ZPP_Debug_obj,xform),HX_HCSTRING("xform","\xbc","\xfd","\xd5","\x5b")},
	{hx::fsBool,(int)offsetof(ZPP_Debug_obj,xnull),HX_HCSTRING("xnull","\xff","\x3a","\x24","\x61")},
	{hx::fsFloat,(int)offsetof(ZPP_Debug_obj,xdet),HX_HCSTRING("xdet","\x5b","\xd4","\x9d","\x4f")},
	{hx::fsInt,(int)offsetof(ZPP_Debug_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(ZPP_Debug_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(int)offsetof(ZPP_Debug_obj,viewport),HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(int)offsetof(ZPP_Debug_obj,iport),HX_HCSTRING("iport","\x6a","\x6c","\x6f","\xbf")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(int)offsetof(ZPP_Debug_obj,tmpab),HX_HCSTRING("tmpab","\x78","\xdd","\xdc","\x12")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Debug_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &ZPP_Debug_obj::internal,HX_HCSTRING("internal","\x3d","\x67","\x76","\x28")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Debug_obj_sMemberFields[] = {
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("isbmp","\x9b","\x2e","\x61","\xc1"),
	HX_HCSTRING("d_shape","\xc6","\x8d","\x66","\xb6"),
	HX_HCSTRING("bg_r","\x38","\x64","\x15","\x41"),
	HX_HCSTRING("bg_g","\x2d","\x64","\x15","\x41"),
	HX_HCSTRING("bg_b","\x28","\x64","\x15","\x41"),
	HX_HCSTRING("bg_col","\x86","\xe1","\x55","\xbc"),
	HX_HCSTRING("xform","\xbc","\xfd","\xd5","\x5b"),
	HX_HCSTRING("xnull","\xff","\x3a","\x24","\x61"),
	HX_HCSTRING("xdet","\x5b","\xd4","\x9d","\x4f"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"),
	HX_HCSTRING("iport","\x6a","\x6c","\x6f","\xbf"),
	HX_HCSTRING("xform_invalidate","\x5e","\x8a","\xe9","\x8b"),
	HX_HCSTRING("setform","\xe6","\x75","\x6b","\x1e"),
	HX_HCSTRING("tmpab","\x78","\xdd","\xdc","\x12"),
	HX_HCSTRING("cull","\xb2","\x45","\xc9","\x41"),
	HX_HCSTRING("sup_setbg","\x36","\x2d","\xfb","\x8d"),
	::String(null()) };

static void ZPP_Debug_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Debug_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Debug_obj::internal,"internal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Debug_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Debug_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Debug_obj::internal,"internal");
};

#endif

hx::Class ZPP_Debug_obj::__mClass;

static ::String ZPP_Debug_obj_sStaticFields[] = {
	HX_HCSTRING("internal","\x3d","\x67","\x76","\x28"),
	::String(null())
};

void ZPP_Debug_obj::__register()
{
	hx::Object *dummy = new ZPP_Debug_obj;
	ZPP_Debug_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Debug","\x23","\x9c","\xdf","\x62");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Debug_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Debug_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Debug_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Debug_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Debug_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Debug_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Debug_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Debug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Debug_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Debug_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_dbb0886236d3ab82_175_boot)
HXLINE( 175)		internal = false;
            	}
}

} // end namespace zpp_nape
} // end namespace util
