// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_ToiEvent
#include <zpp_nape/geom/ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ToiEvent
#include <zpp_nape/util/ZNPList_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ToiEvent
#include <zpp_nape/util/ZNPNode_ZPP_ToiEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13102_new,"zpp_nape.util.ZNPList_ZPP_ToiEvent","new",0xb2337453,"zpp_nape.util.ZNPList_ZPP_ToiEvent.new","zpp_nape/util/Lists.hx",13102,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13108_begin,"zpp_nape.util.ZNPList_ZPP_ToiEvent","begin",0x545cb0dc,"zpp_nape.util.ZNPList_ZPP_ToiEvent.begin","zpp_nape/util/Lists.hx",13108,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13115_setbegin,"zpp_nape.util.ZNPList_ZPP_ToiEvent","setbegin",0xa5a70e74,"zpp_nape.util.ZNPList_ZPP_ToiEvent.setbegin","zpp_nape/util/Lists.hx",13115,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13121_add,"zpp_nape.util.ZNPList_ZPP_ToiEvent","add",0xb2299614,"zpp_nape.util.ZNPList_ZPP_ToiEvent.add","zpp_nape/util/Lists.hx",13121,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13125_inlined_add,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_add",0x1c0f9b80,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_add","zpp_nape/util/Lists.hx",13125,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13171_addAll,"zpp_nape.util.ZNPList_ZPP_ToiEvent","addAll",0x80e21f6d,"zpp_nape.util.ZNPList_ZPP_ToiEvent.addAll","zpp_nape/util/Lists.hx",13171,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13181_insert,"zpp_nape.util.ZNPList_ZPP_ToiEvent","insert",0x7fc45926,"zpp_nape.util.ZNPList_ZPP_ToiEvent.insert","zpp_nape/util/Lists.hx",13181,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13185_inlined_insert,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_insert",0x5f127f3a,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_insert","zpp_nape/util/Lists.hx",13185,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13229_pop,"zpp_nape.util.ZNPList_ZPP_ToiEvent","pop",0xb2350184,"zpp_nape.util.ZNPList_ZPP_ToiEvent.pop","zpp_nape/util/Lists.hx",13229,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13233_inlined_pop,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_pop",0x1c1b06f0,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_pop","zpp_nape/util/Lists.hx",13233,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13267_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_ToiEvent","pop_unsafe",0xb7798cc1,"zpp_nape.util.ZNPList_ZPP_ToiEvent.pop_unsafe","zpp_nape/util/Lists.hx",13267,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13271_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_pop_unsafe",0x13d64cd5,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_pop_unsafe","zpp_nape/util/Lists.hx",13271,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13293_remove,"zpp_nape.util.ZNPList_ZPP_ToiEvent","remove",0xe66fb231,"zpp_nape.util.ZNPList_ZPP_ToiEvent.remove","zpp_nape/util/Lists.hx",13293,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13295_try_remove,"zpp_nape.util.ZNPList_ZPP_ToiEvent","try_remove",0xcea3c275,"zpp_nape.util.ZNPList_ZPP_ToiEvent.try_remove","zpp_nape/util/Lists.hx",13295,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13329_inlined_remove,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_remove",0xc5bdd845,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_remove","zpp_nape/util/Lists.hx",13329,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13333_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_try_remove",0x2b008289,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_try_remove","zpp_nape/util/Lists.hx",13333,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13357_erase,"zpp_nape.util.ZNPList_ZPP_ToiEvent","erase",0x1723af99,"zpp_nape.util.ZNPList_ZPP_ToiEvent.erase","zpp_nape/util/Lists.hx",13357,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13361_inlined_erase,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_erase",0x4aa6e805,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_erase","zpp_nape/util/Lists.hx",13361,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13407_splice,"zpp_nape.util.ZNPList_ZPP_ToiEvent","splice",0xa1859b69,"zpp_nape.util.ZNPList_ZPP_ToiEvent.splice","zpp_nape/util/Lists.hx",13407,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13412_clear,"zpp_nape.util.ZNPList_ZPP_ToiEvent","clear",0xec623840,"zpp_nape.util.ZNPList_ZPP_ToiEvent.clear","zpp_nape/util/Lists.hx",13412,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13417_inlined_clear,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_clear",0x1fe570ac,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_clear","zpp_nape/util/Lists.hx",13417,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13422_reverse,"zpp_nape.util.ZNPList_ZPP_ToiEvent","reverse",0xe3485295,"zpp_nape.util.ZNPList_ZPP_ToiEvent.reverse","zpp_nape/util/Lists.hx",13422,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13438_empty,"zpp_nape.util.ZNPList_ZPP_ToiEvent","empty",0x13e10140,"zpp_nape.util.ZNPList_ZPP_ToiEvent.empty","zpp_nape/util/Lists.hx",13438,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13443_size,"zpp_nape.util.ZNPList_ZPP_ToiEvent","size",0x3e23716e,"zpp_nape.util.ZNPList_ZPP_ToiEvent.size","zpp_nape/util/Lists.hx",13443,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13446_has,"zpp_nape.util.ZNPList_ZPP_ToiEvent","has",0xb22ee34d,"zpp_nape.util.ZNPList_ZPP_ToiEvent.has","zpp_nape/util/Lists.hx",13446,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13450_inlined_has,"zpp_nape.util.ZNPList_ZPP_ToiEvent","inlined_has",0x1c14e8b9,"zpp_nape.util.ZNPList_ZPP_ToiEvent.inlined_has","zpp_nape/util/Lists.hx",13450,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13481_front,"zpp_nape.util.ZNPList_ZPP_ToiEvent","front",0xaa94df5c,"zpp_nape.util.ZNPList_ZPP_ToiEvent.front","zpp_nape/util/Lists.hx",13481,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13483_back,"zpp_nape.util.ZNPList_ZPP_ToiEvent","back",0x32e0aad4,"zpp_nape.util.ZNPList_ZPP_ToiEvent.back","zpp_nape/util/Lists.hx",13483,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13492_iterator_at,"zpp_nape.util.ZNPList_ZPP_ToiEvent","iterator_at",0x20b3d8d7,"zpp_nape.util.ZNPList_ZPP_ToiEvent.iterator_at","zpp_nape/util/Lists.hx",13492,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_aa3536b94d802d55_13505_at,"zpp_nape.util.ZNPList_ZPP_ToiEvent","at",0xb070b060,"zpp_nape.util.ZNPList_ZPP_ToiEvent.at","zpp_nape/util/Lists.hx",13505,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_ToiEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13102_new)
            	HX_STACK_THIS(this)
HXLINE(13112)		this->length = (int)0;
HXLINE(13111)		this->pushmod = false;
HXLINE(13110)		this->modified = false;
HXLINE(13103)		this->head = null();
            	}

Dynamic ZNPList_ZPP_ToiEvent_obj::__CreateEmpty() { return new ZNPList_ZPP_ToiEvent_obj; }

void *ZNPList_ZPP_ToiEvent_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_ToiEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_ToiEvent_obj > _hx_result = new ZNPList_ZPP_ToiEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_ToiEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x056be9ed;
}

 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13108_begin)
            	HX_STACK_THIS(this)
HXLINE(13108)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,begin,return )

void ZNPList_ZPP_ToiEvent_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent i){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13115_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(13116)		this->head = i;
HXLINE(13117)		this->modified = true;
HXLINE(13118)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::add( ::zpp_nape::geom::ZPP_ToiEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_aa3536b94d802d55_13121_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(13121)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXDLIN(13121)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool )) {
HXLINE(13121)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13121)			ret = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13121)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret->next;
HXDLIN(13121)			ret->next = null();
            		}
HXDLIN(13121)		ret->elt = o;
HXDLIN(13121)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,temp) = ret;
HXDLIN(13121)		temp->next = this->head;
HXDLIN(13121)		this->head = temp;
HXDLIN(13121)		this->modified = true;
HXDLIN(13121)		this->length++;
HXDLIN(13121)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,add,return )

 ::zpp_nape::geom::ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::inlined_add( ::zpp_nape::geom::ZPP_ToiEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_aa3536b94d802d55_13125_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(13135)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXLINE(13137)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool )) {
HXLINE(13138)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13144)			ret = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXLINE(13145)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret->next;
HXLINE(13146)			ret->next = null();
            		}
HXLINE(13153)		ret->elt = o;
HXLINE(13134)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,temp) = ret;
HXLINE(13156)		temp->next = this->head;
HXLINE(13157)		this->head = temp;
HXLINE(13158)		this->modified = true;
HXLINE(13159)		this->length++;
HXLINE(13160)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,inlined_add,return )

void ZNPList_ZPP_ToiEvent_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_ToiEvent x){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13171_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(13172)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cx_ite) = x->head;
HXLINE(13173)		while(hx::IsNotNull( cx_ite )){
HXLINE(13175)			this->add(cx_ite->elt);
HXLINE(13176)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent cur, ::zpp_nape::geom::ZPP_ToiEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_aa3536b94d802d55_13181_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(13181)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXDLIN(13181)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool )) {
HXLINE(13181)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13181)			ret = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13181)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret->next;
HXDLIN(13181)			ret->next = null();
            		}
HXDLIN(13181)		ret->elt = o;
HXDLIN(13181)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,temp) = ret;
HXDLIN(13181)		if (hx::IsNull( cur )) {
HXLINE(13181)			temp->next = this->head;
HXDLIN(13181)			this->head = temp;
            		}
            		else {
HXLINE(13181)			temp->next = cur->next;
HXDLIN(13181)			cur->next = temp;
            		}
HXDLIN(13181)		this->pushmod = (this->modified = true);
HXDLIN(13181)		this->length++;
HXDLIN(13181)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ToiEvent_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent cur, ::zpp_nape::geom::ZPP_ToiEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_aa3536b94d802d55_13185_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(13195)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXLINE(13197)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool )) {
HXLINE(13198)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13204)			ret = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXLINE(13205)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret->next;
HXLINE(13206)			ret->next = null();
            		}
HXLINE(13213)		ret->elt = o;
HXLINE(13194)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,temp) = ret;
HXLINE(13216)		if (hx::IsNull( cur )) {
HXLINE(13217)			temp->next = this->head;
HXLINE(13218)			this->head = temp;
            		}
            		else {
HXLINE(13221)			temp->next = cur->next;
HXLINE(13222)			cur->next = temp;
            		}
HXLINE(13224)		this->pushmod = (this->modified = true);
HXLINE(13225)		this->length++;
HXLINE(13226)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ToiEvent_obj,inlined_insert,return )

void ZNPList_ZPP_ToiEvent_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13229_pop)
            	HX_STACK_THIS(this)
HXLINE(13229)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret) = this->head;
HXDLIN(13229)		this->head = ret->next;
HXDLIN(13229)		{
HXLINE(13229)			ret->elt = null();
HXDLIN(13229)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13229)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret;
            		}
HXDLIN(13229)		if (hx::IsNull( this->head )) {
HXLINE(13229)			this->pushmod = true;
            		}
HXDLIN(13229)		this->modified = true;
HXDLIN(13229)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,pop,(void))

void ZNPList_ZPP_ToiEvent_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13233_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(13242)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret) = this->head;
HXLINE(13243)		this->head = ret->next;
HXLINE(13245)		{
HXLINE(13255)			ret->elt = null();
HXLINE(13256)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXLINE(13257)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret;
            		}
HXLINE(13262)		if (hx::IsNull( this->head )) {
HXLINE(13262)			this->pushmod = true;
            		}
HXLINE(13263)		this->modified = true;
HXLINE(13264)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13267_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(13267)		HX_VARI(  ::zpp_nape::geom::ZPP_ToiEvent,ret) = this->head->elt;
HXDLIN(13267)		this->pop();
HXDLIN(13267)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13271_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(13280)		HX_VARI(  ::zpp_nape::geom::ZPP_ToiEvent,ret) = this->head->elt;
HXLINE(13281)		this->pop();
HXLINE(13282)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_ToiEvent_obj::remove( ::zpp_nape::geom::ZPP_ToiEvent obj){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13293_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13293)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,pre) = null();
HXDLIN(13293)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cur) = this->head;
HXDLIN(13293)		while(hx::IsNotNull( cur )){
HXLINE(13293)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13293)				{
HXLINE(13293)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,old);
HXDLIN(13293)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXDLIN(13293)					if (hx::IsNull( pre )) {
HXLINE(13293)						old = this->head;
HXDLIN(13293)						ret = old->next;
HXDLIN(13293)						this->head = ret;
HXDLIN(13293)						if (hx::IsNull( this->head )) {
HXLINE(13293)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(13293)						old = pre->next;
HXDLIN(13293)						ret = old->next;
HXDLIN(13293)						pre->next = ret;
HXDLIN(13293)						if (hx::IsNull( ret )) {
HXLINE(13293)							this->pushmod = true;
            						}
            					}
HXDLIN(13293)					{
HXLINE(13293)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,o) = old;
HXDLIN(13293)						o->elt = null();
HXDLIN(13293)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13293)						::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = o;
            					}
HXDLIN(13293)					this->modified = true;
HXDLIN(13293)					this->length--;
HXDLIN(13293)					this->pushmod = true;
            				}
HXDLIN(13293)				goto _hx_goto_13;
            			}
HXDLIN(13293)			pre = cur;
HXDLIN(13293)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,remove,(void))

bool ZNPList_ZPP_ToiEvent_obj::try_remove( ::zpp_nape::geom::ZPP_ToiEvent obj){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13295_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13304)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,pre) = null();
HXLINE(13305)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cur) = this->head;
HXLINE(13306)		HX_VARI( bool,ret) = false;
HXLINE(13307)		while(hx::IsNotNull( cur )){
HXLINE(13308)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13309)				this->erase(pre);
HXLINE(13310)				ret = true;
HXLINE(13311)				goto _hx_goto_15;
            			}
HXLINE(13313)			pre = cur;
HXLINE(13314)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(13316)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,try_remove,return )

void ZNPList_ZPP_ToiEvent_obj::inlined_remove( ::zpp_nape::geom::ZPP_ToiEvent obj){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13329_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13329)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,pre) = null();
HXDLIN(13329)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cur) = this->head;
HXDLIN(13329)		while(hx::IsNotNull( cur )){
HXLINE(13329)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13329)				{
HXLINE(13329)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,old);
HXDLIN(13329)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXDLIN(13329)					if (hx::IsNull( pre )) {
HXLINE(13329)						old = this->head;
HXDLIN(13329)						ret = old->next;
HXDLIN(13329)						this->head = ret;
HXDLIN(13329)						if (hx::IsNull( this->head )) {
HXLINE(13329)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(13329)						old = pre->next;
HXDLIN(13329)						ret = old->next;
HXDLIN(13329)						pre->next = ret;
HXDLIN(13329)						if (hx::IsNull( ret )) {
HXLINE(13329)							this->pushmod = true;
            						}
            					}
HXDLIN(13329)					{
HXLINE(13329)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,o) = old;
HXDLIN(13329)						o->elt = null();
HXDLIN(13329)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13329)						::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = o;
            					}
HXDLIN(13329)					this->modified = true;
HXDLIN(13329)					this->length--;
HXDLIN(13329)					this->pushmod = true;
            				}
HXDLIN(13329)				goto _hx_goto_17;
            			}
HXDLIN(13329)			pre = cur;
HXDLIN(13329)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,inlined_remove,(void))

bool ZNPList_ZPP_ToiEvent_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_ToiEvent obj){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13333_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13342)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,pre) = null();
HXLINE(13343)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cur) = this->head;
HXLINE(13344)		HX_VARI( bool,ret) = false;
HXLINE(13345)		while(hx::IsNotNull( cur )){
HXLINE(13346)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13347)				{
HXLINE(13347)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,old);
HXDLIN(13347)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret1,"ret");
HXDLIN(13347)					if (hx::IsNull( pre )) {
HXLINE(13347)						old = this->head;
HXDLIN(13347)						ret1 = old->next;
HXDLIN(13347)						this->head = ret1;
HXDLIN(13347)						if (hx::IsNull( this->head )) {
HXLINE(13347)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(13347)						old = pre->next;
HXDLIN(13347)						ret1 = old->next;
HXDLIN(13347)						pre->next = ret1;
HXDLIN(13347)						if (hx::IsNull( ret1 )) {
HXLINE(13347)							this->pushmod = true;
            						}
            					}
HXDLIN(13347)					{
HXLINE(13347)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,o) = old;
HXDLIN(13347)						o->elt = null();
HXDLIN(13347)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13347)						::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = o;
            					}
HXDLIN(13347)					this->modified = true;
HXDLIN(13347)					this->length--;
HXDLIN(13347)					this->pushmod = true;
            				}
HXLINE(13348)				ret = true;
HXLINE(13349)				goto _hx_goto_19;
            			}
HXLINE(13351)			pre = cur;
HXLINE(13352)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(13354)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent pre){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13357_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(13357)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,old);
HXDLIN(13357)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXDLIN(13357)		if (hx::IsNull( pre )) {
HXLINE(13357)			old = this->head;
HXDLIN(13357)			ret = old->next;
HXDLIN(13357)			this->head = ret;
HXDLIN(13357)			if (hx::IsNull( this->head )) {
HXLINE(13357)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(13357)			old = pre->next;
HXDLIN(13357)			ret = old->next;
HXDLIN(13357)			pre->next = ret;
HXDLIN(13357)			if (hx::IsNull( ret )) {
HXLINE(13357)				this->pushmod = true;
            			}
            		}
HXDLIN(13357)		{
HXLINE(13357)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,o) = old;
HXDLIN(13357)			o->elt = null();
HXDLIN(13357)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13357)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = o;
            		}
HXDLIN(13357)		this->modified = true;
HXDLIN(13357)		this->length--;
HXDLIN(13357)		this->pushmod = true;
HXDLIN(13357)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent pre){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13361_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(13370)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,old);
HXLINE(13371)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret);
HXLINE(13372)		if (hx::IsNull( pre )) {
HXLINE(13373)			old = this->head;
HXLINE(13374)			ret = old->next;
HXLINE(13375)			this->head = ret;
HXLINE(13376)			if (hx::IsNull( this->head )) {
HXLINE(13376)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(13379)			old = pre->next;
HXLINE(13380)			ret = old->next;
HXLINE(13381)			pre->next = ret;
HXLINE(13382)			if (hx::IsNull( ret )) {
HXLINE(13382)				this->pushmod = true;
            			}
            		}
HXLINE(13385)		{
HXLINE(13386)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,o) = old;
HXLINE(13395)			o->elt = null();
HXLINE(13396)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXLINE(13397)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = o;
            		}
HXLINE(13402)		this->modified = true;
HXLINE(13403)		this->length--;
HXLINE(13404)		this->pushmod = true;
HXLINE(13405)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent pre,int n){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13407_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(13408)		while(true){
HXLINE(13408)			bool _hx_tmp;
HXDLIN(13408)			n = (n - (int)1);
HXDLIN(13408)			if (((n + (int)1) > (int)0)) {
HXLINE(13408)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(13408)				_hx_tmp = false;
            			}
HXDLIN(13408)			if (!(_hx_tmp)) {
HXLINE(13408)				goto _hx_goto_23;
            			}
HXDLIN(13408)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(13409)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ToiEvent_obj,splice,return )

void ZNPList_ZPP_ToiEvent_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13412_clear)
            	HX_STACK_THIS(this)
HXLINE(13412)		while(hx::IsNotNull( this->head )){
HXLINE(13412)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret) = this->head;
HXDLIN(13412)			this->head = ret->next;
HXDLIN(13412)			{
HXLINE(13412)				ret->elt = null();
HXDLIN(13412)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13412)				::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret;
            			}
HXDLIN(13412)			if (hx::IsNull( this->head )) {
HXLINE(13412)				this->pushmod = true;
            			}
HXDLIN(13412)			this->modified = true;
HXDLIN(13412)			this->length--;
            		}
HXDLIN(13412)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,clear,(void))

void ZNPList_ZPP_ToiEvent_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13417_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(13418)		while(hx::IsNotNull( this->head )){
HXLINE(13418)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret) = this->head;
HXDLIN(13418)			this->head = ret->next;
HXDLIN(13418)			{
HXLINE(13418)				ret->elt = null();
HXDLIN(13418)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool;
HXDLIN(13418)				::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = ret;
            			}
HXDLIN(13418)			if (hx::IsNull( this->head )) {
HXLINE(13418)				this->pushmod = true;
            			}
HXDLIN(13418)			this->modified = true;
HXDLIN(13418)			this->length--;
            		}
HXLINE(13419)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,inlined_clear,(void))

void ZNPList_ZPP_ToiEvent_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13422_reverse)
            	HX_STACK_THIS(this)
HXLINE(13423)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cur) = this->head;
HXLINE(13424)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,pre) = null();
HXLINE(13425)		while(hx::IsNotNull( cur )){
HXLINE(13426)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,nx) = cur->next;
HXLINE(13427)			cur->next = pre;
HXLINE(13428)			this->head = cur;
HXLINE(13429)			pre = cur;
HXLINE(13430)			cur = nx;
            		}
HXLINE(13432)		this->modified = true;
HXLINE(13433)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,reverse,(void))

bool ZNPList_ZPP_ToiEvent_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13438_empty)
            	HX_STACK_THIS(this)
HXLINE(13438)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,empty,return )

int ZNPList_ZPP_ToiEvent_obj::size(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13443_size)
            	HX_STACK_THIS(this)
HXLINE(13443)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,size,return )

bool ZNPList_ZPP_ToiEvent_obj::has( ::zpp_nape::geom::ZPP_ToiEvent obj){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13446_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13446)		HX_VAR( bool,ret);
HXDLIN(13446)		{
HXLINE(13446)			ret = false;
HXDLIN(13446)			{
HXLINE(13446)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cx_ite) = this->head;
HXDLIN(13446)				while(hx::IsNotNull( cx_ite )){
HXLINE(13446)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(13446)						ret = true;
HXDLIN(13446)						goto _hx_goto_33;
            					}
HXDLIN(13446)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(13446)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,has,return )

bool ZNPList_ZPP_ToiEvent_obj::inlined_has( ::zpp_nape::geom::ZPP_ToiEvent obj){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13450_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13459)		HX_VAR( bool,ret);
HXLINE(13460)		{
HXLINE(13461)			ret = false;
HXLINE(13462)			{
HXLINE(13463)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cx_ite) = this->head;
HXLINE(13464)				while(hx::IsNotNull( cx_ite )){
HXLINE(13467)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(13468)						ret = true;
HXLINE(13469)						goto _hx_goto_35;
            					}
HXLINE(13472)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(13476)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::front(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13481_front)
            	HX_STACK_THIS(this)
HXLINE(13481)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,front,return )

 ::zpp_nape::geom::ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::back(){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13483_back)
            	HX_STACK_THIS(this)
HXLINE(13484)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret) = this->head;
HXLINE(13485)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,cur) = ret;
HXLINE(13486)		while(hx::IsNotNull( cur )){
HXLINE(13487)			ret = cur;
HXLINE(13488)			cur = cur->next;
            		}
HXLINE(13490)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ToiEvent_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13492_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(13501)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,ret) = this->head;
HXLINE(13502)		while(true){
HXLINE(13502)			bool _hx_tmp;
HXDLIN(13502)			ind = (ind - (int)1);
HXDLIN(13502)			if (((ind + (int)1) > (int)0)) {
HXLINE(13502)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(13502)				_hx_tmp = false;
            			}
HXDLIN(13502)			if (!(_hx_tmp)) {
HXLINE(13502)				goto _hx_goto_40;
            			}
HXDLIN(13502)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(13503)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_ToiEvent ZNPList_ZPP_ToiEvent_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_aa3536b94d802d55_13505_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(13514)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,it) = this->iterator_at(ind);
HXLINE(13515)		if (hx::IsNotNull( it )) {
HXLINE(13515)			return it->elt;
            		}
            		else {
HXLINE(13515)			return null();
            		}
HXDLIN(13515)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ToiEvent_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_ToiEvent_obj > ZNPList_ZPP_ToiEvent_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_ToiEvent_obj > __this = new ZNPList_ZPP_ToiEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_ToiEvent_obj > ZNPList_ZPP_ToiEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_ToiEvent_obj *__this = (ZNPList_ZPP_ToiEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_ToiEvent_obj), true, "zpp_nape.util.ZNPList_ZPP_ToiEvent"));
	*(void **)__this = ZNPList_ZPP_ToiEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_ToiEvent_obj::ZNPList_ZPP_ToiEvent_obj()
{
}

void ZNPList_ZPP_ToiEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_ToiEvent);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_ToiEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_ToiEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_ToiEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_ToiEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_ToiEvent_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_ToiEvent*/ ,(int)offsetof(ZNPList_ZPP_ToiEvent_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_ToiEvent_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_ToiEvent_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_ToiEvent_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_ToiEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_ToiEvent_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_ToiEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_ToiEvent_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_ToiEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_ToiEvent_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_ToiEvent_obj::__mClass;

void ZNPList_ZPP_ToiEvent_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_ToiEvent_obj;
	ZNPList_ZPP_ToiEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_ToiEvent","\xe1","\x4e","\x10","\xfd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_ToiEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_ToiEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_ToiEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_ToiEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_ToiEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_ToiEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
