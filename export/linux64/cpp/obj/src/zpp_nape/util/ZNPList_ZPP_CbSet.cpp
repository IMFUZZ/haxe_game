// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSet
#include <zpp_nape/util/ZNPNode_ZPP_CbSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3511_new,"zpp_nape.util.ZNPList_ZPP_CbSet","new",0x750856e0,"zpp_nape.util.ZNPList_ZPP_CbSet.new","zpp_nape/util/Lists.hx",3511,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3517_begin,"zpp_nape.util.ZNPList_ZPP_CbSet","begin",0x201910a9,"zpp_nape.util.ZNPList_ZPP_CbSet.begin","zpp_nape/util/Lists.hx",3517,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3524_setbegin,"zpp_nape.util.ZNPList_ZPP_CbSet","setbegin",0x2a30ccc7,"zpp_nape.util.ZNPList_ZPP_CbSet.setbegin","zpp_nape/util/Lists.hx",3524,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3530_add,"zpp_nape.util.ZNPList_ZPP_CbSet","add",0x74fe78a1,"zpp_nape.util.ZNPList_ZPP_CbSet.add","zpp_nape/util/Lists.hx",3530,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3534_inlined_add,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_add",0x208d530d,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_add","zpp_nape/util/Lists.hx",3534,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3580_addAll,"zpp_nape.util.ZNPList_ZPP_CbSet","addAll",0xf9f99300,"zpp_nape.util.ZNPList_ZPP_CbSet.addAll","zpp_nape/util/Lists.hx",3580,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3590_insert,"zpp_nape.util.ZNPList_ZPP_CbSet","insert",0xf8dbccb9,"zpp_nape.util.ZNPList_ZPP_CbSet.insert","zpp_nape/util/Lists.hx",3590,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3594_inlined_insert,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_insert",0xd9f43dcd,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_insert","zpp_nape/util/Lists.hx",3594,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3638_pop,"zpp_nape.util.ZNPList_ZPP_CbSet","pop",0x7509e411,"zpp_nape.util.ZNPList_ZPP_CbSet.pop","zpp_nape/util/Lists.hx",3638,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3642_inlined_pop,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_pop",0x2098be7d,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_pop","zpp_nape/util/Lists.hx",3642,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3676_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CbSet","pop_unsafe",0xc0adc5d4,"zpp_nape.util.ZNPList_ZPP_CbSet.pop_unsafe","zpp_nape/util/Lists.hx",3676,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3680_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_pop_unsafe",0xd95650e8,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_pop_unsafe","zpp_nape/util/Lists.hx",3680,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3702_remove,"zpp_nape.util.ZNPList_ZPP_CbSet","remove",0x5f8725c4,"zpp_nape.util.ZNPList_ZPP_CbSet.remove","zpp_nape/util/Lists.hx",3702,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3704_try_remove,"zpp_nape.util.ZNPList_ZPP_CbSet","try_remove",0xd7d7fb88,"zpp_nape.util.ZNPList_ZPP_CbSet.try_remove","zpp_nape/util/Lists.hx",3704,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3738_inlined_remove,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_remove",0x409f96d8,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_remove","zpp_nape/util/Lists.hx",3738,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3742_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_try_remove",0xf080869c,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_try_remove","zpp_nape/util/Lists.hx",3742,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3766_erase,"zpp_nape.util.ZNPList_ZPP_CbSet","erase",0xe2e00f66,"zpp_nape.util.ZNPList_ZPP_CbSet.erase","zpp_nape/util/Lists.hx",3766,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3770_inlined_erase,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_erase",0xb3ab5cd2,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_erase","zpp_nape/util/Lists.hx",3770,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3816_splice,"zpp_nape.util.ZNPList_ZPP_CbSet","splice",0x1a9d0efc,"zpp_nape.util.ZNPList_ZPP_CbSet.splice","zpp_nape/util/Lists.hx",3816,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3821_clear,"zpp_nape.util.ZNPList_ZPP_CbSet","clear",0xb81e980d,"zpp_nape.util.ZNPList_ZPP_CbSet.clear","zpp_nape/util/Lists.hx",3821,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3826_inlined_clear,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_clear",0x88e9e579,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_clear","zpp_nape/util/Lists.hx",3826,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3831_reverse,"zpp_nape.util.ZNPList_ZPP_CbSet","reverse",0x5eb5ffa2,"zpp_nape.util.ZNPList_ZPP_CbSet.reverse","zpp_nape/util/Lists.hx",3831,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3847_empty,"zpp_nape.util.ZNPList_ZPP_CbSet","empty",0xdf9d610d,"zpp_nape.util.ZNPList_ZPP_CbSet.empty","zpp_nape/util/Lists.hx",3847,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3852_size,"zpp_nape.util.ZNPList_ZPP_CbSet","size",0xf594ca41,"zpp_nape.util.ZNPList_ZPP_CbSet.size","zpp_nape/util/Lists.hx",3852,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3855_has,"zpp_nape.util.ZNPList_ZPP_CbSet","has",0x7503c5da,"zpp_nape.util.ZNPList_ZPP_CbSet.has","zpp_nape/util/Lists.hx",3855,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3859_inlined_has,"zpp_nape.util.ZNPList_ZPP_CbSet","inlined_has",0x2092a046,"zpp_nape.util.ZNPList_ZPP_CbSet.inlined_has","zpp_nape/util/Lists.hx",3859,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3890_front,"zpp_nape.util.ZNPList_ZPP_CbSet","front",0x76513f29,"zpp_nape.util.ZNPList_ZPP_CbSet.front","zpp_nape/util/Lists.hx",3890,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3892_back,"zpp_nape.util.ZNPList_ZPP_CbSet","back",0xea5203a7,"zpp_nape.util.ZNPList_ZPP_CbSet.back","zpp_nape/util/Lists.hx",3892,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3901_iterator_at,"zpp_nape.util.ZNPList_ZPP_CbSet","iterator_at",0x25319064,"zpp_nape.util.ZNPList_ZPP_CbSet.iterator_at","zpp_nape/util/Lists.hx",3901,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_3ee08954adabc927_3914_at,"zpp_nape.util.ZNPList_ZPP_CbSet","at",0xb39c1e73,"zpp_nape.util.ZNPList_ZPP_CbSet.at","zpp_nape/util/Lists.hx",3914,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_CbSet_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3511_new)
            	HX_STACK_THIS(this)
HXLINE(3521)		this->length = (int)0;
HXLINE(3520)		this->pushmod = false;
HXLINE(3519)		this->modified = false;
HXLINE(3512)		this->head = null();
            	}

Dynamic ZNPList_ZPP_CbSet_obj::__CreateEmpty() { return new ZNPList_ZPP_CbSet_obj; }

void *ZNPList_ZPP_CbSet_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_CbSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_CbSet_obj > _hx_result = new ZNPList_ZPP_CbSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_CbSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x06f0337e;
}

 ::zpp_nape::util::ZNPNode_ZPP_CbSet ZNPList_ZPP_CbSet_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3517_begin)
            	HX_STACK_THIS(this)
HXLINE(3517)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,begin,return )

void ZNPList_ZPP_CbSet_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_CbSet i){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3524_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(3525)		this->head = i;
HXLINE(3526)		this->modified = true;
HXLINE(3527)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,setbegin,(void))

 ::zpp_nape::callbacks::ZPP_CbSet ZNPList_ZPP_CbSet_obj::add( ::zpp_nape::callbacks::ZPP_CbSet o){
            	HX_GC_STACKFRAME(&_hx_pos_3ee08954adabc927_3530_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(3530)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXDLIN(3530)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(3530)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(3530)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3530)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret->next;
HXDLIN(3530)			ret->next = null();
            		}
HXDLIN(3530)		ret->elt = o;
HXDLIN(3530)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp) = ret;
HXDLIN(3530)		temp->next = this->head;
HXDLIN(3530)		this->head = temp;
HXDLIN(3530)		this->modified = true;
HXDLIN(3530)		this->length++;
HXDLIN(3530)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,add,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZNPList_ZPP_CbSet_obj::inlined_add( ::zpp_nape::callbacks::ZPP_CbSet o){
            	HX_GC_STACKFRAME(&_hx_pos_3ee08954adabc927_3534_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(3544)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXLINE(3546)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(3547)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(3553)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXLINE(3554)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret->next;
HXLINE(3555)			ret->next = null();
            		}
HXLINE(3562)		ret->elt = o;
HXLINE(3543)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp) = ret;
HXLINE(3565)		temp->next = this->head;
HXLINE(3566)		this->head = temp;
HXLINE(3567)		this->modified = true;
HXLINE(3568)		this->length++;
HXLINE(3569)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,inlined_add,return )

void ZNPList_ZPP_CbSet_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_CbSet x){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3580_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(3581)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = x->head;
HXLINE(3582)		while(hx::IsNotNull( cx_ite )){
HXLINE(3584)			this->add(cx_ite->elt);
HXLINE(3585)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_CbSet ZNPList_ZPP_CbSet_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_CbSet cur, ::zpp_nape::callbacks::ZPP_CbSet o){
            	HX_GC_STACKFRAME(&_hx_pos_3ee08954adabc927_3590_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(3590)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXDLIN(3590)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(3590)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(3590)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3590)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret->next;
HXDLIN(3590)			ret->next = null();
            		}
HXDLIN(3590)		ret->elt = o;
HXDLIN(3590)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp) = ret;
HXDLIN(3590)		if (hx::IsNull( cur )) {
HXLINE(3590)			temp->next = this->head;
HXDLIN(3590)			this->head = temp;
            		}
            		else {
HXLINE(3590)			temp->next = cur->next;
HXDLIN(3590)			cur->next = temp;
            		}
HXDLIN(3590)		this->pushmod = (this->modified = true);
HXDLIN(3590)		this->length++;
HXDLIN(3590)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbSet_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSet ZNPList_ZPP_CbSet_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_CbSet cur, ::zpp_nape::callbacks::ZPP_CbSet o){
            	HX_GC_STACKFRAME(&_hx_pos_3ee08954adabc927_3594_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(3604)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXLINE(3606)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(3607)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(3613)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXLINE(3614)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret->next;
HXLINE(3615)			ret->next = null();
            		}
HXLINE(3622)		ret->elt = o;
HXLINE(3603)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp) = ret;
HXLINE(3625)		if (hx::IsNull( cur )) {
HXLINE(3626)			temp->next = this->head;
HXLINE(3627)			this->head = temp;
            		}
            		else {
HXLINE(3630)			temp->next = cur->next;
HXLINE(3631)			cur->next = temp;
            		}
HXLINE(3633)		this->pushmod = (this->modified = true);
HXLINE(3634)		this->length++;
HXLINE(3635)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbSet_obj,inlined_insert,return )

void ZNPList_ZPP_CbSet_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3638_pop)
            	HX_STACK_THIS(this)
HXLINE(3638)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret) = this->head;
HXDLIN(3638)		this->head = ret->next;
HXDLIN(3638)		{
HXLINE(3638)			ret->elt = null();
HXDLIN(3638)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3638)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret;
            		}
HXDLIN(3638)		if (hx::IsNull( this->head )) {
HXLINE(3638)			this->pushmod = true;
            		}
HXDLIN(3638)		this->modified = true;
HXDLIN(3638)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,pop,(void))

void ZNPList_ZPP_CbSet_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3642_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(3651)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret) = this->head;
HXLINE(3652)		this->head = ret->next;
HXLINE(3654)		{
HXLINE(3664)			ret->elt = null();
HXLINE(3665)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXLINE(3666)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret;
            		}
HXLINE(3671)		if (hx::IsNull( this->head )) {
HXLINE(3671)			this->pushmod = true;
            		}
HXLINE(3672)		this->modified = true;
HXLINE(3673)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,inlined_pop,(void))

 ::zpp_nape::callbacks::ZPP_CbSet ZNPList_ZPP_CbSet_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3676_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(3676)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,ret) = this->head->elt;
HXDLIN(3676)		this->pop();
HXDLIN(3676)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,pop_unsafe,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZNPList_ZPP_CbSet_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3680_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(3689)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,ret) = this->head->elt;
HXLINE(3690)		this->pop();
HXLINE(3691)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_CbSet_obj::remove( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3702_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3702)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,pre) = null();
HXDLIN(3702)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cur) = this->head;
HXDLIN(3702)		while(hx::IsNotNull( cur )){
HXLINE(3702)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(3702)				{
HXLINE(3702)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,old);
HXDLIN(3702)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXDLIN(3702)					if (hx::IsNull( pre )) {
HXLINE(3702)						old = this->head;
HXDLIN(3702)						ret = old->next;
HXDLIN(3702)						this->head = ret;
HXDLIN(3702)						if (hx::IsNull( this->head )) {
HXLINE(3702)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(3702)						old = pre->next;
HXDLIN(3702)						ret = old->next;
HXDLIN(3702)						pre->next = ret;
HXDLIN(3702)						if (hx::IsNull( ret )) {
HXLINE(3702)							this->pushmod = true;
            						}
            					}
HXDLIN(3702)					{
HXLINE(3702)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,o) = old;
HXDLIN(3702)						o->elt = null();
HXDLIN(3702)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3702)						::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = o;
            					}
HXDLIN(3702)					this->modified = true;
HXDLIN(3702)					this->length--;
HXDLIN(3702)					this->pushmod = true;
            				}
HXDLIN(3702)				goto _hx_goto_13;
            			}
HXDLIN(3702)			pre = cur;
HXDLIN(3702)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,remove,(void))

bool ZNPList_ZPP_CbSet_obj::try_remove( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3704_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3713)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,pre) = null();
HXLINE(3714)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cur) = this->head;
HXLINE(3715)		HX_VARI( bool,ret) = false;
HXLINE(3716)		while(hx::IsNotNull( cur )){
HXLINE(3717)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(3718)				this->erase(pre);
HXLINE(3719)				ret = true;
HXLINE(3720)				goto _hx_goto_15;
            			}
HXLINE(3722)			pre = cur;
HXLINE(3723)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(3725)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,try_remove,return )

void ZNPList_ZPP_CbSet_obj::inlined_remove( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3738_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3738)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,pre) = null();
HXDLIN(3738)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cur) = this->head;
HXDLIN(3738)		while(hx::IsNotNull( cur )){
HXLINE(3738)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(3738)				{
HXLINE(3738)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,old);
HXDLIN(3738)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXDLIN(3738)					if (hx::IsNull( pre )) {
HXLINE(3738)						old = this->head;
HXDLIN(3738)						ret = old->next;
HXDLIN(3738)						this->head = ret;
HXDLIN(3738)						if (hx::IsNull( this->head )) {
HXLINE(3738)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(3738)						old = pre->next;
HXDLIN(3738)						ret = old->next;
HXDLIN(3738)						pre->next = ret;
HXDLIN(3738)						if (hx::IsNull( ret )) {
HXLINE(3738)							this->pushmod = true;
            						}
            					}
HXDLIN(3738)					{
HXLINE(3738)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,o) = old;
HXDLIN(3738)						o->elt = null();
HXDLIN(3738)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3738)						::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = o;
            					}
HXDLIN(3738)					this->modified = true;
HXDLIN(3738)					this->length--;
HXDLIN(3738)					this->pushmod = true;
            				}
HXDLIN(3738)				goto _hx_goto_17;
            			}
HXDLIN(3738)			pre = cur;
HXDLIN(3738)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,inlined_remove,(void))

bool ZNPList_ZPP_CbSet_obj::inlined_try_remove( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3742_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3751)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,pre) = null();
HXLINE(3752)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cur) = this->head;
HXLINE(3753)		HX_VARI( bool,ret) = false;
HXLINE(3754)		while(hx::IsNotNull( cur )){
HXLINE(3755)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(3756)				{
HXLINE(3756)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,old);
HXDLIN(3756)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret1,"ret");
HXDLIN(3756)					if (hx::IsNull( pre )) {
HXLINE(3756)						old = this->head;
HXDLIN(3756)						ret1 = old->next;
HXDLIN(3756)						this->head = ret1;
HXDLIN(3756)						if (hx::IsNull( this->head )) {
HXLINE(3756)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(3756)						old = pre->next;
HXDLIN(3756)						ret1 = old->next;
HXDLIN(3756)						pre->next = ret1;
HXDLIN(3756)						if (hx::IsNull( ret1 )) {
HXLINE(3756)							this->pushmod = true;
            						}
            					}
HXDLIN(3756)					{
HXLINE(3756)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,o) = old;
HXDLIN(3756)						o->elt = null();
HXDLIN(3756)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3756)						::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = o;
            					}
HXDLIN(3756)					this->modified = true;
HXDLIN(3756)					this->length--;
HXDLIN(3756)					this->pushmod = true;
            				}
HXLINE(3757)				ret = true;
HXLINE(3758)				goto _hx_goto_19;
            			}
HXLINE(3760)			pre = cur;
HXLINE(3761)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(3763)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSet ZNPList_ZPP_CbSet_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_CbSet pre){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3766_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(3766)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,old);
HXDLIN(3766)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXDLIN(3766)		if (hx::IsNull( pre )) {
HXLINE(3766)			old = this->head;
HXDLIN(3766)			ret = old->next;
HXDLIN(3766)			this->head = ret;
HXDLIN(3766)			if (hx::IsNull( this->head )) {
HXLINE(3766)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(3766)			old = pre->next;
HXDLIN(3766)			ret = old->next;
HXDLIN(3766)			pre->next = ret;
HXDLIN(3766)			if (hx::IsNull( ret )) {
HXLINE(3766)				this->pushmod = true;
            			}
            		}
HXDLIN(3766)		{
HXLINE(3766)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,o) = old;
HXDLIN(3766)			o->elt = null();
HXDLIN(3766)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3766)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = o;
            		}
HXDLIN(3766)		this->modified = true;
HXDLIN(3766)		this->length--;
HXDLIN(3766)		this->pushmod = true;
HXDLIN(3766)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSet ZNPList_ZPP_CbSet_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_CbSet pre){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3770_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(3779)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,old);
HXLINE(3780)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXLINE(3781)		if (hx::IsNull( pre )) {
HXLINE(3782)			old = this->head;
HXLINE(3783)			ret = old->next;
HXLINE(3784)			this->head = ret;
HXLINE(3785)			if (hx::IsNull( this->head )) {
HXLINE(3785)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(3788)			old = pre->next;
HXLINE(3789)			ret = old->next;
HXLINE(3790)			pre->next = ret;
HXLINE(3791)			if (hx::IsNull( ret )) {
HXLINE(3791)				this->pushmod = true;
            			}
            		}
HXLINE(3794)		{
HXLINE(3795)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,o) = old;
HXLINE(3804)			o->elt = null();
HXLINE(3805)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXLINE(3806)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = o;
            		}
HXLINE(3811)		this->modified = true;
HXLINE(3812)		this->length--;
HXLINE(3813)		this->pushmod = true;
HXLINE(3814)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSet ZNPList_ZPP_CbSet_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_CbSet pre,int n){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3816_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(3817)		while(true){
HXLINE(3817)			bool _hx_tmp;
HXDLIN(3817)			n = (n - (int)1);
HXDLIN(3817)			if (((n + (int)1) > (int)0)) {
HXLINE(3817)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(3817)				_hx_tmp = false;
            			}
HXDLIN(3817)			if (!(_hx_tmp)) {
HXLINE(3817)				goto _hx_goto_23;
            			}
HXDLIN(3817)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(3818)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbSet_obj,splice,return )

void ZNPList_ZPP_CbSet_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3821_clear)
            	HX_STACK_THIS(this)
HXLINE(3821)		while(hx::IsNotNull( this->head )){
HXLINE(3821)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret) = this->head;
HXDLIN(3821)			this->head = ret->next;
HXDLIN(3821)			{
HXLINE(3821)				ret->elt = null();
HXDLIN(3821)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3821)				::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret;
            			}
HXDLIN(3821)			if (hx::IsNull( this->head )) {
HXLINE(3821)				this->pushmod = true;
            			}
HXDLIN(3821)			this->modified = true;
HXDLIN(3821)			this->length--;
            		}
HXDLIN(3821)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,clear,(void))

void ZNPList_ZPP_CbSet_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3826_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(3827)		while(hx::IsNotNull( this->head )){
HXLINE(3827)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret) = this->head;
HXDLIN(3827)			this->head = ret->next;
HXDLIN(3827)			{
HXLINE(3827)				ret->elt = null();
HXDLIN(3827)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN(3827)				::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret;
            			}
HXDLIN(3827)			if (hx::IsNull( this->head )) {
HXLINE(3827)				this->pushmod = true;
            			}
HXDLIN(3827)			this->modified = true;
HXDLIN(3827)			this->length--;
            		}
HXLINE(3828)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,inlined_clear,(void))

void ZNPList_ZPP_CbSet_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3831_reverse)
            	HX_STACK_THIS(this)
HXLINE(3832)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cur) = this->head;
HXLINE(3833)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,pre) = null();
HXLINE(3834)		while(hx::IsNotNull( cur )){
HXLINE(3835)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,nx) = cur->next;
HXLINE(3836)			cur->next = pre;
HXLINE(3837)			this->head = cur;
HXLINE(3838)			pre = cur;
HXLINE(3839)			cur = nx;
            		}
HXLINE(3841)		this->modified = true;
HXLINE(3842)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,reverse,(void))

bool ZNPList_ZPP_CbSet_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3847_empty)
            	HX_STACK_THIS(this)
HXLINE(3847)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,empty,return )

int ZNPList_ZPP_CbSet_obj::size(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3852_size)
            	HX_STACK_THIS(this)
HXLINE(3852)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,size,return )

bool ZNPList_ZPP_CbSet_obj::has( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3855_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3855)		HX_VAR( bool,ret);
HXDLIN(3855)		{
HXLINE(3855)			ret = false;
HXDLIN(3855)			{
HXLINE(3855)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->head;
HXDLIN(3855)				while(hx::IsNotNull( cx_ite )){
HXLINE(3855)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(3855)						ret = true;
HXDLIN(3855)						goto _hx_goto_33;
            					}
HXDLIN(3855)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(3855)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,has,return )

bool ZNPList_ZPP_CbSet_obj::inlined_has( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3859_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3868)		HX_VAR( bool,ret);
HXLINE(3869)		{
HXLINE(3870)			ret = false;
HXLINE(3871)			{
HXLINE(3872)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->head;
HXLINE(3873)				while(hx::IsNotNull( cx_ite )){
HXLINE(3876)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(3877)						ret = true;
HXLINE(3878)						goto _hx_goto_35;
            					}
HXLINE(3881)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(3885)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,inlined_has,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZNPList_ZPP_CbSet_obj::front(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3890_front)
            	HX_STACK_THIS(this)
HXLINE(3890)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,front,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZNPList_ZPP_CbSet_obj::back(){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3892_back)
            	HX_STACK_THIS(this)
HXLINE(3893)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret) = this->head;
HXLINE(3894)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cur) = ret;
HXLINE(3895)		while(hx::IsNotNull( cur )){
HXLINE(3896)			ret = cur;
HXLINE(3897)			cur = cur->next;
            		}
HXLINE(3899)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSet_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSet ZNPList_ZPP_CbSet_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3901_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(3910)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret) = this->head;
HXLINE(3911)		while(true){
HXLINE(3911)			bool _hx_tmp;
HXDLIN(3911)			ind = (ind - (int)1);
HXDLIN(3911)			if (((ind + (int)1) > (int)0)) {
HXLINE(3911)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(3911)				_hx_tmp = false;
            			}
HXDLIN(3911)			if (!(_hx_tmp)) {
HXLINE(3911)				goto _hx_goto_40;
            			}
HXDLIN(3911)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(3912)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,iterator_at,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZNPList_ZPP_CbSet_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_3ee08954adabc927_3914_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(3923)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,it) = this->iterator_at(ind);
HXLINE(3924)		if (hx::IsNotNull( it )) {
HXLINE(3924)			return it->elt;
            		}
            		else {
HXLINE(3924)			return null();
            		}
HXDLIN(3924)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSet_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_CbSet_obj > ZNPList_ZPP_CbSet_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_CbSet_obj > __this = new ZNPList_ZPP_CbSet_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_CbSet_obj > ZNPList_ZPP_CbSet_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_CbSet_obj *__this = (ZNPList_ZPP_CbSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_CbSet_obj), true, "zpp_nape.util.ZNPList_ZPP_CbSet"));
	*(void **)__this = ZNPList_ZPP_CbSet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_CbSet_obj::ZNPList_ZPP_CbSet_obj()
{
}

void ZNPList_ZPP_CbSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_CbSet);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_CbSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_CbSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_CbSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_CbSet >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_CbSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_CbSet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_CbSet*/ ,(int)offsetof(ZNPList_ZPP_CbSet_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CbSet_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CbSet_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_CbSet_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_CbSet_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_CbSet_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_CbSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_CbSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_CbSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_CbSet_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_CbSet_obj::__mClass;

void ZNPList_ZPP_CbSet_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_CbSet_obj;
	ZNPList_ZPP_CbSet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_CbSet","\xee","\xa6","\x23","\xfb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_CbSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_CbSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_CbSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_CbSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_CbSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_CbSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
