// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Vec2
#include <zpp_nape/util/ZNPList_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Vec2
#include <zpp_nape/util/ZNPNode_ZPP_Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_8932_new,"zpp_nape.util.ZNPList_ZPP_Vec2","new",0x494ccf85,"zpp_nape.util.ZNPList_ZPP_Vec2.new","zpp_nape/util/Lists.hx",8932,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_8938_begin,"zpp_nape.util.ZNPList_ZPP_Vec2","begin",0xe8e8bc8e,"zpp_nape.util.ZNPList_ZPP_Vec2.begin","zpp_nape/util/Lists.hx",8938,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_8945_setbegin,"zpp_nape.util.ZNPList_ZPP_Vec2","setbegin",0x2b9bde02,"zpp_nape.util.ZNPList_ZPP_Vec2.setbegin","zpp_nape/util/Lists.hx",8945,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_8951_add,"zpp_nape.util.ZNPList_ZPP_Vec2","add",0x4942f146,"zpp_nape.util.ZNPList_ZPP_Vec2.add","zpp_nape/util/Lists.hx",8951,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_8955_inlined_add,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_add",0xf7a278b2,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_add","zpp_nape/util/Lists.hx",8955,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9001_addAll,"zpp_nape.util.ZNPList_ZPP_Vec2","addAll",0xe6e04f7b,"zpp_nape.util.ZNPList_ZPP_Vec2.addAll","zpp_nape/util/Lists.hx",9001,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9011_insert,"zpp_nape.util.ZNPList_ZPP_Vec2","insert",0xe5c28934,"zpp_nape.util.ZNPList_ZPP_Vec2.insert","zpp_nape/util/Lists.hx",9011,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9015_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_insert",0xbff46d48,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_insert","zpp_nape/util/Lists.hx",9015,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9059_pop,"zpp_nape.util.ZNPList_ZPP_Vec2","pop",0x494e5cb6,"zpp_nape.util.ZNPList_ZPP_Vec2.pop","zpp_nape/util/Lists.hx",9059,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9063_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_pop",0xf7ade422,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_pop","zpp_nape/util/Lists.hx",9063,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9097_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Vec2","pop_unsafe",0x3febdbcf,"zpp_nape.util.ZNPList_ZPP_Vec2.pop_unsafe","zpp_nape/util/Lists.hx",9097,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9101_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_pop_unsafe",0x66e359e3,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_pop_unsafe","zpp_nape/util/Lists.hx",9101,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9123_remove,"zpp_nape.util.ZNPList_ZPP_Vec2","remove",0x4c6de23f,"zpp_nape.util.ZNPList_ZPP_Vec2.remove","zpp_nape/util/Lists.hx",9123,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9125_try_remove,"zpp_nape.util.ZNPList_ZPP_Vec2","try_remove",0x57161183,"zpp_nape.util.ZNPList_ZPP_Vec2.try_remove","zpp_nape/util/Lists.hx",9125,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9159_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_remove",0x269fc653,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_remove","zpp_nape/util/Lists.hx",9159,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9163_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_try_remove",0x7e0d8f97,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_try_remove","zpp_nape/util/Lists.hx",9163,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9187_erase,"zpp_nape.util.ZNPList_ZPP_Vec2","erase",0xabafbb4b,"zpp_nape.util.ZNPList_ZPP_Vec2.erase","zpp_nape/util/Lists.hx",9187,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9191_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_erase",0x5690f5b7,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_erase","zpp_nape/util/Lists.hx",9191,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9237_splice,"zpp_nape.util.ZNPList_ZPP_Vec2","splice",0x0783cb77,"zpp_nape.util.ZNPList_ZPP_Vec2.splice","zpp_nape/util/Lists.hx",9237,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9242_clear,"zpp_nape.util.ZNPList_ZPP_Vec2","clear",0x80ee43f2,"zpp_nape.util.ZNPList_ZPP_Vec2.clear","zpp_nape/util/Lists.hx",9242,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9247_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_clear",0x2bcf7e5e,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_clear","zpp_nape/util/Lists.hx",9247,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9252_reverse,"zpp_nape.util.ZNPList_ZPP_Vec2","reverse",0xbbb42ec7,"zpp_nape.util.ZNPList_ZPP_Vec2.reverse","zpp_nape/util/Lists.hx",9252,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9268_empty,"zpp_nape.util.ZNPList_ZPP_Vec2","empty",0xa86d0cf2,"zpp_nape.util.ZNPList_ZPP_Vec2.empty","zpp_nape/util/Lists.hx",9268,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9273_size,"zpp_nape.util.ZNPList_ZPP_Vec2","size",0xdd39e1fc,"zpp_nape.util.ZNPList_ZPP_Vec2.size","zpp_nape/util/Lists.hx",9273,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9276_has,"zpp_nape.util.ZNPList_ZPP_Vec2","has",0x49483e7f,"zpp_nape.util.ZNPList_ZPP_Vec2.has","zpp_nape/util/Lists.hx",9276,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9280_inlined_has,"zpp_nape.util.ZNPList_ZPP_Vec2","inlined_has",0xf7a7c5eb,"zpp_nape.util.ZNPList_ZPP_Vec2.inlined_has","zpp_nape/util/Lists.hx",9280,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9311_front,"zpp_nape.util.ZNPList_ZPP_Vec2","front",0x3f20eb0e,"zpp_nape.util.ZNPList_ZPP_Vec2.front","zpp_nape/util/Lists.hx",9311,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9313_back,"zpp_nape.util.ZNPList_ZPP_Vec2","back",0xd1f71b62,"zpp_nape.util.ZNPList_ZPP_Vec2.back","zpp_nape/util/Lists.hx",9313,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9322_iterator_at,"zpp_nape.util.ZNPList_ZPP_Vec2","iterator_at",0xfc46b609,"zpp_nape.util.ZNPList_ZPP_Vec2.iterator_at","zpp_nape/util/Lists.hx",9322,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_8b2655bf3500ef6c_9335_at,"zpp_nape.util.ZNPList_ZPP_Vec2","at",0x2636416e,"zpp_nape.util.ZNPList_ZPP_Vec2.at","zpp_nape/util/Lists.hx",9335,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Vec2_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_8932_new)
            	HX_STACK_THIS(this)
HXLINE(8942)		this->length = (int)0;
HXLINE(8941)		this->pushmod = false;
HXLINE(8940)		this->modified = false;
HXLINE(8933)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Vec2_obj::__CreateEmpty() { return new ZNPList_ZPP_Vec2_obj; }

void *ZNPList_ZPP_Vec2_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Vec2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Vec2_obj > _hx_result = new ZNPList_ZPP_Vec2_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Vec2_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7981ce1f;
}

 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ZNPList_ZPP_Vec2_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_8938_begin)
            	HX_STACK_THIS(this)
HXLINE(8938)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,begin,return )

void ZNPList_ZPP_Vec2_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Vec2 i){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_8945_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(8946)		this->head = i;
HXLINE(8947)		this->modified = true;
HXLINE(8948)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_Vec2 ZNPList_ZPP_Vec2_obj::add( ::zpp_nape::geom::ZPP_Vec2 o){
            	HX_GC_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_8951_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(8951)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXDLIN(8951)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool )) {
HXLINE(8951)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8951)			ret = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(8951)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN(8951)			ret->next = null();
            		}
HXDLIN(8951)		ret->elt = o;
HXDLIN(8951)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,temp) = ret;
HXDLIN(8951)		temp->next = this->head;
HXDLIN(8951)		this->head = temp;
HXDLIN(8951)		this->modified = true;
HXDLIN(8951)		this->length++;
HXDLIN(8951)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,add,return )

 ::zpp_nape::geom::ZPP_Vec2 ZNPList_ZPP_Vec2_obj::inlined_add( ::zpp_nape::geom::ZPP_Vec2 o){
            	HX_GC_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_8955_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(8965)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXLINE(8967)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool )) {
HXLINE(8968)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8974)			ret = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXLINE(8975)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret->next;
HXLINE(8976)			ret->next = null();
            		}
HXLINE(8983)		ret->elt = o;
HXLINE(8964)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,temp) = ret;
HXLINE(8986)		temp->next = this->head;
HXLINE(8987)		this->head = temp;
HXLINE(8988)		this->modified = true;
HXLINE(8989)		this->length++;
HXLINE(8990)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,inlined_add,return )

void ZNPList_ZPP_Vec2_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Vec2 x){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9001_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(9002)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cx_ite) = x->head;
HXLINE(9003)		while(hx::IsNotNull( cx_ite )){
HXLINE(9005)			this->add(cx_ite->elt);
HXLINE(9006)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ZNPList_ZPP_Vec2_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Vec2 cur, ::zpp_nape::geom::ZPP_Vec2 o){
            	HX_GC_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9011_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(9011)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXDLIN(9011)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool )) {
HXLINE(9011)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9011)			ret = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9011)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN(9011)			ret->next = null();
            		}
HXDLIN(9011)		ret->elt = o;
HXDLIN(9011)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,temp) = ret;
HXDLIN(9011)		if (hx::IsNull( cur )) {
HXLINE(9011)			temp->next = this->head;
HXDLIN(9011)			this->head = temp;
            		}
            		else {
HXLINE(9011)			temp->next = cur->next;
HXDLIN(9011)			cur->next = temp;
            		}
HXDLIN(9011)		this->pushmod = (this->modified = true);
HXDLIN(9011)		this->length++;
HXDLIN(9011)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Vec2_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ZNPList_ZPP_Vec2_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Vec2 cur, ::zpp_nape::geom::ZPP_Vec2 o){
            	HX_GC_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9015_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(9025)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXLINE(9027)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool )) {
HXLINE(9028)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9034)			ret = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXLINE(9035)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret->next;
HXLINE(9036)			ret->next = null();
            		}
HXLINE(9043)		ret->elt = o;
HXLINE(9024)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,temp) = ret;
HXLINE(9046)		if (hx::IsNull( cur )) {
HXLINE(9047)			temp->next = this->head;
HXLINE(9048)			this->head = temp;
            		}
            		else {
HXLINE(9051)			temp->next = cur->next;
HXLINE(9052)			cur->next = temp;
            		}
HXLINE(9054)		this->pushmod = (this->modified = true);
HXLINE(9055)		this->length++;
HXLINE(9056)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Vec2_obj,inlined_insert,return )

void ZNPList_ZPP_Vec2_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9059_pop)
            	HX_STACK_THIS(this)
HXLINE(9059)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret) = this->head;
HXDLIN(9059)		this->head = ret->next;
HXDLIN(9059)		{
HXLINE(9059)			ret->elt = null();
HXDLIN(9059)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9059)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret;
            		}
HXDLIN(9059)		if (hx::IsNull( this->head )) {
HXLINE(9059)			this->pushmod = true;
            		}
HXDLIN(9059)		this->modified = true;
HXDLIN(9059)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,pop,(void))

void ZNPList_ZPP_Vec2_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9063_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(9072)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret) = this->head;
HXLINE(9073)		this->head = ret->next;
HXLINE(9075)		{
HXLINE(9085)			ret->elt = null();
HXLINE(9086)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXLINE(9087)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret;
            		}
HXLINE(9092)		if (hx::IsNull( this->head )) {
HXLINE(9092)			this->pushmod = true;
            		}
HXLINE(9093)		this->modified = true;
HXLINE(9094)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_Vec2 ZNPList_ZPP_Vec2_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9097_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(9097)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ret) = this->head->elt;
HXDLIN(9097)		this->pop();
HXDLIN(9097)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_Vec2 ZNPList_ZPP_Vec2_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9101_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(9110)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ret) = this->head->elt;
HXLINE(9111)		this->pop();
HXLINE(9112)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Vec2_obj::remove( ::zpp_nape::geom::ZPP_Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9123_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9123)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,pre) = null();
HXDLIN(9123)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cur) = this->head;
HXDLIN(9123)		while(hx::IsNotNull( cur )){
HXLINE(9123)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9123)				{
HXLINE(9123)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,old);
HXDLIN(9123)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXDLIN(9123)					if (hx::IsNull( pre )) {
HXLINE(9123)						old = this->head;
HXDLIN(9123)						ret = old->next;
HXDLIN(9123)						this->head = ret;
HXDLIN(9123)						if (hx::IsNull( this->head )) {
HXLINE(9123)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(9123)						old = pre->next;
HXDLIN(9123)						ret = old->next;
HXDLIN(9123)						pre->next = ret;
HXDLIN(9123)						if (hx::IsNull( ret )) {
HXLINE(9123)							this->pushmod = true;
            						}
            					}
HXDLIN(9123)					{
HXLINE(9123)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,o) = old;
HXDLIN(9123)						o->elt = null();
HXDLIN(9123)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9123)						::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = o;
            					}
HXDLIN(9123)					this->modified = true;
HXDLIN(9123)					this->length--;
HXDLIN(9123)					this->pushmod = true;
            				}
HXDLIN(9123)				goto _hx_goto_13;
            			}
HXDLIN(9123)			pre = cur;
HXDLIN(9123)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,remove,(void))

bool ZNPList_ZPP_Vec2_obj::try_remove( ::zpp_nape::geom::ZPP_Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9125_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9134)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,pre) = null();
HXLINE(9135)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cur) = this->head;
HXLINE(9136)		HX_VARI( bool,ret) = false;
HXLINE(9137)		while(hx::IsNotNull( cur )){
HXLINE(9138)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9139)				this->erase(pre);
HXLINE(9140)				ret = true;
HXLINE(9141)				goto _hx_goto_15;
            			}
HXLINE(9143)			pre = cur;
HXLINE(9144)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(9146)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,try_remove,return )

void ZNPList_ZPP_Vec2_obj::inlined_remove( ::zpp_nape::geom::ZPP_Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9159_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9159)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,pre) = null();
HXDLIN(9159)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cur) = this->head;
HXDLIN(9159)		while(hx::IsNotNull( cur )){
HXLINE(9159)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9159)				{
HXLINE(9159)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,old);
HXDLIN(9159)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXDLIN(9159)					if (hx::IsNull( pre )) {
HXLINE(9159)						old = this->head;
HXDLIN(9159)						ret = old->next;
HXDLIN(9159)						this->head = ret;
HXDLIN(9159)						if (hx::IsNull( this->head )) {
HXLINE(9159)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(9159)						old = pre->next;
HXDLIN(9159)						ret = old->next;
HXDLIN(9159)						pre->next = ret;
HXDLIN(9159)						if (hx::IsNull( ret )) {
HXLINE(9159)							this->pushmod = true;
            						}
            					}
HXDLIN(9159)					{
HXLINE(9159)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,o) = old;
HXDLIN(9159)						o->elt = null();
HXDLIN(9159)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9159)						::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = o;
            					}
HXDLIN(9159)					this->modified = true;
HXDLIN(9159)					this->length--;
HXDLIN(9159)					this->pushmod = true;
            				}
HXDLIN(9159)				goto _hx_goto_17;
            			}
HXDLIN(9159)			pre = cur;
HXDLIN(9159)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,inlined_remove,(void))

bool ZNPList_ZPP_Vec2_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9163_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9172)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,pre) = null();
HXLINE(9173)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cur) = this->head;
HXLINE(9174)		HX_VARI( bool,ret) = false;
HXLINE(9175)		while(hx::IsNotNull( cur )){
HXLINE(9176)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9177)				{
HXLINE(9177)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,old);
HXDLIN(9177)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret1,"ret");
HXDLIN(9177)					if (hx::IsNull( pre )) {
HXLINE(9177)						old = this->head;
HXDLIN(9177)						ret1 = old->next;
HXDLIN(9177)						this->head = ret1;
HXDLIN(9177)						if (hx::IsNull( this->head )) {
HXLINE(9177)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(9177)						old = pre->next;
HXDLIN(9177)						ret1 = old->next;
HXDLIN(9177)						pre->next = ret1;
HXDLIN(9177)						if (hx::IsNull( ret1 )) {
HXLINE(9177)							this->pushmod = true;
            						}
            					}
HXDLIN(9177)					{
HXLINE(9177)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,o) = old;
HXDLIN(9177)						o->elt = null();
HXDLIN(9177)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9177)						::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = o;
            					}
HXDLIN(9177)					this->modified = true;
HXDLIN(9177)					this->length--;
HXDLIN(9177)					this->pushmod = true;
            				}
HXLINE(9178)				ret = true;
HXLINE(9179)				goto _hx_goto_19;
            			}
HXLINE(9181)			pre = cur;
HXLINE(9182)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(9184)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ZNPList_ZPP_Vec2_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Vec2 pre){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9187_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(9187)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,old);
HXDLIN(9187)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXDLIN(9187)		if (hx::IsNull( pre )) {
HXLINE(9187)			old = this->head;
HXDLIN(9187)			ret = old->next;
HXDLIN(9187)			this->head = ret;
HXDLIN(9187)			if (hx::IsNull( this->head )) {
HXLINE(9187)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(9187)			old = pre->next;
HXDLIN(9187)			ret = old->next;
HXDLIN(9187)			pre->next = ret;
HXDLIN(9187)			if (hx::IsNull( ret )) {
HXLINE(9187)				this->pushmod = true;
            			}
            		}
HXDLIN(9187)		{
HXLINE(9187)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,o) = old;
HXDLIN(9187)			o->elt = null();
HXDLIN(9187)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9187)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = o;
            		}
HXDLIN(9187)		this->modified = true;
HXDLIN(9187)		this->length--;
HXDLIN(9187)		this->pushmod = true;
HXDLIN(9187)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ZNPList_ZPP_Vec2_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Vec2 pre){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9191_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(9200)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,old);
HXLINE(9201)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret);
HXLINE(9202)		if (hx::IsNull( pre )) {
HXLINE(9203)			old = this->head;
HXLINE(9204)			ret = old->next;
HXLINE(9205)			this->head = ret;
HXLINE(9206)			if (hx::IsNull( this->head )) {
HXLINE(9206)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(9209)			old = pre->next;
HXLINE(9210)			ret = old->next;
HXLINE(9211)			pre->next = ret;
HXLINE(9212)			if (hx::IsNull( ret )) {
HXLINE(9212)				this->pushmod = true;
            			}
            		}
HXLINE(9215)		{
HXLINE(9216)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,o) = old;
HXLINE(9225)			o->elt = null();
HXLINE(9226)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXLINE(9227)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = o;
            		}
HXLINE(9232)		this->modified = true;
HXLINE(9233)		this->length--;
HXLINE(9234)		this->pushmod = true;
HXLINE(9235)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ZNPList_ZPP_Vec2_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Vec2 pre,int n){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9237_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(9238)		while(true){
HXLINE(9238)			bool _hx_tmp;
HXDLIN(9238)			n = (n - (int)1);
HXDLIN(9238)			if (((n + (int)1) > (int)0)) {
HXLINE(9238)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(9238)				_hx_tmp = false;
            			}
HXDLIN(9238)			if (!(_hx_tmp)) {
HXLINE(9238)				goto _hx_goto_23;
            			}
HXDLIN(9238)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(9239)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Vec2_obj,splice,return )

void ZNPList_ZPP_Vec2_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9242_clear)
            	HX_STACK_THIS(this)
HXLINE(9242)		while(hx::IsNotNull( this->head )){
HXLINE(9242)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret) = this->head;
HXDLIN(9242)			this->head = ret->next;
HXDLIN(9242)			{
HXLINE(9242)				ret->elt = null();
HXDLIN(9242)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9242)				::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret;
            			}
HXDLIN(9242)			if (hx::IsNull( this->head )) {
HXLINE(9242)				this->pushmod = true;
            			}
HXDLIN(9242)			this->modified = true;
HXDLIN(9242)			this->length--;
            		}
HXDLIN(9242)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,clear,(void))

void ZNPList_ZPP_Vec2_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9247_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(9248)		while(hx::IsNotNull( this->head )){
HXLINE(9248)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret) = this->head;
HXDLIN(9248)			this->head = ret->next;
HXDLIN(9248)			{
HXLINE(9248)				ret->elt = null();
HXDLIN(9248)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool;
HXDLIN(9248)				::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = ret;
            			}
HXDLIN(9248)			if (hx::IsNull( this->head )) {
HXLINE(9248)				this->pushmod = true;
            			}
HXDLIN(9248)			this->modified = true;
HXDLIN(9248)			this->length--;
            		}
HXLINE(9249)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,inlined_clear,(void))

void ZNPList_ZPP_Vec2_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9252_reverse)
            	HX_STACK_THIS(this)
HXLINE(9253)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cur) = this->head;
HXLINE(9254)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,pre) = null();
HXLINE(9255)		while(hx::IsNotNull( cur )){
HXLINE(9256)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,nx) = cur->next;
HXLINE(9257)			cur->next = pre;
HXLINE(9258)			this->head = cur;
HXLINE(9259)			pre = cur;
HXLINE(9260)			cur = nx;
            		}
HXLINE(9262)		this->modified = true;
HXLINE(9263)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,reverse,(void))

bool ZNPList_ZPP_Vec2_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9268_empty)
            	HX_STACK_THIS(this)
HXLINE(9268)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,empty,return )

int ZNPList_ZPP_Vec2_obj::size(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9273_size)
            	HX_STACK_THIS(this)
HXLINE(9273)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,size,return )

bool ZNPList_ZPP_Vec2_obj::has( ::zpp_nape::geom::ZPP_Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9276_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9276)		HX_VAR( bool,ret);
HXDLIN(9276)		{
HXLINE(9276)			ret = false;
HXDLIN(9276)			{
HXLINE(9276)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cx_ite) = this->head;
HXDLIN(9276)				while(hx::IsNotNull( cx_ite )){
HXLINE(9276)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(9276)						ret = true;
HXDLIN(9276)						goto _hx_goto_33;
            					}
HXDLIN(9276)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(9276)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,has,return )

bool ZNPList_ZPP_Vec2_obj::inlined_has( ::zpp_nape::geom::ZPP_Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9280_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9289)		HX_VAR( bool,ret);
HXLINE(9290)		{
HXLINE(9291)			ret = false;
HXLINE(9292)			{
HXLINE(9293)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cx_ite) = this->head;
HXLINE(9294)				while(hx::IsNotNull( cx_ite )){
HXLINE(9297)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(9298)						ret = true;
HXLINE(9299)						goto _hx_goto_35;
            					}
HXLINE(9302)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(9306)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_Vec2 ZNPList_ZPP_Vec2_obj::front(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9311_front)
            	HX_STACK_THIS(this)
HXLINE(9311)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,front,return )

 ::zpp_nape::geom::ZPP_Vec2 ZNPList_ZPP_Vec2_obj::back(){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9313_back)
            	HX_STACK_THIS(this)
HXLINE(9314)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret) = this->head;
HXLINE(9315)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cur) = ret;
HXLINE(9316)		while(hx::IsNotNull( cur )){
HXLINE(9317)			ret = cur;
HXLINE(9318)			cur = cur->next;
            		}
HXLINE(9320)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Vec2_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Vec2 ZNPList_ZPP_Vec2_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9322_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(9331)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,ret) = this->head;
HXLINE(9332)		while(true){
HXLINE(9332)			bool _hx_tmp;
HXDLIN(9332)			ind = (ind - (int)1);
HXDLIN(9332)			if (((ind + (int)1) > (int)0)) {
HXLINE(9332)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(9332)				_hx_tmp = false;
            			}
HXDLIN(9332)			if (!(_hx_tmp)) {
HXLINE(9332)				goto _hx_goto_40;
            			}
HXDLIN(9332)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(9333)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_Vec2 ZNPList_ZPP_Vec2_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_8b2655bf3500ef6c_9335_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(9344)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,it) = this->iterator_at(ind);
HXLINE(9345)		if (hx::IsNotNull( it )) {
HXLINE(9345)			return it->elt;
            		}
            		else {
HXLINE(9345)			return null();
            		}
HXDLIN(9345)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Vec2_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Vec2_obj > ZNPList_ZPP_Vec2_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Vec2_obj > __this = new ZNPList_ZPP_Vec2_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Vec2_obj > ZNPList_ZPP_Vec2_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Vec2_obj *__this = (ZNPList_ZPP_Vec2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Vec2_obj), true, "zpp_nape.util.ZNPList_ZPP_Vec2"));
	*(void **)__this = ZNPList_ZPP_Vec2_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Vec2_obj::ZNPList_ZPP_Vec2_obj()
{
}

void ZNPList_ZPP_Vec2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Vec2);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Vec2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Vec2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Vec2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Vec2 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Vec2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Vec2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_Vec2*/ ,(int)offsetof(ZNPList_ZPP_Vec2_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Vec2_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Vec2_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Vec2_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Vec2_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Vec2_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_Vec2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_Vec2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_Vec2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_Vec2_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_Vec2_obj::__mClass;

void ZNPList_ZPP_Vec2_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_Vec2_obj;
	ZNPList_ZPP_Vec2_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_Vec2","\x13","\xa9","\x6b","\x70");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_Vec2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Vec2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Vec2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_Vec2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Vec2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Vec2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
