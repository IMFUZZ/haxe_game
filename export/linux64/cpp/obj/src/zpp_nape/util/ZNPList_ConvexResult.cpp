// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_ConvexResult
#include <nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ConvexResult
#include <zpp_nape/util/ZNPList_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ConvexResult
#include <zpp_nape/util/ZNPNode_ConvexResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13519_new,"zpp_nape.util.ZNPList_ConvexResult","new",0x0a00eb86,"zpp_nape.util.ZNPList_ConvexResult.new","zpp_nape/util/Lists.hx",13519,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13525_begin,"zpp_nape.util.ZNPList_ConvexResult","begin",0x53dc9acf,"zpp_nape.util.ZNPList_ConvexResult.begin","zpp_nape/util/Lists.hx",13525,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13532_setbegin,"zpp_nape.util.ZNPList_ConvexResult","setbegin",0xc2dd9e61,"zpp_nape.util.ZNPList_ConvexResult.setbegin","zpp_nape/util/Lists.hx",13532,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13538_add,"zpp_nape.util.ZNPList_ConvexResult","add",0x09f70d47,"zpp_nape.util.ZNPList_ConvexResult.add","zpp_nape/util/Lists.hx",13538,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13542_inlined_add,"zpp_nape.util.ZNPList_ConvexResult","inlined_add",0xc6c3fdb3,"zpp_nape.util.ZNPList_ConvexResult.inlined_add","zpp_nape/util/Lists.hx",13542,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13588_addAll,"zpp_nape.util.ZNPList_ConvexResult","addAll",0x114eea1a,"zpp_nape.util.ZNPList_ConvexResult.addAll","zpp_nape/util/Lists.hx",13588,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13598_insert,"zpp_nape.util.ZNPList_ConvexResult","insert",0x103123d3,"zpp_nape.util.ZNPList_ConvexResult.insert","zpp_nape/util/Lists.hx",13598,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13602_inlined_insert,"zpp_nape.util.ZNPList_ConvexResult","inlined_insert",0x457d3ee7,"zpp_nape.util.ZNPList_ConvexResult.inlined_insert","zpp_nape/util/Lists.hx",13602,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13646_pop,"zpp_nape.util.ZNPList_ConvexResult","pop",0x0a0278b7,"zpp_nape.util.ZNPList_ConvexResult.pop","zpp_nape/util/Lists.hx",13646,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13650_inlined_pop,"zpp_nape.util.ZNPList_ConvexResult","inlined_pop",0xc6cf6923,"zpp_nape.util.ZNPList_ConvexResult.inlined_pop","zpp_nape/util/Lists.hx",13650,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13684_pop_unsafe,"zpp_nape.util.ZNPList_ConvexResult","pop_unsafe",0x7b65b1ee,"zpp_nape.util.ZNPList_ConvexResult.pop_unsafe","zpp_nape/util/Lists.hx",13684,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13688_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ConvexResult","inlined_pop_unsafe",0x9c5ee702,"zpp_nape.util.ZNPList_ConvexResult.inlined_pop_unsafe","zpp_nape/util/Lists.hx",13688,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13710_remove,"zpp_nape.util.ZNPList_ConvexResult","remove",0x76dc7cde,"zpp_nape.util.ZNPList_ConvexResult.remove","zpp_nape/util/Lists.hx",13710,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13712_try_remove,"zpp_nape.util.ZNPList_ConvexResult","try_remove",0x928fe7a2,"zpp_nape.util.ZNPList_ConvexResult.try_remove","zpp_nape/util/Lists.hx",13712,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13746_inlined_remove,"zpp_nape.util.ZNPList_ConvexResult","inlined_remove",0xac2897f2,"zpp_nape.util.ZNPList_ConvexResult.inlined_remove","zpp_nape/util/Lists.hx",13746,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13750_inlined_try_remove,"zpp_nape.util.ZNPList_ConvexResult","inlined_try_remove",0xb3891cb6,"zpp_nape.util.ZNPList_ConvexResult.inlined_try_remove","zpp_nape/util/Lists.hx",13750,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13774_erase,"zpp_nape.util.ZNPList_ConvexResult","erase",0x16a3998c,"zpp_nape.util.ZNPList_ConvexResult.erase","zpp_nape/util/Lists.hx",13774,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13778_inlined_erase,"zpp_nape.util.ZNPList_ConvexResult","inlined_erase",0x54de7cf8,"zpp_nape.util.ZNPList_ConvexResult.inlined_erase","zpp_nape/util/Lists.hx",13778,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13824_splice,"zpp_nape.util.ZNPList_ConvexResult","splice",0x31f26616,"zpp_nape.util.ZNPList_ConvexResult.splice","zpp_nape/util/Lists.hx",13824,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13829_clear,"zpp_nape.util.ZNPList_ConvexResult","clear",0xebe22233,"zpp_nape.util.ZNPList_ConvexResult.clear","zpp_nape/util/Lists.hx",13829,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13834_inlined_clear,"zpp_nape.util.ZNPList_ConvexResult","inlined_clear",0x2a1d059f,"zpp_nape.util.ZNPList_ConvexResult.inlined_clear","zpp_nape/util/Lists.hx",13834,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13839_reverse,"zpp_nape.util.ZNPList_ConvexResult","reverse",0xb20cdf48,"zpp_nape.util.ZNPList_ConvexResult.reverse","zpp_nape/util/Lists.hx",13839,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13855_empty,"zpp_nape.util.ZNPList_ConvexResult","empty",0x1360eb33,"zpp_nape.util.ZNPList_ConvexResult.empty","zpp_nape/util/Lists.hx",13855,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13860_size,"zpp_nape.util.ZNPList_ConvexResult","size",0xba1e46db,"zpp_nape.util.ZNPList_ConvexResult.size","zpp_nape/util/Lists.hx",13860,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13863_has,"zpp_nape.util.ZNPList_ConvexResult","has",0x09fc5a80,"zpp_nape.util.ZNPList_ConvexResult.has","zpp_nape/util/Lists.hx",13863,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13867_inlined_has,"zpp_nape.util.ZNPList_ConvexResult","inlined_has",0xc6c94aec,"zpp_nape.util.ZNPList_ConvexResult.inlined_has","zpp_nape/util/Lists.hx",13867,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13898_front,"zpp_nape.util.ZNPList_ConvexResult","front",0xaa14c94f,"zpp_nape.util.ZNPList_ConvexResult.front","zpp_nape/util/Lists.hx",13898,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13900_back,"zpp_nape.util.ZNPList_ConvexResult","back",0xaedb8041,"zpp_nape.util.ZNPList_ConvexResult.back","zpp_nape/util/Lists.hx",13900,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13909_iterator_at,"zpp_nape.util.ZNPList_ConvexResult","iterator_at",0xcb683b0a,"zpp_nape.util.ZNPList_ConvexResult.iterator_at","zpp_nape/util/Lists.hx",13909,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_34db2e4aa9d97a9d_13922_at,"zpp_nape.util.ZNPList_ConvexResult","at",0x3bbd608d,"zpp_nape.util.ZNPList_ConvexResult.at","zpp_nape/util/Lists.hx",13922,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ConvexResult_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13519_new)
            	HX_STACK_THIS(this)
HXLINE(13529)		this->length = (int)0;
HXLINE(13528)		this->pushmod = false;
HXLINE(13527)		this->modified = false;
HXLINE(13520)		this->head = null();
            	}

Dynamic ZNPList_ConvexResult_obj::__CreateEmpty() { return new ZNPList_ConvexResult_obj; }

void *ZNPList_ConvexResult_obj::_hx_vtable = 0;

Dynamic ZNPList_ConvexResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ConvexResult_obj > _hx_result = new ZNPList_ConvexResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ConvexResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x370ee6d8;
}

 ::zpp_nape::util::ZNPNode_ConvexResult ZNPList_ConvexResult_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13525_begin)
            	HX_STACK_THIS(this)
HXLINE(13525)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,begin,return )

void ZNPList_ConvexResult_obj::setbegin( ::zpp_nape::util::ZNPNode_ConvexResult i){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13532_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(13533)		this->head = i;
HXLINE(13534)		this->modified = true;
HXLINE(13535)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,setbegin,(void))

 ::nape::geom::ConvexResult ZNPList_ConvexResult_obj::add( ::nape::geom::ConvexResult o){
            	HX_GC_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13538_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(13538)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXDLIN(13538)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool )) {
HXLINE(13538)			ret =  ::zpp_nape::util::ZNPNode_ConvexResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13538)			ret = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13538)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret->next;
HXDLIN(13538)			ret->next = null();
            		}
HXDLIN(13538)		ret->elt = o;
HXDLIN(13538)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,temp) = ret;
HXDLIN(13538)		temp->next = this->head;
HXDLIN(13538)		this->head = temp;
HXDLIN(13538)		this->modified = true;
HXDLIN(13538)		this->length++;
HXDLIN(13538)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,add,return )

 ::nape::geom::ConvexResult ZNPList_ConvexResult_obj::inlined_add( ::nape::geom::ConvexResult o){
            	HX_GC_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13542_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(13552)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXLINE(13554)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool )) {
HXLINE(13555)			ret =  ::zpp_nape::util::ZNPNode_ConvexResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13561)			ret = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXLINE(13562)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret->next;
HXLINE(13563)			ret->next = null();
            		}
HXLINE(13570)		ret->elt = o;
HXLINE(13551)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,temp) = ret;
HXLINE(13573)		temp->next = this->head;
HXLINE(13574)		this->head = temp;
HXLINE(13575)		this->modified = true;
HXLINE(13576)		this->length++;
HXLINE(13577)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,inlined_add,return )

void ZNPList_ConvexResult_obj::addAll( ::zpp_nape::util::ZNPList_ConvexResult x){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13588_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(13589)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cx_ite) = x->head;
HXLINE(13590)		while(hx::IsNotNull( cx_ite )){
HXLINE(13592)			this->add(cx_ite->elt);
HXLINE(13593)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ConvexResult ZNPList_ConvexResult_obj::insert( ::zpp_nape::util::ZNPNode_ConvexResult cur, ::nape::geom::ConvexResult o){
            	HX_GC_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13598_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(13598)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXDLIN(13598)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool )) {
HXLINE(13598)			ret =  ::zpp_nape::util::ZNPNode_ConvexResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13598)			ret = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13598)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret->next;
HXDLIN(13598)			ret->next = null();
            		}
HXDLIN(13598)		ret->elt = o;
HXDLIN(13598)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,temp) = ret;
HXDLIN(13598)		if (hx::IsNull( cur )) {
HXLINE(13598)			temp->next = this->head;
HXDLIN(13598)			this->head = temp;
            		}
            		else {
HXLINE(13598)			temp->next = cur->next;
HXDLIN(13598)			cur->next = temp;
            		}
HXDLIN(13598)		this->pushmod = (this->modified = true);
HXDLIN(13598)		this->length++;
HXDLIN(13598)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ConvexResult_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ConvexResult ZNPList_ConvexResult_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ConvexResult cur, ::nape::geom::ConvexResult o){
            	HX_GC_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13602_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(13612)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXLINE(13614)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool )) {
HXLINE(13615)			ret =  ::zpp_nape::util::ZNPNode_ConvexResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13621)			ret = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXLINE(13622)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret->next;
HXLINE(13623)			ret->next = null();
            		}
HXLINE(13630)		ret->elt = o;
HXLINE(13611)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,temp) = ret;
HXLINE(13633)		if (hx::IsNull( cur )) {
HXLINE(13634)			temp->next = this->head;
HXLINE(13635)			this->head = temp;
            		}
            		else {
HXLINE(13638)			temp->next = cur->next;
HXLINE(13639)			cur->next = temp;
            		}
HXLINE(13641)		this->pushmod = (this->modified = true);
HXLINE(13642)		this->length++;
HXLINE(13643)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ConvexResult_obj,inlined_insert,return )

void ZNPList_ConvexResult_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13646_pop)
            	HX_STACK_THIS(this)
HXLINE(13646)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,ret) = this->head;
HXDLIN(13646)		this->head = ret->next;
HXDLIN(13646)		{
HXLINE(13646)			ret->elt = null();
HXDLIN(13646)			ret->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13646)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret;
            		}
HXDLIN(13646)		if (hx::IsNull( this->head )) {
HXLINE(13646)			this->pushmod = true;
            		}
HXDLIN(13646)		this->modified = true;
HXDLIN(13646)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,pop,(void))

void ZNPList_ConvexResult_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13650_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(13659)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,ret) = this->head;
HXLINE(13660)		this->head = ret->next;
HXLINE(13662)		{
HXLINE(13672)			ret->elt = null();
HXLINE(13673)			ret->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXLINE(13674)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret;
            		}
HXLINE(13679)		if (hx::IsNull( this->head )) {
HXLINE(13679)			this->pushmod = true;
            		}
HXLINE(13680)		this->modified = true;
HXLINE(13681)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,inlined_pop,(void))

 ::nape::geom::ConvexResult ZNPList_ConvexResult_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13684_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(13684)		HX_VARI(  ::nape::geom::ConvexResult,ret) = this->head->elt;
HXDLIN(13684)		this->pop();
HXDLIN(13684)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,pop_unsafe,return )

 ::nape::geom::ConvexResult ZNPList_ConvexResult_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13688_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(13697)		HX_VARI(  ::nape::geom::ConvexResult,ret) = this->head->elt;
HXLINE(13698)		this->pop();
HXLINE(13699)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,inlined_pop_unsafe,return )

void ZNPList_ConvexResult_obj::remove( ::nape::geom::ConvexResult obj){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13710_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13710)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,pre) = null();
HXDLIN(13710)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cur) = this->head;
HXDLIN(13710)		while(hx::IsNotNull( cur )){
HXLINE(13710)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13710)				{
HXLINE(13710)					HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,old);
HXDLIN(13710)					HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXDLIN(13710)					if (hx::IsNull( pre )) {
HXLINE(13710)						old = this->head;
HXDLIN(13710)						ret = old->next;
HXDLIN(13710)						this->head = ret;
HXDLIN(13710)						if (hx::IsNull( this->head )) {
HXLINE(13710)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(13710)						old = pre->next;
HXDLIN(13710)						ret = old->next;
HXDLIN(13710)						pre->next = ret;
HXDLIN(13710)						if (hx::IsNull( ret )) {
HXLINE(13710)							this->pushmod = true;
            						}
            					}
HXDLIN(13710)					{
HXLINE(13710)						HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,o) = old;
HXDLIN(13710)						o->elt = null();
HXDLIN(13710)						o->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13710)						::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = o;
            					}
HXDLIN(13710)					this->modified = true;
HXDLIN(13710)					this->length--;
HXDLIN(13710)					this->pushmod = true;
            				}
HXDLIN(13710)				goto _hx_goto_13;
            			}
HXDLIN(13710)			pre = cur;
HXDLIN(13710)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,remove,(void))

bool ZNPList_ConvexResult_obj::try_remove( ::nape::geom::ConvexResult obj){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13712_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13721)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,pre) = null();
HXLINE(13722)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cur) = this->head;
HXLINE(13723)		HX_VARI( bool,ret) = false;
HXLINE(13724)		while(hx::IsNotNull( cur )){
HXLINE(13725)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13726)				this->erase(pre);
HXLINE(13727)				ret = true;
HXLINE(13728)				goto _hx_goto_15;
            			}
HXLINE(13730)			pre = cur;
HXLINE(13731)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(13733)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,try_remove,return )

void ZNPList_ConvexResult_obj::inlined_remove( ::nape::geom::ConvexResult obj){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13746_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13746)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,pre) = null();
HXDLIN(13746)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cur) = this->head;
HXDLIN(13746)		while(hx::IsNotNull( cur )){
HXLINE(13746)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13746)				{
HXLINE(13746)					HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,old);
HXDLIN(13746)					HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXDLIN(13746)					if (hx::IsNull( pre )) {
HXLINE(13746)						old = this->head;
HXDLIN(13746)						ret = old->next;
HXDLIN(13746)						this->head = ret;
HXDLIN(13746)						if (hx::IsNull( this->head )) {
HXLINE(13746)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(13746)						old = pre->next;
HXDLIN(13746)						ret = old->next;
HXDLIN(13746)						pre->next = ret;
HXDLIN(13746)						if (hx::IsNull( ret )) {
HXLINE(13746)							this->pushmod = true;
            						}
            					}
HXDLIN(13746)					{
HXLINE(13746)						HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,o) = old;
HXDLIN(13746)						o->elt = null();
HXDLIN(13746)						o->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13746)						::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = o;
            					}
HXDLIN(13746)					this->modified = true;
HXDLIN(13746)					this->length--;
HXDLIN(13746)					this->pushmod = true;
            				}
HXDLIN(13746)				goto _hx_goto_17;
            			}
HXDLIN(13746)			pre = cur;
HXDLIN(13746)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,inlined_remove,(void))

bool ZNPList_ConvexResult_obj::inlined_try_remove( ::nape::geom::ConvexResult obj){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13750_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13759)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,pre) = null();
HXLINE(13760)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cur) = this->head;
HXLINE(13761)		HX_VARI( bool,ret) = false;
HXLINE(13762)		while(hx::IsNotNull( cur )){
HXLINE(13763)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(13764)				{
HXLINE(13764)					HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,old);
HXDLIN(13764)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ConvexResult,ret1,"ret");
HXDLIN(13764)					if (hx::IsNull( pre )) {
HXLINE(13764)						old = this->head;
HXDLIN(13764)						ret1 = old->next;
HXDLIN(13764)						this->head = ret1;
HXDLIN(13764)						if (hx::IsNull( this->head )) {
HXLINE(13764)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(13764)						old = pre->next;
HXDLIN(13764)						ret1 = old->next;
HXDLIN(13764)						pre->next = ret1;
HXDLIN(13764)						if (hx::IsNull( ret1 )) {
HXLINE(13764)							this->pushmod = true;
            						}
            					}
HXDLIN(13764)					{
HXLINE(13764)						HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,o) = old;
HXDLIN(13764)						o->elt = null();
HXDLIN(13764)						o->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13764)						::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = o;
            					}
HXDLIN(13764)					this->modified = true;
HXDLIN(13764)					this->length--;
HXDLIN(13764)					this->pushmod = true;
            				}
HXLINE(13765)				ret = true;
HXLINE(13766)				goto _hx_goto_19;
            			}
HXLINE(13768)			pre = cur;
HXLINE(13769)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(13771)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ConvexResult ZNPList_ConvexResult_obj::erase( ::zpp_nape::util::ZNPNode_ConvexResult pre){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13774_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(13774)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,old);
HXDLIN(13774)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXDLIN(13774)		if (hx::IsNull( pre )) {
HXLINE(13774)			old = this->head;
HXDLIN(13774)			ret = old->next;
HXDLIN(13774)			this->head = ret;
HXDLIN(13774)			if (hx::IsNull( this->head )) {
HXLINE(13774)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(13774)			old = pre->next;
HXDLIN(13774)			ret = old->next;
HXDLIN(13774)			pre->next = ret;
HXDLIN(13774)			if (hx::IsNull( ret )) {
HXLINE(13774)				this->pushmod = true;
            			}
            		}
HXDLIN(13774)		{
HXLINE(13774)			HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,o) = old;
HXDLIN(13774)			o->elt = null();
HXDLIN(13774)			o->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13774)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = o;
            		}
HXDLIN(13774)		this->modified = true;
HXDLIN(13774)		this->length--;
HXDLIN(13774)		this->pushmod = true;
HXDLIN(13774)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ConvexResult ZNPList_ConvexResult_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ConvexResult pre){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13778_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(13787)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,old);
HXLINE(13788)		HX_VAR(  ::zpp_nape::util::ZNPNode_ConvexResult,ret);
HXLINE(13789)		if (hx::IsNull( pre )) {
HXLINE(13790)			old = this->head;
HXLINE(13791)			ret = old->next;
HXLINE(13792)			this->head = ret;
HXLINE(13793)			if (hx::IsNull( this->head )) {
HXLINE(13793)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(13796)			old = pre->next;
HXLINE(13797)			ret = old->next;
HXLINE(13798)			pre->next = ret;
HXLINE(13799)			if (hx::IsNull( ret )) {
HXLINE(13799)				this->pushmod = true;
            			}
            		}
HXLINE(13802)		{
HXLINE(13803)			HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,o) = old;
HXLINE(13812)			o->elt = null();
HXLINE(13813)			o->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXLINE(13814)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = o;
            		}
HXLINE(13819)		this->modified = true;
HXLINE(13820)		this->length--;
HXLINE(13821)		this->pushmod = true;
HXLINE(13822)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ConvexResult ZNPList_ConvexResult_obj::splice( ::zpp_nape::util::ZNPNode_ConvexResult pre,int n){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13824_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(13825)		while(true){
HXLINE(13825)			bool _hx_tmp;
HXDLIN(13825)			n = (n - (int)1);
HXDLIN(13825)			if (((n + (int)1) > (int)0)) {
HXLINE(13825)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(13825)				_hx_tmp = false;
            			}
HXDLIN(13825)			if (!(_hx_tmp)) {
HXLINE(13825)				goto _hx_goto_23;
            			}
HXDLIN(13825)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(13826)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ConvexResult_obj,splice,return )

void ZNPList_ConvexResult_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13829_clear)
            	HX_STACK_THIS(this)
HXLINE(13829)		while(hx::IsNotNull( this->head )){
HXLINE(13829)			HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,ret) = this->head;
HXDLIN(13829)			this->head = ret->next;
HXDLIN(13829)			{
HXLINE(13829)				ret->elt = null();
HXDLIN(13829)				ret->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13829)				::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret;
            			}
HXDLIN(13829)			if (hx::IsNull( this->head )) {
HXLINE(13829)				this->pushmod = true;
            			}
HXDLIN(13829)			this->modified = true;
HXDLIN(13829)			this->length--;
            		}
HXDLIN(13829)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,clear,(void))

void ZNPList_ConvexResult_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13834_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(13835)		while(hx::IsNotNull( this->head )){
HXLINE(13835)			HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,ret) = this->head;
HXDLIN(13835)			this->head = ret->next;
HXDLIN(13835)			{
HXLINE(13835)				ret->elt = null();
HXDLIN(13835)				ret->next = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
HXDLIN(13835)				::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret;
            			}
HXDLIN(13835)			if (hx::IsNull( this->head )) {
HXLINE(13835)				this->pushmod = true;
            			}
HXDLIN(13835)			this->modified = true;
HXDLIN(13835)			this->length--;
            		}
HXLINE(13836)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,inlined_clear,(void))

void ZNPList_ConvexResult_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13839_reverse)
            	HX_STACK_THIS(this)
HXLINE(13840)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cur) = this->head;
HXLINE(13841)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,pre) = null();
HXLINE(13842)		while(hx::IsNotNull( cur )){
HXLINE(13843)			HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,nx) = cur->next;
HXLINE(13844)			cur->next = pre;
HXLINE(13845)			this->head = cur;
HXLINE(13846)			pre = cur;
HXLINE(13847)			cur = nx;
            		}
HXLINE(13849)		this->modified = true;
HXLINE(13850)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,reverse,(void))

bool ZNPList_ConvexResult_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13855_empty)
            	HX_STACK_THIS(this)
HXLINE(13855)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,empty,return )

int ZNPList_ConvexResult_obj::size(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13860_size)
            	HX_STACK_THIS(this)
HXLINE(13860)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,size,return )

bool ZNPList_ConvexResult_obj::has( ::nape::geom::ConvexResult obj){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13863_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13863)		HX_VAR( bool,ret);
HXDLIN(13863)		{
HXLINE(13863)			ret = false;
HXDLIN(13863)			{
HXLINE(13863)				HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cx_ite) = this->head;
HXDLIN(13863)				while(hx::IsNotNull( cx_ite )){
HXLINE(13863)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(13863)						ret = true;
HXDLIN(13863)						goto _hx_goto_33;
            					}
HXDLIN(13863)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(13863)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,has,return )

bool ZNPList_ConvexResult_obj::inlined_has( ::nape::geom::ConvexResult obj){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13867_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(13876)		HX_VAR( bool,ret);
HXLINE(13877)		{
HXLINE(13878)			ret = false;
HXLINE(13879)			{
HXLINE(13880)				HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cx_ite) = this->head;
HXLINE(13881)				while(hx::IsNotNull( cx_ite )){
HXLINE(13884)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(13885)						ret = true;
HXLINE(13886)						goto _hx_goto_35;
            					}
HXLINE(13889)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(13893)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,inlined_has,return )

 ::nape::geom::ConvexResult ZNPList_ConvexResult_obj::front(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13898_front)
            	HX_STACK_THIS(this)
HXLINE(13898)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,front,return )

 ::nape::geom::ConvexResult ZNPList_ConvexResult_obj::back(){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13900_back)
            	HX_STACK_THIS(this)
HXLINE(13901)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,ret) = this->head;
HXLINE(13902)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,cur) = ret;
HXLINE(13903)		while(hx::IsNotNull( cur )){
HXLINE(13904)			ret = cur;
HXLINE(13905)			cur = cur->next;
            		}
HXLINE(13907)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ConvexResult_obj,back,return )

 ::zpp_nape::util::ZNPNode_ConvexResult ZNPList_ConvexResult_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13909_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(13918)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,ret) = this->head;
HXLINE(13919)		while(true){
HXLINE(13919)			bool _hx_tmp;
HXDLIN(13919)			ind = (ind - (int)1);
HXDLIN(13919)			if (((ind + (int)1) > (int)0)) {
HXLINE(13919)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(13919)				_hx_tmp = false;
            			}
HXDLIN(13919)			if (!(_hx_tmp)) {
HXLINE(13919)				goto _hx_goto_40;
            			}
HXDLIN(13919)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(13920)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,iterator_at,return )

 ::nape::geom::ConvexResult ZNPList_ConvexResult_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_34db2e4aa9d97a9d_13922_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(13931)		HX_VARI(  ::zpp_nape::util::ZNPNode_ConvexResult,it) = this->iterator_at(ind);
HXLINE(13932)		if (hx::IsNotNull( it )) {
HXLINE(13932)			return it->elt;
            		}
            		else {
HXLINE(13932)			return null();
            		}
HXDLIN(13932)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ConvexResult_obj,at,return )


hx::ObjectPtr< ZNPList_ConvexResult_obj > ZNPList_ConvexResult_obj::__new() {
	hx::ObjectPtr< ZNPList_ConvexResult_obj > __this = new ZNPList_ConvexResult_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ConvexResult_obj > ZNPList_ConvexResult_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ConvexResult_obj *__this = (ZNPList_ConvexResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ConvexResult_obj), true, "zpp_nape.util.ZNPList_ConvexResult"));
	*(void **)__this = ZNPList_ConvexResult_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ConvexResult_obj::ZNPList_ConvexResult_obj()
{
}

void ZNPList_ConvexResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ConvexResult);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ConvexResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ConvexResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ConvexResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ConvexResult >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ConvexResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ConvexResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ConvexResult*/ ,(int)offsetof(ZNPList_ConvexResult_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ConvexResult_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ConvexResult_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ConvexResult_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ConvexResult_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ConvexResult_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ConvexResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ConvexResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ConvexResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ConvexResult_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ConvexResult_obj::__mClass;

void ZNPList_ConvexResult_obj::__register()
{
	hx::Object *dummy = new ZNPList_ConvexResult_obj;
	ZNPList_ConvexResult_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ConvexResult","\x94","\x70","\x7f","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ConvexResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ConvexResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ConvexResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ConvexResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ConvexResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ConvexResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
