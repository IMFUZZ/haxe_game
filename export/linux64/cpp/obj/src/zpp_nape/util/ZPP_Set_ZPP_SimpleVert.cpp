// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleVert
#include <zpp_nape/geom/ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleVert
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3731_new,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","new",0xb4ffb787,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.new","zpp_nape/util/RBTree.hx",3731,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3758_free,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","free",0xa580f7a5,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.free","zpp_nape/util/RBTree.hx",3758,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3765_alloc,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","alloc",0x4664e35c,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.alloc","zpp_nape/util/RBTree.hx",3765,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3774_verify,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","verify",0xb3854eb2,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.verify","zpp_nape/util/RBTree.hx",3774,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3840_empty,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","empty",0x94ab7974,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.empty","zpp_nape/util/RBTree.hx",3840,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3843_singular,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","singular",0xdee07450,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.singular","zpp_nape/util/RBTree.hx",3843,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3845_size,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","size",0xae11fbba,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.size","zpp_nape/util/RBTree.hx",3845,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3876_has,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","has",0xb4fb2681,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.has","zpp_nape/util/RBTree.hx",3876,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3878_find,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","find",0xa57a2b32,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.find","zpp_nape/util/RBTree.hx",3878,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3887_has_weak,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","has_weak",0x82eb1e36,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.has_weak","zpp_nape/util/RBTree.hx",3887,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3889_find_weak,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","find_weak",0x98a877e5,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.find_weak","zpp_nape/util/RBTree.hx",3889,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3899_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","lower_bound",0x64e2ce67,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.lower_bound","zpp_nape/util/RBTree.hx",3899,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3935_first,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","first",0x256eb717,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.first","zpp_nape/util/RBTree.hx",3935,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3948_pop_front,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","pop_front",0x852efea2,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.pop_front","zpp_nape/util/RBTree.hx",3948,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3973_remove,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","remove",0x16ce677d,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.remove","zpp_nape/util/RBTree.hx",3973,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3975_successor_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","successor_node",0x473f5ab4,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.successor_node","zpp_nape/util/RBTree.hx",3975,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3998_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","predecessor_node",0xc668b2f1,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.predecessor_node","zpp_nape/util/RBTree.hx",3998,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4021_successor,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","successor",0x3f4dfc0d,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.successor","zpp_nape/util/RBTree.hx",4021,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4033_predecessor,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","predecessor",0xd4bd8cf0,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.predecessor","zpp_nape/util/RBTree.hx",4033,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4045_remove_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","remove_node",0x37537944,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.remove_node","zpp_nape/util/RBTree.hx",4045,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4166_clear,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","clear",0x6d2cb074,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.clear","zpp_nape/util/RBTree.hx",4166,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4170_clear_with,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","clear_with",0x8644bcf1,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.clear_with","zpp_nape/util/RBTree.hx",4170,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4178_clear_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","clear_node",0x805650ed,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.clear_node","zpp_nape/util/RBTree.hx",4178,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4213___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","__fix_neg_red",0x15450dbf,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.__fix_neg_red","zpp_nape/util/RBTree.hx",4213,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4281___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","__fix_dbl_red",0x235d3b9d,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.__fix_dbl_red","zpp_nape/util/RBTree.hx",4281,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4369_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","try_insert_bool",0x14aa1793,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.try_insert_bool","zpp_nape/util/RBTree.hx",4369,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4461_try_insert,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","try_insert",0x68c9b4b6,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.try_insert","zpp_nape/util/RBTree.hx",4461,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_4553_insert,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","insert",0xb0230e72,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.insert","zpp_nape/util/RBTree.hx",4553,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_9b37c8de3b80c47e_3732_boot,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert","boot",0xa2d9df2b,"zpp_nape.util.ZPP_Set_ZPP_SimpleVert.boot","zpp_nape/util/RBTree.hx",3732,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_SimpleVert_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3731_new)
            	HX_STACK_THIS(this)
HXLINE(3772)		this->colour = (int)0;
HXLINE(3771)		this->parent = null();
HXLINE(3770)		this->next = null();
HXLINE(3769)		this->prev = null();
HXLINE(3768)		this->data = null();
HXLINE(3767)		this->swapped = null();
HXLINE(3766)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_SimpleVert_obj::__CreateEmpty() { return new ZPP_Set_ZPP_SimpleVert_obj; }

void *ZPP_Set_ZPP_SimpleVert_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_SimpleVert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_SimpleVert_obj > _hx_result = new ZPP_Set_ZPP_SimpleVert_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_SimpleVert_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4c875e21;
}

void ZPP_Set_ZPP_SimpleVert_obj::free(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3758_free)
            	HX_STACK_THIS(this)
HXLINE(3759)		this->data = null();
HXLINE(3760)		this->lt = null();
HXLINE(3761)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,free,(void))

void ZPP_Set_ZPP_SimpleVert_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3765_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,alloc,(void))

bool ZPP_Set_ZPP_SimpleVert_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3774_verify)
            	HX_STACK_THIS(this)
HXLINE(3784)		if (!(this->empty())) {
HXLINE(3785)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,set_ite) = this->parent;
HXLINE(3786)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(3786)				set_ite = set_ite->prev;
            			}
HXLINE(3787)			while(hx::IsNotNull( set_ite )){
HXLINE(3788)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,i) = set_ite->data;
HXLINE(3789)				{
HXLINE(3790)					HX_VARI( bool,prei) = true;
HXLINE(3800)					if (!(this->empty())) {
HXLINE(3801)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,set_ite1,"set_ite") = this->parent;
HXLINE(3802)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE(3802)							set_ite1 = set_ite1->prev;
            						}
HXLINE(3803)						while(hx::IsNotNull( set_ite1 )){
HXLINE(3804)							HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,j) = set_ite1->data;
HXLINE(3806)							if (!(prei)) {
HXLINE(3807)								bool _hx_tmp;
HXDLIN(3807)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE(3807)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE(3807)									_hx_tmp = false;
            								}
HXDLIN(3807)								if (_hx_tmp) {
HXLINE(3807)									return false;
            								}
            							}
            							else {
HXLINE(3809)								if (hx::IsEq( i,j )) {
HXLINE(3809)									prei = false;
            								}
            								else {
HXLINE(3811)									bool _hx_tmp1;
HXDLIN(3811)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE(3811)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE(3811)										_hx_tmp1 = false;
            									}
HXDLIN(3811)									if (_hx_tmp1) {
HXLINE(3811)										return false;
            									}
            								}
            							}
HXLINE(3814)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE(3815)								set_ite1 = set_ite1->next;
HXLINE(3816)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE(3816)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE(3819)								while(true){
HXLINE(3819)									bool _hx_tmp2;
HXDLIN(3819)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE(3819)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE(3819)										_hx_tmp2 = false;
            									}
HXDLIN(3819)									if (!(_hx_tmp2)) {
HXLINE(3819)										goto _hx_goto_8;
            									}
HXDLIN(3819)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE(3820)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE(3826)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(3827)					set_ite = set_ite->next;
HXLINE(3828)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(3828)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(3831)					while(true){
HXLINE(3831)						bool _hx_tmp3;
HXDLIN(3831)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(3831)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(3831)							_hx_tmp3 = false;
            						}
HXDLIN(3831)						if (!(_hx_tmp3)) {
HXLINE(3831)							goto _hx_goto_10;
            						}
HXDLIN(3831)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE(3832)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(3837)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,verify,return )

bool ZPP_Set_ZPP_SimpleVert_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3840_empty)
            	HX_STACK_THIS(this)
HXLINE(3840)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,empty,return )

bool ZPP_Set_ZPP_SimpleVert_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3843_singular)
            	HX_STACK_THIS(this)
HXLINE(3843)		bool _hx_tmp;
HXDLIN(3843)		if (hx::IsNotNull( this->parent )) {
HXLINE(3843)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE(3843)			_hx_tmp = false;
            		}
HXDLIN(3843)		if (_hx_tmp) {
HXLINE(3843)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE(3843)			return false;
            		}
HXDLIN(3843)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,singular,return )

int ZPP_Set_ZPP_SimpleVert_obj::size(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3845_size)
            	HX_STACK_THIS(this)
HXLINE(3846)		HX_VARI( int,ret) = (int)0;
HXLINE(3856)		if (!(this->empty())) {
HXLINE(3857)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,set_ite) = this->parent;
HXLINE(3858)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(3858)				set_ite = set_ite->prev;
            			}
HXLINE(3859)			while(hx::IsNotNull( set_ite )){
HXLINE(3861)				ret = (ret + (int)1);
HXLINE(3862)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(3863)					set_ite = set_ite->next;
HXLINE(3864)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(3864)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(3867)					while(true){
HXLINE(3867)						bool _hx_tmp;
HXDLIN(3867)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(3867)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(3867)							_hx_tmp = false;
            						}
HXDLIN(3867)						if (!(_hx_tmp)) {
HXLINE(3867)							goto _hx_goto_17;
            						}
HXDLIN(3867)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE(3868)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(3873)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,size,return )

bool ZPP_Set_ZPP_SimpleVert_obj::has( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3876_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3876)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::find( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3878_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3879)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = this->parent;
HXLINE(3880)		while(true){
HXLINE(3880)			bool _hx_tmp;
HXDLIN(3880)			if (hx::IsNotNull( cur )) {
HXLINE(3880)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE(3880)				_hx_tmp = false;
            			}
HXDLIN(3880)			if (!(_hx_tmp)) {
HXLINE(3880)				goto _hx_goto_20;
            			}
HXLINE(3881)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(3881)				cur = cur->prev;
            			}
            			else {
HXLINE(3882)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE(3884)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,find,return )

bool ZPP_Set_ZPP_SimpleVert_obj::has_weak( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3887_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3887)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::find_weak( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3889_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3890)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = this->parent;
HXLINE(3891)		while(hx::IsNotNull( cur )){
HXLINE(3892)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(3892)				cur = cur->prev;
            			}
            			else {
HXLINE(3893)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(3893)					cur = cur->next;
            				}
            				else {
HXLINE(3894)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE(3896)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,find_weak,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::lower_bound( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3899_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3900)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,ret) = null();
HXLINE(3910)		if (!(this->empty())) {
HXLINE(3911)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,set_ite) = this->parent;
HXLINE(3912)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(3912)				set_ite = set_ite->prev;
            			}
HXLINE(3913)			while(hx::IsNotNull( set_ite )){
HXLINE(3914)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,elt) = set_ite->data;
HXLINE(3916)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE(3917)					ret = elt;
HXLINE(3918)					goto _hx_goto_26;
            				}
HXLINE(3921)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(3922)					set_ite = set_ite->next;
HXLINE(3923)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(3923)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(3926)					while(true){
HXLINE(3926)						bool _hx_tmp;
HXDLIN(3926)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(3926)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(3926)							_hx_tmp = false;
            						}
HXDLIN(3926)						if (!(_hx_tmp)) {
HXLINE(3926)							goto _hx_goto_28;
            						}
HXDLIN(3926)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE(3927)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE(3899)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,lower_bound,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::first(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3935_first)
            	HX_STACK_THIS(this)
HXLINE(3944)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = this->parent;
HXLINE(3945)		while(hx::IsNotNull( cur->prev )){
HXLINE(3945)			cur = cur->prev;
            		}
HXLINE(3946)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,first,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3948_pop_front)
            	HX_STACK_THIS(this)
HXLINE(3957)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = this->parent;
HXLINE(3958)		while(hx::IsNotNull( cur->prev )){
HXLINE(3958)			cur = cur->prev;
            		}
HXLINE(3959)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,ret) = cur->data;
HXLINE(3960)		this->remove_node(cur);
HXLINE(3961)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,pop_front,return )

void ZPP_Set_ZPP_SimpleVert_obj::remove( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3973_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3973)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert cur){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3975_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(3984)		if (hx::IsNotNull( cur->next )) {
HXLINE(3985)			cur = cur->next;
HXLINE(3986)			while(hx::IsNotNull( cur->prev )){
HXLINE(3986)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE(3989)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,pre) = cur;
HXLINE(3990)			cur = cur->parent;
HXLINE(3991)			while(true){
HXLINE(3991)				bool _hx_tmp;
HXDLIN(3991)				if (hx::IsNotNull( cur )) {
HXLINE(3991)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE(3991)					_hx_tmp = false;
            				}
HXDLIN(3991)				if (!(_hx_tmp)) {
HXLINE(3991)					goto _hx_goto_36;
            				}
HXLINE(3992)				pre = cur;
HXLINE(3993)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE(3996)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert cur){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3998_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(4007)		if (hx::IsNotNull( cur->prev )) {
HXLINE(4008)			cur = cur->prev;
HXLINE(4009)			while(hx::IsNotNull( cur->next )){
HXLINE(4009)				cur = cur->next;
            			}
            		}
            		else {
HXLINE(4012)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,pre) = cur;
HXLINE(4013)			cur = cur->parent;
HXLINE(4014)			while(true){
HXLINE(4014)				bool _hx_tmp;
HXDLIN(4014)				if (hx::IsNotNull( cur )) {
HXLINE(4014)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE(4014)					_hx_tmp = false;
            				}
HXDLIN(4014)				if (!(_hx_tmp)) {
HXLINE(4014)					goto _hx_goto_39;
            				}
HXLINE(4015)				pre = cur;
HXLINE(4016)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE(4019)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,predecessor_node,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::successor( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4021_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4030)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,node) = this->successor_node(this->find(obj));
HXLINE(4031)		if (hx::IsNull( node )) {
HXLINE(4031)			return null();
            		}
            		else {
HXLINE(4031)			return node->data;
            		}
HXDLIN(4031)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,successor,return )

 ::zpp_nape::geom::ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::predecessor( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4033_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4042)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,node) = this->predecessor_node(this->find(obj));
HXLINE(4043)		if (hx::IsNull( node )) {
HXLINE(4043)			return null();
            		}
            		else {
HXLINE(4043)			return node->data;
            		}
HXDLIN(4043)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,predecessor,return )

void ZPP_Set_ZPP_SimpleVert_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert cur){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4045_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(4054)		bool _hx_tmp;
HXDLIN(4054)		if (hx::IsNotNull( cur->next )) {
HXLINE(4054)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE(4054)			_hx_tmp = false;
            		}
HXDLIN(4054)		if (_hx_tmp) {
HXLINE(4055)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,sm) = cur->next;
HXLINE(4056)			while(hx::IsNotNull( sm->prev )){
HXLINE(4056)				sm = sm->prev;
            			}
HXLINE(4057)			{
HXLINE(4058)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,t) = cur->data;
HXLINE(4059)				cur->data = sm->data;
HXLINE(4060)				sm->data = t;
            			}
HXLINE(4062)			if (hx::IsNotNull( this->swapped )) {
HXLINE(4062)				this->swapped(cur->data,sm->data);
            			}
HXLINE(4063)			cur = sm;
            		}
HXLINE(4073)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,child);
HXDLIN(4073)		if (hx::IsNull( cur->prev )) {
HXLINE(4073)			child = cur->next;
            		}
            		else {
HXLINE(4073)			child = cur->prev;
            		}
HXLINE(4074)		if ((cur->colour == (int)1)) {
HXLINE(4075)			bool _hx_tmp1;
HXDLIN(4075)			if (hx::IsNull( cur->prev )) {
HXLINE(4075)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE(4075)				_hx_tmp1 = true;
            			}
HXDLIN(4075)			if (_hx_tmp1) {
HXLINE(4075)				child->colour = (int)1;
            			}
            			else {
HXLINE(4076)				if (hx::IsNotNull( cur->parent )) {
HXLINE(4077)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,parent) = cur->parent;
HXLINE(4078)					while(true){
HXLINE(4079)						parent->colour++;
HXLINE(4080)						parent->prev->colour--;
HXLINE(4081)						parent->next->colour--;
HXLINE(4082)						{
HXLINE(4083)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,child1,"child") = parent->prev;
HXLINE(4084)							if ((child1->colour == (int)-1)) {
HXLINE(4085)								this->_hx___fix_neg_red(child1);
HXLINE(4086)								goto _hx_goto_44;
            							}
            							else {
HXLINE(4088)								if ((child1->colour == (int)0)) {
HXLINE(4090)									bool _hx_tmp2;
HXDLIN(4090)									if (hx::IsNotNull( child1->prev )) {
HXLINE(4090)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE(4090)										_hx_tmp2 = false;
            									}
HXDLIN(4090)									if (_hx_tmp2) {
HXLINE(4091)										this->_hx___fix_dbl_red(child1->prev);
HXLINE(4092)										goto _hx_goto_44;
            									}
HXLINE(4096)									bool _hx_tmp3;
HXDLIN(4096)									if (hx::IsNotNull( child1->next )) {
HXLINE(4096)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE(4096)										_hx_tmp3 = false;
            									}
HXDLIN(4096)									if (_hx_tmp3) {
HXLINE(4097)										this->_hx___fix_dbl_red(child1->next);
HXLINE(4098)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(4103)						{
HXLINE(4104)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,child2,"child") = parent->next;
HXLINE(4105)							if ((child2->colour == (int)-1)) {
HXLINE(4106)								this->_hx___fix_neg_red(child2);
HXLINE(4107)								goto _hx_goto_44;
            							}
            							else {
HXLINE(4109)								if ((child2->colour == (int)0)) {
HXLINE(4111)									bool _hx_tmp4;
HXDLIN(4111)									if (hx::IsNotNull( child2->prev )) {
HXLINE(4111)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE(4111)										_hx_tmp4 = false;
            									}
HXDLIN(4111)									if (_hx_tmp4) {
HXLINE(4112)										this->_hx___fix_dbl_red(child2->prev);
HXLINE(4113)										goto _hx_goto_44;
            									}
HXLINE(4117)									bool _hx_tmp5;
HXDLIN(4117)									if (hx::IsNotNull( child2->next )) {
HXLINE(4117)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE(4117)										_hx_tmp5 = false;
            									}
HXDLIN(4117)									if (_hx_tmp5) {
HXLINE(4118)										this->_hx___fix_dbl_red(child2->next);
HXLINE(4119)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(4124)						if ((parent->colour == (int)2)) {
HXLINE(4125)							if (hx::IsNull( parent->parent )) {
HXLINE(4126)								parent->colour = (int)1;
            							}
            							else {
HXLINE(4129)								parent = parent->parent;
HXLINE(4130)								continue;
            							}
            						}
HXLINE(4133)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE(4137)		{
HXLINE(4138)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,par) = cur->parent;
HXLINE(4139)			if (hx::IsNull( par )) {
HXLINE(4140)				this->parent = child;
            			}
            			else {
HXLINE(4142)				if (hx::IsEq( par->prev,cur )) {
HXLINE(4142)					par->prev = child;
            				}
            				else {
HXLINE(4143)					par->next = child;
            				}
            			}
HXLINE(4144)			if (hx::IsNotNull( child )) {
HXLINE(4144)				child->parent = par;
            			}
            		}
HXLINE(4146)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE(4147)		{
HXLINE(4148)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,o) = cur;
HXLINE(4157)			{
HXLINE(4157)				o->data = null();
HXDLIN(4157)				o->lt = null();
HXDLIN(4157)				o->swapped = null();
            			}
HXLINE(4158)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4159)			::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,remove_node,(void))

void ZPP_Set_ZPP_SimpleVert_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4166_clear)
            	HX_STACK_THIS(this)
HXLINE(4166)		if (hx::IsNotNull( this->parent )) {
HXLINE(4166)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = this->parent;
HXDLIN(4166)			while(hx::IsNotNull( cur )){
HXLINE(4166)				if (hx::IsNotNull( cur->prev )) {
HXLINE(4166)					cur = cur->prev;
            				}
            				else {
HXLINE(4166)					if (hx::IsNotNull( cur->next )) {
HXLINE(4166)						cur = cur->next;
            					}
            					else {
HXLINE(4166)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,ret) = cur->parent;
HXDLIN(4166)						if (hx::IsNotNull( ret )) {
HXLINE(4166)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(4166)								ret->prev = null();
            							}
            							else {
HXLINE(4166)								ret->next = null();
            							}
HXDLIN(4166)							cur->parent = null();
            						}
HXDLIN(4166)						{
HXLINE(4166)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,o) = cur;
HXDLIN(4166)							{
HXLINE(4166)								o->data = null();
HXDLIN(4166)								o->lt = null();
HXDLIN(4166)								o->swapped = null();
            							}
HXDLIN(4166)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(4166)							::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = o;
            						}
HXDLIN(4166)						cur = ret;
            					}
            				}
            			}
HXDLIN(4166)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleVert_obj,clear,(void))

void ZPP_Set_ZPP_SimpleVert_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4170_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(4170)		if (hx::IsNull( this->parent )) {
HXLINE(4170)			return;
            		}
            		else {
HXLINE(4172)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = this->parent;
HXLINE(4173)			while(hx::IsNotNull( cur )){
HXLINE(4173)				if (hx::IsNotNull( cur->prev )) {
HXLINE(4173)					cur = cur->prev;
            				}
            				else {
HXLINE(4173)					if (hx::IsNotNull( cur->next )) {
HXLINE(4173)						cur = cur->next;
            					}
            					else {
HXLINE(4173)						lambda(cur->data);
HXDLIN(4173)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,ret) = cur->parent;
HXDLIN(4173)						if (hx::IsNotNull( ret )) {
HXLINE(4173)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(4173)								ret->prev = null();
            							}
            							else {
HXLINE(4173)								ret->next = null();
            							}
HXDLIN(4173)							cur->parent = null();
            						}
HXDLIN(4173)						{
HXLINE(4173)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,o) = cur;
HXDLIN(4173)							{
HXLINE(4173)								o->data = null();
HXDLIN(4173)								o->lt = null();
HXDLIN(4173)								o->swapped = null();
            							}
HXDLIN(4173)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(4173)							::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = o;
            						}
HXDLIN(4173)						cur = ret;
            					}
            				}
            			}
HXLINE(4174)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4178_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(4187)		lambda(node->data);
HXLINE(4188)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,ret) = node->parent;
HXLINE(4189)		if (hx::IsNotNull( ret )) {
HXLINE(4190)			if (hx::IsEq( node,ret->prev )) {
HXLINE(4190)				ret->prev = null();
            			}
            			else {
HXLINE(4191)				ret->next = null();
            			}
HXLINE(4192)			node->parent = null();
            		}
HXLINE(4194)		{
HXLINE(4204)			{
HXLINE(4204)				node->data = null();
HXDLIN(4204)				node->lt = null();
HXDLIN(4204)				node->swapped = null();
            			}
HXLINE(4205)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4206)			::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = node;
            		}
HXLINE(4211)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_SimpleVert_obj,clear_node,return )

void ZPP_Set_ZPP_SimpleVert_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert negred){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4213___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE(4214)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,parent) = negred->parent;
HXLINE(4215)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,child);
HXDLIN(4215)		if (hx::IsEq( parent->prev,negred )) {
HXLINE(4216)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,nl) = negred->prev;
HXLINE(4217)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,nr) = negred->next;
HXLINE(4218)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,trl) = nr->prev;
HXLINE(4219)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,trr) = nr->next;
HXLINE(4220)			nl->colour = (int)0;
HXLINE(4221)			negred->colour = (parent->colour = (int)1);
HXLINE(4222)			{
HXLINE(4223)				negred->next = trl;
HXLINE(4224)				if (hx::IsNotNull( trl )) {
HXLINE(4224)					trl->parent = negred;
            				}
            			}
HXLINE(4226)			{
HXLINE(4227)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,t) = parent->data;
HXLINE(4228)				parent->data = nr->data;
HXLINE(4229)				nr->data = t;
            			}
HXLINE(4231)			if (hx::IsNotNull( this->swapped )) {
HXLINE(4231)				this->swapped(parent->data,nr->data);
            			}
HXLINE(4232)			{
HXLINE(4233)				nr->prev = trr;
HXLINE(4234)				if (hx::IsNotNull( trr )) {
HXLINE(4234)					trr->parent = nr;
            				}
            			}
HXLINE(4236)			{
HXLINE(4237)				nr->next = parent->next;
HXLINE(4238)				if (hx::IsNotNull( parent->next )) {
HXLINE(4238)					parent->next->parent = nr;
            				}
            			}
HXLINE(4240)			{
HXLINE(4241)				parent->next = nr;
HXLINE(4242)				if (hx::IsNotNull( nr )) {
HXLINE(4242)					nr->parent = parent;
            				}
            			}
HXLINE(4215)			child = nl;
            		}
            		else {
HXLINE(4247)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,nl1,"nl") = negred->next;
HXLINE(4248)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,nr1,"nr") = negred->prev;
HXLINE(4249)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,trl1,"trl") = nr1->next;
HXLINE(4250)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,trr1,"trr") = nr1->prev;
HXLINE(4251)			nl1->colour = (int)0;
HXLINE(4252)			negred->colour = (parent->colour = (int)1);
HXLINE(4253)			{
HXLINE(4254)				negred->prev = trl1;
HXLINE(4255)				if (hx::IsNotNull( trl1 )) {
HXLINE(4255)					trl1->parent = negred;
            				}
            			}
HXLINE(4257)			{
HXLINE(4258)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,t1,"t") = parent->data;
HXLINE(4259)				parent->data = nr1->data;
HXLINE(4260)				nr1->data = t1;
            			}
HXLINE(4262)			if (hx::IsNotNull( this->swapped )) {
HXLINE(4262)				this->swapped(parent->data,nr1->data);
            			}
HXLINE(4263)			{
HXLINE(4264)				nr1->next = trr1;
HXLINE(4265)				if (hx::IsNotNull( trr1 )) {
HXLINE(4265)					trr1->parent = nr1;
            				}
            			}
HXLINE(4267)			{
HXLINE(4268)				nr1->prev = parent->prev;
HXLINE(4269)				if (hx::IsNotNull( parent->prev )) {
HXLINE(4269)					parent->prev->parent = nr1;
            				}
            			}
HXLINE(4271)			{
HXLINE(4272)				parent->prev = nr1;
HXLINE(4273)				if (hx::IsNotNull( nr1 )) {
HXLINE(4273)					nr1->parent = parent;
            				}
            			}
HXLINE(4215)			child = nl1;
            		}
HXLINE(4277)		bool _hx_tmp;
HXDLIN(4277)		if (hx::IsNotNull( child->prev )) {
HXLINE(4277)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE(4277)			_hx_tmp = false;
            		}
HXDLIN(4277)		if (_hx_tmp) {
HXLINE(4277)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE(4278)			bool _hx_tmp1;
HXDLIN(4278)			if (hx::IsNotNull( child->next )) {
HXLINE(4278)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE(4278)				_hx_tmp1 = false;
            			}
HXDLIN(4278)			if (_hx_tmp1) {
HXLINE(4278)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_SimpleVert_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert x){
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4281___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(4281)		while(true){
HXLINE(4282)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,par) = x->parent;
HXLINE(4283)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,g) = par->parent;
HXLINE(4284)			if (hx::IsNull( g )) {
HXLINE(4285)				par->colour = (int)1;
HXLINE(4286)				goto _hx_goto_52;
            			}
HXLINE(4288)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,n1);
HXDLIN(4288)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,n2);
HXDLIN(4288)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,n3);
HXDLIN(4288)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,t1);
HXDLIN(4288)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,t2);
HXDLIN(4288)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,t3);
HXDLIN(4288)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,t4);
HXLINE(4289)			if (hx::IsEq( par,g->prev )) {
HXLINE(4290)				n3 = g;
HXLINE(4291)				t4 = g->next;
HXLINE(4292)				if (hx::IsEq( x,par->prev )) {
HXLINE(4293)					n1 = x;
HXLINE(4294)					n2 = par;
HXLINE(4295)					t1 = x->prev;
HXLINE(4296)					t2 = x->next;
HXLINE(4297)					t3 = par->next;
            				}
            				else {
HXLINE(4300)					n1 = par;
HXLINE(4301)					n2 = x;
HXLINE(4302)					t1 = par->prev;
HXLINE(4303)					t2 = x->prev;
HXLINE(4304)					t3 = x->next;
            				}
            			}
            			else {
HXLINE(4308)				n1 = g;
HXLINE(4309)				t1 = g->prev;
HXLINE(4310)				if (hx::IsEq( x,par->prev )) {
HXLINE(4311)					n2 = x;
HXLINE(4312)					n3 = par;
HXLINE(4313)					t2 = x->prev;
HXLINE(4314)					t3 = x->next;
HXLINE(4315)					t4 = par->next;
            				}
            				else {
HXLINE(4318)					n2 = par;
HXLINE(4319)					n3 = x;
HXLINE(4320)					t2 = par->prev;
HXLINE(4321)					t3 = x->prev;
HXLINE(4322)					t4 = x->next;
            				}
            			}
HXLINE(4325)			{
HXLINE(4326)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,par1,"par") = g->parent;
HXLINE(4327)				if (hx::IsNull( par1 )) {
HXLINE(4328)					this->parent = n2;
            				}
            				else {
HXLINE(4330)					if (hx::IsEq( par1->prev,g )) {
HXLINE(4330)						par1->prev = n2;
            					}
            					else {
HXLINE(4331)						par1->next = n2;
            					}
            				}
HXLINE(4332)				if (hx::IsNotNull( n2 )) {
HXLINE(4332)					n2->parent = par1;
            				}
            			}
HXLINE(4334)			{
HXLINE(4335)				n1->prev = t1;
HXLINE(4336)				if (hx::IsNotNull( t1 )) {
HXLINE(4336)					t1->parent = n1;
            				}
            			}
HXLINE(4338)			{
HXLINE(4339)				n1->next = t2;
HXLINE(4340)				if (hx::IsNotNull( t2 )) {
HXLINE(4340)					t2->parent = n1;
            				}
            			}
HXLINE(4342)			{
HXLINE(4343)				n2->prev = n1;
HXLINE(4344)				if (hx::IsNotNull( n1 )) {
HXLINE(4344)					n1->parent = n2;
            				}
            			}
HXLINE(4346)			{
HXLINE(4347)				n2->next = n3;
HXLINE(4348)				if (hx::IsNotNull( n3 )) {
HXLINE(4348)					n3->parent = n2;
            				}
            			}
HXLINE(4350)			{
HXLINE(4351)				n3->prev = t3;
HXLINE(4352)				if (hx::IsNotNull( t3 )) {
HXLINE(4352)					t3->parent = n3;
            				}
            			}
HXLINE(4354)			{
HXLINE(4355)				n3->next = t4;
HXLINE(4356)				if (hx::IsNotNull( t4 )) {
HXLINE(4356)					t4->parent = n3;
            				}
            			}
HXLINE(4358)			n2->colour = (g->colour - (int)1);
HXLINE(4359)			n1->colour = (int)1;
HXLINE(4360)			n3->colour = (int)1;
HXLINE(4361)			if (hx::IsEq( n2,this->parent )) {
HXLINE(4361)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE(4362)				bool _hx_tmp;
HXDLIN(4362)				if ((n2->colour == (int)0)) {
HXLINE(4362)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE(4362)					_hx_tmp = false;
            				}
HXDLIN(4362)				if (_hx_tmp) {
HXLINE(4363)					x = n2;
HXLINE(4364)					continue;
            				}
            			}
HXLINE(4366)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_SimpleVert_obj::try_insert_bool( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_GC_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4369_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4370)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,x) = null();
HXLINE(4371)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = null();
HXLINE(4372)		if (hx::IsNull( this->parent )) {
HXLINE(4374)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(4375)				x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(4381)				x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4382)				::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = x->next;
HXLINE(4383)				x->next = null();
            			}
HXLINE(4390)			x->data = obj;
HXLINE(4391)			this->parent = x;
            		}
            		else {
HXLINE(4394)			cur = this->parent;
HXLINE(4395)			while(true){
HXLINE(4396)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(4397)					if (hx::IsNull( cur->prev )) {
HXLINE(4399)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(4400)							x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(4406)							x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4407)							::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = x->next;
HXLINE(4408)							x->next = null();
            						}
HXLINE(4415)						x->data = obj;
HXLINE(4416)						cur->prev = x;
HXLINE(4417)						x->parent = cur;
HXLINE(4418)						goto _hx_goto_54;
            					}
            					else {
HXLINE(4420)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(4422)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(4423)						if (hx::IsNull( cur->next )) {
HXLINE(4425)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(4426)								x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(4432)								x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4433)								::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = x->next;
HXLINE(4434)								x->next = null();
            							}
HXLINE(4441)							x->data = obj;
HXLINE(4442)							cur->next = x;
HXLINE(4443)							x->parent = cur;
HXLINE(4444)							goto _hx_goto_54;
            						}
            						else {
HXLINE(4446)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(4448)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE(4451)		if (hx::IsNull( x )) {
HXLINE(4451)			return false;
            		}
            		else {
HXLINE(4453)			if (hx::IsNull( x->parent )) {
HXLINE(4453)				x->colour = (int)1;
            			}
            			else {
HXLINE(4455)				x->colour = (int)0;
HXLINE(4456)				if ((x->parent->colour == (int)0)) {
HXLINE(4456)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(4458)			return true;
            		}
HXLINE(4451)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::try_insert( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_GC_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4461_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4462)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,x) = null();
HXLINE(4463)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = null();
HXLINE(4464)		if (hx::IsNull( this->parent )) {
HXLINE(4466)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(4467)				x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(4473)				x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4474)				::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = x->next;
HXLINE(4475)				x->next = null();
            			}
HXLINE(4482)			x->data = obj;
HXLINE(4483)			this->parent = x;
            		}
            		else {
HXLINE(4486)			cur = this->parent;
HXLINE(4487)			while(true){
HXLINE(4488)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(4489)					if (hx::IsNull( cur->prev )) {
HXLINE(4491)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(4492)							x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(4498)							x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4499)							::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = x->next;
HXLINE(4500)							x->next = null();
            						}
HXLINE(4507)						x->data = obj;
HXLINE(4508)						cur->prev = x;
HXLINE(4509)						x->parent = cur;
HXLINE(4510)						goto _hx_goto_56;
            					}
            					else {
HXLINE(4512)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(4514)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(4515)						if (hx::IsNull( cur->next )) {
HXLINE(4517)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(4518)								x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(4524)								x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4525)								::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = x->next;
HXLINE(4526)								x->next = null();
            							}
HXLINE(4533)							x->data = obj;
HXLINE(4534)							cur->next = x;
HXLINE(4535)							x->parent = cur;
HXLINE(4536)							goto _hx_goto_56;
            						}
            						else {
HXLINE(4538)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(4540)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE(4543)		if (hx::IsNull( x )) {
HXLINE(4543)			return cur;
            		}
            		else {
HXLINE(4545)			if (hx::IsNull( x->parent )) {
HXLINE(4545)				x->colour = (int)1;
            			}
            			else {
HXLINE(4547)				x->colour = (int)0;
HXLINE(4548)				if ((x->parent->colour == (int)0)) {
HXLINE(4548)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(4550)			return x;
            		}
HXLINE(4543)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::insert( ::zpp_nape::geom::ZPP_SimpleVert obj){
            	HX_GC_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_4553_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4562)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,x);
HXLINE(4564)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(4565)			x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4571)			x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE(4572)			::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = x->next;
HXLINE(4573)			x->next = null();
            		}
HXLINE(4580)		x->data = obj;
HXLINE(4581)		if (hx::IsNull( this->parent )) {
HXLINE(4581)			this->parent = x;
            		}
            		else {
HXLINE(4583)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = this->parent;
HXLINE(4584)			while(true){
HXLINE(4585)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(4586)					if (hx::IsNull( cur->prev )) {
HXLINE(4587)						cur->prev = x;
HXLINE(4588)						x->parent = cur;
HXLINE(4589)						goto _hx_goto_58;
            					}
            					else {
HXLINE(4591)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(4594)					if (hx::IsNull( cur->next )) {
HXLINE(4595)						cur->next = x;
HXLINE(4596)						x->parent = cur;
HXLINE(4597)						goto _hx_goto_58;
            					}
            					else {
HXLINE(4599)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(4603)		if (hx::IsNull( x->parent )) {
HXLINE(4603)			x->colour = (int)1;
            		}
            		else {
HXLINE(4605)			x->colour = (int)0;
HXLINE(4606)			if ((x->parent->colour == (int)0)) {
HXLINE(4606)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(4616)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleVert_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_SimpleVert_obj > ZPP_Set_ZPP_SimpleVert_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_SimpleVert_obj > __this = new ZPP_Set_ZPP_SimpleVert_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_SimpleVert_obj > ZPP_Set_ZPP_SimpleVert_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_SimpleVert_obj *__this = (ZPP_Set_ZPP_SimpleVert_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_SimpleVert_obj), true, "zpp_nape.util.ZPP_Set_ZPP_SimpleVert"));
	*(void **)__this = ZPP_Set_ZPP_SimpleVert_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_SimpleVert_obj::ZPP_Set_ZPP_SimpleVert_obj()
{
}

void ZPP_Set_ZPP_SimpleVert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_SimpleVert);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_SimpleVert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_SimpleVert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_SimpleVert_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_SimpleVert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_SimpleVert_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_SimpleVert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_SimpleVert_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleVert_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleVert_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimpleVert*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleVert_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleVert*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleVert_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleVert*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleVert_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleVert*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleVert_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_SimpleVert_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_SimpleVert_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleVert*/ ,(void *) &ZPP_Set_ZPP_SimpleVert_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_SimpleVert_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_SimpleVert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_SimpleVert_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_SimpleVert_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_SimpleVert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_SimpleVert_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_SimpleVert_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_SimpleVert_obj::__mClass;

static ::String ZPP_Set_ZPP_SimpleVert_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_SimpleVert_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_SimpleVert_obj;
	ZPP_Set_ZPP_SimpleVert_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_SimpleVert","\x15","\xe8","\xc5","\xc1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_SimpleVert_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_SimpleVert_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_SimpleVert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_SimpleVert_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_SimpleVert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_SimpleVert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_SimpleVert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_SimpleVert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_SimpleVert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_SimpleVert_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9b37c8de3b80c47e_3732_boot)
HXLINE(3732)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
