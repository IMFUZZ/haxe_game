// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSet
#include <zpp_nape/util/ZPP_Set_ZPP_CbSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6398_new,"zpp_nape.util.ZPP_Set_ZPP_CbSet","new",0x79a60ee3,"zpp_nape.util.ZPP_Set_ZPP_CbSet.new","zpp_nape/util/RBTree.hx",6398,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6425_free,"zpp_nape.util.ZPP_Set_ZPP_CbSet","free",0xf26710c9,"zpp_nape.util.ZPP_Set_ZPP_CbSet.free","zpp_nape/util/RBTree.hx",6425,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6432_alloc,"zpp_nape.util.ZPP_Set_ZPP_CbSet","alloc",0x42d4c9b8,"zpp_nape.util.ZPP_Set_ZPP_CbSet.alloc","zpp_nape/util/RBTree.hx",6432,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6441_verify,"zpp_nape.util.ZPP_Set_ZPP_CbSet","verify",0x98fef8d6,"zpp_nape.util.ZPP_Set_ZPP_CbSet.verify","zpp_nape/util/RBTree.hx",6441,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6507_empty,"zpp_nape.util.ZPP_Set_ZPP_CbSet","empty",0x911b5fd0,"zpp_nape.util.ZPP_Set_ZPP_CbSet.empty","zpp_nape/util/RBTree.hx",6507,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6510_singular,"zpp_nape.util.ZPP_Set_ZPP_CbSet","singular",0x55b3ef74,"zpp_nape.util.ZPP_Set_ZPP_CbSet.singular","zpp_nape/util/RBTree.hx",6510,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6512_size,"zpp_nape.util.ZPP_Set_ZPP_CbSet","size",0xfaf814de,"zpp_nape.util.ZPP_Set_ZPP_CbSet.size","zpp_nape/util/RBTree.hx",6512,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6543_has,"zpp_nape.util.ZPP_Set_ZPP_CbSet","has",0x79a17ddd,"zpp_nape.util.ZPP_Set_ZPP_CbSet.has","zpp_nape/util/RBTree.hx",6543,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6545_find,"zpp_nape.util.ZPP_Set_ZPP_CbSet","find",0xf2604456,"zpp_nape.util.ZPP_Set_ZPP_CbSet.find","zpp_nape/util/RBTree.hx",6545,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6554_has_weak,"zpp_nape.util.ZPP_Set_ZPP_CbSet","has_weak",0xf9be995a,"zpp_nape.util.ZPP_Set_ZPP_CbSet.has_weak","zpp_nape/util/RBTree.hx",6554,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6556_find_weak,"zpp_nape.util.ZPP_Set_ZPP_CbSet","find_weak",0x1ae0bc41,"zpp_nape.util.ZPP_Set_ZPP_CbSet.find_weak","zpp_nape/util/RBTree.hx",6556,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6566_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_CbSet","lower_bound",0x18f9e1c3,"zpp_nape.util.ZPP_Set_ZPP_CbSet.lower_bound","zpp_nape/util/RBTree.hx",6566,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6602_first,"zpp_nape.util.ZPP_Set_ZPP_CbSet","first",0x21de9d73,"zpp_nape.util.ZPP_Set_ZPP_CbSet.first","zpp_nape/util/RBTree.hx",6602,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6615_pop_front,"zpp_nape.util.ZPP_Set_ZPP_CbSet","pop_front",0x076742fe,"zpp_nape.util.ZPP_Set_ZPP_CbSet.pop_front","zpp_nape/util/RBTree.hx",6615,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6640_remove,"zpp_nape.util.ZPP_Set_ZPP_CbSet","remove",0xfc4811a1,"zpp_nape.util.ZPP_Set_ZPP_CbSet.remove","zpp_nape/util/RBTree.hx",6640,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6642_successor_node,"zpp_nape.util.ZPP_Set_ZPP_CbSet","successor_node",0xc765c8d8,"zpp_nape.util.ZPP_Set_ZPP_CbSet.successor_node","zpp_nape/util/RBTree.hx",6642,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6665_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_CbSet","predecessor_node",0x6fa1f215,"zpp_nape.util.ZPP_Set_ZPP_CbSet.predecessor_node","zpp_nape/util/RBTree.hx",6665,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6688_successor,"zpp_nape.util.ZPP_Set_ZPP_CbSet","successor",0xc1864069,"zpp_nape.util.ZPP_Set_ZPP_CbSet.successor","zpp_nape/util/RBTree.hx",6688,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6700_predecessor,"zpp_nape.util.ZPP_Set_ZPP_CbSet","predecessor",0x88d4a04c,"zpp_nape.util.ZPP_Set_ZPP_CbSet.predecessor","zpp_nape/util/RBTree.hx",6700,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6712_remove_node,"zpp_nape.util.ZPP_Set_ZPP_CbSet","remove_node",0xeb6a8ca0,"zpp_nape.util.ZPP_Set_ZPP_CbSet.remove_node","zpp_nape/util/RBTree.hx",6712,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6833_clear,"zpp_nape.util.ZPP_Set_ZPP_CbSet","clear",0x699c96d0,"zpp_nape.util.ZPP_Set_ZPP_CbSet.clear","zpp_nape/util/RBTree.hx",6833,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6837_clear_with,"zpp_nape.util.ZPP_Set_ZPP_CbSet","clear_with",0xf5484915,"zpp_nape.util.ZPP_Set_ZPP_CbSet.clear_with","zpp_nape/util/RBTree.hx",6837,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6845_clear_node,"zpp_nape.util.ZPP_Set_ZPP_CbSet","clear_node",0xef59dd11,"zpp_nape.util.ZPP_Set_ZPP_CbSet.clear_node","zpp_nape/util/RBTree.hx",6845,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6880___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_CbSet","__fix_neg_red",0x4bccb01b,"zpp_nape.util.ZPP_Set_ZPP_CbSet.__fix_neg_red","zpp_nape/util/RBTree.hx",6880,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6948___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_CbSet","__fix_dbl_red",0x59e4ddf9,"zpp_nape.util.ZPP_Set_ZPP_CbSet.__fix_dbl_red","zpp_nape/util/RBTree.hx",6948,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_7036_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_CbSet","try_insert_bool",0xb62408ef,"zpp_nape.util.ZPP_Set_ZPP_CbSet.try_insert_bool","zpp_nape/util/RBTree.hx",7036,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_7128_try_insert,"zpp_nape.util.ZPP_Set_ZPP_CbSet","try_insert",0xd7cd40da,"zpp_nape.util.ZPP_Set_ZPP_CbSet.try_insert","zpp_nape/util/RBTree.hx",7128,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_7220_insert,"zpp_nape.util.ZPP_Set_ZPP_CbSet","insert",0x959cb896,"zpp_nape.util.ZPP_Set_ZPP_CbSet.insert","zpp_nape/util/RBTree.hx",7220,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_1507fc751a163ddd_6399_boot,"zpp_nape.util.ZPP_Set_ZPP_CbSet","boot",0xefbff84f,"zpp_nape.util.ZPP_Set_ZPP_CbSet.boot","zpp_nape/util/RBTree.hx",6399,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_CbSet_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6398_new)
            	HX_STACK_THIS(this)
HXLINE(6439)		this->colour = (int)0;
HXLINE(6438)		this->parent = null();
HXLINE(6437)		this->next = null();
HXLINE(6436)		this->prev = null();
HXLINE(6435)		this->data = null();
HXLINE(6434)		this->swapped = null();
HXLINE(6433)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_CbSet_obj::__CreateEmpty() { return new ZPP_Set_ZPP_CbSet_obj; }

void *ZPP_Set_ZPP_CbSet_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_CbSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_CbSet_obj > _hx_result = new ZPP_Set_ZPP_CbSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_CbSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ca418ad;
}

void ZPP_Set_ZPP_CbSet_obj::free(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6425_free)
            	HX_STACK_THIS(this)
HXLINE(6426)		this->data = null();
HXLINE(6427)		this->lt = null();
HXLINE(6428)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,free,(void))

void ZPP_Set_ZPP_CbSet_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6432_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,alloc,(void))

bool ZPP_Set_ZPP_CbSet_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6441_verify)
            	HX_STACK_THIS(this)
HXLINE(6451)		if (!(this->empty())) {
HXLINE(6452)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,set_ite) = this->parent;
HXLINE(6453)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(6453)				set_ite = set_ite->prev;
            			}
HXLINE(6454)			while(hx::IsNotNull( set_ite )){
HXLINE(6455)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,i) = set_ite->data;
HXLINE(6456)				{
HXLINE(6457)					HX_VARI( bool,prei) = true;
HXLINE(6467)					if (!(this->empty())) {
HXLINE(6468)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,set_ite1,"set_ite") = this->parent;
HXLINE(6469)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE(6469)							set_ite1 = set_ite1->prev;
            						}
HXLINE(6470)						while(hx::IsNotNull( set_ite1 )){
HXLINE(6471)							HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,j) = set_ite1->data;
HXLINE(6473)							if (!(prei)) {
HXLINE(6474)								bool _hx_tmp;
HXDLIN(6474)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE(6474)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE(6474)									_hx_tmp = false;
            								}
HXDLIN(6474)								if (_hx_tmp) {
HXLINE(6474)									return false;
            								}
            							}
            							else {
HXLINE(6476)								if (hx::IsEq( i,j )) {
HXLINE(6476)									prei = false;
            								}
            								else {
HXLINE(6478)									bool _hx_tmp1;
HXDLIN(6478)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE(6478)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE(6478)										_hx_tmp1 = false;
            									}
HXDLIN(6478)									if (_hx_tmp1) {
HXLINE(6478)										return false;
            									}
            								}
            							}
HXLINE(6481)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE(6482)								set_ite1 = set_ite1->next;
HXLINE(6483)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE(6483)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE(6486)								while(true){
HXLINE(6486)									bool _hx_tmp2;
HXDLIN(6486)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE(6486)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE(6486)										_hx_tmp2 = false;
            									}
HXDLIN(6486)									if (!(_hx_tmp2)) {
HXLINE(6486)										goto _hx_goto_8;
            									}
HXDLIN(6486)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE(6487)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE(6493)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(6494)					set_ite = set_ite->next;
HXLINE(6495)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(6495)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(6498)					while(true){
HXLINE(6498)						bool _hx_tmp3;
HXDLIN(6498)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(6498)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(6498)							_hx_tmp3 = false;
            						}
HXDLIN(6498)						if (!(_hx_tmp3)) {
HXLINE(6498)							goto _hx_goto_10;
            						}
HXDLIN(6498)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE(6499)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(6504)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,verify,return )

bool ZPP_Set_ZPP_CbSet_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6507_empty)
            	HX_STACK_THIS(this)
HXLINE(6507)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,empty,return )

bool ZPP_Set_ZPP_CbSet_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6510_singular)
            	HX_STACK_THIS(this)
HXLINE(6510)		bool _hx_tmp;
HXDLIN(6510)		if (hx::IsNotNull( this->parent )) {
HXLINE(6510)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE(6510)			_hx_tmp = false;
            		}
HXDLIN(6510)		if (_hx_tmp) {
HXLINE(6510)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE(6510)			return false;
            		}
HXDLIN(6510)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,singular,return )

int ZPP_Set_ZPP_CbSet_obj::size(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6512_size)
            	HX_STACK_THIS(this)
HXLINE(6513)		HX_VARI( int,ret) = (int)0;
HXLINE(6523)		if (!(this->empty())) {
HXLINE(6524)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,set_ite) = this->parent;
HXLINE(6525)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(6525)				set_ite = set_ite->prev;
            			}
HXLINE(6526)			while(hx::IsNotNull( set_ite )){
HXLINE(6528)				ret = (ret + (int)1);
HXLINE(6529)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(6530)					set_ite = set_ite->next;
HXLINE(6531)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(6531)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(6534)					while(true){
HXLINE(6534)						bool _hx_tmp;
HXDLIN(6534)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(6534)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(6534)							_hx_tmp = false;
            						}
HXDLIN(6534)						if (!(_hx_tmp)) {
HXLINE(6534)							goto _hx_goto_17;
            						}
HXDLIN(6534)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE(6535)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(6540)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,size,return )

bool ZPP_Set_ZPP_CbSet_obj::has( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6543_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6543)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::find( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6545_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6546)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = this->parent;
HXLINE(6547)		while(true){
HXLINE(6547)			bool _hx_tmp;
HXDLIN(6547)			if (hx::IsNotNull( cur )) {
HXLINE(6547)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE(6547)				_hx_tmp = false;
            			}
HXDLIN(6547)			if (!(_hx_tmp)) {
HXLINE(6547)				goto _hx_goto_20;
            			}
HXLINE(6548)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(6548)				cur = cur->prev;
            			}
            			else {
HXLINE(6549)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE(6551)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,find,return )

bool ZPP_Set_ZPP_CbSet_obj::has_weak( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6554_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6554)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::find_weak( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6556_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6557)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = this->parent;
HXLINE(6558)		while(hx::IsNotNull( cur )){
HXLINE(6559)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(6559)				cur = cur->prev;
            			}
            			else {
HXLINE(6560)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(6560)					cur = cur->next;
            				}
            				else {
HXLINE(6561)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE(6563)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,find_weak,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::lower_bound( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6566_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6567)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,ret) = null();
HXLINE(6577)		if (!(this->empty())) {
HXLINE(6578)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,set_ite) = this->parent;
HXLINE(6579)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(6579)				set_ite = set_ite->prev;
            			}
HXLINE(6580)			while(hx::IsNotNull( set_ite )){
HXLINE(6581)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,elt) = set_ite->data;
HXLINE(6583)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE(6584)					ret = elt;
HXLINE(6585)					goto _hx_goto_26;
            				}
HXLINE(6588)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(6589)					set_ite = set_ite->next;
HXLINE(6590)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(6590)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(6593)					while(true){
HXLINE(6593)						bool _hx_tmp;
HXDLIN(6593)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(6593)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(6593)							_hx_tmp = false;
            						}
HXDLIN(6593)						if (!(_hx_tmp)) {
HXLINE(6593)							goto _hx_goto_28;
            						}
HXDLIN(6593)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE(6594)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE(6566)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,lower_bound,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::first(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6602_first)
            	HX_STACK_THIS(this)
HXLINE(6611)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = this->parent;
HXLINE(6612)		while(hx::IsNotNull( cur->prev )){
HXLINE(6612)			cur = cur->prev;
            		}
HXLINE(6613)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,first,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6615_pop_front)
            	HX_STACK_THIS(this)
HXLINE(6624)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = this->parent;
HXLINE(6625)		while(hx::IsNotNull( cur->prev )){
HXLINE(6625)			cur = cur->prev;
            		}
HXLINE(6626)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,ret) = cur->data;
HXLINE(6627)		this->remove_node(cur);
HXLINE(6628)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,pop_front,return )

void ZPP_Set_ZPP_CbSet_obj::remove( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6640_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6640)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSet cur){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6642_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(6651)		if (hx::IsNotNull( cur->next )) {
HXLINE(6652)			cur = cur->next;
HXLINE(6653)			while(hx::IsNotNull( cur->prev )){
HXLINE(6653)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE(6656)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,pre) = cur;
HXLINE(6657)			cur = cur->parent;
HXLINE(6658)			while(true){
HXLINE(6658)				bool _hx_tmp;
HXDLIN(6658)				if (hx::IsNotNull( cur )) {
HXLINE(6658)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE(6658)					_hx_tmp = false;
            				}
HXDLIN(6658)				if (!(_hx_tmp)) {
HXLINE(6658)					goto _hx_goto_36;
            				}
HXLINE(6659)				pre = cur;
HXLINE(6660)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE(6663)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSet cur){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6665_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(6674)		if (hx::IsNotNull( cur->prev )) {
HXLINE(6675)			cur = cur->prev;
HXLINE(6676)			while(hx::IsNotNull( cur->next )){
HXLINE(6676)				cur = cur->next;
            			}
            		}
            		else {
HXLINE(6679)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,pre) = cur;
HXLINE(6680)			cur = cur->parent;
HXLINE(6681)			while(true){
HXLINE(6681)				bool _hx_tmp;
HXDLIN(6681)				if (hx::IsNotNull( cur )) {
HXLINE(6681)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE(6681)					_hx_tmp = false;
            				}
HXDLIN(6681)				if (!(_hx_tmp)) {
HXLINE(6681)					goto _hx_goto_39;
            				}
HXLINE(6682)				pre = cur;
HXLINE(6683)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE(6686)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,predecessor_node,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::successor( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6688_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6697)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,node) = this->successor_node(this->find(obj));
HXLINE(6698)		if (hx::IsNull( node )) {
HXLINE(6698)			return null();
            		}
            		else {
HXLINE(6698)			return node->data;
            		}
HXDLIN(6698)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,successor,return )

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::predecessor( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6700_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6709)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,node) = this->predecessor_node(this->find(obj));
HXLINE(6710)		if (hx::IsNull( node )) {
HXLINE(6710)			return null();
            		}
            		else {
HXLINE(6710)			return node->data;
            		}
HXDLIN(6710)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,predecessor,return )

void ZPP_Set_ZPP_CbSet_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSet cur){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6712_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(6721)		bool _hx_tmp;
HXDLIN(6721)		if (hx::IsNotNull( cur->next )) {
HXLINE(6721)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE(6721)			_hx_tmp = false;
            		}
HXDLIN(6721)		if (_hx_tmp) {
HXLINE(6722)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,sm) = cur->next;
HXLINE(6723)			while(hx::IsNotNull( sm->prev )){
HXLINE(6723)				sm = sm->prev;
            			}
HXLINE(6724)			{
HXLINE(6725)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,t) = cur->data;
HXLINE(6726)				cur->data = sm->data;
HXLINE(6727)				sm->data = t;
            			}
HXLINE(6729)			if (hx::IsNotNull( this->swapped )) {
HXLINE(6729)				this->swapped(cur->data,sm->data);
            			}
HXLINE(6730)			cur = sm;
            		}
HXLINE(6740)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,child);
HXDLIN(6740)		if (hx::IsNull( cur->prev )) {
HXLINE(6740)			child = cur->next;
            		}
            		else {
HXLINE(6740)			child = cur->prev;
            		}
HXLINE(6741)		if ((cur->colour == (int)1)) {
HXLINE(6742)			bool _hx_tmp1;
HXDLIN(6742)			if (hx::IsNull( cur->prev )) {
HXLINE(6742)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE(6742)				_hx_tmp1 = true;
            			}
HXDLIN(6742)			if (_hx_tmp1) {
HXLINE(6742)				child->colour = (int)1;
            			}
            			else {
HXLINE(6743)				if (hx::IsNotNull( cur->parent )) {
HXLINE(6744)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,parent) = cur->parent;
HXLINE(6745)					while(true){
HXLINE(6746)						parent->colour++;
HXLINE(6747)						parent->prev->colour--;
HXLINE(6748)						parent->next->colour--;
HXLINE(6749)						{
HXLINE(6750)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,child1,"child") = parent->prev;
HXLINE(6751)							if ((child1->colour == (int)-1)) {
HXLINE(6752)								this->_hx___fix_neg_red(child1);
HXLINE(6753)								goto _hx_goto_44;
            							}
            							else {
HXLINE(6755)								if ((child1->colour == (int)0)) {
HXLINE(6757)									bool _hx_tmp2;
HXDLIN(6757)									if (hx::IsNotNull( child1->prev )) {
HXLINE(6757)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE(6757)										_hx_tmp2 = false;
            									}
HXDLIN(6757)									if (_hx_tmp2) {
HXLINE(6758)										this->_hx___fix_dbl_red(child1->prev);
HXLINE(6759)										goto _hx_goto_44;
            									}
HXLINE(6763)									bool _hx_tmp3;
HXDLIN(6763)									if (hx::IsNotNull( child1->next )) {
HXLINE(6763)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE(6763)										_hx_tmp3 = false;
            									}
HXDLIN(6763)									if (_hx_tmp3) {
HXLINE(6764)										this->_hx___fix_dbl_red(child1->next);
HXLINE(6765)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(6770)						{
HXLINE(6771)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,child2,"child") = parent->next;
HXLINE(6772)							if ((child2->colour == (int)-1)) {
HXLINE(6773)								this->_hx___fix_neg_red(child2);
HXLINE(6774)								goto _hx_goto_44;
            							}
            							else {
HXLINE(6776)								if ((child2->colour == (int)0)) {
HXLINE(6778)									bool _hx_tmp4;
HXDLIN(6778)									if (hx::IsNotNull( child2->prev )) {
HXLINE(6778)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE(6778)										_hx_tmp4 = false;
            									}
HXDLIN(6778)									if (_hx_tmp4) {
HXLINE(6779)										this->_hx___fix_dbl_red(child2->prev);
HXLINE(6780)										goto _hx_goto_44;
            									}
HXLINE(6784)									bool _hx_tmp5;
HXDLIN(6784)									if (hx::IsNotNull( child2->next )) {
HXLINE(6784)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE(6784)										_hx_tmp5 = false;
            									}
HXDLIN(6784)									if (_hx_tmp5) {
HXLINE(6785)										this->_hx___fix_dbl_red(child2->next);
HXLINE(6786)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(6791)						if ((parent->colour == (int)2)) {
HXLINE(6792)							if (hx::IsNull( parent->parent )) {
HXLINE(6793)								parent->colour = (int)1;
            							}
            							else {
HXLINE(6796)								parent = parent->parent;
HXLINE(6797)								continue;
            							}
            						}
HXLINE(6800)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE(6804)		{
HXLINE(6805)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,par) = cur->parent;
HXLINE(6806)			if (hx::IsNull( par )) {
HXLINE(6807)				this->parent = child;
            			}
            			else {
HXLINE(6809)				if (hx::IsEq( par->prev,cur )) {
HXLINE(6809)					par->prev = child;
            				}
            				else {
HXLINE(6810)					par->next = child;
            				}
            			}
HXLINE(6811)			if (hx::IsNotNull( child )) {
HXLINE(6811)				child->parent = par;
            			}
            		}
HXLINE(6813)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE(6814)		{
HXLINE(6815)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,o) = cur;
HXLINE(6824)			{
HXLINE(6824)				o->data = null();
HXDLIN(6824)				o->lt = null();
HXDLIN(6824)				o->swapped = null();
            			}
HXLINE(6825)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(6826)			::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,remove_node,(void))

void ZPP_Set_ZPP_CbSet_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6833_clear)
            	HX_STACK_THIS(this)
HXLINE(6833)		if (hx::IsNotNull( this->parent )) {
HXLINE(6833)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = this->parent;
HXDLIN(6833)			while(hx::IsNotNull( cur )){
HXLINE(6833)				if (hx::IsNotNull( cur->prev )) {
HXLINE(6833)					cur = cur->prev;
            				}
            				else {
HXLINE(6833)					if (hx::IsNotNull( cur->next )) {
HXLINE(6833)						cur = cur->next;
            					}
            					else {
HXLINE(6833)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,ret) = cur->parent;
HXDLIN(6833)						if (hx::IsNotNull( ret )) {
HXLINE(6833)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(6833)								ret->prev = null();
            							}
            							else {
HXLINE(6833)								ret->next = null();
            							}
HXDLIN(6833)							cur->parent = null();
            						}
HXDLIN(6833)						{
HXLINE(6833)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,o) = cur;
HXDLIN(6833)							{
HXLINE(6833)								o->data = null();
HXDLIN(6833)								o->lt = null();
HXDLIN(6833)								o->swapped = null();
            							}
HXDLIN(6833)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXDLIN(6833)							::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = o;
            						}
HXDLIN(6833)						cur = ret;
            					}
            				}
            			}
HXDLIN(6833)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSet_obj,clear,(void))

void ZPP_Set_ZPP_CbSet_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6837_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(6837)		if (hx::IsNull( this->parent )) {
HXLINE(6837)			return;
            		}
            		else {
HXLINE(6839)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = this->parent;
HXLINE(6840)			while(hx::IsNotNull( cur )){
HXLINE(6840)				if (hx::IsNotNull( cur->prev )) {
HXLINE(6840)					cur = cur->prev;
            				}
            				else {
HXLINE(6840)					if (hx::IsNotNull( cur->next )) {
HXLINE(6840)						cur = cur->next;
            					}
            					else {
HXLINE(6840)						lambda(cur->data);
HXDLIN(6840)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,ret) = cur->parent;
HXDLIN(6840)						if (hx::IsNotNull( ret )) {
HXLINE(6840)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(6840)								ret->prev = null();
            							}
            							else {
HXLINE(6840)								ret->next = null();
            							}
HXDLIN(6840)							cur->parent = null();
            						}
HXDLIN(6840)						{
HXLINE(6840)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,o) = cur;
HXDLIN(6840)							{
HXLINE(6840)								o->data = null();
HXDLIN(6840)								o->lt = null();
HXDLIN(6840)								o->swapped = null();
            							}
HXDLIN(6840)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXDLIN(6840)							::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = o;
            						}
HXDLIN(6840)						cur = ret;
            					}
            				}
            			}
HXLINE(6841)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSet node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6845_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(6854)		lambda(node->data);
HXLINE(6855)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,ret) = node->parent;
HXLINE(6856)		if (hx::IsNotNull( ret )) {
HXLINE(6857)			if (hx::IsEq( node,ret->prev )) {
HXLINE(6857)				ret->prev = null();
            			}
            			else {
HXLINE(6858)				ret->next = null();
            			}
HXLINE(6859)			node->parent = null();
            		}
HXLINE(6861)		{
HXLINE(6871)			{
HXLINE(6871)				node->data = null();
HXDLIN(6871)				node->lt = null();
HXDLIN(6871)				node->swapped = null();
            			}
HXLINE(6872)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(6873)			::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = node;
            		}
HXLINE(6878)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_CbSet_obj,clear_node,return )

void ZPP_Set_ZPP_CbSet_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_CbSet negred){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6880___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE(6881)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,parent) = negred->parent;
HXLINE(6882)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,child);
HXDLIN(6882)		if (hx::IsEq( parent->prev,negred )) {
HXLINE(6883)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,nl) = negred->prev;
HXLINE(6884)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,nr) = negred->next;
HXLINE(6885)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,trl) = nr->prev;
HXLINE(6886)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,trr) = nr->next;
HXLINE(6887)			nl->colour = (int)0;
HXLINE(6888)			negred->colour = (parent->colour = (int)1);
HXLINE(6889)			{
HXLINE(6890)				negred->next = trl;
HXLINE(6891)				if (hx::IsNotNull( trl )) {
HXLINE(6891)					trl->parent = negred;
            				}
            			}
HXLINE(6893)			{
HXLINE(6894)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,t) = parent->data;
HXLINE(6895)				parent->data = nr->data;
HXLINE(6896)				nr->data = t;
            			}
HXLINE(6898)			if (hx::IsNotNull( this->swapped )) {
HXLINE(6898)				this->swapped(parent->data,nr->data);
            			}
HXLINE(6899)			{
HXLINE(6900)				nr->prev = trr;
HXLINE(6901)				if (hx::IsNotNull( trr )) {
HXLINE(6901)					trr->parent = nr;
            				}
            			}
HXLINE(6903)			{
HXLINE(6904)				nr->next = parent->next;
HXLINE(6905)				if (hx::IsNotNull( parent->next )) {
HXLINE(6905)					parent->next->parent = nr;
            				}
            			}
HXLINE(6907)			{
HXLINE(6908)				parent->next = nr;
HXLINE(6909)				if (hx::IsNotNull( nr )) {
HXLINE(6909)					nr->parent = parent;
            				}
            			}
HXLINE(6882)			child = nl;
            		}
            		else {
HXLINE(6914)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,nl1,"nl") = negred->next;
HXLINE(6915)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,nr1,"nr") = negred->prev;
HXLINE(6916)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,trl1,"trl") = nr1->next;
HXLINE(6917)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,trr1,"trr") = nr1->prev;
HXLINE(6918)			nl1->colour = (int)0;
HXLINE(6919)			negred->colour = (parent->colour = (int)1);
HXLINE(6920)			{
HXLINE(6921)				negred->prev = trl1;
HXLINE(6922)				if (hx::IsNotNull( trl1 )) {
HXLINE(6922)					trl1->parent = negred;
            				}
            			}
HXLINE(6924)			{
HXLINE(6925)				HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,t1,"t") = parent->data;
HXLINE(6926)				parent->data = nr1->data;
HXLINE(6927)				nr1->data = t1;
            			}
HXLINE(6929)			if (hx::IsNotNull( this->swapped )) {
HXLINE(6929)				this->swapped(parent->data,nr1->data);
            			}
HXLINE(6930)			{
HXLINE(6931)				nr1->next = trr1;
HXLINE(6932)				if (hx::IsNotNull( trr1 )) {
HXLINE(6932)					trr1->parent = nr1;
            				}
            			}
HXLINE(6934)			{
HXLINE(6935)				nr1->prev = parent->prev;
HXLINE(6936)				if (hx::IsNotNull( parent->prev )) {
HXLINE(6936)					parent->prev->parent = nr1;
            				}
            			}
HXLINE(6938)			{
HXLINE(6939)				parent->prev = nr1;
HXLINE(6940)				if (hx::IsNotNull( nr1 )) {
HXLINE(6940)					nr1->parent = parent;
            				}
            			}
HXLINE(6882)			child = nl1;
            		}
HXLINE(6944)		bool _hx_tmp;
HXDLIN(6944)		if (hx::IsNotNull( child->prev )) {
HXLINE(6944)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE(6944)			_hx_tmp = false;
            		}
HXDLIN(6944)		if (_hx_tmp) {
HXLINE(6944)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE(6945)			bool _hx_tmp1;
HXDLIN(6945)			if (hx::IsNotNull( child->next )) {
HXLINE(6945)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE(6945)				_hx_tmp1 = false;
            			}
HXDLIN(6945)			if (_hx_tmp1) {
HXLINE(6945)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_CbSet_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_CbSet x){
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6948___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(6948)		while(true){
HXLINE(6949)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,par) = x->parent;
HXLINE(6950)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,g) = par->parent;
HXLINE(6951)			if (hx::IsNull( g )) {
HXLINE(6952)				par->colour = (int)1;
HXLINE(6953)				goto _hx_goto_52;
            			}
HXLINE(6955)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,n1);
HXDLIN(6955)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,n2);
HXDLIN(6955)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,n3);
HXDLIN(6955)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,t1);
HXDLIN(6955)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,t2);
HXDLIN(6955)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,t3);
HXDLIN(6955)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,t4);
HXLINE(6956)			if (hx::IsEq( par,g->prev )) {
HXLINE(6957)				n3 = g;
HXLINE(6958)				t4 = g->next;
HXLINE(6959)				if (hx::IsEq( x,par->prev )) {
HXLINE(6960)					n1 = x;
HXLINE(6961)					n2 = par;
HXLINE(6962)					t1 = x->prev;
HXLINE(6963)					t2 = x->next;
HXLINE(6964)					t3 = par->next;
            				}
            				else {
HXLINE(6967)					n1 = par;
HXLINE(6968)					n2 = x;
HXLINE(6969)					t1 = par->prev;
HXLINE(6970)					t2 = x->prev;
HXLINE(6971)					t3 = x->next;
            				}
            			}
            			else {
HXLINE(6975)				n1 = g;
HXLINE(6976)				t1 = g->prev;
HXLINE(6977)				if (hx::IsEq( x,par->prev )) {
HXLINE(6978)					n2 = x;
HXLINE(6979)					n3 = par;
HXLINE(6980)					t2 = x->prev;
HXLINE(6981)					t3 = x->next;
HXLINE(6982)					t4 = par->next;
            				}
            				else {
HXLINE(6985)					n2 = par;
HXLINE(6986)					n3 = x;
HXLINE(6987)					t2 = par->prev;
HXLINE(6988)					t3 = x->prev;
HXLINE(6989)					t4 = x->next;
            				}
            			}
HXLINE(6992)			{
HXLINE(6993)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,par1,"par") = g->parent;
HXLINE(6994)				if (hx::IsNull( par1 )) {
HXLINE(6995)					this->parent = n2;
            				}
            				else {
HXLINE(6997)					if (hx::IsEq( par1->prev,g )) {
HXLINE(6997)						par1->prev = n2;
            					}
            					else {
HXLINE(6998)						par1->next = n2;
            					}
            				}
HXLINE(6999)				if (hx::IsNotNull( n2 )) {
HXLINE(6999)					n2->parent = par1;
            				}
            			}
HXLINE(7001)			{
HXLINE(7002)				n1->prev = t1;
HXLINE(7003)				if (hx::IsNotNull( t1 )) {
HXLINE(7003)					t1->parent = n1;
            				}
            			}
HXLINE(7005)			{
HXLINE(7006)				n1->next = t2;
HXLINE(7007)				if (hx::IsNotNull( t2 )) {
HXLINE(7007)					t2->parent = n1;
            				}
            			}
HXLINE(7009)			{
HXLINE(7010)				n2->prev = n1;
HXLINE(7011)				if (hx::IsNotNull( n1 )) {
HXLINE(7011)					n1->parent = n2;
            				}
            			}
HXLINE(7013)			{
HXLINE(7014)				n2->next = n3;
HXLINE(7015)				if (hx::IsNotNull( n3 )) {
HXLINE(7015)					n3->parent = n2;
            				}
            			}
HXLINE(7017)			{
HXLINE(7018)				n3->prev = t3;
HXLINE(7019)				if (hx::IsNotNull( t3 )) {
HXLINE(7019)					t3->parent = n3;
            				}
            			}
HXLINE(7021)			{
HXLINE(7022)				n3->next = t4;
HXLINE(7023)				if (hx::IsNotNull( t4 )) {
HXLINE(7023)					t4->parent = n3;
            				}
            			}
HXLINE(7025)			n2->colour = (g->colour - (int)1);
HXLINE(7026)			n1->colour = (int)1;
HXLINE(7027)			n3->colour = (int)1;
HXLINE(7028)			if (hx::IsEq( n2,this->parent )) {
HXLINE(7028)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE(7029)				bool _hx_tmp;
HXDLIN(7029)				if ((n2->colour == (int)0)) {
HXLINE(7029)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE(7029)					_hx_tmp = false;
            				}
HXDLIN(7029)				if (_hx_tmp) {
HXLINE(7030)					x = n2;
HXLINE(7031)					continue;
            				}
            			}
HXLINE(7033)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_CbSet_obj::try_insert_bool( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_GC_STACKFRAME(&_hx_pos_1507fc751a163ddd_7036_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7037)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,x) = null();
HXLINE(7038)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = null();
HXLINE(7039)		if (hx::IsNull( this->parent )) {
HXLINE(7041)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(7042)				x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(7048)				x = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(7049)				::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = x->next;
HXLINE(7050)				x->next = null();
            			}
HXLINE(7057)			x->data = obj;
HXLINE(7058)			this->parent = x;
            		}
            		else {
HXLINE(7061)			cur = this->parent;
HXLINE(7062)			while(true){
HXLINE(7063)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(7064)					if (hx::IsNull( cur->prev )) {
HXLINE(7066)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(7067)							x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(7073)							x = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(7074)							::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = x->next;
HXLINE(7075)							x->next = null();
            						}
HXLINE(7082)						x->data = obj;
HXLINE(7083)						cur->prev = x;
HXLINE(7084)						x->parent = cur;
HXLINE(7085)						goto _hx_goto_54;
            					}
            					else {
HXLINE(7087)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(7089)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(7090)						if (hx::IsNull( cur->next )) {
HXLINE(7092)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(7093)								x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(7099)								x = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(7100)								::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = x->next;
HXLINE(7101)								x->next = null();
            							}
HXLINE(7108)							x->data = obj;
HXLINE(7109)							cur->next = x;
HXLINE(7110)							x->parent = cur;
HXLINE(7111)							goto _hx_goto_54;
            						}
            						else {
HXLINE(7113)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(7115)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE(7118)		if (hx::IsNull( x )) {
HXLINE(7118)			return false;
            		}
            		else {
HXLINE(7120)			if (hx::IsNull( x->parent )) {
HXLINE(7120)				x->colour = (int)1;
            			}
            			else {
HXLINE(7122)				x->colour = (int)0;
HXLINE(7123)				if ((x->parent->colour == (int)0)) {
HXLINE(7123)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(7125)			return true;
            		}
HXLINE(7118)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::try_insert( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_GC_STACKFRAME(&_hx_pos_1507fc751a163ddd_7128_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7129)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,x) = null();
HXLINE(7130)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = null();
HXLINE(7131)		if (hx::IsNull( this->parent )) {
HXLINE(7133)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(7134)				x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(7140)				x = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(7141)				::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = x->next;
HXLINE(7142)				x->next = null();
            			}
HXLINE(7149)			x->data = obj;
HXLINE(7150)			this->parent = x;
            		}
            		else {
HXLINE(7153)			cur = this->parent;
HXLINE(7154)			while(true){
HXLINE(7155)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(7156)					if (hx::IsNull( cur->prev )) {
HXLINE(7158)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(7159)							x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(7165)							x = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(7166)							::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = x->next;
HXLINE(7167)							x->next = null();
            						}
HXLINE(7174)						x->data = obj;
HXLINE(7175)						cur->prev = x;
HXLINE(7176)						x->parent = cur;
HXLINE(7177)						goto _hx_goto_56;
            					}
            					else {
HXLINE(7179)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(7181)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(7182)						if (hx::IsNull( cur->next )) {
HXLINE(7184)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(7185)								x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(7191)								x = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(7192)								::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = x->next;
HXLINE(7193)								x->next = null();
            							}
HXLINE(7200)							x->data = obj;
HXLINE(7201)							cur->next = x;
HXLINE(7202)							x->parent = cur;
HXLINE(7203)							goto _hx_goto_56;
            						}
            						else {
HXLINE(7205)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(7207)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE(7210)		if (hx::IsNull( x )) {
HXLINE(7210)			return cur;
            		}
            		else {
HXLINE(7212)			if (hx::IsNull( x->parent )) {
HXLINE(7212)				x->colour = (int)1;
            			}
            			else {
HXLINE(7214)				x->colour = (int)0;
HXLINE(7215)				if ((x->parent->colour == (int)0)) {
HXLINE(7215)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(7217)			return x;
            		}
HXLINE(7210)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::insert( ::zpp_nape::callbacks::ZPP_CbSet obj){
            	HX_GC_STACKFRAME(&_hx_pos_1507fc751a163ddd_7220_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7229)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,x);
HXLINE(7231)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(7232)			x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(7238)			x = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(7239)			::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = x->next;
HXLINE(7240)			x->next = null();
            		}
HXLINE(7247)		x->data = obj;
HXLINE(7248)		if (hx::IsNull( this->parent )) {
HXLINE(7248)			this->parent = x;
            		}
            		else {
HXLINE(7250)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,cur) = this->parent;
HXLINE(7251)			while(true){
HXLINE(7252)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(7253)					if (hx::IsNull( cur->prev )) {
HXLINE(7254)						cur->prev = x;
HXLINE(7255)						x->parent = cur;
HXLINE(7256)						goto _hx_goto_58;
            					}
            					else {
HXLINE(7258)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(7261)					if (hx::IsNull( cur->next )) {
HXLINE(7262)						cur->next = x;
HXLINE(7263)						x->parent = cur;
HXLINE(7264)						goto _hx_goto_58;
            					}
            					else {
HXLINE(7266)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(7270)		if (hx::IsNull( x->parent )) {
HXLINE(7270)			x->colour = (int)1;
            		}
            		else {
HXLINE(7272)			x->colour = (int)0;
HXLINE(7273)			if ((x->parent->colour == (int)0)) {
HXLINE(7273)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(7283)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSet_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSet ZPP_Set_ZPP_CbSet_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_CbSet_obj > ZPP_Set_ZPP_CbSet_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_CbSet_obj > __this = new ZPP_Set_ZPP_CbSet_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_CbSet_obj > ZPP_Set_ZPP_CbSet_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_CbSet_obj *__this = (ZPP_Set_ZPP_CbSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_CbSet_obj), true, "zpp_nape.util.ZPP_Set_ZPP_CbSet"));
	*(void **)__this = ZPP_Set_ZPP_CbSet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_CbSet_obj::ZPP_Set_ZPP_CbSet_obj()
{
}

void ZPP_Set_ZPP_CbSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_CbSet);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_CbSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_CbSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_CbSet_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_CbSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSet >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_CbSet_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSet >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_CbSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_CbSet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_CbSet_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_CbSet_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_CbSet*/ ,(int)offsetof(ZPP_Set_ZPP_CbSet_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSet*/ ,(int)offsetof(ZPP_Set_ZPP_CbSet_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSet*/ ,(int)offsetof(ZPP_Set_ZPP_CbSet_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSet*/ ,(int)offsetof(ZPP_Set_ZPP_CbSet_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_CbSet_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_CbSet_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSet*/ ,(void *) &ZPP_Set_ZPP_CbSet_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_CbSet_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_CbSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_CbSet_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_CbSet_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_CbSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_CbSet_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_CbSet_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_CbSet_obj::__mClass;

static ::String ZPP_Set_ZPP_CbSet_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_CbSet_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_CbSet_obj;
	ZPP_Set_ZPP_CbSet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_CbSet","\x71","\x61","\x5e","\x65");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_CbSet_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_CbSet_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_CbSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_CbSet_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_CbSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_CbSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_CbSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_CbSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_CbSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_CbSet_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1507fc751a163ddd_6399_boot)
HXLINE(6399)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
