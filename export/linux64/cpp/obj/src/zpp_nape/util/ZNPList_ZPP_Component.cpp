// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Component
#include <zpp_nape/util/ZNPList_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Component
#include <zpp_nape/util/ZNPNode_ZPP_Component.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10600_new,"zpp_nape.util.ZNPList_ZPP_Component","new",0x6e9253da,"zpp_nape.util.ZNPList_ZPP_Component.new","zpp_nape/util/Lists.hx",10600,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10606_begin,"zpp_nape.util.ZNPList_ZPP_Component","begin",0x0dd7c023,"zpp_nape.util.ZNPList_ZPP_Component.begin","zpp_nape/util/Lists.hx",10606,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10613_setbegin,"zpp_nape.util.ZNPList_ZPP_Component","setbegin",0xe42d858d,"zpp_nape.util.ZNPList_ZPP_Component.setbegin","zpp_nape/util/Lists.hx",10613,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10619_add,"zpp_nape.util.ZNPList_ZPP_Component","add",0x6e88759b,"zpp_nape.util.ZNPList_ZPP_Component.add","zpp_nape/util/Lists.hx",10619,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10623_inlined_add,"zpp_nape.util.ZNPList_ZPP_Component","inlined_add",0xee33da07,"zpp_nape.util.ZNPList_ZPP_Component.inlined_add","zpp_nape/util/Lists.hx",10623,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10669_addAll,"zpp_nape.util.ZNPList_ZPP_Component","addAll",0x13146e46,"zpp_nape.util.ZNPList_ZPP_Component.addAll","zpp_nape/util/Lists.hx",10669,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10679_insert,"zpp_nape.util.ZNPList_ZPP_Component","insert",0x11f6a7ff,"zpp_nape.util.ZNPList_ZPP_Component.insert","zpp_nape/util/Lists.hx",10679,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10683_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Component","inlined_insert",0xcfe4cf13,"zpp_nape.util.ZNPList_ZPP_Component.inlined_insert","zpp_nape/util/Lists.hx",10683,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10727_pop,"zpp_nape.util.ZNPList_ZPP_Component","pop",0x6e93e10b,"zpp_nape.util.ZNPList_ZPP_Component.pop","zpp_nape/util/Lists.hx",10727,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10731_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Component","inlined_pop",0xee3f4577,"zpp_nape.util.ZNPList_ZPP_Component.inlined_pop","zpp_nape/util/Lists.hx",10731,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10765_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Component","pop_unsafe",0x7ddebc1a,"zpp_nape.util.ZNPList_ZPP_Component.pop_unsafe","zpp_nape/util/Lists.hx",10765,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10769_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Component","inlined_pop_unsafe",0xef6ffd2e,"zpp_nape.util.ZNPList_ZPP_Component.inlined_pop_unsafe","zpp_nape/util/Lists.hx",10769,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10791_remove,"zpp_nape.util.ZNPList_ZPP_Component","remove",0x78a2010a,"zpp_nape.util.ZNPList_ZPP_Component.remove","zpp_nape/util/Lists.hx",10791,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10793_try_remove,"zpp_nape.util.ZNPList_ZPP_Component","try_remove",0x9508f1ce,"zpp_nape.util.ZNPList_ZPP_Component.try_remove","zpp_nape/util/Lists.hx",10793,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10827_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Component","inlined_remove",0x3690281e,"zpp_nape.util.ZNPList_ZPP_Component.inlined_remove","zpp_nape/util/Lists.hx",10827,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10831_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Component","inlined_try_remove",0x069a32e2,"zpp_nape.util.ZNPList_ZPP_Component.inlined_try_remove","zpp_nape/util/Lists.hx",10831,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10855_erase,"zpp_nape.util.ZNPList_ZPP_Component","erase",0xd09ebee0,"zpp_nape.util.ZNPList_ZPP_Component.erase","zpp_nape/util/Lists.hx",10855,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10859_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Component","inlined_erase",0x1d3d164c,"zpp_nape.util.ZNPList_ZPP_Component.inlined_erase","zpp_nape/util/Lists.hx",10859,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10905_splice,"zpp_nape.util.ZNPList_ZPP_Component","splice",0x33b7ea42,"zpp_nape.util.ZNPList_ZPP_Component.splice","zpp_nape/util/Lists.hx",10905,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10910_clear,"zpp_nape.util.ZNPList_ZPP_Component","clear",0xa5dd4787,"zpp_nape.util.ZNPList_ZPP_Component.clear","zpp_nape/util/Lists.hx",10910,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10915_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Component","inlined_clear",0xf27b9ef3,"zpp_nape.util.ZNPList_ZPP_Component.inlined_clear","zpp_nape/util/Lists.hx",10915,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10920_reverse,"zpp_nape.util.ZNPList_ZPP_Component","reverse",0x3d1b019c,"zpp_nape.util.ZNPList_ZPP_Component.reverse","zpp_nape/util/Lists.hx",10920,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10936_empty,"zpp_nape.util.ZNPList_ZPP_Component","empty",0xcd5c1087,"zpp_nape.util.ZNPList_ZPP_Component.empty","zpp_nape/util/Lists.hx",10936,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10941_size,"zpp_nape.util.ZNPList_ZPP_Component","size",0x54c82807,"zpp_nape.util.ZNPList_ZPP_Component.size","zpp_nape/util/Lists.hx",10941,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10944_has,"zpp_nape.util.ZNPList_ZPP_Component","has",0x6e8dc2d4,"zpp_nape.util.ZNPList_ZPP_Component.has","zpp_nape/util/Lists.hx",10944,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10948_inlined_has,"zpp_nape.util.ZNPList_ZPP_Component","inlined_has",0xee392740,"zpp_nape.util.ZNPList_ZPP_Component.inlined_has","zpp_nape/util/Lists.hx",10948,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10979_front,"zpp_nape.util.ZNPList_ZPP_Component","front",0x640feea3,"zpp_nape.util.ZNPList_ZPP_Component.front","zpp_nape/util/Lists.hx",10979,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10981_back,"zpp_nape.util.ZNPList_ZPP_Component","back",0x4985616d,"zpp_nape.util.ZNPList_ZPP_Component.back","zpp_nape/util/Lists.hx",10981,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_10990_iterator_at,"zpp_nape.util.ZNPList_ZPP_Component","iterator_at",0xf2d8175e,"zpp_nape.util.ZNPList_ZPP_Component.iterator_at","zpp_nape/util/Lists.hx",10990,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6873cd78dbcb2ecc_11003_at,"zpp_nape.util.ZNPList_ZPP_Component","at",0xca8a5eb9,"zpp_nape.util.ZNPList_ZPP_Component.at","zpp_nape/util/Lists.hx",11003,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Component_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10600_new)
            	HX_STACK_THIS(this)
HXLINE(10610)		this->length = (int)0;
HXLINE(10609)		this->pushmod = false;
HXLINE(10608)		this->modified = false;
HXLINE(10601)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Component_obj::__CreateEmpty() { return new ZNPList_ZPP_Component_obj; }

void *ZNPList_ZPP_Component_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Component_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Component_obj > _hx_result = new ZNPList_ZPP_Component_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Component_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x52f12424;
}

 ::zpp_nape::util::ZNPNode_ZPP_Component ZNPList_ZPP_Component_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10606_begin)
            	HX_STACK_THIS(this)
HXLINE(10606)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,begin,return )

void ZNPList_ZPP_Component_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Component i){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10613_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(10614)		this->head = i;
HXLINE(10615)		this->modified = true;
HXLINE(10616)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,setbegin,(void))

 ::zpp_nape::space::ZPP_Component ZNPList_ZPP_Component_obj::add( ::zpp_nape::space::ZPP_Component o){
            	HX_GC_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10619_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(10619)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXDLIN(10619)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool )) {
HXLINE(10619)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10619)			ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10619)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
HXDLIN(10619)			ret->next = null();
            		}
HXDLIN(10619)		ret->elt = o;
HXDLIN(10619)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,temp) = ret;
HXDLIN(10619)		temp->next = this->head;
HXDLIN(10619)		this->head = temp;
HXDLIN(10619)		this->modified = true;
HXDLIN(10619)		this->length++;
HXDLIN(10619)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,add,return )

 ::zpp_nape::space::ZPP_Component ZNPList_ZPP_Component_obj::inlined_add( ::zpp_nape::space::ZPP_Component o){
            	HX_GC_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10623_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(10633)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXLINE(10635)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool )) {
HXLINE(10636)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10642)			ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXLINE(10643)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
HXLINE(10644)			ret->next = null();
            		}
HXLINE(10651)		ret->elt = o;
HXLINE(10632)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,temp) = ret;
HXLINE(10654)		temp->next = this->head;
HXLINE(10655)		this->head = temp;
HXLINE(10656)		this->modified = true;
HXLINE(10657)		this->length++;
HXLINE(10658)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,inlined_add,return )

void ZNPList_ZPP_Component_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Component x){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10669_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(10670)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cx_ite) = x->head;
HXLINE(10671)		while(hx::IsNotNull( cx_ite )){
HXLINE(10673)			this->add(cx_ite->elt);
HXLINE(10674)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Component ZNPList_ZPP_Component_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Component cur, ::zpp_nape::space::ZPP_Component o){
            	HX_GC_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10679_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(10679)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXDLIN(10679)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool )) {
HXLINE(10679)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10679)			ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10679)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
HXDLIN(10679)			ret->next = null();
            		}
HXDLIN(10679)		ret->elt = o;
HXDLIN(10679)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,temp) = ret;
HXDLIN(10679)		if (hx::IsNull( cur )) {
HXLINE(10679)			temp->next = this->head;
HXDLIN(10679)			this->head = temp;
            		}
            		else {
HXLINE(10679)			temp->next = cur->next;
HXDLIN(10679)			cur->next = temp;
            		}
HXDLIN(10679)		this->pushmod = (this->modified = true);
HXDLIN(10679)		this->length++;
HXDLIN(10679)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Component_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Component ZNPList_ZPP_Component_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Component cur, ::zpp_nape::space::ZPP_Component o){
            	HX_GC_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10683_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(10693)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXLINE(10695)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool )) {
HXLINE(10696)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10702)			ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXLINE(10703)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
HXLINE(10704)			ret->next = null();
            		}
HXLINE(10711)		ret->elt = o;
HXLINE(10692)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,temp) = ret;
HXLINE(10714)		if (hx::IsNull( cur )) {
HXLINE(10715)			temp->next = this->head;
HXLINE(10716)			this->head = temp;
            		}
            		else {
HXLINE(10719)			temp->next = cur->next;
HXLINE(10720)			cur->next = temp;
            		}
HXLINE(10722)		this->pushmod = (this->modified = true);
HXLINE(10723)		this->length++;
HXLINE(10724)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Component_obj,inlined_insert,return )

void ZNPList_ZPP_Component_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10727_pop)
            	HX_STACK_THIS(this)
HXLINE(10727)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret) = this->head;
HXDLIN(10727)		this->head = ret->next;
HXDLIN(10727)		{
HXLINE(10727)			ret->elt = null();
HXDLIN(10727)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10727)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret;
            		}
HXDLIN(10727)		if (hx::IsNull( this->head )) {
HXLINE(10727)			this->pushmod = true;
            		}
HXDLIN(10727)		this->modified = true;
HXDLIN(10727)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,pop,(void))

void ZNPList_ZPP_Component_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10731_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(10740)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret) = this->head;
HXLINE(10741)		this->head = ret->next;
HXLINE(10743)		{
HXLINE(10753)			ret->elt = null();
HXLINE(10754)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXLINE(10755)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret;
            		}
HXLINE(10760)		if (hx::IsNull( this->head )) {
HXLINE(10760)			this->pushmod = true;
            		}
HXLINE(10761)		this->modified = true;
HXLINE(10762)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,inlined_pop,(void))

 ::zpp_nape::space::ZPP_Component ZNPList_ZPP_Component_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10765_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(10765)		HX_VARI(  ::zpp_nape::space::ZPP_Component,ret) = this->head->elt;
HXDLIN(10765)		this->pop();
HXDLIN(10765)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,pop_unsafe,return )

 ::zpp_nape::space::ZPP_Component ZNPList_ZPP_Component_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10769_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(10778)		HX_VARI(  ::zpp_nape::space::ZPP_Component,ret) = this->head->elt;
HXLINE(10779)		this->pop();
HXLINE(10780)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Component_obj::remove( ::zpp_nape::space::ZPP_Component obj){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10791_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10791)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,pre) = null();
HXDLIN(10791)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cur) = this->head;
HXDLIN(10791)		while(hx::IsNotNull( cur )){
HXLINE(10791)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10791)				{
HXLINE(10791)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,old);
HXDLIN(10791)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXDLIN(10791)					if (hx::IsNull( pre )) {
HXLINE(10791)						old = this->head;
HXDLIN(10791)						ret = old->next;
HXDLIN(10791)						this->head = ret;
HXDLIN(10791)						if (hx::IsNull( this->head )) {
HXLINE(10791)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(10791)						old = pre->next;
HXDLIN(10791)						ret = old->next;
HXDLIN(10791)						pre->next = ret;
HXDLIN(10791)						if (hx::IsNull( ret )) {
HXLINE(10791)							this->pushmod = true;
            						}
            					}
HXDLIN(10791)					{
HXLINE(10791)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,o) = old;
HXDLIN(10791)						o->elt = null();
HXDLIN(10791)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10791)						::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = o;
            					}
HXDLIN(10791)					this->modified = true;
HXDLIN(10791)					this->length--;
HXDLIN(10791)					this->pushmod = true;
            				}
HXDLIN(10791)				goto _hx_goto_13;
            			}
HXDLIN(10791)			pre = cur;
HXDLIN(10791)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,remove,(void))

bool ZNPList_ZPP_Component_obj::try_remove( ::zpp_nape::space::ZPP_Component obj){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10793_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10802)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,pre) = null();
HXLINE(10803)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cur) = this->head;
HXLINE(10804)		HX_VARI( bool,ret) = false;
HXLINE(10805)		while(hx::IsNotNull( cur )){
HXLINE(10806)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10807)				this->erase(pre);
HXLINE(10808)				ret = true;
HXLINE(10809)				goto _hx_goto_15;
            			}
HXLINE(10811)			pre = cur;
HXLINE(10812)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(10814)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,try_remove,return )

void ZNPList_ZPP_Component_obj::inlined_remove( ::zpp_nape::space::ZPP_Component obj){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10827_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10827)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,pre) = null();
HXDLIN(10827)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cur) = this->head;
HXDLIN(10827)		while(hx::IsNotNull( cur )){
HXLINE(10827)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10827)				{
HXLINE(10827)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,old);
HXDLIN(10827)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXDLIN(10827)					if (hx::IsNull( pre )) {
HXLINE(10827)						old = this->head;
HXDLIN(10827)						ret = old->next;
HXDLIN(10827)						this->head = ret;
HXDLIN(10827)						if (hx::IsNull( this->head )) {
HXLINE(10827)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(10827)						old = pre->next;
HXDLIN(10827)						ret = old->next;
HXDLIN(10827)						pre->next = ret;
HXDLIN(10827)						if (hx::IsNull( ret )) {
HXLINE(10827)							this->pushmod = true;
            						}
            					}
HXDLIN(10827)					{
HXLINE(10827)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,o) = old;
HXDLIN(10827)						o->elt = null();
HXDLIN(10827)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10827)						::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = o;
            					}
HXDLIN(10827)					this->modified = true;
HXDLIN(10827)					this->length--;
HXDLIN(10827)					this->pushmod = true;
            				}
HXDLIN(10827)				goto _hx_goto_17;
            			}
HXDLIN(10827)			pre = cur;
HXDLIN(10827)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,inlined_remove,(void))

bool ZNPList_ZPP_Component_obj::inlined_try_remove( ::zpp_nape::space::ZPP_Component obj){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10831_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10840)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,pre) = null();
HXLINE(10841)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cur) = this->head;
HXLINE(10842)		HX_VARI( bool,ret) = false;
HXLINE(10843)		while(hx::IsNotNull( cur )){
HXLINE(10844)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10845)				{
HXLINE(10845)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,old);
HXDLIN(10845)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret1,"ret");
HXDLIN(10845)					if (hx::IsNull( pre )) {
HXLINE(10845)						old = this->head;
HXDLIN(10845)						ret1 = old->next;
HXDLIN(10845)						this->head = ret1;
HXDLIN(10845)						if (hx::IsNull( this->head )) {
HXLINE(10845)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(10845)						old = pre->next;
HXDLIN(10845)						ret1 = old->next;
HXDLIN(10845)						pre->next = ret1;
HXDLIN(10845)						if (hx::IsNull( ret1 )) {
HXLINE(10845)							this->pushmod = true;
            						}
            					}
HXDLIN(10845)					{
HXLINE(10845)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,o) = old;
HXDLIN(10845)						o->elt = null();
HXDLIN(10845)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10845)						::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = o;
            					}
HXDLIN(10845)					this->modified = true;
HXDLIN(10845)					this->length--;
HXDLIN(10845)					this->pushmod = true;
            				}
HXLINE(10846)				ret = true;
HXLINE(10847)				goto _hx_goto_19;
            			}
HXLINE(10849)			pre = cur;
HXLINE(10850)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(10852)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Component ZNPList_ZPP_Component_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Component pre){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10855_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(10855)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,old);
HXDLIN(10855)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXDLIN(10855)		if (hx::IsNull( pre )) {
HXLINE(10855)			old = this->head;
HXDLIN(10855)			ret = old->next;
HXDLIN(10855)			this->head = ret;
HXDLIN(10855)			if (hx::IsNull( this->head )) {
HXLINE(10855)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(10855)			old = pre->next;
HXDLIN(10855)			ret = old->next;
HXDLIN(10855)			pre->next = ret;
HXDLIN(10855)			if (hx::IsNull( ret )) {
HXLINE(10855)				this->pushmod = true;
            			}
            		}
HXDLIN(10855)		{
HXLINE(10855)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,o) = old;
HXDLIN(10855)			o->elt = null();
HXDLIN(10855)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10855)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = o;
            		}
HXDLIN(10855)		this->modified = true;
HXDLIN(10855)		this->length--;
HXDLIN(10855)		this->pushmod = true;
HXDLIN(10855)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Component ZNPList_ZPP_Component_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Component pre){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10859_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(10868)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,old);
HXLINE(10869)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret);
HXLINE(10870)		if (hx::IsNull( pre )) {
HXLINE(10871)			old = this->head;
HXLINE(10872)			ret = old->next;
HXLINE(10873)			this->head = ret;
HXLINE(10874)			if (hx::IsNull( this->head )) {
HXLINE(10874)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(10877)			old = pre->next;
HXLINE(10878)			ret = old->next;
HXLINE(10879)			pre->next = ret;
HXLINE(10880)			if (hx::IsNull( ret )) {
HXLINE(10880)				this->pushmod = true;
            			}
            		}
HXLINE(10883)		{
HXLINE(10884)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,o) = old;
HXLINE(10893)			o->elt = null();
HXLINE(10894)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXLINE(10895)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = o;
            		}
HXLINE(10900)		this->modified = true;
HXLINE(10901)		this->length--;
HXLINE(10902)		this->pushmod = true;
HXLINE(10903)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Component ZNPList_ZPP_Component_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Component pre,int n){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10905_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(10906)		while(true){
HXLINE(10906)			bool _hx_tmp;
HXDLIN(10906)			n = (n - (int)1);
HXDLIN(10906)			if (((n + (int)1) > (int)0)) {
HXLINE(10906)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(10906)				_hx_tmp = false;
            			}
HXDLIN(10906)			if (!(_hx_tmp)) {
HXLINE(10906)				goto _hx_goto_23;
            			}
HXDLIN(10906)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(10907)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Component_obj,splice,return )

void ZNPList_ZPP_Component_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10910_clear)
            	HX_STACK_THIS(this)
HXLINE(10910)		while(hx::IsNotNull( this->head )){
HXLINE(10910)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret) = this->head;
HXDLIN(10910)			this->head = ret->next;
HXDLIN(10910)			{
HXLINE(10910)				ret->elt = null();
HXDLIN(10910)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10910)				::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret;
            			}
HXDLIN(10910)			if (hx::IsNull( this->head )) {
HXLINE(10910)				this->pushmod = true;
            			}
HXDLIN(10910)			this->modified = true;
HXDLIN(10910)			this->length--;
            		}
HXDLIN(10910)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,clear,(void))

void ZNPList_ZPP_Component_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10915_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(10916)		while(hx::IsNotNull( this->head )){
HXLINE(10916)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret) = this->head;
HXDLIN(10916)			this->head = ret->next;
HXDLIN(10916)			{
HXLINE(10916)				ret->elt = null();
HXDLIN(10916)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
HXDLIN(10916)				::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret;
            			}
HXDLIN(10916)			if (hx::IsNull( this->head )) {
HXLINE(10916)				this->pushmod = true;
            			}
HXDLIN(10916)			this->modified = true;
HXDLIN(10916)			this->length--;
            		}
HXLINE(10917)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,inlined_clear,(void))

void ZNPList_ZPP_Component_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10920_reverse)
            	HX_STACK_THIS(this)
HXLINE(10921)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cur) = this->head;
HXLINE(10922)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,pre) = null();
HXLINE(10923)		while(hx::IsNotNull( cur )){
HXLINE(10924)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,nx) = cur->next;
HXLINE(10925)			cur->next = pre;
HXLINE(10926)			this->head = cur;
HXLINE(10927)			pre = cur;
HXLINE(10928)			cur = nx;
            		}
HXLINE(10930)		this->modified = true;
HXLINE(10931)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,reverse,(void))

bool ZNPList_ZPP_Component_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10936_empty)
            	HX_STACK_THIS(this)
HXLINE(10936)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,empty,return )

int ZNPList_ZPP_Component_obj::size(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10941_size)
            	HX_STACK_THIS(this)
HXLINE(10941)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,size,return )

bool ZNPList_ZPP_Component_obj::has( ::zpp_nape::space::ZPP_Component obj){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10944_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10944)		HX_VAR( bool,ret);
HXDLIN(10944)		{
HXLINE(10944)			ret = false;
HXDLIN(10944)			{
HXLINE(10944)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cx_ite) = this->head;
HXDLIN(10944)				while(hx::IsNotNull( cx_ite )){
HXLINE(10944)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(10944)						ret = true;
HXDLIN(10944)						goto _hx_goto_33;
            					}
HXDLIN(10944)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(10944)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,has,return )

bool ZNPList_ZPP_Component_obj::inlined_has( ::zpp_nape::space::ZPP_Component obj){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10948_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10957)		HX_VAR( bool,ret);
HXLINE(10958)		{
HXLINE(10959)			ret = false;
HXLINE(10960)			{
HXLINE(10961)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cx_ite) = this->head;
HXLINE(10962)				while(hx::IsNotNull( cx_ite )){
HXLINE(10965)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(10966)						ret = true;
HXLINE(10967)						goto _hx_goto_35;
            					}
HXLINE(10970)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(10974)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,inlined_has,return )

 ::zpp_nape::space::ZPP_Component ZNPList_ZPP_Component_obj::front(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10979_front)
            	HX_STACK_THIS(this)
HXLINE(10979)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,front,return )

 ::zpp_nape::space::ZPP_Component ZNPList_ZPP_Component_obj::back(){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10981_back)
            	HX_STACK_THIS(this)
HXLINE(10982)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret) = this->head;
HXLINE(10983)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,cur) = ret;
HXLINE(10984)		while(hx::IsNotNull( cur )){
HXLINE(10985)			ret = cur;
HXLINE(10986)			cur = cur->next;
            		}
HXLINE(10988)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Component_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Component ZNPList_ZPP_Component_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_10990_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(10999)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,ret) = this->head;
HXLINE(11000)		while(true){
HXLINE(11000)			bool _hx_tmp;
HXDLIN(11000)			ind = (ind - (int)1);
HXDLIN(11000)			if (((ind + (int)1) > (int)0)) {
HXLINE(11000)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(11000)				_hx_tmp = false;
            			}
HXDLIN(11000)			if (!(_hx_tmp)) {
HXLINE(11000)				goto _hx_goto_40;
            			}
HXDLIN(11000)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(11001)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,iterator_at,return )

 ::zpp_nape::space::ZPP_Component ZNPList_ZPP_Component_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_6873cd78dbcb2ecc_11003_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(11012)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Component,it) = this->iterator_at(ind);
HXLINE(11013)		if (hx::IsNotNull( it )) {
HXLINE(11013)			return it->elt;
            		}
            		else {
HXLINE(11013)			return null();
            		}
HXDLIN(11013)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Component_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Component_obj > ZNPList_ZPP_Component_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Component_obj > __this = new ZNPList_ZPP_Component_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Component_obj > ZNPList_ZPP_Component_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Component_obj *__this = (ZNPList_ZPP_Component_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Component_obj), true, "zpp_nape.util.ZNPList_ZPP_Component"));
	*(void **)__this = ZNPList_ZPP_Component_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Component_obj::ZNPList_ZPP_Component_obj()
{
}

void ZNPList_ZPP_Component_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Component);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Component_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Component_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Component_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Component >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Component_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Component_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_Component*/ ,(int)offsetof(ZNPList_ZPP_Component_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Component_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Component_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Component_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Component_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Component_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_Component_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_Component_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_Component_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_Component_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_Component_obj::__mClass;

void ZNPList_ZPP_Component_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_Component_obj;
	ZNPList_ZPP_Component_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_Component","\xe8","\x1e","\xf9","\x44");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_Component_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Component_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Component_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_Component_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Component_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Component_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
