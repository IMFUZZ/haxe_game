// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleEvent
#include <zpp_nape/geom/ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleEvent
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5509_new,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","new",0x161d0028,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.new","zpp_nape/util/RBTree.hx",5509,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5536_free,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","free",0x3e033be4,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.free","zpp_nape/util/RBTree.hx",5536,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5543_alloc,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","alloc",0x1fde563d,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.alloc","zpp_nape/util/RBTree.hx",5543,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5552_verify,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","verify",0x245060b1,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.verify","zpp_nape/util/RBTree.hx",5552,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5618_empty,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","empty",0x6e24ec55,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.empty","zpp_nape/util/RBTree.hx",5618,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5621_singular,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","singular",0x6613440f,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.singular","zpp_nape/util/RBTree.hx",5621,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5623_size,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","size",0x46943ff9,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.size","zpp_nape/util/RBTree.hx",5623,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5654_has,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","has",0x16186f22,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.has","zpp_nape/util/RBTree.hx",5654,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5656_find,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","find",0x3dfc6f71,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.find","zpp_nape/util/RBTree.hx",5656,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5665_has_weak,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","has_weak",0x0a1dedf5,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.has_weak","zpp_nape/util/RBTree.hx",5665,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5667_find_weak,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","find_weak",0x5deb6f46,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.find_weak","zpp_nape/util/RBTree.hx",5667,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5677_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","lower_bound",0x3a5b2008,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.lower_bound","zpp_nape/util/RBTree.hx",5677,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5713_first,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","first",0xfee829f8,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.first","zpp_nape/util/RBTree.hx",5713,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5726_pop_front,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","pop_front",0x4a71f603,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.pop_front","zpp_nape/util/RBTree.hx",5726,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5751_remove,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","remove",0x8799797c,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.remove","zpp_nape/util/RBTree.hx",5751,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5753_successor_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","successor_node",0x217b03b3,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.successor_node","zpp_nape/util/RBTree.hx",5753,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5776_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","predecessor_node",0x659fd9b0,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.predecessor_node","zpp_nape/util/RBTree.hx",5776,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5799_successor,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","successor",0x0490f36e,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.successor","zpp_nape/util/RBTree.hx",5799,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5811_predecessor,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","predecessor",0xaa35de91,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.predecessor","zpp_nape/util/RBTree.hx",5811,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5823_remove_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","remove_node",0x0ccbcae5,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.remove_node","zpp_nape/util/RBTree.hx",5823,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5944_clear,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","clear",0x46a62355,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.clear","zpp_nape/util/RBTree.hx",5944,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5948_clear_with,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","clear_with",0x5b9a3a70,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.clear_with","zpp_nape/util/RBTree.hx",5948,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5956_clear_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","clear_node",0x55abce6c,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.clear_node","zpp_nape/util/RBTree.hx",5956,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5991___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","__fix_neg_red",0x76adc9a0,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.__fix_neg_red","zpp_nape/util/RBTree.hx",5991,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_6059___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","__fix_dbl_red",0x84c5f77e,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.__fix_dbl_red","zpp_nape/util/RBTree.hx",6059,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_6147_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","try_insert_bool",0x2ea24db4,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.try_insert_bool","zpp_nape/util/RBTree.hx",6147,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_6239_try_insert,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","try_insert",0x3e1f3235,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.try_insert","zpp_nape/util/RBTree.hx",6239,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_6331_insert,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","insert",0x20ee2071,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.insert","zpp_nape/util/RBTree.hx",6331,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_096a7ddc94217268_5510_boot,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","boot",0x3b5c236a,"zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.boot","zpp_nape/util/RBTree.hx",5510,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_SimpleEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5509_new)
            	HX_STACK_THIS(this)
HXLINE(5550)		this->colour = (int)0;
HXLINE(5549)		this->parent = null();
HXLINE(5548)		this->next = null();
HXLINE(5547)		this->prev = null();
HXLINE(5546)		this->data = null();
HXLINE(5545)		this->swapped = null();
HXLINE(5544)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_SimpleEvent_obj::__CreateEmpty() { return new ZPP_Set_ZPP_SimpleEvent_obj; }

void *ZPP_Set_ZPP_SimpleEvent_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_SimpleEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_SimpleEvent_obj > _hx_result = new ZPP_Set_ZPP_SimpleEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_SimpleEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a9864c6;
}

void ZPP_Set_ZPP_SimpleEvent_obj::free(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5536_free)
            	HX_STACK_THIS(this)
HXLINE(5537)		this->data = null();
HXLINE(5538)		this->lt = null();
HXLINE(5539)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,free,(void))

void ZPP_Set_ZPP_SimpleEvent_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5543_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,alloc,(void))

bool ZPP_Set_ZPP_SimpleEvent_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5552_verify)
            	HX_STACK_THIS(this)
HXLINE(5562)		if (!(this->empty())) {
HXLINE(5563)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,set_ite) = this->parent;
HXLINE(5564)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(5564)				set_ite = set_ite->prev;
            			}
HXLINE(5565)			while(hx::IsNotNull( set_ite )){
HXLINE(5566)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,i) = set_ite->data;
HXLINE(5567)				{
HXLINE(5568)					HX_VARI( bool,prei) = true;
HXLINE(5578)					if (!(this->empty())) {
HXLINE(5579)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,set_ite1,"set_ite") = this->parent;
HXLINE(5580)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE(5580)							set_ite1 = set_ite1->prev;
            						}
HXLINE(5581)						while(hx::IsNotNull( set_ite1 )){
HXLINE(5582)							HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,j) = set_ite1->data;
HXLINE(5584)							if (!(prei)) {
HXLINE(5585)								bool _hx_tmp;
HXDLIN(5585)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE(5585)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE(5585)									_hx_tmp = false;
            								}
HXDLIN(5585)								if (_hx_tmp) {
HXLINE(5585)									return false;
            								}
            							}
            							else {
HXLINE(5587)								if (hx::IsEq( i,j )) {
HXLINE(5587)									prei = false;
            								}
            								else {
HXLINE(5589)									bool _hx_tmp1;
HXDLIN(5589)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE(5589)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE(5589)										_hx_tmp1 = false;
            									}
HXDLIN(5589)									if (_hx_tmp1) {
HXLINE(5589)										return false;
            									}
            								}
            							}
HXLINE(5592)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE(5593)								set_ite1 = set_ite1->next;
HXLINE(5594)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE(5594)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE(5597)								while(true){
HXLINE(5597)									bool _hx_tmp2;
HXDLIN(5597)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE(5597)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE(5597)										_hx_tmp2 = false;
            									}
HXDLIN(5597)									if (!(_hx_tmp2)) {
HXLINE(5597)										goto _hx_goto_8;
            									}
HXDLIN(5597)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE(5598)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE(5604)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(5605)					set_ite = set_ite->next;
HXLINE(5606)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(5606)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(5609)					while(true){
HXLINE(5609)						bool _hx_tmp3;
HXDLIN(5609)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(5609)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(5609)							_hx_tmp3 = false;
            						}
HXDLIN(5609)						if (!(_hx_tmp3)) {
HXLINE(5609)							goto _hx_goto_10;
            						}
HXDLIN(5609)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE(5610)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(5615)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,verify,return )

bool ZPP_Set_ZPP_SimpleEvent_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5618_empty)
            	HX_STACK_THIS(this)
HXLINE(5618)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,empty,return )

bool ZPP_Set_ZPP_SimpleEvent_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5621_singular)
            	HX_STACK_THIS(this)
HXLINE(5621)		bool _hx_tmp;
HXDLIN(5621)		if (hx::IsNotNull( this->parent )) {
HXLINE(5621)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE(5621)			_hx_tmp = false;
            		}
HXDLIN(5621)		if (_hx_tmp) {
HXLINE(5621)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE(5621)			return false;
            		}
HXDLIN(5621)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,singular,return )

int ZPP_Set_ZPP_SimpleEvent_obj::size(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5623_size)
            	HX_STACK_THIS(this)
HXLINE(5624)		HX_VARI( int,ret) = (int)0;
HXLINE(5634)		if (!(this->empty())) {
HXLINE(5635)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,set_ite) = this->parent;
HXLINE(5636)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(5636)				set_ite = set_ite->prev;
            			}
HXLINE(5637)			while(hx::IsNotNull( set_ite )){
HXLINE(5639)				ret = (ret + (int)1);
HXLINE(5640)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(5641)					set_ite = set_ite->next;
HXLINE(5642)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(5642)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(5645)					while(true){
HXLINE(5645)						bool _hx_tmp;
HXDLIN(5645)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(5645)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(5645)							_hx_tmp = false;
            						}
HXDLIN(5645)						if (!(_hx_tmp)) {
HXLINE(5645)							goto _hx_goto_17;
            						}
HXDLIN(5645)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE(5646)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(5651)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,size,return )

bool ZPP_Set_ZPP_SimpleEvent_obj::has( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5654_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5654)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::find( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5656_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5657)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = this->parent;
HXLINE(5658)		while(true){
HXLINE(5658)			bool _hx_tmp;
HXDLIN(5658)			if (hx::IsNotNull( cur )) {
HXLINE(5658)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE(5658)				_hx_tmp = false;
            			}
HXDLIN(5658)			if (!(_hx_tmp)) {
HXLINE(5658)				goto _hx_goto_20;
            			}
HXLINE(5659)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(5659)				cur = cur->prev;
            			}
            			else {
HXLINE(5660)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE(5662)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,find,return )

bool ZPP_Set_ZPP_SimpleEvent_obj::has_weak( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5665_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5665)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::find_weak( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5667_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5668)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = this->parent;
HXLINE(5669)		while(hx::IsNotNull( cur )){
HXLINE(5670)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(5670)				cur = cur->prev;
            			}
            			else {
HXLINE(5671)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(5671)					cur = cur->next;
            				}
            				else {
HXLINE(5672)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE(5674)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,find_weak,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::lower_bound( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5677_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5678)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,ret) = null();
HXLINE(5688)		if (!(this->empty())) {
HXLINE(5689)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,set_ite) = this->parent;
HXLINE(5690)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(5690)				set_ite = set_ite->prev;
            			}
HXLINE(5691)			while(hx::IsNotNull( set_ite )){
HXLINE(5692)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,elt) = set_ite->data;
HXLINE(5694)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE(5695)					ret = elt;
HXLINE(5696)					goto _hx_goto_26;
            				}
HXLINE(5699)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(5700)					set_ite = set_ite->next;
HXLINE(5701)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(5701)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(5704)					while(true){
HXLINE(5704)						bool _hx_tmp;
HXDLIN(5704)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(5704)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(5704)							_hx_tmp = false;
            						}
HXDLIN(5704)						if (!(_hx_tmp)) {
HXLINE(5704)							goto _hx_goto_28;
            						}
HXDLIN(5704)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE(5705)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE(5677)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,lower_bound,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::first(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5713_first)
            	HX_STACK_THIS(this)
HXLINE(5722)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = this->parent;
HXLINE(5723)		while(hx::IsNotNull( cur->prev )){
HXLINE(5723)			cur = cur->prev;
            		}
HXLINE(5724)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,first,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5726_pop_front)
            	HX_STACK_THIS(this)
HXLINE(5735)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = this->parent;
HXLINE(5736)		while(hx::IsNotNull( cur->prev )){
HXLINE(5736)			cur = cur->prev;
            		}
HXLINE(5737)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,ret) = cur->data;
HXLINE(5738)		this->remove_node(cur);
HXLINE(5739)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,pop_front,return )

void ZPP_Set_ZPP_SimpleEvent_obj::remove( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5751_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5751)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent cur){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5753_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(5762)		if (hx::IsNotNull( cur->next )) {
HXLINE(5763)			cur = cur->next;
HXLINE(5764)			while(hx::IsNotNull( cur->prev )){
HXLINE(5764)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE(5767)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,pre) = cur;
HXLINE(5768)			cur = cur->parent;
HXLINE(5769)			while(true){
HXLINE(5769)				bool _hx_tmp;
HXDLIN(5769)				if (hx::IsNotNull( cur )) {
HXLINE(5769)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE(5769)					_hx_tmp = false;
            				}
HXDLIN(5769)				if (!(_hx_tmp)) {
HXLINE(5769)					goto _hx_goto_36;
            				}
HXLINE(5770)				pre = cur;
HXLINE(5771)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE(5774)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent cur){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5776_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(5785)		if (hx::IsNotNull( cur->prev )) {
HXLINE(5786)			cur = cur->prev;
HXLINE(5787)			while(hx::IsNotNull( cur->next )){
HXLINE(5787)				cur = cur->next;
            			}
            		}
            		else {
HXLINE(5790)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,pre) = cur;
HXLINE(5791)			cur = cur->parent;
HXLINE(5792)			while(true){
HXLINE(5792)				bool _hx_tmp;
HXDLIN(5792)				if (hx::IsNotNull( cur )) {
HXLINE(5792)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE(5792)					_hx_tmp = false;
            				}
HXDLIN(5792)				if (!(_hx_tmp)) {
HXLINE(5792)					goto _hx_goto_39;
            				}
HXLINE(5793)				pre = cur;
HXLINE(5794)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE(5797)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,predecessor_node,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::successor( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5799_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5808)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,node) = this->successor_node(this->find(obj));
HXLINE(5809)		if (hx::IsNull( node )) {
HXLINE(5809)			return null();
            		}
            		else {
HXLINE(5809)			return node->data;
            		}
HXDLIN(5809)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,successor,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::predecessor( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5811_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5820)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,node) = this->predecessor_node(this->find(obj));
HXLINE(5821)		if (hx::IsNull( node )) {
HXLINE(5821)			return null();
            		}
            		else {
HXLINE(5821)			return node->data;
            		}
HXDLIN(5821)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,predecessor,return )

void ZPP_Set_ZPP_SimpleEvent_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent cur){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5823_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(5832)		bool _hx_tmp;
HXDLIN(5832)		if (hx::IsNotNull( cur->next )) {
HXLINE(5832)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE(5832)			_hx_tmp = false;
            		}
HXDLIN(5832)		if (_hx_tmp) {
HXLINE(5833)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,sm) = cur->next;
HXLINE(5834)			while(hx::IsNotNull( sm->prev )){
HXLINE(5834)				sm = sm->prev;
            			}
HXLINE(5835)			{
HXLINE(5836)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,t) = cur->data;
HXLINE(5837)				cur->data = sm->data;
HXLINE(5838)				sm->data = t;
            			}
HXLINE(5840)			if (hx::IsNotNull( this->swapped )) {
HXLINE(5840)				this->swapped(cur->data,sm->data);
            			}
HXLINE(5841)			cur = sm;
            		}
HXLINE(5851)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,child);
HXDLIN(5851)		if (hx::IsNull( cur->prev )) {
HXLINE(5851)			child = cur->next;
            		}
            		else {
HXLINE(5851)			child = cur->prev;
            		}
HXLINE(5852)		if ((cur->colour == (int)1)) {
HXLINE(5853)			bool _hx_tmp1;
HXDLIN(5853)			if (hx::IsNull( cur->prev )) {
HXLINE(5853)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE(5853)				_hx_tmp1 = true;
            			}
HXDLIN(5853)			if (_hx_tmp1) {
HXLINE(5853)				child->colour = (int)1;
            			}
            			else {
HXLINE(5854)				if (hx::IsNotNull( cur->parent )) {
HXLINE(5855)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,parent) = cur->parent;
HXLINE(5856)					while(true){
HXLINE(5857)						parent->colour++;
HXLINE(5858)						parent->prev->colour--;
HXLINE(5859)						parent->next->colour--;
HXLINE(5860)						{
HXLINE(5861)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,child1,"child") = parent->prev;
HXLINE(5862)							if ((child1->colour == (int)-1)) {
HXLINE(5863)								this->_hx___fix_neg_red(child1);
HXLINE(5864)								goto _hx_goto_44;
            							}
            							else {
HXLINE(5866)								if ((child1->colour == (int)0)) {
HXLINE(5868)									bool _hx_tmp2;
HXDLIN(5868)									if (hx::IsNotNull( child1->prev )) {
HXLINE(5868)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE(5868)										_hx_tmp2 = false;
            									}
HXDLIN(5868)									if (_hx_tmp2) {
HXLINE(5869)										this->_hx___fix_dbl_red(child1->prev);
HXLINE(5870)										goto _hx_goto_44;
            									}
HXLINE(5874)									bool _hx_tmp3;
HXDLIN(5874)									if (hx::IsNotNull( child1->next )) {
HXLINE(5874)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE(5874)										_hx_tmp3 = false;
            									}
HXDLIN(5874)									if (_hx_tmp3) {
HXLINE(5875)										this->_hx___fix_dbl_red(child1->next);
HXLINE(5876)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(5881)						{
HXLINE(5882)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,child2,"child") = parent->next;
HXLINE(5883)							if ((child2->colour == (int)-1)) {
HXLINE(5884)								this->_hx___fix_neg_red(child2);
HXLINE(5885)								goto _hx_goto_44;
            							}
            							else {
HXLINE(5887)								if ((child2->colour == (int)0)) {
HXLINE(5889)									bool _hx_tmp4;
HXDLIN(5889)									if (hx::IsNotNull( child2->prev )) {
HXLINE(5889)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE(5889)										_hx_tmp4 = false;
            									}
HXDLIN(5889)									if (_hx_tmp4) {
HXLINE(5890)										this->_hx___fix_dbl_red(child2->prev);
HXLINE(5891)										goto _hx_goto_44;
            									}
HXLINE(5895)									bool _hx_tmp5;
HXDLIN(5895)									if (hx::IsNotNull( child2->next )) {
HXLINE(5895)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE(5895)										_hx_tmp5 = false;
            									}
HXDLIN(5895)									if (_hx_tmp5) {
HXLINE(5896)										this->_hx___fix_dbl_red(child2->next);
HXLINE(5897)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(5902)						if ((parent->colour == (int)2)) {
HXLINE(5903)							if (hx::IsNull( parent->parent )) {
HXLINE(5904)								parent->colour = (int)1;
            							}
            							else {
HXLINE(5907)								parent = parent->parent;
HXLINE(5908)								continue;
            							}
            						}
HXLINE(5911)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE(5915)		{
HXLINE(5916)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,par) = cur->parent;
HXLINE(5917)			if (hx::IsNull( par )) {
HXLINE(5918)				this->parent = child;
            			}
            			else {
HXLINE(5920)				if (hx::IsEq( par->prev,cur )) {
HXLINE(5920)					par->prev = child;
            				}
            				else {
HXLINE(5921)					par->next = child;
            				}
            			}
HXLINE(5922)			if (hx::IsNotNull( child )) {
HXLINE(5922)				child->parent = par;
            			}
            		}
HXLINE(5924)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE(5925)		{
HXLINE(5926)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,o) = cur;
HXLINE(5935)			{
HXLINE(5935)				o->data = null();
HXDLIN(5935)				o->lt = null();
HXDLIN(5935)				o->swapped = null();
            			}
HXLINE(5936)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(5937)			::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,remove_node,(void))

void ZPP_Set_ZPP_SimpleEvent_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5944_clear)
            	HX_STACK_THIS(this)
HXLINE(5944)		if (hx::IsNotNull( this->parent )) {
HXLINE(5944)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = this->parent;
HXDLIN(5944)			while(hx::IsNotNull( cur )){
HXLINE(5944)				if (hx::IsNotNull( cur->prev )) {
HXLINE(5944)					cur = cur->prev;
            				}
            				else {
HXLINE(5944)					if (hx::IsNotNull( cur->next )) {
HXLINE(5944)						cur = cur->next;
            					}
            					else {
HXLINE(5944)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,ret) = cur->parent;
HXDLIN(5944)						if (hx::IsNotNull( ret )) {
HXLINE(5944)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(5944)								ret->prev = null();
            							}
            							else {
HXLINE(5944)								ret->next = null();
            							}
HXDLIN(5944)							cur->parent = null();
            						}
HXDLIN(5944)						{
HXLINE(5944)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,o) = cur;
HXDLIN(5944)							{
HXLINE(5944)								o->data = null();
HXDLIN(5944)								o->lt = null();
HXDLIN(5944)								o->swapped = null();
            							}
HXDLIN(5944)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(5944)							::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = o;
            						}
HXDLIN(5944)						cur = ret;
            					}
            				}
            			}
HXDLIN(5944)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleEvent_obj,clear,(void))

void ZPP_Set_ZPP_SimpleEvent_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5948_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(5948)		if (hx::IsNull( this->parent )) {
HXLINE(5948)			return;
            		}
            		else {
HXLINE(5950)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = this->parent;
HXLINE(5951)			while(hx::IsNotNull( cur )){
HXLINE(5951)				if (hx::IsNotNull( cur->prev )) {
HXLINE(5951)					cur = cur->prev;
            				}
            				else {
HXLINE(5951)					if (hx::IsNotNull( cur->next )) {
HXLINE(5951)						cur = cur->next;
            					}
            					else {
HXLINE(5951)						lambda(cur->data);
HXDLIN(5951)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,ret) = cur->parent;
HXDLIN(5951)						if (hx::IsNotNull( ret )) {
HXLINE(5951)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(5951)								ret->prev = null();
            							}
            							else {
HXLINE(5951)								ret->next = null();
            							}
HXDLIN(5951)							cur->parent = null();
            						}
HXDLIN(5951)						{
HXLINE(5951)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,o) = cur;
HXDLIN(5951)							{
HXLINE(5951)								o->data = null();
HXDLIN(5951)								o->lt = null();
HXDLIN(5951)								o->swapped = null();
            							}
HXDLIN(5951)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(5951)							::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = o;
            						}
HXDLIN(5951)						cur = ret;
            					}
            				}
            			}
HXLINE(5952)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5956_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(5965)		lambda(node->data);
HXLINE(5966)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,ret) = node->parent;
HXLINE(5967)		if (hx::IsNotNull( ret )) {
HXLINE(5968)			if (hx::IsEq( node,ret->prev )) {
HXLINE(5968)				ret->prev = null();
            			}
            			else {
HXLINE(5969)				ret->next = null();
            			}
HXLINE(5970)			node->parent = null();
            		}
HXLINE(5972)		{
HXLINE(5982)			{
HXLINE(5982)				node->data = null();
HXDLIN(5982)				node->lt = null();
HXDLIN(5982)				node->swapped = null();
            			}
HXLINE(5983)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(5984)			::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = node;
            		}
HXLINE(5989)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_SimpleEvent_obj,clear_node,return )

void ZPP_Set_ZPP_SimpleEvent_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent negred){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5991___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE(5992)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,parent) = negred->parent;
HXLINE(5993)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,child);
HXDLIN(5993)		if (hx::IsEq( parent->prev,negred )) {
HXLINE(5994)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,nl) = negred->prev;
HXLINE(5995)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,nr) = negred->next;
HXLINE(5996)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,trl) = nr->prev;
HXLINE(5997)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,trr) = nr->next;
HXLINE(5998)			nl->colour = (int)0;
HXLINE(5999)			negred->colour = (parent->colour = (int)1);
HXLINE(6000)			{
HXLINE(6001)				negred->next = trl;
HXLINE(6002)				if (hx::IsNotNull( trl )) {
HXLINE(6002)					trl->parent = negred;
            				}
            			}
HXLINE(6004)			{
HXLINE(6005)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,t) = parent->data;
HXLINE(6006)				parent->data = nr->data;
HXLINE(6007)				nr->data = t;
            			}
HXLINE(6009)			if (hx::IsNotNull( this->swapped )) {
HXLINE(6009)				this->swapped(parent->data,nr->data);
            			}
HXLINE(6010)			{
HXLINE(6011)				nr->prev = trr;
HXLINE(6012)				if (hx::IsNotNull( trr )) {
HXLINE(6012)					trr->parent = nr;
            				}
            			}
HXLINE(6014)			{
HXLINE(6015)				nr->next = parent->next;
HXLINE(6016)				if (hx::IsNotNull( parent->next )) {
HXLINE(6016)					parent->next->parent = nr;
            				}
            			}
HXLINE(6018)			{
HXLINE(6019)				parent->next = nr;
HXLINE(6020)				if (hx::IsNotNull( nr )) {
HXLINE(6020)					nr->parent = parent;
            				}
            			}
HXLINE(5993)			child = nl;
            		}
            		else {
HXLINE(6025)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,nl1,"nl") = negred->next;
HXLINE(6026)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,nr1,"nr") = negred->prev;
HXLINE(6027)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,trl1,"trl") = nr1->next;
HXLINE(6028)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,trr1,"trr") = nr1->prev;
HXLINE(6029)			nl1->colour = (int)0;
HXLINE(6030)			negred->colour = (parent->colour = (int)1);
HXLINE(6031)			{
HXLINE(6032)				negred->prev = trl1;
HXLINE(6033)				if (hx::IsNotNull( trl1 )) {
HXLINE(6033)					trl1->parent = negred;
            				}
            			}
HXLINE(6035)			{
HXLINE(6036)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,t1,"t") = parent->data;
HXLINE(6037)				parent->data = nr1->data;
HXLINE(6038)				nr1->data = t1;
            			}
HXLINE(6040)			if (hx::IsNotNull( this->swapped )) {
HXLINE(6040)				this->swapped(parent->data,nr1->data);
            			}
HXLINE(6041)			{
HXLINE(6042)				nr1->next = trr1;
HXLINE(6043)				if (hx::IsNotNull( trr1 )) {
HXLINE(6043)					trr1->parent = nr1;
            				}
            			}
HXLINE(6045)			{
HXLINE(6046)				nr1->prev = parent->prev;
HXLINE(6047)				if (hx::IsNotNull( parent->prev )) {
HXLINE(6047)					parent->prev->parent = nr1;
            				}
            			}
HXLINE(6049)			{
HXLINE(6050)				parent->prev = nr1;
HXLINE(6051)				if (hx::IsNotNull( nr1 )) {
HXLINE(6051)					nr1->parent = parent;
            				}
            			}
HXLINE(5993)			child = nl1;
            		}
HXLINE(6055)		bool _hx_tmp;
HXDLIN(6055)		if (hx::IsNotNull( child->prev )) {
HXLINE(6055)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE(6055)			_hx_tmp = false;
            		}
HXDLIN(6055)		if (_hx_tmp) {
HXLINE(6055)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE(6056)			bool _hx_tmp1;
HXDLIN(6056)			if (hx::IsNotNull( child->next )) {
HXLINE(6056)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE(6056)				_hx_tmp1 = false;
            			}
HXDLIN(6056)			if (_hx_tmp1) {
HXLINE(6056)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_SimpleEvent_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent x){
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_6059___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(6059)		while(true){
HXLINE(6060)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,par) = x->parent;
HXLINE(6061)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,g) = par->parent;
HXLINE(6062)			if (hx::IsNull( g )) {
HXLINE(6063)				par->colour = (int)1;
HXLINE(6064)				goto _hx_goto_52;
            			}
HXLINE(6066)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,n1);
HXDLIN(6066)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,n2);
HXDLIN(6066)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,n3);
HXDLIN(6066)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,t1);
HXDLIN(6066)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,t2);
HXDLIN(6066)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,t3);
HXDLIN(6066)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,t4);
HXLINE(6067)			if (hx::IsEq( par,g->prev )) {
HXLINE(6068)				n3 = g;
HXLINE(6069)				t4 = g->next;
HXLINE(6070)				if (hx::IsEq( x,par->prev )) {
HXLINE(6071)					n1 = x;
HXLINE(6072)					n2 = par;
HXLINE(6073)					t1 = x->prev;
HXLINE(6074)					t2 = x->next;
HXLINE(6075)					t3 = par->next;
            				}
            				else {
HXLINE(6078)					n1 = par;
HXLINE(6079)					n2 = x;
HXLINE(6080)					t1 = par->prev;
HXLINE(6081)					t2 = x->prev;
HXLINE(6082)					t3 = x->next;
            				}
            			}
            			else {
HXLINE(6086)				n1 = g;
HXLINE(6087)				t1 = g->prev;
HXLINE(6088)				if (hx::IsEq( x,par->prev )) {
HXLINE(6089)					n2 = x;
HXLINE(6090)					n3 = par;
HXLINE(6091)					t2 = x->prev;
HXLINE(6092)					t3 = x->next;
HXLINE(6093)					t4 = par->next;
            				}
            				else {
HXLINE(6096)					n2 = par;
HXLINE(6097)					n3 = x;
HXLINE(6098)					t2 = par->prev;
HXLINE(6099)					t3 = x->prev;
HXLINE(6100)					t4 = x->next;
            				}
            			}
HXLINE(6103)			{
HXLINE(6104)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,par1,"par") = g->parent;
HXLINE(6105)				if (hx::IsNull( par1 )) {
HXLINE(6106)					this->parent = n2;
            				}
            				else {
HXLINE(6108)					if (hx::IsEq( par1->prev,g )) {
HXLINE(6108)						par1->prev = n2;
            					}
            					else {
HXLINE(6109)						par1->next = n2;
            					}
            				}
HXLINE(6110)				if (hx::IsNotNull( n2 )) {
HXLINE(6110)					n2->parent = par1;
            				}
            			}
HXLINE(6112)			{
HXLINE(6113)				n1->prev = t1;
HXLINE(6114)				if (hx::IsNotNull( t1 )) {
HXLINE(6114)					t1->parent = n1;
            				}
            			}
HXLINE(6116)			{
HXLINE(6117)				n1->next = t2;
HXLINE(6118)				if (hx::IsNotNull( t2 )) {
HXLINE(6118)					t2->parent = n1;
            				}
            			}
HXLINE(6120)			{
HXLINE(6121)				n2->prev = n1;
HXLINE(6122)				if (hx::IsNotNull( n1 )) {
HXLINE(6122)					n1->parent = n2;
            				}
            			}
HXLINE(6124)			{
HXLINE(6125)				n2->next = n3;
HXLINE(6126)				if (hx::IsNotNull( n3 )) {
HXLINE(6126)					n3->parent = n2;
            				}
            			}
HXLINE(6128)			{
HXLINE(6129)				n3->prev = t3;
HXLINE(6130)				if (hx::IsNotNull( t3 )) {
HXLINE(6130)					t3->parent = n3;
            				}
            			}
HXLINE(6132)			{
HXLINE(6133)				n3->next = t4;
HXLINE(6134)				if (hx::IsNotNull( t4 )) {
HXLINE(6134)					t4->parent = n3;
            				}
            			}
HXLINE(6136)			n2->colour = (g->colour - (int)1);
HXLINE(6137)			n1->colour = (int)1;
HXLINE(6138)			n3->colour = (int)1;
HXLINE(6139)			if (hx::IsEq( n2,this->parent )) {
HXLINE(6139)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE(6140)				bool _hx_tmp;
HXDLIN(6140)				if ((n2->colour == (int)0)) {
HXLINE(6140)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE(6140)					_hx_tmp = false;
            				}
HXDLIN(6140)				if (_hx_tmp) {
HXLINE(6141)					x = n2;
HXLINE(6142)					continue;
            				}
            			}
HXLINE(6144)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_SimpleEvent_obj::try_insert_bool( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_GC_STACKFRAME(&_hx_pos_096a7ddc94217268_6147_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6148)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,x) = null();
HXLINE(6149)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = null();
HXLINE(6150)		if (hx::IsNull( this->parent )) {
HXLINE(6152)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(6153)				x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(6159)				x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(6160)				::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = x->next;
HXLINE(6161)				x->next = null();
            			}
HXLINE(6168)			x->data = obj;
HXLINE(6169)			this->parent = x;
            		}
            		else {
HXLINE(6172)			cur = this->parent;
HXLINE(6173)			while(true){
HXLINE(6174)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(6175)					if (hx::IsNull( cur->prev )) {
HXLINE(6177)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(6178)							x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(6184)							x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(6185)							::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = x->next;
HXLINE(6186)							x->next = null();
            						}
HXLINE(6193)						x->data = obj;
HXLINE(6194)						cur->prev = x;
HXLINE(6195)						x->parent = cur;
HXLINE(6196)						goto _hx_goto_54;
            					}
            					else {
HXLINE(6198)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(6200)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(6201)						if (hx::IsNull( cur->next )) {
HXLINE(6203)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(6204)								x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(6210)								x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(6211)								::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = x->next;
HXLINE(6212)								x->next = null();
            							}
HXLINE(6219)							x->data = obj;
HXLINE(6220)							cur->next = x;
HXLINE(6221)							x->parent = cur;
HXLINE(6222)							goto _hx_goto_54;
            						}
            						else {
HXLINE(6224)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(6226)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE(6229)		if (hx::IsNull( x )) {
HXLINE(6229)			return false;
            		}
            		else {
HXLINE(6231)			if (hx::IsNull( x->parent )) {
HXLINE(6231)				x->colour = (int)1;
            			}
            			else {
HXLINE(6233)				x->colour = (int)0;
HXLINE(6234)				if ((x->parent->colour == (int)0)) {
HXLINE(6234)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(6236)			return true;
            		}
HXLINE(6229)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::try_insert( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_GC_STACKFRAME(&_hx_pos_096a7ddc94217268_6239_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6240)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,x) = null();
HXLINE(6241)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = null();
HXLINE(6242)		if (hx::IsNull( this->parent )) {
HXLINE(6244)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(6245)				x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(6251)				x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(6252)				::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = x->next;
HXLINE(6253)				x->next = null();
            			}
HXLINE(6260)			x->data = obj;
HXLINE(6261)			this->parent = x;
            		}
            		else {
HXLINE(6264)			cur = this->parent;
HXLINE(6265)			while(true){
HXLINE(6266)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(6267)					if (hx::IsNull( cur->prev )) {
HXLINE(6269)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(6270)							x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(6276)							x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(6277)							::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = x->next;
HXLINE(6278)							x->next = null();
            						}
HXLINE(6285)						x->data = obj;
HXLINE(6286)						cur->prev = x;
HXLINE(6287)						x->parent = cur;
HXLINE(6288)						goto _hx_goto_56;
            					}
            					else {
HXLINE(6290)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(6292)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(6293)						if (hx::IsNull( cur->next )) {
HXLINE(6295)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(6296)								x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(6302)								x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(6303)								::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = x->next;
HXLINE(6304)								x->next = null();
            							}
HXLINE(6311)							x->data = obj;
HXLINE(6312)							cur->next = x;
HXLINE(6313)							x->parent = cur;
HXLINE(6314)							goto _hx_goto_56;
            						}
            						else {
HXLINE(6316)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(6318)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE(6321)		if (hx::IsNull( x )) {
HXLINE(6321)			return cur;
            		}
            		else {
HXLINE(6323)			if (hx::IsNull( x->parent )) {
HXLINE(6323)				x->colour = (int)1;
            			}
            			else {
HXLINE(6325)				x->colour = (int)0;
HXLINE(6326)				if ((x->parent->colour == (int)0)) {
HXLINE(6326)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(6328)			return x;
            		}
HXLINE(6321)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::insert( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_GC_STACKFRAME(&_hx_pos_096a7ddc94217268_6331_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6340)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,x);
HXLINE(6342)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(6343)			x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(6349)			x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(6350)			::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = x->next;
HXLINE(6351)			x->next = null();
            		}
HXLINE(6358)		x->data = obj;
HXLINE(6359)		if (hx::IsNull( this->parent )) {
HXLINE(6359)			this->parent = x;
            		}
            		else {
HXLINE(6361)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur) = this->parent;
HXLINE(6362)			while(true){
HXLINE(6363)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(6364)					if (hx::IsNull( cur->prev )) {
HXLINE(6365)						cur->prev = x;
HXLINE(6366)						x->parent = cur;
HXLINE(6367)						goto _hx_goto_58;
            					}
            					else {
HXLINE(6369)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(6372)					if (hx::IsNull( cur->next )) {
HXLINE(6373)						cur->next = x;
HXLINE(6374)						x->parent = cur;
HXLINE(6375)						goto _hx_goto_58;
            					}
            					else {
HXLINE(6377)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(6381)		if (hx::IsNull( x->parent )) {
HXLINE(6381)			x->colour = (int)1;
            		}
            		else {
HXLINE(6383)			x->colour = (int)0;
HXLINE(6384)			if ((x->parent->colour == (int)0)) {
HXLINE(6384)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(6394)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleEvent_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_SimpleEvent_obj > ZPP_Set_ZPP_SimpleEvent_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_SimpleEvent_obj > __this = new ZPP_Set_ZPP_SimpleEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_SimpleEvent_obj > ZPP_Set_ZPP_SimpleEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_SimpleEvent_obj *__this = (ZPP_Set_ZPP_SimpleEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_SimpleEvent_obj), true, "zpp_nape.util.ZPP_Set_ZPP_SimpleEvent"));
	*(void **)__this = ZPP_Set_ZPP_SimpleEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_SimpleEvent_obj::ZPP_Set_ZPP_SimpleEvent_obj()
{
}

void ZPP_Set_ZPP_SimpleEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_SimpleEvent);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_SimpleEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_SimpleEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_SimpleEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_SimpleEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_SimpleEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_SimpleEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_SimpleEvent_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleEvent_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleEvent_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimpleEvent*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleEvent_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleEvent_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleEvent_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleEvent_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_SimpleEvent_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_SimpleEvent_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent*/ ,(void *) &ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_SimpleEvent_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_SimpleEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_SimpleEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_SimpleEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_SimpleEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_SimpleEvent_obj::__mClass;

static ::String ZPP_Set_ZPP_SimpleEvent_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_SimpleEvent_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_SimpleEvent_obj;
	ZPP_Set_ZPP_SimpleEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_SimpleEvent","\x36","\x0c","\xc8","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_SimpleEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_SimpleEvent_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_SimpleEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_SimpleEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_SimpleEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_SimpleEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_SimpleEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_SimpleEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_SimpleEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_SimpleEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_096a7ddc94217268_5510_boot)
HXLINE(5510)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
