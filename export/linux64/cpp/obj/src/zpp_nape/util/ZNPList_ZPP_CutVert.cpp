// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_CutVert
#include <zpp_nape/geom/ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CutVert
#include <zpp_nape/util/ZNPList_ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CutVert
#include <zpp_nape/util/ZNPNode_ZPP_CutVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6013_new,"zpp_nape.util.ZNPList_ZPP_CutVert","new",0x362d64b0,"zpp_nape.util.ZNPList_ZPP_CutVert.new","zpp_nape/util/Lists.hx",6013,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6019_begin,"zpp_nape.util.ZNPList_ZPP_CutVert","begin",0x3ef93279,"zpp_nape.util.ZNPList_ZPP_CutVert.begin","zpp_nape/util/Lists.hx",6019,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6026_setbegin,"zpp_nape.util.ZNPList_ZPP_CutVert","setbegin",0xf0d7acf7,"zpp_nape.util.ZNPList_ZPP_CutVert.setbegin","zpp_nape/util/Lists.hx",6026,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6032_add,"zpp_nape.util.ZNPList_ZPP_CutVert","add",0x36238671,"zpp_nape.util.ZNPList_ZPP_CutVert.add","zpp_nape/util/Lists.hx",6032,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6036_inlined_add,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_add",0xb52cb0dd,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_add","zpp_nape/util/Lists.hx",6036,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6082_addAll,"zpp_nape.util.ZNPList_ZPP_CutVert","addAll",0xdf370730,"zpp_nape.util.ZNPList_ZPP_CutVert.addAll","zpp_nape/util/Lists.hx",6082,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6092_insert,"zpp_nape.util.ZNPList_ZPP_CutVert","insert",0xde1940e9,"zpp_nape.util.ZNPList_ZPP_CutVert.insert","zpp_nape/util/Lists.hx",6092,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6096_inlined_insert,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_insert",0xb50961fd,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_insert","zpp_nape/util/Lists.hx",6096,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6140_pop,"zpp_nape.util.ZNPList_ZPP_CutVert","pop",0x362ef1e1,"zpp_nape.util.ZNPList_ZPP_CutVert.pop","zpp_nape/util/Lists.hx",6140,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6144_inlined_pop,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_pop",0xb5381c4d,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_pop","zpp_nape/util/Lists.hx",6144,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6178_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CutVert","pop_unsafe",0xa6f11204,"zpp_nape.util.ZNPList_ZPP_CutVert.pop_unsafe","zpp_nape/util/Lists.hx",6178,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6182_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_pop_unsafe",0x73094d18,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_pop_unsafe","zpp_nape/util/Lists.hx",6182,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6204_remove,"zpp_nape.util.ZNPList_ZPP_CutVert","remove",0x44c499f4,"zpp_nape.util.ZNPList_ZPP_CutVert.remove","zpp_nape/util/Lists.hx",6204,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6206_try_remove,"zpp_nape.util.ZNPList_ZPP_CutVert","try_remove",0xbe1b47b8,"zpp_nape.util.ZNPList_ZPP_CutVert.try_remove","zpp_nape/util/Lists.hx",6206,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6240_inlined_remove,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_remove",0x1bb4bb08,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_remove","zpp_nape/util/Lists.hx",6240,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6244_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_try_remove",0x8a3382cc,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_try_remove","zpp_nape/util/Lists.hx",6244,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6268_erase,"zpp_nape.util.ZNPList_ZPP_CutVert","erase",0x01c03136,"zpp_nape.util.ZNPList_ZPP_CutVert.erase","zpp_nape/util/Lists.hx",6268,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6272_inlined_erase,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_erase",0x3539cea2,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_erase","zpp_nape/util/Lists.hx",6272,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6318_splice,"zpp_nape.util.ZNPList_ZPP_CutVert","splice",0xffda832c,"zpp_nape.util.ZNPList_ZPP_CutVert.splice","zpp_nape/util/Lists.hx",6318,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6323_clear,"zpp_nape.util.ZNPList_ZPP_CutVert","clear",0xd6feb9dd,"zpp_nape.util.ZNPList_ZPP_CutVert.clear","zpp_nape/util/Lists.hx",6323,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6328_inlined_clear,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_clear",0x0a785749,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_clear","zpp_nape/util/Lists.hx",6328,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6333_reverse,"zpp_nape.util.ZNPList_ZPP_CutVert","reverse",0x0f3e3572,"zpp_nape.util.ZNPList_ZPP_CutVert.reverse","zpp_nape/util/Lists.hx",6333,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6349_empty,"zpp_nape.util.ZNPList_ZPP_CutVert","empty",0xfe7d82dd,"zpp_nape.util.ZNPList_ZPP_CutVert.empty","zpp_nape/util/Lists.hx",6349,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6354_size,"zpp_nape.util.ZNPList_ZPP_CutVert","size",0x34dbd271,"zpp_nape.util.ZNPList_ZPP_CutVert.size","zpp_nape/util/Lists.hx",6354,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6357_has,"zpp_nape.util.ZNPList_ZPP_CutVert","has",0x3628d3aa,"zpp_nape.util.ZNPList_ZPP_CutVert.has","zpp_nape/util/Lists.hx",6357,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6361_inlined_has,"zpp_nape.util.ZNPList_ZPP_CutVert","inlined_has",0xb531fe16,"zpp_nape.util.ZNPList_ZPP_CutVert.inlined_has","zpp_nape/util/Lists.hx",6361,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6392_front,"zpp_nape.util.ZNPList_ZPP_CutVert","front",0x953160f9,"zpp_nape.util.ZNPList_ZPP_CutVert.front","zpp_nape/util/Lists.hx",6392,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6394_back,"zpp_nape.util.ZNPList_ZPP_CutVert","back",0x29990bd7,"zpp_nape.util.ZNPList_ZPP_CutVert.back","zpp_nape/util/Lists.hx",6394,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6403_iterator_at,"zpp_nape.util.ZNPList_ZPP_CutVert","iterator_at",0xb9d0ee34,"zpp_nape.util.ZNPList_ZPP_CutVert.iterator_at","zpp_nape/util/Lists.hx",6403,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_378a7638927e1295_6416_at,"zpp_nape.util.ZNPList_ZPP_CutVert","at",0xb59fbaa3,"zpp_nape.util.ZNPList_ZPP_CutVert.at","zpp_nape/util/Lists.hx",6416,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_CutVert_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6013_new)
            	HX_STACK_THIS(this)
HXLINE(6023)		this->length = (int)0;
HXLINE(6022)		this->pushmod = false;
HXLINE(6021)		this->modified = false;
HXLINE(6014)		this->head = null();
            	}

Dynamic ZNPList_ZPP_CutVert_obj::__CreateEmpty() { return new ZNPList_ZPP_CutVert_obj; }

void *ZNPList_ZPP_CutVert_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_CutVert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_CutVert_obj > _hx_result = new ZNPList_ZPP_CutVert_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_CutVert_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1d171732;
}

 ::zpp_nape::util::ZNPNode_ZPP_CutVert ZNPList_ZPP_CutVert_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6019_begin)
            	HX_STACK_THIS(this)
HXLINE(6019)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,begin,return )

void ZNPList_ZPP_CutVert_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_CutVert i){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6026_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(6027)		this->head = i;
HXLINE(6028)		this->modified = true;
HXLINE(6029)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_CutVert ZNPList_ZPP_CutVert_obj::add( ::zpp_nape::geom::ZPP_CutVert o){
            	HX_GC_STACKFRAME(&_hx_pos_378a7638927e1295_6032_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(6032)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXDLIN(6032)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool )) {
HXLINE(6032)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(6032)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6032)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret->next;
HXDLIN(6032)			ret->next = null();
            		}
HXDLIN(6032)		ret->elt = o;
HXDLIN(6032)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,temp) = ret;
HXDLIN(6032)		temp->next = this->head;
HXDLIN(6032)		this->head = temp;
HXDLIN(6032)		this->modified = true;
HXDLIN(6032)		this->length++;
HXDLIN(6032)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,add,return )

 ::zpp_nape::geom::ZPP_CutVert ZNPList_ZPP_CutVert_obj::inlined_add( ::zpp_nape::geom::ZPP_CutVert o){
            	HX_GC_STACKFRAME(&_hx_pos_378a7638927e1295_6036_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(6046)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXLINE(6048)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool )) {
HXLINE(6049)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(6055)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXLINE(6056)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret->next;
HXLINE(6057)			ret->next = null();
            		}
HXLINE(6064)		ret->elt = o;
HXLINE(6045)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,temp) = ret;
HXLINE(6067)		temp->next = this->head;
HXLINE(6068)		this->head = temp;
HXLINE(6069)		this->modified = true;
HXLINE(6070)		this->length++;
HXLINE(6071)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,inlined_add,return )

void ZNPList_ZPP_CutVert_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_CutVert x){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6082_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(6083)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cx_ite) = x->head;
HXLINE(6084)		while(hx::IsNotNull( cx_ite )){
HXLINE(6086)			this->add(cx_ite->elt);
HXLINE(6087)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_CutVert ZNPList_ZPP_CutVert_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_CutVert cur, ::zpp_nape::geom::ZPP_CutVert o){
            	HX_GC_STACKFRAME(&_hx_pos_378a7638927e1295_6092_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(6092)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXDLIN(6092)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool )) {
HXLINE(6092)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(6092)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6092)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret->next;
HXDLIN(6092)			ret->next = null();
            		}
HXDLIN(6092)		ret->elt = o;
HXDLIN(6092)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,temp) = ret;
HXDLIN(6092)		if (hx::IsNull( cur )) {
HXLINE(6092)			temp->next = this->head;
HXDLIN(6092)			this->head = temp;
            		}
            		else {
HXLINE(6092)			temp->next = cur->next;
HXDLIN(6092)			cur->next = temp;
            		}
HXDLIN(6092)		this->pushmod = (this->modified = true);
HXDLIN(6092)		this->length++;
HXDLIN(6092)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CutVert_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutVert ZNPList_ZPP_CutVert_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_CutVert cur, ::zpp_nape::geom::ZPP_CutVert o){
            	HX_GC_STACKFRAME(&_hx_pos_378a7638927e1295_6096_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(6106)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXLINE(6108)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool )) {
HXLINE(6109)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(6115)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXLINE(6116)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret->next;
HXLINE(6117)			ret->next = null();
            		}
HXLINE(6124)		ret->elt = o;
HXLINE(6105)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,temp) = ret;
HXLINE(6127)		if (hx::IsNull( cur )) {
HXLINE(6128)			temp->next = this->head;
HXLINE(6129)			this->head = temp;
            		}
            		else {
HXLINE(6132)			temp->next = cur->next;
HXLINE(6133)			cur->next = temp;
            		}
HXLINE(6135)		this->pushmod = (this->modified = true);
HXLINE(6136)		this->length++;
HXLINE(6137)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CutVert_obj,inlined_insert,return )

void ZNPList_ZPP_CutVert_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6140_pop)
            	HX_STACK_THIS(this)
HXLINE(6140)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret) = this->head;
HXDLIN(6140)		this->head = ret->next;
HXDLIN(6140)		{
HXLINE(6140)			ret->elt = null();
HXDLIN(6140)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6140)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret;
            		}
HXDLIN(6140)		if (hx::IsNull( this->head )) {
HXLINE(6140)			this->pushmod = true;
            		}
HXDLIN(6140)		this->modified = true;
HXDLIN(6140)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,pop,(void))

void ZNPList_ZPP_CutVert_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6144_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(6153)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret) = this->head;
HXLINE(6154)		this->head = ret->next;
HXLINE(6156)		{
HXLINE(6166)			ret->elt = null();
HXLINE(6167)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXLINE(6168)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret;
            		}
HXLINE(6173)		if (hx::IsNull( this->head )) {
HXLINE(6173)			this->pushmod = true;
            		}
HXLINE(6174)		this->modified = true;
HXLINE(6175)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_CutVert ZNPList_ZPP_CutVert_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6178_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(6178)		HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,ret) = this->head->elt;
HXDLIN(6178)		this->pop();
HXDLIN(6178)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_CutVert ZNPList_ZPP_CutVert_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6182_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(6191)		HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,ret) = this->head->elt;
HXLINE(6192)		this->pop();
HXLINE(6193)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_CutVert_obj::remove( ::zpp_nape::geom::ZPP_CutVert obj){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6204_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6204)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,pre) = null();
HXDLIN(6204)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cur) = this->head;
HXDLIN(6204)		while(hx::IsNotNull( cur )){
HXLINE(6204)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(6204)				{
HXLINE(6204)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,old);
HXDLIN(6204)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXDLIN(6204)					if (hx::IsNull( pre )) {
HXLINE(6204)						old = this->head;
HXDLIN(6204)						ret = old->next;
HXDLIN(6204)						this->head = ret;
HXDLIN(6204)						if (hx::IsNull( this->head )) {
HXLINE(6204)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(6204)						old = pre->next;
HXDLIN(6204)						ret = old->next;
HXDLIN(6204)						pre->next = ret;
HXDLIN(6204)						if (hx::IsNull( ret )) {
HXLINE(6204)							this->pushmod = true;
            						}
            					}
HXDLIN(6204)					{
HXLINE(6204)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,o) = old;
HXDLIN(6204)						o->elt = null();
HXDLIN(6204)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6204)						::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = o;
            					}
HXDLIN(6204)					this->modified = true;
HXDLIN(6204)					this->length--;
HXDLIN(6204)					this->pushmod = true;
            				}
HXDLIN(6204)				goto _hx_goto_13;
            			}
HXDLIN(6204)			pre = cur;
HXDLIN(6204)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,remove,(void))

bool ZNPList_ZPP_CutVert_obj::try_remove( ::zpp_nape::geom::ZPP_CutVert obj){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6206_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6215)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,pre) = null();
HXLINE(6216)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cur) = this->head;
HXLINE(6217)		HX_VARI( bool,ret) = false;
HXLINE(6218)		while(hx::IsNotNull( cur )){
HXLINE(6219)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(6220)				this->erase(pre);
HXLINE(6221)				ret = true;
HXLINE(6222)				goto _hx_goto_15;
            			}
HXLINE(6224)			pre = cur;
HXLINE(6225)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(6227)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,try_remove,return )

void ZNPList_ZPP_CutVert_obj::inlined_remove( ::zpp_nape::geom::ZPP_CutVert obj){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6240_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6240)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,pre) = null();
HXDLIN(6240)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cur) = this->head;
HXDLIN(6240)		while(hx::IsNotNull( cur )){
HXLINE(6240)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(6240)				{
HXLINE(6240)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,old);
HXDLIN(6240)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXDLIN(6240)					if (hx::IsNull( pre )) {
HXLINE(6240)						old = this->head;
HXDLIN(6240)						ret = old->next;
HXDLIN(6240)						this->head = ret;
HXDLIN(6240)						if (hx::IsNull( this->head )) {
HXLINE(6240)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(6240)						old = pre->next;
HXDLIN(6240)						ret = old->next;
HXDLIN(6240)						pre->next = ret;
HXDLIN(6240)						if (hx::IsNull( ret )) {
HXLINE(6240)							this->pushmod = true;
            						}
            					}
HXDLIN(6240)					{
HXLINE(6240)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,o) = old;
HXDLIN(6240)						o->elt = null();
HXDLIN(6240)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6240)						::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = o;
            					}
HXDLIN(6240)					this->modified = true;
HXDLIN(6240)					this->length--;
HXDLIN(6240)					this->pushmod = true;
            				}
HXDLIN(6240)				goto _hx_goto_17;
            			}
HXDLIN(6240)			pre = cur;
HXDLIN(6240)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,inlined_remove,(void))

bool ZNPList_ZPP_CutVert_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_CutVert obj){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6244_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6253)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,pre) = null();
HXLINE(6254)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cur) = this->head;
HXLINE(6255)		HX_VARI( bool,ret) = false;
HXLINE(6256)		while(hx::IsNotNull( cur )){
HXLINE(6257)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(6258)				{
HXLINE(6258)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,old);
HXDLIN(6258)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret1,"ret");
HXDLIN(6258)					if (hx::IsNull( pre )) {
HXLINE(6258)						old = this->head;
HXDLIN(6258)						ret1 = old->next;
HXDLIN(6258)						this->head = ret1;
HXDLIN(6258)						if (hx::IsNull( this->head )) {
HXLINE(6258)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(6258)						old = pre->next;
HXDLIN(6258)						ret1 = old->next;
HXDLIN(6258)						pre->next = ret1;
HXDLIN(6258)						if (hx::IsNull( ret1 )) {
HXLINE(6258)							this->pushmod = true;
            						}
            					}
HXDLIN(6258)					{
HXLINE(6258)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,o) = old;
HXDLIN(6258)						o->elt = null();
HXDLIN(6258)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6258)						::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = o;
            					}
HXDLIN(6258)					this->modified = true;
HXDLIN(6258)					this->length--;
HXDLIN(6258)					this->pushmod = true;
            				}
HXLINE(6259)				ret = true;
HXLINE(6260)				goto _hx_goto_19;
            			}
HXLINE(6262)			pre = cur;
HXLINE(6263)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(6265)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutVert ZNPList_ZPP_CutVert_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_CutVert pre){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6268_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(6268)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,old);
HXDLIN(6268)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXDLIN(6268)		if (hx::IsNull( pre )) {
HXLINE(6268)			old = this->head;
HXDLIN(6268)			ret = old->next;
HXDLIN(6268)			this->head = ret;
HXDLIN(6268)			if (hx::IsNull( this->head )) {
HXLINE(6268)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(6268)			old = pre->next;
HXDLIN(6268)			ret = old->next;
HXDLIN(6268)			pre->next = ret;
HXDLIN(6268)			if (hx::IsNull( ret )) {
HXLINE(6268)				this->pushmod = true;
            			}
            		}
HXDLIN(6268)		{
HXLINE(6268)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,o) = old;
HXDLIN(6268)			o->elt = null();
HXDLIN(6268)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6268)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = o;
            		}
HXDLIN(6268)		this->modified = true;
HXDLIN(6268)		this->length--;
HXDLIN(6268)		this->pushmod = true;
HXDLIN(6268)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutVert ZNPList_ZPP_CutVert_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_CutVert pre){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6272_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(6281)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,old);
HXLINE(6282)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret);
HXLINE(6283)		if (hx::IsNull( pre )) {
HXLINE(6284)			old = this->head;
HXLINE(6285)			ret = old->next;
HXLINE(6286)			this->head = ret;
HXLINE(6287)			if (hx::IsNull( this->head )) {
HXLINE(6287)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(6290)			old = pre->next;
HXLINE(6291)			ret = old->next;
HXLINE(6292)			pre->next = ret;
HXLINE(6293)			if (hx::IsNull( ret )) {
HXLINE(6293)				this->pushmod = true;
            			}
            		}
HXLINE(6296)		{
HXLINE(6297)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,o) = old;
HXLINE(6306)			o->elt = null();
HXLINE(6307)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXLINE(6308)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = o;
            		}
HXLINE(6313)		this->modified = true;
HXLINE(6314)		this->length--;
HXLINE(6315)		this->pushmod = true;
HXLINE(6316)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutVert ZNPList_ZPP_CutVert_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_CutVert pre,int n){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6318_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(6319)		while(true){
HXLINE(6319)			bool _hx_tmp;
HXDLIN(6319)			n = (n - (int)1);
HXDLIN(6319)			if (((n + (int)1) > (int)0)) {
HXLINE(6319)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(6319)				_hx_tmp = false;
            			}
HXDLIN(6319)			if (!(_hx_tmp)) {
HXLINE(6319)				goto _hx_goto_23;
            			}
HXDLIN(6319)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(6320)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CutVert_obj,splice,return )

void ZNPList_ZPP_CutVert_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6323_clear)
            	HX_STACK_THIS(this)
HXLINE(6323)		while(hx::IsNotNull( this->head )){
HXLINE(6323)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret) = this->head;
HXDLIN(6323)			this->head = ret->next;
HXDLIN(6323)			{
HXLINE(6323)				ret->elt = null();
HXDLIN(6323)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6323)				::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret;
            			}
HXDLIN(6323)			if (hx::IsNull( this->head )) {
HXLINE(6323)				this->pushmod = true;
            			}
HXDLIN(6323)			this->modified = true;
HXDLIN(6323)			this->length--;
            		}
HXDLIN(6323)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,clear,(void))

void ZNPList_ZPP_CutVert_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6328_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(6329)		while(hx::IsNotNull( this->head )){
HXLINE(6329)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret) = this->head;
HXDLIN(6329)			this->head = ret->next;
HXDLIN(6329)			{
HXLINE(6329)				ret->elt = null();
HXDLIN(6329)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool;
HXDLIN(6329)				::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = ret;
            			}
HXDLIN(6329)			if (hx::IsNull( this->head )) {
HXLINE(6329)				this->pushmod = true;
            			}
HXDLIN(6329)			this->modified = true;
HXDLIN(6329)			this->length--;
            		}
HXLINE(6330)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,inlined_clear,(void))

void ZNPList_ZPP_CutVert_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6333_reverse)
            	HX_STACK_THIS(this)
HXLINE(6334)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cur) = this->head;
HXLINE(6335)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,pre) = null();
HXLINE(6336)		while(hx::IsNotNull( cur )){
HXLINE(6337)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,nx) = cur->next;
HXLINE(6338)			cur->next = pre;
HXLINE(6339)			this->head = cur;
HXLINE(6340)			pre = cur;
HXLINE(6341)			cur = nx;
            		}
HXLINE(6343)		this->modified = true;
HXLINE(6344)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,reverse,(void))

bool ZNPList_ZPP_CutVert_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6349_empty)
            	HX_STACK_THIS(this)
HXLINE(6349)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,empty,return )

int ZNPList_ZPP_CutVert_obj::size(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6354_size)
            	HX_STACK_THIS(this)
HXLINE(6354)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,size,return )

bool ZNPList_ZPP_CutVert_obj::has( ::zpp_nape::geom::ZPP_CutVert obj){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6357_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6357)		HX_VAR( bool,ret);
HXDLIN(6357)		{
HXLINE(6357)			ret = false;
HXDLIN(6357)			{
HXLINE(6357)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cx_ite) = this->head;
HXDLIN(6357)				while(hx::IsNotNull( cx_ite )){
HXLINE(6357)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(6357)						ret = true;
HXDLIN(6357)						goto _hx_goto_33;
            					}
HXDLIN(6357)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(6357)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,has,return )

bool ZNPList_ZPP_CutVert_obj::inlined_has( ::zpp_nape::geom::ZPP_CutVert obj){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6361_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(6370)		HX_VAR( bool,ret);
HXLINE(6371)		{
HXLINE(6372)			ret = false;
HXLINE(6373)			{
HXLINE(6374)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cx_ite) = this->head;
HXLINE(6375)				while(hx::IsNotNull( cx_ite )){
HXLINE(6378)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(6379)						ret = true;
HXLINE(6380)						goto _hx_goto_35;
            					}
HXLINE(6383)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(6387)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_CutVert ZNPList_ZPP_CutVert_obj::front(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6392_front)
            	HX_STACK_THIS(this)
HXLINE(6392)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,front,return )

 ::zpp_nape::geom::ZPP_CutVert ZNPList_ZPP_CutVert_obj::back(){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6394_back)
            	HX_STACK_THIS(this)
HXLINE(6395)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret) = this->head;
HXLINE(6396)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cur) = ret;
HXLINE(6397)		while(hx::IsNotNull( cur )){
HXLINE(6398)			ret = cur;
HXLINE(6399)			cur = cur->next;
            		}
HXLINE(6401)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutVert_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutVert ZNPList_ZPP_CutVert_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6403_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(6412)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,ret) = this->head;
HXLINE(6413)		while(true){
HXLINE(6413)			bool _hx_tmp;
HXDLIN(6413)			ind = (ind - (int)1);
HXDLIN(6413)			if (((ind + (int)1) > (int)0)) {
HXLINE(6413)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(6413)				_hx_tmp = false;
            			}
HXDLIN(6413)			if (!(_hx_tmp)) {
HXLINE(6413)				goto _hx_goto_40;
            			}
HXDLIN(6413)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(6414)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_CutVert ZNPList_ZPP_CutVert_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_378a7638927e1295_6416_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(6425)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,it) = this->iterator_at(ind);
HXLINE(6426)		if (hx::IsNotNull( it )) {
HXLINE(6426)			return it->elt;
            		}
            		else {
HXLINE(6426)			return null();
            		}
HXDLIN(6426)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutVert_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_CutVert_obj > ZNPList_ZPP_CutVert_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_CutVert_obj > __this = new ZNPList_ZPP_CutVert_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_CutVert_obj > ZNPList_ZPP_CutVert_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_CutVert_obj *__this = (ZNPList_ZPP_CutVert_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_CutVert_obj), true, "zpp_nape.util.ZNPList_ZPP_CutVert"));
	*(void **)__this = ZNPList_ZPP_CutVert_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_CutVert_obj::ZNPList_ZPP_CutVert_obj()
{
}

void ZNPList_ZPP_CutVert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_CutVert);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_CutVert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_CutVert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_CutVert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_CutVert >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_CutVert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_CutVert_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_CutVert*/ ,(int)offsetof(ZNPList_ZPP_CutVert_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CutVert_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CutVert_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_CutVert_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_CutVert_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_CutVert_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_CutVert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_CutVert_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_CutVert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_CutVert_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_CutVert_obj::__mClass;

void ZNPList_ZPP_CutVert_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_CutVert_obj;
	ZNPList_ZPP_CutVert_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_CutVert","\xbe","\x8c","\x99","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_CutVert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_CutVert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_CutVert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_CutVert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_CutVert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_CutVert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
