// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchPair
#include <zpp_nape/geom/ZPP_MarchPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPArray2_ZPP_MarchPair
#include <zpp_nape/util/ZNPArray2_ZPP_MarchPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5431ac8e0363b3bf_295_new,"zpp_nape.util.ZNPArray2_ZPP_MarchPair","new",0xc1c0b2b5,"zpp_nape.util.ZNPArray2_ZPP_MarchPair.new","zpp_nape/util/Array2.hx",295,0x6c3575ba)
HX_DEFINE_STACK_FRAME(_hx_pos_5431ac8e0363b3bf_311_resize,"zpp_nape.util.ZNPArray2_ZPP_MarchPair","resize",0x8cf6dabf,"zpp_nape.util.ZNPArray2_ZPP_MarchPair.resize","zpp_nape/util/Array2.hx",311,0x6c3575ba)
HX_DEFINE_STACK_FRAME(_hx_pos_5431ac8e0363b3bf_338_get,"zpp_nape.util.ZNPArray2_ZPP_MarchPair","get",0xc1bb62eb,"zpp_nape.util.ZNPArray2_ZPP_MarchPair.get","zpp_nape/util/Array2.hx",338,0x6c3575ba)
HX_DEFINE_STACK_FRAME(_hx_pos_5431ac8e0363b3bf_351_set,"zpp_nape.util.ZNPArray2_ZPP_MarchPair","set",0xc1c47df7,"zpp_nape.util.ZNPArray2_ZPP_MarchPair.set","zpp_nape/util/Array2.hx",351,0x6c3575ba)
namespace zpp_nape{
namespace util{

void ZNPArray2_ZPP_MarchPair_obj::__construct(int width,int height){
            	HX_STACKFRAME(&_hx_pos_5431ac8e0363b3bf_295_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 297)		this->width = (int)0;
HXLINE( 296)		this->list = null();
HXLINE( 303)		this->width = width;
HXLINE( 308)		this->list = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic ZNPArray2_ZPP_MarchPair_obj::__CreateEmpty() { return new ZNPArray2_ZPP_MarchPair_obj; }

void *ZNPArray2_ZPP_MarchPair_obj::_hx_vtable = 0;

Dynamic ZNPArray2_ZPP_MarchPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPArray2_ZPP_MarchPair_obj > _hx_result = new ZNPArray2_ZPP_MarchPair_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ZNPArray2_ZPP_MarchPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1dd28cd3;
}

void ZNPArray2_ZPP_MarchPair_obj::resize(int width,int height, ::zpp_nape::geom::ZPP_MarchPair def){
            	HX_STACKFRAME(&_hx_pos_5431ac8e0363b3bf_311_resize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(def,"def")
HXLINE( 320)		this->width = width;
HXLINE( 323)		{
HXLINE( 323)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 323)			HX_VARI( int,_g) = (width * height);
HXDLIN( 323)			while((_g1 < _g)){
HXLINE( 323)				_g1 = (_g1 + (int)1);
HXLINE( 324)				this->list[(_g1 - (int)1)] = def;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZNPArray2_ZPP_MarchPair_obj,resize,(void))

 ::zpp_nape::geom::ZPP_MarchPair ZNPArray2_ZPP_MarchPair_obj::get(int x,int y){
            	HX_STACKFRAME(&_hx_pos_5431ac8e0363b3bf_338_get)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 338)		return this->list->__get(((y * this->width) + x)).StaticCast<  ::zpp_nape::geom::ZPP_MarchPair >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPArray2_ZPP_MarchPair_obj,get,return )

 ::zpp_nape::geom::ZPP_MarchPair ZNPArray2_ZPP_MarchPair_obj::set(int x,int y, ::zpp_nape::geom::ZPP_MarchPair obj){
            	HX_STACKFRAME(&_hx_pos_5431ac8e0363b3bf_351_set)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(obj,"obj")
HXLINE( 351)		return (this->list[((y * this->width) + x)] = obj);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZNPArray2_ZPP_MarchPair_obj,set,return )


hx::ObjectPtr< ZNPArray2_ZPP_MarchPair_obj > ZNPArray2_ZPP_MarchPair_obj::__new(int width,int height) {
	hx::ObjectPtr< ZNPArray2_ZPP_MarchPair_obj > __this = new ZNPArray2_ZPP_MarchPair_obj();
	__this->__construct(width,height);
	return __this;
}

hx::ObjectPtr< ZNPArray2_ZPP_MarchPair_obj > ZNPArray2_ZPP_MarchPair_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height) {
	ZNPArray2_ZPP_MarchPair_obj *__this = (ZNPArray2_ZPP_MarchPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPArray2_ZPP_MarchPair_obj), true, "zpp_nape.util.ZNPArray2_ZPP_MarchPair"));
	*(void **)__this = ZNPArray2_ZPP_MarchPair_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

ZNPArray2_ZPP_MarchPair_obj::ZNPArray2_ZPP_MarchPair_obj()
{
}

void ZNPArray2_ZPP_MarchPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPArray2_ZPP_MarchPair);
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_END_CLASS();
}

void ZNPArray2_ZPP_MarchPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(width,"width");
}

hx::Val ZNPArray2_ZPP_MarchPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPArray2_ZPP_MarchPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPArray2_ZPP_MarchPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPArray2_ZPP_MarchPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ZNPArray2_ZPP_MarchPair_obj,list),HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{hx::fsInt,(int)offsetof(ZNPArray2_ZPP_MarchPair_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPArray2_ZPP_MarchPair_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPArray2_ZPP_MarchPair_obj_sMemberFields[] = {
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void ZNPArray2_ZPP_MarchPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPArray2_ZPP_MarchPair_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPArray2_ZPP_MarchPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPArray2_ZPP_MarchPair_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPArray2_ZPP_MarchPair_obj::__mClass;

void ZNPArray2_ZPP_MarchPair_obj::__register()
{
	hx::Object *dummy = new ZNPArray2_ZPP_MarchPair_obj;
	ZNPArray2_ZPP_MarchPair_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPArray2_ZPP_MarchPair","\x43","\x34","\x02","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPArray2_ZPP_MarchPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPArray2_ZPP_MarchPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPArray2_ZPP_MarchPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPArray2_ZPP_MarchPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPArray2_ZPP_MarchPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPArray2_ZPP_MarchPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
