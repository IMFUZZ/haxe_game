// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleEvent
#include <zpp_nape/geom/ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SimpleEvent
#include <zpp_nape/util/ZNPList_ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimpleEvent
#include <zpp_nape/util/ZNPNode_ZPP_SimpleEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8515_new,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","new",0x53a4e3e5,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.new","zpp_nape/util/Lists.hx",8515,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8521_begin,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","begin",0x48b6a8ee,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.begin","zpp_nape/util/Lists.hx",8521,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8528_setbegin,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","setbegin",0x27bdeda2,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.setbegin","zpp_nape/util/Lists.hx",8528,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8534_add,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","add",0x539b05a6,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.add","zpp_nape/util/Lists.hx",8534,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8538_inlined_add,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_add",0x10b5ed12,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_add","zpp_nape/util/Lists.hx",8538,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8584_addAll,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","addAll",0x5b41371b,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.addAll","zpp_nape/util/Lists.hx",8584,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8594_insert,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","insert",0x5a2370d4,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.insert","zpp_nape/util/Lists.hx",8594,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8598_inlined_insert,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_insert",0x40f5f4e8,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_insert","zpp_nape/util/Lists.hx",8598,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8642_pop,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","pop",0x53a67116,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.pop","zpp_nape/util/Lists.hx",8642,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8646_inlined_pop,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_pop",0x10c15882,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_pop","zpp_nape/util/Lists.hx",8646,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8680_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","pop_unsafe",0x1469136f,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.pop_unsafe","zpp_nape/util/Lists.hx",8680,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8684_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_pop_unsafe",0x34d13183,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_pop_unsafe","zpp_nape/util/Lists.hx",8684,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8706_remove,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","remove",0xc0cec9df,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.remove","zpp_nape/util/Lists.hx",8706,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8708_try_remove,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","try_remove",0x2b934923,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.try_remove","zpp_nape/util/Lists.hx",8708,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8742_inlined_remove,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_remove",0xa7a14df3,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_remove","zpp_nape/util/Lists.hx",8742,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8746_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_try_remove",0x4bfb6737,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_try_remove","zpp_nape/util/Lists.hx",8746,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8770_erase,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","erase",0x0b7da7ab,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.erase","zpp_nape/util/Lists.hx",8770,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8774_inlined_erase,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_erase",0x72b24217,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_erase","zpp_nape/util/Lists.hx",8774,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8820_splice,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","splice",0x7be4b317,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.splice","zpp_nape/util/Lists.hx",8820,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8825_clear,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","clear",0xe0bc3052,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.clear","zpp_nape/util/Lists.hx",8825,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8830_inlined_clear,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_clear",0x47f0cabe,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_clear","zpp_nape/util/Lists.hx",8830,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8835_reverse,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","reverse",0x1c1df327,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.reverse","zpp_nape/util/Lists.hx",8835,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8851_empty,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","empty",0x083af952,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.empty","zpp_nape/util/Lists.hx",8851,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8856_size,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","size",0xdff3a19c,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.size","zpp_nape/util/Lists.hx",8856,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8859_has,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","has",0x53a052df,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.has","zpp_nape/util/Lists.hx",8859,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8863_inlined_has,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","inlined_has",0x10bb3a4b,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.inlined_has","zpp_nape/util/Lists.hx",8863,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8894_front,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","front",0x9eeed76e,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.front","zpp_nape/util/Lists.hx",8894,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8896_back,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","back",0xd4b0db02,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.back","zpp_nape/util/Lists.hx",8896,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8905_iterator_at,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","iterator_at",0x155a2a69,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.iterator_at","zpp_nape/util/Lists.hx",8905,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_ae4fe6fd3cd88373_8918_at,"zpp_nape.util.ZNPList_ZPP_SimpleEvent","at",0x32e2d90e,"zpp_nape.util.ZNPList_ZPP_SimpleEvent.at","zpp_nape/util/Lists.hx",8918,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_SimpleEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8515_new)
            	HX_STACK_THIS(this)
HXLINE(8525)		this->length = (int)0;
HXLINE(8524)		this->pushmod = false;
HXLINE(8523)		this->modified = false;
HXLINE(8516)		this->head = null();
            	}

Dynamic ZNPList_ZPP_SimpleEvent_obj::__CreateEmpty() { return new ZNPList_ZPP_SimpleEvent_obj; }

void *ZNPList_ZPP_SimpleEvent_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_SimpleEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_SimpleEvent_obj > _hx_result = new ZNPList_ZPP_SimpleEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_SimpleEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a855dcb;
}

 ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8521_begin)
            	HX_STACK_THIS(this)
HXLINE(8521)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,begin,return )

void ZNPList_ZPP_SimpleEvent_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent i){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8528_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(8529)		this->head = i;
HXLINE(8530)		this->modified = true;
HXLINE(8531)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::add( ::zpp_nape::geom::ZPP_SimpleEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8534_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(8534)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXDLIN(8534)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(8534)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8534)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8534)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret->next;
HXDLIN(8534)			ret->next = null();
            		}
HXDLIN(8534)		ret->elt = o;
HXDLIN(8534)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,temp) = ret;
HXDLIN(8534)		temp->next = this->head;
HXDLIN(8534)		this->head = temp;
HXDLIN(8534)		this->modified = true;
HXDLIN(8534)		this->length++;
HXDLIN(8534)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,add,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::inlined_add( ::zpp_nape::geom::ZPP_SimpleEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8538_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(8548)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXLINE(8550)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(8551)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8557)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(8558)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret->next;
HXLINE(8559)			ret->next = null();
            		}
HXLINE(8566)		ret->elt = o;
HXLINE(8547)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,temp) = ret;
HXLINE(8569)		temp->next = this->head;
HXLINE(8570)		this->head = temp;
HXLINE(8571)		this->modified = true;
HXLINE(8572)		this->length++;
HXLINE(8573)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,inlined_add,return )

void ZNPList_ZPP_SimpleEvent_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_SimpleEvent x){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8584_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(8585)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cx_ite) = x->head;
HXLINE(8586)		while(hx::IsNotNull( cx_ite )){
HXLINE(8588)			this->add(cx_ite->elt);
HXLINE(8589)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent cur, ::zpp_nape::geom::ZPP_SimpleEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8594_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(8594)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXDLIN(8594)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(8594)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8594)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8594)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret->next;
HXDLIN(8594)			ret->next = null();
            		}
HXDLIN(8594)		ret->elt = o;
HXDLIN(8594)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,temp) = ret;
HXDLIN(8594)		if (hx::IsNull( cur )) {
HXLINE(8594)			temp->next = this->head;
HXDLIN(8594)			this->head = temp;
            		}
            		else {
HXLINE(8594)			temp->next = cur->next;
HXDLIN(8594)			cur->next = temp;
            		}
HXDLIN(8594)		this->pushmod = (this->modified = true);
HXDLIN(8594)		this->length++;
HXDLIN(8594)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SimpleEvent_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent cur, ::zpp_nape::geom::ZPP_SimpleEvent o){
            	HX_GC_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8598_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(8608)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXLINE(8610)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(8611)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(8617)			ret = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(8618)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret->next;
HXLINE(8619)			ret->next = null();
            		}
HXLINE(8626)		ret->elt = o;
HXLINE(8607)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,temp) = ret;
HXLINE(8629)		if (hx::IsNull( cur )) {
HXLINE(8630)			temp->next = this->head;
HXLINE(8631)			this->head = temp;
            		}
            		else {
HXLINE(8634)			temp->next = cur->next;
HXLINE(8635)			cur->next = temp;
            		}
HXLINE(8637)		this->pushmod = (this->modified = true);
HXLINE(8638)		this->length++;
HXLINE(8639)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SimpleEvent_obj,inlined_insert,return )

void ZNPList_ZPP_SimpleEvent_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8642_pop)
            	HX_STACK_THIS(this)
HXLINE(8642)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret) = this->head;
HXDLIN(8642)		this->head = ret->next;
HXDLIN(8642)		{
HXLINE(8642)			ret->elt = null();
HXDLIN(8642)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8642)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret;
            		}
HXDLIN(8642)		if (hx::IsNull( this->head )) {
HXLINE(8642)			this->pushmod = true;
            		}
HXDLIN(8642)		this->modified = true;
HXDLIN(8642)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,pop,(void))

void ZNPList_ZPP_SimpleEvent_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8646_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(8655)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret) = this->head;
HXLINE(8656)		this->head = ret->next;
HXLINE(8658)		{
HXLINE(8668)			ret->elt = null();
HXLINE(8669)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(8670)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret;
            		}
HXLINE(8675)		if (hx::IsNull( this->head )) {
HXLINE(8675)			this->pushmod = true;
            		}
HXLINE(8676)		this->modified = true;
HXLINE(8677)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8680_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(8680)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,ret) = this->head->elt;
HXDLIN(8680)		this->pop();
HXDLIN(8680)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8684_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(8693)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,ret) = this->head->elt;
HXLINE(8694)		this->pop();
HXLINE(8695)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_SimpleEvent_obj::remove( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8706_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(8706)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,pre) = null();
HXDLIN(8706)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cur) = this->head;
HXDLIN(8706)		while(hx::IsNotNull( cur )){
HXLINE(8706)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(8706)				{
HXLINE(8706)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,old);
HXDLIN(8706)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXDLIN(8706)					if (hx::IsNull( pre )) {
HXLINE(8706)						old = this->head;
HXDLIN(8706)						ret = old->next;
HXDLIN(8706)						this->head = ret;
HXDLIN(8706)						if (hx::IsNull( this->head )) {
HXLINE(8706)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(8706)						old = pre->next;
HXDLIN(8706)						ret = old->next;
HXDLIN(8706)						pre->next = ret;
HXDLIN(8706)						if (hx::IsNull( ret )) {
HXLINE(8706)							this->pushmod = true;
            						}
            					}
HXDLIN(8706)					{
HXLINE(8706)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,o) = old;
HXDLIN(8706)						o->elt = null();
HXDLIN(8706)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8706)						::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = o;
            					}
HXDLIN(8706)					this->modified = true;
HXDLIN(8706)					this->length--;
HXDLIN(8706)					this->pushmod = true;
            				}
HXDLIN(8706)				goto _hx_goto_13;
            			}
HXDLIN(8706)			pre = cur;
HXDLIN(8706)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,remove,(void))

bool ZNPList_ZPP_SimpleEvent_obj::try_remove( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8708_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(8717)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,pre) = null();
HXLINE(8718)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cur) = this->head;
HXLINE(8719)		HX_VARI( bool,ret) = false;
HXLINE(8720)		while(hx::IsNotNull( cur )){
HXLINE(8721)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(8722)				this->erase(pre);
HXLINE(8723)				ret = true;
HXLINE(8724)				goto _hx_goto_15;
            			}
HXLINE(8726)			pre = cur;
HXLINE(8727)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(8729)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,try_remove,return )

void ZNPList_ZPP_SimpleEvent_obj::inlined_remove( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8742_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(8742)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,pre) = null();
HXDLIN(8742)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cur) = this->head;
HXDLIN(8742)		while(hx::IsNotNull( cur )){
HXLINE(8742)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(8742)				{
HXLINE(8742)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,old);
HXDLIN(8742)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXDLIN(8742)					if (hx::IsNull( pre )) {
HXLINE(8742)						old = this->head;
HXDLIN(8742)						ret = old->next;
HXDLIN(8742)						this->head = ret;
HXDLIN(8742)						if (hx::IsNull( this->head )) {
HXLINE(8742)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(8742)						old = pre->next;
HXDLIN(8742)						ret = old->next;
HXDLIN(8742)						pre->next = ret;
HXDLIN(8742)						if (hx::IsNull( ret )) {
HXLINE(8742)							this->pushmod = true;
            						}
            					}
HXDLIN(8742)					{
HXLINE(8742)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,o) = old;
HXDLIN(8742)						o->elt = null();
HXDLIN(8742)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8742)						::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = o;
            					}
HXDLIN(8742)					this->modified = true;
HXDLIN(8742)					this->length--;
HXDLIN(8742)					this->pushmod = true;
            				}
HXDLIN(8742)				goto _hx_goto_17;
            			}
HXDLIN(8742)			pre = cur;
HXDLIN(8742)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,inlined_remove,(void))

bool ZNPList_ZPP_SimpleEvent_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8746_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(8755)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,pre) = null();
HXLINE(8756)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cur) = this->head;
HXLINE(8757)		HX_VARI( bool,ret) = false;
HXLINE(8758)		while(hx::IsNotNull( cur )){
HXLINE(8759)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(8760)				{
HXLINE(8760)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,old);
HXDLIN(8760)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret1,"ret");
HXDLIN(8760)					if (hx::IsNull( pre )) {
HXLINE(8760)						old = this->head;
HXDLIN(8760)						ret1 = old->next;
HXDLIN(8760)						this->head = ret1;
HXDLIN(8760)						if (hx::IsNull( this->head )) {
HXLINE(8760)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(8760)						old = pre->next;
HXDLIN(8760)						ret1 = old->next;
HXDLIN(8760)						pre->next = ret1;
HXDLIN(8760)						if (hx::IsNull( ret1 )) {
HXLINE(8760)							this->pushmod = true;
            						}
            					}
HXDLIN(8760)					{
HXLINE(8760)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,o) = old;
HXDLIN(8760)						o->elt = null();
HXDLIN(8760)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8760)						::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = o;
            					}
HXDLIN(8760)					this->modified = true;
HXDLIN(8760)					this->length--;
HXDLIN(8760)					this->pushmod = true;
            				}
HXLINE(8761)				ret = true;
HXLINE(8762)				goto _hx_goto_19;
            			}
HXLINE(8764)			pre = cur;
HXLINE(8765)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(8767)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent pre){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8770_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(8770)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,old);
HXDLIN(8770)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXDLIN(8770)		if (hx::IsNull( pre )) {
HXLINE(8770)			old = this->head;
HXDLIN(8770)			ret = old->next;
HXDLIN(8770)			this->head = ret;
HXDLIN(8770)			if (hx::IsNull( this->head )) {
HXLINE(8770)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(8770)			old = pre->next;
HXDLIN(8770)			ret = old->next;
HXDLIN(8770)			pre->next = ret;
HXDLIN(8770)			if (hx::IsNull( ret )) {
HXLINE(8770)				this->pushmod = true;
            			}
            		}
HXDLIN(8770)		{
HXLINE(8770)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,o) = old;
HXDLIN(8770)			o->elt = null();
HXDLIN(8770)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8770)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = o;
            		}
HXDLIN(8770)		this->modified = true;
HXDLIN(8770)		this->length--;
HXDLIN(8770)		this->pushmod = true;
HXDLIN(8770)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent pre){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8774_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(8783)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,old);
HXLINE(8784)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret);
HXLINE(8785)		if (hx::IsNull( pre )) {
HXLINE(8786)			old = this->head;
HXLINE(8787)			ret = old->next;
HXLINE(8788)			this->head = ret;
HXLINE(8789)			if (hx::IsNull( this->head )) {
HXLINE(8789)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(8792)			old = pre->next;
HXLINE(8793)			ret = old->next;
HXLINE(8794)			pre->next = ret;
HXLINE(8795)			if (hx::IsNull( ret )) {
HXLINE(8795)				this->pushmod = true;
            			}
            		}
HXLINE(8798)		{
HXLINE(8799)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,o) = old;
HXLINE(8808)			o->elt = null();
HXLINE(8809)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(8810)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = o;
            		}
HXLINE(8815)		this->modified = true;
HXLINE(8816)		this->length--;
HXLINE(8817)		this->pushmod = true;
HXLINE(8818)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent pre,int n){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8820_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(8821)		while(true){
HXLINE(8821)			bool _hx_tmp;
HXDLIN(8821)			n = (n - (int)1);
HXDLIN(8821)			if (((n + (int)1) > (int)0)) {
HXLINE(8821)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(8821)				_hx_tmp = false;
            			}
HXDLIN(8821)			if (!(_hx_tmp)) {
HXLINE(8821)				goto _hx_goto_23;
            			}
HXDLIN(8821)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(8822)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SimpleEvent_obj,splice,return )

void ZNPList_ZPP_SimpleEvent_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8825_clear)
            	HX_STACK_THIS(this)
HXLINE(8825)		while(hx::IsNotNull( this->head )){
HXLINE(8825)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret) = this->head;
HXDLIN(8825)			this->head = ret->next;
HXDLIN(8825)			{
HXLINE(8825)				ret->elt = null();
HXDLIN(8825)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8825)				::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret;
            			}
HXDLIN(8825)			if (hx::IsNull( this->head )) {
HXLINE(8825)				this->pushmod = true;
            			}
HXDLIN(8825)			this->modified = true;
HXDLIN(8825)			this->length--;
            		}
HXDLIN(8825)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,clear,(void))

void ZNPList_ZPP_SimpleEvent_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8830_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(8831)		while(hx::IsNotNull( this->head )){
HXLINE(8831)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret) = this->head;
HXDLIN(8831)			this->head = ret->next;
HXDLIN(8831)			{
HXLINE(8831)				ret->elt = null();
HXDLIN(8831)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(8831)				::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = ret;
            			}
HXDLIN(8831)			if (hx::IsNull( this->head )) {
HXLINE(8831)				this->pushmod = true;
            			}
HXDLIN(8831)			this->modified = true;
HXDLIN(8831)			this->length--;
            		}
HXLINE(8832)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,inlined_clear,(void))

void ZNPList_ZPP_SimpleEvent_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8835_reverse)
            	HX_STACK_THIS(this)
HXLINE(8836)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cur) = this->head;
HXLINE(8837)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,pre) = null();
HXLINE(8838)		while(hx::IsNotNull( cur )){
HXLINE(8839)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,nx) = cur->next;
HXLINE(8840)			cur->next = pre;
HXLINE(8841)			this->head = cur;
HXLINE(8842)			pre = cur;
HXLINE(8843)			cur = nx;
            		}
HXLINE(8845)		this->modified = true;
HXLINE(8846)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,reverse,(void))

bool ZNPList_ZPP_SimpleEvent_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8851_empty)
            	HX_STACK_THIS(this)
HXLINE(8851)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,empty,return )

int ZNPList_ZPP_SimpleEvent_obj::size(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8856_size)
            	HX_STACK_THIS(this)
HXLINE(8856)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,size,return )

bool ZNPList_ZPP_SimpleEvent_obj::has( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8859_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(8859)		HX_VAR( bool,ret);
HXDLIN(8859)		{
HXLINE(8859)			ret = false;
HXDLIN(8859)			{
HXLINE(8859)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cx_ite) = this->head;
HXDLIN(8859)				while(hx::IsNotNull( cx_ite )){
HXLINE(8859)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(8859)						ret = true;
HXDLIN(8859)						goto _hx_goto_33;
            					}
HXDLIN(8859)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(8859)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,has,return )

bool ZNPList_ZPP_SimpleEvent_obj::inlined_has( ::zpp_nape::geom::ZPP_SimpleEvent obj){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8863_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(8872)		HX_VAR( bool,ret);
HXLINE(8873)		{
HXLINE(8874)			ret = false;
HXLINE(8875)			{
HXLINE(8876)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cx_ite) = this->head;
HXLINE(8877)				while(hx::IsNotNull( cx_ite )){
HXLINE(8880)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(8881)						ret = true;
HXLINE(8882)						goto _hx_goto_35;
            					}
HXLINE(8885)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(8889)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::front(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8894_front)
            	HX_STACK_THIS(this)
HXLINE(8894)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,front,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::back(){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8896_back)
            	HX_STACK_THIS(this)
HXLINE(8897)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret) = this->head;
HXLINE(8898)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,cur) = ret;
HXLINE(8899)		while(hx::IsNotNull( cur )){
HXLINE(8900)			ret = cur;
HXLINE(8901)			cur = cur->next;
            		}
HXLINE(8903)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SimpleEvent_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8905_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(8914)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,ret) = this->head;
HXLINE(8915)		while(true){
HXLINE(8915)			bool _hx_tmp;
HXDLIN(8915)			ind = (ind - (int)1);
HXDLIN(8915)			if (((ind + (int)1) > (int)0)) {
HXLINE(8915)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(8915)				_hx_tmp = false;
            			}
HXDLIN(8915)			if (!(_hx_tmp)) {
HXLINE(8915)				goto _hx_goto_40;
            			}
HXDLIN(8915)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(8916)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_SimpleEvent ZNPList_ZPP_SimpleEvent_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_ae4fe6fd3cd88373_8918_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(8927)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,it) = this->iterator_at(ind);
HXLINE(8928)		if (hx::IsNotNull( it )) {
HXLINE(8928)			return it->elt;
            		}
            		else {
HXLINE(8928)			return null();
            		}
HXDLIN(8928)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SimpleEvent_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_SimpleEvent_obj > ZNPList_ZPP_SimpleEvent_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_SimpleEvent_obj > __this = new ZNPList_ZPP_SimpleEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_SimpleEvent_obj > ZNPList_ZPP_SimpleEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_SimpleEvent_obj *__this = (ZNPList_ZPP_SimpleEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_SimpleEvent_obj), true, "zpp_nape.util.ZNPList_ZPP_SimpleEvent"));
	*(void **)__this = ZNPList_ZPP_SimpleEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_SimpleEvent_obj::ZNPList_ZPP_SimpleEvent_obj()
{
}

void ZNPList_ZPP_SimpleEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_SimpleEvent);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_SimpleEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_SimpleEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_SimpleEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_SimpleEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_SimpleEvent_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_SimpleEvent*/ ,(int)offsetof(ZNPList_ZPP_SimpleEvent_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_SimpleEvent_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_SimpleEvent_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_SimpleEvent_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_SimpleEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_SimpleEvent_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_SimpleEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_SimpleEvent_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_SimpleEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_SimpleEvent_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_SimpleEvent_obj::__mClass;

void ZNPList_ZPP_SimpleEvent_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_SimpleEvent_obj;
	ZNPList_ZPP_SimpleEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_SimpleEvent","\x73","\x0d","\x4a","\x5b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_SimpleEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_SimpleEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_SimpleEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_SimpleEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_SimpleEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_SimpleEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
