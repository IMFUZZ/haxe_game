// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSetPair
#include <zpp_nape/util/ZNPList_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4762_new,"zpp_nape.util.ZNPList_ZPP_CbSetPair","new",0x5bf1931a,"zpp_nape.util.ZNPList_ZPP_CbSetPair.new","zpp_nape/util/Lists.hx",4762,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4768_begin,"zpp_nape.util.ZNPList_ZPP_CbSetPair","begin",0x80f54f63,"zpp_nape.util.ZNPList_ZPP_CbSetPair.begin","zpp_nape/util/Lists.hx",4768,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4775_setbegin,"zpp_nape.util.ZNPList_ZPP_CbSetPair","setbegin",0x3100fe4d,"zpp_nape.util.ZNPList_ZPP_CbSetPair.setbegin","zpp_nape/util/Lists.hx",4775,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4781_add,"zpp_nape.util.ZNPList_ZPP_CbSetPair","add",0x5be7b4db,"zpp_nape.util.ZNPList_ZPP_CbSetPair.add","zpp_nape/util/Lists.hx",4781,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4785_inlined_add,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_add",0xf7c45947,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_add","zpp_nape/util/Lists.hx",4785,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4831_addAll,"zpp_nape.util.ZNPList_ZPP_CbSetPair","addAll",0x59d43706,"zpp_nape.util.ZNPList_ZPP_CbSetPair.addAll","zpp_nape/util/Lists.hx",4831,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4841_insert,"zpp_nape.util.ZNPList_ZPP_CbSetPair","insert",0x58b670bf,"zpp_nape.util.ZNPList_ZPP_CbSetPair.insert","zpp_nape/util/Lists.hx",4841,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4845_inlined_insert,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_insert",0x3cbb57d3,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_insert","zpp_nape/util/Lists.hx",4845,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4889_pop,"zpp_nape.util.ZNPList_ZPP_CbSetPair","pop",0x5bf3204b,"zpp_nape.util.ZNPList_ZPP_CbSetPair.pop","zpp_nape/util/Lists.hx",4889,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4893_inlined_pop,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_pop",0xf7cfc4b7,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_pop","zpp_nape/util/Lists.hx",4893,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4927_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CbSetPair","pop_unsafe",0x4111e4da,"zpp_nape.util.ZNPList_ZPP_CbSetPair.pop_unsafe","zpp_nape/util/Lists.hx",4927,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4931_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_pop_unsafe",0x8b19e5ee,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_pop_unsafe","zpp_nape/util/Lists.hx",4931,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4953_remove,"zpp_nape.util.ZNPList_ZPP_CbSetPair","remove",0xbf61c9ca,"zpp_nape.util.ZNPList_ZPP_CbSetPair.remove","zpp_nape/util/Lists.hx",4953,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4955_try_remove,"zpp_nape.util.ZNPList_ZPP_CbSetPair","try_remove",0x583c1a8e,"zpp_nape.util.ZNPList_ZPP_CbSetPair.try_remove","zpp_nape/util/Lists.hx",4955,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4989_inlined_remove,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_remove",0xa366b0de,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_remove","zpp_nape/util/Lists.hx",4989,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_4993_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_try_remove",0xa2441ba2,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_try_remove","zpp_nape/util/Lists.hx",4993,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5017_erase,"zpp_nape.util.ZNPList_ZPP_CbSetPair","erase",0x43bc4e20,"zpp_nape.util.ZNPList_ZPP_CbSetPair.erase","zpp_nape/util/Lists.hx",5017,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5021_inlined_erase,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_erase",0x0b5be58c,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_erase","zpp_nape/util/Lists.hx",5021,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5067_splice,"zpp_nape.util.ZNPList_ZPP_CbSetPair","splice",0x7a77b302,"zpp_nape.util.ZNPList_ZPP_CbSetPair.splice","zpp_nape/util/Lists.hx",5067,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5072_clear,"zpp_nape.util.ZNPList_ZPP_CbSetPair","clear",0x18fad6c7,"zpp_nape.util.ZNPList_ZPP_CbSetPair.clear","zpp_nape/util/Lists.hx",5072,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5077_inlined_clear,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_clear",0xe09a6e33,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_clear","zpp_nape/util/Lists.hx",5077,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5082_reverse,"zpp_nape.util.ZNPList_ZPP_CbSetPair","reverse",0xde2ae0dc,"zpp_nape.util.ZNPList_ZPP_CbSetPair.reverse","zpp_nape/util/Lists.hx",5082,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5098_empty,"zpp_nape.util.ZNPList_ZPP_CbSetPair","empty",0x40799fc7,"zpp_nape.util.ZNPList_ZPP_CbSetPair.empty","zpp_nape/util/Lists.hx",5098,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5103_size,"zpp_nape.util.ZNPList_ZPP_CbSetPair","size",0x1ac040c7,"zpp_nape.util.ZNPList_ZPP_CbSetPair.size","zpp_nape/util/Lists.hx",5103,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5106_has,"zpp_nape.util.ZNPList_ZPP_CbSetPair","has",0x5bed0214,"zpp_nape.util.ZNPList_ZPP_CbSetPair.has","zpp_nape/util/Lists.hx",5106,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5110_inlined_has,"zpp_nape.util.ZNPList_ZPP_CbSetPair","inlined_has",0xf7c9a680,"zpp_nape.util.ZNPList_ZPP_CbSetPair.inlined_has","zpp_nape/util/Lists.hx",5110,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5141_front,"zpp_nape.util.ZNPList_ZPP_CbSetPair","front",0xd72d7de3,"zpp_nape.util.ZNPList_ZPP_CbSetPair.front","zpp_nape/util/Lists.hx",5141,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5143_back,"zpp_nape.util.ZNPList_ZPP_CbSetPair","back",0x0f7d7a2d,"zpp_nape.util.ZNPList_ZPP_CbSetPair.back","zpp_nape/util/Lists.hx",5143,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5152_iterator_at,"zpp_nape.util.ZNPList_ZPP_CbSetPair","iterator_at",0xfc68969e,"zpp_nape.util.ZNPList_ZPP_CbSetPair.iterator_at","zpp_nape/util/Lists.hx",5152,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4765290f237be21a_5165_at,"zpp_nape.util.ZNPList_ZPP_CbSetPair","at",0x6a06c779,"zpp_nape.util.ZNPList_ZPP_CbSetPair.at","zpp_nape/util/Lists.hx",5165,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_CbSetPair_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4762_new)
            	HX_STACK_THIS(this)
HXLINE(4772)		this->length = (int)0;
HXLINE(4771)		this->pushmod = false;
HXLINE(4770)		this->modified = false;
HXLINE(4763)		this->head = null();
            	}

Dynamic ZNPList_ZPP_CbSetPair_obj::__CreateEmpty() { return new ZNPList_ZPP_CbSetPair_obj; }

void *ZNPList_ZPP_CbSetPair_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_CbSetPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_CbSetPair_obj > _hx_result = new ZNPList_ZPP_CbSetPair_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_CbSetPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3659c880;
}

 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4768_begin)
            	HX_STACK_THIS(this)
HXLINE(4768)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,begin,return )

void ZNPList_ZPP_CbSetPair_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair i){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4775_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(4776)		this->head = i;
HXLINE(4777)		this->modified = true;
HXLINE(4778)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,setbegin,(void))

 ::zpp_nape::callbacks::ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::add( ::zpp_nape::callbacks::ZPP_CbSetPair o){
            	HX_GC_STACKFRAME(&_hx_pos_4765290f237be21a_4781_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(4781)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXDLIN(4781)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(4781)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4781)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(4781)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret->next;
HXDLIN(4781)			ret->next = null();
            		}
HXDLIN(4781)		ret->elt = o;
HXDLIN(4781)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,temp) = ret;
HXDLIN(4781)		temp->next = this->head;
HXDLIN(4781)		this->head = temp;
HXDLIN(4781)		this->modified = true;
HXDLIN(4781)		this->length++;
HXDLIN(4781)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,add,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::inlined_add( ::zpp_nape::callbacks::ZPP_CbSetPair o){
            	HX_GC_STACKFRAME(&_hx_pos_4765290f237be21a_4785_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(4795)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXLINE(4797)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(4798)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4804)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(4805)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret->next;
HXLINE(4806)			ret->next = null();
            		}
HXLINE(4813)		ret->elt = o;
HXLINE(4794)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,temp) = ret;
HXLINE(4816)		temp->next = this->head;
HXLINE(4817)		this->head = temp;
HXLINE(4818)		this->modified = true;
HXLINE(4819)		this->length++;
HXLINE(4820)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,inlined_add,return )

void ZNPList_ZPP_CbSetPair_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_CbSetPair x){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4831_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(4832)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cx_ite) = x->head;
HXLINE(4833)		while(hx::IsNotNull( cx_ite )){
HXLINE(4835)			this->add(cx_ite->elt);
HXLINE(4836)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cur, ::zpp_nape::callbacks::ZPP_CbSetPair o){
            	HX_GC_STACKFRAME(&_hx_pos_4765290f237be21a_4841_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(4841)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXDLIN(4841)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(4841)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4841)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(4841)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret->next;
HXDLIN(4841)			ret->next = null();
            		}
HXDLIN(4841)		ret->elt = o;
HXDLIN(4841)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,temp) = ret;
HXDLIN(4841)		if (hx::IsNull( cur )) {
HXLINE(4841)			temp->next = this->head;
HXDLIN(4841)			this->head = temp;
            		}
            		else {
HXLINE(4841)			temp->next = cur->next;
HXDLIN(4841)			cur->next = temp;
            		}
HXDLIN(4841)		this->pushmod = (this->modified = true);
HXDLIN(4841)		this->length++;
HXDLIN(4841)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbSetPair_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair cur, ::zpp_nape::callbacks::ZPP_CbSetPair o){
            	HX_GC_STACKFRAME(&_hx_pos_4765290f237be21a_4845_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(4855)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXLINE(4857)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(4858)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(4864)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(4865)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret->next;
HXLINE(4866)			ret->next = null();
            		}
HXLINE(4873)		ret->elt = o;
HXLINE(4854)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,temp) = ret;
HXLINE(4876)		if (hx::IsNull( cur )) {
HXLINE(4877)			temp->next = this->head;
HXLINE(4878)			this->head = temp;
            		}
            		else {
HXLINE(4881)			temp->next = cur->next;
HXLINE(4882)			cur->next = temp;
            		}
HXLINE(4884)		this->pushmod = (this->modified = true);
HXLINE(4885)		this->length++;
HXLINE(4886)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbSetPair_obj,inlined_insert,return )

void ZNPList_ZPP_CbSetPair_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4889_pop)
            	HX_STACK_THIS(this)
HXLINE(4889)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret) = this->head;
HXDLIN(4889)		this->head = ret->next;
HXDLIN(4889)		{
HXLINE(4889)			ret->elt = null();
HXDLIN(4889)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(4889)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret;
            		}
HXDLIN(4889)		if (hx::IsNull( this->head )) {
HXLINE(4889)			this->pushmod = true;
            		}
HXDLIN(4889)		this->modified = true;
HXDLIN(4889)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,pop,(void))

void ZNPList_ZPP_CbSetPair_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4893_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(4902)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret) = this->head;
HXLINE(4903)		this->head = ret->next;
HXLINE(4905)		{
HXLINE(4915)			ret->elt = null();
HXLINE(4916)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(4917)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret;
            		}
HXLINE(4922)		if (hx::IsNull( this->head )) {
HXLINE(4922)			this->pushmod = true;
            		}
HXLINE(4923)		this->modified = true;
HXLINE(4924)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,inlined_pop,(void))

 ::zpp_nape::callbacks::ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4927_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(4927)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret) = this->head->elt;
HXDLIN(4927)		this->pop();
HXDLIN(4927)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,pop_unsafe,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4931_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(4940)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret) = this->head->elt;
HXLINE(4941)		this->pop();
HXLINE(4942)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_CbSetPair_obj::remove( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4953_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4953)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,pre) = null();
HXDLIN(4953)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cur) = this->head;
HXDLIN(4953)		while(hx::IsNotNull( cur )){
HXLINE(4953)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(4953)				{
HXLINE(4953)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,old);
HXDLIN(4953)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXDLIN(4953)					if (hx::IsNull( pre )) {
HXLINE(4953)						old = this->head;
HXDLIN(4953)						ret = old->next;
HXDLIN(4953)						this->head = ret;
HXDLIN(4953)						if (hx::IsNull( this->head )) {
HXLINE(4953)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(4953)						old = pre->next;
HXDLIN(4953)						ret = old->next;
HXDLIN(4953)						pre->next = ret;
HXDLIN(4953)						if (hx::IsNull( ret )) {
HXLINE(4953)							this->pushmod = true;
            						}
            					}
HXDLIN(4953)					{
HXLINE(4953)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,o) = old;
HXDLIN(4953)						o->elt = null();
HXDLIN(4953)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(4953)						::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = o;
            					}
HXDLIN(4953)					this->modified = true;
HXDLIN(4953)					this->length--;
HXDLIN(4953)					this->pushmod = true;
            				}
HXDLIN(4953)				goto _hx_goto_13;
            			}
HXDLIN(4953)			pre = cur;
HXDLIN(4953)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,remove,(void))

bool ZNPList_ZPP_CbSetPair_obj::try_remove( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4955_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4964)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,pre) = null();
HXLINE(4965)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cur) = this->head;
HXLINE(4966)		HX_VARI( bool,ret) = false;
HXLINE(4967)		while(hx::IsNotNull( cur )){
HXLINE(4968)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(4969)				this->erase(pre);
HXLINE(4970)				ret = true;
HXLINE(4971)				goto _hx_goto_15;
            			}
HXLINE(4973)			pre = cur;
HXLINE(4974)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(4976)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,try_remove,return )

void ZNPList_ZPP_CbSetPair_obj::inlined_remove( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4989_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4989)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,pre) = null();
HXDLIN(4989)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cur) = this->head;
HXDLIN(4989)		while(hx::IsNotNull( cur )){
HXLINE(4989)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(4989)				{
HXLINE(4989)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,old);
HXDLIN(4989)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXDLIN(4989)					if (hx::IsNull( pre )) {
HXLINE(4989)						old = this->head;
HXDLIN(4989)						ret = old->next;
HXDLIN(4989)						this->head = ret;
HXDLIN(4989)						if (hx::IsNull( this->head )) {
HXLINE(4989)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(4989)						old = pre->next;
HXDLIN(4989)						ret = old->next;
HXDLIN(4989)						pre->next = ret;
HXDLIN(4989)						if (hx::IsNull( ret )) {
HXLINE(4989)							this->pushmod = true;
            						}
            					}
HXDLIN(4989)					{
HXLINE(4989)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,o) = old;
HXDLIN(4989)						o->elt = null();
HXDLIN(4989)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(4989)						::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = o;
            					}
HXDLIN(4989)					this->modified = true;
HXDLIN(4989)					this->length--;
HXDLIN(4989)					this->pushmod = true;
            				}
HXDLIN(4989)				goto _hx_goto_17;
            			}
HXDLIN(4989)			pre = cur;
HXDLIN(4989)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,inlined_remove,(void))

bool ZNPList_ZPP_CbSetPair_obj::inlined_try_remove( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_4993_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5002)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,pre) = null();
HXLINE(5003)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cur) = this->head;
HXLINE(5004)		HX_VARI( bool,ret) = false;
HXLINE(5005)		while(hx::IsNotNull( cur )){
HXLINE(5006)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(5007)				{
HXLINE(5007)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,old);
HXDLIN(5007)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret1,"ret");
HXDLIN(5007)					if (hx::IsNull( pre )) {
HXLINE(5007)						old = this->head;
HXDLIN(5007)						ret1 = old->next;
HXDLIN(5007)						this->head = ret1;
HXDLIN(5007)						if (hx::IsNull( this->head )) {
HXLINE(5007)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(5007)						old = pre->next;
HXDLIN(5007)						ret1 = old->next;
HXDLIN(5007)						pre->next = ret1;
HXDLIN(5007)						if (hx::IsNull( ret1 )) {
HXLINE(5007)							this->pushmod = true;
            						}
            					}
HXDLIN(5007)					{
HXLINE(5007)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,o) = old;
HXDLIN(5007)						o->elt = null();
HXDLIN(5007)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(5007)						::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = o;
            					}
HXDLIN(5007)					this->modified = true;
HXDLIN(5007)					this->length--;
HXDLIN(5007)					this->pushmod = true;
            				}
HXLINE(5008)				ret = true;
HXLINE(5009)				goto _hx_goto_19;
            			}
HXLINE(5011)			pre = cur;
HXLINE(5012)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(5014)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair pre){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5017_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(5017)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,old);
HXDLIN(5017)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXDLIN(5017)		if (hx::IsNull( pre )) {
HXLINE(5017)			old = this->head;
HXDLIN(5017)			ret = old->next;
HXDLIN(5017)			this->head = ret;
HXDLIN(5017)			if (hx::IsNull( this->head )) {
HXLINE(5017)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(5017)			old = pre->next;
HXDLIN(5017)			ret = old->next;
HXDLIN(5017)			pre->next = ret;
HXDLIN(5017)			if (hx::IsNull( ret )) {
HXLINE(5017)				this->pushmod = true;
            			}
            		}
HXDLIN(5017)		{
HXLINE(5017)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,o) = old;
HXDLIN(5017)			o->elt = null();
HXDLIN(5017)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(5017)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = o;
            		}
HXDLIN(5017)		this->modified = true;
HXDLIN(5017)		this->length--;
HXDLIN(5017)		this->pushmod = true;
HXDLIN(5017)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair pre){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5021_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(5030)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,old);
HXLINE(5031)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret);
HXLINE(5032)		if (hx::IsNull( pre )) {
HXLINE(5033)			old = this->head;
HXLINE(5034)			ret = old->next;
HXLINE(5035)			this->head = ret;
HXLINE(5036)			if (hx::IsNull( this->head )) {
HXLINE(5036)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(5039)			old = pre->next;
HXLINE(5040)			ret = old->next;
HXLINE(5041)			pre->next = ret;
HXLINE(5042)			if (hx::IsNull( ret )) {
HXLINE(5042)				this->pushmod = true;
            			}
            		}
HXLINE(5045)		{
HXLINE(5046)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,o) = old;
HXLINE(5055)			o->elt = null();
HXLINE(5056)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(5057)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = o;
            		}
HXLINE(5062)		this->modified = true;
HXLINE(5063)		this->length--;
HXLINE(5064)		this->pushmod = true;
HXLINE(5065)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair pre,int n){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5067_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(5068)		while(true){
HXLINE(5068)			bool _hx_tmp;
HXDLIN(5068)			n = (n - (int)1);
HXDLIN(5068)			if (((n + (int)1) > (int)0)) {
HXLINE(5068)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(5068)				_hx_tmp = false;
            			}
HXDLIN(5068)			if (!(_hx_tmp)) {
HXLINE(5068)				goto _hx_goto_23;
            			}
HXDLIN(5068)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(5069)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbSetPair_obj,splice,return )

void ZNPList_ZPP_CbSetPair_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5072_clear)
            	HX_STACK_THIS(this)
HXLINE(5072)		while(hx::IsNotNull( this->head )){
HXLINE(5072)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret) = this->head;
HXDLIN(5072)			this->head = ret->next;
HXDLIN(5072)			{
HXLINE(5072)				ret->elt = null();
HXDLIN(5072)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(5072)				::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret;
            			}
HXDLIN(5072)			if (hx::IsNull( this->head )) {
HXLINE(5072)				this->pushmod = true;
            			}
HXDLIN(5072)			this->modified = true;
HXDLIN(5072)			this->length--;
            		}
HXDLIN(5072)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,clear,(void))

void ZNPList_ZPP_CbSetPair_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5077_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(5078)		while(hx::IsNotNull( this->head )){
HXLINE(5078)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret) = this->head;
HXDLIN(5078)			this->head = ret->next;
HXDLIN(5078)			{
HXLINE(5078)				ret->elt = null();
HXDLIN(5078)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(5078)				::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = ret;
            			}
HXDLIN(5078)			if (hx::IsNull( this->head )) {
HXLINE(5078)				this->pushmod = true;
            			}
HXDLIN(5078)			this->modified = true;
HXDLIN(5078)			this->length--;
            		}
HXLINE(5079)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,inlined_clear,(void))

void ZNPList_ZPP_CbSetPair_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5082_reverse)
            	HX_STACK_THIS(this)
HXLINE(5083)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cur) = this->head;
HXLINE(5084)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,pre) = null();
HXLINE(5085)		while(hx::IsNotNull( cur )){
HXLINE(5086)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,nx) = cur->next;
HXLINE(5087)			cur->next = pre;
HXLINE(5088)			this->head = cur;
HXLINE(5089)			pre = cur;
HXLINE(5090)			cur = nx;
            		}
HXLINE(5092)		this->modified = true;
HXLINE(5093)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,reverse,(void))

bool ZNPList_ZPP_CbSetPair_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5098_empty)
            	HX_STACK_THIS(this)
HXLINE(5098)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,empty,return )

int ZNPList_ZPP_CbSetPair_obj::size(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5103_size)
            	HX_STACK_THIS(this)
HXLINE(5103)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,size,return )

bool ZNPList_ZPP_CbSetPair_obj::has( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5106_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5106)		HX_VAR( bool,ret);
HXDLIN(5106)		{
HXLINE(5106)			ret = false;
HXDLIN(5106)			{
HXLINE(5106)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cx_ite) = this->head;
HXDLIN(5106)				while(hx::IsNotNull( cx_ite )){
HXLINE(5106)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(5106)						ret = true;
HXDLIN(5106)						goto _hx_goto_33;
            					}
HXDLIN(5106)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(5106)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,has,return )

bool ZNPList_ZPP_CbSetPair_obj::inlined_has( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5110_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5119)		HX_VAR( bool,ret);
HXLINE(5120)		{
HXLINE(5121)			ret = false;
HXLINE(5122)			{
HXLINE(5123)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cx_ite) = this->head;
HXLINE(5124)				while(hx::IsNotNull( cx_ite )){
HXLINE(5127)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(5128)						ret = true;
HXLINE(5129)						goto _hx_goto_35;
            					}
HXLINE(5132)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(5136)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,inlined_has,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::front(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5141_front)
            	HX_STACK_THIS(this)
HXLINE(5141)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,front,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::back(){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5143_back)
            	HX_STACK_THIS(this)
HXLINE(5144)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret) = this->head;
HXLINE(5145)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cur) = ret;
HXLINE(5146)		while(hx::IsNotNull( cur )){
HXLINE(5147)			ret = cur;
HXLINE(5148)			cur = cur->next;
            		}
HXLINE(5150)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbSetPair_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5152_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(5161)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,ret) = this->head;
HXLINE(5162)		while(true){
HXLINE(5162)			bool _hx_tmp;
HXDLIN(5162)			ind = (ind - (int)1);
HXDLIN(5162)			if (((ind + (int)1) > (int)0)) {
HXLINE(5162)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(5162)				_hx_tmp = false;
            			}
HXDLIN(5162)			if (!(_hx_tmp)) {
HXLINE(5162)				goto _hx_goto_40;
            			}
HXDLIN(5162)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(5163)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,iterator_at,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZNPList_ZPP_CbSetPair_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_4765290f237be21a_5165_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(5174)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,it) = this->iterator_at(ind);
HXLINE(5175)		if (hx::IsNotNull( it )) {
HXLINE(5175)			return it->elt;
            		}
            		else {
HXLINE(5175)			return null();
            		}
HXDLIN(5175)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbSetPair_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_CbSetPair_obj > ZNPList_ZPP_CbSetPair_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_CbSetPair_obj > __this = new ZNPList_ZPP_CbSetPair_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_CbSetPair_obj > ZNPList_ZPP_CbSetPair_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_CbSetPair_obj *__this = (ZNPList_ZPP_CbSetPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_CbSetPair_obj), true, "zpp_nape.util.ZNPList_ZPP_CbSetPair"));
	*(void **)__this = ZNPList_ZPP_CbSetPair_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_CbSetPair_obj::ZNPList_ZPP_CbSetPair_obj()
{
}

void ZNPList_ZPP_CbSetPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_CbSetPair);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_CbSetPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_CbSetPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_CbSetPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_CbSetPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_CbSetPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_CbSetPair*/ ,(int)offsetof(ZNPList_ZPP_CbSetPair_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CbSetPair_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CbSetPair_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_CbSetPair_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_CbSetPair_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_CbSetPair_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_CbSetPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_CbSetPair_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_CbSetPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_CbSetPair_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_CbSetPair_obj::__mClass;

void ZNPList_ZPP_CbSetPair_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_CbSetPair_obj;
	ZNPList_ZPP_CbSetPair_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_CbSetPair","\x28","\xbe","\x77","\x8b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_CbSetPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_CbSetPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_CbSetPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_CbSetPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_CbSetPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_CbSetPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
