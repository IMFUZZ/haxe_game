// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_Body
#include <zpp_nape/util/ZPP_Set_ZPP_Body.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_175_new,"zpp_nape.util.ZPP_Set_ZPP_Body","new",0x374d8e26,"zpp_nape.util.ZPP_Set_ZPP_Body.new","zpp_nape/util/RBTree.hx",175,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_202_free,"zpp_nape.util.ZPP_Set_ZPP_Body","free",0x274eec26,"zpp_nape.util.ZPP_Set_ZPP_Body.free","zpp_nape/util/RBTree.hx",202,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_209_alloc,"zpp_nape.util.ZPP_Set_ZPP_Body","alloc",0x58ccdfbb,"zpp_nape.util.ZPP_Set_ZPP_Body.alloc","zpp_nape/util/RBTree.hx",209,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_218_verify,"zpp_nape.util.ZPP_Set_ZPP_Body","verify",0xbc1a2573,"zpp_nape.util.ZPP_Set_ZPP_Body.verify","zpp_nape/util/RBTree.hx",218,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_284_empty,"zpp_nape.util.ZPP_Set_ZPP_Body","empty",0xa71375d3,"zpp_nape.util.ZPP_Set_ZPP_Body.empty","zpp_nape/util/RBTree.hx",284,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_287_singular,"zpp_nape.util.ZPP_Set_ZPP_Body","singular",0xd7693d51,"zpp_nape.util.ZPP_Set_ZPP_Body.singular","zpp_nape/util/RBTree.hx",287,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_289_size,"zpp_nape.util.ZPP_Set_ZPP_Body","size",0x2fdff03b,"zpp_nape.util.ZPP_Set_ZPP_Body.size","zpp_nape/util/RBTree.hx",289,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_320_has,"zpp_nape.util.ZPP_Set_ZPP_Body","has",0x3748fd20,"zpp_nape.util.ZPP_Set_ZPP_Body.has","zpp_nape/util/RBTree.hx",320,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_322_find,"zpp_nape.util.ZPP_Set_ZPP_Body","find",0x27481fb3,"zpp_nape.util.ZPP_Set_ZPP_Body.find","zpp_nape/util/RBTree.hx",322,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_331_has_weak,"zpp_nape.util.ZPP_Set_ZPP_Body","has_weak",0x7b73e737,"zpp_nape.util.ZPP_Set_ZPP_Body.has_weak","zpp_nape/util/RBTree.hx",331,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_333_find_weak,"zpp_nape.util.ZPP_Set_ZPP_Body","find_weak",0x17cf8fc4,"zpp_nape.util.ZPP_Set_ZPP_Body.find_weak","zpp_nape/util/RBTree.hx",333,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_343_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_Body","lower_bound",0x4de6dc06,"zpp_nape.util.ZPP_Set_ZPP_Body.lower_bound","zpp_nape/util/RBTree.hx",343,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_379_first,"zpp_nape.util.ZPP_Set_ZPP_Body","first",0x37d6b376,"zpp_nape.util.ZPP_Set_ZPP_Body.first","zpp_nape/util/RBTree.hx",379,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_392_pop_front,"zpp_nape.util.ZPP_Set_ZPP_Body","pop_front",0x04561681,"zpp_nape.util.ZPP_Set_ZPP_Body.pop_front","zpp_nape/util/RBTree.hx",392,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_417_remove,"zpp_nape.util.ZPP_Set_ZPP_Body","remove",0x1f633e3e,"zpp_nape.util.ZPP_Set_ZPP_Body.remove","zpp_nape/util/RBTree.hx",417,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_419_successor_node,"zpp_nape.util.ZPP_Set_ZPP_Body","successor_node",0xd99a5a75,"zpp_nape.util.ZPP_Set_ZPP_Body.successor_node","zpp_nape/util/RBTree.hx",419,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_442_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_Body","predecessor_node",0xe553e4f2,"zpp_nape.util.ZPP_Set_ZPP_Body.predecessor_node","zpp_nape/util/RBTree.hx",442,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_465_successor,"zpp_nape.util.ZPP_Set_ZPP_Body","successor",0xbe7513ec,"zpp_nape.util.ZPP_Set_ZPP_Body.successor","zpp_nape/util/RBTree.hx",465,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_477_predecessor,"zpp_nape.util.ZPP_Set_ZPP_Body","predecessor",0xbdc19a8f,"zpp_nape.util.ZPP_Set_ZPP_Body.predecessor","zpp_nape/util/RBTree.hx",477,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_489_remove_node,"zpp_nape.util.ZPP_Set_ZPP_Body","remove_node",0x205786e3,"zpp_nape.util.ZPP_Set_ZPP_Body.remove_node","zpp_nape/util/RBTree.hx",489,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_610_clear,"zpp_nape.util.ZPP_Set_ZPP_Body","clear",0x7f94acd3,"zpp_nape.util.ZPP_Set_ZPP_Body.clear","zpp_nape/util/RBTree.hx",610,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_614_clear_with,"zpp_nape.util.ZPP_Set_ZPP_Body","clear_with",0x49528832,"zpp_nape.util.ZPP_Set_ZPP_Body.clear_with","zpp_nape/util/RBTree.hx",614,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_622_clear_node,"zpp_nape.util.ZPP_Set_ZPP_Body","clear_node",0x43641c2e,"zpp_nape.util.ZPP_Set_ZPP_Body.clear_node","zpp_nape/util/RBTree.hx",622,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_657___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_Body","__fix_neg_red",0x519f011e,"zpp_nape.util.ZPP_Set_ZPP_Body.__fix_neg_red","zpp_nape/util/RBTree.hx",657,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_725___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_Body","__fix_dbl_red",0x5fb72efc,"zpp_nape.util.ZPP_Set_ZPP_Body.__fix_dbl_red","zpp_nape/util/RBTree.hx",725,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_813_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_Body","try_insert_bool",0x91eee0b2,"zpp_nape.util.ZPP_Set_ZPP_Body.try_insert_bool","zpp_nape/util/RBTree.hx",813,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_905_try_insert,"zpp_nape.util.ZPP_Set_ZPP_Body","try_insert",0x2bd77ff7,"zpp_nape.util.ZPP_Set_ZPP_Body.try_insert","zpp_nape/util/RBTree.hx",905,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_997_insert,"zpp_nape.util.ZPP_Set_ZPP_Body","insert",0xb8b7e533,"zpp_nape.util.ZPP_Set_ZPP_Body.insert","zpp_nape/util/RBTree.hx",997,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_ee82dba092594d88_176_boot,"zpp_nape.util.ZPP_Set_ZPP_Body","boot",0x24a7d3ac,"zpp_nape.util.ZPP_Set_ZPP_Body.boot","zpp_nape/util/RBTree.hx",176,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_Body_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_175_new)
            	HX_STACK_THIS(this)
HXLINE( 216)		this->colour = (int)0;
HXLINE( 215)		this->parent = null();
HXLINE( 214)		this->next = null();
HXLINE( 213)		this->prev = null();
HXLINE( 212)		this->data = null();
HXLINE( 211)		this->swapped = null();
HXLINE( 210)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_Body_obj::__CreateEmpty() { return new ZPP_Set_ZPP_Body_obj; }

void *ZPP_Set_ZPP_Body_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_Body_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_Body_obj > _hx_result = new ZPP_Set_ZPP_Body_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_Body_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7edc4778;
}

void ZPP_Set_ZPP_Body_obj::free(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_202_free)
            	HX_STACK_THIS(this)
HXLINE( 203)		this->data = null();
HXLINE( 204)		this->lt = null();
HXLINE( 205)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,free,(void))

void ZPP_Set_ZPP_Body_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_209_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,alloc,(void))

bool ZPP_Set_ZPP_Body_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_218_verify)
            	HX_STACK_THIS(this)
HXLINE( 228)		if (!(this->empty())) {
HXLINE( 229)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,set_ite) = this->parent;
HXLINE( 230)			while(hx::IsNotNull( set_ite->prev )){
HXLINE( 230)				set_ite = set_ite->prev;
            			}
HXLINE( 231)			while(hx::IsNotNull( set_ite )){
HXLINE( 232)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,i) = set_ite->data;
HXLINE( 233)				{
HXLINE( 234)					HX_VARI( bool,prei) = true;
HXLINE( 244)					if (!(this->empty())) {
HXLINE( 245)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,set_ite1,"set_ite") = this->parent;
HXLINE( 246)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE( 246)							set_ite1 = set_ite1->prev;
            						}
HXLINE( 247)						while(hx::IsNotNull( set_ite1 )){
HXLINE( 248)							HX_VARI(  ::zpp_nape::phys::ZPP_Body,j) = set_ite1->data;
HXLINE( 250)							if (!(prei)) {
HXLINE( 251)								bool _hx_tmp;
HXDLIN( 251)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE( 251)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE( 251)									_hx_tmp = false;
            								}
HXDLIN( 251)								if (_hx_tmp) {
HXLINE( 251)									return false;
            								}
            							}
            							else {
HXLINE( 253)								if (hx::IsEq( i,j )) {
HXLINE( 253)									prei = false;
            								}
            								else {
HXLINE( 255)									bool _hx_tmp1;
HXDLIN( 255)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE( 255)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE( 255)										_hx_tmp1 = false;
            									}
HXDLIN( 255)									if (_hx_tmp1) {
HXLINE( 255)										return false;
            									}
            								}
            							}
HXLINE( 258)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE( 259)								set_ite1 = set_ite1->next;
HXLINE( 260)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE( 260)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE( 263)								while(true){
HXLINE( 263)									bool _hx_tmp2;
HXDLIN( 263)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE( 263)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE( 263)										_hx_tmp2 = false;
            									}
HXDLIN( 263)									if (!(_hx_tmp2)) {
HXLINE( 263)										goto _hx_goto_8;
            									}
HXDLIN( 263)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE( 264)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE( 270)				if (hx::IsNotNull( set_ite->next )) {
HXLINE( 271)					set_ite = set_ite->next;
HXLINE( 272)					while(hx::IsNotNull( set_ite->prev )){
HXLINE( 272)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE( 275)					while(true){
HXLINE( 275)						bool _hx_tmp3;
HXDLIN( 275)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE( 275)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE( 275)							_hx_tmp3 = false;
            						}
HXDLIN( 275)						if (!(_hx_tmp3)) {
HXLINE( 275)							goto _hx_goto_10;
            						}
HXDLIN( 275)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE( 276)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE( 281)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,verify,return )

bool ZPP_Set_ZPP_Body_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_284_empty)
            	HX_STACK_THIS(this)
HXLINE( 284)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,empty,return )

bool ZPP_Set_ZPP_Body_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_287_singular)
            	HX_STACK_THIS(this)
HXLINE( 287)		bool _hx_tmp;
HXDLIN( 287)		if (hx::IsNotNull( this->parent )) {
HXLINE( 287)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE( 287)			_hx_tmp = false;
            		}
HXDLIN( 287)		if (_hx_tmp) {
HXLINE( 287)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE( 287)			return false;
            		}
HXDLIN( 287)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,singular,return )

int ZPP_Set_ZPP_Body_obj::size(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_289_size)
            	HX_STACK_THIS(this)
HXLINE( 290)		HX_VARI( int,ret) = (int)0;
HXLINE( 300)		if (!(this->empty())) {
HXLINE( 301)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,set_ite) = this->parent;
HXLINE( 302)			while(hx::IsNotNull( set_ite->prev )){
HXLINE( 302)				set_ite = set_ite->prev;
            			}
HXLINE( 303)			while(hx::IsNotNull( set_ite )){
HXLINE( 305)				ret = (ret + (int)1);
HXLINE( 306)				if (hx::IsNotNull( set_ite->next )) {
HXLINE( 307)					set_ite = set_ite->next;
HXLINE( 308)					while(hx::IsNotNull( set_ite->prev )){
HXLINE( 308)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE( 311)					while(true){
HXLINE( 311)						bool _hx_tmp;
HXDLIN( 311)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE( 311)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE( 311)							_hx_tmp = false;
            						}
HXDLIN( 311)						if (!(_hx_tmp)) {
HXLINE( 311)							goto _hx_goto_17;
            						}
HXDLIN( 311)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE( 312)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE( 317)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,size,return )

bool ZPP_Set_ZPP_Body_obj::has( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_320_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 320)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::find( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_322_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 323)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = this->parent;
HXLINE( 324)		while(true){
HXLINE( 324)			bool _hx_tmp;
HXDLIN( 324)			if (hx::IsNotNull( cur )) {
HXLINE( 324)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE( 324)				_hx_tmp = false;
            			}
HXDLIN( 324)			if (!(_hx_tmp)) {
HXLINE( 324)				goto _hx_goto_20;
            			}
HXLINE( 325)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE( 325)				cur = cur->prev;
            			}
            			else {
HXLINE( 326)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE( 328)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,find,return )

bool ZPP_Set_ZPP_Body_obj::has_weak( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_331_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 331)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::find_weak( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_333_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 334)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = this->parent;
HXLINE( 335)		while(hx::IsNotNull( cur )){
HXLINE( 336)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE( 336)				cur = cur->prev;
            			}
            			else {
HXLINE( 337)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE( 337)					cur = cur->next;
            				}
            				else {
HXLINE( 338)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE( 340)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,find_weak,return )

 ::zpp_nape::phys::ZPP_Body ZPP_Set_ZPP_Body_obj::lower_bound( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_343_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 344)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,ret) = null();
HXLINE( 354)		if (!(this->empty())) {
HXLINE( 355)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,set_ite) = this->parent;
HXLINE( 356)			while(hx::IsNotNull( set_ite->prev )){
HXLINE( 356)				set_ite = set_ite->prev;
            			}
HXLINE( 357)			while(hx::IsNotNull( set_ite )){
HXLINE( 358)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,elt) = set_ite->data;
HXLINE( 360)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE( 361)					ret = elt;
HXLINE( 362)					goto _hx_goto_26;
            				}
HXLINE( 365)				if (hx::IsNotNull( set_ite->next )) {
HXLINE( 366)					set_ite = set_ite->next;
HXLINE( 367)					while(hx::IsNotNull( set_ite->prev )){
HXLINE( 367)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE( 370)					while(true){
HXLINE( 370)						bool _hx_tmp;
HXDLIN( 370)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE( 370)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE( 370)							_hx_tmp = false;
            						}
HXDLIN( 370)						if (!(_hx_tmp)) {
HXLINE( 370)							goto _hx_goto_28;
            						}
HXDLIN( 370)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE( 371)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE( 343)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,lower_bound,return )

 ::zpp_nape::phys::ZPP_Body ZPP_Set_ZPP_Body_obj::first(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_379_first)
            	HX_STACK_THIS(this)
HXLINE( 388)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = this->parent;
HXLINE( 389)		while(hx::IsNotNull( cur->prev )){
HXLINE( 389)			cur = cur->prev;
            		}
HXLINE( 390)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,first,return )

 ::zpp_nape::phys::ZPP_Body ZPP_Set_ZPP_Body_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_392_pop_front)
            	HX_STACK_THIS(this)
HXLINE( 401)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = this->parent;
HXLINE( 402)		while(hx::IsNotNull( cur->prev )){
HXLINE( 402)			cur = cur->prev;
            		}
HXLINE( 403)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,ret) = cur->data;
HXLINE( 404)		this->remove_node(cur);
HXLINE( 405)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,pop_front,return )

void ZPP_Set_ZPP_Body_obj::remove( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_417_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 417)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_Body cur){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_419_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE( 428)		if (hx::IsNotNull( cur->next )) {
HXLINE( 429)			cur = cur->next;
HXLINE( 430)			while(hx::IsNotNull( cur->prev )){
HXLINE( 430)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE( 433)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,pre) = cur;
HXLINE( 434)			cur = cur->parent;
HXLINE( 435)			while(true){
HXLINE( 435)				bool _hx_tmp;
HXDLIN( 435)				if (hx::IsNotNull( cur )) {
HXLINE( 435)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE( 435)					_hx_tmp = false;
            				}
HXDLIN( 435)				if (!(_hx_tmp)) {
HXLINE( 435)					goto _hx_goto_36;
            				}
HXLINE( 436)				pre = cur;
HXLINE( 437)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE( 440)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_Body cur){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_442_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE( 451)		if (hx::IsNotNull( cur->prev )) {
HXLINE( 452)			cur = cur->prev;
HXLINE( 453)			while(hx::IsNotNull( cur->next )){
HXLINE( 453)				cur = cur->next;
            			}
            		}
            		else {
HXLINE( 456)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,pre) = cur;
HXLINE( 457)			cur = cur->parent;
HXLINE( 458)			while(true){
HXLINE( 458)				bool _hx_tmp;
HXDLIN( 458)				if (hx::IsNotNull( cur )) {
HXLINE( 458)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE( 458)					_hx_tmp = false;
            				}
HXDLIN( 458)				if (!(_hx_tmp)) {
HXLINE( 458)					goto _hx_goto_39;
            				}
HXLINE( 459)				pre = cur;
HXLINE( 460)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE( 463)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,predecessor_node,return )

 ::zpp_nape::phys::ZPP_Body ZPP_Set_ZPP_Body_obj::successor( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_465_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 474)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,node) = this->successor_node(this->find(obj));
HXLINE( 475)		if (hx::IsNull( node )) {
HXLINE( 475)			return null();
            		}
            		else {
HXLINE( 475)			return node->data;
            		}
HXDLIN( 475)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,successor,return )

 ::zpp_nape::phys::ZPP_Body ZPP_Set_ZPP_Body_obj::predecessor( ::zpp_nape::phys::ZPP_Body obj){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_477_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 486)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,node) = this->predecessor_node(this->find(obj));
HXLINE( 487)		if (hx::IsNull( node )) {
HXLINE( 487)			return null();
            		}
            		else {
HXLINE( 487)			return node->data;
            		}
HXDLIN( 487)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,predecessor,return )

void ZPP_Set_ZPP_Body_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_Body cur){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_489_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE( 498)		bool _hx_tmp;
HXDLIN( 498)		if (hx::IsNotNull( cur->next )) {
HXLINE( 498)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE( 498)			_hx_tmp = false;
            		}
HXDLIN( 498)		if (_hx_tmp) {
HXLINE( 499)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,sm) = cur->next;
HXLINE( 500)			while(hx::IsNotNull( sm->prev )){
HXLINE( 500)				sm = sm->prev;
            			}
HXLINE( 501)			{
HXLINE( 502)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,t) = cur->data;
HXLINE( 503)				cur->data = sm->data;
HXLINE( 504)				sm->data = t;
            			}
HXLINE( 506)			if (hx::IsNotNull( this->swapped )) {
HXLINE( 506)				this->swapped(cur->data,sm->data);
            			}
HXLINE( 507)			cur = sm;
            		}
HXLINE( 517)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,child);
HXDLIN( 517)		if (hx::IsNull( cur->prev )) {
HXLINE( 517)			child = cur->next;
            		}
            		else {
HXLINE( 517)			child = cur->prev;
            		}
HXLINE( 518)		if ((cur->colour == (int)1)) {
HXLINE( 519)			bool _hx_tmp1;
HXDLIN( 519)			if (hx::IsNull( cur->prev )) {
HXLINE( 519)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE( 519)				_hx_tmp1 = true;
            			}
HXDLIN( 519)			if (_hx_tmp1) {
HXLINE( 519)				child->colour = (int)1;
            			}
            			else {
HXLINE( 520)				if (hx::IsNotNull( cur->parent )) {
HXLINE( 521)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,parent) = cur->parent;
HXLINE( 522)					while(true){
HXLINE( 523)						parent->colour++;
HXLINE( 524)						parent->prev->colour--;
HXLINE( 525)						parent->next->colour--;
HXLINE( 526)						{
HXLINE( 527)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,child1,"child") = parent->prev;
HXLINE( 528)							if ((child1->colour == (int)-1)) {
HXLINE( 529)								this->_hx___fix_neg_red(child1);
HXLINE( 530)								goto _hx_goto_44;
            							}
            							else {
HXLINE( 532)								if ((child1->colour == (int)0)) {
HXLINE( 534)									bool _hx_tmp2;
HXDLIN( 534)									if (hx::IsNotNull( child1->prev )) {
HXLINE( 534)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE( 534)										_hx_tmp2 = false;
            									}
HXDLIN( 534)									if (_hx_tmp2) {
HXLINE( 535)										this->_hx___fix_dbl_red(child1->prev);
HXLINE( 536)										goto _hx_goto_44;
            									}
HXLINE( 540)									bool _hx_tmp3;
HXDLIN( 540)									if (hx::IsNotNull( child1->next )) {
HXLINE( 540)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE( 540)										_hx_tmp3 = false;
            									}
HXDLIN( 540)									if (_hx_tmp3) {
HXLINE( 541)										this->_hx___fix_dbl_red(child1->next);
HXLINE( 542)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE( 547)						{
HXLINE( 548)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,child2,"child") = parent->next;
HXLINE( 549)							if ((child2->colour == (int)-1)) {
HXLINE( 550)								this->_hx___fix_neg_red(child2);
HXLINE( 551)								goto _hx_goto_44;
            							}
            							else {
HXLINE( 553)								if ((child2->colour == (int)0)) {
HXLINE( 555)									bool _hx_tmp4;
HXDLIN( 555)									if (hx::IsNotNull( child2->prev )) {
HXLINE( 555)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE( 555)										_hx_tmp4 = false;
            									}
HXDLIN( 555)									if (_hx_tmp4) {
HXLINE( 556)										this->_hx___fix_dbl_red(child2->prev);
HXLINE( 557)										goto _hx_goto_44;
            									}
HXLINE( 561)									bool _hx_tmp5;
HXDLIN( 561)									if (hx::IsNotNull( child2->next )) {
HXLINE( 561)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE( 561)										_hx_tmp5 = false;
            									}
HXDLIN( 561)									if (_hx_tmp5) {
HXLINE( 562)										this->_hx___fix_dbl_red(child2->next);
HXLINE( 563)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE( 568)						if ((parent->colour == (int)2)) {
HXLINE( 569)							if (hx::IsNull( parent->parent )) {
HXLINE( 570)								parent->colour = (int)1;
            							}
            							else {
HXLINE( 573)								parent = parent->parent;
HXLINE( 574)								continue;
            							}
            						}
HXLINE( 577)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE( 581)		{
HXLINE( 582)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,par) = cur->parent;
HXLINE( 583)			if (hx::IsNull( par )) {
HXLINE( 584)				this->parent = child;
            			}
            			else {
HXLINE( 586)				if (hx::IsEq( par->prev,cur )) {
HXLINE( 586)					par->prev = child;
            				}
            				else {
HXLINE( 587)					par->next = child;
            				}
            			}
HXLINE( 588)			if (hx::IsNotNull( child )) {
HXLINE( 588)				child->parent = par;
            			}
            		}
HXLINE( 590)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE( 591)		{
HXLINE( 592)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,o) = cur;
HXLINE( 601)			{
HXLINE( 601)				o->data = null();
HXDLIN( 601)				o->lt = null();
HXDLIN( 601)				o->swapped = null();
            			}
HXLINE( 602)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 603)			::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,remove_node,(void))

void ZPP_Set_ZPP_Body_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_610_clear)
            	HX_STACK_THIS(this)
HXLINE( 610)		if (hx::IsNotNull( this->parent )) {
HXLINE( 610)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = this->parent;
HXDLIN( 610)			while(hx::IsNotNull( cur )){
HXLINE( 610)				if (hx::IsNotNull( cur->prev )) {
HXLINE( 610)					cur = cur->prev;
            				}
            				else {
HXLINE( 610)					if (hx::IsNotNull( cur->next )) {
HXLINE( 610)						cur = cur->next;
            					}
            					else {
HXLINE( 610)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,ret) = cur->parent;
HXDLIN( 610)						if (hx::IsNotNull( ret )) {
HXLINE( 610)							if (hx::IsEq( cur,ret->prev )) {
HXLINE( 610)								ret->prev = null();
            							}
            							else {
HXLINE( 610)								ret->next = null();
            							}
HXDLIN( 610)							cur->parent = null();
            						}
HXDLIN( 610)						{
HXLINE( 610)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,o) = cur;
HXDLIN( 610)							{
HXLINE( 610)								o->data = null();
HXDLIN( 610)								o->lt = null();
HXDLIN( 610)								o->swapped = null();
            							}
HXDLIN( 610)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXDLIN( 610)							::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = o;
            						}
HXDLIN( 610)						cur = ret;
            					}
            				}
            			}
HXDLIN( 610)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_Body_obj,clear,(void))

void ZPP_Set_ZPP_Body_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_614_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 614)		if (hx::IsNull( this->parent )) {
HXLINE( 614)			return;
            		}
            		else {
HXLINE( 616)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = this->parent;
HXLINE( 617)			while(hx::IsNotNull( cur )){
HXLINE( 617)				if (hx::IsNotNull( cur->prev )) {
HXLINE( 617)					cur = cur->prev;
            				}
            				else {
HXLINE( 617)					if (hx::IsNotNull( cur->next )) {
HXLINE( 617)						cur = cur->next;
            					}
            					else {
HXLINE( 617)						lambda(cur->data);
HXDLIN( 617)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,ret) = cur->parent;
HXDLIN( 617)						if (hx::IsNotNull( ret )) {
HXLINE( 617)							if (hx::IsEq( cur,ret->prev )) {
HXLINE( 617)								ret->prev = null();
            							}
            							else {
HXLINE( 617)								ret->next = null();
            							}
HXDLIN( 617)							cur->parent = null();
            						}
HXDLIN( 617)						{
HXLINE( 617)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,o) = cur;
HXDLIN( 617)							{
HXLINE( 617)								o->data = null();
HXDLIN( 617)								o->lt = null();
HXDLIN( 617)								o->swapped = null();
            							}
HXDLIN( 617)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXDLIN( 617)							::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = o;
            						}
HXDLIN( 617)						cur = ret;
            					}
            				}
            			}
HXLINE( 618)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_Body node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_622_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 631)		lambda(node->data);
HXLINE( 632)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,ret) = node->parent;
HXLINE( 633)		if (hx::IsNotNull( ret )) {
HXLINE( 634)			if (hx::IsEq( node,ret->prev )) {
HXLINE( 634)				ret->prev = null();
            			}
            			else {
HXLINE( 635)				ret->next = null();
            			}
HXLINE( 636)			node->parent = null();
            		}
HXLINE( 638)		{
HXLINE( 648)			{
HXLINE( 648)				node->data = null();
HXDLIN( 648)				node->lt = null();
HXDLIN( 648)				node->swapped = null();
            			}
HXLINE( 649)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 650)			::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = node;
            		}
HXLINE( 655)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_Body_obj,clear_node,return )

void ZPP_Set_ZPP_Body_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_Body negred){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_657___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE( 658)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,parent) = negred->parent;
HXLINE( 659)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,child);
HXDLIN( 659)		if (hx::IsEq( parent->prev,negred )) {
HXLINE( 660)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,nl) = negred->prev;
HXLINE( 661)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,nr) = negred->next;
HXLINE( 662)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,trl) = nr->prev;
HXLINE( 663)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,trr) = nr->next;
HXLINE( 664)			nl->colour = (int)0;
HXLINE( 665)			negred->colour = (parent->colour = (int)1);
HXLINE( 666)			{
HXLINE( 667)				negred->next = trl;
HXLINE( 668)				if (hx::IsNotNull( trl )) {
HXLINE( 668)					trl->parent = negred;
            				}
            			}
HXLINE( 670)			{
HXLINE( 671)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,t) = parent->data;
HXLINE( 672)				parent->data = nr->data;
HXLINE( 673)				nr->data = t;
            			}
HXLINE( 675)			if (hx::IsNotNull( this->swapped )) {
HXLINE( 675)				this->swapped(parent->data,nr->data);
            			}
HXLINE( 676)			{
HXLINE( 677)				nr->prev = trr;
HXLINE( 678)				if (hx::IsNotNull( trr )) {
HXLINE( 678)					trr->parent = nr;
            				}
            			}
HXLINE( 680)			{
HXLINE( 681)				nr->next = parent->next;
HXLINE( 682)				if (hx::IsNotNull( parent->next )) {
HXLINE( 682)					parent->next->parent = nr;
            				}
            			}
HXLINE( 684)			{
HXLINE( 685)				parent->next = nr;
HXLINE( 686)				if (hx::IsNotNull( nr )) {
HXLINE( 686)					nr->parent = parent;
            				}
            			}
HXLINE( 659)			child = nl;
            		}
            		else {
HXLINE( 691)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,nl1,"nl") = negred->next;
HXLINE( 692)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,nr1,"nr") = negred->prev;
HXLINE( 693)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,trl1,"trl") = nr1->next;
HXLINE( 694)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,trr1,"trr") = nr1->prev;
HXLINE( 695)			nl1->colour = (int)0;
HXLINE( 696)			negred->colour = (parent->colour = (int)1);
HXLINE( 697)			{
HXLINE( 698)				negred->prev = trl1;
HXLINE( 699)				if (hx::IsNotNull( trl1 )) {
HXLINE( 699)					trl1->parent = negred;
            				}
            			}
HXLINE( 701)			{
HXLINE( 702)				HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,t1,"t") = parent->data;
HXLINE( 703)				parent->data = nr1->data;
HXLINE( 704)				nr1->data = t1;
            			}
HXLINE( 706)			if (hx::IsNotNull( this->swapped )) {
HXLINE( 706)				this->swapped(parent->data,nr1->data);
            			}
HXLINE( 707)			{
HXLINE( 708)				nr1->next = trr1;
HXLINE( 709)				if (hx::IsNotNull( trr1 )) {
HXLINE( 709)					trr1->parent = nr1;
            				}
            			}
HXLINE( 711)			{
HXLINE( 712)				nr1->prev = parent->prev;
HXLINE( 713)				if (hx::IsNotNull( parent->prev )) {
HXLINE( 713)					parent->prev->parent = nr1;
            				}
            			}
HXLINE( 715)			{
HXLINE( 716)				parent->prev = nr1;
HXLINE( 717)				if (hx::IsNotNull( nr1 )) {
HXLINE( 717)					nr1->parent = parent;
            				}
            			}
HXLINE( 659)			child = nl1;
            		}
HXLINE( 721)		bool _hx_tmp;
HXDLIN( 721)		if (hx::IsNotNull( child->prev )) {
HXLINE( 721)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE( 721)			_hx_tmp = false;
            		}
HXDLIN( 721)		if (_hx_tmp) {
HXLINE( 721)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE( 722)			bool _hx_tmp1;
HXDLIN( 722)			if (hx::IsNotNull( child->next )) {
HXLINE( 722)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE( 722)				_hx_tmp1 = false;
            			}
HXDLIN( 722)			if (_hx_tmp1) {
HXLINE( 722)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_Body_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_Body x){
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_725___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 725)		while(true){
HXLINE( 726)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,par) = x->parent;
HXLINE( 727)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,g) = par->parent;
HXLINE( 728)			if (hx::IsNull( g )) {
HXLINE( 729)				par->colour = (int)1;
HXLINE( 730)				goto _hx_goto_52;
            			}
HXLINE( 732)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,n1);
HXDLIN( 732)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,n2);
HXDLIN( 732)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,n3);
HXDLIN( 732)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,t1);
HXDLIN( 732)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,t2);
HXDLIN( 732)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,t3);
HXDLIN( 732)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,t4);
HXLINE( 733)			if (hx::IsEq( par,g->prev )) {
HXLINE( 734)				n3 = g;
HXLINE( 735)				t4 = g->next;
HXLINE( 736)				if (hx::IsEq( x,par->prev )) {
HXLINE( 737)					n1 = x;
HXLINE( 738)					n2 = par;
HXLINE( 739)					t1 = x->prev;
HXLINE( 740)					t2 = x->next;
HXLINE( 741)					t3 = par->next;
            				}
            				else {
HXLINE( 744)					n1 = par;
HXLINE( 745)					n2 = x;
HXLINE( 746)					t1 = par->prev;
HXLINE( 747)					t2 = x->prev;
HXLINE( 748)					t3 = x->next;
            				}
            			}
            			else {
HXLINE( 752)				n1 = g;
HXLINE( 753)				t1 = g->prev;
HXLINE( 754)				if (hx::IsEq( x,par->prev )) {
HXLINE( 755)					n2 = x;
HXLINE( 756)					n3 = par;
HXLINE( 757)					t2 = x->prev;
HXLINE( 758)					t3 = x->next;
HXLINE( 759)					t4 = par->next;
            				}
            				else {
HXLINE( 762)					n2 = par;
HXLINE( 763)					n3 = x;
HXLINE( 764)					t2 = par->prev;
HXLINE( 765)					t3 = x->prev;
HXLINE( 766)					t4 = x->next;
            				}
            			}
HXLINE( 769)			{
HXLINE( 770)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,par1,"par") = g->parent;
HXLINE( 771)				if (hx::IsNull( par1 )) {
HXLINE( 772)					this->parent = n2;
            				}
            				else {
HXLINE( 774)					if (hx::IsEq( par1->prev,g )) {
HXLINE( 774)						par1->prev = n2;
            					}
            					else {
HXLINE( 775)						par1->next = n2;
            					}
            				}
HXLINE( 776)				if (hx::IsNotNull( n2 )) {
HXLINE( 776)					n2->parent = par1;
            				}
            			}
HXLINE( 778)			{
HXLINE( 779)				n1->prev = t1;
HXLINE( 780)				if (hx::IsNotNull( t1 )) {
HXLINE( 780)					t1->parent = n1;
            				}
            			}
HXLINE( 782)			{
HXLINE( 783)				n1->next = t2;
HXLINE( 784)				if (hx::IsNotNull( t2 )) {
HXLINE( 784)					t2->parent = n1;
            				}
            			}
HXLINE( 786)			{
HXLINE( 787)				n2->prev = n1;
HXLINE( 788)				if (hx::IsNotNull( n1 )) {
HXLINE( 788)					n1->parent = n2;
            				}
            			}
HXLINE( 790)			{
HXLINE( 791)				n2->next = n3;
HXLINE( 792)				if (hx::IsNotNull( n3 )) {
HXLINE( 792)					n3->parent = n2;
            				}
            			}
HXLINE( 794)			{
HXLINE( 795)				n3->prev = t3;
HXLINE( 796)				if (hx::IsNotNull( t3 )) {
HXLINE( 796)					t3->parent = n3;
            				}
            			}
HXLINE( 798)			{
HXLINE( 799)				n3->next = t4;
HXLINE( 800)				if (hx::IsNotNull( t4 )) {
HXLINE( 800)					t4->parent = n3;
            				}
            			}
HXLINE( 802)			n2->colour = (g->colour - (int)1);
HXLINE( 803)			n1->colour = (int)1;
HXLINE( 804)			n3->colour = (int)1;
HXLINE( 805)			if (hx::IsEq( n2,this->parent )) {
HXLINE( 805)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE( 806)				bool _hx_tmp;
HXDLIN( 806)				if ((n2->colour == (int)0)) {
HXLINE( 806)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE( 806)					_hx_tmp = false;
            				}
HXDLIN( 806)				if (_hx_tmp) {
HXLINE( 807)					x = n2;
HXLINE( 808)					continue;
            				}
            			}
HXLINE( 810)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_Body_obj::try_insert_bool( ::zpp_nape::phys::ZPP_Body obj){
            	HX_GC_STACKFRAME(&_hx_pos_ee82dba092594d88_813_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 814)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,x) = null();
HXLINE( 815)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = null();
HXLINE( 816)		if (hx::IsNull( this->parent )) {
HXLINE( 818)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )) {
HXLINE( 819)				x =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 825)				x = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 826)				::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = x->next;
HXLINE( 827)				x->next = null();
            			}
HXLINE( 834)			x->data = obj;
HXLINE( 835)			this->parent = x;
            		}
            		else {
HXLINE( 838)			cur = this->parent;
HXLINE( 839)			while(true){
HXLINE( 840)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE( 841)					if (hx::IsNull( cur->prev )) {
HXLINE( 843)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )) {
HXLINE( 844)							x =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 850)							x = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 851)							::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = x->next;
HXLINE( 852)							x->next = null();
            						}
HXLINE( 859)						x->data = obj;
HXLINE( 860)						cur->prev = x;
HXLINE( 861)						x->parent = cur;
HXLINE( 862)						goto _hx_goto_54;
            					}
            					else {
HXLINE( 864)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE( 866)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE( 867)						if (hx::IsNull( cur->next )) {
HXLINE( 869)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )) {
HXLINE( 870)								x =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 876)								x = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 877)								::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = x->next;
HXLINE( 878)								x->next = null();
            							}
HXLINE( 885)							x->data = obj;
HXLINE( 886)							cur->next = x;
HXLINE( 887)							x->parent = cur;
HXLINE( 888)							goto _hx_goto_54;
            						}
            						else {
HXLINE( 890)							cur = cur->next;
            						}
            					}
            					else {
HXLINE( 892)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE( 895)		if (hx::IsNull( x )) {
HXLINE( 895)			return false;
            		}
            		else {
HXLINE( 897)			if (hx::IsNull( x->parent )) {
HXLINE( 897)				x->colour = (int)1;
            			}
            			else {
HXLINE( 899)				x->colour = (int)0;
HXLINE( 900)				if ((x->parent->colour == (int)0)) {
HXLINE( 900)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE( 902)			return true;
            		}
HXLINE( 895)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::try_insert( ::zpp_nape::phys::ZPP_Body obj){
            	HX_GC_STACKFRAME(&_hx_pos_ee82dba092594d88_905_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 906)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,x) = null();
HXLINE( 907)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = null();
HXLINE( 908)		if (hx::IsNull( this->parent )) {
HXLINE( 910)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )) {
HXLINE( 911)				x =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 917)				x = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 918)				::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = x->next;
HXLINE( 919)				x->next = null();
            			}
HXLINE( 926)			x->data = obj;
HXLINE( 927)			this->parent = x;
            		}
            		else {
HXLINE( 930)			cur = this->parent;
HXLINE( 931)			while(true){
HXLINE( 932)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE( 933)					if (hx::IsNull( cur->prev )) {
HXLINE( 935)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )) {
HXLINE( 936)							x =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 942)							x = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 943)							::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = x->next;
HXLINE( 944)							x->next = null();
            						}
HXLINE( 951)						x->data = obj;
HXLINE( 952)						cur->prev = x;
HXLINE( 953)						x->parent = cur;
HXLINE( 954)						goto _hx_goto_56;
            					}
            					else {
HXLINE( 956)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE( 958)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE( 959)						if (hx::IsNull( cur->next )) {
HXLINE( 961)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )) {
HXLINE( 962)								x =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 968)								x = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE( 969)								::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = x->next;
HXLINE( 970)								x->next = null();
            							}
HXLINE( 977)							x->data = obj;
HXLINE( 978)							cur->next = x;
HXLINE( 979)							x->parent = cur;
HXLINE( 980)							goto _hx_goto_56;
            						}
            						else {
HXLINE( 982)							cur = cur->next;
            						}
            					}
            					else {
HXLINE( 984)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE( 987)		if (hx::IsNull( x )) {
HXLINE( 987)			return cur;
            		}
            		else {
HXLINE( 989)			if (hx::IsNull( x->parent )) {
HXLINE( 989)				x->colour = (int)1;
            			}
            			else {
HXLINE( 991)				x->colour = (int)0;
HXLINE( 992)				if ((x->parent->colour == (int)0)) {
HXLINE( 992)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE( 994)			return x;
            		}
HXLINE( 987)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::insert( ::zpp_nape::phys::ZPP_Body obj){
            	HX_GC_STACKFRAME(&_hx_pos_ee82dba092594d88_997_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1006)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_Body,x);
HXLINE(1008)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )) {
HXLINE(1009)			x =  ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1015)			x = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool;
HXLINE(1016)			::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = x->next;
HXLINE(1017)			x->next = null();
            		}
HXLINE(1024)		x->data = obj;
HXLINE(1025)		if (hx::IsNull( this->parent )) {
HXLINE(1025)			this->parent = x;
            		}
            		else {
HXLINE(1027)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_Body,cur) = this->parent;
HXLINE(1028)			while(true){
HXLINE(1029)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(1030)					if (hx::IsNull( cur->prev )) {
HXLINE(1031)						cur->prev = x;
HXLINE(1032)						x->parent = cur;
HXLINE(1033)						goto _hx_goto_58;
            					}
            					else {
HXLINE(1035)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(1038)					if (hx::IsNull( cur->next )) {
HXLINE(1039)						cur->next = x;
HXLINE(1040)						x->parent = cur;
HXLINE(1041)						goto _hx_goto_58;
            					}
            					else {
HXLINE(1043)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(1047)		if (hx::IsNull( x->parent )) {
HXLINE(1047)			x->colour = (int)1;
            		}
            		else {
HXLINE(1049)			x->colour = (int)0;
HXLINE(1050)			if ((x->parent->colour == (int)0)) {
HXLINE(1050)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(1060)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_Body_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_Body ZPP_Set_ZPP_Body_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_Body_obj > ZPP_Set_ZPP_Body_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_Body_obj > __this = new ZPP_Set_ZPP_Body_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_Body_obj > ZPP_Set_ZPP_Body_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_Body_obj *__this = (ZPP_Set_ZPP_Body_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_Body_obj), true, "zpp_nape.util.ZPP_Set_ZPP_Body"));
	*(void **)__this = ZPP_Set_ZPP_Body_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_Body_obj::ZPP_Set_ZPP_Body_obj()
{
}

void ZPP_Set_ZPP_Body_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_Body);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_Body_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_Body_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_Body_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_Body_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_Body >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_Body_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_Body >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_Body_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_Body_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_Body_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_Body_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(ZPP_Set_ZPP_Body_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_Body*/ ,(int)offsetof(ZPP_Set_ZPP_Body_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_Body*/ ,(int)offsetof(ZPP_Set_ZPP_Body_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_Body*/ ,(int)offsetof(ZPP_Set_ZPP_Body_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_Body_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_Body_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_Body*/ ,(void *) &ZPP_Set_ZPP_Body_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_Body_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_Body_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_Body_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_Body_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_Body_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_Body_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_Body_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_Body_obj::__mClass;

static ::String ZPP_Set_ZPP_Body_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_Body_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_Body_obj;
	ZPP_Set_ZPP_Body_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_Body","\x34","\x43","\xde","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_Body_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_Body_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_Body_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_Body_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_Body_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_Body_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_Body_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_Body_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_Body_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_Body_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ee82dba092594d88_176_boot)
HXLINE( 176)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
