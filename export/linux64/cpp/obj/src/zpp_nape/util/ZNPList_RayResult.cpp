// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_RayResult
#include <zpp_nape/util/ZNPList_RayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_RayResult
#include <zpp_nape/util/ZNPNode_RayResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14353_new,"zpp_nape.util.ZNPList_RayResult","new",0xa7549be9,"zpp_nape.util.ZNPList_RayResult.new","zpp_nape/util/Lists.hx",14353,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14359_begin,"zpp_nape.util.ZNPList_RayResult","begin",0xb1c769f2,"zpp_nape.util.ZNPList_RayResult.begin","zpp_nape/util/Lists.hx",14359,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14366_setbegin,"zpp_nape.util.ZNPList_RayResult","setbegin",0x5d80a71e,"zpp_nape.util.ZNPList_RayResult.setbegin","zpp_nape/util/Lists.hx",14366,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14372_add,"zpp_nape.util.ZNPList_RayResult","add",0xa74abdaa,"zpp_nape.util.ZNPList_RayResult.add","zpp_nape/util/Lists.hx",14372,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14376_inlined_add,"zpp_nape.util.ZNPList_RayResult","inlined_add",0xfaa34916,"zpp_nape.util.ZNPList_RayResult.inlined_add","zpp_nape/util/Lists.hx",14376,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14422_addAll,"zpp_nape.util.ZNPList_RayResult","addAll",0xe0d95997,"zpp_nape.util.ZNPList_RayResult.addAll","zpp_nape/util/Lists.hx",14422,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14432_insert,"zpp_nape.util.ZNPList_RayResult","insert",0xdfbb9350,"zpp_nape.util.ZNPList_RayResult.insert","zpp_nape/util/Lists.hx",14432,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14436_inlined_insert,"zpp_nape.util.ZNPList_RayResult","inlined_insert",0x5b6ef364,"zpp_nape.util.ZNPList_RayResult.inlined_insert","zpp_nape/util/Lists.hx",14436,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14480_pop,"zpp_nape.util.ZNPList_RayResult","pop",0xa756291a,"zpp_nape.util.ZNPList_RayResult.pop","zpp_nape/util/Lists.hx",14480,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14484_inlined_pop,"zpp_nape.util.ZNPList_RayResult","inlined_pop",0xfaaeb486,"zpp_nape.util.ZNPList_RayResult.inlined_pop","zpp_nape/util/Lists.hx",14484,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14518_pop_unsafe,"zpp_nape.util.ZNPList_RayResult","pop_unsafe",0x4b6a23eb,"zpp_nape.util.ZNPList_RayResult.pop_unsafe","zpp_nape/util/Lists.hx",14518,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14522_inlined_pop_unsafe,"zpp_nape.util.ZNPList_RayResult","inlined_pop_unsafe",0x18511dff,"zpp_nape.util.ZNPList_RayResult.inlined_pop_unsafe","zpp_nape/util/Lists.hx",14522,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14544_remove,"zpp_nape.util.ZNPList_RayResult","remove",0x4666ec5b,"zpp_nape.util.ZNPList_RayResult.remove","zpp_nape/util/Lists.hx",14544,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14546_try_remove,"zpp_nape.util.ZNPList_RayResult","try_remove",0x6294599f,"zpp_nape.util.ZNPList_RayResult.try_remove","zpp_nape/util/Lists.hx",14546,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14580_inlined_remove,"zpp_nape.util.ZNPList_RayResult","inlined_remove",0xc21a4c6f,"zpp_nape.util.ZNPList_RayResult.inlined_remove","zpp_nape/util/Lists.hx",14580,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14584_inlined_try_remove,"zpp_nape.util.ZNPList_RayResult","inlined_try_remove",0x2f7b53b3,"zpp_nape.util.ZNPList_RayResult.inlined_try_remove","zpp_nape/util/Lists.hx",14584,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14608_erase,"zpp_nape.util.ZNPList_RayResult","erase",0x748e68af,"zpp_nape.util.ZNPList_RayResult.erase","zpp_nape/util/Lists.hx",14608,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14612_inlined_erase,"zpp_nape.util.ZNPList_RayResult","inlined_erase",0xb7b1a71b,"zpp_nape.util.ZNPList_RayResult.inlined_erase","zpp_nape/util/Lists.hx",14612,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14658_splice,"zpp_nape.util.ZNPList_RayResult","splice",0x017cd593,"zpp_nape.util.ZNPList_RayResult.splice","zpp_nape/util/Lists.hx",14658,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14663_clear,"zpp_nape.util.ZNPList_RayResult","clear",0x49ccf156,"zpp_nape.util.ZNPList_RayResult.clear","zpp_nape/util/Lists.hx",14663,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14668_inlined_clear,"zpp_nape.util.ZNPList_RayResult","inlined_clear",0x8cf02fc2,"zpp_nape.util.ZNPList_RayResult.inlined_clear","zpp_nape/util/Lists.hx",14668,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14673_reverse,"zpp_nape.util.ZNPList_RayResult","reverse",0x7ba3fd2b,"zpp_nape.util.ZNPList_RayResult.reverse","zpp_nape/util/Lists.hx",14673,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14689_empty,"zpp_nape.util.ZNPList_RayResult","empty",0x714bba56,"zpp_nape.util.ZNPList_RayResult.empty","zpp_nape/util/Lists.hx",14689,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14694_size,"zpp_nape.util.ZNPList_RayResult","size",0xc604ed18,"zpp_nape.util.ZNPList_RayResult.size","zpp_nape/util/Lists.hx",14694,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14697_has,"zpp_nape.util.ZNPList_RayResult","has",0xa7500ae3,"zpp_nape.util.ZNPList_RayResult.has","zpp_nape/util/Lists.hx",14697,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14701_inlined_has,"zpp_nape.util.ZNPList_RayResult","inlined_has",0xfaa8964f,"zpp_nape.util.ZNPList_RayResult.inlined_has","zpp_nape/util/Lists.hx",14701,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14732_front,"zpp_nape.util.ZNPList_RayResult","front",0x07ff9872,"zpp_nape.util.ZNPList_RayResult.front","zpp_nape/util/Lists.hx",14732,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14734_back,"zpp_nape.util.ZNPList_RayResult","back",0xbac2267e,"zpp_nape.util.ZNPList_RayResult.back","zpp_nape/util/Lists.hx",14734,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14743_iterator_at,"zpp_nape.util.ZNPList_RayResult","iterator_at",0xff47866d,"zpp_nape.util.ZNPList_RayResult.iterator_at","zpp_nape/util/Lists.hx",14743,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4167cac2f6aa76e0_14756_at,"zpp_nape.util.ZNPList_RayResult","at",0x45a10d8a,"zpp_nape.util.ZNPList_RayResult.at","zpp_nape/util/Lists.hx",14756,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_RayResult_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14353_new)
            	HX_STACK_THIS(this)
HXLINE(14363)		this->length = (int)0;
HXLINE(14362)		this->pushmod = false;
HXLINE(14361)		this->modified = false;
HXLINE(14354)		this->head = null();
            	}

Dynamic ZNPList_RayResult_obj::__CreateEmpty() { return new ZNPList_RayResult_obj; }

void *ZNPList_RayResult_obj::_hx_vtable = 0;

Dynamic ZNPList_RayResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_RayResult_obj > _hx_result = new ZNPList_RayResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_RayResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0dfc71cf;
}

 ::zpp_nape::util::ZNPNode_RayResult ZNPList_RayResult_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14359_begin)
            	HX_STACK_THIS(this)
HXLINE(14359)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,begin,return )

void ZNPList_RayResult_obj::setbegin( ::zpp_nape::util::ZNPNode_RayResult i){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14366_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(14367)		this->head = i;
HXLINE(14368)		this->modified = true;
HXLINE(14369)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,setbegin,(void))

 ::nape::geom::RayResult ZNPList_RayResult_obj::add( ::nape::geom::RayResult o){
            	HX_GC_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14372_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(14372)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXDLIN(14372)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE(14372)			ret =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(14372)			ret = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14372)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret->next;
HXDLIN(14372)			ret->next = null();
            		}
HXDLIN(14372)		ret->elt = o;
HXDLIN(14372)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,temp) = ret;
HXDLIN(14372)		temp->next = this->head;
HXDLIN(14372)		this->head = temp;
HXDLIN(14372)		this->modified = true;
HXDLIN(14372)		this->length++;
HXDLIN(14372)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,add,return )

 ::nape::geom::RayResult ZNPList_RayResult_obj::inlined_add( ::nape::geom::RayResult o){
            	HX_GC_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14376_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(14386)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXLINE(14388)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE(14389)			ret =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(14395)			ret = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXLINE(14396)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret->next;
HXLINE(14397)			ret->next = null();
            		}
HXLINE(14404)		ret->elt = o;
HXLINE(14385)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,temp) = ret;
HXLINE(14407)		temp->next = this->head;
HXLINE(14408)		this->head = temp;
HXLINE(14409)		this->modified = true;
HXLINE(14410)		this->length++;
HXLINE(14411)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,inlined_add,return )

void ZNPList_RayResult_obj::addAll( ::zpp_nape::util::ZNPList_RayResult x){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14422_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(14423)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cx_ite) = x->head;
HXLINE(14424)		while(hx::IsNotNull( cx_ite )){
HXLINE(14426)			this->add(cx_ite->elt);
HXLINE(14427)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_RayResult ZNPList_RayResult_obj::insert( ::zpp_nape::util::ZNPNode_RayResult cur, ::nape::geom::RayResult o){
            	HX_GC_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14432_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(14432)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXDLIN(14432)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE(14432)			ret =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(14432)			ret = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14432)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret->next;
HXDLIN(14432)			ret->next = null();
            		}
HXDLIN(14432)		ret->elt = o;
HXDLIN(14432)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,temp) = ret;
HXDLIN(14432)		if (hx::IsNull( cur )) {
HXLINE(14432)			temp->next = this->head;
HXDLIN(14432)			this->head = temp;
            		}
            		else {
HXLINE(14432)			temp->next = cur->next;
HXDLIN(14432)			cur->next = temp;
            		}
HXDLIN(14432)		this->pushmod = (this->modified = true);
HXDLIN(14432)		this->length++;
HXDLIN(14432)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_RayResult_obj,insert,return )

 ::zpp_nape::util::ZNPNode_RayResult ZNPList_RayResult_obj::inlined_insert( ::zpp_nape::util::ZNPNode_RayResult cur, ::nape::geom::RayResult o){
            	HX_GC_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14436_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(14446)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXLINE(14448)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )) {
HXLINE(14449)			ret =  ::zpp_nape::util::ZNPNode_RayResult_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(14455)			ret = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXLINE(14456)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret->next;
HXLINE(14457)			ret->next = null();
            		}
HXLINE(14464)		ret->elt = o;
HXLINE(14445)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,temp) = ret;
HXLINE(14467)		if (hx::IsNull( cur )) {
HXLINE(14468)			temp->next = this->head;
HXLINE(14469)			this->head = temp;
            		}
            		else {
HXLINE(14472)			temp->next = cur->next;
HXLINE(14473)			cur->next = temp;
            		}
HXLINE(14475)		this->pushmod = (this->modified = true);
HXLINE(14476)		this->length++;
HXLINE(14477)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_RayResult_obj,inlined_insert,return )

void ZNPList_RayResult_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14480_pop)
            	HX_STACK_THIS(this)
HXLINE(14480)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,ret) = this->head;
HXDLIN(14480)		this->head = ret->next;
HXDLIN(14480)		{
HXLINE(14480)			ret->elt = null();
HXDLIN(14480)			ret->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14480)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret;
            		}
HXDLIN(14480)		if (hx::IsNull( this->head )) {
HXLINE(14480)			this->pushmod = true;
            		}
HXDLIN(14480)		this->modified = true;
HXDLIN(14480)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,pop,(void))

void ZNPList_RayResult_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14484_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(14493)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,ret) = this->head;
HXLINE(14494)		this->head = ret->next;
HXLINE(14496)		{
HXLINE(14506)			ret->elt = null();
HXLINE(14507)			ret->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXLINE(14508)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret;
            		}
HXLINE(14513)		if (hx::IsNull( this->head )) {
HXLINE(14513)			this->pushmod = true;
            		}
HXLINE(14514)		this->modified = true;
HXLINE(14515)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,inlined_pop,(void))

 ::nape::geom::RayResult ZNPList_RayResult_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14518_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(14518)		HX_VARI(  ::nape::geom::RayResult,ret) = this->head->elt;
HXDLIN(14518)		this->pop();
HXDLIN(14518)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,pop_unsafe,return )

 ::nape::geom::RayResult ZNPList_RayResult_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14522_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(14531)		HX_VARI(  ::nape::geom::RayResult,ret) = this->head->elt;
HXLINE(14532)		this->pop();
HXLINE(14533)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,inlined_pop_unsafe,return )

void ZNPList_RayResult_obj::remove( ::nape::geom::RayResult obj){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14544_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14544)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,pre) = null();
HXDLIN(14544)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cur) = this->head;
HXDLIN(14544)		while(hx::IsNotNull( cur )){
HXLINE(14544)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14544)				{
HXLINE(14544)					HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,old);
HXDLIN(14544)					HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXDLIN(14544)					if (hx::IsNull( pre )) {
HXLINE(14544)						old = this->head;
HXDLIN(14544)						ret = old->next;
HXDLIN(14544)						this->head = ret;
HXDLIN(14544)						if (hx::IsNull( this->head )) {
HXLINE(14544)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(14544)						old = pre->next;
HXDLIN(14544)						ret = old->next;
HXDLIN(14544)						pre->next = ret;
HXDLIN(14544)						if (hx::IsNull( ret )) {
HXLINE(14544)							this->pushmod = true;
            						}
            					}
HXDLIN(14544)					{
HXLINE(14544)						HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,o) = old;
HXDLIN(14544)						o->elt = null();
HXDLIN(14544)						o->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14544)						::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = o;
            					}
HXDLIN(14544)					this->modified = true;
HXDLIN(14544)					this->length--;
HXDLIN(14544)					this->pushmod = true;
            				}
HXDLIN(14544)				goto _hx_goto_13;
            			}
HXDLIN(14544)			pre = cur;
HXDLIN(14544)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,remove,(void))

bool ZNPList_RayResult_obj::try_remove( ::nape::geom::RayResult obj){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14546_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14555)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,pre) = null();
HXLINE(14556)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cur) = this->head;
HXLINE(14557)		HX_VARI( bool,ret) = false;
HXLINE(14558)		while(hx::IsNotNull( cur )){
HXLINE(14559)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14560)				this->erase(pre);
HXLINE(14561)				ret = true;
HXLINE(14562)				goto _hx_goto_15;
            			}
HXLINE(14564)			pre = cur;
HXLINE(14565)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(14567)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,try_remove,return )

void ZNPList_RayResult_obj::inlined_remove( ::nape::geom::RayResult obj){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14580_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14580)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,pre) = null();
HXDLIN(14580)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cur) = this->head;
HXDLIN(14580)		while(hx::IsNotNull( cur )){
HXLINE(14580)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14580)				{
HXLINE(14580)					HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,old);
HXDLIN(14580)					HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXDLIN(14580)					if (hx::IsNull( pre )) {
HXLINE(14580)						old = this->head;
HXDLIN(14580)						ret = old->next;
HXDLIN(14580)						this->head = ret;
HXDLIN(14580)						if (hx::IsNull( this->head )) {
HXLINE(14580)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(14580)						old = pre->next;
HXDLIN(14580)						ret = old->next;
HXDLIN(14580)						pre->next = ret;
HXDLIN(14580)						if (hx::IsNull( ret )) {
HXLINE(14580)							this->pushmod = true;
            						}
            					}
HXDLIN(14580)					{
HXLINE(14580)						HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,o) = old;
HXDLIN(14580)						o->elt = null();
HXDLIN(14580)						o->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14580)						::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = o;
            					}
HXDLIN(14580)					this->modified = true;
HXDLIN(14580)					this->length--;
HXDLIN(14580)					this->pushmod = true;
            				}
HXDLIN(14580)				goto _hx_goto_17;
            			}
HXDLIN(14580)			pre = cur;
HXDLIN(14580)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,inlined_remove,(void))

bool ZNPList_RayResult_obj::inlined_try_remove( ::nape::geom::RayResult obj){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14584_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14593)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,pre) = null();
HXLINE(14594)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cur) = this->head;
HXLINE(14595)		HX_VARI( bool,ret) = false;
HXLINE(14596)		while(hx::IsNotNull( cur )){
HXLINE(14597)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14598)				{
HXLINE(14598)					HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,old);
HXDLIN(14598)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_RayResult,ret1,"ret");
HXDLIN(14598)					if (hx::IsNull( pre )) {
HXLINE(14598)						old = this->head;
HXDLIN(14598)						ret1 = old->next;
HXDLIN(14598)						this->head = ret1;
HXDLIN(14598)						if (hx::IsNull( this->head )) {
HXLINE(14598)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(14598)						old = pre->next;
HXDLIN(14598)						ret1 = old->next;
HXDLIN(14598)						pre->next = ret1;
HXDLIN(14598)						if (hx::IsNull( ret1 )) {
HXLINE(14598)							this->pushmod = true;
            						}
            					}
HXDLIN(14598)					{
HXLINE(14598)						HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,o) = old;
HXDLIN(14598)						o->elt = null();
HXDLIN(14598)						o->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14598)						::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = o;
            					}
HXDLIN(14598)					this->modified = true;
HXDLIN(14598)					this->length--;
HXDLIN(14598)					this->pushmod = true;
            				}
HXLINE(14599)				ret = true;
HXLINE(14600)				goto _hx_goto_19;
            			}
HXLINE(14602)			pre = cur;
HXLINE(14603)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(14605)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_RayResult ZNPList_RayResult_obj::erase( ::zpp_nape::util::ZNPNode_RayResult pre){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14608_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(14608)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,old);
HXDLIN(14608)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXDLIN(14608)		if (hx::IsNull( pre )) {
HXLINE(14608)			old = this->head;
HXDLIN(14608)			ret = old->next;
HXDLIN(14608)			this->head = ret;
HXDLIN(14608)			if (hx::IsNull( this->head )) {
HXLINE(14608)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(14608)			old = pre->next;
HXDLIN(14608)			ret = old->next;
HXDLIN(14608)			pre->next = ret;
HXDLIN(14608)			if (hx::IsNull( ret )) {
HXLINE(14608)				this->pushmod = true;
            			}
            		}
HXDLIN(14608)		{
HXLINE(14608)			HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,o) = old;
HXDLIN(14608)			o->elt = null();
HXDLIN(14608)			o->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14608)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = o;
            		}
HXDLIN(14608)		this->modified = true;
HXDLIN(14608)		this->length--;
HXDLIN(14608)		this->pushmod = true;
HXDLIN(14608)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,erase,return )

 ::zpp_nape::util::ZNPNode_RayResult ZNPList_RayResult_obj::inlined_erase( ::zpp_nape::util::ZNPNode_RayResult pre){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14612_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(14621)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,old);
HXLINE(14622)		HX_VAR(  ::zpp_nape::util::ZNPNode_RayResult,ret);
HXLINE(14623)		if (hx::IsNull( pre )) {
HXLINE(14624)			old = this->head;
HXLINE(14625)			ret = old->next;
HXLINE(14626)			this->head = ret;
HXLINE(14627)			if (hx::IsNull( this->head )) {
HXLINE(14627)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(14630)			old = pre->next;
HXLINE(14631)			ret = old->next;
HXLINE(14632)			pre->next = ret;
HXLINE(14633)			if (hx::IsNull( ret )) {
HXLINE(14633)				this->pushmod = true;
            			}
            		}
HXLINE(14636)		{
HXLINE(14637)			HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,o) = old;
HXLINE(14646)			o->elt = null();
HXLINE(14647)			o->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXLINE(14648)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = o;
            		}
HXLINE(14653)		this->modified = true;
HXLINE(14654)		this->length--;
HXLINE(14655)		this->pushmod = true;
HXLINE(14656)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_RayResult ZNPList_RayResult_obj::splice( ::zpp_nape::util::ZNPNode_RayResult pre,int n){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14658_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(14659)		while(true){
HXLINE(14659)			bool _hx_tmp;
HXDLIN(14659)			n = (n - (int)1);
HXDLIN(14659)			if (((n + (int)1) > (int)0)) {
HXLINE(14659)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(14659)				_hx_tmp = false;
            			}
HXDLIN(14659)			if (!(_hx_tmp)) {
HXLINE(14659)				goto _hx_goto_23;
            			}
HXDLIN(14659)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(14660)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_RayResult_obj,splice,return )

void ZNPList_RayResult_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14663_clear)
            	HX_STACK_THIS(this)
HXLINE(14663)		while(hx::IsNotNull( this->head )){
HXLINE(14663)			HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,ret) = this->head;
HXDLIN(14663)			this->head = ret->next;
HXDLIN(14663)			{
HXLINE(14663)				ret->elt = null();
HXDLIN(14663)				ret->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14663)				::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret;
            			}
HXDLIN(14663)			if (hx::IsNull( this->head )) {
HXLINE(14663)				this->pushmod = true;
            			}
HXDLIN(14663)			this->modified = true;
HXDLIN(14663)			this->length--;
            		}
HXDLIN(14663)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,clear,(void))

void ZNPList_RayResult_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14668_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(14669)		while(hx::IsNotNull( this->head )){
HXLINE(14669)			HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,ret) = this->head;
HXDLIN(14669)			this->head = ret->next;
HXDLIN(14669)			{
HXLINE(14669)				ret->elt = null();
HXDLIN(14669)				ret->next = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool;
HXDLIN(14669)				::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = ret;
            			}
HXDLIN(14669)			if (hx::IsNull( this->head )) {
HXLINE(14669)				this->pushmod = true;
            			}
HXDLIN(14669)			this->modified = true;
HXDLIN(14669)			this->length--;
            		}
HXLINE(14670)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,inlined_clear,(void))

void ZNPList_RayResult_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14673_reverse)
            	HX_STACK_THIS(this)
HXLINE(14674)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cur) = this->head;
HXLINE(14675)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,pre) = null();
HXLINE(14676)		while(hx::IsNotNull( cur )){
HXLINE(14677)			HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,nx) = cur->next;
HXLINE(14678)			cur->next = pre;
HXLINE(14679)			this->head = cur;
HXLINE(14680)			pre = cur;
HXLINE(14681)			cur = nx;
            		}
HXLINE(14683)		this->modified = true;
HXLINE(14684)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,reverse,(void))

bool ZNPList_RayResult_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14689_empty)
            	HX_STACK_THIS(this)
HXLINE(14689)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,empty,return )

int ZNPList_RayResult_obj::size(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14694_size)
            	HX_STACK_THIS(this)
HXLINE(14694)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,size,return )

bool ZNPList_RayResult_obj::has( ::nape::geom::RayResult obj){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14697_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14697)		HX_VAR( bool,ret);
HXDLIN(14697)		{
HXLINE(14697)			ret = false;
HXDLIN(14697)			{
HXLINE(14697)				HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cx_ite) = this->head;
HXDLIN(14697)				while(hx::IsNotNull( cx_ite )){
HXLINE(14697)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(14697)						ret = true;
HXDLIN(14697)						goto _hx_goto_33;
            					}
HXDLIN(14697)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(14697)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,has,return )

bool ZNPList_RayResult_obj::inlined_has( ::nape::geom::RayResult obj){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14701_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14710)		HX_VAR( bool,ret);
HXLINE(14711)		{
HXLINE(14712)			ret = false;
HXLINE(14713)			{
HXLINE(14714)				HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cx_ite) = this->head;
HXLINE(14715)				while(hx::IsNotNull( cx_ite )){
HXLINE(14718)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(14719)						ret = true;
HXLINE(14720)						goto _hx_goto_35;
            					}
HXLINE(14723)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(14727)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,inlined_has,return )

 ::nape::geom::RayResult ZNPList_RayResult_obj::front(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14732_front)
            	HX_STACK_THIS(this)
HXLINE(14732)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,front,return )

 ::nape::geom::RayResult ZNPList_RayResult_obj::back(){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14734_back)
            	HX_STACK_THIS(this)
HXLINE(14735)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,ret) = this->head;
HXLINE(14736)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,cur) = ret;
HXLINE(14737)		while(hx::IsNotNull( cur )){
HXLINE(14738)			ret = cur;
HXLINE(14739)			cur = cur->next;
            		}
HXLINE(14741)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_RayResult_obj,back,return )

 ::zpp_nape::util::ZNPNode_RayResult ZNPList_RayResult_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14743_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(14752)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,ret) = this->head;
HXLINE(14753)		while(true){
HXLINE(14753)			bool _hx_tmp;
HXDLIN(14753)			ind = (ind - (int)1);
HXDLIN(14753)			if (((ind + (int)1) > (int)0)) {
HXLINE(14753)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(14753)				_hx_tmp = false;
            			}
HXDLIN(14753)			if (!(_hx_tmp)) {
HXLINE(14753)				goto _hx_goto_40;
            			}
HXDLIN(14753)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(14754)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,iterator_at,return )

 ::nape::geom::RayResult ZNPList_RayResult_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_4167cac2f6aa76e0_14756_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(14765)		HX_VARI(  ::zpp_nape::util::ZNPNode_RayResult,it) = this->iterator_at(ind);
HXLINE(14766)		if (hx::IsNotNull( it )) {
HXLINE(14766)			return it->elt;
            		}
            		else {
HXLINE(14766)			return null();
            		}
HXDLIN(14766)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_RayResult_obj,at,return )


hx::ObjectPtr< ZNPList_RayResult_obj > ZNPList_RayResult_obj::__new() {
	hx::ObjectPtr< ZNPList_RayResult_obj > __this = new ZNPList_RayResult_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_RayResult_obj > ZNPList_RayResult_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_RayResult_obj *__this = (ZNPList_RayResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_RayResult_obj), true, "zpp_nape.util.ZNPList_RayResult"));
	*(void **)__this = ZNPList_RayResult_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_RayResult_obj::ZNPList_RayResult_obj()
{
}

void ZNPList_RayResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_RayResult);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_RayResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_RayResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_RayResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_RayResult >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_RayResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_RayResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_RayResult*/ ,(int)offsetof(ZNPList_RayResult_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_RayResult_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_RayResult_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_RayResult_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_RayResult_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_RayResult_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_RayResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_RayResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_RayResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_RayResult_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_RayResult_obj::__mClass;

void ZNPList_RayResult_obj::__register()
{
	hx::Object *dummy = new ZNPList_RayResult_obj;
	ZNPList_RayResult_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_RayResult","\x77","\x73","\x34","\x45");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_RayResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_RayResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_RayResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_RayResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_RayResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_RayResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
