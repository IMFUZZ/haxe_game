// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSetPair
#include <zpp_nape/util/ZPP_Set_ZPP_CbSetPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1064_new,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","new",0xe7ff089d,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.new","zpp_nape/util/RBTree.hx",1064,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1091_free,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","free",0x11e899cf,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.free","zpp_nape/util/RBTree.hx",1091,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1098_alloc,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","alloc",0xb4ab25f2,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.alloc","zpp_nape/util/RBTree.hx",1098,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1107_verify,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","verify",0xc2b94f5c,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.verify","zpp_nape/util/RBTree.hx",1107,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1173_empty,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","empty",0x02f1bc0a,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.empty","zpp_nape/util/RBTree.hx",1173,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1176_singular,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","singular",0x2395737a,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.singular","zpp_nape/util/RBTree.hx",1176,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1178_size,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","size",0x1a799de4,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.size","zpp_nape/util/RBTree.hx",1178,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1209_has,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","has",0xe7fa7797,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.has","zpp_nape/util/RBTree.hx",1209,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1211_find,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","find",0x11e1cd5c,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.find","zpp_nape/util/RBTree.hx",1211,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1220_has_weak,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","has_weak",0xc7a01d60,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.has_weak","zpp_nape/util/RBTree.hx",1220,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1222_find_weak,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","find_weak",0x7252bd7b,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.find_weak","zpp_nape/util/RBTree.hx",1222,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1232_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","lower_bound",0xb1da257d,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.lower_bound","zpp_nape/util/RBTree.hx",1232,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1268_first,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","first",0x93b4f9ad,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.first","zpp_nape/util/RBTree.hx",1268,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1281_pop_front,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","pop_front",0x5ed94438,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.pop_front","zpp_nape/util/RBTree.hx",1281,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1306_remove,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","remove",0x26026827,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.remove","zpp_nape/util/RBTree.hx",1306,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1308_successor_node,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","successor_node",0xbec3155e,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.successor_node","zpp_nape/util/RBTree.hx",1308,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1331_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","predecessor_node",0xf24fec1b,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.predecessor_node","zpp_nape/util/RBTree.hx",1331,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1354_successor,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","successor",0x18f841a3,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.successor","zpp_nape/util/RBTree.hx",1354,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1366_predecessor,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","predecessor",0x21b4e406,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.predecessor","zpp_nape/util/RBTree.hx",1366,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1378_remove_node,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","remove_node",0x844ad05a,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.remove_node","zpp_nape/util/RBTree.hx",1378,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1499_clear,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","clear",0xdb72f30a,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.clear","zpp_nape/util/RBTree.hx",1499,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1503_clear_with,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","clear_with",0x21975a9b,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.clear_with","zpp_nape/util/RBTree.hx",1503,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1511_clear_node,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","clear_node",0x1ba8ee97,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.clear_node","zpp_nape/util/RBTree.hx",1511,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1546___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","__fix_neg_red",0x1010d655,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.__fix_neg_red","zpp_nape/util/RBTree.hx",1546,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1614___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","__fix_dbl_red",0x1e290433,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.__fix_dbl_red","zpp_nape/util/RBTree.hx",1614,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1702_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","try_insert_bool",0x3069b1a9,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.try_insert_bool","zpp_nape/util/RBTree.hx",1702,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1794_try_insert,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","try_insert",0x041c5260,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.try_insert","zpp_nape/util/RBTree.hx",1794,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1886_insert,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","insert",0xbf570f1c,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.insert","zpp_nape/util/RBTree.hx",1886,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_7b9e963c4a72187b_1065_boot,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair","boot",0x0f418155,"zpp_nape.util.ZPP_Set_ZPP_CbSetPair.boot","zpp_nape/util/RBTree.hx",1065,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_CbSetPair_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1064_new)
            	HX_STACK_THIS(this)
HXLINE(1105)		this->colour = (int)0;
HXLINE(1104)		this->parent = null();
HXLINE(1103)		this->next = null();
HXLINE(1102)		this->prev = null();
HXLINE(1101)		this->data = null();
HXLINE(1100)		this->swapped = null();
HXLINE(1099)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_CbSetPair_obj::__CreateEmpty() { return new ZPP_Set_ZPP_CbSetPair_obj; }

void *ZPP_Set_ZPP_CbSetPair_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_CbSetPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_CbSetPair_obj > _hx_result = new ZPP_Set_ZPP_CbSetPair_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_CbSetPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3af78083;
}

void ZPP_Set_ZPP_CbSetPair_obj::free(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1091_free)
            	HX_STACK_THIS(this)
HXLINE(1092)		this->data = null();
HXLINE(1093)		this->lt = null();
HXLINE(1094)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,free,(void))

void ZPP_Set_ZPP_CbSetPair_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1098_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,alloc,(void))

bool ZPP_Set_ZPP_CbSetPair_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1107_verify)
            	HX_STACK_THIS(this)
HXLINE(1117)		if (!(this->empty())) {
HXLINE(1118)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,set_ite) = this->parent;
HXLINE(1119)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(1119)				set_ite = set_ite->prev;
            			}
HXLINE(1120)			while(hx::IsNotNull( set_ite )){
HXLINE(1121)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,i) = set_ite->data;
HXLINE(1122)				{
HXLINE(1123)					HX_VARI( bool,prei) = true;
HXLINE(1133)					if (!(this->empty())) {
HXLINE(1134)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,set_ite1,"set_ite") = this->parent;
HXLINE(1135)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE(1135)							set_ite1 = set_ite1->prev;
            						}
HXLINE(1136)						while(hx::IsNotNull( set_ite1 )){
HXLINE(1137)							HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,j) = set_ite1->data;
HXLINE(1139)							if (!(prei)) {
HXLINE(1140)								bool _hx_tmp;
HXDLIN(1140)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE(1140)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE(1140)									_hx_tmp = false;
            								}
HXDLIN(1140)								if (_hx_tmp) {
HXLINE(1140)									return false;
            								}
            							}
            							else {
HXLINE(1142)								if (hx::IsEq( i,j )) {
HXLINE(1142)									prei = false;
            								}
            								else {
HXLINE(1144)									bool _hx_tmp1;
HXDLIN(1144)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE(1144)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE(1144)										_hx_tmp1 = false;
            									}
HXDLIN(1144)									if (_hx_tmp1) {
HXLINE(1144)										return false;
            									}
            								}
            							}
HXLINE(1147)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE(1148)								set_ite1 = set_ite1->next;
HXLINE(1149)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE(1149)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE(1152)								while(true){
HXLINE(1152)									bool _hx_tmp2;
HXDLIN(1152)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE(1152)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE(1152)										_hx_tmp2 = false;
            									}
HXDLIN(1152)									if (!(_hx_tmp2)) {
HXLINE(1152)										goto _hx_goto_8;
            									}
HXDLIN(1152)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE(1153)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE(1159)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(1160)					set_ite = set_ite->next;
HXLINE(1161)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(1161)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(1164)					while(true){
HXLINE(1164)						bool _hx_tmp3;
HXDLIN(1164)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(1164)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(1164)							_hx_tmp3 = false;
            						}
HXDLIN(1164)						if (!(_hx_tmp3)) {
HXLINE(1164)							goto _hx_goto_10;
            						}
HXDLIN(1164)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE(1165)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(1170)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,verify,return )

bool ZPP_Set_ZPP_CbSetPair_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1173_empty)
            	HX_STACK_THIS(this)
HXLINE(1173)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,empty,return )

bool ZPP_Set_ZPP_CbSetPair_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1176_singular)
            	HX_STACK_THIS(this)
HXLINE(1176)		bool _hx_tmp;
HXDLIN(1176)		if (hx::IsNotNull( this->parent )) {
HXLINE(1176)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE(1176)			_hx_tmp = false;
            		}
HXDLIN(1176)		if (_hx_tmp) {
HXLINE(1176)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE(1176)			return false;
            		}
HXDLIN(1176)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,singular,return )

int ZPP_Set_ZPP_CbSetPair_obj::size(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1178_size)
            	HX_STACK_THIS(this)
HXLINE(1179)		HX_VARI( int,ret) = (int)0;
HXLINE(1189)		if (!(this->empty())) {
HXLINE(1190)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,set_ite) = this->parent;
HXLINE(1191)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(1191)				set_ite = set_ite->prev;
            			}
HXLINE(1192)			while(hx::IsNotNull( set_ite )){
HXLINE(1194)				ret = (ret + (int)1);
HXLINE(1195)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(1196)					set_ite = set_ite->next;
HXLINE(1197)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(1197)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(1200)					while(true){
HXLINE(1200)						bool _hx_tmp;
HXDLIN(1200)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(1200)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(1200)							_hx_tmp = false;
            						}
HXDLIN(1200)						if (!(_hx_tmp)) {
HXLINE(1200)							goto _hx_goto_17;
            						}
HXDLIN(1200)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE(1201)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(1206)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,size,return )

bool ZPP_Set_ZPP_CbSetPair_obj::has( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1209_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1209)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::find( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1211_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1212)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = this->parent;
HXLINE(1213)		while(true){
HXLINE(1213)			bool _hx_tmp;
HXDLIN(1213)			if (hx::IsNotNull( cur )) {
HXLINE(1213)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE(1213)				_hx_tmp = false;
            			}
HXDLIN(1213)			if (!(_hx_tmp)) {
HXLINE(1213)				goto _hx_goto_20;
            			}
HXLINE(1214)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(1214)				cur = cur->prev;
            			}
            			else {
HXLINE(1215)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE(1217)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,find,return )

bool ZPP_Set_ZPP_CbSetPair_obj::has_weak( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1220_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1220)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::find_weak( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1222_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1223)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = this->parent;
HXLINE(1224)		while(hx::IsNotNull( cur )){
HXLINE(1225)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(1225)				cur = cur->prev;
            			}
            			else {
HXLINE(1226)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(1226)					cur = cur->next;
            				}
            				else {
HXLINE(1227)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE(1229)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,find_weak,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::lower_bound( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1232_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1233)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret) = null();
HXLINE(1243)		if (!(this->empty())) {
HXLINE(1244)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,set_ite) = this->parent;
HXLINE(1245)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(1245)				set_ite = set_ite->prev;
            			}
HXLINE(1246)			while(hx::IsNotNull( set_ite )){
HXLINE(1247)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,elt) = set_ite->data;
HXLINE(1249)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE(1250)					ret = elt;
HXLINE(1251)					goto _hx_goto_26;
            				}
HXLINE(1254)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(1255)					set_ite = set_ite->next;
HXLINE(1256)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(1256)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(1259)					while(true){
HXLINE(1259)						bool _hx_tmp;
HXDLIN(1259)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(1259)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(1259)							_hx_tmp = false;
            						}
HXDLIN(1259)						if (!(_hx_tmp)) {
HXLINE(1259)							goto _hx_goto_28;
            						}
HXDLIN(1259)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE(1260)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE(1232)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,lower_bound,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::first(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1268_first)
            	HX_STACK_THIS(this)
HXLINE(1277)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = this->parent;
HXLINE(1278)		while(hx::IsNotNull( cur->prev )){
HXLINE(1278)			cur = cur->prev;
            		}
HXLINE(1279)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,first,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1281_pop_front)
            	HX_STACK_THIS(this)
HXLINE(1290)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = this->parent;
HXLINE(1291)		while(hx::IsNotNull( cur->prev )){
HXLINE(1291)			cur = cur->prev;
            		}
HXLINE(1292)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret) = cur->data;
HXLINE(1293)		this->remove_node(cur);
HXLINE(1294)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,pop_front,return )

void ZPP_Set_ZPP_CbSetPair_obj::remove( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1306_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1306)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair cur){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1308_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(1317)		if (hx::IsNotNull( cur->next )) {
HXLINE(1318)			cur = cur->next;
HXLINE(1319)			while(hx::IsNotNull( cur->prev )){
HXLINE(1319)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE(1322)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,pre) = cur;
HXLINE(1323)			cur = cur->parent;
HXLINE(1324)			while(true){
HXLINE(1324)				bool _hx_tmp;
HXDLIN(1324)				if (hx::IsNotNull( cur )) {
HXLINE(1324)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE(1324)					_hx_tmp = false;
            				}
HXDLIN(1324)				if (!(_hx_tmp)) {
HXLINE(1324)					goto _hx_goto_36;
            				}
HXLINE(1325)				pre = cur;
HXLINE(1326)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE(1329)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair cur){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1331_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(1340)		if (hx::IsNotNull( cur->prev )) {
HXLINE(1341)			cur = cur->prev;
HXLINE(1342)			while(hx::IsNotNull( cur->next )){
HXLINE(1342)				cur = cur->next;
            			}
            		}
            		else {
HXLINE(1345)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,pre) = cur;
HXLINE(1346)			cur = cur->parent;
HXLINE(1347)			while(true){
HXLINE(1347)				bool _hx_tmp;
HXDLIN(1347)				if (hx::IsNotNull( cur )) {
HXLINE(1347)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE(1347)					_hx_tmp = false;
            				}
HXDLIN(1347)				if (!(_hx_tmp)) {
HXLINE(1347)					goto _hx_goto_39;
            				}
HXLINE(1348)				pre = cur;
HXLINE(1349)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE(1352)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,predecessor_node,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::successor( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1354_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1363)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,node) = this->successor_node(this->find(obj));
HXLINE(1364)		if (hx::IsNull( node )) {
HXLINE(1364)			return null();
            		}
            		else {
HXLINE(1364)			return node->data;
            		}
HXDLIN(1364)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,successor,return )

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::predecessor( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1366_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1375)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,node) = this->predecessor_node(this->find(obj));
HXLINE(1376)		if (hx::IsNull( node )) {
HXLINE(1376)			return null();
            		}
            		else {
HXLINE(1376)			return node->data;
            		}
HXDLIN(1376)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,predecessor,return )

void ZPP_Set_ZPP_CbSetPair_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair cur){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1378_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(1387)		bool _hx_tmp;
HXDLIN(1387)		if (hx::IsNotNull( cur->next )) {
HXLINE(1387)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE(1387)			_hx_tmp = false;
            		}
HXDLIN(1387)		if (_hx_tmp) {
HXLINE(1388)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,sm) = cur->next;
HXLINE(1389)			while(hx::IsNotNull( sm->prev )){
HXLINE(1389)				sm = sm->prev;
            			}
HXLINE(1390)			{
HXLINE(1391)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,t) = cur->data;
HXLINE(1392)				cur->data = sm->data;
HXLINE(1393)				sm->data = t;
            			}
HXLINE(1395)			if (hx::IsNotNull( this->swapped )) {
HXLINE(1395)				this->swapped(cur->data,sm->data);
            			}
HXLINE(1396)			cur = sm;
            		}
HXLINE(1406)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,child);
HXDLIN(1406)		if (hx::IsNull( cur->prev )) {
HXLINE(1406)			child = cur->next;
            		}
            		else {
HXLINE(1406)			child = cur->prev;
            		}
HXLINE(1407)		if ((cur->colour == (int)1)) {
HXLINE(1408)			bool _hx_tmp1;
HXDLIN(1408)			if (hx::IsNull( cur->prev )) {
HXLINE(1408)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE(1408)				_hx_tmp1 = true;
            			}
HXDLIN(1408)			if (_hx_tmp1) {
HXLINE(1408)				child->colour = (int)1;
            			}
            			else {
HXLINE(1409)				if (hx::IsNotNull( cur->parent )) {
HXLINE(1410)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,parent) = cur->parent;
HXLINE(1411)					while(true){
HXLINE(1412)						parent->colour++;
HXLINE(1413)						parent->prev->colour--;
HXLINE(1414)						parent->next->colour--;
HXLINE(1415)						{
HXLINE(1416)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,child1,"child") = parent->prev;
HXLINE(1417)							if ((child1->colour == (int)-1)) {
HXLINE(1418)								this->_hx___fix_neg_red(child1);
HXLINE(1419)								goto _hx_goto_44;
            							}
            							else {
HXLINE(1421)								if ((child1->colour == (int)0)) {
HXLINE(1423)									bool _hx_tmp2;
HXDLIN(1423)									if (hx::IsNotNull( child1->prev )) {
HXLINE(1423)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE(1423)										_hx_tmp2 = false;
            									}
HXDLIN(1423)									if (_hx_tmp2) {
HXLINE(1424)										this->_hx___fix_dbl_red(child1->prev);
HXLINE(1425)										goto _hx_goto_44;
            									}
HXLINE(1429)									bool _hx_tmp3;
HXDLIN(1429)									if (hx::IsNotNull( child1->next )) {
HXLINE(1429)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE(1429)										_hx_tmp3 = false;
            									}
HXDLIN(1429)									if (_hx_tmp3) {
HXLINE(1430)										this->_hx___fix_dbl_red(child1->next);
HXLINE(1431)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(1436)						{
HXLINE(1437)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,child2,"child") = parent->next;
HXLINE(1438)							if ((child2->colour == (int)-1)) {
HXLINE(1439)								this->_hx___fix_neg_red(child2);
HXLINE(1440)								goto _hx_goto_44;
            							}
            							else {
HXLINE(1442)								if ((child2->colour == (int)0)) {
HXLINE(1444)									bool _hx_tmp4;
HXDLIN(1444)									if (hx::IsNotNull( child2->prev )) {
HXLINE(1444)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE(1444)										_hx_tmp4 = false;
            									}
HXDLIN(1444)									if (_hx_tmp4) {
HXLINE(1445)										this->_hx___fix_dbl_red(child2->prev);
HXLINE(1446)										goto _hx_goto_44;
            									}
HXLINE(1450)									bool _hx_tmp5;
HXDLIN(1450)									if (hx::IsNotNull( child2->next )) {
HXLINE(1450)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE(1450)										_hx_tmp5 = false;
            									}
HXDLIN(1450)									if (_hx_tmp5) {
HXLINE(1451)										this->_hx___fix_dbl_red(child2->next);
HXLINE(1452)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(1457)						if ((parent->colour == (int)2)) {
HXLINE(1458)							if (hx::IsNull( parent->parent )) {
HXLINE(1459)								parent->colour = (int)1;
            							}
            							else {
HXLINE(1462)								parent = parent->parent;
HXLINE(1463)								continue;
            							}
            						}
HXLINE(1466)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE(1470)		{
HXLINE(1471)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,par) = cur->parent;
HXLINE(1472)			if (hx::IsNull( par )) {
HXLINE(1473)				this->parent = child;
            			}
            			else {
HXLINE(1475)				if (hx::IsEq( par->prev,cur )) {
HXLINE(1475)					par->prev = child;
            				}
            				else {
HXLINE(1476)					par->next = child;
            				}
            			}
HXLINE(1477)			if (hx::IsNotNull( child )) {
HXLINE(1477)				child->parent = par;
            			}
            		}
HXLINE(1479)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE(1480)		{
HXLINE(1481)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,o) = cur;
HXLINE(1490)			{
HXLINE(1490)				o->data = null();
HXDLIN(1490)				o->lt = null();
HXDLIN(1490)				o->swapped = null();
            			}
HXLINE(1491)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1492)			::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,remove_node,(void))

void ZPP_Set_ZPP_CbSetPair_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1499_clear)
            	HX_STACK_THIS(this)
HXLINE(1499)		if (hx::IsNotNull( this->parent )) {
HXLINE(1499)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = this->parent;
HXDLIN(1499)			while(hx::IsNotNull( cur )){
HXLINE(1499)				if (hx::IsNotNull( cur->prev )) {
HXLINE(1499)					cur = cur->prev;
            				}
            				else {
HXLINE(1499)					if (hx::IsNotNull( cur->next )) {
HXLINE(1499)						cur = cur->next;
            					}
            					else {
HXLINE(1499)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,ret) = cur->parent;
HXDLIN(1499)						if (hx::IsNotNull( ret )) {
HXLINE(1499)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(1499)								ret->prev = null();
            							}
            							else {
HXLINE(1499)								ret->next = null();
            							}
HXDLIN(1499)							cur->parent = null();
            						}
HXDLIN(1499)						{
HXLINE(1499)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,o) = cur;
HXDLIN(1499)							{
HXLINE(1499)								o->data = null();
HXDLIN(1499)								o->lt = null();
HXDLIN(1499)								o->swapped = null();
            							}
HXDLIN(1499)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(1499)							::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = o;
            						}
HXDLIN(1499)						cur = ret;
            					}
            				}
            			}
HXDLIN(1499)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_CbSetPair_obj,clear,(void))

void ZPP_Set_ZPP_CbSetPair_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1503_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(1503)		if (hx::IsNull( this->parent )) {
HXLINE(1503)			return;
            		}
            		else {
HXLINE(1505)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = this->parent;
HXLINE(1506)			while(hx::IsNotNull( cur )){
HXLINE(1506)				if (hx::IsNotNull( cur->prev )) {
HXLINE(1506)					cur = cur->prev;
            				}
            				else {
HXLINE(1506)					if (hx::IsNotNull( cur->next )) {
HXLINE(1506)						cur = cur->next;
            					}
            					else {
HXLINE(1506)						lambda(cur->data);
HXDLIN(1506)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,ret) = cur->parent;
HXDLIN(1506)						if (hx::IsNotNull( ret )) {
HXLINE(1506)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(1506)								ret->prev = null();
            							}
            							else {
HXLINE(1506)								ret->next = null();
            							}
HXDLIN(1506)							cur->parent = null();
            						}
HXDLIN(1506)						{
HXLINE(1506)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,o) = cur;
HXDLIN(1506)							{
HXLINE(1506)								o->data = null();
HXDLIN(1506)								o->lt = null();
HXDLIN(1506)								o->swapped = null();
            							}
HXDLIN(1506)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(1506)							::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = o;
            						}
HXDLIN(1506)						cur = ret;
            					}
            				}
            			}
HXLINE(1507)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1511_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(1520)		lambda(node->data);
HXLINE(1521)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,ret) = node->parent;
HXLINE(1522)		if (hx::IsNotNull( ret )) {
HXLINE(1523)			if (hx::IsEq( node,ret->prev )) {
HXLINE(1523)				ret->prev = null();
            			}
            			else {
HXLINE(1524)				ret->next = null();
            			}
HXLINE(1525)			node->parent = null();
            		}
HXLINE(1527)		{
HXLINE(1537)			{
HXLINE(1537)				node->data = null();
HXDLIN(1537)				node->lt = null();
HXDLIN(1537)				node->swapped = null();
            			}
HXLINE(1538)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1539)			::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = node;
            		}
HXLINE(1544)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_CbSetPair_obj,clear_node,return )

void ZPP_Set_ZPP_CbSetPair_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair negred){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1546___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE(1547)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,parent) = negred->parent;
HXLINE(1548)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,child);
HXDLIN(1548)		if (hx::IsEq( parent->prev,negred )) {
HXLINE(1549)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,nl) = negred->prev;
HXLINE(1550)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,nr) = negred->next;
HXLINE(1551)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,trl) = nr->prev;
HXLINE(1552)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,trr) = nr->next;
HXLINE(1553)			nl->colour = (int)0;
HXLINE(1554)			negred->colour = (parent->colour = (int)1);
HXLINE(1555)			{
HXLINE(1556)				negred->next = trl;
HXLINE(1557)				if (hx::IsNotNull( trl )) {
HXLINE(1557)					trl->parent = negred;
            				}
            			}
HXLINE(1559)			{
HXLINE(1560)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,t) = parent->data;
HXLINE(1561)				parent->data = nr->data;
HXLINE(1562)				nr->data = t;
            			}
HXLINE(1564)			if (hx::IsNotNull( this->swapped )) {
HXLINE(1564)				this->swapped(parent->data,nr->data);
            			}
HXLINE(1565)			{
HXLINE(1566)				nr->prev = trr;
HXLINE(1567)				if (hx::IsNotNull( trr )) {
HXLINE(1567)					trr->parent = nr;
            				}
            			}
HXLINE(1569)			{
HXLINE(1570)				nr->next = parent->next;
HXLINE(1571)				if (hx::IsNotNull( parent->next )) {
HXLINE(1571)					parent->next->parent = nr;
            				}
            			}
HXLINE(1573)			{
HXLINE(1574)				parent->next = nr;
HXLINE(1575)				if (hx::IsNotNull( nr )) {
HXLINE(1575)					nr->parent = parent;
            				}
            			}
HXLINE(1548)			child = nl;
            		}
            		else {
HXLINE(1580)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,nl1,"nl") = negred->next;
HXLINE(1581)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,nr1,"nr") = negred->prev;
HXLINE(1582)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,trl1,"trl") = nr1->next;
HXLINE(1583)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,trr1,"trr") = nr1->prev;
HXLINE(1584)			nl1->colour = (int)0;
HXLINE(1585)			negred->colour = (parent->colour = (int)1);
HXLINE(1586)			{
HXLINE(1587)				negred->prev = trl1;
HXLINE(1588)				if (hx::IsNotNull( trl1 )) {
HXLINE(1588)					trl1->parent = negred;
            				}
            			}
HXLINE(1590)			{
HXLINE(1591)				HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,t1,"t") = parent->data;
HXLINE(1592)				parent->data = nr1->data;
HXLINE(1593)				nr1->data = t1;
            			}
HXLINE(1595)			if (hx::IsNotNull( this->swapped )) {
HXLINE(1595)				this->swapped(parent->data,nr1->data);
            			}
HXLINE(1596)			{
HXLINE(1597)				nr1->next = trr1;
HXLINE(1598)				if (hx::IsNotNull( trr1 )) {
HXLINE(1598)					trr1->parent = nr1;
            				}
            			}
HXLINE(1600)			{
HXLINE(1601)				nr1->prev = parent->prev;
HXLINE(1602)				if (hx::IsNotNull( parent->prev )) {
HXLINE(1602)					parent->prev->parent = nr1;
            				}
            			}
HXLINE(1604)			{
HXLINE(1605)				parent->prev = nr1;
HXLINE(1606)				if (hx::IsNotNull( nr1 )) {
HXLINE(1606)					nr1->parent = parent;
            				}
            			}
HXLINE(1548)			child = nl1;
            		}
HXLINE(1610)		bool _hx_tmp;
HXDLIN(1610)		if (hx::IsNotNull( child->prev )) {
HXLINE(1610)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE(1610)			_hx_tmp = false;
            		}
HXDLIN(1610)		if (_hx_tmp) {
HXLINE(1610)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE(1611)			bool _hx_tmp1;
HXDLIN(1611)			if (hx::IsNotNull( child->next )) {
HXLINE(1611)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE(1611)				_hx_tmp1 = false;
            			}
HXDLIN(1611)			if (_hx_tmp1) {
HXLINE(1611)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_CbSetPair_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair x){
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1614___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1614)		while(true){
HXLINE(1615)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,par) = x->parent;
HXLINE(1616)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,g) = par->parent;
HXLINE(1617)			if (hx::IsNull( g )) {
HXLINE(1618)				par->colour = (int)1;
HXLINE(1619)				goto _hx_goto_52;
            			}
HXLINE(1621)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,n1);
HXDLIN(1621)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,n2);
HXDLIN(1621)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,n3);
HXDLIN(1621)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,t1);
HXDLIN(1621)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,t2);
HXDLIN(1621)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,t3);
HXDLIN(1621)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,t4);
HXLINE(1622)			if (hx::IsEq( par,g->prev )) {
HXLINE(1623)				n3 = g;
HXLINE(1624)				t4 = g->next;
HXLINE(1625)				if (hx::IsEq( x,par->prev )) {
HXLINE(1626)					n1 = x;
HXLINE(1627)					n2 = par;
HXLINE(1628)					t1 = x->prev;
HXLINE(1629)					t2 = x->next;
HXLINE(1630)					t3 = par->next;
            				}
            				else {
HXLINE(1633)					n1 = par;
HXLINE(1634)					n2 = x;
HXLINE(1635)					t1 = par->prev;
HXLINE(1636)					t2 = x->prev;
HXLINE(1637)					t3 = x->next;
            				}
            			}
            			else {
HXLINE(1641)				n1 = g;
HXLINE(1642)				t1 = g->prev;
HXLINE(1643)				if (hx::IsEq( x,par->prev )) {
HXLINE(1644)					n2 = x;
HXLINE(1645)					n3 = par;
HXLINE(1646)					t2 = x->prev;
HXLINE(1647)					t3 = x->next;
HXLINE(1648)					t4 = par->next;
            				}
            				else {
HXLINE(1651)					n2 = par;
HXLINE(1652)					n3 = x;
HXLINE(1653)					t2 = par->prev;
HXLINE(1654)					t3 = x->prev;
HXLINE(1655)					t4 = x->next;
            				}
            			}
HXLINE(1658)			{
HXLINE(1659)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,par1,"par") = g->parent;
HXLINE(1660)				if (hx::IsNull( par1 )) {
HXLINE(1661)					this->parent = n2;
            				}
            				else {
HXLINE(1663)					if (hx::IsEq( par1->prev,g )) {
HXLINE(1663)						par1->prev = n2;
            					}
            					else {
HXLINE(1664)						par1->next = n2;
            					}
            				}
HXLINE(1665)				if (hx::IsNotNull( n2 )) {
HXLINE(1665)					n2->parent = par1;
            				}
            			}
HXLINE(1667)			{
HXLINE(1668)				n1->prev = t1;
HXLINE(1669)				if (hx::IsNotNull( t1 )) {
HXLINE(1669)					t1->parent = n1;
            				}
            			}
HXLINE(1671)			{
HXLINE(1672)				n1->next = t2;
HXLINE(1673)				if (hx::IsNotNull( t2 )) {
HXLINE(1673)					t2->parent = n1;
            				}
            			}
HXLINE(1675)			{
HXLINE(1676)				n2->prev = n1;
HXLINE(1677)				if (hx::IsNotNull( n1 )) {
HXLINE(1677)					n1->parent = n2;
            				}
            			}
HXLINE(1679)			{
HXLINE(1680)				n2->next = n3;
HXLINE(1681)				if (hx::IsNotNull( n3 )) {
HXLINE(1681)					n3->parent = n2;
            				}
            			}
HXLINE(1683)			{
HXLINE(1684)				n3->prev = t3;
HXLINE(1685)				if (hx::IsNotNull( t3 )) {
HXLINE(1685)					t3->parent = n3;
            				}
            			}
HXLINE(1687)			{
HXLINE(1688)				n3->next = t4;
HXLINE(1689)				if (hx::IsNotNull( t4 )) {
HXLINE(1689)					t4->parent = n3;
            				}
            			}
HXLINE(1691)			n2->colour = (g->colour - (int)1);
HXLINE(1692)			n1->colour = (int)1;
HXLINE(1693)			n3->colour = (int)1;
HXLINE(1694)			if (hx::IsEq( n2,this->parent )) {
HXLINE(1694)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE(1695)				bool _hx_tmp;
HXDLIN(1695)				if ((n2->colour == (int)0)) {
HXLINE(1695)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE(1695)					_hx_tmp = false;
            				}
HXDLIN(1695)				if (_hx_tmp) {
HXLINE(1696)					x = n2;
HXLINE(1697)					continue;
            				}
            			}
HXLINE(1699)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_CbSetPair_obj::try_insert_bool( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_GC_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1702_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1703)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,x) = null();
HXLINE(1704)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = null();
HXLINE(1705)		if (hx::IsNull( this->parent )) {
HXLINE(1707)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1708)				x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(1714)				x = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1715)				::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = x->next;
HXLINE(1716)				x->next = null();
            			}
HXLINE(1723)			x->data = obj;
HXLINE(1724)			this->parent = x;
            		}
            		else {
HXLINE(1727)			cur = this->parent;
HXLINE(1728)			while(true){
HXLINE(1729)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(1730)					if (hx::IsNull( cur->prev )) {
HXLINE(1732)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1733)							x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(1739)							x = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1740)							::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = x->next;
HXLINE(1741)							x->next = null();
            						}
HXLINE(1748)						x->data = obj;
HXLINE(1749)						cur->prev = x;
HXLINE(1750)						x->parent = cur;
HXLINE(1751)						goto _hx_goto_54;
            					}
            					else {
HXLINE(1753)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(1755)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(1756)						if (hx::IsNull( cur->next )) {
HXLINE(1758)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1759)								x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(1765)								x = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1766)								::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = x->next;
HXLINE(1767)								x->next = null();
            							}
HXLINE(1774)							x->data = obj;
HXLINE(1775)							cur->next = x;
HXLINE(1776)							x->parent = cur;
HXLINE(1777)							goto _hx_goto_54;
            						}
            						else {
HXLINE(1779)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(1781)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE(1784)		if (hx::IsNull( x )) {
HXLINE(1784)			return false;
            		}
            		else {
HXLINE(1786)			if (hx::IsNull( x->parent )) {
HXLINE(1786)				x->colour = (int)1;
            			}
            			else {
HXLINE(1788)				x->colour = (int)0;
HXLINE(1789)				if ((x->parent->colour == (int)0)) {
HXLINE(1789)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(1791)			return true;
            		}
HXLINE(1784)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::try_insert( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_GC_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1794_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1795)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,x) = null();
HXLINE(1796)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = null();
HXLINE(1797)		if (hx::IsNull( this->parent )) {
HXLINE(1799)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1800)				x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(1806)				x = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1807)				::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = x->next;
HXLINE(1808)				x->next = null();
            			}
HXLINE(1815)			x->data = obj;
HXLINE(1816)			this->parent = x;
            		}
            		else {
HXLINE(1819)			cur = this->parent;
HXLINE(1820)			while(true){
HXLINE(1821)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(1822)					if (hx::IsNull( cur->prev )) {
HXLINE(1824)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1825)							x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(1831)							x = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1832)							::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = x->next;
HXLINE(1833)							x->next = null();
            						}
HXLINE(1840)						x->data = obj;
HXLINE(1841)						cur->prev = x;
HXLINE(1842)						x->parent = cur;
HXLINE(1843)						goto _hx_goto_56;
            					}
            					else {
HXLINE(1845)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(1847)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(1848)						if (hx::IsNull( cur->next )) {
HXLINE(1850)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1851)								x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(1857)								x = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1858)								::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = x->next;
HXLINE(1859)								x->next = null();
            							}
HXLINE(1866)							x->data = obj;
HXLINE(1867)							cur->next = x;
HXLINE(1868)							x->parent = cur;
HXLINE(1869)							goto _hx_goto_56;
            						}
            						else {
HXLINE(1871)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(1873)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE(1876)		if (hx::IsNull( x )) {
HXLINE(1876)			return cur;
            		}
            		else {
HXLINE(1878)			if (hx::IsNull( x->parent )) {
HXLINE(1878)				x->colour = (int)1;
            			}
            			else {
HXLINE(1880)				x->colour = (int)0;
HXLINE(1881)				if ((x->parent->colour == (int)0)) {
HXLINE(1881)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(1883)			return x;
            		}
HXLINE(1876)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::insert( ::zpp_nape::callbacks::ZPP_CbSetPair obj){
            	HX_GC_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1886_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1895)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,x);
HXLINE(1897)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1898)			x =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1904)			x = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1905)			::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = x->next;
HXLINE(1906)			x->next = null();
            		}
HXLINE(1913)		x->data = obj;
HXLINE(1914)		if (hx::IsNull( this->parent )) {
HXLINE(1914)			this->parent = x;
            		}
            		else {
HXLINE(1916)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = this->parent;
HXLINE(1917)			while(true){
HXLINE(1918)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(1919)					if (hx::IsNull( cur->prev )) {
HXLINE(1920)						cur->prev = x;
HXLINE(1921)						x->parent = cur;
HXLINE(1922)						goto _hx_goto_58;
            					}
            					else {
HXLINE(1924)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(1927)					if (hx::IsNull( cur->next )) {
HXLINE(1928)						cur->next = x;
HXLINE(1929)						x->parent = cur;
HXLINE(1930)						goto _hx_goto_58;
            					}
            					else {
HXLINE(1932)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(1936)		if (hx::IsNull( x->parent )) {
HXLINE(1936)			x->colour = (int)1;
            		}
            		else {
HXLINE(1938)			x->colour = (int)0;
HXLINE(1939)			if ((x->parent->colour == (int)0)) {
HXLINE(1939)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(1949)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_CbSetPair_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_CbSetPair_obj > ZPP_Set_ZPP_CbSetPair_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_CbSetPair_obj > __this = new ZPP_Set_ZPP_CbSetPair_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_CbSetPair_obj > ZPP_Set_ZPP_CbSetPair_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_CbSetPair_obj *__this = (ZPP_Set_ZPP_CbSetPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_CbSetPair_obj), true, "zpp_nape.util.ZPP_Set_ZPP_CbSetPair"));
	*(void **)__this = ZPP_Set_ZPP_CbSetPair_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_CbSetPair_obj::ZPP_Set_ZPP_CbSetPair_obj()
{
}

void ZPP_Set_ZPP_CbSetPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_CbSetPair);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_CbSetPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_CbSetPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_CbSetPair_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_CbSetPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSetPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_CbSetPair_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_CbSetPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_CbSetPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_CbSetPair_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_CbSetPair_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_CbSetPair*/ ,(int)offsetof(ZPP_Set_ZPP_CbSetPair_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSetPair*/ ,(int)offsetof(ZPP_Set_ZPP_CbSetPair_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSetPair*/ ,(int)offsetof(ZPP_Set_ZPP_CbSetPair_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSetPair*/ ,(int)offsetof(ZPP_Set_ZPP_CbSetPair_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_CbSetPair_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_CbSetPair_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSetPair*/ ,(void *) &ZPP_Set_ZPP_CbSetPair_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_CbSetPair_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_CbSetPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_CbSetPair_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_CbSetPair_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_CbSetPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_CbSetPair_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_CbSetPair_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_CbSetPair_obj::__mClass;

static ::String ZPP_Set_ZPP_CbSetPair_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_CbSetPair_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_CbSetPair_obj;
	ZPP_Set_ZPP_CbSetPair_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_CbSetPair","\x2b","\x76","\x15","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_CbSetPair_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_CbSetPair_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_CbSetPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_CbSetPair_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_CbSetPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_CbSetPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_CbSetPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_CbSetPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_CbSetPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_CbSetPair_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7b9e963c4a72187b_1065_boot)
HXLINE(1065)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
