// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_AABBNode
#include <zpp_nape/util/ZNPList_ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_AABBNode
#include <zpp_nape/util/ZNPNode_ZPP_AABBNode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10183_new,"zpp_nape.util.ZNPList_ZPP_AABBNode","new",0xf23b0d49,"zpp_nape.util.ZNPList_ZPP_AABBNode.new","zpp_nape/util/Lists.hx",10183,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10189_begin,"zpp_nape.util.ZNPList_ZPP_AABBNode","begin",0x5834f352,"zpp_nape.util.ZNPList_ZPP_AABBNode.begin","zpp_nape/util/Lists.hx",10189,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10196_setbegin,"zpp_nape.util.ZNPList_ZPP_AABBNode","setbegin",0x86e339be,"zpp_nape.util.ZNPList_ZPP_AABBNode.setbegin","zpp_nape/util/Lists.hx",10196,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10202_add,"zpp_nape.util.ZNPList_ZPP_AABBNode","add",0xf2312f0a,"zpp_nape.util.ZNPList_ZPP_AABBNode.add","zpp_nape/util/Lists.hx",10202,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10206_inlined_add,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_add",0x456a1a76,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_add","zpp_nape/util/Lists.hx",10206,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10252_addAll,"zpp_nape.util.ZNPList_ZPP_AABBNode","addAll",0xda440437,"zpp_nape.util.ZNPList_ZPP_AABBNode.addAll","zpp_nape/util/Lists.hx",10252,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10262_insert,"zpp_nape.util.ZNPList_ZPP_AABBNode","insert",0xd9263df0,"zpp_nape.util.ZNPList_ZPP_AABBNode.insert","zpp_nape/util/Lists.hx",10262,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10266_inlined_insert,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_insert",0xf5753e04,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_insert","zpp_nape/util/Lists.hx",10266,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10310_pop,"zpp_nape.util.ZNPList_ZPP_AABBNode","pop",0xf23c9a7a,"zpp_nape.util.ZNPList_ZPP_AABBNode.pop","zpp_nape/util/Lists.hx",10310,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10314_inlined_pop,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_pop",0x457585e6,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_pop","zpp_nape/util/Lists.hx",10314,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10348_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_AABBNode","pop_unsafe",0x808e9e8b,"zpp_nape.util.ZNPList_ZPP_AABBNode.pop_unsafe","zpp_nape/util/Lists.hx",10348,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10352_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_pop_unsafe",0xf461389f,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_pop_unsafe","zpp_nape/util/Lists.hx",10352,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10374_remove,"zpp_nape.util.ZNPList_ZPP_AABBNode","remove",0x3fd196fb,"zpp_nape.util.ZNPList_ZPP_AABBNode.remove","zpp_nape/util/Lists.hx",10374,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10376_try_remove,"zpp_nape.util.ZNPList_ZPP_AABBNode","try_remove",0x97b8d43f,"zpp_nape.util.ZNPList_ZPP_AABBNode.try_remove","zpp_nape/util/Lists.hx",10376,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10410_inlined_remove,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_remove",0x5c20970f,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_remove","zpp_nape/util/Lists.hx",10410,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10414_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_try_remove",0x0b8b6e53,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_try_remove","zpp_nape/util/Lists.hx",10414,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10438_erase,"zpp_nape.util.ZNPList_ZPP_AABBNode","erase",0x1afbf20f,"zpp_nape.util.ZNPList_ZPP_AABBNode.erase","zpp_nape/util/Lists.hx",10438,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10442_inlined_erase,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_erase",0x5ed7907b,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_erase","zpp_nape/util/Lists.hx",10442,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10488_splice,"zpp_nape.util.ZNPList_ZPP_AABBNode","splice",0xfae78033,"zpp_nape.util.ZNPList_ZPP_AABBNode.splice","zpp_nape/util/Lists.hx",10488,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10493_clear,"zpp_nape.util.ZNPList_ZPP_AABBNode","clear",0xf03a7ab6,"zpp_nape.util.ZNPList_ZPP_AABBNode.clear","zpp_nape/util/Lists.hx",10493,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10498_inlined_clear,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_clear",0x34161922,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_clear","zpp_nape/util/Lists.hx",10498,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10503_reverse,"zpp_nape.util.ZNPList_ZPP_AABBNode","reverse",0xbf8e9e8b,"zpp_nape.util.ZNPList_ZPP_AABBNode.reverse","zpp_nape/util/Lists.hx",10503,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10519_empty,"zpp_nape.util.ZNPList_ZPP_AABBNode","empty",0x17b943b6,"zpp_nape.util.ZNPList_ZPP_AABBNode.empty","zpp_nape/util/Lists.hx",10519,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10524_size,"zpp_nape.util.ZNPList_ZPP_AABBNode","size",0x04c1afb8,"zpp_nape.util.ZNPList_ZPP_AABBNode.size","zpp_nape/util/Lists.hx",10524,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10527_has,"zpp_nape.util.ZNPList_ZPP_AABBNode","has",0xf2367c43,"zpp_nape.util.ZNPList_ZPP_AABBNode.has","zpp_nape/util/Lists.hx",10527,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10531_inlined_has,"zpp_nape.util.ZNPList_ZPP_AABBNode","inlined_has",0x456f67af,"zpp_nape.util.ZNPList_ZPP_AABBNode.inlined_has","zpp_nape/util/Lists.hx",10531,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10562_front,"zpp_nape.util.ZNPList_ZPP_AABBNode","front",0xae6d21d2,"zpp_nape.util.ZNPList_ZPP_AABBNode.front","zpp_nape/util/Lists.hx",10562,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10564_back,"zpp_nape.util.ZNPList_ZPP_AABBNode","back",0xf97ee91e,"zpp_nape.util.ZNPList_ZPP_AABBNode.back","zpp_nape/util/Lists.hx",10564,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10573_iterator_at,"zpp_nape.util.ZNPList_ZPP_AABBNode","iterator_at",0x4a0e57cd,"zpp_nape.util.ZNPList_ZPP_AABBNode.iterator_at","zpp_nape/util/Lists.hx",10573,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_c0865e459074c14c_10586_at,"zpp_nape.util.ZNPList_ZPP_AABBNode","at",0x7879e82a,"zpp_nape.util.ZNPList_ZPP_AABBNode.at","zpp_nape/util/Lists.hx",10586,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_AABBNode_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10183_new)
            	HX_STACK_THIS(this)
HXLINE(10193)		this->length = (int)0;
HXLINE(10192)		this->pushmod = false;
HXLINE(10191)		this->modified = false;
HXLINE(10184)		this->head = null();
            	}

Dynamic ZNPList_ZPP_AABBNode_obj::__CreateEmpty() { return new ZNPList_ZPP_AABBNode_obj; }

void *ZNPList_ZPP_AABBNode_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_AABBNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_AABBNode_obj > _hx_result = new ZNPList_ZPP_AABBNode_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_AABBNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x687e2b1b;
}

 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10189_begin)
            	HX_STACK_THIS(this)
HXLINE(10189)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,begin,return )

void ZNPList_ZPP_AABBNode_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_AABBNode i){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10196_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(10197)		this->head = i;
HXLINE(10198)		this->modified = true;
HXLINE(10199)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,setbegin,(void))

 ::zpp_nape::space::ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::add( ::zpp_nape::space::ZPP_AABBNode o){
            	HX_GC_STACKFRAME(&_hx_pos_c0865e459074c14c_10202_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(10202)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXDLIN(10202)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(10202)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10202)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10202)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret->next;
HXDLIN(10202)			ret->next = null();
            		}
HXDLIN(10202)		ret->elt = o;
HXDLIN(10202)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,temp) = ret;
HXDLIN(10202)		temp->next = this->head;
HXDLIN(10202)		this->head = temp;
HXDLIN(10202)		this->modified = true;
HXDLIN(10202)		this->length++;
HXDLIN(10202)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,add,return )

 ::zpp_nape::space::ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::inlined_add( ::zpp_nape::space::ZPP_AABBNode o){
            	HX_GC_STACKFRAME(&_hx_pos_c0865e459074c14c_10206_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(10216)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXLINE(10218)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(10219)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10225)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXLINE(10226)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret->next;
HXLINE(10227)			ret->next = null();
            		}
HXLINE(10234)		ret->elt = o;
HXLINE(10215)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,temp) = ret;
HXLINE(10237)		temp->next = this->head;
HXLINE(10238)		this->head = temp;
HXLINE(10239)		this->modified = true;
HXLINE(10240)		this->length++;
HXLINE(10241)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,inlined_add,return )

void ZNPList_ZPP_AABBNode_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_AABBNode x){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10252_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(10253)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cx_ite) = x->head;
HXLINE(10254)		while(hx::IsNotNull( cx_ite )){
HXLINE(10256)			this->add(cx_ite->elt);
HXLINE(10257)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_AABBNode cur, ::zpp_nape::space::ZPP_AABBNode o){
            	HX_GC_STACKFRAME(&_hx_pos_c0865e459074c14c_10262_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(10262)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXDLIN(10262)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(10262)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10262)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10262)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret->next;
HXDLIN(10262)			ret->next = null();
            		}
HXDLIN(10262)		ret->elt = o;
HXDLIN(10262)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,temp) = ret;
HXDLIN(10262)		if (hx::IsNull( cur )) {
HXLINE(10262)			temp->next = this->head;
HXDLIN(10262)			this->head = temp;
            		}
            		else {
HXLINE(10262)			temp->next = cur->next;
HXDLIN(10262)			cur->next = temp;
            		}
HXDLIN(10262)		this->pushmod = (this->modified = true);
HXDLIN(10262)		this->length++;
HXDLIN(10262)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_AABBNode_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_AABBNode cur, ::zpp_nape::space::ZPP_AABBNode o){
            	HX_GC_STACKFRAME(&_hx_pos_c0865e459074c14c_10266_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(10276)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXLINE(10278)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )) {
HXLINE(10279)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(10285)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXLINE(10286)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret->next;
HXLINE(10287)			ret->next = null();
            		}
HXLINE(10294)		ret->elt = o;
HXLINE(10275)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,temp) = ret;
HXLINE(10297)		if (hx::IsNull( cur )) {
HXLINE(10298)			temp->next = this->head;
HXLINE(10299)			this->head = temp;
            		}
            		else {
HXLINE(10302)			temp->next = cur->next;
HXLINE(10303)			cur->next = temp;
            		}
HXLINE(10305)		this->pushmod = (this->modified = true);
HXLINE(10306)		this->length++;
HXLINE(10307)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_AABBNode_obj,inlined_insert,return )

void ZNPList_ZPP_AABBNode_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10310_pop)
            	HX_STACK_THIS(this)
HXLINE(10310)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret) = this->head;
HXDLIN(10310)		this->head = ret->next;
HXDLIN(10310)		{
HXLINE(10310)			ret->elt = null();
HXDLIN(10310)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10310)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret;
            		}
HXDLIN(10310)		if (hx::IsNull( this->head )) {
HXLINE(10310)			this->pushmod = true;
            		}
HXDLIN(10310)		this->modified = true;
HXDLIN(10310)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,pop,(void))

void ZNPList_ZPP_AABBNode_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10314_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(10323)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret) = this->head;
HXLINE(10324)		this->head = ret->next;
HXLINE(10326)		{
HXLINE(10336)			ret->elt = null();
HXLINE(10337)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXLINE(10338)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret;
            		}
HXLINE(10343)		if (hx::IsNull( this->head )) {
HXLINE(10343)			this->pushmod = true;
            		}
HXLINE(10344)		this->modified = true;
HXLINE(10345)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,inlined_pop,(void))

 ::zpp_nape::space::ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10348_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(10348)		HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,ret) = this->head->elt;
HXDLIN(10348)		this->pop();
HXDLIN(10348)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,pop_unsafe,return )

 ::zpp_nape::space::ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10352_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(10361)		HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,ret) = this->head->elt;
HXLINE(10362)		this->pop();
HXLINE(10363)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_AABBNode_obj::remove( ::zpp_nape::space::ZPP_AABBNode obj){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10374_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10374)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,pre) = null();
HXDLIN(10374)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cur) = this->head;
HXDLIN(10374)		while(hx::IsNotNull( cur )){
HXLINE(10374)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10374)				{
HXLINE(10374)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,old);
HXDLIN(10374)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXDLIN(10374)					if (hx::IsNull( pre )) {
HXLINE(10374)						old = this->head;
HXDLIN(10374)						ret = old->next;
HXDLIN(10374)						this->head = ret;
HXDLIN(10374)						if (hx::IsNull( this->head )) {
HXLINE(10374)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(10374)						old = pre->next;
HXDLIN(10374)						ret = old->next;
HXDLIN(10374)						pre->next = ret;
HXDLIN(10374)						if (hx::IsNull( ret )) {
HXLINE(10374)							this->pushmod = true;
            						}
            					}
HXDLIN(10374)					{
HXLINE(10374)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,o) = old;
HXDLIN(10374)						o->elt = null();
HXDLIN(10374)						o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10374)						::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = o;
            					}
HXDLIN(10374)					this->modified = true;
HXDLIN(10374)					this->length--;
HXDLIN(10374)					this->pushmod = true;
            				}
HXDLIN(10374)				goto _hx_goto_13;
            			}
HXDLIN(10374)			pre = cur;
HXDLIN(10374)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,remove,(void))

bool ZNPList_ZPP_AABBNode_obj::try_remove( ::zpp_nape::space::ZPP_AABBNode obj){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10376_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10385)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,pre) = null();
HXLINE(10386)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cur) = this->head;
HXLINE(10387)		HX_VARI( bool,ret) = false;
HXLINE(10388)		while(hx::IsNotNull( cur )){
HXLINE(10389)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10390)				this->erase(pre);
HXLINE(10391)				ret = true;
HXLINE(10392)				goto _hx_goto_15;
            			}
HXLINE(10394)			pre = cur;
HXLINE(10395)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(10397)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,try_remove,return )

void ZNPList_ZPP_AABBNode_obj::inlined_remove( ::zpp_nape::space::ZPP_AABBNode obj){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10410_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10410)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,pre) = null();
HXDLIN(10410)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cur) = this->head;
HXDLIN(10410)		while(hx::IsNotNull( cur )){
HXLINE(10410)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10410)				{
HXLINE(10410)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,old);
HXDLIN(10410)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXDLIN(10410)					if (hx::IsNull( pre )) {
HXLINE(10410)						old = this->head;
HXDLIN(10410)						ret = old->next;
HXDLIN(10410)						this->head = ret;
HXDLIN(10410)						if (hx::IsNull( this->head )) {
HXLINE(10410)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(10410)						old = pre->next;
HXDLIN(10410)						ret = old->next;
HXDLIN(10410)						pre->next = ret;
HXDLIN(10410)						if (hx::IsNull( ret )) {
HXLINE(10410)							this->pushmod = true;
            						}
            					}
HXDLIN(10410)					{
HXLINE(10410)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,o) = old;
HXDLIN(10410)						o->elt = null();
HXDLIN(10410)						o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10410)						::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = o;
            					}
HXDLIN(10410)					this->modified = true;
HXDLIN(10410)					this->length--;
HXDLIN(10410)					this->pushmod = true;
            				}
HXDLIN(10410)				goto _hx_goto_17;
            			}
HXDLIN(10410)			pre = cur;
HXDLIN(10410)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,inlined_remove,(void))

bool ZNPList_ZPP_AABBNode_obj::inlined_try_remove( ::zpp_nape::space::ZPP_AABBNode obj){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10414_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10423)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,pre) = null();
HXLINE(10424)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cur) = this->head;
HXLINE(10425)		HX_VARI( bool,ret) = false;
HXLINE(10426)		while(hx::IsNotNull( cur )){
HXLINE(10427)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(10428)				{
HXLINE(10428)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,old);
HXDLIN(10428)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret1,"ret");
HXDLIN(10428)					if (hx::IsNull( pre )) {
HXLINE(10428)						old = this->head;
HXDLIN(10428)						ret1 = old->next;
HXDLIN(10428)						this->head = ret1;
HXDLIN(10428)						if (hx::IsNull( this->head )) {
HXLINE(10428)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(10428)						old = pre->next;
HXDLIN(10428)						ret1 = old->next;
HXDLIN(10428)						pre->next = ret1;
HXDLIN(10428)						if (hx::IsNull( ret1 )) {
HXLINE(10428)							this->pushmod = true;
            						}
            					}
HXDLIN(10428)					{
HXLINE(10428)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,o) = old;
HXDLIN(10428)						o->elt = null();
HXDLIN(10428)						o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10428)						::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = o;
            					}
HXDLIN(10428)					this->modified = true;
HXDLIN(10428)					this->length--;
HXDLIN(10428)					this->pushmod = true;
            				}
HXLINE(10429)				ret = true;
HXLINE(10430)				goto _hx_goto_19;
            			}
HXLINE(10432)			pre = cur;
HXLINE(10433)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(10435)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_AABBNode pre){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10438_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(10438)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,old);
HXDLIN(10438)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXDLIN(10438)		if (hx::IsNull( pre )) {
HXLINE(10438)			old = this->head;
HXDLIN(10438)			ret = old->next;
HXDLIN(10438)			this->head = ret;
HXDLIN(10438)			if (hx::IsNull( this->head )) {
HXLINE(10438)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(10438)			old = pre->next;
HXDLIN(10438)			ret = old->next;
HXDLIN(10438)			pre->next = ret;
HXDLIN(10438)			if (hx::IsNull( ret )) {
HXLINE(10438)				this->pushmod = true;
            			}
            		}
HXDLIN(10438)		{
HXLINE(10438)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,o) = old;
HXDLIN(10438)			o->elt = null();
HXDLIN(10438)			o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10438)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = o;
            		}
HXDLIN(10438)		this->modified = true;
HXDLIN(10438)		this->length--;
HXDLIN(10438)		this->pushmod = true;
HXDLIN(10438)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_AABBNode pre){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10442_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(10451)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,old);
HXLINE(10452)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret);
HXLINE(10453)		if (hx::IsNull( pre )) {
HXLINE(10454)			old = this->head;
HXLINE(10455)			ret = old->next;
HXLINE(10456)			this->head = ret;
HXLINE(10457)			if (hx::IsNull( this->head )) {
HXLINE(10457)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(10460)			old = pre->next;
HXLINE(10461)			ret = old->next;
HXLINE(10462)			pre->next = ret;
HXLINE(10463)			if (hx::IsNull( ret )) {
HXLINE(10463)				this->pushmod = true;
            			}
            		}
HXLINE(10466)		{
HXLINE(10467)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,o) = old;
HXLINE(10476)			o->elt = null();
HXLINE(10477)			o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXLINE(10478)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = o;
            		}
HXLINE(10483)		this->modified = true;
HXLINE(10484)		this->length--;
HXLINE(10485)		this->pushmod = true;
HXLINE(10486)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_AABBNode pre,int n){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10488_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(10489)		while(true){
HXLINE(10489)			bool _hx_tmp;
HXDLIN(10489)			n = (n - (int)1);
HXDLIN(10489)			if (((n + (int)1) > (int)0)) {
HXLINE(10489)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(10489)				_hx_tmp = false;
            			}
HXDLIN(10489)			if (!(_hx_tmp)) {
HXLINE(10489)				goto _hx_goto_23;
            			}
HXDLIN(10489)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(10490)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_AABBNode_obj,splice,return )

void ZNPList_ZPP_AABBNode_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10493_clear)
            	HX_STACK_THIS(this)
HXLINE(10493)		while(hx::IsNotNull( this->head )){
HXLINE(10493)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret) = this->head;
HXDLIN(10493)			this->head = ret->next;
HXDLIN(10493)			{
HXLINE(10493)				ret->elt = null();
HXDLIN(10493)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10493)				::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret;
            			}
HXDLIN(10493)			if (hx::IsNull( this->head )) {
HXLINE(10493)				this->pushmod = true;
            			}
HXDLIN(10493)			this->modified = true;
HXDLIN(10493)			this->length--;
            		}
HXDLIN(10493)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,clear,(void))

void ZNPList_ZPP_AABBNode_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10498_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(10499)		while(hx::IsNotNull( this->head )){
HXLINE(10499)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret) = this->head;
HXDLIN(10499)			this->head = ret->next;
HXDLIN(10499)			{
HXLINE(10499)				ret->elt = null();
HXDLIN(10499)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool;
HXDLIN(10499)				::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = ret;
            			}
HXDLIN(10499)			if (hx::IsNull( this->head )) {
HXLINE(10499)				this->pushmod = true;
            			}
HXDLIN(10499)			this->modified = true;
HXDLIN(10499)			this->length--;
            		}
HXLINE(10500)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,inlined_clear,(void))

void ZNPList_ZPP_AABBNode_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10503_reverse)
            	HX_STACK_THIS(this)
HXLINE(10504)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cur) = this->head;
HXLINE(10505)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,pre) = null();
HXLINE(10506)		while(hx::IsNotNull( cur )){
HXLINE(10507)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,nx) = cur->next;
HXLINE(10508)			cur->next = pre;
HXLINE(10509)			this->head = cur;
HXLINE(10510)			pre = cur;
HXLINE(10511)			cur = nx;
            		}
HXLINE(10513)		this->modified = true;
HXLINE(10514)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,reverse,(void))

bool ZNPList_ZPP_AABBNode_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10519_empty)
            	HX_STACK_THIS(this)
HXLINE(10519)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,empty,return )

int ZNPList_ZPP_AABBNode_obj::size(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10524_size)
            	HX_STACK_THIS(this)
HXLINE(10524)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,size,return )

bool ZNPList_ZPP_AABBNode_obj::has( ::zpp_nape::space::ZPP_AABBNode obj){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10527_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10527)		HX_VAR( bool,ret);
HXDLIN(10527)		{
HXLINE(10527)			ret = false;
HXDLIN(10527)			{
HXLINE(10527)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cx_ite) = this->head;
HXDLIN(10527)				while(hx::IsNotNull( cx_ite )){
HXLINE(10527)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(10527)						ret = true;
HXDLIN(10527)						goto _hx_goto_33;
            					}
HXDLIN(10527)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(10527)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,has,return )

bool ZNPList_ZPP_AABBNode_obj::inlined_has( ::zpp_nape::space::ZPP_AABBNode obj){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10531_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(10540)		HX_VAR( bool,ret);
HXLINE(10541)		{
HXLINE(10542)			ret = false;
HXLINE(10543)			{
HXLINE(10544)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cx_ite) = this->head;
HXLINE(10545)				while(hx::IsNotNull( cx_ite )){
HXLINE(10548)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(10549)						ret = true;
HXLINE(10550)						goto _hx_goto_35;
            					}
HXLINE(10553)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(10557)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,inlined_has,return )

 ::zpp_nape::space::ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::front(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10562_front)
            	HX_STACK_THIS(this)
HXLINE(10562)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,front,return )

 ::zpp_nape::space::ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::back(){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10564_back)
            	HX_STACK_THIS(this)
HXLINE(10565)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret) = this->head;
HXLINE(10566)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,cur) = ret;
HXLINE(10567)		while(hx::IsNotNull( cur )){
HXLINE(10568)			ret = cur;
HXLINE(10569)			cur = cur->next;
            		}
HXLINE(10571)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBNode_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10573_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(10582)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,ret) = this->head;
HXLINE(10583)		while(true){
HXLINE(10583)			bool _hx_tmp;
HXDLIN(10583)			ind = (ind - (int)1);
HXDLIN(10583)			if (((ind + (int)1) > (int)0)) {
HXLINE(10583)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(10583)				_hx_tmp = false;
            			}
HXDLIN(10583)			if (!(_hx_tmp)) {
HXLINE(10583)				goto _hx_goto_40;
            			}
HXDLIN(10583)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(10584)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,iterator_at,return )

 ::zpp_nape::space::ZPP_AABBNode ZNPList_ZPP_AABBNode_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_c0865e459074c14c_10586_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(10595)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,it) = this->iterator_at(ind);
HXLINE(10596)		if (hx::IsNotNull( it )) {
HXLINE(10596)			return it->elt;
            		}
            		else {
HXLINE(10596)			return null();
            		}
HXDLIN(10596)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBNode_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_AABBNode_obj > ZNPList_ZPP_AABBNode_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_AABBNode_obj > __this = new ZNPList_ZPP_AABBNode_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_AABBNode_obj > ZNPList_ZPP_AABBNode_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_AABBNode_obj *__this = (ZNPList_ZPP_AABBNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_AABBNode_obj), true, "zpp_nape.util.ZNPList_ZPP_AABBNode"));
	*(void **)__this = ZNPList_ZPP_AABBNode_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_AABBNode_obj::ZNPList_ZPP_AABBNode_obj()
{
}

void ZNPList_ZPP_AABBNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_AABBNode);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_AABBNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_AABBNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_AABBNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_AABBNode >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_AABBNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_AABBNode_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_AABBNode*/ ,(int)offsetof(ZNPList_ZPP_AABBNode_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_AABBNode_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_AABBNode_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_AABBNode_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_AABBNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_AABBNode_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_AABBNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_AABBNode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_AABBNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_AABBNode_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_AABBNode_obj::__mClass;

void ZNPList_ZPP_AABBNode_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_AABBNode_obj;
	ZNPList_ZPP_AABBNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_AABBNode","\xd7","\xb4","\xee","\xd8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_AABBNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_AABBNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_AABBNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_AABBNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_AABBNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_AABBNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
