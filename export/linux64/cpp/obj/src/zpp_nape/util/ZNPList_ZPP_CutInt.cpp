// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_CutInt
#include <zpp_nape/geom/ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CutInt
#include <zpp_nape/util/ZNPList_ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CutInt
#include <zpp_nape/util/ZNPNode_ZPP_CutInt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5596_new,"zpp_nape.util.ZNPList_ZPP_CutInt","new",0x2af7bf74,"zpp_nape.util.ZNPList_ZPP_CutInt.new","zpp_nape/util/Lists.hx",5596,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5602_begin,"zpp_nape.util.ZNPList_ZPP_CutInt","begin",0xbf22c63d,"zpp_nape.util.ZNPList_ZPP_CutInt.begin","zpp_nape/util/Lists.hx",5602,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5609_setbegin,"zpp_nape.util.ZNPList_ZPP_CutInt","setbegin",0xdc39cbb3,"zpp_nape.util.ZNPList_ZPP_CutInt.setbegin","zpp_nape/util/Lists.hx",5609,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5615_add,"zpp_nape.util.ZNPList_ZPP_CutInt","add",0x2aede135,"zpp_nape.util.ZNPList_ZPP_CutInt.add","zpp_nape/util/Lists.hx",5615,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5619_inlined_add,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_add",0xe3b56fa1,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_add","zpp_nape/util/Lists.hx",5619,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5665_addAll,"zpp_nape.util.ZNPList_ZPP_CutInt","addAll",0x836ebeec,"zpp_nape.util.ZNPList_ZPP_CutInt.addAll","zpp_nape/util/Lists.hx",5665,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5675_insert,"zpp_nape.util.ZNPList_ZPP_CutInt","insert",0x8250f8a5,"zpp_nape.util.ZNPList_ZPP_CutInt.insert","zpp_nape/util/Lists.hx",5675,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5679_inlined_insert,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_insert",0x639935b9,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_insert","zpp_nape/util/Lists.hx",5679,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5723_pop,"zpp_nape.util.ZNPList_ZPP_CutInt","pop",0x2af94ca5,"zpp_nape.util.ZNPList_ZPP_CutInt.pop","zpp_nape/util/Lists.hx",5723,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5727_inlined_pop,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_pop",0xe3c0db11,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_pop","zpp_nape/util/Lists.hx",5727,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5761_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CutInt","pop_unsafe",0xc62557c0,"zpp_nape.util.ZNPList_ZPP_CutInt.pop_unsafe","zpp_nape/util/Lists.hx",5761,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5765_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_pop_unsafe",0xe0d3aed4,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_pop_unsafe","zpp_nape/util/Lists.hx",5765,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5787_remove,"zpp_nape.util.ZNPList_ZPP_CutInt","remove",0xe8fc51b0,"zpp_nape.util.ZNPList_ZPP_CutInt.remove","zpp_nape/util/Lists.hx",5787,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5789_try_remove,"zpp_nape.util.ZNPList_ZPP_CutInt","try_remove",0xdd4f8d74,"zpp_nape.util.ZNPList_ZPP_CutInt.try_remove","zpp_nape/util/Lists.hx",5789,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5823_inlined_remove,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_remove",0xca448ec4,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_remove","zpp_nape/util/Lists.hx",5823,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5827_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_try_remove",0xf7fde488,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_try_remove","zpp_nape/util/Lists.hx",5827,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5851_erase,"zpp_nape.util.ZNPList_ZPP_CutInt","erase",0x81e9c4fa,"zpp_nape.util.ZNPList_ZPP_CutInt.erase","zpp_nape/util/Lists.hx",5851,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5855_inlined_erase,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_erase",0xa682c666,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_erase","zpp_nape/util/Lists.hx",5855,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5901_splice,"zpp_nape.util.ZNPList_ZPP_CutInt","splice",0xa4123ae8,"zpp_nape.util.ZNPList_ZPP_CutInt.splice","zpp_nape/util/Lists.hx",5901,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5906_clear,"zpp_nape.util.ZNPList_ZPP_CutInt","clear",0x57284da1,"zpp_nape.util.ZNPList_ZPP_CutInt.clear","zpp_nape/util/Lists.hx",5906,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5911_inlined_clear,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_clear",0x7bc14f0d,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_clear","zpp_nape/util/Lists.hx",5911,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5916_reverse,"zpp_nape.util.ZNPList_ZPP_CutInt","reverse",0x1bc74236,"zpp_nape.util.ZNPList_ZPP_CutInt.reverse","zpp_nape/util/Lists.hx",5916,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5932_empty,"zpp_nape.util.ZNPList_ZPP_CutInt","empty",0x7ea716a1,"zpp_nape.util.ZNPList_ZPP_CutInt.empty","zpp_nape/util/Lists.hx",5932,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5937_size,"zpp_nape.util.ZNPList_ZPP_CutInt","size",0x7120e32d,"zpp_nape.util.ZNPList_ZPP_CutInt.size","zpp_nape/util/Lists.hx",5937,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5940_has,"zpp_nape.util.ZNPList_ZPP_CutInt","has",0x2af32e6e,"zpp_nape.util.ZNPList_ZPP_CutInt.has","zpp_nape/util/Lists.hx",5940,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5944_inlined_has,"zpp_nape.util.ZNPList_ZPP_CutInt","inlined_has",0xe3babcda,"zpp_nape.util.ZNPList_ZPP_CutInt.inlined_has","zpp_nape/util/Lists.hx",5944,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5975_front,"zpp_nape.util.ZNPList_ZPP_CutInt","front",0x155af4bd,"zpp_nape.util.ZNPList_ZPP_CutInt.front","zpp_nape/util/Lists.hx",5975,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5977_back,"zpp_nape.util.ZNPList_ZPP_CutInt","back",0x65de1c93,"zpp_nape.util.ZNPList_ZPP_CutInt.back","zpp_nape/util/Lists.hx",5977,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5986_iterator_at,"zpp_nape.util.ZNPList_ZPP_CutInt","iterator_at",0xe859acf8,"zpp_nape.util.ZNPList_ZPP_CutInt.iterator_at","zpp_nape/util/Lists.hx",5986,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_99dae0fcad7697b9_5999_at,"zpp_nape.util.ZNPList_ZPP_CutInt","at",0x97b9e45f,"zpp_nape.util.ZNPList_ZPP_CutInt.at","zpp_nape/util/Lists.hx",5999,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_CutInt_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5596_new)
            	HX_STACK_THIS(this)
HXLINE(5606)		this->length = (int)0;
HXLINE(5605)		this->pushmod = false;
HXLINE(5604)		this->modified = false;
HXLINE(5597)		this->head = null();
            	}

Dynamic ZNPList_ZPP_CutInt_obj::__CreateEmpty() { return new ZNPList_ZPP_CutInt_obj; }

void *ZNPList_ZPP_CutInt_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_CutInt_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_CutInt_obj > _hx_result = new ZNPList_ZPP_CutInt_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_CutInt_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1194a6f2;
}

 ::zpp_nape::util::ZNPNode_ZPP_CutInt ZNPList_ZPP_CutInt_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5602_begin)
            	HX_STACK_THIS(this)
HXLINE(5602)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,begin,return )

void ZNPList_ZPP_CutInt_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_CutInt i){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5609_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(5610)		this->head = i;
HXLINE(5611)		this->modified = true;
HXLINE(5612)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_CutInt ZNPList_ZPP_CutInt_obj::add( ::zpp_nape::geom::ZPP_CutInt o){
            	HX_GC_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5615_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(5615)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXDLIN(5615)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool )) {
HXLINE(5615)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(5615)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5615)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret->next;
HXDLIN(5615)			ret->next = null();
            		}
HXDLIN(5615)		ret->elt = o;
HXDLIN(5615)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,temp) = ret;
HXDLIN(5615)		temp->next = this->head;
HXDLIN(5615)		this->head = temp;
HXDLIN(5615)		this->modified = true;
HXDLIN(5615)		this->length++;
HXDLIN(5615)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,add,return )

 ::zpp_nape::geom::ZPP_CutInt ZNPList_ZPP_CutInt_obj::inlined_add( ::zpp_nape::geom::ZPP_CutInt o){
            	HX_GC_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5619_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(5629)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXLINE(5631)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool )) {
HXLINE(5632)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(5638)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXLINE(5639)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret->next;
HXLINE(5640)			ret->next = null();
            		}
HXLINE(5647)		ret->elt = o;
HXLINE(5628)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,temp) = ret;
HXLINE(5650)		temp->next = this->head;
HXLINE(5651)		this->head = temp;
HXLINE(5652)		this->modified = true;
HXLINE(5653)		this->length++;
HXLINE(5654)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,inlined_add,return )

void ZNPList_ZPP_CutInt_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_CutInt x){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5665_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(5666)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cx_ite) = x->head;
HXLINE(5667)		while(hx::IsNotNull( cx_ite )){
HXLINE(5669)			this->add(cx_ite->elt);
HXLINE(5670)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_CutInt ZNPList_ZPP_CutInt_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_CutInt cur, ::zpp_nape::geom::ZPP_CutInt o){
            	HX_GC_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5675_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(5675)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXDLIN(5675)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool )) {
HXLINE(5675)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(5675)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5675)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret->next;
HXDLIN(5675)			ret->next = null();
            		}
HXDLIN(5675)		ret->elt = o;
HXDLIN(5675)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,temp) = ret;
HXDLIN(5675)		if (hx::IsNull( cur )) {
HXLINE(5675)			temp->next = this->head;
HXDLIN(5675)			this->head = temp;
            		}
            		else {
HXLINE(5675)			temp->next = cur->next;
HXDLIN(5675)			cur->next = temp;
            		}
HXDLIN(5675)		this->pushmod = (this->modified = true);
HXDLIN(5675)		this->length++;
HXDLIN(5675)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CutInt_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutInt ZNPList_ZPP_CutInt_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_CutInt cur, ::zpp_nape::geom::ZPP_CutInt o){
            	HX_GC_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5679_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(5689)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXLINE(5691)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool )) {
HXLINE(5692)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(5698)			ret = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXLINE(5699)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret->next;
HXLINE(5700)			ret->next = null();
            		}
HXLINE(5707)		ret->elt = o;
HXLINE(5688)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,temp) = ret;
HXLINE(5710)		if (hx::IsNull( cur )) {
HXLINE(5711)			temp->next = this->head;
HXLINE(5712)			this->head = temp;
            		}
            		else {
HXLINE(5715)			temp->next = cur->next;
HXLINE(5716)			cur->next = temp;
            		}
HXLINE(5718)		this->pushmod = (this->modified = true);
HXLINE(5719)		this->length++;
HXLINE(5720)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CutInt_obj,inlined_insert,return )

void ZNPList_ZPP_CutInt_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5723_pop)
            	HX_STACK_THIS(this)
HXLINE(5723)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret) = this->head;
HXDLIN(5723)		this->head = ret->next;
HXDLIN(5723)		{
HXLINE(5723)			ret->elt = null();
HXDLIN(5723)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5723)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret;
            		}
HXDLIN(5723)		if (hx::IsNull( this->head )) {
HXLINE(5723)			this->pushmod = true;
            		}
HXDLIN(5723)		this->modified = true;
HXDLIN(5723)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,pop,(void))

void ZNPList_ZPP_CutInt_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5727_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(5736)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret) = this->head;
HXLINE(5737)		this->head = ret->next;
HXLINE(5739)		{
HXLINE(5749)			ret->elt = null();
HXLINE(5750)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXLINE(5751)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret;
            		}
HXLINE(5756)		if (hx::IsNull( this->head )) {
HXLINE(5756)			this->pushmod = true;
            		}
HXLINE(5757)		this->modified = true;
HXLINE(5758)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_CutInt ZNPList_ZPP_CutInt_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5761_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(5761)		HX_VARI(  ::zpp_nape::geom::ZPP_CutInt,ret) = this->head->elt;
HXDLIN(5761)		this->pop();
HXDLIN(5761)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_CutInt ZNPList_ZPP_CutInt_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5765_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(5774)		HX_VARI(  ::zpp_nape::geom::ZPP_CutInt,ret) = this->head->elt;
HXLINE(5775)		this->pop();
HXLINE(5776)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_CutInt_obj::remove( ::zpp_nape::geom::ZPP_CutInt obj){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5787_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5787)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,pre) = null();
HXDLIN(5787)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cur) = this->head;
HXDLIN(5787)		while(hx::IsNotNull( cur )){
HXLINE(5787)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(5787)				{
HXLINE(5787)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,old);
HXDLIN(5787)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXDLIN(5787)					if (hx::IsNull( pre )) {
HXLINE(5787)						old = this->head;
HXDLIN(5787)						ret = old->next;
HXDLIN(5787)						this->head = ret;
HXDLIN(5787)						if (hx::IsNull( this->head )) {
HXLINE(5787)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(5787)						old = pre->next;
HXDLIN(5787)						ret = old->next;
HXDLIN(5787)						pre->next = ret;
HXDLIN(5787)						if (hx::IsNull( ret )) {
HXLINE(5787)							this->pushmod = true;
            						}
            					}
HXDLIN(5787)					{
HXLINE(5787)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,o) = old;
HXDLIN(5787)						o->elt = null();
HXDLIN(5787)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5787)						::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = o;
            					}
HXDLIN(5787)					this->modified = true;
HXDLIN(5787)					this->length--;
HXDLIN(5787)					this->pushmod = true;
            				}
HXDLIN(5787)				goto _hx_goto_13;
            			}
HXDLIN(5787)			pre = cur;
HXDLIN(5787)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,remove,(void))

bool ZNPList_ZPP_CutInt_obj::try_remove( ::zpp_nape::geom::ZPP_CutInt obj){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5789_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5798)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,pre) = null();
HXLINE(5799)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cur) = this->head;
HXLINE(5800)		HX_VARI( bool,ret) = false;
HXLINE(5801)		while(hx::IsNotNull( cur )){
HXLINE(5802)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(5803)				this->erase(pre);
HXLINE(5804)				ret = true;
HXLINE(5805)				goto _hx_goto_15;
            			}
HXLINE(5807)			pre = cur;
HXLINE(5808)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(5810)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,try_remove,return )

void ZNPList_ZPP_CutInt_obj::inlined_remove( ::zpp_nape::geom::ZPP_CutInt obj){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5823_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5823)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,pre) = null();
HXDLIN(5823)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cur) = this->head;
HXDLIN(5823)		while(hx::IsNotNull( cur )){
HXLINE(5823)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(5823)				{
HXLINE(5823)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,old);
HXDLIN(5823)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXDLIN(5823)					if (hx::IsNull( pre )) {
HXLINE(5823)						old = this->head;
HXDLIN(5823)						ret = old->next;
HXDLIN(5823)						this->head = ret;
HXDLIN(5823)						if (hx::IsNull( this->head )) {
HXLINE(5823)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(5823)						old = pre->next;
HXDLIN(5823)						ret = old->next;
HXDLIN(5823)						pre->next = ret;
HXDLIN(5823)						if (hx::IsNull( ret )) {
HXLINE(5823)							this->pushmod = true;
            						}
            					}
HXDLIN(5823)					{
HXLINE(5823)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,o) = old;
HXDLIN(5823)						o->elt = null();
HXDLIN(5823)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5823)						::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = o;
            					}
HXDLIN(5823)					this->modified = true;
HXDLIN(5823)					this->length--;
HXDLIN(5823)					this->pushmod = true;
            				}
HXDLIN(5823)				goto _hx_goto_17;
            			}
HXDLIN(5823)			pre = cur;
HXDLIN(5823)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,inlined_remove,(void))

bool ZNPList_ZPP_CutInt_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_CutInt obj){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5827_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5836)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,pre) = null();
HXLINE(5837)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cur) = this->head;
HXLINE(5838)		HX_VARI( bool,ret) = false;
HXLINE(5839)		while(hx::IsNotNull( cur )){
HXLINE(5840)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(5841)				{
HXLINE(5841)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,old);
HXDLIN(5841)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret1,"ret");
HXDLIN(5841)					if (hx::IsNull( pre )) {
HXLINE(5841)						old = this->head;
HXDLIN(5841)						ret1 = old->next;
HXDLIN(5841)						this->head = ret1;
HXDLIN(5841)						if (hx::IsNull( this->head )) {
HXLINE(5841)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(5841)						old = pre->next;
HXDLIN(5841)						ret1 = old->next;
HXDLIN(5841)						pre->next = ret1;
HXDLIN(5841)						if (hx::IsNull( ret1 )) {
HXLINE(5841)							this->pushmod = true;
            						}
            					}
HXDLIN(5841)					{
HXLINE(5841)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,o) = old;
HXDLIN(5841)						o->elt = null();
HXDLIN(5841)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5841)						::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = o;
            					}
HXDLIN(5841)					this->modified = true;
HXDLIN(5841)					this->length--;
HXDLIN(5841)					this->pushmod = true;
            				}
HXLINE(5842)				ret = true;
HXLINE(5843)				goto _hx_goto_19;
            			}
HXLINE(5845)			pre = cur;
HXLINE(5846)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(5848)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutInt ZNPList_ZPP_CutInt_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_CutInt pre){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5851_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(5851)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,old);
HXDLIN(5851)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXDLIN(5851)		if (hx::IsNull( pre )) {
HXLINE(5851)			old = this->head;
HXDLIN(5851)			ret = old->next;
HXDLIN(5851)			this->head = ret;
HXDLIN(5851)			if (hx::IsNull( this->head )) {
HXLINE(5851)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(5851)			old = pre->next;
HXDLIN(5851)			ret = old->next;
HXDLIN(5851)			pre->next = ret;
HXDLIN(5851)			if (hx::IsNull( ret )) {
HXLINE(5851)				this->pushmod = true;
            			}
            		}
HXDLIN(5851)		{
HXLINE(5851)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,o) = old;
HXDLIN(5851)			o->elt = null();
HXDLIN(5851)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5851)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = o;
            		}
HXDLIN(5851)		this->modified = true;
HXDLIN(5851)		this->length--;
HXDLIN(5851)		this->pushmod = true;
HXDLIN(5851)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutInt ZNPList_ZPP_CutInt_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_CutInt pre){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5855_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(5864)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,old);
HXLINE(5865)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret);
HXLINE(5866)		if (hx::IsNull( pre )) {
HXLINE(5867)			old = this->head;
HXLINE(5868)			ret = old->next;
HXLINE(5869)			this->head = ret;
HXLINE(5870)			if (hx::IsNull( this->head )) {
HXLINE(5870)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(5873)			old = pre->next;
HXLINE(5874)			ret = old->next;
HXLINE(5875)			pre->next = ret;
HXLINE(5876)			if (hx::IsNull( ret )) {
HXLINE(5876)				this->pushmod = true;
            			}
            		}
HXLINE(5879)		{
HXLINE(5880)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,o) = old;
HXLINE(5889)			o->elt = null();
HXLINE(5890)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXLINE(5891)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = o;
            		}
HXLINE(5896)		this->modified = true;
HXLINE(5897)		this->length--;
HXLINE(5898)		this->pushmod = true;
HXLINE(5899)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutInt ZNPList_ZPP_CutInt_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_CutInt pre,int n){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5901_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(5902)		while(true){
HXLINE(5902)			bool _hx_tmp;
HXDLIN(5902)			n = (n - (int)1);
HXDLIN(5902)			if (((n + (int)1) > (int)0)) {
HXLINE(5902)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(5902)				_hx_tmp = false;
            			}
HXDLIN(5902)			if (!(_hx_tmp)) {
HXLINE(5902)				goto _hx_goto_23;
            			}
HXDLIN(5902)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(5903)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CutInt_obj,splice,return )

void ZNPList_ZPP_CutInt_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5906_clear)
            	HX_STACK_THIS(this)
HXLINE(5906)		while(hx::IsNotNull( this->head )){
HXLINE(5906)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret) = this->head;
HXDLIN(5906)			this->head = ret->next;
HXDLIN(5906)			{
HXLINE(5906)				ret->elt = null();
HXDLIN(5906)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5906)				::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret;
            			}
HXDLIN(5906)			if (hx::IsNull( this->head )) {
HXLINE(5906)				this->pushmod = true;
            			}
HXDLIN(5906)			this->modified = true;
HXDLIN(5906)			this->length--;
            		}
HXDLIN(5906)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,clear,(void))

void ZNPList_ZPP_CutInt_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5911_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(5912)		while(hx::IsNotNull( this->head )){
HXLINE(5912)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret) = this->head;
HXDLIN(5912)			this->head = ret->next;
HXDLIN(5912)			{
HXLINE(5912)				ret->elt = null();
HXDLIN(5912)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool;
HXDLIN(5912)				::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = ret;
            			}
HXDLIN(5912)			if (hx::IsNull( this->head )) {
HXLINE(5912)				this->pushmod = true;
            			}
HXDLIN(5912)			this->modified = true;
HXDLIN(5912)			this->length--;
            		}
HXLINE(5913)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,inlined_clear,(void))

void ZNPList_ZPP_CutInt_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5916_reverse)
            	HX_STACK_THIS(this)
HXLINE(5917)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cur) = this->head;
HXLINE(5918)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,pre) = null();
HXLINE(5919)		while(hx::IsNotNull( cur )){
HXLINE(5920)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,nx) = cur->next;
HXLINE(5921)			cur->next = pre;
HXLINE(5922)			this->head = cur;
HXLINE(5923)			pre = cur;
HXLINE(5924)			cur = nx;
            		}
HXLINE(5926)		this->modified = true;
HXLINE(5927)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,reverse,(void))

bool ZNPList_ZPP_CutInt_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5932_empty)
            	HX_STACK_THIS(this)
HXLINE(5932)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,empty,return )

int ZNPList_ZPP_CutInt_obj::size(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5937_size)
            	HX_STACK_THIS(this)
HXLINE(5937)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,size,return )

bool ZNPList_ZPP_CutInt_obj::has( ::zpp_nape::geom::ZPP_CutInt obj){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5940_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5940)		HX_VAR( bool,ret);
HXDLIN(5940)		{
HXLINE(5940)			ret = false;
HXDLIN(5940)			{
HXLINE(5940)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cx_ite) = this->head;
HXDLIN(5940)				while(hx::IsNotNull( cx_ite )){
HXLINE(5940)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(5940)						ret = true;
HXDLIN(5940)						goto _hx_goto_33;
            					}
HXDLIN(5940)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(5940)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,has,return )

bool ZNPList_ZPP_CutInt_obj::inlined_has( ::zpp_nape::geom::ZPP_CutInt obj){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5944_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5953)		HX_VAR( bool,ret);
HXLINE(5954)		{
HXLINE(5955)			ret = false;
HXLINE(5956)			{
HXLINE(5957)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cx_ite) = this->head;
HXLINE(5958)				while(hx::IsNotNull( cx_ite )){
HXLINE(5961)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(5962)						ret = true;
HXLINE(5963)						goto _hx_goto_35;
            					}
HXLINE(5966)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(5970)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_CutInt ZNPList_ZPP_CutInt_obj::front(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5975_front)
            	HX_STACK_THIS(this)
HXLINE(5975)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,front,return )

 ::zpp_nape::geom::ZPP_CutInt ZNPList_ZPP_CutInt_obj::back(){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5977_back)
            	HX_STACK_THIS(this)
HXLINE(5978)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret) = this->head;
HXLINE(5979)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,cur) = ret;
HXLINE(5980)		while(hx::IsNotNull( cur )){
HXLINE(5981)			ret = cur;
HXLINE(5982)			cur = cur->next;
            		}
HXLINE(5984)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CutInt_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_CutInt ZNPList_ZPP_CutInt_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5986_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(5995)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,ret) = this->head;
HXLINE(5996)		while(true){
HXLINE(5996)			bool _hx_tmp;
HXDLIN(5996)			ind = (ind - (int)1);
HXDLIN(5996)			if (((ind + (int)1) > (int)0)) {
HXLINE(5996)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(5996)				_hx_tmp = false;
            			}
HXDLIN(5996)			if (!(_hx_tmp)) {
HXLINE(5996)				goto _hx_goto_40;
            			}
HXDLIN(5996)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(5997)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_CutInt ZNPList_ZPP_CutInt_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_99dae0fcad7697b9_5999_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(6008)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,it) = this->iterator_at(ind);
HXLINE(6009)		if (hx::IsNotNull( it )) {
HXLINE(6009)			return it->elt;
            		}
            		else {
HXLINE(6009)			return null();
            		}
HXDLIN(6009)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CutInt_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_CutInt_obj > ZNPList_ZPP_CutInt_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_CutInt_obj > __this = new ZNPList_ZPP_CutInt_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_CutInt_obj > ZNPList_ZPP_CutInt_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_CutInt_obj *__this = (ZNPList_ZPP_CutInt_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_CutInt_obj), true, "zpp_nape.util.ZNPList_ZPP_CutInt"));
	*(void **)__this = ZNPList_ZPP_CutInt_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_CutInt_obj::ZNPList_ZPP_CutInt_obj()
{
}

void ZNPList_ZPP_CutInt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_CutInt);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_CutInt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_CutInt_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_CutInt_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_CutInt >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_CutInt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_CutInt_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_CutInt*/ ,(int)offsetof(ZNPList_ZPP_CutInt_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CutInt_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CutInt_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_CutInt_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_CutInt_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_CutInt_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_CutInt_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_CutInt_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_CutInt_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_CutInt_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_CutInt_obj::__mClass;

void ZNPList_ZPP_CutInt_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_CutInt_obj;
	ZNPList_ZPP_CutInt_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_CutInt","\x82","\x35","\x66","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_CutInt_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_CutInt_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_CutInt_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_CutInt_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_CutInt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_CutInt_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
