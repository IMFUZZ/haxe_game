// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionedPoly
#include <zpp_nape/geom/ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionedPoly
#include <zpp_nape/util/ZNPList_ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionedPoly
#include <zpp_nape/util/ZNPNode_ZPP_PartitionedPoly.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7264_new,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","new",0xe5cadd12,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.new","zpp_nape/util/Lists.hx",7264,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7270_begin,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","begin",0x2b2f075b,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.begin","zpp_nape/util/Lists.hx",7270,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7277_setbegin,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","setbegin",0x8a609155,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.setbegin","zpp_nape/util/Lists.hx",7277,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7283_add,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","add",0xe5c0fed3,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.add","zpp_nape/util/Lists.hx",7283,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7287_inlined_add,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_add",0xb36c5b3f,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_add","zpp_nape/util/Lists.hx",7287,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7333_addAll,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","addAll",0xa21b780e,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.addAll","zpp_nape/util/Lists.hx",7333,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7343_insert,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","insert",0xa0fdb1c7,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.insert","zpp_nape/util/Lists.hx",7343,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7347_inlined_insert,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_insert",0x8736e0db,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_insert","zpp_nape/util/Lists.hx",7347,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7391_pop,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","pop",0xe5cc6a43,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.pop","zpp_nape/util/Lists.hx",7391,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7395_inlined_pop,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_pop",0xb377c6af,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_pop","zpp_nape/util/Lists.hx",7395,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7429_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","pop_unsafe",0x5fc249e2,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.pop_unsafe","zpp_nape/util/Lists.hx",7429,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7433_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_pop_unsafe",0xafc292f6,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_pop_unsafe","zpp_nape/util/Lists.hx",7433,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7455_remove,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","remove",0x07a90ad2,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.remove","zpp_nape/util/Lists.hx",7455,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7457_try_remove,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","try_remove",0x76ec7f96,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.try_remove","zpp_nape/util/Lists.hx",7457,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7491_inlined_remove,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_remove",0xede239e6,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_remove","zpp_nape/util/Lists.hx",7491,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7495_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_try_remove",0xc6ecc8aa,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_try_remove","zpp_nape/util/Lists.hx",7495,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7519_erase,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","erase",0xedf60618,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.erase","zpp_nape/util/Lists.hx",7519,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7523_inlined_erase,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_erase",0x02825584,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_erase","zpp_nape/util/Lists.hx",7523,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7569_splice,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","splice",0xc2bef40a,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.splice","zpp_nape/util/Lists.hx",7569,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7574_clear,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","clear",0xc3348ebf,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.clear","zpp_nape/util/Lists.hx",7574,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7579_inlined_clear,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_clear",0xd7c0de2b,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_clear","zpp_nape/util/Lists.hx",7579,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7584_reverse,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","reverse",0xd43c86d4,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.reverse","zpp_nape/util/Lists.hx",7584,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7600_empty,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","empty",0xeab357bf,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.empty","zpp_nape/util/Lists.hx",7600,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7605_size,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","size",0x2f07afcf,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.size","zpp_nape/util/Lists.hx",7605,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7608_has,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","has",0xe5c64c0c,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.has","zpp_nape/util/Lists.hx",7608,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7612_inlined_has,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","inlined_has",0xb371a878,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.inlined_has","zpp_nape/util/Lists.hx",7612,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7643_front,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","front",0x816735db,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.front","zpp_nape/util/Lists.hx",7643,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7645_back,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","back",0x23c4e935,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.back","zpp_nape/util/Lists.hx",7645,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7654_iterator_at,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","iterator_at",0xb8109896,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.iterator_at","zpp_nape/util/Lists.hx",7654,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_4c3c4a44e7d07843_7667_at,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly","at",0x5846e481,"zpp_nape.util.ZNPList_ZPP_PartitionedPoly.at","zpp_nape/util/Lists.hx",7667,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_PartitionedPoly_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7264_new)
            	HX_STACK_THIS(this)
HXLINE(7274)		this->length = (int)0;
HXLINE(7273)		this->pushmod = false;
HXLINE(7272)		this->modified = false;
HXLINE(7265)		this->head = null();
            	}

Dynamic ZNPList_ZPP_PartitionedPoly_obj::__CreateEmpty() { return new ZNPList_ZPP_PartitionedPoly_obj; }

void *ZNPList_ZPP_PartitionedPoly_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_PartitionedPoly_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_PartitionedPoly_obj > _hx_result = new ZNPList_ZPP_PartitionedPoly_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_PartitionedPoly_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3df1ca94;
}

 ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7270_begin)
            	HX_STACK_THIS(this)
HXLINE(7270)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,begin,return )

void ZNPList_ZPP_PartitionedPoly_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly i){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7277_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(7278)		this->head = i;
HXLINE(7279)		this->modified = true;
HXLINE(7280)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::add( ::zpp_nape::geom::ZPP_PartitionedPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7283_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(7283)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXDLIN(7283)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool )) {
HXLINE(7283)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(7283)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7283)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret->next;
HXDLIN(7283)			ret->next = null();
            		}
HXDLIN(7283)		ret->elt = o;
HXDLIN(7283)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,temp) = ret;
HXDLIN(7283)		temp->next = this->head;
HXDLIN(7283)		this->head = temp;
HXDLIN(7283)		this->modified = true;
HXDLIN(7283)		this->length++;
HXDLIN(7283)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,add,return )

 ::zpp_nape::geom::ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::inlined_add( ::zpp_nape::geom::ZPP_PartitionedPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7287_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(7297)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXLINE(7299)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool )) {
HXLINE(7300)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(7306)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXLINE(7307)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret->next;
HXLINE(7308)			ret->next = null();
            		}
HXLINE(7315)		ret->elt = o;
HXLINE(7296)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,temp) = ret;
HXLINE(7318)		temp->next = this->head;
HXLINE(7319)		this->head = temp;
HXLINE(7320)		this->modified = true;
HXLINE(7321)		this->length++;
HXLINE(7322)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,inlined_add,return )

void ZNPList_ZPP_PartitionedPoly_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly x){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7333_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(7334)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cx_ite) = x->head;
HXLINE(7335)		while(hx::IsNotNull( cx_ite )){
HXLINE(7337)			this->add(cx_ite->elt);
HXLINE(7338)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly cur, ::zpp_nape::geom::ZPP_PartitionedPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7343_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(7343)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXDLIN(7343)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool )) {
HXLINE(7343)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(7343)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7343)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret->next;
HXDLIN(7343)			ret->next = null();
            		}
HXDLIN(7343)		ret->elt = o;
HXDLIN(7343)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,temp) = ret;
HXDLIN(7343)		if (hx::IsNull( cur )) {
HXLINE(7343)			temp->next = this->head;
HXDLIN(7343)			this->head = temp;
            		}
            		else {
HXLINE(7343)			temp->next = cur->next;
HXDLIN(7343)			cur->next = temp;
            		}
HXDLIN(7343)		this->pushmod = (this->modified = true);
HXDLIN(7343)		this->length++;
HXDLIN(7343)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_PartitionedPoly_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly cur, ::zpp_nape::geom::ZPP_PartitionedPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7347_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(7357)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXLINE(7359)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool )) {
HXLINE(7360)			ret =  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(7366)			ret = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXLINE(7367)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret->next;
HXLINE(7368)			ret->next = null();
            		}
HXLINE(7375)		ret->elt = o;
HXLINE(7356)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,temp) = ret;
HXLINE(7378)		if (hx::IsNull( cur )) {
HXLINE(7379)			temp->next = this->head;
HXLINE(7380)			this->head = temp;
            		}
            		else {
HXLINE(7383)			temp->next = cur->next;
HXLINE(7384)			cur->next = temp;
            		}
HXLINE(7386)		this->pushmod = (this->modified = true);
HXLINE(7387)		this->length++;
HXLINE(7388)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_PartitionedPoly_obj,inlined_insert,return )

void ZNPList_ZPP_PartitionedPoly_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7391_pop)
            	HX_STACK_THIS(this)
HXLINE(7391)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret) = this->head;
HXDLIN(7391)		this->head = ret->next;
HXDLIN(7391)		{
HXLINE(7391)			ret->elt = null();
HXDLIN(7391)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7391)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret;
            		}
HXDLIN(7391)		if (hx::IsNull( this->head )) {
HXLINE(7391)			this->pushmod = true;
            		}
HXDLIN(7391)		this->modified = true;
HXDLIN(7391)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,pop,(void))

void ZNPList_ZPP_PartitionedPoly_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7395_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(7404)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret) = this->head;
HXLINE(7405)		this->head = ret->next;
HXLINE(7407)		{
HXLINE(7417)			ret->elt = null();
HXLINE(7418)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXLINE(7419)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret;
            		}
HXLINE(7424)		if (hx::IsNull( this->head )) {
HXLINE(7424)			this->pushmod = true;
            		}
HXLINE(7425)		this->modified = true;
HXLINE(7426)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7429_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(7429)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionedPoly,ret) = this->head->elt;
HXDLIN(7429)		this->pop();
HXDLIN(7429)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7433_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(7442)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionedPoly,ret) = this->head->elt;
HXLINE(7443)		this->pop();
HXLINE(7444)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_PartitionedPoly_obj::remove( ::zpp_nape::geom::ZPP_PartitionedPoly obj){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7455_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7455)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,pre) = null();
HXDLIN(7455)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cur) = this->head;
HXDLIN(7455)		while(hx::IsNotNull( cur )){
HXLINE(7455)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(7455)				{
HXLINE(7455)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,old);
HXDLIN(7455)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXDLIN(7455)					if (hx::IsNull( pre )) {
HXLINE(7455)						old = this->head;
HXDLIN(7455)						ret = old->next;
HXDLIN(7455)						this->head = ret;
HXDLIN(7455)						if (hx::IsNull( this->head )) {
HXLINE(7455)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(7455)						old = pre->next;
HXDLIN(7455)						ret = old->next;
HXDLIN(7455)						pre->next = ret;
HXDLIN(7455)						if (hx::IsNull( ret )) {
HXLINE(7455)							this->pushmod = true;
            						}
            					}
HXDLIN(7455)					{
HXLINE(7455)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,o) = old;
HXDLIN(7455)						o->elt = null();
HXDLIN(7455)						o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7455)						::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = o;
            					}
HXDLIN(7455)					this->modified = true;
HXDLIN(7455)					this->length--;
HXDLIN(7455)					this->pushmod = true;
            				}
HXDLIN(7455)				goto _hx_goto_13;
            			}
HXDLIN(7455)			pre = cur;
HXDLIN(7455)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,remove,(void))

bool ZNPList_ZPP_PartitionedPoly_obj::try_remove( ::zpp_nape::geom::ZPP_PartitionedPoly obj){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7457_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7466)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,pre) = null();
HXLINE(7467)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cur) = this->head;
HXLINE(7468)		HX_VARI( bool,ret) = false;
HXLINE(7469)		while(hx::IsNotNull( cur )){
HXLINE(7470)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(7471)				this->erase(pre);
HXLINE(7472)				ret = true;
HXLINE(7473)				goto _hx_goto_15;
            			}
HXLINE(7475)			pre = cur;
HXLINE(7476)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(7478)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,try_remove,return )

void ZNPList_ZPP_PartitionedPoly_obj::inlined_remove( ::zpp_nape::geom::ZPP_PartitionedPoly obj){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7491_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7491)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,pre) = null();
HXDLIN(7491)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cur) = this->head;
HXDLIN(7491)		while(hx::IsNotNull( cur )){
HXLINE(7491)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(7491)				{
HXLINE(7491)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,old);
HXDLIN(7491)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXDLIN(7491)					if (hx::IsNull( pre )) {
HXLINE(7491)						old = this->head;
HXDLIN(7491)						ret = old->next;
HXDLIN(7491)						this->head = ret;
HXDLIN(7491)						if (hx::IsNull( this->head )) {
HXLINE(7491)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(7491)						old = pre->next;
HXDLIN(7491)						ret = old->next;
HXDLIN(7491)						pre->next = ret;
HXDLIN(7491)						if (hx::IsNull( ret )) {
HXLINE(7491)							this->pushmod = true;
            						}
            					}
HXDLIN(7491)					{
HXLINE(7491)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,o) = old;
HXDLIN(7491)						o->elt = null();
HXDLIN(7491)						o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7491)						::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = o;
            					}
HXDLIN(7491)					this->modified = true;
HXDLIN(7491)					this->length--;
HXDLIN(7491)					this->pushmod = true;
            				}
HXDLIN(7491)				goto _hx_goto_17;
            			}
HXDLIN(7491)			pre = cur;
HXDLIN(7491)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,inlined_remove,(void))

bool ZNPList_ZPP_PartitionedPoly_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_PartitionedPoly obj){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7495_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7504)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,pre) = null();
HXLINE(7505)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cur) = this->head;
HXLINE(7506)		HX_VARI( bool,ret) = false;
HXLINE(7507)		while(hx::IsNotNull( cur )){
HXLINE(7508)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(7509)				{
HXLINE(7509)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,old);
HXDLIN(7509)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret1,"ret");
HXDLIN(7509)					if (hx::IsNull( pre )) {
HXLINE(7509)						old = this->head;
HXDLIN(7509)						ret1 = old->next;
HXDLIN(7509)						this->head = ret1;
HXDLIN(7509)						if (hx::IsNull( this->head )) {
HXLINE(7509)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(7509)						old = pre->next;
HXDLIN(7509)						ret1 = old->next;
HXDLIN(7509)						pre->next = ret1;
HXDLIN(7509)						if (hx::IsNull( ret1 )) {
HXLINE(7509)							this->pushmod = true;
            						}
            					}
HXDLIN(7509)					{
HXLINE(7509)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,o) = old;
HXDLIN(7509)						o->elt = null();
HXDLIN(7509)						o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7509)						::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = o;
            					}
HXDLIN(7509)					this->modified = true;
HXDLIN(7509)					this->length--;
HXDLIN(7509)					this->pushmod = true;
            				}
HXLINE(7510)				ret = true;
HXLINE(7511)				goto _hx_goto_19;
            			}
HXLINE(7513)			pre = cur;
HXLINE(7514)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(7516)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly pre){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7519_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(7519)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,old);
HXDLIN(7519)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXDLIN(7519)		if (hx::IsNull( pre )) {
HXLINE(7519)			old = this->head;
HXDLIN(7519)			ret = old->next;
HXDLIN(7519)			this->head = ret;
HXDLIN(7519)			if (hx::IsNull( this->head )) {
HXLINE(7519)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(7519)			old = pre->next;
HXDLIN(7519)			ret = old->next;
HXDLIN(7519)			pre->next = ret;
HXDLIN(7519)			if (hx::IsNull( ret )) {
HXLINE(7519)				this->pushmod = true;
            			}
            		}
HXDLIN(7519)		{
HXLINE(7519)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,o) = old;
HXDLIN(7519)			o->elt = null();
HXDLIN(7519)			o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7519)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = o;
            		}
HXDLIN(7519)		this->modified = true;
HXDLIN(7519)		this->length--;
HXDLIN(7519)		this->pushmod = true;
HXDLIN(7519)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly pre){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7523_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(7532)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,old);
HXLINE(7533)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret);
HXLINE(7534)		if (hx::IsNull( pre )) {
HXLINE(7535)			old = this->head;
HXLINE(7536)			ret = old->next;
HXLINE(7537)			this->head = ret;
HXLINE(7538)			if (hx::IsNull( this->head )) {
HXLINE(7538)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(7541)			old = pre->next;
HXLINE(7542)			ret = old->next;
HXLINE(7543)			pre->next = ret;
HXLINE(7544)			if (hx::IsNull( ret )) {
HXLINE(7544)				this->pushmod = true;
            			}
            		}
HXLINE(7547)		{
HXLINE(7548)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,o) = old;
HXLINE(7557)			o->elt = null();
HXLINE(7558)			o->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXLINE(7559)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = o;
            		}
HXLINE(7564)		this->modified = true;
HXLINE(7565)		this->length--;
HXLINE(7566)		this->pushmod = true;
HXLINE(7567)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly pre,int n){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7569_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(7570)		while(true){
HXLINE(7570)			bool _hx_tmp;
HXDLIN(7570)			n = (n - (int)1);
HXDLIN(7570)			if (((n + (int)1) > (int)0)) {
HXLINE(7570)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(7570)				_hx_tmp = false;
            			}
HXDLIN(7570)			if (!(_hx_tmp)) {
HXLINE(7570)				goto _hx_goto_23;
            			}
HXDLIN(7570)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(7571)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_PartitionedPoly_obj,splice,return )

void ZNPList_ZPP_PartitionedPoly_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7574_clear)
            	HX_STACK_THIS(this)
HXLINE(7574)		while(hx::IsNotNull( this->head )){
HXLINE(7574)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret) = this->head;
HXDLIN(7574)			this->head = ret->next;
HXDLIN(7574)			{
HXLINE(7574)				ret->elt = null();
HXDLIN(7574)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7574)				::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret;
            			}
HXDLIN(7574)			if (hx::IsNull( this->head )) {
HXLINE(7574)				this->pushmod = true;
            			}
HXDLIN(7574)			this->modified = true;
HXDLIN(7574)			this->length--;
            		}
HXDLIN(7574)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,clear,(void))

void ZNPList_ZPP_PartitionedPoly_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7579_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(7580)		while(hx::IsNotNull( this->head )){
HXLINE(7580)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret) = this->head;
HXDLIN(7580)			this->head = ret->next;
HXDLIN(7580)			{
HXLINE(7580)				ret->elt = null();
HXDLIN(7580)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool;
HXDLIN(7580)				::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = ret;
            			}
HXDLIN(7580)			if (hx::IsNull( this->head )) {
HXLINE(7580)				this->pushmod = true;
            			}
HXDLIN(7580)			this->modified = true;
HXDLIN(7580)			this->length--;
            		}
HXLINE(7581)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,inlined_clear,(void))

void ZNPList_ZPP_PartitionedPoly_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7584_reverse)
            	HX_STACK_THIS(this)
HXLINE(7585)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cur) = this->head;
HXLINE(7586)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,pre) = null();
HXLINE(7587)		while(hx::IsNotNull( cur )){
HXLINE(7588)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,nx) = cur->next;
HXLINE(7589)			cur->next = pre;
HXLINE(7590)			this->head = cur;
HXLINE(7591)			pre = cur;
HXLINE(7592)			cur = nx;
            		}
HXLINE(7594)		this->modified = true;
HXLINE(7595)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,reverse,(void))

bool ZNPList_ZPP_PartitionedPoly_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7600_empty)
            	HX_STACK_THIS(this)
HXLINE(7600)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,empty,return )

int ZNPList_ZPP_PartitionedPoly_obj::size(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7605_size)
            	HX_STACK_THIS(this)
HXLINE(7605)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,size,return )

bool ZNPList_ZPP_PartitionedPoly_obj::has( ::zpp_nape::geom::ZPP_PartitionedPoly obj){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7608_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7608)		HX_VAR( bool,ret);
HXDLIN(7608)		{
HXLINE(7608)			ret = false;
HXDLIN(7608)			{
HXLINE(7608)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cx_ite) = this->head;
HXDLIN(7608)				while(hx::IsNotNull( cx_ite )){
HXLINE(7608)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(7608)						ret = true;
HXDLIN(7608)						goto _hx_goto_33;
            					}
HXDLIN(7608)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(7608)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,has,return )

bool ZNPList_ZPP_PartitionedPoly_obj::inlined_has( ::zpp_nape::geom::ZPP_PartitionedPoly obj){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7612_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(7621)		HX_VAR( bool,ret);
HXLINE(7622)		{
HXLINE(7623)			ret = false;
HXLINE(7624)			{
HXLINE(7625)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cx_ite) = this->head;
HXLINE(7626)				while(hx::IsNotNull( cx_ite )){
HXLINE(7629)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(7630)						ret = true;
HXLINE(7631)						goto _hx_goto_35;
            					}
HXLINE(7634)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(7638)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::front(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7643_front)
            	HX_STACK_THIS(this)
HXLINE(7643)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,front,return )

 ::zpp_nape::geom::ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::back(){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7645_back)
            	HX_STACK_THIS(this)
HXLINE(7646)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret) = this->head;
HXLINE(7647)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cur) = ret;
HXLINE(7648)		while(hx::IsNotNull( cur )){
HXLINE(7649)			ret = cur;
HXLINE(7650)			cur = cur->next;
            		}
HXLINE(7652)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_PartitionedPoly_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7654_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(7663)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,ret) = this->head;
HXLINE(7664)		while(true){
HXLINE(7664)			bool _hx_tmp;
HXDLIN(7664)			ind = (ind - (int)1);
HXDLIN(7664)			if (((ind + (int)1) > (int)0)) {
HXLINE(7664)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(7664)				_hx_tmp = false;
            			}
HXDLIN(7664)			if (!(_hx_tmp)) {
HXLINE(7664)				goto _hx_goto_40;
            			}
HXDLIN(7664)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(7665)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_PartitionedPoly ZNPList_ZPP_PartitionedPoly_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_4c3c4a44e7d07843_7667_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(7676)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,it) = this->iterator_at(ind);
HXLINE(7677)		if (hx::IsNotNull( it )) {
HXLINE(7677)			return it->elt;
            		}
            		else {
HXLINE(7677)			return null();
            		}
HXDLIN(7677)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_PartitionedPoly_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_PartitionedPoly_obj > ZNPList_ZPP_PartitionedPoly_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_PartitionedPoly_obj > __this = new ZNPList_ZPP_PartitionedPoly_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_PartitionedPoly_obj > ZNPList_ZPP_PartitionedPoly_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_PartitionedPoly_obj *__this = (ZNPList_ZPP_PartitionedPoly_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_PartitionedPoly_obj), true, "zpp_nape.util.ZNPList_ZPP_PartitionedPoly"));
	*(void **)__this = ZNPList_ZPP_PartitionedPoly_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_PartitionedPoly_obj::ZNPList_ZPP_PartitionedPoly_obj()
{
}

void ZNPList_ZPP_PartitionedPoly_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_PartitionedPoly);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_PartitionedPoly_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_PartitionedPoly_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_PartitionedPoly_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_PartitionedPoly_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_PartitionedPoly_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly*/ ,(int)offsetof(ZNPList_ZPP_PartitionedPoly_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_PartitionedPoly_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_PartitionedPoly_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_PartitionedPoly_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_PartitionedPoly_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_PartitionedPoly_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_PartitionedPoly_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_PartitionedPoly_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_PartitionedPoly_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_PartitionedPoly_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_PartitionedPoly_obj::__mClass;

void ZNPList_ZPP_PartitionedPoly_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_PartitionedPoly_obj;
	ZNPList_ZPP_PartitionedPoly_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_PartitionedPoly","\x20","\xac","\x76","\x7b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_PartitionedPoly_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_PartitionedPoly_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_PartitionedPoly_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_PartitionedPoly_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_PartitionedPoly_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_PartitionedPoly_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
