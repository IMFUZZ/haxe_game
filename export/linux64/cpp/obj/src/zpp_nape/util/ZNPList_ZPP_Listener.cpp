// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Listener
#include <zpp_nape/util/ZNPList_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Listener
#include <zpp_nape/util/ZNPNode_ZPP_Listener.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11851_new,"zpp_nape.util.ZNPList_ZPP_Listener","new",0xc620aa1b,"zpp_nape.util.ZNPList_ZPP_Listener.new","zpp_nape/util/Lists.hx",11851,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11857_begin,"zpp_nape.util.ZNPList_ZPP_Listener","begin",0x2658e8a4,"zpp_nape.util.ZNPList_ZPP_Listener.begin","zpp_nape/util/Lists.hx",11857,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11864_setbegin,"zpp_nape.util.ZNPList_ZPP_Listener","setbegin",0x1819e3ac,"zpp_nape.util.ZNPList_ZPP_Listener.setbegin","zpp_nape/util/Lists.hx",11864,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11870_add,"zpp_nape.util.ZNPList_ZPP_Listener","add",0xc616cbdc,"zpp_nape.util.ZNPList_ZPP_Listener.add","zpp_nape/util/Lists.hx",11870,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11874_inlined_add,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_add",0x2c53d948,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_add","zpp_nape/util/Lists.hx",11874,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11920_addAll,"zpp_nape.util.ZNPList_ZPP_Listener","addAll",0x6b96b6a5,"zpp_nape.util.ZNPList_ZPP_Listener.addAll","zpp_nape/util/Lists.hx",11920,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11930_insert,"zpp_nape.util.ZNPList_ZPP_Listener","insert",0x6a78f05e,"zpp_nape.util.ZNPList_ZPP_Listener.insert","zpp_nape/util/Lists.hx",11930,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11934_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_insert",0xa7850e72,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_insert","zpp_nape/util/Lists.hx",11934,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11978_pop,"zpp_nape.util.ZNPList_ZPP_Listener","pop",0xc622374c,"zpp_nape.util.ZNPList_ZPP_Listener.pop","zpp_nape/util/Lists.hx",11978,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_11982_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_pop",0x2c5f44b8,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_pop","zpp_nape/util/Lists.hx",11982,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12016_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Listener","pop_unsafe",0xcc361ff9,"zpp_nape.util.ZNPList_ZPP_Listener.pop_unsafe","zpp_nape/util/Lists.hx",12016,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12020_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_pop_unsafe",0x08acd80d,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_pop_unsafe","zpp_nape/util/Lists.hx",12020,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12042_remove,"zpp_nape.util.ZNPList_ZPP_Listener","remove",0xd1244969,"zpp_nape.util.ZNPList_ZPP_Listener.remove","zpp_nape/util/Lists.hx",12042,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12044_try_remove,"zpp_nape.util.ZNPList_ZPP_Listener","try_remove",0xe36055ad,"zpp_nape.util.ZNPList_ZPP_Listener.try_remove","zpp_nape/util/Lists.hx",12044,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12078_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_remove",0x0e30677d,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_remove","zpp_nape/util/Lists.hx",12078,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12082_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_try_remove",0x1fd70dc1,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_try_remove","zpp_nape/util/Lists.hx",12082,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12106_erase,"zpp_nape.util.ZNPList_ZPP_Listener","erase",0xe91fe761,"zpp_nape.util.ZNPList_ZPP_Listener.erase","zpp_nape/util/Lists.hx",12106,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12110_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_erase",0x22cc27cd,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_erase","zpp_nape/util/Lists.hx",12110,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12156_splice,"zpp_nape.util.ZNPList_ZPP_Listener","splice",0x8c3a32a1,"zpp_nape.util.ZNPList_ZPP_Listener.splice","zpp_nape/util/Lists.hx",12156,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12161_clear,"zpp_nape.util.ZNPList_ZPP_Listener","clear",0xbe5e7008,"zpp_nape.util.ZNPList_ZPP_Listener.clear","zpp_nape/util/Lists.hx",12161,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12166_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_clear",0xf80ab074,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_clear","zpp_nape/util/Lists.hx",12166,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12171_reverse,"zpp_nape.util.ZNPList_ZPP_Listener","reverse",0x56980c5d,"zpp_nape.util.ZNPList_ZPP_Listener.reverse","zpp_nape/util/Lists.hx",12171,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12187_empty,"zpp_nape.util.ZNPList_ZPP_Listener","empty",0xe5dd3908,"zpp_nape.util.ZNPList_ZPP_Listener.empty","zpp_nape/util/Lists.hx",12187,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12192_size,"zpp_nape.util.ZNPList_ZPP_Listener","size",0x99c54aa6,"zpp_nape.util.ZNPList_ZPP_Listener.size","zpp_nape/util/Lists.hx",12192,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12195_has,"zpp_nape.util.ZNPList_ZPP_Listener","has",0xc61c1915,"zpp_nape.util.ZNPList_ZPP_Listener.has","zpp_nape/util/Lists.hx",12195,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12199_inlined_has,"zpp_nape.util.ZNPList_ZPP_Listener","inlined_has",0x2c592681,"zpp_nape.util.ZNPList_ZPP_Listener.inlined_has","zpp_nape/util/Lists.hx",12199,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12230_front,"zpp_nape.util.ZNPList_ZPP_Listener","front",0x7c911724,"zpp_nape.util.ZNPList_ZPP_Listener.front","zpp_nape/util/Lists.hx",12230,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12232_back,"zpp_nape.util.ZNPList_ZPP_Listener","back",0x8e82840c,"zpp_nape.util.ZNPList_ZPP_Listener.back","zpp_nape/util/Lists.hx",12232,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12241_iterator_at,"zpp_nape.util.ZNPList_ZPP_Listener","iterator_at",0x30f8169f,"zpp_nape.util.ZNPList_ZPP_Listener.iterator_at","zpp_nape/util/Lists.hx",12241,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_6e9f7b32836346ff_12254_at,"zpp_nape.util.ZNPList_ZPP_Listener","at",0x8bcb4b98,"zpp_nape.util.ZNPList_ZPP_Listener.at","zpp_nape/util/Lists.hx",12254,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Listener_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11851_new)
            	HX_STACK_THIS(this)
HXLINE(11861)		this->length = (int)0;
HXLINE(11860)		this->pushmod = false;
HXLINE(11859)		this->modified = false;
HXLINE(11852)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Listener_obj::__CreateEmpty() { return new ZNPList_ZPP_Listener_obj; }

void *ZNPList_ZPP_Listener_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Listener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Listener_obj > _hx_result = new ZNPList_ZPP_Listener_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Listener_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a228951;
}

 ::zpp_nape::util::ZNPNode_ZPP_Listener ZNPList_ZPP_Listener_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11857_begin)
            	HX_STACK_THIS(this)
HXLINE(11857)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,begin,return )

void ZNPList_ZPP_Listener_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Listener i){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11864_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(11865)		this->head = i;
HXLINE(11866)		this->modified = true;
HXLINE(11867)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,setbegin,(void))

 ::zpp_nape::callbacks::ZPP_Listener ZNPList_ZPP_Listener_obj::add( ::zpp_nape::callbacks::ZPP_Listener o){
            	HX_GC_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11870_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(11870)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXDLIN(11870)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool )) {
HXLINE(11870)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11870)			ret = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(11870)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret->next;
HXDLIN(11870)			ret->next = null();
            		}
HXDLIN(11870)		ret->elt = o;
HXDLIN(11870)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,temp) = ret;
HXDLIN(11870)		temp->next = this->head;
HXDLIN(11870)		this->head = temp;
HXDLIN(11870)		this->modified = true;
HXDLIN(11870)		this->length++;
HXDLIN(11870)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,add,return )

 ::zpp_nape::callbacks::ZPP_Listener ZNPList_ZPP_Listener_obj::inlined_add( ::zpp_nape::callbacks::ZPP_Listener o){
            	HX_GC_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11874_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(11884)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXLINE(11886)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool )) {
HXLINE(11887)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11893)			ret = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXLINE(11894)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret->next;
HXLINE(11895)			ret->next = null();
            		}
HXLINE(11902)		ret->elt = o;
HXLINE(11883)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,temp) = ret;
HXLINE(11905)		temp->next = this->head;
HXLINE(11906)		this->head = temp;
HXLINE(11907)		this->modified = true;
HXLINE(11908)		this->length++;
HXLINE(11909)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,inlined_add,return )

void ZNPList_ZPP_Listener_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Listener x){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11920_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(11921)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cx_ite) = x->head;
HXLINE(11922)		while(hx::IsNotNull( cx_ite )){
HXLINE(11924)			this->add(cx_ite->elt);
HXLINE(11925)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Listener ZNPList_ZPP_Listener_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Listener cur, ::zpp_nape::callbacks::ZPP_Listener o){
            	HX_GC_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11930_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(11930)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXDLIN(11930)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool )) {
HXLINE(11930)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11930)			ret = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(11930)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret->next;
HXDLIN(11930)			ret->next = null();
            		}
HXDLIN(11930)		ret->elt = o;
HXDLIN(11930)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,temp) = ret;
HXDLIN(11930)		if (hx::IsNull( cur )) {
HXLINE(11930)			temp->next = this->head;
HXDLIN(11930)			this->head = temp;
            		}
            		else {
HXLINE(11930)			temp->next = cur->next;
HXDLIN(11930)			cur->next = temp;
            		}
HXDLIN(11930)		this->pushmod = (this->modified = true);
HXDLIN(11930)		this->length++;
HXDLIN(11930)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Listener_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Listener ZNPList_ZPP_Listener_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Listener cur, ::zpp_nape::callbacks::ZPP_Listener o){
            	HX_GC_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11934_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(11944)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXLINE(11946)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool )) {
HXLINE(11947)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11953)			ret = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXLINE(11954)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret->next;
HXLINE(11955)			ret->next = null();
            		}
HXLINE(11962)		ret->elt = o;
HXLINE(11943)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,temp) = ret;
HXLINE(11965)		if (hx::IsNull( cur )) {
HXLINE(11966)			temp->next = this->head;
HXLINE(11967)			this->head = temp;
            		}
            		else {
HXLINE(11970)			temp->next = cur->next;
HXLINE(11971)			cur->next = temp;
            		}
HXLINE(11973)		this->pushmod = (this->modified = true);
HXLINE(11974)		this->length++;
HXLINE(11975)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Listener_obj,inlined_insert,return )

void ZNPList_ZPP_Listener_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11978_pop)
            	HX_STACK_THIS(this)
HXLINE(11978)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret) = this->head;
HXDLIN(11978)		this->head = ret->next;
HXDLIN(11978)		{
HXLINE(11978)			ret->elt = null();
HXDLIN(11978)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(11978)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret;
            		}
HXDLIN(11978)		if (hx::IsNull( this->head )) {
HXLINE(11978)			this->pushmod = true;
            		}
HXDLIN(11978)		this->modified = true;
HXDLIN(11978)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,pop,(void))

void ZNPList_ZPP_Listener_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_11982_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(11991)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret) = this->head;
HXLINE(11992)		this->head = ret->next;
HXLINE(11994)		{
HXLINE(12004)			ret->elt = null();
HXLINE(12005)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXLINE(12006)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret;
            		}
HXLINE(12011)		if (hx::IsNull( this->head )) {
HXLINE(12011)			this->pushmod = true;
            		}
HXLINE(12012)		this->modified = true;
HXLINE(12013)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,inlined_pop,(void))

 ::zpp_nape::callbacks::ZPP_Listener ZNPList_ZPP_Listener_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12016_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(12016)		HX_VARI(  ::zpp_nape::callbacks::ZPP_Listener,ret) = this->head->elt;
HXDLIN(12016)		this->pop();
HXDLIN(12016)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,pop_unsafe,return )

 ::zpp_nape::callbacks::ZPP_Listener ZNPList_ZPP_Listener_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12020_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(12029)		HX_VARI(  ::zpp_nape::callbacks::ZPP_Listener,ret) = this->head->elt;
HXLINE(12030)		this->pop();
HXLINE(12031)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Listener_obj::remove( ::zpp_nape::callbacks::ZPP_Listener obj){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12042_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12042)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,pre) = null();
HXDLIN(12042)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cur) = this->head;
HXDLIN(12042)		while(hx::IsNotNull( cur )){
HXLINE(12042)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12042)				{
HXLINE(12042)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,old);
HXDLIN(12042)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXDLIN(12042)					if (hx::IsNull( pre )) {
HXLINE(12042)						old = this->head;
HXDLIN(12042)						ret = old->next;
HXDLIN(12042)						this->head = ret;
HXDLIN(12042)						if (hx::IsNull( this->head )) {
HXLINE(12042)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(12042)						old = pre->next;
HXDLIN(12042)						ret = old->next;
HXDLIN(12042)						pre->next = ret;
HXDLIN(12042)						if (hx::IsNull( ret )) {
HXLINE(12042)							this->pushmod = true;
            						}
            					}
HXDLIN(12042)					{
HXLINE(12042)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,o) = old;
HXDLIN(12042)						o->elt = null();
HXDLIN(12042)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(12042)						::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = o;
            					}
HXDLIN(12042)					this->modified = true;
HXDLIN(12042)					this->length--;
HXDLIN(12042)					this->pushmod = true;
            				}
HXDLIN(12042)				goto _hx_goto_13;
            			}
HXDLIN(12042)			pre = cur;
HXDLIN(12042)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,remove,(void))

bool ZNPList_ZPP_Listener_obj::try_remove( ::zpp_nape::callbacks::ZPP_Listener obj){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12044_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12053)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,pre) = null();
HXLINE(12054)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cur) = this->head;
HXLINE(12055)		HX_VARI( bool,ret) = false;
HXLINE(12056)		while(hx::IsNotNull( cur )){
HXLINE(12057)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12058)				this->erase(pre);
HXLINE(12059)				ret = true;
HXLINE(12060)				goto _hx_goto_15;
            			}
HXLINE(12062)			pre = cur;
HXLINE(12063)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(12065)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,try_remove,return )

void ZNPList_ZPP_Listener_obj::inlined_remove( ::zpp_nape::callbacks::ZPP_Listener obj){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12078_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12078)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,pre) = null();
HXDLIN(12078)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cur) = this->head;
HXDLIN(12078)		while(hx::IsNotNull( cur )){
HXLINE(12078)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12078)				{
HXLINE(12078)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,old);
HXDLIN(12078)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXDLIN(12078)					if (hx::IsNull( pre )) {
HXLINE(12078)						old = this->head;
HXDLIN(12078)						ret = old->next;
HXDLIN(12078)						this->head = ret;
HXDLIN(12078)						if (hx::IsNull( this->head )) {
HXLINE(12078)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(12078)						old = pre->next;
HXDLIN(12078)						ret = old->next;
HXDLIN(12078)						pre->next = ret;
HXDLIN(12078)						if (hx::IsNull( ret )) {
HXLINE(12078)							this->pushmod = true;
            						}
            					}
HXDLIN(12078)					{
HXLINE(12078)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,o) = old;
HXDLIN(12078)						o->elt = null();
HXDLIN(12078)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(12078)						::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = o;
            					}
HXDLIN(12078)					this->modified = true;
HXDLIN(12078)					this->length--;
HXDLIN(12078)					this->pushmod = true;
            				}
HXDLIN(12078)				goto _hx_goto_17;
            			}
HXDLIN(12078)			pre = cur;
HXDLIN(12078)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,inlined_remove,(void))

bool ZNPList_ZPP_Listener_obj::inlined_try_remove( ::zpp_nape::callbacks::ZPP_Listener obj){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12082_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12091)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,pre) = null();
HXLINE(12092)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cur) = this->head;
HXLINE(12093)		HX_VARI( bool,ret) = false;
HXLINE(12094)		while(hx::IsNotNull( cur )){
HXLINE(12095)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12096)				{
HXLINE(12096)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,old);
HXDLIN(12096)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret1,"ret");
HXDLIN(12096)					if (hx::IsNull( pre )) {
HXLINE(12096)						old = this->head;
HXDLIN(12096)						ret1 = old->next;
HXDLIN(12096)						this->head = ret1;
HXDLIN(12096)						if (hx::IsNull( this->head )) {
HXLINE(12096)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(12096)						old = pre->next;
HXDLIN(12096)						ret1 = old->next;
HXDLIN(12096)						pre->next = ret1;
HXDLIN(12096)						if (hx::IsNull( ret1 )) {
HXLINE(12096)							this->pushmod = true;
            						}
            					}
HXDLIN(12096)					{
HXLINE(12096)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,o) = old;
HXDLIN(12096)						o->elt = null();
HXDLIN(12096)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(12096)						::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = o;
            					}
HXDLIN(12096)					this->modified = true;
HXDLIN(12096)					this->length--;
HXDLIN(12096)					this->pushmod = true;
            				}
HXLINE(12097)				ret = true;
HXLINE(12098)				goto _hx_goto_19;
            			}
HXLINE(12100)			pre = cur;
HXLINE(12101)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(12103)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Listener ZNPList_ZPP_Listener_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Listener pre){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12106_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(12106)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,old);
HXDLIN(12106)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXDLIN(12106)		if (hx::IsNull( pre )) {
HXLINE(12106)			old = this->head;
HXDLIN(12106)			ret = old->next;
HXDLIN(12106)			this->head = ret;
HXDLIN(12106)			if (hx::IsNull( this->head )) {
HXLINE(12106)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(12106)			old = pre->next;
HXDLIN(12106)			ret = old->next;
HXDLIN(12106)			pre->next = ret;
HXDLIN(12106)			if (hx::IsNull( ret )) {
HXLINE(12106)				this->pushmod = true;
            			}
            		}
HXDLIN(12106)		{
HXLINE(12106)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,o) = old;
HXDLIN(12106)			o->elt = null();
HXDLIN(12106)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(12106)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = o;
            		}
HXDLIN(12106)		this->modified = true;
HXDLIN(12106)		this->length--;
HXDLIN(12106)		this->pushmod = true;
HXDLIN(12106)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Listener ZNPList_ZPP_Listener_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Listener pre){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12110_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(12119)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,old);
HXLINE(12120)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret);
HXLINE(12121)		if (hx::IsNull( pre )) {
HXLINE(12122)			old = this->head;
HXLINE(12123)			ret = old->next;
HXLINE(12124)			this->head = ret;
HXLINE(12125)			if (hx::IsNull( this->head )) {
HXLINE(12125)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(12128)			old = pre->next;
HXLINE(12129)			ret = old->next;
HXLINE(12130)			pre->next = ret;
HXLINE(12131)			if (hx::IsNull( ret )) {
HXLINE(12131)				this->pushmod = true;
            			}
            		}
HXLINE(12134)		{
HXLINE(12135)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,o) = old;
HXLINE(12144)			o->elt = null();
HXLINE(12145)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXLINE(12146)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = o;
            		}
HXLINE(12151)		this->modified = true;
HXLINE(12152)		this->length--;
HXLINE(12153)		this->pushmod = true;
HXLINE(12154)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Listener ZNPList_ZPP_Listener_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Listener pre,int n){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12156_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(12157)		while(true){
HXLINE(12157)			bool _hx_tmp;
HXDLIN(12157)			n = (n - (int)1);
HXDLIN(12157)			if (((n + (int)1) > (int)0)) {
HXLINE(12157)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(12157)				_hx_tmp = false;
            			}
HXDLIN(12157)			if (!(_hx_tmp)) {
HXLINE(12157)				goto _hx_goto_23;
            			}
HXDLIN(12157)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(12158)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Listener_obj,splice,return )

void ZNPList_ZPP_Listener_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12161_clear)
            	HX_STACK_THIS(this)
HXLINE(12161)		while(hx::IsNotNull( this->head )){
HXLINE(12161)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret) = this->head;
HXDLIN(12161)			this->head = ret->next;
HXDLIN(12161)			{
HXLINE(12161)				ret->elt = null();
HXDLIN(12161)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(12161)				::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret;
            			}
HXDLIN(12161)			if (hx::IsNull( this->head )) {
HXLINE(12161)				this->pushmod = true;
            			}
HXDLIN(12161)			this->modified = true;
HXDLIN(12161)			this->length--;
            		}
HXDLIN(12161)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,clear,(void))

void ZNPList_ZPP_Listener_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12166_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(12167)		while(hx::IsNotNull( this->head )){
HXLINE(12167)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret) = this->head;
HXDLIN(12167)			this->head = ret->next;
HXDLIN(12167)			{
HXLINE(12167)				ret->elt = null();
HXDLIN(12167)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool;
HXDLIN(12167)				::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = ret;
            			}
HXDLIN(12167)			if (hx::IsNull( this->head )) {
HXLINE(12167)				this->pushmod = true;
            			}
HXDLIN(12167)			this->modified = true;
HXDLIN(12167)			this->length--;
            		}
HXLINE(12168)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,inlined_clear,(void))

void ZNPList_ZPP_Listener_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12171_reverse)
            	HX_STACK_THIS(this)
HXLINE(12172)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cur) = this->head;
HXLINE(12173)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,pre) = null();
HXLINE(12174)		while(hx::IsNotNull( cur )){
HXLINE(12175)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,nx) = cur->next;
HXLINE(12176)			cur->next = pre;
HXLINE(12177)			this->head = cur;
HXLINE(12178)			pre = cur;
HXLINE(12179)			cur = nx;
            		}
HXLINE(12181)		this->modified = true;
HXLINE(12182)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,reverse,(void))

bool ZNPList_ZPP_Listener_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12187_empty)
            	HX_STACK_THIS(this)
HXLINE(12187)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,empty,return )

int ZNPList_ZPP_Listener_obj::size(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12192_size)
            	HX_STACK_THIS(this)
HXLINE(12192)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,size,return )

bool ZNPList_ZPP_Listener_obj::has( ::zpp_nape::callbacks::ZPP_Listener obj){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12195_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12195)		HX_VAR( bool,ret);
HXDLIN(12195)		{
HXLINE(12195)			ret = false;
HXDLIN(12195)			{
HXLINE(12195)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cx_ite) = this->head;
HXDLIN(12195)				while(hx::IsNotNull( cx_ite )){
HXLINE(12195)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(12195)						ret = true;
HXDLIN(12195)						goto _hx_goto_33;
            					}
HXDLIN(12195)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(12195)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,has,return )

bool ZNPList_ZPP_Listener_obj::inlined_has( ::zpp_nape::callbacks::ZPP_Listener obj){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12199_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12208)		HX_VAR( bool,ret);
HXLINE(12209)		{
HXLINE(12210)			ret = false;
HXLINE(12211)			{
HXLINE(12212)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cx_ite) = this->head;
HXLINE(12213)				while(hx::IsNotNull( cx_ite )){
HXLINE(12216)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(12217)						ret = true;
HXLINE(12218)						goto _hx_goto_35;
            					}
HXLINE(12221)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(12225)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,inlined_has,return )

 ::zpp_nape::callbacks::ZPP_Listener ZNPList_ZPP_Listener_obj::front(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12230_front)
            	HX_STACK_THIS(this)
HXLINE(12230)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,front,return )

 ::zpp_nape::callbacks::ZPP_Listener ZNPList_ZPP_Listener_obj::back(){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12232_back)
            	HX_STACK_THIS(this)
HXLINE(12233)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret) = this->head;
HXLINE(12234)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,cur) = ret;
HXLINE(12235)		while(hx::IsNotNull( cur )){
HXLINE(12236)			ret = cur;
HXLINE(12237)			cur = cur->next;
            		}
HXLINE(12239)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Listener_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Listener ZNPList_ZPP_Listener_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12241_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(12250)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,ret) = this->head;
HXLINE(12251)		while(true){
HXLINE(12251)			bool _hx_tmp;
HXDLIN(12251)			ind = (ind - (int)1);
HXDLIN(12251)			if (((ind + (int)1) > (int)0)) {
HXLINE(12251)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(12251)				_hx_tmp = false;
            			}
HXDLIN(12251)			if (!(_hx_tmp)) {
HXLINE(12251)				goto _hx_goto_40;
            			}
HXDLIN(12251)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(12252)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,iterator_at,return )

 ::zpp_nape::callbacks::ZPP_Listener ZNPList_ZPP_Listener_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_6e9f7b32836346ff_12254_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(12263)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Listener,it) = this->iterator_at(ind);
HXLINE(12264)		if (hx::IsNotNull( it )) {
HXLINE(12264)			return it->elt;
            		}
            		else {
HXLINE(12264)			return null();
            		}
HXDLIN(12264)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Listener_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Listener_obj > ZNPList_ZPP_Listener_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Listener_obj > __this = new ZNPList_ZPP_Listener_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Listener_obj > ZNPList_ZPP_Listener_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Listener_obj *__this = (ZNPList_ZPP_Listener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Listener_obj), true, "zpp_nape.util.ZNPList_ZPP_Listener"));
	*(void **)__this = ZNPList_ZPP_Listener_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Listener_obj::ZNPList_ZPP_Listener_obj()
{
}

void ZNPList_ZPP_Listener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Listener);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Listener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Listener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Listener_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Listener >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Listener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Listener_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_Listener*/ ,(int)offsetof(ZNPList_ZPP_Listener_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Listener_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Listener_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Listener_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Listener_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Listener_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_Listener_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_Listener_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_Listener_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_Listener_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_Listener_obj::__mClass;

void ZNPList_ZPP_Listener_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_Listener_obj;
	ZNPList_ZPP_Listener_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_Listener","\xa9","\x00","\x2d","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_Listener_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Listener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Listener_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_Listener_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Listener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Listener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
