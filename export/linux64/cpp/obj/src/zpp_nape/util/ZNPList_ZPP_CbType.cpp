// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_175_new,"zpp_nape.util.ZNPList_ZPP_CbType","new",0x5278f9e0,"zpp_nape.util.ZNPList_ZPP_CbType.new","zpp_nape/util/Lists.hx",175,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_181_begin,"zpp_nape.util.ZNPList_ZPP_CbType","begin",0xb53873a9,"zpp_nape.util.ZNPList_ZPP_CbType.begin","zpp_nape/util/Lists.hx",181,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_188_setbegin,"zpp_nape.util.ZNPList_ZPP_CbType","setbegin",0xc29149c7,"zpp_nape.util.ZNPList_ZPP_CbType.setbegin","zpp_nape/util/Lists.hx",188,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_194_add,"zpp_nape.util.ZNPList_ZPP_CbType","add",0x526f1ba1,"zpp_nape.util.ZNPList_ZPP_CbType.add","zpp_nape/util/Lists.hx",194,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_198_inlined_add,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_add",0xa3d8f60d,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_add","zpp_nape/util/Lists.hx",198,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_244_addAll,"zpp_nape.util.ZNPList_ZPP_CbType","addAll",0xe050d000,"zpp_nape.util.ZNPList_ZPP_CbType.addAll","zpp_nape/util/Lists.hx",244,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_254_insert,"zpp_nape.util.ZNPList_ZPP_CbType","insert",0xdf3309b9,"zpp_nape.util.ZNPList_ZPP_CbType.insert","zpp_nape/util/Lists.hx",254,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_258_inlined_insert,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_insert",0xf5507acd,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_insert","zpp_nape/util/Lists.hx",258,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_302_pop,"zpp_nape.util.ZNPList_ZPP_CbType","pop",0x527a8711,"zpp_nape.util.ZNPList_ZPP_CbType.pop","zpp_nape/util/Lists.hx",302,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_306_inlined_pop,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_pop",0xa3e4617d,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_pop","zpp_nape/util/Lists.hx",306,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_340_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CbType","pop_unsafe",0x8fe782d4,"zpp_nape.util.ZNPList_ZPP_CbType.pop_unsafe","zpp_nape/util/Lists.hx",340,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_344_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_pop_unsafe",0x44150de8,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_pop_unsafe","zpp_nape/util/Lists.hx",344,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_366_remove,"zpp_nape.util.ZNPList_ZPP_CbType","remove",0x45de62c4,"zpp_nape.util.ZNPList_ZPP_CbType.remove","zpp_nape/util/Lists.hx",366,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_368_try_remove,"zpp_nape.util.ZNPList_ZPP_CbType","try_remove",0xa711b888,"zpp_nape.util.ZNPList_ZPP_CbType.try_remove","zpp_nape/util/Lists.hx",368,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_402_inlined_remove,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_remove",0x5bfbd3d8,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_remove","zpp_nape/util/Lists.hx",402,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_406_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_try_remove",0x5b3f439c,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_try_remove","zpp_nape/util/Lists.hx",406,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_430_erase,"zpp_nape.util.ZNPList_ZPP_CbType","erase",0x77ff7266,"zpp_nape.util.ZNPList_ZPP_CbType.erase","zpp_nape/util/Lists.hx",430,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_434_inlined_erase,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_erase",0x5b65bfd2,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_erase","zpp_nape/util/Lists.hx",434,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_480_splice,"zpp_nape.util.ZNPList_ZPP_CbType","splice",0x00f44bfc,"zpp_nape.util.ZNPList_ZPP_CbType.splice","zpp_nape/util/Lists.hx",480,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_485_clear,"zpp_nape.util.ZNPList_ZPP_CbType","clear",0x4d3dfb0d,"zpp_nape.util.ZNPList_ZPP_CbType.clear","zpp_nape/util/Lists.hx",485,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_490_inlined_clear,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_clear",0x30a44879,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_clear","zpp_nape/util/Lists.hx",490,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_495_reverse,"zpp_nape.util.ZNPList_ZPP_CbType","reverse",0x04b422a2,"zpp_nape.util.ZNPList_ZPP_CbType.reverse","zpp_nape/util/Lists.hx",495,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_511_empty,"zpp_nape.util.ZNPList_ZPP_CbType","empty",0x74bcc40d,"zpp_nape.util.ZNPList_ZPP_CbType.empty","zpp_nape/util/Lists.hx",511,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_516_size,"zpp_nape.util.ZNPList_ZPP_CbType","size",0xdab2c741,"zpp_nape.util.ZNPList_ZPP_CbType.size","zpp_nape/util/Lists.hx",516,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_519_has,"zpp_nape.util.ZNPList_ZPP_CbType","has",0x527468da,"zpp_nape.util.ZNPList_ZPP_CbType.has","zpp_nape/util/Lists.hx",519,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_523_inlined_has,"zpp_nape.util.ZNPList_ZPP_CbType","inlined_has",0xa3de4346,"zpp_nape.util.ZNPList_ZPP_CbType.inlined_has","zpp_nape/util/Lists.hx",523,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_554_front,"zpp_nape.util.ZNPList_ZPP_CbType","front",0x0b70a229,"zpp_nape.util.ZNPList_ZPP_CbType.front","zpp_nape/util/Lists.hx",554,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_556_back,"zpp_nape.util.ZNPList_ZPP_CbType","back",0xcf7000a7,"zpp_nape.util.ZNPList_ZPP_CbType.back","zpp_nape/util/Lists.hx",556,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_565_iterator_at,"zpp_nape.util.ZNPList_ZPP_CbType","iterator_at",0xa87d3364,"zpp_nape.util.ZNPList_ZPP_CbType.iterator_at","zpp_nape/util/Lists.hx",565,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_cc26af39ed261f7c_578_at,"zpp_nape.util.ZNPList_ZPP_CbType","at",0x7450db73,"zpp_nape.util.ZNPList_ZPP_CbType.at","zpp_nape/util/Lists.hx",578,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_CbType_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_175_new)
            	HX_STACK_THIS(this)
HXLINE( 185)		this->length = (int)0;
HXLINE( 184)		this->pushmod = false;
HXLINE( 183)		this->modified = false;
HXLINE( 176)		this->head = null();
            	}

Dynamic ZNPList_ZPP_CbType_obj::__CreateEmpty() { return new ZNPList_ZPP_CbType_obj; }

void *ZNPList_ZPP_CbType_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_CbType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_CbType_obj > _hx_result = new ZNPList_ZPP_CbType_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_CbType_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a816732;
}

 ::zpp_nape::util::ZNPNode_ZPP_CbType ZNPList_ZPP_CbType_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_181_begin)
            	HX_STACK_THIS(this)
HXLINE( 181)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,begin,return )

void ZNPList_ZPP_CbType_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_CbType i){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_188_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 189)		this->head = i;
HXLINE( 190)		this->modified = true;
HXLINE( 191)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,setbegin,(void))

 ::zpp_nape::callbacks::ZPP_CbType ZNPList_ZPP_CbType_obj::add( ::zpp_nape::callbacks::ZPP_CbType o){
            	HX_GC_STACKFRAME(&_hx_pos_cc26af39ed261f7c_194_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE( 194)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 194)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 194)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 194)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 194)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 194)			ret->next = null();
            		}
HXDLIN( 194)		ret->elt = o;
HXDLIN( 194)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXDLIN( 194)		temp->next = this->head;
HXDLIN( 194)		this->head = temp;
HXDLIN( 194)		this->modified = true;
HXDLIN( 194)		this->length++;
HXDLIN( 194)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,add,return )

 ::zpp_nape::callbacks::ZPP_CbType ZNPList_ZPP_CbType_obj::inlined_add( ::zpp_nape::callbacks::ZPP_CbType o){
            	HX_GC_STACKFRAME(&_hx_pos_cc26af39ed261f7c_198_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE( 208)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXLINE( 210)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 211)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 217)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXLINE( 218)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXLINE( 219)			ret->next = null();
            		}
HXLINE( 226)		ret->elt = o;
HXLINE( 207)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXLINE( 229)		temp->next = this->head;
HXLINE( 230)		this->head = temp;
HXLINE( 231)		this->modified = true;
HXLINE( 232)		this->length++;
HXLINE( 233)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,inlined_add,return )

void ZNPList_ZPP_CbType_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_CbType x){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_244_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 245)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = x->head;
HXLINE( 246)		while(hx::IsNotNull( cx_ite )){
HXLINE( 248)			this->add(cx_ite->elt);
HXLINE( 249)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_CbType ZNPList_ZPP_CbType_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_CbType cur, ::zpp_nape::callbacks::ZPP_CbType o){
            	HX_GC_STACKFRAME(&_hx_pos_cc26af39ed261f7c_254_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE( 254)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 254)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 254)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 254)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 254)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 254)			ret->next = null();
            		}
HXDLIN( 254)		ret->elt = o;
HXDLIN( 254)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXDLIN( 254)		if (hx::IsNull( cur )) {
HXLINE( 254)			temp->next = this->head;
HXDLIN( 254)			this->head = temp;
            		}
            		else {
HXLINE( 254)			temp->next = cur->next;
HXDLIN( 254)			cur->next = temp;
            		}
HXDLIN( 254)		this->pushmod = (this->modified = true);
HXDLIN( 254)		this->length++;
HXDLIN( 254)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbType_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbType ZNPList_ZPP_CbType_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_CbType cur, ::zpp_nape::callbacks::ZPP_CbType o){
            	HX_GC_STACKFRAME(&_hx_pos_cc26af39ed261f7c_258_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE( 268)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXLINE( 270)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 271)			ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 277)			ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXLINE( 278)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXLINE( 279)			ret->next = null();
            		}
HXLINE( 286)		ret->elt = o;
HXLINE( 267)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXLINE( 289)		if (hx::IsNull( cur )) {
HXLINE( 290)			temp->next = this->head;
HXLINE( 291)			this->head = temp;
            		}
            		else {
HXLINE( 294)			temp->next = cur->next;
HXLINE( 295)			cur->next = temp;
            		}
HXLINE( 297)		this->pushmod = (this->modified = true);
HXLINE( 298)		this->length++;
HXLINE( 299)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbType_obj,inlined_insert,return )

void ZNPList_ZPP_CbType_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_302_pop)
            	HX_STACK_THIS(this)
HXLINE( 302)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret) = this->head;
HXDLIN( 302)		this->head = ret->next;
HXDLIN( 302)		{
HXLINE( 302)			ret->elt = null();
HXDLIN( 302)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 302)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret;
            		}
HXDLIN( 302)		if (hx::IsNull( this->head )) {
HXLINE( 302)			this->pushmod = true;
            		}
HXDLIN( 302)		this->modified = true;
HXDLIN( 302)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,pop,(void))

void ZNPList_ZPP_CbType_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_306_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE( 315)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret) = this->head;
HXLINE( 316)		this->head = ret->next;
HXLINE( 318)		{
HXLINE( 328)			ret->elt = null();
HXLINE( 329)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXLINE( 330)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret;
            		}
HXLINE( 335)		if (hx::IsNull( this->head )) {
HXLINE( 335)			this->pushmod = true;
            		}
HXLINE( 336)		this->modified = true;
HXLINE( 337)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,inlined_pop,(void))

 ::zpp_nape::callbacks::ZPP_CbType ZNPList_ZPP_CbType_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_340_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE( 340)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,ret) = this->head->elt;
HXDLIN( 340)		this->pop();
HXDLIN( 340)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,pop_unsafe,return )

 ::zpp_nape::callbacks::ZPP_CbType ZNPList_ZPP_CbType_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_344_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE( 353)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,ret) = this->head->elt;
HXLINE( 354)		this->pop();
HXLINE( 355)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_CbType_obj::remove( ::zpp_nape::callbacks::ZPP_CbType obj){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_366_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 366)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre) = null();
HXDLIN( 366)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cur) = this->head;
HXDLIN( 366)		while(hx::IsNotNull( cur )){
HXLINE( 366)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 366)				{
HXLINE( 366)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,old);
HXDLIN( 366)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 366)					if (hx::IsNull( pre )) {
HXLINE( 366)						old = this->head;
HXDLIN( 366)						ret = old->next;
HXDLIN( 366)						this->head = ret;
HXDLIN( 366)						if (hx::IsNull( this->head )) {
HXLINE( 366)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 366)						old = pre->next;
HXDLIN( 366)						ret = old->next;
HXDLIN( 366)						pre->next = ret;
HXDLIN( 366)						if (hx::IsNull( ret )) {
HXLINE( 366)							this->pushmod = true;
            						}
            					}
HXDLIN( 366)					{
HXLINE( 366)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,o) = old;
HXDLIN( 366)						o->elt = null();
HXDLIN( 366)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 366)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = o;
            					}
HXDLIN( 366)					this->modified = true;
HXDLIN( 366)					this->length--;
HXDLIN( 366)					this->pushmod = true;
            				}
HXDLIN( 366)				goto _hx_goto_13;
            			}
HXDLIN( 366)			pre = cur;
HXDLIN( 366)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,remove,(void))

bool ZNPList_ZPP_CbType_obj::try_remove( ::zpp_nape::callbacks::ZPP_CbType obj){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_368_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 377)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre) = null();
HXLINE( 378)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cur) = this->head;
HXLINE( 379)		HX_VARI( bool,ret) = false;
HXLINE( 380)		while(hx::IsNotNull( cur )){
HXLINE( 381)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 382)				this->erase(pre);
HXLINE( 383)				ret = true;
HXLINE( 384)				goto _hx_goto_15;
            			}
HXLINE( 386)			pre = cur;
HXLINE( 387)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE( 389)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,try_remove,return )

void ZNPList_ZPP_CbType_obj::inlined_remove( ::zpp_nape::callbacks::ZPP_CbType obj){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_402_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 402)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre) = null();
HXDLIN( 402)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cur) = this->head;
HXDLIN( 402)		while(hx::IsNotNull( cur )){
HXLINE( 402)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 402)				{
HXLINE( 402)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,old);
HXDLIN( 402)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 402)					if (hx::IsNull( pre )) {
HXLINE( 402)						old = this->head;
HXDLIN( 402)						ret = old->next;
HXDLIN( 402)						this->head = ret;
HXDLIN( 402)						if (hx::IsNull( this->head )) {
HXLINE( 402)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 402)						old = pre->next;
HXDLIN( 402)						ret = old->next;
HXDLIN( 402)						pre->next = ret;
HXDLIN( 402)						if (hx::IsNull( ret )) {
HXLINE( 402)							this->pushmod = true;
            						}
            					}
HXDLIN( 402)					{
HXLINE( 402)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,o) = old;
HXDLIN( 402)						o->elt = null();
HXDLIN( 402)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 402)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = o;
            					}
HXDLIN( 402)					this->modified = true;
HXDLIN( 402)					this->length--;
HXDLIN( 402)					this->pushmod = true;
            				}
HXDLIN( 402)				goto _hx_goto_17;
            			}
HXDLIN( 402)			pre = cur;
HXDLIN( 402)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,inlined_remove,(void))

bool ZNPList_ZPP_CbType_obj::inlined_try_remove( ::zpp_nape::callbacks::ZPP_CbType obj){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_406_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 415)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre) = null();
HXLINE( 416)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cur) = this->head;
HXLINE( 417)		HX_VARI( bool,ret) = false;
HXLINE( 418)		while(hx::IsNotNull( cur )){
HXLINE( 419)			if (hx::IsEq( cur->elt,obj )) {
HXLINE( 420)				{
HXLINE( 420)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,old);
HXDLIN( 420)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret1,"ret");
HXDLIN( 420)					if (hx::IsNull( pre )) {
HXLINE( 420)						old = this->head;
HXDLIN( 420)						ret1 = old->next;
HXDLIN( 420)						this->head = ret1;
HXDLIN( 420)						if (hx::IsNull( this->head )) {
HXLINE( 420)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 420)						old = pre->next;
HXDLIN( 420)						ret1 = old->next;
HXDLIN( 420)						pre->next = ret1;
HXDLIN( 420)						if (hx::IsNull( ret1 )) {
HXLINE( 420)							this->pushmod = true;
            						}
            					}
HXDLIN( 420)					{
HXLINE( 420)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,o) = old;
HXDLIN( 420)						o->elt = null();
HXDLIN( 420)						o->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 420)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = o;
            					}
HXDLIN( 420)					this->modified = true;
HXDLIN( 420)					this->length--;
HXDLIN( 420)					this->pushmod = true;
            				}
HXLINE( 421)				ret = true;
HXLINE( 422)				goto _hx_goto_19;
            			}
HXLINE( 424)			pre = cur;
HXLINE( 425)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE( 427)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbType ZNPList_ZPP_CbType_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_CbType pre){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_430_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE( 430)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,old);
HXDLIN( 430)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 430)		if (hx::IsNull( pre )) {
HXLINE( 430)			old = this->head;
HXDLIN( 430)			ret = old->next;
HXDLIN( 430)			this->head = ret;
HXDLIN( 430)			if (hx::IsNull( this->head )) {
HXLINE( 430)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 430)			old = pre->next;
HXDLIN( 430)			ret = old->next;
HXDLIN( 430)			pre->next = ret;
HXDLIN( 430)			if (hx::IsNull( ret )) {
HXLINE( 430)				this->pushmod = true;
            			}
            		}
HXDLIN( 430)		{
HXLINE( 430)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,o) = old;
HXDLIN( 430)			o->elt = null();
HXDLIN( 430)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 430)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = o;
            		}
HXDLIN( 430)		this->modified = true;
HXDLIN( 430)		this->length--;
HXDLIN( 430)		this->pushmod = true;
HXDLIN( 430)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbType ZNPList_ZPP_CbType_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_CbType pre){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_434_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE( 443)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,old);
HXLINE( 444)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXLINE( 445)		if (hx::IsNull( pre )) {
HXLINE( 446)			old = this->head;
HXLINE( 447)			ret = old->next;
HXLINE( 448)			this->head = ret;
HXLINE( 449)			if (hx::IsNull( this->head )) {
HXLINE( 449)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 452)			old = pre->next;
HXLINE( 453)			ret = old->next;
HXLINE( 454)			pre->next = ret;
HXLINE( 455)			if (hx::IsNull( ret )) {
HXLINE( 455)				this->pushmod = true;
            			}
            		}
HXLINE( 458)		{
HXLINE( 459)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,o) = old;
HXLINE( 468)			o->elt = null();
HXLINE( 469)			o->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXLINE( 470)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = o;
            		}
HXLINE( 475)		this->modified = true;
HXLINE( 476)		this->length--;
HXLINE( 477)		this->pushmod = true;
HXLINE( 478)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbType ZNPList_ZPP_CbType_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_CbType pre,int n){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_480_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE( 481)		while(true){
HXLINE( 481)			bool _hx_tmp;
HXDLIN( 481)			n = (n - (int)1);
HXDLIN( 481)			if (((n + (int)1) > (int)0)) {
HXLINE( 481)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE( 481)				_hx_tmp = false;
            			}
HXDLIN( 481)			if (!(_hx_tmp)) {
HXLINE( 481)				goto _hx_goto_23;
            			}
HXDLIN( 481)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE( 482)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_CbType_obj,splice,return )

void ZNPList_ZPP_CbType_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_485_clear)
            	HX_STACK_THIS(this)
HXLINE( 485)		while(hx::IsNotNull( this->head )){
HXLINE( 485)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret) = this->head;
HXDLIN( 485)			this->head = ret->next;
HXDLIN( 485)			{
HXLINE( 485)				ret->elt = null();
HXDLIN( 485)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 485)				::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret;
            			}
HXDLIN( 485)			if (hx::IsNull( this->head )) {
HXLINE( 485)				this->pushmod = true;
            			}
HXDLIN( 485)			this->modified = true;
HXDLIN( 485)			this->length--;
            		}
HXDLIN( 485)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,clear,(void))

void ZNPList_ZPP_CbType_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_490_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE( 491)		while(hx::IsNotNull( this->head )){
HXLINE( 491)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret) = this->head;
HXDLIN( 491)			this->head = ret->next;
HXDLIN( 491)			{
HXLINE( 491)				ret->elt = null();
HXDLIN( 491)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 491)				::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret;
            			}
HXDLIN( 491)			if (hx::IsNull( this->head )) {
HXLINE( 491)				this->pushmod = true;
            			}
HXDLIN( 491)			this->modified = true;
HXDLIN( 491)			this->length--;
            		}
HXLINE( 492)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,inlined_clear,(void))

void ZNPList_ZPP_CbType_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_495_reverse)
            	HX_STACK_THIS(this)
HXLINE( 496)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cur) = this->head;
HXLINE( 497)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre) = null();
HXLINE( 498)		while(hx::IsNotNull( cur )){
HXLINE( 499)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,nx) = cur->next;
HXLINE( 500)			cur->next = pre;
HXLINE( 501)			this->head = cur;
HXLINE( 502)			pre = cur;
HXLINE( 503)			cur = nx;
            		}
HXLINE( 505)		this->modified = true;
HXLINE( 506)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,reverse,(void))

bool ZNPList_ZPP_CbType_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_511_empty)
            	HX_STACK_THIS(this)
HXLINE( 511)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,empty,return )

int ZNPList_ZPP_CbType_obj::size(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_516_size)
            	HX_STACK_THIS(this)
HXLINE( 516)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,size,return )

bool ZNPList_ZPP_CbType_obj::has( ::zpp_nape::callbacks::ZPP_CbType obj){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_519_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 519)		HX_VAR( bool,ret);
HXDLIN( 519)		{
HXLINE( 519)			ret = false;
HXDLIN( 519)			{
HXLINE( 519)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = this->head;
HXDLIN( 519)				while(hx::IsNotNull( cx_ite )){
HXLINE( 519)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE( 519)						ret = true;
HXDLIN( 519)						goto _hx_goto_33;
            					}
HXDLIN( 519)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN( 519)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,has,return )

bool ZNPList_ZPP_CbType_obj::inlined_has( ::zpp_nape::callbacks::ZPP_CbType obj){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_523_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 532)		HX_VAR( bool,ret);
HXLINE( 533)		{
HXLINE( 534)			ret = false;
HXLINE( 535)			{
HXLINE( 536)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = this->head;
HXLINE( 537)				while(hx::IsNotNull( cx_ite )){
HXLINE( 540)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE( 541)						ret = true;
HXLINE( 542)						goto _hx_goto_35;
            					}
HXLINE( 545)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE( 549)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,inlined_has,return )

 ::zpp_nape::callbacks::ZPP_CbType ZNPList_ZPP_CbType_obj::front(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_554_front)
            	HX_STACK_THIS(this)
HXLINE( 554)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,front,return )

 ::zpp_nape::callbacks::ZPP_CbType ZNPList_ZPP_CbType_obj::back(){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_556_back)
            	HX_STACK_THIS(this)
HXLINE( 557)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret) = this->head;
HXLINE( 558)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cur) = ret;
HXLINE( 559)		while(hx::IsNotNull( cur )){
HXLINE( 560)			ret = cur;
HXLINE( 561)			cur = cur->next;
            		}
HXLINE( 563)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_CbType_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_CbType ZNPList_ZPP_CbType_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_565_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE( 574)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret) = this->head;
HXLINE( 575)		while(true){
HXLINE( 575)			bool _hx_tmp;
HXDLIN( 575)			ind = (ind - (int)1);
HXDLIN( 575)			if (((ind + (int)1) > (int)0)) {
HXLINE( 575)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE( 575)				_hx_tmp = false;
            			}
HXDLIN( 575)			if (!(_hx_tmp)) {
HXLINE( 575)				goto _hx_goto_40;
            			}
HXDLIN( 575)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE( 576)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,iterator_at,return )

 ::zpp_nape::callbacks::ZPP_CbType ZNPList_ZPP_CbType_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_cc26af39ed261f7c_578_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE( 587)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,it) = this->iterator_at(ind);
HXLINE( 588)		if (hx::IsNotNull( it )) {
HXLINE( 588)			return it->elt;
            		}
            		else {
HXLINE( 588)			return null();
            		}
HXDLIN( 588)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_CbType_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_CbType_obj > ZNPList_ZPP_CbType_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_CbType_obj > __this = new ZNPList_ZPP_CbType_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_CbType_obj > ZNPList_ZPP_CbType_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_CbType_obj *__this = (ZNPList_ZPP_CbType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_CbType_obj), true, "zpp_nape.util.ZNPList_ZPP_CbType"));
	*(void **)__this = ZNPList_ZPP_CbType_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_CbType_obj::ZNPList_ZPP_CbType_obj()
{
}

void ZNPList_ZPP_CbType_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_CbType);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_CbType_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_CbType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_CbType_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_CbType >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_CbType_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_CbType_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_CbType*/ ,(int)offsetof(ZNPList_ZPP_CbType_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CbType_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_CbType_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_CbType_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_CbType_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_CbType_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_CbType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_CbType_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_CbType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_CbType_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_CbType_obj::__mClass;

void ZNPList_ZPP_CbType_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_CbType_obj;
	ZNPList_ZPP_CbType_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_CbType","\xee","\xc9","\xc6","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_CbType_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_CbType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_CbType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_CbType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_CbType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_CbType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
