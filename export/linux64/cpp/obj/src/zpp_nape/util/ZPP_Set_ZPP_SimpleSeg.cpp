// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleSeg
#include <zpp_nape/geom/ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleSeg
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleSeg.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4620_new,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","new",0x4ea2ae23,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.new","zpp_nape/util/RBTree.hx",4620,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4647_free,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","free",0x7a75c989,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.free","zpp_nape/util/RBTree.hx",4647,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4654_alloc,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","alloc",0xc7a7b8f8,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.alloc","zpp_nape/util/RBTree.hx",4654,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4663_verify,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","verify",0x4cbd6196,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.verify","zpp_nape/util/RBTree.hx",4663,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4729_empty,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","empty",0x15ee4f10,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.empty","zpp_nape/util/RBTree.hx",4729,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4732_singular,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","singular",0x446e0834,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.singular","zpp_nape/util/RBTree.hx",4732,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4734_size,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","size",0x8306cd9e,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.size","zpp_nape/util/RBTree.hx",4734,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4765_has,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","has",0x4e9e1d1d,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.has","zpp_nape/util/RBTree.hx",4765,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4767_find,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","find",0x7a6efd16,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.find","zpp_nape/util/RBTree.hx",4767,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4776_has_weak,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","has_weak",0xe878b21a,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.has_weak","zpp_nape/util/RBTree.hx",4776,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4778_find_weak,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","find_weak",0x0efc4b81,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.find_weak","zpp_nape/util/RBTree.hx",4778,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4788_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","lower_bound",0xf687c103,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.lower_bound","zpp_nape/util/RBTree.hx",4788,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4824_first,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","first",0xa6b18cb3,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.first","zpp_nape/util/RBTree.hx",4824,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4837_pop_front,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","pop_front",0xfb82d23e,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.pop_front","zpp_nape/util/RBTree.hx",4837,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4862_remove,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","remove",0xb0067a61,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.remove","zpp_nape/util/RBTree.hx",4862,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4864_successor_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","successor_node",0xb0daf198,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.successor_node","zpp_nape/util/RBTree.hx",4864,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4887_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","predecessor_node",0x7f42cad5,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.predecessor_node","zpp_nape/util/RBTree.hx",4887,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4910_successor,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","successor",0xb5a1cfa9,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.successor","zpp_nape/util/RBTree.hx",4910,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4922_predecessor,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","predecessor",0x66627f8c,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.predecessor","zpp_nape/util/RBTree.hx",4922,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4934_remove_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","remove_node",0xc8f86be0,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.remove_node","zpp_nape/util/RBTree.hx",4934,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5055_clear,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","clear",0xee6f8610,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.clear","zpp_nape/util/RBTree.hx",5055,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5059_clear_with,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","clear_with",0x994a11d5,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.clear_with","zpp_nape/util/RBTree.hx",5059,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5067_clear_node,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","clear_node",0x935ba5d1,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.clear_node","zpp_nape/util/RBTree.hx",5067,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5102___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","__fix_neg_red",0x1000df5b,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.__fix_neg_red","zpp_nape/util/RBTree.hx",5102,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5170___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","__fix_dbl_red",0x1e190d39,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.__fix_dbl_red","zpp_nape/util/RBTree.hx",5170,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5258_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","try_insert_bool",0x1332882f,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.try_insert_bool","zpp_nape/util/RBTree.hx",5258,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5350_try_insert,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","try_insert",0x7bcf099a,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.try_insert","zpp_nape/util/RBTree.hx",5350,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_5442_insert,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","insert",0x495b2156,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.insert","zpp_nape/util/RBTree.hx",5442,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_92d2049f0f8a02fa_4621_boot,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","boot",0x77ceb10f,"zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.boot","zpp_nape/util/RBTree.hx",4621,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_SimpleSeg_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4620_new)
            	HX_STACK_THIS(this)
HXLINE(4661)		this->colour = (int)0;
HXLINE(4660)		this->parent = null();
HXLINE(4659)		this->next = null();
HXLINE(4658)		this->prev = null();
HXLINE(4657)		this->data = null();
HXLINE(4656)		this->swapped = null();
HXLINE(4655)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_SimpleSeg_obj::__CreateEmpty() { return new ZPP_Set_ZPP_SimpleSeg_obj; }

void *ZPP_Set_ZPP_SimpleSeg_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_SimpleSeg_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_SimpleSeg_obj > _hx_result = new ZPP_Set_ZPP_SimpleSeg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_SimpleSeg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f4265ed;
}

void ZPP_Set_ZPP_SimpleSeg_obj::free(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4647_free)
            	HX_STACK_THIS(this)
HXLINE(4648)		this->data = null();
HXLINE(4649)		this->lt = null();
HXLINE(4650)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,free,(void))

void ZPP_Set_ZPP_SimpleSeg_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4654_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,alloc,(void))

bool ZPP_Set_ZPP_SimpleSeg_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4663_verify)
            	HX_STACK_THIS(this)
HXLINE(4673)		if (!(this->empty())) {
HXLINE(4674)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,set_ite) = this->parent;
HXLINE(4675)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(4675)				set_ite = set_ite->prev;
            			}
HXLINE(4676)			while(hx::IsNotNull( set_ite )){
HXLINE(4677)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,i) = set_ite->data;
HXLINE(4678)				{
HXLINE(4679)					HX_VARI( bool,prei) = true;
HXLINE(4689)					if (!(this->empty())) {
HXLINE(4690)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,set_ite1,"set_ite") = this->parent;
HXLINE(4691)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE(4691)							set_ite1 = set_ite1->prev;
            						}
HXLINE(4692)						while(hx::IsNotNull( set_ite1 )){
HXLINE(4693)							HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,j) = set_ite1->data;
HXLINE(4695)							if (!(prei)) {
HXLINE(4696)								bool _hx_tmp;
HXDLIN(4696)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE(4696)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE(4696)									_hx_tmp = false;
            								}
HXDLIN(4696)								if (_hx_tmp) {
HXLINE(4696)									return false;
            								}
            							}
            							else {
HXLINE(4698)								if (hx::IsEq( i,j )) {
HXLINE(4698)									prei = false;
            								}
            								else {
HXLINE(4700)									bool _hx_tmp1;
HXDLIN(4700)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE(4700)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE(4700)										_hx_tmp1 = false;
            									}
HXDLIN(4700)									if (_hx_tmp1) {
HXLINE(4700)										return false;
            									}
            								}
            							}
HXLINE(4703)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE(4704)								set_ite1 = set_ite1->next;
HXLINE(4705)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE(4705)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE(4708)								while(true){
HXLINE(4708)									bool _hx_tmp2;
HXDLIN(4708)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE(4708)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE(4708)										_hx_tmp2 = false;
            									}
HXDLIN(4708)									if (!(_hx_tmp2)) {
HXLINE(4708)										goto _hx_goto_8;
            									}
HXDLIN(4708)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE(4709)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE(4715)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(4716)					set_ite = set_ite->next;
HXLINE(4717)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(4717)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(4720)					while(true){
HXLINE(4720)						bool _hx_tmp3;
HXDLIN(4720)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(4720)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(4720)							_hx_tmp3 = false;
            						}
HXDLIN(4720)						if (!(_hx_tmp3)) {
HXLINE(4720)							goto _hx_goto_10;
            						}
HXDLIN(4720)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE(4721)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(4726)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,verify,return )

bool ZPP_Set_ZPP_SimpleSeg_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4729_empty)
            	HX_STACK_THIS(this)
HXLINE(4729)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,empty,return )

bool ZPP_Set_ZPP_SimpleSeg_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4732_singular)
            	HX_STACK_THIS(this)
HXLINE(4732)		bool _hx_tmp;
HXDLIN(4732)		if (hx::IsNotNull( this->parent )) {
HXLINE(4732)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE(4732)			_hx_tmp = false;
            		}
HXDLIN(4732)		if (_hx_tmp) {
HXLINE(4732)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE(4732)			return false;
            		}
HXDLIN(4732)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,singular,return )

int ZPP_Set_ZPP_SimpleSeg_obj::size(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4734_size)
            	HX_STACK_THIS(this)
HXLINE(4735)		HX_VARI( int,ret) = (int)0;
HXLINE(4745)		if (!(this->empty())) {
HXLINE(4746)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,set_ite) = this->parent;
HXLINE(4747)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(4747)				set_ite = set_ite->prev;
            			}
HXLINE(4748)			while(hx::IsNotNull( set_ite )){
HXLINE(4750)				ret = (ret + (int)1);
HXLINE(4751)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(4752)					set_ite = set_ite->next;
HXLINE(4753)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(4753)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(4756)					while(true){
HXLINE(4756)						bool _hx_tmp;
HXDLIN(4756)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(4756)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(4756)							_hx_tmp = false;
            						}
HXDLIN(4756)						if (!(_hx_tmp)) {
HXLINE(4756)							goto _hx_goto_17;
            						}
HXDLIN(4756)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE(4757)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(4762)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,size,return )

bool ZPP_Set_ZPP_SimpleSeg_obj::has( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4765_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4765)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::find( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4767_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4768)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = this->parent;
HXLINE(4769)		while(true){
HXLINE(4769)			bool _hx_tmp;
HXDLIN(4769)			if (hx::IsNotNull( cur )) {
HXLINE(4769)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE(4769)				_hx_tmp = false;
            			}
HXDLIN(4769)			if (!(_hx_tmp)) {
HXLINE(4769)				goto _hx_goto_20;
            			}
HXLINE(4770)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(4770)				cur = cur->prev;
            			}
            			else {
HXLINE(4771)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE(4773)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,find,return )

bool ZPP_Set_ZPP_SimpleSeg_obj::has_weak( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4776_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4776)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::find_weak( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4778_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4779)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = this->parent;
HXLINE(4780)		while(hx::IsNotNull( cur )){
HXLINE(4781)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(4781)				cur = cur->prev;
            			}
            			else {
HXLINE(4782)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(4782)					cur = cur->next;
            				}
            				else {
HXLINE(4783)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE(4785)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,find_weak,return )

 ::zpp_nape::geom::ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::lower_bound( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4788_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4789)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,ret) = null();
HXLINE(4799)		if (!(this->empty())) {
HXLINE(4800)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,set_ite) = this->parent;
HXLINE(4801)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(4801)				set_ite = set_ite->prev;
            			}
HXLINE(4802)			while(hx::IsNotNull( set_ite )){
HXLINE(4803)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,elt) = set_ite->data;
HXLINE(4805)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE(4806)					ret = elt;
HXLINE(4807)					goto _hx_goto_26;
            				}
HXLINE(4810)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(4811)					set_ite = set_ite->next;
HXLINE(4812)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(4812)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(4815)					while(true){
HXLINE(4815)						bool _hx_tmp;
HXDLIN(4815)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(4815)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(4815)							_hx_tmp = false;
            						}
HXDLIN(4815)						if (!(_hx_tmp)) {
HXLINE(4815)							goto _hx_goto_28;
            						}
HXDLIN(4815)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE(4816)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE(4788)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,lower_bound,return )

 ::zpp_nape::geom::ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::first(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4824_first)
            	HX_STACK_THIS(this)
HXLINE(4833)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = this->parent;
HXLINE(4834)		while(hx::IsNotNull( cur->prev )){
HXLINE(4834)			cur = cur->prev;
            		}
HXLINE(4835)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,first,return )

 ::zpp_nape::geom::ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4837_pop_front)
            	HX_STACK_THIS(this)
HXLINE(4846)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = this->parent;
HXLINE(4847)		while(hx::IsNotNull( cur->prev )){
HXLINE(4847)			cur = cur->prev;
            		}
HXLINE(4848)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,ret) = cur->data;
HXLINE(4849)		this->remove_node(cur);
HXLINE(4850)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,pop_front,return )

void ZPP_Set_ZPP_SimpleSeg_obj::remove( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4862_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4862)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg cur){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4864_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(4873)		if (hx::IsNotNull( cur->next )) {
HXLINE(4874)			cur = cur->next;
HXLINE(4875)			while(hx::IsNotNull( cur->prev )){
HXLINE(4875)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE(4878)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,pre) = cur;
HXLINE(4879)			cur = cur->parent;
HXLINE(4880)			while(true){
HXLINE(4880)				bool _hx_tmp;
HXDLIN(4880)				if (hx::IsNotNull( cur )) {
HXLINE(4880)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE(4880)					_hx_tmp = false;
            				}
HXDLIN(4880)				if (!(_hx_tmp)) {
HXLINE(4880)					goto _hx_goto_36;
            				}
HXLINE(4881)				pre = cur;
HXLINE(4882)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE(4885)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg cur){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4887_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(4896)		if (hx::IsNotNull( cur->prev )) {
HXLINE(4897)			cur = cur->prev;
HXLINE(4898)			while(hx::IsNotNull( cur->next )){
HXLINE(4898)				cur = cur->next;
            			}
            		}
            		else {
HXLINE(4901)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,pre) = cur;
HXLINE(4902)			cur = cur->parent;
HXLINE(4903)			while(true){
HXLINE(4903)				bool _hx_tmp;
HXDLIN(4903)				if (hx::IsNotNull( cur )) {
HXLINE(4903)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE(4903)					_hx_tmp = false;
            				}
HXDLIN(4903)				if (!(_hx_tmp)) {
HXLINE(4903)					goto _hx_goto_39;
            				}
HXLINE(4904)				pre = cur;
HXLINE(4905)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE(4908)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,predecessor_node,return )

 ::zpp_nape::geom::ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::successor( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4910_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4919)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,node) = this->successor_node(this->find(obj));
HXLINE(4920)		if (hx::IsNull( node )) {
HXLINE(4920)			return null();
            		}
            		else {
HXLINE(4920)			return node->data;
            		}
HXDLIN(4920)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,successor,return )

 ::zpp_nape::geom::ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::predecessor( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4922_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(4931)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,node) = this->predecessor_node(this->find(obj));
HXLINE(4932)		if (hx::IsNull( node )) {
HXLINE(4932)			return null();
            		}
            		else {
HXLINE(4932)			return node->data;
            		}
HXDLIN(4932)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,predecessor,return )

void ZPP_Set_ZPP_SimpleSeg_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg cur){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4934_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(4943)		bool _hx_tmp;
HXDLIN(4943)		if (hx::IsNotNull( cur->next )) {
HXLINE(4943)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE(4943)			_hx_tmp = false;
            		}
HXDLIN(4943)		if (_hx_tmp) {
HXLINE(4944)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,sm) = cur->next;
HXLINE(4945)			while(hx::IsNotNull( sm->prev )){
HXLINE(4945)				sm = sm->prev;
            			}
HXLINE(4946)			{
HXLINE(4947)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,t) = cur->data;
HXLINE(4948)				cur->data = sm->data;
HXLINE(4949)				sm->data = t;
            			}
HXLINE(4951)			if (hx::IsNotNull( this->swapped )) {
HXLINE(4951)				this->swapped(cur->data,sm->data);
            			}
HXLINE(4952)			cur = sm;
            		}
HXLINE(4962)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,child);
HXDLIN(4962)		if (hx::IsNull( cur->prev )) {
HXLINE(4962)			child = cur->next;
            		}
            		else {
HXLINE(4962)			child = cur->prev;
            		}
HXLINE(4963)		if ((cur->colour == (int)1)) {
HXLINE(4964)			bool _hx_tmp1;
HXDLIN(4964)			if (hx::IsNull( cur->prev )) {
HXLINE(4964)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE(4964)				_hx_tmp1 = true;
            			}
HXDLIN(4964)			if (_hx_tmp1) {
HXLINE(4964)				child->colour = (int)1;
            			}
            			else {
HXLINE(4965)				if (hx::IsNotNull( cur->parent )) {
HXLINE(4966)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,parent) = cur->parent;
HXLINE(4967)					while(true){
HXLINE(4968)						parent->colour++;
HXLINE(4969)						parent->prev->colour--;
HXLINE(4970)						parent->next->colour--;
HXLINE(4971)						{
HXLINE(4972)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,child1,"child") = parent->prev;
HXLINE(4973)							if ((child1->colour == (int)-1)) {
HXLINE(4974)								this->_hx___fix_neg_red(child1);
HXLINE(4975)								goto _hx_goto_44;
            							}
            							else {
HXLINE(4977)								if ((child1->colour == (int)0)) {
HXLINE(4979)									bool _hx_tmp2;
HXDLIN(4979)									if (hx::IsNotNull( child1->prev )) {
HXLINE(4979)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE(4979)										_hx_tmp2 = false;
            									}
HXDLIN(4979)									if (_hx_tmp2) {
HXLINE(4980)										this->_hx___fix_dbl_red(child1->prev);
HXLINE(4981)										goto _hx_goto_44;
            									}
HXLINE(4985)									bool _hx_tmp3;
HXDLIN(4985)									if (hx::IsNotNull( child1->next )) {
HXLINE(4985)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE(4985)										_hx_tmp3 = false;
            									}
HXDLIN(4985)									if (_hx_tmp3) {
HXLINE(4986)										this->_hx___fix_dbl_red(child1->next);
HXLINE(4987)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(4992)						{
HXLINE(4993)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,child2,"child") = parent->next;
HXLINE(4994)							if ((child2->colour == (int)-1)) {
HXLINE(4995)								this->_hx___fix_neg_red(child2);
HXLINE(4996)								goto _hx_goto_44;
            							}
            							else {
HXLINE(4998)								if ((child2->colour == (int)0)) {
HXLINE(5000)									bool _hx_tmp4;
HXDLIN(5000)									if (hx::IsNotNull( child2->prev )) {
HXLINE(5000)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE(5000)										_hx_tmp4 = false;
            									}
HXDLIN(5000)									if (_hx_tmp4) {
HXLINE(5001)										this->_hx___fix_dbl_red(child2->prev);
HXLINE(5002)										goto _hx_goto_44;
            									}
HXLINE(5006)									bool _hx_tmp5;
HXDLIN(5006)									if (hx::IsNotNull( child2->next )) {
HXLINE(5006)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE(5006)										_hx_tmp5 = false;
            									}
HXDLIN(5006)									if (_hx_tmp5) {
HXLINE(5007)										this->_hx___fix_dbl_red(child2->next);
HXLINE(5008)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(5013)						if ((parent->colour == (int)2)) {
HXLINE(5014)							if (hx::IsNull( parent->parent )) {
HXLINE(5015)								parent->colour = (int)1;
            							}
            							else {
HXLINE(5018)								parent = parent->parent;
HXLINE(5019)								continue;
            							}
            						}
HXLINE(5022)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE(5026)		{
HXLINE(5027)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,par) = cur->parent;
HXLINE(5028)			if (hx::IsNull( par )) {
HXLINE(5029)				this->parent = child;
            			}
            			else {
HXLINE(5031)				if (hx::IsEq( par->prev,cur )) {
HXLINE(5031)					par->prev = child;
            				}
            				else {
HXLINE(5032)					par->next = child;
            				}
            			}
HXLINE(5033)			if (hx::IsNotNull( child )) {
HXLINE(5033)				child->parent = par;
            			}
            		}
HXLINE(5035)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE(5036)		{
HXLINE(5037)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,o) = cur;
HXLINE(5046)			{
HXLINE(5046)				o->data = null();
HXDLIN(5046)				o->lt = null();
HXDLIN(5046)				o->swapped = null();
            			}
HXLINE(5047)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5048)			::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,remove_node,(void))

void ZPP_Set_ZPP_SimpleSeg_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5055_clear)
            	HX_STACK_THIS(this)
HXLINE(5055)		if (hx::IsNotNull( this->parent )) {
HXLINE(5055)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = this->parent;
HXDLIN(5055)			while(hx::IsNotNull( cur )){
HXLINE(5055)				if (hx::IsNotNull( cur->prev )) {
HXLINE(5055)					cur = cur->prev;
            				}
            				else {
HXLINE(5055)					if (hx::IsNotNull( cur->next )) {
HXLINE(5055)						cur = cur->next;
            					}
            					else {
HXLINE(5055)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,ret) = cur->parent;
HXDLIN(5055)						if (hx::IsNotNull( ret )) {
HXLINE(5055)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(5055)								ret->prev = null();
            							}
            							else {
HXLINE(5055)								ret->next = null();
            							}
HXDLIN(5055)							cur->parent = null();
            						}
HXDLIN(5055)						{
HXLINE(5055)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,o) = cur;
HXDLIN(5055)							{
HXLINE(5055)								o->data = null();
HXDLIN(5055)								o->lt = null();
HXDLIN(5055)								o->swapped = null();
            							}
HXDLIN(5055)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXDLIN(5055)							::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = o;
            						}
HXDLIN(5055)						cur = ret;
            					}
            				}
            			}
HXDLIN(5055)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_SimpleSeg_obj,clear,(void))

void ZPP_Set_ZPP_SimpleSeg_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5059_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(5059)		if (hx::IsNull( this->parent )) {
HXLINE(5059)			return;
            		}
            		else {
HXLINE(5061)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = this->parent;
HXLINE(5062)			while(hx::IsNotNull( cur )){
HXLINE(5062)				if (hx::IsNotNull( cur->prev )) {
HXLINE(5062)					cur = cur->prev;
            				}
            				else {
HXLINE(5062)					if (hx::IsNotNull( cur->next )) {
HXLINE(5062)						cur = cur->next;
            					}
            					else {
HXLINE(5062)						lambda(cur->data);
HXDLIN(5062)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,ret) = cur->parent;
HXDLIN(5062)						if (hx::IsNotNull( ret )) {
HXLINE(5062)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(5062)								ret->prev = null();
            							}
            							else {
HXLINE(5062)								ret->next = null();
            							}
HXDLIN(5062)							cur->parent = null();
            						}
HXDLIN(5062)						{
HXLINE(5062)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,o) = cur;
HXDLIN(5062)							{
HXLINE(5062)								o->data = null();
HXDLIN(5062)								o->lt = null();
HXDLIN(5062)								o->swapped = null();
            							}
HXDLIN(5062)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXDLIN(5062)							::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = o;
            						}
HXDLIN(5062)						cur = ret;
            					}
            				}
            			}
HXLINE(5063)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5067_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(5076)		lambda(node->data);
HXLINE(5077)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,ret) = node->parent;
HXLINE(5078)		if (hx::IsNotNull( ret )) {
HXLINE(5079)			if (hx::IsEq( node,ret->prev )) {
HXLINE(5079)				ret->prev = null();
            			}
            			else {
HXLINE(5080)				ret->next = null();
            			}
HXLINE(5081)			node->parent = null();
            		}
HXLINE(5083)		{
HXLINE(5093)			{
HXLINE(5093)				node->data = null();
HXDLIN(5093)				node->lt = null();
HXDLIN(5093)				node->swapped = null();
            			}
HXLINE(5094)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5095)			::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = node;
            		}
HXLINE(5100)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_SimpleSeg_obj,clear_node,return )

void ZPP_Set_ZPP_SimpleSeg_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg negred){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5102___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE(5103)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,parent) = negred->parent;
HXLINE(5104)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,child);
HXDLIN(5104)		if (hx::IsEq( parent->prev,negred )) {
HXLINE(5105)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,nl) = negred->prev;
HXLINE(5106)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,nr) = negred->next;
HXLINE(5107)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,trl) = nr->prev;
HXLINE(5108)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,trr) = nr->next;
HXLINE(5109)			nl->colour = (int)0;
HXLINE(5110)			negred->colour = (parent->colour = (int)1);
HXLINE(5111)			{
HXLINE(5112)				negred->next = trl;
HXLINE(5113)				if (hx::IsNotNull( trl )) {
HXLINE(5113)					trl->parent = negred;
            				}
            			}
HXLINE(5115)			{
HXLINE(5116)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,t) = parent->data;
HXLINE(5117)				parent->data = nr->data;
HXLINE(5118)				nr->data = t;
            			}
HXLINE(5120)			if (hx::IsNotNull( this->swapped )) {
HXLINE(5120)				this->swapped(parent->data,nr->data);
            			}
HXLINE(5121)			{
HXLINE(5122)				nr->prev = trr;
HXLINE(5123)				if (hx::IsNotNull( trr )) {
HXLINE(5123)					trr->parent = nr;
            				}
            			}
HXLINE(5125)			{
HXLINE(5126)				nr->next = parent->next;
HXLINE(5127)				if (hx::IsNotNull( parent->next )) {
HXLINE(5127)					parent->next->parent = nr;
            				}
            			}
HXLINE(5129)			{
HXLINE(5130)				parent->next = nr;
HXLINE(5131)				if (hx::IsNotNull( nr )) {
HXLINE(5131)					nr->parent = parent;
            				}
            			}
HXLINE(5104)			child = nl;
            		}
            		else {
HXLINE(5136)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,nl1,"nl") = negred->next;
HXLINE(5137)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,nr1,"nr") = negred->prev;
HXLINE(5138)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,trl1,"trl") = nr1->next;
HXLINE(5139)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,trr1,"trr") = nr1->prev;
HXLINE(5140)			nl1->colour = (int)0;
HXLINE(5141)			negred->colour = (parent->colour = (int)1);
HXLINE(5142)			{
HXLINE(5143)				negred->prev = trl1;
HXLINE(5144)				if (hx::IsNotNull( trl1 )) {
HXLINE(5144)					trl1->parent = negred;
            				}
            			}
HXLINE(5146)			{
HXLINE(5147)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleSeg,t1,"t") = parent->data;
HXLINE(5148)				parent->data = nr1->data;
HXLINE(5149)				nr1->data = t1;
            			}
HXLINE(5151)			if (hx::IsNotNull( this->swapped )) {
HXLINE(5151)				this->swapped(parent->data,nr1->data);
            			}
HXLINE(5152)			{
HXLINE(5153)				nr1->next = trr1;
HXLINE(5154)				if (hx::IsNotNull( trr1 )) {
HXLINE(5154)					trr1->parent = nr1;
            				}
            			}
HXLINE(5156)			{
HXLINE(5157)				nr1->prev = parent->prev;
HXLINE(5158)				if (hx::IsNotNull( parent->prev )) {
HXLINE(5158)					parent->prev->parent = nr1;
            				}
            			}
HXLINE(5160)			{
HXLINE(5161)				parent->prev = nr1;
HXLINE(5162)				if (hx::IsNotNull( nr1 )) {
HXLINE(5162)					nr1->parent = parent;
            				}
            			}
HXLINE(5104)			child = nl1;
            		}
HXLINE(5166)		bool _hx_tmp;
HXDLIN(5166)		if (hx::IsNotNull( child->prev )) {
HXLINE(5166)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE(5166)			_hx_tmp = false;
            		}
HXDLIN(5166)		if (_hx_tmp) {
HXLINE(5166)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE(5167)			bool _hx_tmp1;
HXDLIN(5167)			if (hx::IsNotNull( child->next )) {
HXLINE(5167)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE(5167)				_hx_tmp1 = false;
            			}
HXDLIN(5167)			if (_hx_tmp1) {
HXLINE(5167)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_SimpleSeg_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg x){
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5170___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(5170)		while(true){
HXLINE(5171)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,par) = x->parent;
HXLINE(5172)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,g) = par->parent;
HXLINE(5173)			if (hx::IsNull( g )) {
HXLINE(5174)				par->colour = (int)1;
HXLINE(5175)				goto _hx_goto_52;
            			}
HXLINE(5177)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,n1);
HXDLIN(5177)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,n2);
HXDLIN(5177)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,n3);
HXDLIN(5177)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,t1);
HXDLIN(5177)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,t2);
HXDLIN(5177)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,t3);
HXDLIN(5177)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,t4);
HXLINE(5178)			if (hx::IsEq( par,g->prev )) {
HXLINE(5179)				n3 = g;
HXLINE(5180)				t4 = g->next;
HXLINE(5181)				if (hx::IsEq( x,par->prev )) {
HXLINE(5182)					n1 = x;
HXLINE(5183)					n2 = par;
HXLINE(5184)					t1 = x->prev;
HXLINE(5185)					t2 = x->next;
HXLINE(5186)					t3 = par->next;
            				}
            				else {
HXLINE(5189)					n1 = par;
HXLINE(5190)					n2 = x;
HXLINE(5191)					t1 = par->prev;
HXLINE(5192)					t2 = x->prev;
HXLINE(5193)					t3 = x->next;
            				}
            			}
            			else {
HXLINE(5197)				n1 = g;
HXLINE(5198)				t1 = g->prev;
HXLINE(5199)				if (hx::IsEq( x,par->prev )) {
HXLINE(5200)					n2 = x;
HXLINE(5201)					n3 = par;
HXLINE(5202)					t2 = x->prev;
HXLINE(5203)					t3 = x->next;
HXLINE(5204)					t4 = par->next;
            				}
            				else {
HXLINE(5207)					n2 = par;
HXLINE(5208)					n3 = x;
HXLINE(5209)					t2 = par->prev;
HXLINE(5210)					t3 = x->prev;
HXLINE(5211)					t4 = x->next;
            				}
            			}
HXLINE(5214)			{
HXLINE(5215)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,par1,"par") = g->parent;
HXLINE(5216)				if (hx::IsNull( par1 )) {
HXLINE(5217)					this->parent = n2;
            				}
            				else {
HXLINE(5219)					if (hx::IsEq( par1->prev,g )) {
HXLINE(5219)						par1->prev = n2;
            					}
            					else {
HXLINE(5220)						par1->next = n2;
            					}
            				}
HXLINE(5221)				if (hx::IsNotNull( n2 )) {
HXLINE(5221)					n2->parent = par1;
            				}
            			}
HXLINE(5223)			{
HXLINE(5224)				n1->prev = t1;
HXLINE(5225)				if (hx::IsNotNull( t1 )) {
HXLINE(5225)					t1->parent = n1;
            				}
            			}
HXLINE(5227)			{
HXLINE(5228)				n1->next = t2;
HXLINE(5229)				if (hx::IsNotNull( t2 )) {
HXLINE(5229)					t2->parent = n1;
            				}
            			}
HXLINE(5231)			{
HXLINE(5232)				n2->prev = n1;
HXLINE(5233)				if (hx::IsNotNull( n1 )) {
HXLINE(5233)					n1->parent = n2;
            				}
            			}
HXLINE(5235)			{
HXLINE(5236)				n2->next = n3;
HXLINE(5237)				if (hx::IsNotNull( n3 )) {
HXLINE(5237)					n3->parent = n2;
            				}
            			}
HXLINE(5239)			{
HXLINE(5240)				n3->prev = t3;
HXLINE(5241)				if (hx::IsNotNull( t3 )) {
HXLINE(5241)					t3->parent = n3;
            				}
            			}
HXLINE(5243)			{
HXLINE(5244)				n3->next = t4;
HXLINE(5245)				if (hx::IsNotNull( t4 )) {
HXLINE(5245)					t4->parent = n3;
            				}
            			}
HXLINE(5247)			n2->colour = (g->colour - (int)1);
HXLINE(5248)			n1->colour = (int)1;
HXLINE(5249)			n3->colour = (int)1;
HXLINE(5250)			if (hx::IsEq( n2,this->parent )) {
HXLINE(5250)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE(5251)				bool _hx_tmp;
HXDLIN(5251)				if ((n2->colour == (int)0)) {
HXLINE(5251)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE(5251)					_hx_tmp = false;
            				}
HXDLIN(5251)				if (_hx_tmp) {
HXLINE(5252)					x = n2;
HXLINE(5253)					continue;
            				}
            			}
HXLINE(5255)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_SimpleSeg_obj::try_insert_bool( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_GC_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5258_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5259)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,x) = null();
HXLINE(5260)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = null();
HXLINE(5261)		if (hx::IsNull( this->parent )) {
HXLINE(5263)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE(5264)				x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(5270)				x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5271)				::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = x->next;
HXLINE(5272)				x->next = null();
            			}
HXLINE(5279)			x->data = obj;
HXLINE(5280)			this->parent = x;
            		}
            		else {
HXLINE(5283)			cur = this->parent;
HXLINE(5284)			while(true){
HXLINE(5285)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(5286)					if (hx::IsNull( cur->prev )) {
HXLINE(5288)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE(5289)							x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(5295)							x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5296)							::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = x->next;
HXLINE(5297)							x->next = null();
            						}
HXLINE(5304)						x->data = obj;
HXLINE(5305)						cur->prev = x;
HXLINE(5306)						x->parent = cur;
HXLINE(5307)						goto _hx_goto_54;
            					}
            					else {
HXLINE(5309)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(5311)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(5312)						if (hx::IsNull( cur->next )) {
HXLINE(5314)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE(5315)								x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(5321)								x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5322)								::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = x->next;
HXLINE(5323)								x->next = null();
            							}
HXLINE(5330)							x->data = obj;
HXLINE(5331)							cur->next = x;
HXLINE(5332)							x->parent = cur;
HXLINE(5333)							goto _hx_goto_54;
            						}
            						else {
HXLINE(5335)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(5337)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE(5340)		if (hx::IsNull( x )) {
HXLINE(5340)			return false;
            		}
            		else {
HXLINE(5342)			if (hx::IsNull( x->parent )) {
HXLINE(5342)				x->colour = (int)1;
            			}
            			else {
HXLINE(5344)				x->colour = (int)0;
HXLINE(5345)				if ((x->parent->colour == (int)0)) {
HXLINE(5345)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(5347)			return true;
            		}
HXLINE(5340)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::try_insert( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_GC_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5350_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5351)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,x) = null();
HXLINE(5352)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = null();
HXLINE(5353)		if (hx::IsNull( this->parent )) {
HXLINE(5355)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE(5356)				x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(5362)				x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5363)				::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = x->next;
HXLINE(5364)				x->next = null();
            			}
HXLINE(5371)			x->data = obj;
HXLINE(5372)			this->parent = x;
            		}
            		else {
HXLINE(5375)			cur = this->parent;
HXLINE(5376)			while(true){
HXLINE(5377)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(5378)					if (hx::IsNull( cur->prev )) {
HXLINE(5380)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE(5381)							x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(5387)							x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5388)							::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = x->next;
HXLINE(5389)							x->next = null();
            						}
HXLINE(5396)						x->data = obj;
HXLINE(5397)						cur->prev = x;
HXLINE(5398)						x->parent = cur;
HXLINE(5399)						goto _hx_goto_56;
            					}
            					else {
HXLINE(5401)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(5403)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(5404)						if (hx::IsNull( cur->next )) {
HXLINE(5406)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE(5407)								x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(5413)								x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5414)								::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = x->next;
HXLINE(5415)								x->next = null();
            							}
HXLINE(5422)							x->data = obj;
HXLINE(5423)							cur->next = x;
HXLINE(5424)							x->parent = cur;
HXLINE(5425)							goto _hx_goto_56;
            						}
            						else {
HXLINE(5427)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(5429)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE(5432)		if (hx::IsNull( x )) {
HXLINE(5432)			return cur;
            		}
            		else {
HXLINE(5434)			if (hx::IsNull( x->parent )) {
HXLINE(5434)				x->colour = (int)1;
            			}
            			else {
HXLINE(5436)				x->colour = (int)0;
HXLINE(5437)				if ((x->parent->colour == (int)0)) {
HXLINE(5437)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(5439)			return x;
            		}
HXLINE(5432)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::insert( ::zpp_nape::geom::ZPP_SimpleSeg obj){
            	HX_GC_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_5442_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(5451)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,x);
HXLINE(5453)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )) {
HXLINE(5454)			x =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(5460)			x = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(5461)			::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = x->next;
HXLINE(5462)			x->next = null();
            		}
HXLINE(5469)		x->data = obj;
HXLINE(5470)		if (hx::IsNull( this->parent )) {
HXLINE(5470)			this->parent = x;
            		}
            		else {
HXLINE(5472)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,cur) = this->parent;
HXLINE(5473)			while(true){
HXLINE(5474)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(5475)					if (hx::IsNull( cur->prev )) {
HXLINE(5476)						cur->prev = x;
HXLINE(5477)						x->parent = cur;
HXLINE(5478)						goto _hx_goto_58;
            					}
            					else {
HXLINE(5480)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(5483)					if (hx::IsNull( cur->next )) {
HXLINE(5484)						cur->next = x;
HXLINE(5485)						x->parent = cur;
HXLINE(5486)						goto _hx_goto_58;
            					}
            					else {
HXLINE(5488)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(5492)		if (hx::IsNull( x->parent )) {
HXLINE(5492)			x->colour = (int)1;
            		}
            		else {
HXLINE(5494)			x->colour = (int)0;
HXLINE(5495)			if ((x->parent->colour == (int)0)) {
HXLINE(5495)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(5505)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_SimpleSeg_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_SimpleSeg_obj > ZPP_Set_ZPP_SimpleSeg_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_SimpleSeg_obj > __this = new ZPP_Set_ZPP_SimpleSeg_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_SimpleSeg_obj > ZPP_Set_ZPP_SimpleSeg_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_SimpleSeg_obj *__this = (ZPP_Set_ZPP_SimpleSeg_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_SimpleSeg_obj), true, "zpp_nape.util.ZPP_Set_ZPP_SimpleSeg"));
	*(void **)__this = ZPP_Set_ZPP_SimpleSeg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_SimpleSeg_obj::ZPP_Set_ZPP_SimpleSeg_obj()
{
}

void ZPP_Set_ZPP_SimpleSeg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_SimpleSeg);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_SimpleSeg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_SimpleSeg_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_SimpleSeg_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_SimpleSeg_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleSeg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_SimpleSeg_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_SimpleSeg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_SimpleSeg_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleSeg_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleSeg_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimpleSeg*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleSeg_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleSeg_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleSeg_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg*/ ,(int)offsetof(ZPP_Set_ZPP_SimpleSeg_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_SimpleSeg_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_SimpleSeg_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg*/ ,(void *) &ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_SimpleSeg_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_SimpleSeg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_SimpleSeg_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_SimpleSeg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_SimpleSeg_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_SimpleSeg_obj::__mClass;

static ::String ZPP_Set_ZPP_SimpleSeg_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_SimpleSeg_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_SimpleSeg_obj;
	ZPP_Set_ZPP_SimpleSeg_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_SimpleSeg","\xb1","\x60","\x4a","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_SimpleSeg_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_SimpleSeg_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_SimpleSeg_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_SimpleSeg_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_SimpleSeg_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_SimpleSeg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_SimpleSeg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_SimpleSeg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_SimpleSeg_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_SimpleSeg_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_92d2049f0f8a02fa_4621_boot)
HXLINE(4621)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
