// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2677_new,"zpp_nape.util.ZNPList_ZPP_Arbiter","new",0x73a75846,"zpp_nape.util.ZNPList_ZPP_Arbiter.new","zpp_nape/util/Lists.hx",2677,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2683_begin,"zpp_nape.util.ZNPList_ZPP_Arbiter","begin",0x4587b78f,"zpp_nape.util.ZNPList_ZPP_Arbiter.begin","zpp_nape/util/Lists.hx",2683,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2690_setbegin,"zpp_nape.util.ZNPList_ZPP_Arbiter","setbegin",0xeef4f9a1,"zpp_nape.util.ZNPList_ZPP_Arbiter.setbegin","zpp_nape/util/Lists.hx",2690,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2696_add,"zpp_nape.util.ZNPList_ZPP_Arbiter","add",0x739d7a07,"zpp_nape.util.ZNPList_ZPP_Arbiter.add","zpp_nape/util/Lists.hx",2696,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2700_inlined_add,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_add",0x53c52a73,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_add","zpp_nape/util/Lists.hx",2700,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2746_addAll,"zpp_nape.util.ZNPList_ZPP_Arbiter","addAll",0x955cf55a,"zpp_nape.util.ZNPList_ZPP_Arbiter.addAll","zpp_nape/util/Lists.hx",2746,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2756_insert,"zpp_nape.util.ZNPList_ZPP_Arbiter","insert",0x943f2f13,"zpp_nape.util.ZNPList_ZPP_Arbiter.insert","zpp_nape/util/Lists.hx",2756,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2760_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_insert",0xa3688a27,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_insert","zpp_nape/util/Lists.hx",2760,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2804_pop,"zpp_nape.util.ZNPList_ZPP_Arbiter","pop",0x73a8e577,"zpp_nape.util.ZNPList_ZPP_Arbiter.pop","zpp_nape/util/Lists.hx",2804,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2808_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_pop",0x53d095e3,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_pop","zpp_nape/util/Lists.hx",2808,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2842_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Arbiter","pop_unsafe",0x607a5d2e,"zpp_nape.util.ZNPList_ZPP_Arbiter.pop_unsafe","zpp_nape/util/Lists.hx",2842,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2846_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_pop_unsafe",0xb2f0d242,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_pop_unsafe","zpp_nape/util/Lists.hx",2846,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2868_remove,"zpp_nape.util.ZNPList_ZPP_Arbiter","remove",0xfaea881e,"zpp_nape.util.ZNPList_ZPP_Arbiter.remove","zpp_nape/util/Lists.hx",2868,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2870_try_remove,"zpp_nape.util.ZNPList_ZPP_Arbiter","try_remove",0x77a492e2,"zpp_nape.util.ZNPList_ZPP_Arbiter.try_remove","zpp_nape/util/Lists.hx",2870,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2904_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_remove",0x0a13e332,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_remove","zpp_nape/util/Lists.hx",2904,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2908_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_try_remove",0xca1b07f6,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_try_remove","zpp_nape/util/Lists.hx",2908,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2932_erase,"zpp_nape.util.ZNPList_ZPP_Arbiter","erase",0x084eb64c,"zpp_nape.util.ZNPList_ZPP_Arbiter.erase","zpp_nape/util/Lists.hx",2932,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2936_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_erase",0x061459b8,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_erase","zpp_nape/util/Lists.hx",2936,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2982_splice,"zpp_nape.util.ZNPList_ZPP_Arbiter","splice",0xb6007156,"zpp_nape.util.ZNPList_ZPP_Arbiter.splice","zpp_nape/util/Lists.hx",2982,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2987_clear,"zpp_nape.util.ZNPList_ZPP_Arbiter","clear",0xdd8d3ef3,"zpp_nape.util.ZNPList_ZPP_Arbiter.clear","zpp_nape/util/Lists.hx",2987,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2992_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_clear",0xdb52e25f,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_clear","zpp_nape/util/Lists.hx",2992,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_2997_reverse,"zpp_nape.util.ZNPList_ZPP_Arbiter","reverse",0xba48ac08,"zpp_nape.util.ZNPList_ZPP_Arbiter.reverse","zpp_nape/util/Lists.hx",2997,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3013_empty,"zpp_nape.util.ZNPList_ZPP_Arbiter","empty",0x050c07f3,"zpp_nape.util.ZNPList_ZPP_Arbiter.empty","zpp_nape/util/Lists.hx",3013,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3018_size,"zpp_nape.util.ZNPList_ZPP_Arbiter","size",0xc217021b,"zpp_nape.util.ZNPList_ZPP_Arbiter.size","zpp_nape/util/Lists.hx",3018,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3021_has,"zpp_nape.util.ZNPList_ZPP_Arbiter","has",0x73a2c740,"zpp_nape.util.ZNPList_ZPP_Arbiter.has","zpp_nape/util/Lists.hx",3021,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3025_inlined_has,"zpp_nape.util.ZNPList_ZPP_Arbiter","inlined_has",0x53ca77ac,"zpp_nape.util.ZNPList_ZPP_Arbiter.inlined_has","zpp_nape/util/Lists.hx",3025,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3056_front,"zpp_nape.util.ZNPList_ZPP_Arbiter","front",0x9bbfe60f,"zpp_nape.util.ZNPList_ZPP_Arbiter.front","zpp_nape/util/Lists.hx",3056,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3058_back,"zpp_nape.util.ZNPList_ZPP_Arbiter","back",0xb6d43b81,"zpp_nape.util.ZNPList_ZPP_Arbiter.back","zpp_nape/util/Lists.hx",3058,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3067_iterator_at,"zpp_nape.util.ZNPList_ZPP_Arbiter","iterator_at",0x586967ca,"zpp_nape.util.ZNPList_ZPP_Arbiter.iterator_at","zpp_nape/util/Lists.hx",3067,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_acf086519ff316e1_3080_at,"zpp_nape.util.ZNPList_ZPP_Arbiter","at",0x4e94cbcd,"zpp_nape.util.ZNPList_ZPP_Arbiter.at","zpp_nape/util/Lists.hx",3080,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Arbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2677_new)
            	HX_STACK_THIS(this)
HXLINE(2687)		this->length = (int)0;
HXLINE(2686)		this->pushmod = false;
HXLINE(2685)		this->modified = false;
HXLINE(2678)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Arbiter_obj::__CreateEmpty() { return new ZNPList_ZPP_Arbiter_obj; }

void *ZNPList_ZPP_Arbiter_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Arbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Arbiter_obj > _hx_result = new ZNPList_ZPP_Arbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Arbiter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a46c1ac;
}

 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2683_begin)
            	HX_STACK_THIS(this)
HXLINE(2683)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,begin,return )

void ZNPList_ZPP_Arbiter_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Arbiter i){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2690_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(2691)		this->head = i;
HXLINE(2692)		this->modified = true;
HXLINE(2693)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,setbegin,(void))

 ::zpp_nape::dynamics::ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::add( ::zpp_nape::dynamics::ZPP_Arbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_acf086519ff316e1_2696_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(2696)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN(2696)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(2696)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2696)			ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2696)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXDLIN(2696)			ret->next = null();
            		}
HXDLIN(2696)		ret->elt = o;
HXDLIN(2696)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret;
HXDLIN(2696)		temp->next = this->head;
HXDLIN(2696)		this->head = temp;
HXDLIN(2696)		this->modified = true;
HXDLIN(2696)		this->length++;
HXDLIN(2696)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,add,return )

 ::zpp_nape::dynamics::ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::inlined_add( ::zpp_nape::dynamics::ZPP_Arbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_acf086519ff316e1_2700_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(2710)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXLINE(2712)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(2713)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2719)			ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXLINE(2720)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXLINE(2721)			ret->next = null();
            		}
HXLINE(2728)		ret->elt = o;
HXLINE(2709)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret;
HXLINE(2731)		temp->next = this->head;
HXLINE(2732)		this->head = temp;
HXLINE(2733)		this->modified = true;
HXLINE(2734)		this->length++;
HXLINE(2735)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,inlined_add,return )

void ZNPList_ZPP_Arbiter_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Arbiter x){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2746_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(2747)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = x->head;
HXLINE(2748)		while(hx::IsNotNull( cx_ite )){
HXLINE(2750)			this->add(cx_ite->elt);
HXLINE(2751)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur, ::zpp_nape::dynamics::ZPP_Arbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_acf086519ff316e1_2756_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(2756)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN(2756)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(2756)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2756)			ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2756)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXDLIN(2756)			ret->next = null();
            		}
HXDLIN(2756)		ret->elt = o;
HXDLIN(2756)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret;
HXDLIN(2756)		if (hx::IsNull( cur )) {
HXLINE(2756)			temp->next = this->head;
HXDLIN(2756)			this->head = temp;
            		}
            		else {
HXLINE(2756)			temp->next = cur->next;
HXDLIN(2756)			cur->next = temp;
            		}
HXDLIN(2756)		this->pushmod = (this->modified = true);
HXDLIN(2756)		this->length++;
HXDLIN(2756)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Arbiter_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Arbiter cur, ::zpp_nape::dynamics::ZPP_Arbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_acf086519ff316e1_2760_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(2770)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXLINE(2772)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(2773)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(2779)			ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXLINE(2780)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
HXLINE(2781)			ret->next = null();
            		}
HXLINE(2788)		ret->elt = o;
HXLINE(2769)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret;
HXLINE(2791)		if (hx::IsNull( cur )) {
HXLINE(2792)			temp->next = this->head;
HXLINE(2793)			this->head = temp;
            		}
            		else {
HXLINE(2796)			temp->next = cur->next;
HXLINE(2797)			cur->next = temp;
            		}
HXLINE(2799)		this->pushmod = (this->modified = true);
HXLINE(2800)		this->length++;
HXLINE(2801)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Arbiter_obj,inlined_insert,return )

void ZNPList_ZPP_Arbiter_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2804_pop)
            	HX_STACK_THIS(this)
HXLINE(2804)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret) = this->head;
HXDLIN(2804)		this->head = ret->next;
HXDLIN(2804)		{
HXLINE(2804)			ret->elt = null();
HXDLIN(2804)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2804)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret;
            		}
HXDLIN(2804)		if (hx::IsNull( this->head )) {
HXLINE(2804)			this->pushmod = true;
            		}
HXDLIN(2804)		this->modified = true;
HXDLIN(2804)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,pop,(void))

void ZNPList_ZPP_Arbiter_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2808_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(2817)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret) = this->head;
HXLINE(2818)		this->head = ret->next;
HXLINE(2820)		{
HXLINE(2830)			ret->elt = null();
HXLINE(2831)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXLINE(2832)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret;
            		}
HXLINE(2837)		if (hx::IsNull( this->head )) {
HXLINE(2837)			this->pushmod = true;
            		}
HXLINE(2838)		this->modified = true;
HXLINE(2839)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,inlined_pop,(void))

 ::zpp_nape::dynamics::ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2842_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(2842)		HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,ret) = this->head->elt;
HXDLIN(2842)		this->pop();
HXDLIN(2842)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,pop_unsafe,return )

 ::zpp_nape::dynamics::ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2846_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(2855)		HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,ret) = this->head->elt;
HXLINE(2856)		this->pop();
HXLINE(2857)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Arbiter_obj::remove( ::zpp_nape::dynamics::ZPP_Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2868_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2868)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN(2868)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = this->head;
HXDLIN(2868)		while(hx::IsNotNull( cur )){
HXLINE(2868)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2868)				{
HXLINE(2868)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN(2868)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN(2868)					if (hx::IsNull( pre )) {
HXLINE(2868)						old = this->head;
HXDLIN(2868)						ret = old->next;
HXDLIN(2868)						this->head = ret;
HXDLIN(2868)						if (hx::IsNull( this->head )) {
HXLINE(2868)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(2868)						old = pre->next;
HXDLIN(2868)						ret = old->next;
HXDLIN(2868)						pre->next = ret;
HXDLIN(2868)						if (hx::IsNull( ret )) {
HXLINE(2868)							this->pushmod = true;
            						}
            					}
HXDLIN(2868)					{
HXLINE(2868)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN(2868)						o->elt = null();
HXDLIN(2868)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2868)						::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            					}
HXDLIN(2868)					this->modified = true;
HXDLIN(2868)					this->length--;
HXDLIN(2868)					this->pushmod = true;
            				}
HXDLIN(2868)				goto _hx_goto_13;
            			}
HXDLIN(2868)			pre = cur;
HXDLIN(2868)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,remove,(void))

bool ZNPList_ZPP_Arbiter_obj::try_remove( ::zpp_nape::dynamics::ZPP_Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2870_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2879)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXLINE(2880)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = this->head;
HXLINE(2881)		HX_VARI( bool,ret) = false;
HXLINE(2882)		while(hx::IsNotNull( cur )){
HXLINE(2883)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2884)				this->erase(pre);
HXLINE(2885)				ret = true;
HXLINE(2886)				goto _hx_goto_15;
            			}
HXLINE(2888)			pre = cur;
HXLINE(2889)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(2891)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,try_remove,return )

void ZNPList_ZPP_Arbiter_obj::inlined_remove( ::zpp_nape::dynamics::ZPP_Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2904_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2904)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN(2904)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = this->head;
HXDLIN(2904)		while(hx::IsNotNull( cur )){
HXLINE(2904)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2904)				{
HXLINE(2904)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN(2904)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN(2904)					if (hx::IsNull( pre )) {
HXLINE(2904)						old = this->head;
HXDLIN(2904)						ret = old->next;
HXDLIN(2904)						this->head = ret;
HXDLIN(2904)						if (hx::IsNull( this->head )) {
HXLINE(2904)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(2904)						old = pre->next;
HXDLIN(2904)						ret = old->next;
HXDLIN(2904)						pre->next = ret;
HXDLIN(2904)						if (hx::IsNull( ret )) {
HXLINE(2904)							this->pushmod = true;
            						}
            					}
HXDLIN(2904)					{
HXLINE(2904)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN(2904)						o->elt = null();
HXDLIN(2904)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2904)						::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            					}
HXDLIN(2904)					this->modified = true;
HXDLIN(2904)					this->length--;
HXDLIN(2904)					this->pushmod = true;
            				}
HXDLIN(2904)				goto _hx_goto_17;
            			}
HXDLIN(2904)			pre = cur;
HXDLIN(2904)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,inlined_remove,(void))

bool ZNPList_ZPP_Arbiter_obj::inlined_try_remove( ::zpp_nape::dynamics::ZPP_Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2908_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2917)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXLINE(2918)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = this->head;
HXLINE(2919)		HX_VARI( bool,ret) = false;
HXLINE(2920)		while(hx::IsNotNull( cur )){
HXLINE(2921)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2922)				{
HXLINE(2922)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN(2922)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN(2922)					if (hx::IsNull( pre )) {
HXLINE(2922)						old = this->head;
HXDLIN(2922)						ret1 = old->next;
HXDLIN(2922)						this->head = ret1;
HXDLIN(2922)						if (hx::IsNull( this->head )) {
HXLINE(2922)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(2922)						old = pre->next;
HXDLIN(2922)						ret1 = old->next;
HXDLIN(2922)						pre->next = ret1;
HXDLIN(2922)						if (hx::IsNull( ret1 )) {
HXLINE(2922)							this->pushmod = true;
            						}
            					}
HXDLIN(2922)					{
HXLINE(2922)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN(2922)						o->elt = null();
HXDLIN(2922)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2922)						::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            					}
HXDLIN(2922)					this->modified = true;
HXDLIN(2922)					this->length--;
HXDLIN(2922)					this->pushmod = true;
            				}
HXLINE(2923)				ret = true;
HXLINE(2924)				goto _hx_goto_19;
            			}
HXLINE(2926)			pre = cur;
HXLINE(2927)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(2929)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2932_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(2932)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN(2932)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN(2932)		if (hx::IsNull( pre )) {
HXLINE(2932)			old = this->head;
HXDLIN(2932)			ret = old->next;
HXDLIN(2932)			this->head = ret;
HXDLIN(2932)			if (hx::IsNull( this->head )) {
HXLINE(2932)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(2932)			old = pre->next;
HXDLIN(2932)			ret = old->next;
HXDLIN(2932)			pre->next = ret;
HXDLIN(2932)			if (hx::IsNull( ret )) {
HXLINE(2932)				this->pushmod = true;
            			}
            		}
HXDLIN(2932)		{
HXLINE(2932)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN(2932)			o->elt = null();
HXDLIN(2932)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2932)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            		}
HXDLIN(2932)		this->modified = true;
HXDLIN(2932)		this->length--;
HXDLIN(2932)		this->pushmod = true;
HXDLIN(2932)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2936_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(2945)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXLINE(2946)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXLINE(2947)		if (hx::IsNull( pre )) {
HXLINE(2948)			old = this->head;
HXLINE(2949)			ret = old->next;
HXLINE(2950)			this->head = ret;
HXLINE(2951)			if (hx::IsNull( this->head )) {
HXLINE(2951)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(2954)			old = pre->next;
HXLINE(2955)			ret = old->next;
HXLINE(2956)			pre->next = ret;
HXLINE(2957)			if (hx::IsNull( ret )) {
HXLINE(2957)				this->pushmod = true;
            			}
            		}
HXLINE(2960)		{
HXLINE(2961)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXLINE(2970)			o->elt = null();
HXLINE(2971)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXLINE(2972)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            		}
HXLINE(2977)		this->modified = true;
HXLINE(2978)		this->length--;
HXLINE(2979)		this->pushmod = true;
HXLINE(2980)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Arbiter pre,int n){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2982_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(2983)		while(true){
HXLINE(2983)			bool _hx_tmp;
HXDLIN(2983)			n = (n - (int)1);
HXDLIN(2983)			if (((n + (int)1) > (int)0)) {
HXLINE(2983)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(2983)				_hx_tmp = false;
            			}
HXDLIN(2983)			if (!(_hx_tmp)) {
HXLINE(2983)				goto _hx_goto_23;
            			}
HXDLIN(2983)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(2984)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Arbiter_obj,splice,return )

void ZNPList_ZPP_Arbiter_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2987_clear)
            	HX_STACK_THIS(this)
HXLINE(2987)		while(hx::IsNotNull( this->head )){
HXLINE(2987)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret) = this->head;
HXDLIN(2987)			this->head = ret->next;
HXDLIN(2987)			{
HXLINE(2987)				ret->elt = null();
HXDLIN(2987)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2987)				::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret;
            			}
HXDLIN(2987)			if (hx::IsNull( this->head )) {
HXLINE(2987)				this->pushmod = true;
            			}
HXDLIN(2987)			this->modified = true;
HXDLIN(2987)			this->length--;
            		}
HXDLIN(2987)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,clear,(void))

void ZNPList_ZPP_Arbiter_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2992_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(2993)		while(hx::IsNotNull( this->head )){
HXLINE(2993)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret) = this->head;
HXDLIN(2993)			this->head = ret->next;
HXDLIN(2993)			{
HXLINE(2993)				ret->elt = null();
HXDLIN(2993)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(2993)				::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret;
            			}
HXDLIN(2993)			if (hx::IsNull( this->head )) {
HXLINE(2993)				this->pushmod = true;
            			}
HXDLIN(2993)			this->modified = true;
HXDLIN(2993)			this->length--;
            		}
HXLINE(2994)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,inlined_clear,(void))

void ZNPList_ZPP_Arbiter_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_2997_reverse)
            	HX_STACK_THIS(this)
HXLINE(2998)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = this->head;
HXLINE(2999)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXLINE(3000)		while(hx::IsNotNull( cur )){
HXLINE(3001)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,nx) = cur->next;
HXLINE(3002)			cur->next = pre;
HXLINE(3003)			this->head = cur;
HXLINE(3004)			pre = cur;
HXLINE(3005)			cur = nx;
            		}
HXLINE(3007)		this->modified = true;
HXLINE(3008)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,reverse,(void))

bool ZNPList_ZPP_Arbiter_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3013_empty)
            	HX_STACK_THIS(this)
HXLINE(3013)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,empty,return )

int ZNPList_ZPP_Arbiter_obj::size(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3018_size)
            	HX_STACK_THIS(this)
HXLINE(3018)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,size,return )

bool ZNPList_ZPP_Arbiter_obj::has( ::zpp_nape::dynamics::ZPP_Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3021_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3021)		HX_VAR( bool,ret);
HXDLIN(3021)		{
HXLINE(3021)			ret = false;
HXDLIN(3021)			{
HXLINE(3021)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = this->head;
HXDLIN(3021)				while(hx::IsNotNull( cx_ite )){
HXLINE(3021)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(3021)						ret = true;
HXDLIN(3021)						goto _hx_goto_33;
            					}
HXDLIN(3021)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(3021)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,has,return )

bool ZNPList_ZPP_Arbiter_obj::inlined_has( ::zpp_nape::dynamics::ZPP_Arbiter obj){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3025_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3034)		HX_VAR( bool,ret);
HXLINE(3035)		{
HXLINE(3036)			ret = false;
HXLINE(3037)			{
HXLINE(3038)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = this->head;
HXLINE(3039)				while(hx::IsNotNull( cx_ite )){
HXLINE(3042)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(3043)						ret = true;
HXLINE(3044)						goto _hx_goto_35;
            					}
HXLINE(3047)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(3051)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,inlined_has,return )

 ::zpp_nape::dynamics::ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::front(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3056_front)
            	HX_STACK_THIS(this)
HXLINE(3056)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,front,return )

 ::zpp_nape::dynamics::ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::back(){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3058_back)
            	HX_STACK_THIS(this)
HXLINE(3059)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret) = this->head;
HXLINE(3060)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = ret;
HXLINE(3061)		while(hx::IsNotNull( cur )){
HXLINE(3062)			ret = cur;
HXLINE(3063)			cur = cur->next;
            		}
HXLINE(3065)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Arbiter_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3067_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(3076)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret) = this->head;
HXLINE(3077)		while(true){
HXLINE(3077)			bool _hx_tmp;
HXDLIN(3077)			ind = (ind - (int)1);
HXDLIN(3077)			if (((ind + (int)1) > (int)0)) {
HXLINE(3077)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(3077)				_hx_tmp = false;
            			}
HXDLIN(3077)			if (!(_hx_tmp)) {
HXLINE(3077)				goto _hx_goto_40;
            			}
HXDLIN(3077)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(3078)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,iterator_at,return )

 ::zpp_nape::dynamics::ZPP_Arbiter ZNPList_ZPP_Arbiter_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_acf086519ff316e1_3080_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(3089)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,it) = this->iterator_at(ind);
HXLINE(3090)		if (hx::IsNotNull( it )) {
HXLINE(3090)			return it->elt;
            		}
            		else {
HXLINE(3090)			return null();
            		}
HXDLIN(3090)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Arbiter_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Arbiter_obj > ZNPList_ZPP_Arbiter_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Arbiter_obj > __this = new ZNPList_ZPP_Arbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Arbiter_obj > ZNPList_ZPP_Arbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Arbiter_obj *__this = (ZNPList_ZPP_Arbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Arbiter_obj), true, "zpp_nape.util.ZNPList_ZPP_Arbiter"));
	*(void **)__this = ZNPList_ZPP_Arbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Arbiter_obj::ZNPList_ZPP_Arbiter_obj()
{
}

void ZNPList_ZPP_Arbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Arbiter);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Arbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Arbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Arbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Arbiter >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Arbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Arbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_Arbiter*/ ,(int)offsetof(ZNPList_ZPP_Arbiter_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Arbiter_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Arbiter_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Arbiter_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Arbiter_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Arbiter_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_Arbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_Arbiter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_Arbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_Arbiter_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_Arbiter_obj::__mClass;

void ZNPList_ZPP_Arbiter_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_Arbiter_obj;
	ZNPList_ZPP_Arbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_Arbiter","\x54","\x7d","\xc0","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_Arbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Arbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Arbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_Arbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Arbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Arbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
