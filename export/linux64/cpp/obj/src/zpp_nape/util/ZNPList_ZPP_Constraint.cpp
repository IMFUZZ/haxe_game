// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1843_new,"zpp_nape.util.ZNPList_ZPP_Constraint","new",0x2bf829c4,"zpp_nape.util.ZNPList_ZPP_Constraint.new","zpp_nape/util/Lists.hx",1843,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1849_begin,"zpp_nape.util.ZNPList_ZPP_Constraint","begin",0x50ce648d,"zpp_nape.util.ZNPList_ZPP_Constraint.begin","zpp_nape/util/Lists.hx",1849,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1856_setbegin,"zpp_nape.util.ZNPList_ZPP_Constraint","setbegin",0x0c05ff63,"zpp_nape.util.ZNPList_ZPP_Constraint.setbegin","zpp_nape/util/Lists.hx",1856,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1862_add,"zpp_nape.util.ZNPList_ZPP_Constraint","add",0x2bee4b85,"zpp_nape.util.ZNPList_ZPP_Constraint.add","zpp_nape/util/Lists.hx",1862,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1866_inlined_add,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_add",0xc5a0a9f1,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_add","zpp_nape/util/Lists.hx",1866,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1912_addAll,"zpp_nape.util.ZNPList_ZPP_Constraint","addAll",0x67eda69c,"zpp_nape.util.ZNPList_ZPP_Constraint.addAll","zpp_nape/util/Lists.hx",1912,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1922_insert,"zpp_nape.util.ZNPList_ZPP_Constraint","insert",0x66cfe055,"zpp_nape.util.ZNPList_ZPP_Constraint.insert","zpp_nape/util/Lists.hx",1922,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1926_inlined_insert,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_insert",0xd1cf4d69,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_insert","zpp_nape/util/Lists.hx",1926,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1970_pop,"zpp_nape.util.ZNPList_ZPP_Constraint","pop",0x2bf9b6f5,"zpp_nape.util.ZNPList_ZPP_Constraint.pop","zpp_nape/util/Lists.hx",1970,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_1974_inlined_pop,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_pop",0xc5ac1561,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_pop","zpp_nape/util/Lists.hx",1974,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2008_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Constraint","pop_unsafe",0xa829d770,"zpp_nape.util.ZNPList_ZPP_Constraint.pop_unsafe","zpp_nape/util/Lists.hx",2008,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2012_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_pop_unsafe",0x2fe75e84,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_pop_unsafe","zpp_nape/util/Lists.hx",2012,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2034_remove,"zpp_nape.util.ZNPList_ZPP_Constraint","remove",0xcd7b3960,"zpp_nape.util.ZNPList_ZPP_Constraint.remove","zpp_nape/util/Lists.hx",2034,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2036_try_remove,"zpp_nape.util.ZNPList_ZPP_Constraint","try_remove",0xbf540d24,"zpp_nape.util.ZNPList_ZPP_Constraint.try_remove","zpp_nape/util/Lists.hx",2036,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2070_inlined_remove,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_remove",0x387aa674,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_remove","zpp_nape/util/Lists.hx",2070,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2074_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_try_remove",0x47119438,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_try_remove","zpp_nape/util/Lists.hx",2074,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2098_erase,"zpp_nape.util.ZNPList_ZPP_Constraint","erase",0x1395634a,"zpp_nape.util.ZNPList_ZPP_Constraint.erase","zpp_nape/util/Lists.hx",2098,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2102_inlined_erase,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_erase",0x456d34b6,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_erase","zpp_nape/util/Lists.hx",2102,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2148_splice,"zpp_nape.util.ZNPList_ZPP_Constraint","splice",0x88912298,"zpp_nape.util.ZNPList_ZPP_Constraint.splice","zpp_nape/util/Lists.hx",2148,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2153_clear,"zpp_nape.util.ZNPList_ZPP_Constraint","clear",0xe8d3ebf1,"zpp_nape.util.ZNPList_ZPP_Constraint.clear","zpp_nape/util/Lists.hx",2153,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2158_inlined_clear,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_clear",0x1aabbd5d,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_clear","zpp_nape/util/Lists.hx",2158,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2163_reverse,"zpp_nape.util.ZNPList_ZPP_Constraint","reverse",0x26531486,"zpp_nape.util.ZNPList_ZPP_Constraint.reverse","zpp_nape/util/Lists.hx",2163,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2179_empty,"zpp_nape.util.ZNPList_ZPP_Constraint","empty",0x1052b4f1,"zpp_nape.util.ZNPList_ZPP_Constraint.empty","zpp_nape/util/Lists.hx",2179,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2184_size,"zpp_nape.util.ZNPList_ZPP_Constraint","size",0x507d7edd,"zpp_nape.util.ZNPList_ZPP_Constraint.size","zpp_nape/util/Lists.hx",2184,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2187_has,"zpp_nape.util.ZNPList_ZPP_Constraint","has",0x2bf398be,"zpp_nape.util.ZNPList_ZPP_Constraint.has","zpp_nape/util/Lists.hx",2187,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2191_inlined_has,"zpp_nape.util.ZNPList_ZPP_Constraint","inlined_has",0xc5a5f72a,"zpp_nape.util.ZNPList_ZPP_Constraint.inlined_has","zpp_nape/util/Lists.hx",2191,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2222_front,"zpp_nape.util.ZNPList_ZPP_Constraint","front",0xa706930d,"zpp_nape.util.ZNPList_ZPP_Constraint.front","zpp_nape/util/Lists.hx",2222,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2224_back,"zpp_nape.util.ZNPList_ZPP_Constraint","back",0x453ab843,"zpp_nape.util.ZNPList_ZPP_Constraint.back","zpp_nape/util/Lists.hx",2224,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2233_iterator_at,"zpp_nape.util.ZNPList_ZPP_Constraint","iterator_at",0xca44e748,"zpp_nape.util.ZNPList_ZPP_Constraint.iterator_at","zpp_nape/util/Lists.hx",2233,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_40ebcaacba1c753e_2246_at,"zpp_nape.util.ZNPList_ZPP_Constraint","at",0x475f340f,"zpp_nape.util.ZNPList_ZPP_Constraint.at","zpp_nape/util/Lists.hx",2246,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_Constraint_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1843_new)
            	HX_STACK_THIS(this)
HXLINE(1853)		this->length = (int)0;
HXLINE(1852)		this->pushmod = false;
HXLINE(1851)		this->modified = false;
HXLINE(1844)		this->head = null();
            	}

Dynamic ZNPList_ZPP_Constraint_obj::__CreateEmpty() { return new ZNPList_ZPP_Constraint_obj; }

void *ZNPList_ZPP_Constraint_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_Constraint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_Constraint_obj > _hx_result = new ZNPList_ZPP_Constraint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_Constraint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40bbc716;
}

 ::zpp_nape::util::ZNPNode_ZPP_Constraint ZNPList_ZPP_Constraint_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1849_begin)
            	HX_STACK_THIS(this)
HXLINE(1849)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,begin,return )

void ZNPList_ZPP_Constraint_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_Constraint i){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1856_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(1857)		this->head = i;
HXLINE(1858)		this->modified = true;
HXLINE(1859)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,setbegin,(void))

 ::zpp_nape::constraint::ZPP_Constraint ZNPList_ZPP_Constraint_obj::add( ::zpp_nape::constraint::ZPP_Constraint o){
            	HX_GC_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1862_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(1862)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXDLIN(1862)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )) {
HXLINE(1862)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1862)			ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(1862)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
HXDLIN(1862)			ret->next = null();
            		}
HXDLIN(1862)		ret->elt = o;
HXDLIN(1862)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,temp) = ret;
HXDLIN(1862)		temp->next = this->head;
HXDLIN(1862)		this->head = temp;
HXDLIN(1862)		this->modified = true;
HXDLIN(1862)		this->length++;
HXDLIN(1862)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,add,return )

 ::zpp_nape::constraint::ZPP_Constraint ZNPList_ZPP_Constraint_obj::inlined_add( ::zpp_nape::constraint::ZPP_Constraint o){
            	HX_GC_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1866_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(1876)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXLINE(1878)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )) {
HXLINE(1879)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1885)			ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXLINE(1886)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
HXLINE(1887)			ret->next = null();
            		}
HXLINE(1894)		ret->elt = o;
HXLINE(1875)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,temp) = ret;
HXLINE(1897)		temp->next = this->head;
HXLINE(1898)		this->head = temp;
HXLINE(1899)		this->modified = true;
HXLINE(1900)		this->length++;
HXLINE(1901)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,inlined_add,return )

void ZNPList_ZPP_Constraint_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_Constraint x){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1912_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1913)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cx_ite) = x->head;
HXLINE(1914)		while(hx::IsNotNull( cx_ite )){
HXLINE(1916)			this->add(cx_ite->elt);
HXLINE(1917)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_Constraint ZNPList_ZPP_Constraint_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_Constraint cur, ::zpp_nape::constraint::ZPP_Constraint o){
            	HX_GC_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1922_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(1922)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXDLIN(1922)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )) {
HXLINE(1922)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1922)			ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(1922)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
HXDLIN(1922)			ret->next = null();
            		}
HXDLIN(1922)		ret->elt = o;
HXDLIN(1922)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,temp) = ret;
HXDLIN(1922)		if (hx::IsNull( cur )) {
HXLINE(1922)			temp->next = this->head;
HXDLIN(1922)			this->head = temp;
            		}
            		else {
HXLINE(1922)			temp->next = cur->next;
HXDLIN(1922)			cur->next = temp;
            		}
HXDLIN(1922)		this->pushmod = (this->modified = true);
HXDLIN(1922)		this->length++;
HXDLIN(1922)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Constraint_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_Constraint ZNPList_ZPP_Constraint_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_Constraint cur, ::zpp_nape::constraint::ZPP_Constraint o){
            	HX_GC_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1926_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(1936)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXLINE(1938)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )) {
HXLINE(1939)			ret =  ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1945)			ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXLINE(1946)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
HXLINE(1947)			ret->next = null();
            		}
HXLINE(1954)		ret->elt = o;
HXLINE(1935)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,temp) = ret;
HXLINE(1957)		if (hx::IsNull( cur )) {
HXLINE(1958)			temp->next = this->head;
HXLINE(1959)			this->head = temp;
            		}
            		else {
HXLINE(1962)			temp->next = cur->next;
HXLINE(1963)			cur->next = temp;
            		}
HXLINE(1965)		this->pushmod = (this->modified = true);
HXLINE(1966)		this->length++;
HXLINE(1967)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Constraint_obj,inlined_insert,return )

void ZNPList_ZPP_Constraint_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1970_pop)
            	HX_STACK_THIS(this)
HXLINE(1970)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret) = this->head;
HXDLIN(1970)		this->head = ret->next;
HXDLIN(1970)		{
HXLINE(1970)			ret->elt = null();
HXDLIN(1970)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(1970)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret;
            		}
HXDLIN(1970)		if (hx::IsNull( this->head )) {
HXLINE(1970)			this->pushmod = true;
            		}
HXDLIN(1970)		this->modified = true;
HXDLIN(1970)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,pop,(void))

void ZNPList_ZPP_Constraint_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_1974_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(1983)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret) = this->head;
HXLINE(1984)		this->head = ret->next;
HXLINE(1986)		{
HXLINE(1996)			ret->elt = null();
HXLINE(1997)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXLINE(1998)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret;
            		}
HXLINE(2003)		if (hx::IsNull( this->head )) {
HXLINE(2003)			this->pushmod = true;
            		}
HXLINE(2004)		this->modified = true;
HXLINE(2005)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,inlined_pop,(void))

 ::zpp_nape::constraint::ZPP_Constraint ZNPList_ZPP_Constraint_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2008_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(2008)		HX_VARI(  ::zpp_nape::constraint::ZPP_Constraint,ret) = this->head->elt;
HXDLIN(2008)		this->pop();
HXDLIN(2008)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,pop_unsafe,return )

 ::zpp_nape::constraint::ZPP_Constraint ZNPList_ZPP_Constraint_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2012_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(2021)		HX_VARI(  ::zpp_nape::constraint::ZPP_Constraint,ret) = this->head->elt;
HXLINE(2022)		this->pop();
HXLINE(2023)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_Constraint_obj::remove( ::zpp_nape::constraint::ZPP_Constraint obj){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2034_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2034)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,pre) = null();
HXDLIN(2034)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cur) = this->head;
HXDLIN(2034)		while(hx::IsNotNull( cur )){
HXLINE(2034)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2034)				{
HXLINE(2034)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,old);
HXDLIN(2034)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXDLIN(2034)					if (hx::IsNull( pre )) {
HXLINE(2034)						old = this->head;
HXDLIN(2034)						ret = old->next;
HXDLIN(2034)						this->head = ret;
HXDLIN(2034)						if (hx::IsNull( this->head )) {
HXLINE(2034)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(2034)						old = pre->next;
HXDLIN(2034)						ret = old->next;
HXDLIN(2034)						pre->next = ret;
HXDLIN(2034)						if (hx::IsNull( ret )) {
HXLINE(2034)							this->pushmod = true;
            						}
            					}
HXDLIN(2034)					{
HXLINE(2034)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,o) = old;
HXDLIN(2034)						o->elt = null();
HXDLIN(2034)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(2034)						::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = o;
            					}
HXDLIN(2034)					this->modified = true;
HXDLIN(2034)					this->length--;
HXDLIN(2034)					this->pushmod = true;
            				}
HXDLIN(2034)				goto _hx_goto_13;
            			}
HXDLIN(2034)			pre = cur;
HXDLIN(2034)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,remove,(void))

bool ZNPList_ZPP_Constraint_obj::try_remove( ::zpp_nape::constraint::ZPP_Constraint obj){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2036_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2045)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,pre) = null();
HXLINE(2046)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cur) = this->head;
HXLINE(2047)		HX_VARI( bool,ret) = false;
HXLINE(2048)		while(hx::IsNotNull( cur )){
HXLINE(2049)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2050)				this->erase(pre);
HXLINE(2051)				ret = true;
HXLINE(2052)				goto _hx_goto_15;
            			}
HXLINE(2054)			pre = cur;
HXLINE(2055)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(2057)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,try_remove,return )

void ZNPList_ZPP_Constraint_obj::inlined_remove( ::zpp_nape::constraint::ZPP_Constraint obj){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2070_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2070)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,pre) = null();
HXDLIN(2070)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cur) = this->head;
HXDLIN(2070)		while(hx::IsNotNull( cur )){
HXLINE(2070)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2070)				{
HXLINE(2070)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,old);
HXDLIN(2070)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXDLIN(2070)					if (hx::IsNull( pre )) {
HXLINE(2070)						old = this->head;
HXDLIN(2070)						ret = old->next;
HXDLIN(2070)						this->head = ret;
HXDLIN(2070)						if (hx::IsNull( this->head )) {
HXLINE(2070)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(2070)						old = pre->next;
HXDLIN(2070)						ret = old->next;
HXDLIN(2070)						pre->next = ret;
HXDLIN(2070)						if (hx::IsNull( ret )) {
HXLINE(2070)							this->pushmod = true;
            						}
            					}
HXDLIN(2070)					{
HXLINE(2070)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,o) = old;
HXDLIN(2070)						o->elt = null();
HXDLIN(2070)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(2070)						::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = o;
            					}
HXDLIN(2070)					this->modified = true;
HXDLIN(2070)					this->length--;
HXDLIN(2070)					this->pushmod = true;
            				}
HXDLIN(2070)				goto _hx_goto_17;
            			}
HXDLIN(2070)			pre = cur;
HXDLIN(2070)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,inlined_remove,(void))

bool ZNPList_ZPP_Constraint_obj::inlined_try_remove( ::zpp_nape::constraint::ZPP_Constraint obj){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2074_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2083)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,pre) = null();
HXLINE(2084)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cur) = this->head;
HXLINE(2085)		HX_VARI( bool,ret) = false;
HXLINE(2086)		while(hx::IsNotNull( cur )){
HXLINE(2087)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(2088)				{
HXLINE(2088)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,old);
HXDLIN(2088)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret1,"ret");
HXDLIN(2088)					if (hx::IsNull( pre )) {
HXLINE(2088)						old = this->head;
HXDLIN(2088)						ret1 = old->next;
HXDLIN(2088)						this->head = ret1;
HXDLIN(2088)						if (hx::IsNull( this->head )) {
HXLINE(2088)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(2088)						old = pre->next;
HXDLIN(2088)						ret1 = old->next;
HXDLIN(2088)						pre->next = ret1;
HXDLIN(2088)						if (hx::IsNull( ret1 )) {
HXLINE(2088)							this->pushmod = true;
            						}
            					}
HXDLIN(2088)					{
HXLINE(2088)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,o) = old;
HXDLIN(2088)						o->elt = null();
HXDLIN(2088)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(2088)						::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = o;
            					}
HXDLIN(2088)					this->modified = true;
HXDLIN(2088)					this->length--;
HXDLIN(2088)					this->pushmod = true;
            				}
HXLINE(2089)				ret = true;
HXLINE(2090)				goto _hx_goto_19;
            			}
HXLINE(2092)			pre = cur;
HXLINE(2093)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(2095)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_Constraint ZNPList_ZPP_Constraint_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_Constraint pre){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2098_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(2098)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,old);
HXDLIN(2098)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXDLIN(2098)		if (hx::IsNull( pre )) {
HXLINE(2098)			old = this->head;
HXDLIN(2098)			ret = old->next;
HXDLIN(2098)			this->head = ret;
HXDLIN(2098)			if (hx::IsNull( this->head )) {
HXLINE(2098)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(2098)			old = pre->next;
HXDLIN(2098)			ret = old->next;
HXDLIN(2098)			pre->next = ret;
HXDLIN(2098)			if (hx::IsNull( ret )) {
HXLINE(2098)				this->pushmod = true;
            			}
            		}
HXDLIN(2098)		{
HXLINE(2098)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,o) = old;
HXDLIN(2098)			o->elt = null();
HXDLIN(2098)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(2098)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = o;
            		}
HXDLIN(2098)		this->modified = true;
HXDLIN(2098)		this->length--;
HXDLIN(2098)		this->pushmod = true;
HXDLIN(2098)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Constraint ZNPList_ZPP_Constraint_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_Constraint pre){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2102_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(2111)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,old);
HXLINE(2112)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret);
HXLINE(2113)		if (hx::IsNull( pre )) {
HXLINE(2114)			old = this->head;
HXLINE(2115)			ret = old->next;
HXLINE(2116)			this->head = ret;
HXLINE(2117)			if (hx::IsNull( this->head )) {
HXLINE(2117)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(2120)			old = pre->next;
HXLINE(2121)			ret = old->next;
HXLINE(2122)			pre->next = ret;
HXLINE(2123)			if (hx::IsNull( ret )) {
HXLINE(2123)				this->pushmod = true;
            			}
            		}
HXLINE(2126)		{
HXLINE(2127)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,o) = old;
HXLINE(2136)			o->elt = null();
HXLINE(2137)			o->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXLINE(2138)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = o;
            		}
HXLINE(2143)		this->modified = true;
HXLINE(2144)		this->length--;
HXLINE(2145)		this->pushmod = true;
HXLINE(2146)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_Constraint ZNPList_ZPP_Constraint_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_Constraint pre,int n){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2148_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(2149)		while(true){
HXLINE(2149)			bool _hx_tmp;
HXDLIN(2149)			n = (n - (int)1);
HXDLIN(2149)			if (((n + (int)1) > (int)0)) {
HXLINE(2149)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(2149)				_hx_tmp = false;
            			}
HXDLIN(2149)			if (!(_hx_tmp)) {
HXLINE(2149)				goto _hx_goto_23;
            			}
HXDLIN(2149)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(2150)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_Constraint_obj,splice,return )

void ZNPList_ZPP_Constraint_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2153_clear)
            	HX_STACK_THIS(this)
HXLINE(2153)		while(hx::IsNotNull( this->head )){
HXLINE(2153)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret) = this->head;
HXDLIN(2153)			this->head = ret->next;
HXDLIN(2153)			{
HXLINE(2153)				ret->elt = null();
HXDLIN(2153)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(2153)				::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret;
            			}
HXDLIN(2153)			if (hx::IsNull( this->head )) {
HXLINE(2153)				this->pushmod = true;
            			}
HXDLIN(2153)			this->modified = true;
HXDLIN(2153)			this->length--;
            		}
HXDLIN(2153)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,clear,(void))

void ZNPList_ZPP_Constraint_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2158_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(2159)		while(hx::IsNotNull( this->head )){
HXLINE(2159)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret) = this->head;
HXDLIN(2159)			this->head = ret->next;
HXDLIN(2159)			{
HXLINE(2159)				ret->elt = null();
HXDLIN(2159)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
HXDLIN(2159)				::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret;
            			}
HXDLIN(2159)			if (hx::IsNull( this->head )) {
HXLINE(2159)				this->pushmod = true;
            			}
HXDLIN(2159)			this->modified = true;
HXDLIN(2159)			this->length--;
            		}
HXLINE(2160)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,inlined_clear,(void))

void ZNPList_ZPP_Constraint_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2163_reverse)
            	HX_STACK_THIS(this)
HXLINE(2164)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cur) = this->head;
HXLINE(2165)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,pre) = null();
HXLINE(2166)		while(hx::IsNotNull( cur )){
HXLINE(2167)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,nx) = cur->next;
HXLINE(2168)			cur->next = pre;
HXLINE(2169)			this->head = cur;
HXLINE(2170)			pre = cur;
HXLINE(2171)			cur = nx;
            		}
HXLINE(2173)		this->modified = true;
HXLINE(2174)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,reverse,(void))

bool ZNPList_ZPP_Constraint_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2179_empty)
            	HX_STACK_THIS(this)
HXLINE(2179)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,empty,return )

int ZNPList_ZPP_Constraint_obj::size(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2184_size)
            	HX_STACK_THIS(this)
HXLINE(2184)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,size,return )

bool ZNPList_ZPP_Constraint_obj::has( ::zpp_nape::constraint::ZPP_Constraint obj){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2187_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2187)		HX_VAR( bool,ret);
HXDLIN(2187)		{
HXLINE(2187)			ret = false;
HXDLIN(2187)			{
HXLINE(2187)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cx_ite) = this->head;
HXDLIN(2187)				while(hx::IsNotNull( cx_ite )){
HXLINE(2187)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(2187)						ret = true;
HXDLIN(2187)						goto _hx_goto_33;
            					}
HXDLIN(2187)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(2187)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,has,return )

bool ZNPList_ZPP_Constraint_obj::inlined_has( ::zpp_nape::constraint::ZPP_Constraint obj){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2191_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2200)		HX_VAR( bool,ret);
HXLINE(2201)		{
HXLINE(2202)			ret = false;
HXLINE(2203)			{
HXLINE(2204)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cx_ite) = this->head;
HXLINE(2205)				while(hx::IsNotNull( cx_ite )){
HXLINE(2208)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(2209)						ret = true;
HXLINE(2210)						goto _hx_goto_35;
            					}
HXLINE(2213)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(2217)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,inlined_has,return )

 ::zpp_nape::constraint::ZPP_Constraint ZNPList_ZPP_Constraint_obj::front(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2222_front)
            	HX_STACK_THIS(this)
HXLINE(2222)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,front,return )

 ::zpp_nape::constraint::ZPP_Constraint ZNPList_ZPP_Constraint_obj::back(){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2224_back)
            	HX_STACK_THIS(this)
HXLINE(2225)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret) = this->head;
HXLINE(2226)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cur) = ret;
HXLINE(2227)		while(hx::IsNotNull( cur )){
HXLINE(2228)			ret = cur;
HXLINE(2229)			cur = cur->next;
            		}
HXLINE(2231)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_Constraint_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_Constraint ZNPList_ZPP_Constraint_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2233_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(2242)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,ret) = this->head;
HXLINE(2243)		while(true){
HXLINE(2243)			bool _hx_tmp;
HXDLIN(2243)			ind = (ind - (int)1);
HXDLIN(2243)			if (((ind + (int)1) > (int)0)) {
HXLINE(2243)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(2243)				_hx_tmp = false;
            			}
HXDLIN(2243)			if (!(_hx_tmp)) {
HXLINE(2243)				goto _hx_goto_40;
            			}
HXDLIN(2243)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(2244)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,iterator_at,return )

 ::zpp_nape::constraint::ZPP_Constraint ZNPList_ZPP_Constraint_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_40ebcaacba1c753e_2246_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(2255)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,it) = this->iterator_at(ind);
HXLINE(2256)		if (hx::IsNotNull( it )) {
HXLINE(2256)			return it->elt;
            		}
            		else {
HXLINE(2256)			return null();
            		}
HXDLIN(2256)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_Constraint_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_Constraint_obj > ZNPList_ZPP_Constraint_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_Constraint_obj > __this = new ZNPList_ZPP_Constraint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_Constraint_obj > ZNPList_ZPP_Constraint_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_Constraint_obj *__this = (ZNPList_ZPP_Constraint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_Constraint_obj), true, "zpp_nape.util.ZNPList_ZPP_Constraint"));
	*(void **)__this = ZNPList_ZPP_Constraint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_Constraint_obj::ZNPList_ZPP_Constraint_obj()
{
}

void ZNPList_ZPP_Constraint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_Constraint);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_Constraint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_Constraint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_Constraint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_Constraint >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_Constraint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_Constraint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_Constraint*/ ,(int)offsetof(ZNPList_ZPP_Constraint_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Constraint_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_Constraint_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_Constraint_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_Constraint_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_Constraint_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_Constraint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_Constraint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_Constraint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_Constraint_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_Constraint_obj::__mClass;

void ZNPList_ZPP_Constraint_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_Constraint_obj;
	ZNPList_ZPP_Constraint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_Constraint","\xd2","\x37","\xaf","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_Constraint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_Constraint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_Constraint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_Constraint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_Constraint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_Constraint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
