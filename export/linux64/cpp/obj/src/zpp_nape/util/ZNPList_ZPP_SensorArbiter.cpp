// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPList_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11434_new,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","new",0xa534566c,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.new","zpp_nape/util/Lists.hx",11434,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11440_begin,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","begin",0xb2ed0b35,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.begin","zpp_nape/util/Lists.hx",11440,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11447_setbegin,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","setbegin",0x791ef1bb,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.setbegin","zpp_nape/util/Lists.hx",11447,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11453_add,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","add",0xa52a782d,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.add","zpp_nape/util/Lists.hx",11453,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11457_inlined_add,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_add",0xc755be99,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_add","zpp_nape/util/Lists.hx",11457,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11503_addAll,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","addAll",0xe0a0d2f4,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.addAll","zpp_nape/util/Lists.hx",11503,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11513_insert,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","insert",0xdf830cad,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.insert","zpp_nape/util/Lists.hx",11513,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11517_inlined_insert,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_insert",0xb68a91c1,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_insert","zpp_nape/util/Lists.hx",11517,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11561_pop,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","pop",0xa535e39d,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.pop","zpp_nape/util/Lists.hx",11561,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11565_inlined_pop,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_pop",0xc7612a09,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_pop","zpp_nape/util/Lists.hx",11565,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11599_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","pop_unsafe",0x43260fc8,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.pop_unsafe","zpp_nape/util/Lists.hx",11599,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11603_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_pop_unsafe",0x78d7aedc,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_pop_unsafe","zpp_nape/util/Lists.hx",11603,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11625_remove,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","remove",0x462e65b8,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.remove","zpp_nape/util/Lists.hx",11625,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11627_try_remove,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","try_remove",0x5a50457c,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.try_remove","zpp_nape/util/Lists.hx",11627,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11661_inlined_remove,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_remove",0x1d35eacc,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_remove","zpp_nape/util/Lists.hx",11661,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11665_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_try_remove",0x9001e490,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_try_remove","zpp_nape/util/Lists.hx",11665,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11689_erase,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","erase",0x75b409f2,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.erase","zpp_nape/util/Lists.hx",11689,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11693_inlined_erase,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_erase",0xee0ec35e,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_erase","zpp_nape/util/Lists.hx",11693,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11739_splice,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","splice",0x01444ef0,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.splice","zpp_nape/util/Lists.hx",11739,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11744_clear,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","clear",0x4af29299,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.clear","zpp_nape/util/Lists.hx",11744,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11749_inlined_clear,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_clear",0xc34d4c05,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_clear","zpp_nape/util/Lists.hx",11749,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11754_reverse,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","reverse",0x4a66b52e,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.reverse","zpp_nape/util/Lists.hx",11754,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11770_empty,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","empty",0x72715b99,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.empty","zpp_nape/util/Lists.hx",11770,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11775_size,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","size",0xebe86535,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.size","zpp_nape/util/Lists.hx",11775,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11778_has,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","has",0xa52fc566,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.has","zpp_nape/util/Lists.hx",11778,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11782_inlined_has,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","inlined_has",0xc75b0bd2,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.inlined_has","zpp_nape/util/Lists.hx",11782,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11813_front,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","front",0x092539b5,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.front","zpp_nape/util/Lists.hx",11813,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11815_back,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","back",0xe0a59e9b,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.back","zpp_nape/util/Lists.hx",11815,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11824_iterator_at,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","iterator_at",0xcbf9fbf0,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.iterator_at","zpp_nape/util/Lists.hx",11824,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_462a8325dff4f47d_11837_at,"zpp_nape.util.ZNPList_ZPP_SensorArbiter","at",0x523f5467,"zpp_nape.util.ZNPList_ZPP_SensorArbiter.at","zpp_nape/util/Lists.hx",11837,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_SensorArbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11434_new)
            	HX_STACK_THIS(this)
HXLINE(11444)		this->length = (int)0;
HXLINE(11443)		this->pushmod = false;
HXLINE(11442)		this->modified = false;
HXLINE(11435)		this->head = null();
            	}

Dynamic ZNPList_ZPP_SensorArbiter_obj::__CreateEmpty() { return new ZNPList_ZPP_SensorArbiter_obj; }

void *ZNPList_ZPP_SensorArbiter_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_SensorArbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_SensorArbiter_obj > _hx_result = new ZNPList_ZPP_SensorArbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_SensorArbiter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x60c743b6;
}

 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11440_begin)
            	HX_STACK_THIS(this)
HXLINE(11440)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,begin,return )

void ZNPList_ZPP_SensorArbiter_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter i){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11447_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(11448)		this->head = i;
HXLINE(11449)		this->modified = true;
HXLINE(11450)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,setbegin,(void))

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::add( ::zpp_nape::dynamics::ZPP_SensorArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_462a8325dff4f47d_11453_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(11453)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXDLIN(11453)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(11453)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11453)			ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11453)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
HXDLIN(11453)			ret->next = null();
            		}
HXDLIN(11453)		ret->elt = o;
HXDLIN(11453)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,temp) = ret;
HXDLIN(11453)		temp->next = this->head;
HXDLIN(11453)		this->head = temp;
HXDLIN(11453)		this->modified = true;
HXDLIN(11453)		this->length++;
HXDLIN(11453)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,add,return )

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::inlined_add( ::zpp_nape::dynamics::ZPP_SensorArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_462a8325dff4f47d_11457_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(11467)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXLINE(11469)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(11470)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11476)			ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXLINE(11477)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
HXLINE(11478)			ret->next = null();
            		}
HXLINE(11485)		ret->elt = o;
HXLINE(11466)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,temp) = ret;
HXLINE(11488)		temp->next = this->head;
HXLINE(11489)		this->head = temp;
HXLINE(11490)		this->modified = true;
HXLINE(11491)		this->length++;
HXLINE(11492)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,inlined_add,return )

void ZNPList_ZPP_SensorArbiter_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_SensorArbiter x){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11503_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(11504)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cx_ite) = x->head;
HXLINE(11505)		while(hx::IsNotNull( cx_ite )){
HXLINE(11507)			this->add(cx_ite->elt);
HXLINE(11508)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter cur, ::zpp_nape::dynamics::ZPP_SensorArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_462a8325dff4f47d_11513_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(11513)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXDLIN(11513)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(11513)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11513)			ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11513)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
HXDLIN(11513)			ret->next = null();
            		}
HXDLIN(11513)		ret->elt = o;
HXDLIN(11513)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,temp) = ret;
HXDLIN(11513)		if (hx::IsNull( cur )) {
HXLINE(11513)			temp->next = this->head;
HXDLIN(11513)			this->head = temp;
            		}
            		else {
HXLINE(11513)			temp->next = cur->next;
HXDLIN(11513)			cur->next = temp;
            		}
HXDLIN(11513)		this->pushmod = (this->modified = true);
HXDLIN(11513)		this->length++;
HXDLIN(11513)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SensorArbiter_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter cur, ::zpp_nape::dynamics::ZPP_SensorArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_462a8325dff4f47d_11517_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(11527)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXLINE(11529)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )) {
HXLINE(11530)			ret =  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(11536)			ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXLINE(11537)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
HXLINE(11538)			ret->next = null();
            		}
HXLINE(11545)		ret->elt = o;
HXLINE(11526)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,temp) = ret;
HXLINE(11548)		if (hx::IsNull( cur )) {
HXLINE(11549)			temp->next = this->head;
HXLINE(11550)			this->head = temp;
            		}
            		else {
HXLINE(11553)			temp->next = cur->next;
HXLINE(11554)			cur->next = temp;
            		}
HXLINE(11556)		this->pushmod = (this->modified = true);
HXLINE(11557)		this->length++;
HXLINE(11558)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SensorArbiter_obj,inlined_insert,return )

void ZNPList_ZPP_SensorArbiter_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11561_pop)
            	HX_STACK_THIS(this)
HXLINE(11561)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret) = this->head;
HXDLIN(11561)		this->head = ret->next;
HXDLIN(11561)		{
HXLINE(11561)			ret->elt = null();
HXDLIN(11561)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11561)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret;
            		}
HXDLIN(11561)		if (hx::IsNull( this->head )) {
HXLINE(11561)			this->pushmod = true;
            		}
HXDLIN(11561)		this->modified = true;
HXDLIN(11561)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,pop,(void))

void ZNPList_ZPP_SensorArbiter_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11565_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(11574)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret) = this->head;
HXLINE(11575)		this->head = ret->next;
HXLINE(11577)		{
HXLINE(11587)			ret->elt = null();
HXLINE(11588)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXLINE(11589)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret;
            		}
HXLINE(11594)		if (hx::IsNull( this->head )) {
HXLINE(11594)			this->pushmod = true;
            		}
HXLINE(11595)		this->modified = true;
HXLINE(11596)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,inlined_pop,(void))

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11599_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(11599)		HX_VARI(  ::zpp_nape::dynamics::ZPP_SensorArbiter,ret) = this->head->elt;
HXDLIN(11599)		this->pop();
HXDLIN(11599)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,pop_unsafe,return )

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11603_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(11612)		HX_VARI(  ::zpp_nape::dynamics::ZPP_SensorArbiter,ret) = this->head->elt;
HXLINE(11613)		this->pop();
HXLINE(11614)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_SensorArbiter_obj::remove( ::zpp_nape::dynamics::ZPP_SensorArbiter obj){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11625_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(11625)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,pre) = null();
HXDLIN(11625)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cur) = this->head;
HXDLIN(11625)		while(hx::IsNotNull( cur )){
HXLINE(11625)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(11625)				{
HXLINE(11625)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,old);
HXDLIN(11625)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXDLIN(11625)					if (hx::IsNull( pre )) {
HXLINE(11625)						old = this->head;
HXDLIN(11625)						ret = old->next;
HXDLIN(11625)						this->head = ret;
HXDLIN(11625)						if (hx::IsNull( this->head )) {
HXLINE(11625)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(11625)						old = pre->next;
HXDLIN(11625)						ret = old->next;
HXDLIN(11625)						pre->next = ret;
HXDLIN(11625)						if (hx::IsNull( ret )) {
HXLINE(11625)							this->pushmod = true;
            						}
            					}
HXDLIN(11625)					{
HXLINE(11625)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,o) = old;
HXDLIN(11625)						o->elt = null();
HXDLIN(11625)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11625)						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
            					}
HXDLIN(11625)					this->modified = true;
HXDLIN(11625)					this->length--;
HXDLIN(11625)					this->pushmod = true;
            				}
HXDLIN(11625)				goto _hx_goto_13;
            			}
HXDLIN(11625)			pre = cur;
HXDLIN(11625)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,remove,(void))

bool ZNPList_ZPP_SensorArbiter_obj::try_remove( ::zpp_nape::dynamics::ZPP_SensorArbiter obj){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11627_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(11636)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,pre) = null();
HXLINE(11637)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cur) = this->head;
HXLINE(11638)		HX_VARI( bool,ret) = false;
HXLINE(11639)		while(hx::IsNotNull( cur )){
HXLINE(11640)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(11641)				this->erase(pre);
HXLINE(11642)				ret = true;
HXLINE(11643)				goto _hx_goto_15;
            			}
HXLINE(11645)			pre = cur;
HXLINE(11646)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(11648)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,try_remove,return )

void ZNPList_ZPP_SensorArbiter_obj::inlined_remove( ::zpp_nape::dynamics::ZPP_SensorArbiter obj){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11661_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(11661)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,pre) = null();
HXDLIN(11661)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cur) = this->head;
HXDLIN(11661)		while(hx::IsNotNull( cur )){
HXLINE(11661)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(11661)				{
HXLINE(11661)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,old);
HXDLIN(11661)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXDLIN(11661)					if (hx::IsNull( pre )) {
HXLINE(11661)						old = this->head;
HXDLIN(11661)						ret = old->next;
HXDLIN(11661)						this->head = ret;
HXDLIN(11661)						if (hx::IsNull( this->head )) {
HXLINE(11661)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(11661)						old = pre->next;
HXDLIN(11661)						ret = old->next;
HXDLIN(11661)						pre->next = ret;
HXDLIN(11661)						if (hx::IsNull( ret )) {
HXLINE(11661)							this->pushmod = true;
            						}
            					}
HXDLIN(11661)					{
HXLINE(11661)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,o) = old;
HXDLIN(11661)						o->elt = null();
HXDLIN(11661)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11661)						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
            					}
HXDLIN(11661)					this->modified = true;
HXDLIN(11661)					this->length--;
HXDLIN(11661)					this->pushmod = true;
            				}
HXDLIN(11661)				goto _hx_goto_17;
            			}
HXDLIN(11661)			pre = cur;
HXDLIN(11661)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,inlined_remove,(void))

bool ZNPList_ZPP_SensorArbiter_obj::inlined_try_remove( ::zpp_nape::dynamics::ZPP_SensorArbiter obj){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11665_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(11674)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,pre) = null();
HXLINE(11675)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cur) = this->head;
HXLINE(11676)		HX_VARI( bool,ret) = false;
HXLINE(11677)		while(hx::IsNotNull( cur )){
HXLINE(11678)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(11679)				{
HXLINE(11679)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,old);
HXDLIN(11679)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret1,"ret");
HXDLIN(11679)					if (hx::IsNull( pre )) {
HXLINE(11679)						old = this->head;
HXDLIN(11679)						ret1 = old->next;
HXDLIN(11679)						this->head = ret1;
HXDLIN(11679)						if (hx::IsNull( this->head )) {
HXLINE(11679)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(11679)						old = pre->next;
HXDLIN(11679)						ret1 = old->next;
HXDLIN(11679)						pre->next = ret1;
HXDLIN(11679)						if (hx::IsNull( ret1 )) {
HXLINE(11679)							this->pushmod = true;
            						}
            					}
HXDLIN(11679)					{
HXLINE(11679)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,o) = old;
HXDLIN(11679)						o->elt = null();
HXDLIN(11679)						o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11679)						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
            					}
HXDLIN(11679)					this->modified = true;
HXDLIN(11679)					this->length--;
HXDLIN(11679)					this->pushmod = true;
            				}
HXLINE(11680)				ret = true;
HXLINE(11681)				goto _hx_goto_19;
            			}
HXLINE(11683)			pre = cur;
HXLINE(11684)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(11686)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11689_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(11689)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,old);
HXDLIN(11689)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXDLIN(11689)		if (hx::IsNull( pre )) {
HXLINE(11689)			old = this->head;
HXDLIN(11689)			ret = old->next;
HXDLIN(11689)			this->head = ret;
HXDLIN(11689)			if (hx::IsNull( this->head )) {
HXLINE(11689)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(11689)			old = pre->next;
HXDLIN(11689)			ret = old->next;
HXDLIN(11689)			pre->next = ret;
HXDLIN(11689)			if (hx::IsNull( ret )) {
HXLINE(11689)				this->pushmod = true;
            			}
            		}
HXDLIN(11689)		{
HXLINE(11689)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,o) = old;
HXDLIN(11689)			o->elt = null();
HXDLIN(11689)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11689)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
            		}
HXDLIN(11689)		this->modified = true;
HXDLIN(11689)		this->length--;
HXDLIN(11689)		this->pushmod = true;
HXDLIN(11689)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11693_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(11702)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,old);
HXLINE(11703)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret);
HXLINE(11704)		if (hx::IsNull( pre )) {
HXLINE(11705)			old = this->head;
HXLINE(11706)			ret = old->next;
HXLINE(11707)			this->head = ret;
HXLINE(11708)			if (hx::IsNull( this->head )) {
HXLINE(11708)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(11711)			old = pre->next;
HXLINE(11712)			ret = old->next;
HXLINE(11713)			pre->next = ret;
HXLINE(11714)			if (hx::IsNull( ret )) {
HXLINE(11714)				this->pushmod = true;
            			}
            		}
HXLINE(11717)		{
HXLINE(11718)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,o) = old;
HXLINE(11727)			o->elt = null();
HXLINE(11728)			o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXLINE(11729)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
            		}
HXLINE(11734)		this->modified = true;
HXLINE(11735)		this->length--;
HXLINE(11736)		this->pushmod = true;
HXLINE(11737)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre,int n){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11739_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(11740)		while(true){
HXLINE(11740)			bool _hx_tmp;
HXDLIN(11740)			n = (n - (int)1);
HXDLIN(11740)			if (((n + (int)1) > (int)0)) {
HXLINE(11740)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(11740)				_hx_tmp = false;
            			}
HXDLIN(11740)			if (!(_hx_tmp)) {
HXLINE(11740)				goto _hx_goto_23;
            			}
HXDLIN(11740)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(11741)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_SensorArbiter_obj,splice,return )

void ZNPList_ZPP_SensorArbiter_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11744_clear)
            	HX_STACK_THIS(this)
HXLINE(11744)		while(hx::IsNotNull( this->head )){
HXLINE(11744)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret) = this->head;
HXDLIN(11744)			this->head = ret->next;
HXDLIN(11744)			{
HXLINE(11744)				ret->elt = null();
HXDLIN(11744)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11744)				::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret;
            			}
HXDLIN(11744)			if (hx::IsNull( this->head )) {
HXLINE(11744)				this->pushmod = true;
            			}
HXDLIN(11744)			this->modified = true;
HXDLIN(11744)			this->length--;
            		}
HXDLIN(11744)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,clear,(void))

void ZNPList_ZPP_SensorArbiter_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11749_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(11750)		while(hx::IsNotNull( this->head )){
HXLINE(11750)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret) = this->head;
HXDLIN(11750)			this->head = ret->next;
HXDLIN(11750)			{
HXLINE(11750)				ret->elt = null();
HXDLIN(11750)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
HXDLIN(11750)				::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret;
            			}
HXDLIN(11750)			if (hx::IsNull( this->head )) {
HXLINE(11750)				this->pushmod = true;
            			}
HXDLIN(11750)			this->modified = true;
HXDLIN(11750)			this->length--;
            		}
HXLINE(11751)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,inlined_clear,(void))

void ZNPList_ZPP_SensorArbiter_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11754_reverse)
            	HX_STACK_THIS(this)
HXLINE(11755)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cur) = this->head;
HXLINE(11756)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,pre) = null();
HXLINE(11757)		while(hx::IsNotNull( cur )){
HXLINE(11758)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,nx) = cur->next;
HXLINE(11759)			cur->next = pre;
HXLINE(11760)			this->head = cur;
HXLINE(11761)			pre = cur;
HXLINE(11762)			cur = nx;
            		}
HXLINE(11764)		this->modified = true;
HXLINE(11765)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,reverse,(void))

bool ZNPList_ZPP_SensorArbiter_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11770_empty)
            	HX_STACK_THIS(this)
HXLINE(11770)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,empty,return )

int ZNPList_ZPP_SensorArbiter_obj::size(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11775_size)
            	HX_STACK_THIS(this)
HXLINE(11775)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,size,return )

bool ZNPList_ZPP_SensorArbiter_obj::has( ::zpp_nape::dynamics::ZPP_SensorArbiter obj){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11778_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(11778)		HX_VAR( bool,ret);
HXDLIN(11778)		{
HXLINE(11778)			ret = false;
HXDLIN(11778)			{
HXLINE(11778)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cx_ite) = this->head;
HXDLIN(11778)				while(hx::IsNotNull( cx_ite )){
HXLINE(11778)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(11778)						ret = true;
HXDLIN(11778)						goto _hx_goto_33;
            					}
HXDLIN(11778)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(11778)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,has,return )

bool ZNPList_ZPP_SensorArbiter_obj::inlined_has( ::zpp_nape::dynamics::ZPP_SensorArbiter obj){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11782_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(11791)		HX_VAR( bool,ret);
HXLINE(11792)		{
HXLINE(11793)			ret = false;
HXLINE(11794)			{
HXLINE(11795)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cx_ite) = this->head;
HXLINE(11796)				while(hx::IsNotNull( cx_ite )){
HXLINE(11799)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(11800)						ret = true;
HXLINE(11801)						goto _hx_goto_35;
            					}
HXLINE(11804)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(11808)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,inlined_has,return )

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::front(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11813_front)
            	HX_STACK_THIS(this)
HXLINE(11813)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,front,return )

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::back(){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11815_back)
            	HX_STACK_THIS(this)
HXLINE(11816)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret) = this->head;
HXLINE(11817)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,cur) = ret;
HXLINE(11818)		while(hx::IsNotNull( cur )){
HXLINE(11819)			ret = cur;
HXLINE(11820)			cur = cur->next;
            		}
HXLINE(11822)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_SensorArbiter_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11824_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(11833)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,ret) = this->head;
HXLINE(11834)		while(true){
HXLINE(11834)			bool _hx_tmp;
HXDLIN(11834)			ind = (ind - (int)1);
HXDLIN(11834)			if (((ind + (int)1) > (int)0)) {
HXLINE(11834)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(11834)				_hx_tmp = false;
            			}
HXDLIN(11834)			if (!(_hx_tmp)) {
HXLINE(11834)				goto _hx_goto_40;
            			}
HXDLIN(11834)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(11835)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,iterator_at,return )

 ::zpp_nape::dynamics::ZPP_SensorArbiter ZNPList_ZPP_SensorArbiter_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_462a8325dff4f47d_11837_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(11846)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,it) = this->iterator_at(ind);
HXLINE(11847)		if (hx::IsNotNull( it )) {
HXLINE(11847)			return it->elt;
            		}
            		else {
HXLINE(11847)			return null();
            		}
HXDLIN(11847)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_SensorArbiter_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_SensorArbiter_obj > ZNPList_ZPP_SensorArbiter_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_SensorArbiter_obj > __this = new ZNPList_ZPP_SensorArbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_SensorArbiter_obj > ZNPList_ZPP_SensorArbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_SensorArbiter_obj *__this = (ZNPList_ZPP_SensorArbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_SensorArbiter_obj), true, "zpp_nape.util.ZNPList_ZPP_SensorArbiter"));
	*(void **)__this = ZNPList_ZPP_SensorArbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_SensorArbiter_obj::ZNPList_ZPP_SensorArbiter_obj()
{
}

void ZNPList_ZPP_SensorArbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_SensorArbiter);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_SensorArbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_SensorArbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_SensorArbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_SensorArbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_SensorArbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_SensorArbiter*/ ,(int)offsetof(ZNPList_ZPP_SensorArbiter_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_SensorArbiter_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_SensorArbiter_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_SensorArbiter_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_SensorArbiter_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_SensorArbiter_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_SensorArbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_SensorArbiter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_SensorArbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_SensorArbiter_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_SensorArbiter_obj::__mClass;

void ZNPList_ZPP_SensorArbiter_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_SensorArbiter_obj;
	ZNPList_ZPP_SensorArbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_SensorArbiter","\x7a","\xf0","\xdd","\x69");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_SensorArbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_SensorArbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_SensorArbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_SensorArbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_SensorArbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_SensorArbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
