// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_AABBPair
#include <zpp_nape/util/ZNPList_ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_AABBPair
#include <zpp_nape/util/ZNPNode_ZPP_AABBPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9349_new,"zpp_nape.util.ZNPList_ZPP_AABBPair","new",0x9a71cb61,"zpp_nape.util.ZNPList_ZPP_AABBPair.new","zpp_nape/util/Lists.hx",9349,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9355_begin,"zpp_nape.util.ZNPList_ZPP_AABBPair","begin",0x8a29676a,"zpp_nape.util.ZNPList_ZPP_AABBPair.begin","zpp_nape/util/Lists.hx",9355,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9362_setbegin,"zpp_nape.util.ZNPList_ZPP_AABBPair","setbegin",0xc20c64a6,"zpp_nape.util.ZNPList_ZPP_AABBPair.setbegin","zpp_nape/util/Lists.hx",9362,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9368_add,"zpp_nape.util.ZNPList_ZPP_AABBPair","add",0x9a67ed22,"zpp_nape.util.ZNPList_ZPP_AABBPair.add","zpp_nape/util/Lists.hx",9368,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9372_inlined_add,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_add",0x0630b08e,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_add","zpp_nape/util/Lists.hx",9372,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9418_addAll,"zpp_nape.util.ZNPList_ZPP_AABBPair","addAll",0x5e35251f,"zpp_nape.util.ZNPList_ZPP_AABBPair.addAll","zpp_nape/util/Lists.hx",9418,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9428_insert,"zpp_nape.util.ZNPList_ZPP_AABBPair","insert",0x5d175ed8,"zpp_nape.util.ZNPList_ZPP_AABBPair.insert","zpp_nape/util/Lists.hx",9428,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9432_inlined_insert,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_insert",0xaa4d86ec,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_insert","zpp_nape/util/Lists.hx",9432,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9476_pop,"zpp_nape.util.ZNPList_ZPP_AABBPair","pop",0x9a735892,"zpp_nape.util.ZNPList_ZPP_AABBPair.pop","zpp_nape/util/Lists.hx",9476,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9480_inlined_pop,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_pop",0x063c1bfe,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_pop","zpp_nape/util/Lists.hx",9480,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9514_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_AABBPair","pop_unsafe",0xb8865373,"zpp_nape.util.ZNPList_ZPP_AABBPair.pop_unsafe","zpp_nape/util/Lists.hx",9514,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9518_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_pop_unsafe",0x63f41587,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_pop_unsafe","zpp_nape/util/Lists.hx",9518,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9540_remove,"zpp_nape.util.ZNPList_ZPP_AABBPair","remove",0xc3c2b7e3,"zpp_nape.util.ZNPList_ZPP_AABBPair.remove","zpp_nape/util/Lists.hx",9540,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9542_try_remove,"zpp_nape.util.ZNPList_ZPP_AABBPair","try_remove",0xcfb08927,"zpp_nape.util.ZNPList_ZPP_AABBPair.try_remove","zpp_nape/util/Lists.hx",9542,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9576_inlined_remove,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_remove",0x10f8dff7,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_remove","zpp_nape/util/Lists.hx",9576,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9580_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_try_remove",0x7b1e4b3b,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_try_remove","zpp_nape/util/Lists.hx",9580,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9604_erase,"zpp_nape.util.ZNPList_ZPP_AABBPair","erase",0x4cf06627,"zpp_nape.util.ZNPList_ZPP_AABBPair.erase","zpp_nape/util/Lists.hx",9604,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9608_inlined_erase,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_erase",0xcf01dc93,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_erase","zpp_nape/util/Lists.hx",9608,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9654_splice,"zpp_nape.util.ZNPList_ZPP_AABBPair","splice",0x7ed8a11b,"zpp_nape.util.ZNPList_ZPP_AABBPair.splice","zpp_nape/util/Lists.hx",9654,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9659_clear,"zpp_nape.util.ZNPList_ZPP_AABBPair","clear",0x222eeece,"zpp_nape.util.ZNPList_ZPP_AABBPair.clear","zpp_nape/util/Lists.hx",9659,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9664_inlined_clear,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_clear",0xa440653a,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_clear","zpp_nape/util/Lists.hx",9664,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9669_reverse,"zpp_nape.util.ZNPList_ZPP_AABBPair","reverse",0xae9a48a3,"zpp_nape.util.ZNPList_ZPP_AABBPair.reverse","zpp_nape/util/Lists.hx",9669,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9685_empty,"zpp_nape.util.ZNPList_ZPP_AABBPair","empty",0x49adb7ce,"zpp_nape.util.ZNPList_ZPP_AABBPair.empty","zpp_nape/util/Lists.hx",9685,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9690_size,"zpp_nape.util.ZNPList_ZPP_AABBPair","size",0x8c7146a0,"zpp_nape.util.ZNPList_ZPP_AABBPair.size","zpp_nape/util/Lists.hx",9690,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9693_has,"zpp_nape.util.ZNPList_ZPP_AABBPair","has",0x9a6d3a5b,"zpp_nape.util.ZNPList_ZPP_AABBPair.has","zpp_nape/util/Lists.hx",9693,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9697_inlined_has,"zpp_nape.util.ZNPList_ZPP_AABBPair","inlined_has",0x0635fdc7,"zpp_nape.util.ZNPList_ZPP_AABBPair.inlined_has","zpp_nape/util/Lists.hx",9697,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9728_front,"zpp_nape.util.ZNPList_ZPP_AABBPair","front",0xe06195ea,"zpp_nape.util.ZNPList_ZPP_AABBPair.front","zpp_nape/util/Lists.hx",9728,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9730_back,"zpp_nape.util.ZNPList_ZPP_AABBPair","back",0x812e8006,"zpp_nape.util.ZNPList_ZPP_AABBPair.back","zpp_nape/util/Lists.hx",9730,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9739_iterator_at,"zpp_nape.util.ZNPList_ZPP_AABBPair","iterator_at",0x0ad4ede5,"zpp_nape.util.ZNPList_ZPP_AABBPair.iterator_at","zpp_nape/util/Lists.hx",9739,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_e20c7ed18647cb82_9752_at,"zpp_nape.util.ZNPList_ZPP_AABBPair","at",0x1c3e7512,"zpp_nape.util.ZNPList_ZPP_AABBPair.at","zpp_nape/util/Lists.hx",9752,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_AABBPair_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9349_new)
            	HX_STACK_THIS(this)
HXLINE(9359)		this->length = (int)0;
HXLINE(9358)		this->pushmod = false;
HXLINE(9357)		this->modified = false;
HXLINE(9350)		this->head = null();
            	}

Dynamic ZNPList_ZPP_AABBPair_obj::__CreateEmpty() { return new ZNPList_ZPP_AABBPair_obj; }

void *ZNPList_ZPP_AABBPair_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_AABBPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_AABBPair_obj > _hx_result = new ZNPList_ZPP_AABBPair_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_AABBPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69c5fd33;
}

 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9355_begin)
            	HX_STACK_THIS(this)
HXLINE(9355)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,begin,return )

void ZNPList_ZPP_AABBPair_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_AABBPair i){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9362_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(9363)		this->head = i;
HXLINE(9364)		this->modified = true;
HXLINE(9365)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,setbegin,(void))

 ::zpp_nape::space::ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::add( ::zpp_nape::space::ZPP_AABBPair o){
            	HX_GC_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9368_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(9368)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXDLIN(9368)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(9368)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9368)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9368)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret->next;
HXDLIN(9368)			ret->next = null();
            		}
HXDLIN(9368)		ret->elt = o;
HXDLIN(9368)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,temp) = ret;
HXDLIN(9368)		temp->next = this->head;
HXDLIN(9368)		this->head = temp;
HXDLIN(9368)		this->modified = true;
HXDLIN(9368)		this->length++;
HXDLIN(9368)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,add,return )

 ::zpp_nape::space::ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::inlined_add( ::zpp_nape::space::ZPP_AABBPair o){
            	HX_GC_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9372_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(9382)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXLINE(9384)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(9385)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9391)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXLINE(9392)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret->next;
HXLINE(9393)			ret->next = null();
            		}
HXLINE(9400)		ret->elt = o;
HXLINE(9381)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,temp) = ret;
HXLINE(9403)		temp->next = this->head;
HXLINE(9404)		this->head = temp;
HXLINE(9405)		this->modified = true;
HXLINE(9406)		this->length++;
HXLINE(9407)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,inlined_add,return )

void ZNPList_ZPP_AABBPair_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_AABBPair x){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9418_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(9419)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cx_ite) = x->head;
HXLINE(9420)		while(hx::IsNotNull( cx_ite )){
HXLINE(9422)			this->add(cx_ite->elt);
HXLINE(9423)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_AABBPair cur, ::zpp_nape::space::ZPP_AABBPair o){
            	HX_GC_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9428_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(9428)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXDLIN(9428)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(9428)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9428)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9428)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret->next;
HXDLIN(9428)			ret->next = null();
            		}
HXDLIN(9428)		ret->elt = o;
HXDLIN(9428)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,temp) = ret;
HXDLIN(9428)		if (hx::IsNull( cur )) {
HXLINE(9428)			temp->next = this->head;
HXDLIN(9428)			this->head = temp;
            		}
            		else {
HXLINE(9428)			temp->next = cur->next;
HXDLIN(9428)			cur->next = temp;
            		}
HXDLIN(9428)		this->pushmod = (this->modified = true);
HXDLIN(9428)		this->length++;
HXDLIN(9428)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_AABBPair_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_AABBPair cur, ::zpp_nape::space::ZPP_AABBPair o){
            	HX_GC_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9432_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(9442)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXLINE(9444)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )) {
HXLINE(9445)			ret =  ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(9451)			ret = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXLINE(9452)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret->next;
HXLINE(9453)			ret->next = null();
            		}
HXLINE(9460)		ret->elt = o;
HXLINE(9441)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,temp) = ret;
HXLINE(9463)		if (hx::IsNull( cur )) {
HXLINE(9464)			temp->next = this->head;
HXLINE(9465)			this->head = temp;
            		}
            		else {
HXLINE(9468)			temp->next = cur->next;
HXLINE(9469)			cur->next = temp;
            		}
HXLINE(9471)		this->pushmod = (this->modified = true);
HXLINE(9472)		this->length++;
HXLINE(9473)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_AABBPair_obj,inlined_insert,return )

void ZNPList_ZPP_AABBPair_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9476_pop)
            	HX_STACK_THIS(this)
HXLINE(9476)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret) = this->head;
HXDLIN(9476)		this->head = ret->next;
HXDLIN(9476)		{
HXLINE(9476)			ret->elt = null();
HXDLIN(9476)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9476)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret;
            		}
HXDLIN(9476)		if (hx::IsNull( this->head )) {
HXLINE(9476)			this->pushmod = true;
            		}
HXDLIN(9476)		this->modified = true;
HXDLIN(9476)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,pop,(void))

void ZNPList_ZPP_AABBPair_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9480_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(9489)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret) = this->head;
HXLINE(9490)		this->head = ret->next;
HXLINE(9492)		{
HXLINE(9502)			ret->elt = null();
HXLINE(9503)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXLINE(9504)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret;
            		}
HXLINE(9509)		if (hx::IsNull( this->head )) {
HXLINE(9509)			this->pushmod = true;
            		}
HXLINE(9510)		this->modified = true;
HXLINE(9511)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,inlined_pop,(void))

 ::zpp_nape::space::ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9514_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(9514)		HX_VARI(  ::zpp_nape::space::ZPP_AABBPair,ret) = this->head->elt;
HXDLIN(9514)		this->pop();
HXDLIN(9514)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,pop_unsafe,return )

 ::zpp_nape::space::ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9518_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(9527)		HX_VARI(  ::zpp_nape::space::ZPP_AABBPair,ret) = this->head->elt;
HXLINE(9528)		this->pop();
HXLINE(9529)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_AABBPair_obj::remove( ::zpp_nape::space::ZPP_AABBPair obj){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9540_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9540)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,pre) = null();
HXDLIN(9540)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cur) = this->head;
HXDLIN(9540)		while(hx::IsNotNull( cur )){
HXLINE(9540)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9540)				{
HXLINE(9540)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,old);
HXDLIN(9540)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXDLIN(9540)					if (hx::IsNull( pre )) {
HXLINE(9540)						old = this->head;
HXDLIN(9540)						ret = old->next;
HXDLIN(9540)						this->head = ret;
HXDLIN(9540)						if (hx::IsNull( this->head )) {
HXLINE(9540)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(9540)						old = pre->next;
HXDLIN(9540)						ret = old->next;
HXDLIN(9540)						pre->next = ret;
HXDLIN(9540)						if (hx::IsNull( ret )) {
HXLINE(9540)							this->pushmod = true;
            						}
            					}
HXDLIN(9540)					{
HXLINE(9540)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,o) = old;
HXDLIN(9540)						o->elt = null();
HXDLIN(9540)						o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9540)						::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o;
            					}
HXDLIN(9540)					this->modified = true;
HXDLIN(9540)					this->length--;
HXDLIN(9540)					this->pushmod = true;
            				}
HXDLIN(9540)				goto _hx_goto_13;
            			}
HXDLIN(9540)			pre = cur;
HXDLIN(9540)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,remove,(void))

bool ZNPList_ZPP_AABBPair_obj::try_remove( ::zpp_nape::space::ZPP_AABBPair obj){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9542_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9551)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,pre) = null();
HXLINE(9552)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cur) = this->head;
HXLINE(9553)		HX_VARI( bool,ret) = false;
HXLINE(9554)		while(hx::IsNotNull( cur )){
HXLINE(9555)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9556)				this->erase(pre);
HXLINE(9557)				ret = true;
HXLINE(9558)				goto _hx_goto_15;
            			}
HXLINE(9560)			pre = cur;
HXLINE(9561)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(9563)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,try_remove,return )

void ZNPList_ZPP_AABBPair_obj::inlined_remove( ::zpp_nape::space::ZPP_AABBPair obj){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9576_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9576)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,pre) = null();
HXDLIN(9576)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cur) = this->head;
HXDLIN(9576)		while(hx::IsNotNull( cur )){
HXLINE(9576)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9576)				{
HXLINE(9576)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,old);
HXDLIN(9576)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXDLIN(9576)					if (hx::IsNull( pre )) {
HXLINE(9576)						old = this->head;
HXDLIN(9576)						ret = old->next;
HXDLIN(9576)						this->head = ret;
HXDLIN(9576)						if (hx::IsNull( this->head )) {
HXLINE(9576)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(9576)						old = pre->next;
HXDLIN(9576)						ret = old->next;
HXDLIN(9576)						pre->next = ret;
HXDLIN(9576)						if (hx::IsNull( ret )) {
HXLINE(9576)							this->pushmod = true;
            						}
            					}
HXDLIN(9576)					{
HXLINE(9576)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,o) = old;
HXDLIN(9576)						o->elt = null();
HXDLIN(9576)						o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9576)						::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o;
            					}
HXDLIN(9576)					this->modified = true;
HXDLIN(9576)					this->length--;
HXDLIN(9576)					this->pushmod = true;
            				}
HXDLIN(9576)				goto _hx_goto_17;
            			}
HXDLIN(9576)			pre = cur;
HXDLIN(9576)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,inlined_remove,(void))

bool ZNPList_ZPP_AABBPair_obj::inlined_try_remove( ::zpp_nape::space::ZPP_AABBPair obj){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9580_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9589)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,pre) = null();
HXLINE(9590)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cur) = this->head;
HXLINE(9591)		HX_VARI( bool,ret) = false;
HXLINE(9592)		while(hx::IsNotNull( cur )){
HXLINE(9593)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(9594)				{
HXLINE(9594)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,old);
HXDLIN(9594)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret1,"ret");
HXDLIN(9594)					if (hx::IsNull( pre )) {
HXLINE(9594)						old = this->head;
HXDLIN(9594)						ret1 = old->next;
HXDLIN(9594)						this->head = ret1;
HXDLIN(9594)						if (hx::IsNull( this->head )) {
HXLINE(9594)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(9594)						old = pre->next;
HXDLIN(9594)						ret1 = old->next;
HXDLIN(9594)						pre->next = ret1;
HXDLIN(9594)						if (hx::IsNull( ret1 )) {
HXLINE(9594)							this->pushmod = true;
            						}
            					}
HXDLIN(9594)					{
HXLINE(9594)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,o) = old;
HXDLIN(9594)						o->elt = null();
HXDLIN(9594)						o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9594)						::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o;
            					}
HXDLIN(9594)					this->modified = true;
HXDLIN(9594)					this->length--;
HXDLIN(9594)					this->pushmod = true;
            				}
HXLINE(9595)				ret = true;
HXLINE(9596)				goto _hx_goto_19;
            			}
HXLINE(9598)			pre = cur;
HXLINE(9599)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(9601)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_AABBPair pre){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9604_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(9604)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,old);
HXDLIN(9604)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXDLIN(9604)		if (hx::IsNull( pre )) {
HXLINE(9604)			old = this->head;
HXDLIN(9604)			ret = old->next;
HXDLIN(9604)			this->head = ret;
HXDLIN(9604)			if (hx::IsNull( this->head )) {
HXLINE(9604)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(9604)			old = pre->next;
HXDLIN(9604)			ret = old->next;
HXDLIN(9604)			pre->next = ret;
HXDLIN(9604)			if (hx::IsNull( ret )) {
HXLINE(9604)				this->pushmod = true;
            			}
            		}
HXDLIN(9604)		{
HXLINE(9604)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,o) = old;
HXDLIN(9604)			o->elt = null();
HXDLIN(9604)			o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9604)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o;
            		}
HXDLIN(9604)		this->modified = true;
HXDLIN(9604)		this->length--;
HXDLIN(9604)		this->pushmod = true;
HXDLIN(9604)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_AABBPair pre){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9608_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(9617)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,old);
HXLINE(9618)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret);
HXLINE(9619)		if (hx::IsNull( pre )) {
HXLINE(9620)			old = this->head;
HXLINE(9621)			ret = old->next;
HXLINE(9622)			this->head = ret;
HXLINE(9623)			if (hx::IsNull( this->head )) {
HXLINE(9623)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(9626)			old = pre->next;
HXLINE(9627)			ret = old->next;
HXLINE(9628)			pre->next = ret;
HXLINE(9629)			if (hx::IsNull( ret )) {
HXLINE(9629)				this->pushmod = true;
            			}
            		}
HXLINE(9632)		{
HXLINE(9633)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,o) = old;
HXLINE(9642)			o->elt = null();
HXLINE(9643)			o->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXLINE(9644)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = o;
            		}
HXLINE(9649)		this->modified = true;
HXLINE(9650)		this->length--;
HXLINE(9651)		this->pushmod = true;
HXLINE(9652)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_AABBPair pre,int n){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9654_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(9655)		while(true){
HXLINE(9655)			bool _hx_tmp;
HXDLIN(9655)			n = (n - (int)1);
HXDLIN(9655)			if (((n + (int)1) > (int)0)) {
HXLINE(9655)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(9655)				_hx_tmp = false;
            			}
HXDLIN(9655)			if (!(_hx_tmp)) {
HXLINE(9655)				goto _hx_goto_23;
            			}
HXDLIN(9655)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(9656)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_AABBPair_obj,splice,return )

void ZNPList_ZPP_AABBPair_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9659_clear)
            	HX_STACK_THIS(this)
HXLINE(9659)		while(hx::IsNotNull( this->head )){
HXLINE(9659)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret) = this->head;
HXDLIN(9659)			this->head = ret->next;
HXDLIN(9659)			{
HXLINE(9659)				ret->elt = null();
HXDLIN(9659)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9659)				::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret;
            			}
HXDLIN(9659)			if (hx::IsNull( this->head )) {
HXLINE(9659)				this->pushmod = true;
            			}
HXDLIN(9659)			this->modified = true;
HXDLIN(9659)			this->length--;
            		}
HXDLIN(9659)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,clear,(void))

void ZNPList_ZPP_AABBPair_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9664_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(9665)		while(hx::IsNotNull( this->head )){
HXLINE(9665)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret) = this->head;
HXDLIN(9665)			this->head = ret->next;
HXDLIN(9665)			{
HXLINE(9665)				ret->elt = null();
HXDLIN(9665)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool;
HXDLIN(9665)				::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = ret;
            			}
HXDLIN(9665)			if (hx::IsNull( this->head )) {
HXLINE(9665)				this->pushmod = true;
            			}
HXDLIN(9665)			this->modified = true;
HXDLIN(9665)			this->length--;
            		}
HXLINE(9666)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,inlined_clear,(void))

void ZNPList_ZPP_AABBPair_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9669_reverse)
            	HX_STACK_THIS(this)
HXLINE(9670)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cur) = this->head;
HXLINE(9671)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,pre) = null();
HXLINE(9672)		while(hx::IsNotNull( cur )){
HXLINE(9673)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,nx) = cur->next;
HXLINE(9674)			cur->next = pre;
HXLINE(9675)			this->head = cur;
HXLINE(9676)			pre = cur;
HXLINE(9677)			cur = nx;
            		}
HXLINE(9679)		this->modified = true;
HXLINE(9680)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,reverse,(void))

bool ZNPList_ZPP_AABBPair_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9685_empty)
            	HX_STACK_THIS(this)
HXLINE(9685)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,empty,return )

int ZNPList_ZPP_AABBPair_obj::size(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9690_size)
            	HX_STACK_THIS(this)
HXLINE(9690)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,size,return )

bool ZNPList_ZPP_AABBPair_obj::has( ::zpp_nape::space::ZPP_AABBPair obj){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9693_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9693)		HX_VAR( bool,ret);
HXDLIN(9693)		{
HXLINE(9693)			ret = false;
HXDLIN(9693)			{
HXLINE(9693)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cx_ite) = this->head;
HXDLIN(9693)				while(hx::IsNotNull( cx_ite )){
HXLINE(9693)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(9693)						ret = true;
HXDLIN(9693)						goto _hx_goto_33;
            					}
HXDLIN(9693)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(9693)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,has,return )

bool ZNPList_ZPP_AABBPair_obj::inlined_has( ::zpp_nape::space::ZPP_AABBPair obj){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9697_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(9706)		HX_VAR( bool,ret);
HXLINE(9707)		{
HXLINE(9708)			ret = false;
HXLINE(9709)			{
HXLINE(9710)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cx_ite) = this->head;
HXLINE(9711)				while(hx::IsNotNull( cx_ite )){
HXLINE(9714)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(9715)						ret = true;
HXLINE(9716)						goto _hx_goto_35;
            					}
HXLINE(9719)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(9723)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,inlined_has,return )

 ::zpp_nape::space::ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::front(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9728_front)
            	HX_STACK_THIS(this)
HXLINE(9728)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,front,return )

 ::zpp_nape::space::ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::back(){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9730_back)
            	HX_STACK_THIS(this)
HXLINE(9731)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret) = this->head;
HXLINE(9732)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,cur) = ret;
HXLINE(9733)		while(hx::IsNotNull( cur )){
HXLINE(9734)			ret = cur;
HXLINE(9735)			cur = cur->next;
            		}
HXLINE(9737)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_AABBPair_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9739_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(9748)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,ret) = this->head;
HXLINE(9749)		while(true){
HXLINE(9749)			bool _hx_tmp;
HXDLIN(9749)			ind = (ind - (int)1);
HXDLIN(9749)			if (((ind + (int)1) > (int)0)) {
HXLINE(9749)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(9749)				_hx_tmp = false;
            			}
HXDLIN(9749)			if (!(_hx_tmp)) {
HXLINE(9749)				goto _hx_goto_40;
            			}
HXDLIN(9749)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(9750)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,iterator_at,return )

 ::zpp_nape::space::ZPP_AABBPair ZNPList_ZPP_AABBPair_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_e20c7ed18647cb82_9752_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(9761)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,it) = this->iterator_at(ind);
HXLINE(9762)		if (hx::IsNotNull( it )) {
HXLINE(9762)			return it->elt;
            		}
            		else {
HXLINE(9762)			return null();
            		}
HXDLIN(9762)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_AABBPair_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_AABBPair_obj > ZNPList_ZPP_AABBPair_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_AABBPair_obj > __this = new ZNPList_ZPP_AABBPair_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_AABBPair_obj > ZNPList_ZPP_AABBPair_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_AABBPair_obj *__this = (ZNPList_ZPP_AABBPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_AABBPair_obj), true, "zpp_nape.util.ZNPList_ZPP_AABBPair"));
	*(void **)__this = ZNPList_ZPP_AABBPair_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_AABBPair_obj::ZNPList_ZPP_AABBPair_obj()
{
}

void ZNPList_ZPP_AABBPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_AABBPair);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_AABBPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_AABBPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_AABBPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_AABBPair >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_AABBPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_AABBPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_AABBPair*/ ,(int)offsetof(ZNPList_ZPP_AABBPair_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_AABBPair_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_AABBPair_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_AABBPair_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_AABBPair_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_AABBPair_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_AABBPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_AABBPair_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_AABBPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_AABBPair_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_AABBPair_obj::__mClass;

void ZNPList_ZPP_AABBPair_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_AABBPair_obj;
	ZNPList_ZPP_AABBPair_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_AABBPair","\xef","\x86","\x36","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_AABBPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_AABBPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_AABBPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_AABBPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_AABBPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_AABBPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
