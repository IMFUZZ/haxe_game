// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomPoly
#include <zpp_nape/geom/ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_GeomPoly
#include <zpp_nape/util/ZNPList_ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_GeomPoly
#include <zpp_nape/util/ZNPNode_ZPP_GeomPoly.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_13936_new,"zpp_nape.util.ZNPList_ZPP_GeomPoly","new",0x00e5cacf,"zpp_nape.util.ZNPList_ZPP_GeomPoly.new","zpp_nape/util/Lists.hx",13936,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_13942_begin,"zpp_nape.util.ZNPList_ZPP_GeomPoly","begin",0x752e9e58,"zpp_nape.util.ZNPList_ZPP_GeomPoly.begin","zpp_nape/util/Lists.hx",13942,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_13949_setbegin,"zpp_nape.util.ZNPList_ZPP_GeomPoly","setbegin",0x16fdb678,"zpp_nape.util.ZNPList_ZPP_GeomPoly.setbegin","zpp_nape/util/Lists.hx",13949,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_13955_add,"zpp_nape.util.ZNPList_ZPP_GeomPoly","add",0x00dbec90,"zpp_nape.util.ZNPList_ZPP_GeomPoly.add","zpp_nape/util/Lists.hx",13955,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_13959_inlined_add,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_add",0xb2f6cdfc,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_add","zpp_nape/util/Lists.hx",13959,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14005_addAll,"zpp_nape.util.ZNPList_ZPP_GeomPoly","addAll",0x17bffe71,"zpp_nape.util.ZNPList_ZPP_GeomPoly.addAll","zpp_nape/util/Lists.hx",14005,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14015_insert,"zpp_nape.util.ZNPList_ZPP_GeomPoly","insert",0x16a2382a,"zpp_nape.util.ZNPList_ZPP_GeomPoly.insert","zpp_nape/util/Lists.hx",14015,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14019_inlined_insert,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_insert",0x312d023e,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_insert","zpp_nape/util/Lists.hx",14019,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14063_pop,"zpp_nape.util.ZNPList_ZPP_GeomPoly","pop",0x00e75800,"zpp_nape.util.ZNPList_ZPP_GeomPoly.pop","zpp_nape/util/Lists.hx",14063,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14067_inlined_pop,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_pop",0xb302396c,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_pop","zpp_nape/util/Lists.hx",14067,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14101_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_GeomPoly","pop_unsafe",0x29cd3dc5,"zpp_nape.util.ZNPList_ZPP_GeomPoly.pop_unsafe","zpp_nape/util/Lists.hx",14101,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14105_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_pop_unsafe",0xc688a1d9,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_pop_unsafe","zpp_nape/util/Lists.hx",14105,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14127_remove,"zpp_nape.util.ZNPList_ZPP_GeomPoly","remove",0x7d4d9135,"zpp_nape.util.ZNPList_ZPP_GeomPoly.remove","zpp_nape/util/Lists.hx",14127,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14129_try_remove,"zpp_nape.util.ZNPList_ZPP_GeomPoly","try_remove",0x40f77379,"zpp_nape.util.ZNPList_ZPP_GeomPoly.try_remove","zpp_nape/util/Lists.hx",14129,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14163_inlined_remove,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_remove",0x97d85b49,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_remove","zpp_nape/util/Lists.hx",14163,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14167_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_try_remove",0xddb2d78d,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_try_remove","zpp_nape/util/Lists.hx",14167,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14191_erase,"zpp_nape.util.ZNPList_ZPP_GeomPoly","erase",0x37f59d15,"zpp_nape.util.ZNPList_ZPP_GeomPoly.erase","zpp_nape/util/Lists.hx",14191,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14195_inlined_erase,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_erase",0xcf9cb181,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_erase","zpp_nape/util/Lists.hx",14195,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14241_splice,"zpp_nape.util.ZNPList_ZPP_GeomPoly","splice",0x38637a6d,"zpp_nape.util.ZNPList_ZPP_GeomPoly.splice","zpp_nape/util/Lists.hx",14241,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14246_clear,"zpp_nape.util.ZNPList_ZPP_GeomPoly","clear",0x0d3425bc,"zpp_nape.util.ZNPList_ZPP_GeomPoly.clear","zpp_nape/util/Lists.hx",14246,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14251_inlined_clear,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_clear",0xa4db3a28,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_clear","zpp_nape/util/Lists.hx",14251,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14256_reverse,"zpp_nape.util.ZNPList_ZPP_GeomPoly","reverse",0x4e8d9711,"zpp_nape.util.ZNPList_ZPP_GeomPoly.reverse","zpp_nape/util/Lists.hx",14256,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14272_empty,"zpp_nape.util.ZNPList_ZPP_GeomPoly","empty",0x34b2eebc,"zpp_nape.util.ZNPList_ZPP_GeomPoly.empty","zpp_nape/util/Lists.hx",14272,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14277_size,"zpp_nape.util.ZNPList_ZPP_GeomPoly","size",0xcb7cc772,"zpp_nape.util.ZNPList_ZPP_GeomPoly.size","zpp_nape/util/Lists.hx",14277,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14280_has,"zpp_nape.util.ZNPList_ZPP_GeomPoly","has",0x00e139c9,"zpp_nape.util.ZNPList_ZPP_GeomPoly.has","zpp_nape/util/Lists.hx",14280,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14284_inlined_has,"zpp_nape.util.ZNPList_ZPP_GeomPoly","inlined_has",0xb2fc1b35,"zpp_nape.util.ZNPList_ZPP_GeomPoly.inlined_has","zpp_nape/util/Lists.hx",14284,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14315_front,"zpp_nape.util.ZNPList_ZPP_GeomPoly","front",0xcb66ccd8,"zpp_nape.util.ZNPList_ZPP_GeomPoly.front","zpp_nape/util/Lists.hx",14315,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14317_back,"zpp_nape.util.ZNPList_ZPP_GeomPoly","back",0xc03a00d8,"zpp_nape.util.ZNPList_ZPP_GeomPoly.back","zpp_nape/util/Lists.hx",14317,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14326_iterator_at,"zpp_nape.util.ZNPList_ZPP_GeomPoly","iterator_at",0xb79b0b53,"zpp_nape.util.ZNPList_ZPP_GeomPoly.iterator_at","zpp_nape/util/Lists.hx",14326,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_1b51f6e1554f9897_14339_at,"zpp_nape.util.ZNPList_ZPP_GeomPoly","at",0x33a9bd64,"zpp_nape.util.ZNPList_ZPP_GeomPoly.at","zpp_nape/util/Lists.hx",14339,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_GeomPoly_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_13936_new)
            	HX_STACK_THIS(this)
HXLINE(13946)		this->length = (int)0;
HXLINE(13945)		this->pushmod = false;
HXLINE(13944)		this->modified = false;
HXLINE(13937)		this->head = null();
            	}

Dynamic ZNPList_ZPP_GeomPoly_obj::__CreateEmpty() { return new ZNPList_ZPP_GeomPoly_obj; }

void *ZNPList_ZPP_GeomPoly_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_GeomPoly_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_GeomPoly_obj > _hx_result = new ZNPList_ZPP_GeomPoly_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_GeomPoly_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a4e2da1;
}

 ::zpp_nape::util::ZNPNode_ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_13942_begin)
            	HX_STACK_THIS(this)
HXLINE(13942)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,begin,return )

void ZNPList_ZPP_GeomPoly_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly i){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_13949_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(13950)		this->head = i;
HXLINE(13951)		this->modified = true;
HXLINE(13952)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,setbegin,(void))

 ::zpp_nape::geom::ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::add( ::zpp_nape::geom::ZPP_GeomPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_1b51f6e1554f9897_13955_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(13955)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXDLIN(13955)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool )) {
HXLINE(13955)			ret =  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13955)			ret = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(13955)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret->next;
HXDLIN(13955)			ret->next = null();
            		}
HXDLIN(13955)		ret->elt = o;
HXDLIN(13955)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,temp) = ret;
HXDLIN(13955)		temp->next = this->head;
HXDLIN(13955)		this->head = temp;
HXDLIN(13955)		this->modified = true;
HXDLIN(13955)		this->length++;
HXDLIN(13955)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,add,return )

 ::zpp_nape::geom::ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::inlined_add( ::zpp_nape::geom::ZPP_GeomPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_1b51f6e1554f9897_13959_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(13969)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXLINE(13971)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool )) {
HXLINE(13972)			ret =  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(13978)			ret = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXLINE(13979)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret->next;
HXLINE(13980)			ret->next = null();
            		}
HXLINE(13987)		ret->elt = o;
HXLINE(13968)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,temp) = ret;
HXLINE(13990)		temp->next = this->head;
HXLINE(13991)		this->head = temp;
HXLINE(13992)		this->modified = true;
HXLINE(13993)		this->length++;
HXLINE(13994)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,inlined_add,return )

void ZNPList_ZPP_GeomPoly_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_GeomPoly x){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14005_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(14006)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cx_ite) = x->head;
HXLINE(14007)		while(hx::IsNotNull( cx_ite )){
HXLINE(14009)			this->add(cx_ite->elt);
HXLINE(14010)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly cur, ::zpp_nape::geom::ZPP_GeomPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14015_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(14015)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXDLIN(14015)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool )) {
HXLINE(14015)			ret =  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(14015)			ret = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14015)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret->next;
HXDLIN(14015)			ret->next = null();
            		}
HXDLIN(14015)		ret->elt = o;
HXDLIN(14015)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,temp) = ret;
HXDLIN(14015)		if (hx::IsNull( cur )) {
HXLINE(14015)			temp->next = this->head;
HXDLIN(14015)			this->head = temp;
            		}
            		else {
HXLINE(14015)			temp->next = cur->next;
HXDLIN(14015)			cur->next = temp;
            		}
HXDLIN(14015)		this->pushmod = (this->modified = true);
HXDLIN(14015)		this->length++;
HXDLIN(14015)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_GeomPoly_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly cur, ::zpp_nape::geom::ZPP_GeomPoly o){
            	HX_GC_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14019_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(14029)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXLINE(14031)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool )) {
HXLINE(14032)			ret =  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(14038)			ret = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXLINE(14039)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret->next;
HXLINE(14040)			ret->next = null();
            		}
HXLINE(14047)		ret->elt = o;
HXLINE(14028)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,temp) = ret;
HXLINE(14050)		if (hx::IsNull( cur )) {
HXLINE(14051)			temp->next = this->head;
HXLINE(14052)			this->head = temp;
            		}
            		else {
HXLINE(14055)			temp->next = cur->next;
HXLINE(14056)			cur->next = temp;
            		}
HXLINE(14058)		this->pushmod = (this->modified = true);
HXLINE(14059)		this->length++;
HXLINE(14060)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_GeomPoly_obj,inlined_insert,return )

void ZNPList_ZPP_GeomPoly_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14063_pop)
            	HX_STACK_THIS(this)
HXLINE(14063)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret) = this->head;
HXDLIN(14063)		this->head = ret->next;
HXDLIN(14063)		{
HXLINE(14063)			ret->elt = null();
HXDLIN(14063)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14063)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret;
            		}
HXDLIN(14063)		if (hx::IsNull( this->head )) {
HXLINE(14063)			this->pushmod = true;
            		}
HXDLIN(14063)		this->modified = true;
HXDLIN(14063)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,pop,(void))

void ZNPList_ZPP_GeomPoly_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14067_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(14076)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret) = this->head;
HXLINE(14077)		this->head = ret->next;
HXLINE(14079)		{
HXLINE(14089)			ret->elt = null();
HXLINE(14090)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXLINE(14091)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret;
            		}
HXLINE(14096)		if (hx::IsNull( this->head )) {
HXLINE(14096)			this->pushmod = true;
            		}
HXLINE(14097)		this->modified = true;
HXLINE(14098)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,inlined_pop,(void))

 ::zpp_nape::geom::ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14101_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(14101)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomPoly,ret) = this->head->elt;
HXDLIN(14101)		this->pop();
HXDLIN(14101)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,pop_unsafe,return )

 ::zpp_nape::geom::ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14105_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(14114)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomPoly,ret) = this->head->elt;
HXLINE(14115)		this->pop();
HXLINE(14116)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_GeomPoly_obj::remove( ::zpp_nape::geom::ZPP_GeomPoly obj){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14127_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14127)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,pre) = null();
HXDLIN(14127)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cur) = this->head;
HXDLIN(14127)		while(hx::IsNotNull( cur )){
HXLINE(14127)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14127)				{
HXLINE(14127)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,old);
HXDLIN(14127)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXDLIN(14127)					if (hx::IsNull( pre )) {
HXLINE(14127)						old = this->head;
HXDLIN(14127)						ret = old->next;
HXDLIN(14127)						this->head = ret;
HXDLIN(14127)						if (hx::IsNull( this->head )) {
HXLINE(14127)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(14127)						old = pre->next;
HXDLIN(14127)						ret = old->next;
HXDLIN(14127)						pre->next = ret;
HXDLIN(14127)						if (hx::IsNull( ret )) {
HXLINE(14127)							this->pushmod = true;
            						}
            					}
HXDLIN(14127)					{
HXLINE(14127)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,o) = old;
HXDLIN(14127)						o->elt = null();
HXDLIN(14127)						o->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14127)						::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = o;
            					}
HXDLIN(14127)					this->modified = true;
HXDLIN(14127)					this->length--;
HXDLIN(14127)					this->pushmod = true;
            				}
HXDLIN(14127)				goto _hx_goto_13;
            			}
HXDLIN(14127)			pre = cur;
HXDLIN(14127)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,remove,(void))

bool ZNPList_ZPP_GeomPoly_obj::try_remove( ::zpp_nape::geom::ZPP_GeomPoly obj){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14129_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14138)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,pre) = null();
HXLINE(14139)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cur) = this->head;
HXLINE(14140)		HX_VARI( bool,ret) = false;
HXLINE(14141)		while(hx::IsNotNull( cur )){
HXLINE(14142)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14143)				this->erase(pre);
HXLINE(14144)				ret = true;
HXLINE(14145)				goto _hx_goto_15;
            			}
HXLINE(14147)			pre = cur;
HXLINE(14148)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(14150)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,try_remove,return )

void ZNPList_ZPP_GeomPoly_obj::inlined_remove( ::zpp_nape::geom::ZPP_GeomPoly obj){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14163_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14163)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,pre) = null();
HXDLIN(14163)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cur) = this->head;
HXDLIN(14163)		while(hx::IsNotNull( cur )){
HXLINE(14163)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14163)				{
HXLINE(14163)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,old);
HXDLIN(14163)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXDLIN(14163)					if (hx::IsNull( pre )) {
HXLINE(14163)						old = this->head;
HXDLIN(14163)						ret = old->next;
HXDLIN(14163)						this->head = ret;
HXDLIN(14163)						if (hx::IsNull( this->head )) {
HXLINE(14163)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(14163)						old = pre->next;
HXDLIN(14163)						ret = old->next;
HXDLIN(14163)						pre->next = ret;
HXDLIN(14163)						if (hx::IsNull( ret )) {
HXLINE(14163)							this->pushmod = true;
            						}
            					}
HXDLIN(14163)					{
HXLINE(14163)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,o) = old;
HXDLIN(14163)						o->elt = null();
HXDLIN(14163)						o->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14163)						::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = o;
            					}
HXDLIN(14163)					this->modified = true;
HXDLIN(14163)					this->length--;
HXDLIN(14163)					this->pushmod = true;
            				}
HXDLIN(14163)				goto _hx_goto_17;
            			}
HXDLIN(14163)			pre = cur;
HXDLIN(14163)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,inlined_remove,(void))

bool ZNPList_ZPP_GeomPoly_obj::inlined_try_remove( ::zpp_nape::geom::ZPP_GeomPoly obj){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14167_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14176)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,pre) = null();
HXLINE(14177)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cur) = this->head;
HXLINE(14178)		HX_VARI( bool,ret) = false;
HXLINE(14179)		while(hx::IsNotNull( cur )){
HXLINE(14180)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(14181)				{
HXLINE(14181)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,old);
HXDLIN(14181)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret1,"ret");
HXDLIN(14181)					if (hx::IsNull( pre )) {
HXLINE(14181)						old = this->head;
HXDLIN(14181)						ret1 = old->next;
HXDLIN(14181)						this->head = ret1;
HXDLIN(14181)						if (hx::IsNull( this->head )) {
HXLINE(14181)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(14181)						old = pre->next;
HXDLIN(14181)						ret1 = old->next;
HXDLIN(14181)						pre->next = ret1;
HXDLIN(14181)						if (hx::IsNull( ret1 )) {
HXLINE(14181)							this->pushmod = true;
            						}
            					}
HXDLIN(14181)					{
HXLINE(14181)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,o) = old;
HXDLIN(14181)						o->elt = null();
HXDLIN(14181)						o->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14181)						::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = o;
            					}
HXDLIN(14181)					this->modified = true;
HXDLIN(14181)					this->length--;
HXDLIN(14181)					this->pushmod = true;
            				}
HXLINE(14182)				ret = true;
HXLINE(14183)				goto _hx_goto_19;
            			}
HXLINE(14185)			pre = cur;
HXLINE(14186)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(14188)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly pre){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14191_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(14191)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,old);
HXDLIN(14191)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXDLIN(14191)		if (hx::IsNull( pre )) {
HXLINE(14191)			old = this->head;
HXDLIN(14191)			ret = old->next;
HXDLIN(14191)			this->head = ret;
HXDLIN(14191)			if (hx::IsNull( this->head )) {
HXLINE(14191)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(14191)			old = pre->next;
HXDLIN(14191)			ret = old->next;
HXDLIN(14191)			pre->next = ret;
HXDLIN(14191)			if (hx::IsNull( ret )) {
HXLINE(14191)				this->pushmod = true;
            			}
            		}
HXDLIN(14191)		{
HXLINE(14191)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,o) = old;
HXDLIN(14191)			o->elt = null();
HXDLIN(14191)			o->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14191)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = o;
            		}
HXDLIN(14191)		this->modified = true;
HXDLIN(14191)		this->length--;
HXDLIN(14191)		this->pushmod = true;
HXDLIN(14191)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly pre){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14195_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(14204)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,old);
HXLINE(14205)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret);
HXLINE(14206)		if (hx::IsNull( pre )) {
HXLINE(14207)			old = this->head;
HXLINE(14208)			ret = old->next;
HXLINE(14209)			this->head = ret;
HXLINE(14210)			if (hx::IsNull( this->head )) {
HXLINE(14210)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(14213)			old = pre->next;
HXLINE(14214)			ret = old->next;
HXLINE(14215)			pre->next = ret;
HXLINE(14216)			if (hx::IsNull( ret )) {
HXLINE(14216)				this->pushmod = true;
            			}
            		}
HXLINE(14219)		{
HXLINE(14220)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,o) = old;
HXLINE(14229)			o->elt = null();
HXLINE(14230)			o->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXLINE(14231)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = o;
            		}
HXLINE(14236)		this->modified = true;
HXLINE(14237)		this->length--;
HXLINE(14238)		this->pushmod = true;
HXLINE(14239)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly pre,int n){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14241_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(14242)		while(true){
HXLINE(14242)			bool _hx_tmp;
HXDLIN(14242)			n = (n - (int)1);
HXDLIN(14242)			if (((n + (int)1) > (int)0)) {
HXLINE(14242)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(14242)				_hx_tmp = false;
            			}
HXDLIN(14242)			if (!(_hx_tmp)) {
HXLINE(14242)				goto _hx_goto_23;
            			}
HXDLIN(14242)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(14243)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_GeomPoly_obj,splice,return )

void ZNPList_ZPP_GeomPoly_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14246_clear)
            	HX_STACK_THIS(this)
HXLINE(14246)		while(hx::IsNotNull( this->head )){
HXLINE(14246)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret) = this->head;
HXDLIN(14246)			this->head = ret->next;
HXDLIN(14246)			{
HXLINE(14246)				ret->elt = null();
HXDLIN(14246)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14246)				::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret;
            			}
HXDLIN(14246)			if (hx::IsNull( this->head )) {
HXLINE(14246)				this->pushmod = true;
            			}
HXDLIN(14246)			this->modified = true;
HXDLIN(14246)			this->length--;
            		}
HXDLIN(14246)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,clear,(void))

void ZNPList_ZPP_GeomPoly_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14251_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(14252)		while(hx::IsNotNull( this->head )){
HXLINE(14252)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret) = this->head;
HXDLIN(14252)			this->head = ret->next;
HXDLIN(14252)			{
HXLINE(14252)				ret->elt = null();
HXDLIN(14252)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool;
HXDLIN(14252)				::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = ret;
            			}
HXDLIN(14252)			if (hx::IsNull( this->head )) {
HXLINE(14252)				this->pushmod = true;
            			}
HXDLIN(14252)			this->modified = true;
HXDLIN(14252)			this->length--;
            		}
HXLINE(14253)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,inlined_clear,(void))

void ZNPList_ZPP_GeomPoly_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14256_reverse)
            	HX_STACK_THIS(this)
HXLINE(14257)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cur) = this->head;
HXLINE(14258)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,pre) = null();
HXLINE(14259)		while(hx::IsNotNull( cur )){
HXLINE(14260)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,nx) = cur->next;
HXLINE(14261)			cur->next = pre;
HXLINE(14262)			this->head = cur;
HXLINE(14263)			pre = cur;
HXLINE(14264)			cur = nx;
            		}
HXLINE(14266)		this->modified = true;
HXLINE(14267)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,reverse,(void))

bool ZNPList_ZPP_GeomPoly_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14272_empty)
            	HX_STACK_THIS(this)
HXLINE(14272)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,empty,return )

int ZNPList_ZPP_GeomPoly_obj::size(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14277_size)
            	HX_STACK_THIS(this)
HXLINE(14277)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,size,return )

bool ZNPList_ZPP_GeomPoly_obj::has( ::zpp_nape::geom::ZPP_GeomPoly obj){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14280_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14280)		HX_VAR( bool,ret);
HXDLIN(14280)		{
HXLINE(14280)			ret = false;
HXDLIN(14280)			{
HXLINE(14280)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cx_ite) = this->head;
HXDLIN(14280)				while(hx::IsNotNull( cx_ite )){
HXLINE(14280)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(14280)						ret = true;
HXDLIN(14280)						goto _hx_goto_33;
            					}
HXDLIN(14280)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(14280)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,has,return )

bool ZNPList_ZPP_GeomPoly_obj::inlined_has( ::zpp_nape::geom::ZPP_GeomPoly obj){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14284_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(14293)		HX_VAR( bool,ret);
HXLINE(14294)		{
HXLINE(14295)			ret = false;
HXLINE(14296)			{
HXLINE(14297)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cx_ite) = this->head;
HXLINE(14298)				while(hx::IsNotNull( cx_ite )){
HXLINE(14301)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(14302)						ret = true;
HXLINE(14303)						goto _hx_goto_35;
            					}
HXLINE(14306)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(14310)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,inlined_has,return )

 ::zpp_nape::geom::ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::front(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14315_front)
            	HX_STACK_THIS(this)
HXLINE(14315)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,front,return )

 ::zpp_nape::geom::ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::back(){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14317_back)
            	HX_STACK_THIS(this)
HXLINE(14318)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret) = this->head;
HXLINE(14319)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,cur) = ret;
HXLINE(14320)		while(hx::IsNotNull( cur )){
HXLINE(14321)			ret = cur;
HXLINE(14322)			cur = cur->next;
            		}
HXLINE(14324)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_GeomPoly_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14326_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(14335)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,ret) = this->head;
HXLINE(14336)		while(true){
HXLINE(14336)			bool _hx_tmp;
HXDLIN(14336)			ind = (ind - (int)1);
HXDLIN(14336)			if (((ind + (int)1) > (int)0)) {
HXLINE(14336)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(14336)				_hx_tmp = false;
            			}
HXDLIN(14336)			if (!(_hx_tmp)) {
HXLINE(14336)				goto _hx_goto_40;
            			}
HXDLIN(14336)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(14337)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,iterator_at,return )

 ::zpp_nape::geom::ZPP_GeomPoly ZNPList_ZPP_GeomPoly_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_1b51f6e1554f9897_14339_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(14348)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,it) = this->iterator_at(ind);
HXLINE(14349)		if (hx::IsNotNull( it )) {
HXLINE(14349)			return it->elt;
            		}
            		else {
HXLINE(14349)			return null();
            		}
HXDLIN(14349)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_GeomPoly_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_GeomPoly_obj > ZNPList_ZPP_GeomPoly_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_GeomPoly_obj > __this = new ZNPList_ZPP_GeomPoly_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_GeomPoly_obj > ZNPList_ZPP_GeomPoly_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_GeomPoly_obj *__this = (ZNPList_ZPP_GeomPoly_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_GeomPoly_obj), true, "zpp_nape.util.ZNPList_ZPP_GeomPoly"));
	*(void **)__this = ZNPList_ZPP_GeomPoly_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_GeomPoly_obj::ZNPList_ZPP_GeomPoly_obj()
{
}

void ZNPList_ZPP_GeomPoly_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_GeomPoly);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_GeomPoly_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_GeomPoly_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_GeomPoly_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_GeomPoly_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_GeomPoly_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_GeomPoly*/ ,(int)offsetof(ZNPList_ZPP_GeomPoly_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_GeomPoly_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_GeomPoly_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_GeomPoly_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_GeomPoly_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_GeomPoly_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_GeomPoly_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_GeomPoly_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_GeomPoly_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_GeomPoly_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_GeomPoly_obj::__mClass;

void ZNPList_ZPP_GeomPoly_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_GeomPoly_obj;
	ZNPList_ZPP_GeomPoly_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_GeomPoly","\x5d","\xb7","\xbe","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_GeomPoly_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_GeomPoly_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_GeomPoly_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_GeomPoly_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_GeomPoly_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_GeomPoly_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
