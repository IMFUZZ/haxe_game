// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ColArbiter
#include <zpp_nape/util/ZNPList_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12268_new,"zpp_nape.util.ZNPList_ZPP_ColArbiter","new",0xa0591ef0,"zpp_nape.util.ZNPList_ZPP_ColArbiter.new","zpp_nape/util/Lists.hx",12268,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12274_begin,"zpp_nape.util.ZNPList_ZPP_ColArbiter","begin",0x5737fcb9,"zpp_nape.util.ZNPList_ZPP_ColArbiter.begin","zpp_nape/util/Lists.hx",12274,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12281_setbegin,"zpp_nape.util.ZNPList_ZPP_ColArbiter","setbegin",0xc2c0cab7,"zpp_nape.util.ZNPList_ZPP_ColArbiter.setbegin","zpp_nape/util/Lists.hx",12281,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12287_add,"zpp_nape.util.ZNPList_ZPP_ColArbiter","add",0xa04f40b1,"zpp_nape.util.ZNPList_ZPP_ColArbiter.add","zpp_nape/util/Lists.hx",12287,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12291_inlined_add,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_add",0xe4fcab1d,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_add","zpp_nape/util/Lists.hx",12291,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12337_addAll,"zpp_nape.util.ZNPList_ZPP_ColArbiter","addAll",0xfde934f0,"zpp_nape.util.ZNPList_ZPP_ColArbiter.addAll","zpp_nape/util/Lists.hx",12337,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12347_insert,"zpp_nape.util.ZNPList_ZPP_ColArbiter","insert",0xfccb6ea9,"zpp_nape.util.ZNPList_ZPP_ColArbiter.insert","zpp_nape/util/Lists.hx",12347,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12351_inlined_insert,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_insert",0x7a3f4fbd,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_insert","zpp_nape/util/Lists.hx",12351,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12395_pop,"zpp_nape.util.ZNPList_ZPP_ColArbiter","pop",0xa05aac21,"zpp_nape.util.ZNPList_ZPP_ColArbiter.pop","zpp_nape/util/Lists.hx",12395,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12399_inlined_pop,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_pop",0xe508168d,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_pop","zpp_nape/util/Lists.hx",12399,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12433_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_ColArbiter","pop_unsafe",0x9bad1fc4,"zpp_nape.util.ZNPList_ZPP_ColArbiter.pop_unsafe","zpp_nape/util/Lists.hx",12433,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12437_inlined_pop_unsafe,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_pop_unsafe",0xfb291ad8,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_pop_unsafe","zpp_nape/util/Lists.hx",12437,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12459_remove,"zpp_nape.util.ZNPList_ZPP_ColArbiter","remove",0x6376c7b4,"zpp_nape.util.ZNPList_ZPP_ColArbiter.remove","zpp_nape/util/Lists.hx",12459,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12461_try_remove,"zpp_nape.util.ZNPList_ZPP_ColArbiter","try_remove",0xb2d75578,"zpp_nape.util.ZNPList_ZPP_ColArbiter.try_remove","zpp_nape/util/Lists.hx",12461,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12495_inlined_remove,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_remove",0xe0eaa8c8,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_remove","zpp_nape/util/Lists.hx",12495,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12499_inlined_try_remove,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_try_remove",0x1253508c,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_try_remove","zpp_nape/util/Lists.hx",12499,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12523_erase,"zpp_nape.util.ZNPList_ZPP_ColArbiter","erase",0x19fefb76,"zpp_nape.util.ZNPList_ZPP_ColArbiter.erase","zpp_nape/util/Lists.hx",12523,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12527_inlined_erase,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_erase",0xf4acd8e2,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_erase","zpp_nape/util/Lists.hx",12527,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12573_splice,"zpp_nape.util.ZNPList_ZPP_ColArbiter","splice",0x1e8cb0ec,"zpp_nape.util.ZNPList_ZPP_ColArbiter.splice","zpp_nape/util/Lists.hx",12573,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12578_clear,"zpp_nape.util.ZNPList_ZPP_ColArbiter","clear",0xef3d841d,"zpp_nape.util.ZNPList_ZPP_ColArbiter.clear","zpp_nape/util/Lists.hx",12578,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12583_inlined_clear,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_clear",0xc9eb6189,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_clear","zpp_nape/util/Lists.hx",12583,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12588_reverse,"zpp_nape.util.ZNPList_ZPP_ColArbiter","reverse",0xcc740fb2,"zpp_nape.util.ZNPList_ZPP_ColArbiter.reverse","zpp_nape/util/Lists.hx",12588,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12604_empty,"zpp_nape.util.ZNPList_ZPP_ColArbiter","empty",0x16bc4d1d,"zpp_nape.util.ZNPList_ZPP_ColArbiter.empty","zpp_nape/util/Lists.hx",12604,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12609_size,"zpp_nape.util.ZNPList_ZPP_ColArbiter","size",0xb0f31031,"zpp_nape.util.ZNPList_ZPP_ColArbiter.size","zpp_nape/util/Lists.hx",12609,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12612_has,"zpp_nape.util.ZNPList_ZPP_ColArbiter","has",0xa0548dea,"zpp_nape.util.ZNPList_ZPP_ColArbiter.has","zpp_nape/util/Lists.hx",12612,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12616_inlined_has,"zpp_nape.util.ZNPList_ZPP_ColArbiter","inlined_has",0xe501f856,"zpp_nape.util.ZNPList_ZPP_ColArbiter.inlined_has","zpp_nape/util/Lists.hx",12616,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12647_front,"zpp_nape.util.ZNPList_ZPP_ColArbiter","front",0xad702b39,"zpp_nape.util.ZNPList_ZPP_ColArbiter.front","zpp_nape/util/Lists.hx",12647,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12649_back,"zpp_nape.util.ZNPList_ZPP_ColArbiter","back",0xa5b04997,"zpp_nape.util.ZNPList_ZPP_ColArbiter.back","zpp_nape/util/Lists.hx",12649,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12658_iterator_at,"zpp_nape.util.ZNPList_ZPP_ColArbiter","iterator_at",0xe9a0e874,"zpp_nape.util.ZNPList_ZPP_ColArbiter.iterator_at","zpp_nape/util/Lists.hx",12658,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_a639298668ee13f1_12671_at,"zpp_nape.util.ZNPList_ZPP_ColArbiter","at",0x00b80863,"zpp_nape.util.ZNPList_ZPP_ColArbiter.at","zpp_nape/util/Lists.hx",12671,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZNPList_ZPP_ColArbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12268_new)
            	HX_STACK_THIS(this)
HXLINE(12278)		this->length = (int)0;
HXLINE(12277)		this->pushmod = false;
HXLINE(12276)		this->modified = false;
HXLINE(12269)		this->head = null();
            	}

Dynamic ZNPList_ZPP_ColArbiter_obj::__CreateEmpty() { return new ZNPList_ZPP_ColArbiter_obj; }

void *ZNPList_ZPP_ColArbiter_obj::_hx_vtable = 0;

Dynamic ZNPList_ZPP_ColArbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZNPList_ZPP_ColArbiter_obj > _hx_result = new ZNPList_ZPP_ColArbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZNPList_ZPP_ColArbiter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x613229a6;
}

 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12274_begin)
            	HX_STACK_THIS(this)
HXLINE(12274)		return this->head;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,begin,return )

void ZNPList_ZPP_ColArbiter_obj::setbegin( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter i){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12281_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(12282)		this->head = i;
HXLINE(12283)		this->modified = true;
HXLINE(12284)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,setbegin,(void))

 ::zpp_nape::dynamics::ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::add( ::zpp_nape::dynamics::ZPP_ColArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_a639298668ee13f1_12287_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(12287)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXDLIN(12287)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(12287)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(12287)			ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12287)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
HXDLIN(12287)			ret->next = null();
            		}
HXDLIN(12287)		ret->elt = o;
HXDLIN(12287)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,temp) = ret;
HXDLIN(12287)		temp->next = this->head;
HXDLIN(12287)		this->head = temp;
HXDLIN(12287)		this->modified = true;
HXDLIN(12287)		this->length++;
HXDLIN(12287)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,add,return )

 ::zpp_nape::dynamics::ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::inlined_add( ::zpp_nape::dynamics::ZPP_ColArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_a639298668ee13f1_12291_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE(12301)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXLINE(12303)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(12304)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(12310)			ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXLINE(12311)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
HXLINE(12312)			ret->next = null();
            		}
HXLINE(12319)		ret->elt = o;
HXLINE(12300)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,temp) = ret;
HXLINE(12322)		temp->next = this->head;
HXLINE(12323)		this->head = temp;
HXLINE(12324)		this->modified = true;
HXLINE(12325)		this->length++;
HXLINE(12326)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,inlined_add,return )

void ZNPList_ZPP_ColArbiter_obj::addAll( ::zpp_nape::util::ZNPList_ZPP_ColArbiter x){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12337_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(12338)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cx_ite) = x->head;
HXLINE(12339)		while(hx::IsNotNull( cx_ite )){
HXLINE(12341)			this->add(cx_ite->elt);
HXLINE(12342)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,addAll,(void))

 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::insert( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter cur, ::zpp_nape::dynamics::ZPP_ColArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_a639298668ee13f1_12347_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(12347)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXDLIN(12347)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(12347)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(12347)			ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12347)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
HXDLIN(12347)			ret->next = null();
            		}
HXDLIN(12347)		ret->elt = o;
HXDLIN(12347)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,temp) = ret;
HXDLIN(12347)		if (hx::IsNull( cur )) {
HXLINE(12347)			temp->next = this->head;
HXDLIN(12347)			this->head = temp;
            		}
            		else {
HXLINE(12347)			temp->next = cur->next;
HXDLIN(12347)			cur->next = temp;
            		}
HXDLIN(12347)		this->pushmod = (this->modified = true);
HXDLIN(12347)		this->length++;
HXDLIN(12347)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ColArbiter_obj,insert,return )

 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::inlined_insert( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter cur, ::zpp_nape::dynamics::ZPP_ColArbiter o){
            	HX_GC_STACKFRAME(&_hx_pos_a639298668ee13f1_12351_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE(12361)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXLINE(12363)		if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )) {
HXLINE(12364)			ret =  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(12370)			ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXLINE(12371)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
HXLINE(12372)			ret->next = null();
            		}
HXLINE(12379)		ret->elt = o;
HXLINE(12360)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,temp) = ret;
HXLINE(12382)		if (hx::IsNull( cur )) {
HXLINE(12383)			temp->next = this->head;
HXLINE(12384)			this->head = temp;
            		}
            		else {
HXLINE(12387)			temp->next = cur->next;
HXLINE(12388)			cur->next = temp;
            		}
HXLINE(12390)		this->pushmod = (this->modified = true);
HXLINE(12391)		this->length++;
HXLINE(12392)		return temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ColArbiter_obj,inlined_insert,return )

void ZNPList_ZPP_ColArbiter_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12395_pop)
            	HX_STACK_THIS(this)
HXLINE(12395)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret) = this->head;
HXDLIN(12395)		this->head = ret->next;
HXDLIN(12395)		{
HXLINE(12395)			ret->elt = null();
HXDLIN(12395)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12395)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret;
            		}
HXDLIN(12395)		if (hx::IsNull( this->head )) {
HXLINE(12395)			this->pushmod = true;
            		}
HXDLIN(12395)		this->modified = true;
HXDLIN(12395)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,pop,(void))

void ZNPList_ZPP_ColArbiter_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12399_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE(12408)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret) = this->head;
HXLINE(12409)		this->head = ret->next;
HXLINE(12411)		{
HXLINE(12421)			ret->elt = null();
HXLINE(12422)			ret->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXLINE(12423)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret;
            		}
HXLINE(12428)		if (hx::IsNull( this->head )) {
HXLINE(12428)			this->pushmod = true;
            		}
HXLINE(12429)		this->modified = true;
HXLINE(12430)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,inlined_pop,(void))

 ::zpp_nape::dynamics::ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12433_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(12433)		HX_VARI(  ::zpp_nape::dynamics::ZPP_ColArbiter,ret) = this->head->elt;
HXDLIN(12433)		this->pop();
HXDLIN(12433)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,pop_unsafe,return )

 ::zpp_nape::dynamics::ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12437_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE(12446)		HX_VARI(  ::zpp_nape::dynamics::ZPP_ColArbiter,ret) = this->head->elt;
HXLINE(12447)		this->pop();
HXLINE(12448)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,inlined_pop_unsafe,return )

void ZNPList_ZPP_ColArbiter_obj::remove( ::zpp_nape::dynamics::ZPP_ColArbiter obj){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12459_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12459)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,pre) = null();
HXDLIN(12459)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cur) = this->head;
HXDLIN(12459)		while(hx::IsNotNull( cur )){
HXLINE(12459)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12459)				{
HXLINE(12459)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,old);
HXDLIN(12459)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXDLIN(12459)					if (hx::IsNull( pre )) {
HXLINE(12459)						old = this->head;
HXDLIN(12459)						ret = old->next;
HXDLIN(12459)						this->head = ret;
HXDLIN(12459)						if (hx::IsNull( this->head )) {
HXLINE(12459)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(12459)						old = pre->next;
HXDLIN(12459)						ret = old->next;
HXDLIN(12459)						pre->next = ret;
HXDLIN(12459)						if (hx::IsNull( ret )) {
HXLINE(12459)							this->pushmod = true;
            						}
            					}
HXDLIN(12459)					{
HXLINE(12459)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,o) = old;
HXDLIN(12459)						o->elt = null();
HXDLIN(12459)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12459)						::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
            					}
HXDLIN(12459)					this->modified = true;
HXDLIN(12459)					this->length--;
HXDLIN(12459)					this->pushmod = true;
            				}
HXDLIN(12459)				goto _hx_goto_13;
            			}
HXDLIN(12459)			pre = cur;
HXDLIN(12459)			cur = cur->next;
            		}
            		_hx_goto_13:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,remove,(void))

bool ZNPList_ZPP_ColArbiter_obj::try_remove( ::zpp_nape::dynamics::ZPP_ColArbiter obj){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12461_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12470)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,pre) = null();
HXLINE(12471)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cur) = this->head;
HXLINE(12472)		HX_VARI( bool,ret) = false;
HXLINE(12473)		while(hx::IsNotNull( cur )){
HXLINE(12474)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12475)				this->erase(pre);
HXLINE(12476)				ret = true;
HXLINE(12477)				goto _hx_goto_15;
            			}
HXLINE(12479)			pre = cur;
HXLINE(12480)			cur = cur->next;
            		}
            		_hx_goto_15:;
HXLINE(12482)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,try_remove,return )

void ZNPList_ZPP_ColArbiter_obj::inlined_remove( ::zpp_nape::dynamics::ZPP_ColArbiter obj){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12495_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12495)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,pre) = null();
HXDLIN(12495)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cur) = this->head;
HXDLIN(12495)		while(hx::IsNotNull( cur )){
HXLINE(12495)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12495)				{
HXLINE(12495)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,old);
HXDLIN(12495)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXDLIN(12495)					if (hx::IsNull( pre )) {
HXLINE(12495)						old = this->head;
HXDLIN(12495)						ret = old->next;
HXDLIN(12495)						this->head = ret;
HXDLIN(12495)						if (hx::IsNull( this->head )) {
HXLINE(12495)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(12495)						old = pre->next;
HXDLIN(12495)						ret = old->next;
HXDLIN(12495)						pre->next = ret;
HXDLIN(12495)						if (hx::IsNull( ret )) {
HXLINE(12495)							this->pushmod = true;
            						}
            					}
HXDLIN(12495)					{
HXLINE(12495)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,o) = old;
HXDLIN(12495)						o->elt = null();
HXDLIN(12495)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12495)						::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
            					}
HXDLIN(12495)					this->modified = true;
HXDLIN(12495)					this->length--;
HXDLIN(12495)					this->pushmod = true;
            				}
HXDLIN(12495)				goto _hx_goto_17;
            			}
HXDLIN(12495)			pre = cur;
HXDLIN(12495)			cur = cur->next;
            		}
            		_hx_goto_17:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,inlined_remove,(void))

bool ZNPList_ZPP_ColArbiter_obj::inlined_try_remove( ::zpp_nape::dynamics::ZPP_ColArbiter obj){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12499_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12508)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,pre) = null();
HXLINE(12509)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cur) = this->head;
HXLINE(12510)		HX_VARI( bool,ret) = false;
HXLINE(12511)		while(hx::IsNotNull( cur )){
HXLINE(12512)			if (hx::IsEq( cur->elt,obj )) {
HXLINE(12513)				{
HXLINE(12513)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,old);
HXDLIN(12513)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret1,"ret");
HXDLIN(12513)					if (hx::IsNull( pre )) {
HXLINE(12513)						old = this->head;
HXDLIN(12513)						ret1 = old->next;
HXDLIN(12513)						this->head = ret1;
HXDLIN(12513)						if (hx::IsNull( this->head )) {
HXLINE(12513)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE(12513)						old = pre->next;
HXDLIN(12513)						ret1 = old->next;
HXDLIN(12513)						pre->next = ret1;
HXDLIN(12513)						if (hx::IsNull( ret1 )) {
HXLINE(12513)							this->pushmod = true;
            						}
            					}
HXDLIN(12513)					{
HXLINE(12513)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,o) = old;
HXDLIN(12513)						o->elt = null();
HXDLIN(12513)						o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12513)						::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
            					}
HXDLIN(12513)					this->modified = true;
HXDLIN(12513)					this->length--;
HXDLIN(12513)					this->pushmod = true;
            				}
HXLINE(12514)				ret = true;
HXLINE(12515)				goto _hx_goto_19;
            			}
HXLINE(12517)			pre = cur;
HXLINE(12518)			cur = cur->next;
            		}
            		_hx_goto_19:;
HXLINE(12520)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,inlined_try_remove,return )

 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::erase( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12523_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(12523)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,old);
HXDLIN(12523)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXDLIN(12523)		if (hx::IsNull( pre )) {
HXLINE(12523)			old = this->head;
HXDLIN(12523)			ret = old->next;
HXDLIN(12523)			this->head = ret;
HXDLIN(12523)			if (hx::IsNull( this->head )) {
HXLINE(12523)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(12523)			old = pre->next;
HXDLIN(12523)			ret = old->next;
HXDLIN(12523)			pre->next = ret;
HXDLIN(12523)			if (hx::IsNull( ret )) {
HXLINE(12523)				this->pushmod = true;
            			}
            		}
HXDLIN(12523)		{
HXLINE(12523)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,o) = old;
HXDLIN(12523)			o->elt = null();
HXDLIN(12523)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12523)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
            		}
HXDLIN(12523)		this->modified = true;
HXDLIN(12523)		this->length--;
HXDLIN(12523)		this->pushmod = true;
HXDLIN(12523)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::inlined_erase( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12527_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE(12536)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,old);
HXLINE(12537)		HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret);
HXLINE(12538)		if (hx::IsNull( pre )) {
HXLINE(12539)			old = this->head;
HXLINE(12540)			ret = old->next;
HXLINE(12541)			this->head = ret;
HXLINE(12542)			if (hx::IsNull( this->head )) {
HXLINE(12542)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE(12545)			old = pre->next;
HXLINE(12546)			ret = old->next;
HXLINE(12547)			pre->next = ret;
HXLINE(12548)			if (hx::IsNull( ret )) {
HXLINE(12548)				this->pushmod = true;
            			}
            		}
HXLINE(12551)		{
HXLINE(12552)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,o) = old;
HXLINE(12561)			o->elt = null();
HXLINE(12562)			o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXLINE(12563)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
            		}
HXLINE(12568)		this->modified = true;
HXLINE(12569)		this->length--;
HXLINE(12570)		this->pushmod = true;
HXLINE(12571)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,inlined_erase,return )

 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::splice( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre,int n){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12573_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE(12574)		while(true){
HXLINE(12574)			bool _hx_tmp;
HXDLIN(12574)			n = (n - (int)1);
HXDLIN(12574)			if (((n + (int)1) > (int)0)) {
HXLINE(12574)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE(12574)				_hx_tmp = false;
            			}
HXDLIN(12574)			if (!(_hx_tmp)) {
HXLINE(12574)				goto _hx_goto_23;
            			}
HXDLIN(12574)			this->erase(pre);
            		}
            		_hx_goto_23:;
HXLINE(12575)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZNPList_ZPP_ColArbiter_obj,splice,return )

void ZNPList_ZPP_ColArbiter_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12578_clear)
            	HX_STACK_THIS(this)
HXLINE(12578)		while(hx::IsNotNull( this->head )){
HXLINE(12578)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret) = this->head;
HXDLIN(12578)			this->head = ret->next;
HXDLIN(12578)			{
HXLINE(12578)				ret->elt = null();
HXDLIN(12578)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12578)				::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret;
            			}
HXDLIN(12578)			if (hx::IsNull( this->head )) {
HXLINE(12578)				this->pushmod = true;
            			}
HXDLIN(12578)			this->modified = true;
HXDLIN(12578)			this->length--;
            		}
HXDLIN(12578)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,clear,(void))

void ZNPList_ZPP_ColArbiter_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12583_inlined_clear)
            	HX_STACK_THIS(this)
HXLINE(12584)		while(hx::IsNotNull( this->head )){
HXLINE(12584)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret) = this->head;
HXDLIN(12584)			this->head = ret->next;
HXDLIN(12584)			{
HXLINE(12584)				ret->elt = null();
HXDLIN(12584)				ret->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
HXDLIN(12584)				::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret;
            			}
HXDLIN(12584)			if (hx::IsNull( this->head )) {
HXLINE(12584)				this->pushmod = true;
            			}
HXDLIN(12584)			this->modified = true;
HXDLIN(12584)			this->length--;
            		}
HXLINE(12585)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,inlined_clear,(void))

void ZNPList_ZPP_ColArbiter_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12588_reverse)
            	HX_STACK_THIS(this)
HXLINE(12589)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cur) = this->head;
HXLINE(12590)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,pre) = null();
HXLINE(12591)		while(hx::IsNotNull( cur )){
HXLINE(12592)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,nx) = cur->next;
HXLINE(12593)			cur->next = pre;
HXLINE(12594)			this->head = cur;
HXLINE(12595)			pre = cur;
HXLINE(12596)			cur = nx;
            		}
HXLINE(12598)		this->modified = true;
HXLINE(12599)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,reverse,(void))

bool ZNPList_ZPP_ColArbiter_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12604_empty)
            	HX_STACK_THIS(this)
HXLINE(12604)		return hx::IsNull( this->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,empty,return )

int ZNPList_ZPP_ColArbiter_obj::size(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12609_size)
            	HX_STACK_THIS(this)
HXLINE(12609)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,size,return )

bool ZNPList_ZPP_ColArbiter_obj::has( ::zpp_nape::dynamics::ZPP_ColArbiter obj){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12612_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12612)		HX_VAR( bool,ret);
HXDLIN(12612)		{
HXLINE(12612)			ret = false;
HXDLIN(12612)			{
HXLINE(12612)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cx_ite) = this->head;
HXDLIN(12612)				while(hx::IsNotNull( cx_ite )){
HXLINE(12612)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(12612)						ret = true;
HXDLIN(12612)						goto _hx_goto_33;
            					}
HXDLIN(12612)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_33:;
            			}
            		}
HXDLIN(12612)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,has,return )

bool ZNPList_ZPP_ColArbiter_obj::inlined_has( ::zpp_nape::dynamics::ZPP_ColArbiter obj){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12616_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(12625)		HX_VAR( bool,ret);
HXLINE(12626)		{
HXLINE(12627)			ret = false;
HXLINE(12628)			{
HXLINE(12629)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cx_ite) = this->head;
HXLINE(12630)				while(hx::IsNotNull( cx_ite )){
HXLINE(12633)					if (hx::IsEq( cx_ite->elt,obj )) {
HXLINE(12634)						ret = true;
HXLINE(12635)						goto _hx_goto_35;
            					}
HXLINE(12638)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE(12642)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,inlined_has,return )

 ::zpp_nape::dynamics::ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::front(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12647_front)
            	HX_STACK_THIS(this)
HXLINE(12647)		return this->head->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,front,return )

 ::zpp_nape::dynamics::ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::back(){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12649_back)
            	HX_STACK_THIS(this)
HXLINE(12650)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret) = this->head;
HXLINE(12651)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,cur) = ret;
HXLINE(12652)		while(hx::IsNotNull( cur )){
HXLINE(12653)			ret = cur;
HXLINE(12654)			cur = cur->next;
            		}
HXLINE(12656)		return ret->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZNPList_ZPP_ColArbiter_obj,back,return )

 ::zpp_nape::util::ZNPNode_ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12658_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(12667)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,ret) = this->head;
HXLINE(12668)		while(true){
HXLINE(12668)			bool _hx_tmp;
HXDLIN(12668)			ind = (ind - (int)1);
HXDLIN(12668)			if (((ind + (int)1) > (int)0)) {
HXLINE(12668)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(12668)				_hx_tmp = false;
            			}
HXDLIN(12668)			if (!(_hx_tmp)) {
HXLINE(12668)				goto _hx_goto_40;
            			}
HXDLIN(12668)			ret = ret->next;
            		}
            		_hx_goto_40:;
HXLINE(12669)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,iterator_at,return )

 ::zpp_nape::dynamics::ZPP_ColArbiter ZNPList_ZPP_ColArbiter_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_a639298668ee13f1_12671_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(12680)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,it) = this->iterator_at(ind);
HXLINE(12681)		if (hx::IsNotNull( it )) {
HXLINE(12681)			return it->elt;
            		}
            		else {
HXLINE(12681)			return null();
            		}
HXDLIN(12681)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZNPList_ZPP_ColArbiter_obj,at,return )


hx::ObjectPtr< ZNPList_ZPP_ColArbiter_obj > ZNPList_ZPP_ColArbiter_obj::__new() {
	hx::ObjectPtr< ZNPList_ZPP_ColArbiter_obj > __this = new ZNPList_ZPP_ColArbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZNPList_ZPP_ColArbiter_obj > ZNPList_ZPP_ColArbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZNPList_ZPP_ColArbiter_obj *__this = (ZNPList_ZPP_ColArbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZNPList_ZPP_ColArbiter_obj), true, "zpp_nape.util.ZNPList_ZPP_ColArbiter"));
	*(void **)__this = ZNPList_ZPP_ColArbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZNPList_ZPP_ColArbiter_obj::ZNPList_ZPP_ColArbiter_obj()
{
}

void ZNPList_ZPP_ColArbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZNPList_ZPP_ColArbiter);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void ZNPList_ZPP_ColArbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val ZNPList_ZPP_ColArbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZNPList_ZPP_ColArbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast<  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZNPList_ZPP_ColArbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("head","\x20","\x29","\x0b","\x45"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZNPList_ZPP_ColArbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPNode_ZPP_ColArbiter*/ ,(int)offsetof(ZNPList_ZPP_ColArbiter_obj,head),HX_HCSTRING("head","\x20","\x29","\x0b","\x45")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_ColArbiter_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZNPList_ZPP_ColArbiter_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZNPList_ZPP_ColArbiter_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZNPList_ZPP_ColArbiter_obj_sStaticStorageInfo = 0;
#endif

static ::String ZNPList_ZPP_ColArbiter_obj_sMemberFields[] = {
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	::String(null()) };

static void ZNPList_ZPP_ColArbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZNPList_ZPP_ColArbiter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZNPList_ZPP_ColArbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZNPList_ZPP_ColArbiter_obj::__mClass,"__mClass");
};

#endif

hx::Class ZNPList_ZPP_ColArbiter_obj::__mClass;

void ZNPList_ZPP_ColArbiter_obj::__register()
{
	hx::Object *dummy = new ZNPList_ZPP_ColArbiter_obj;
	ZNPList_ZPP_ColArbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZNPList_ZPP_ColArbiter","\xfe","\x26","\x4b","\x86");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZNPList_ZPP_ColArbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZNPList_ZPP_ColArbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZNPList_ZPP_ColArbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZNPList_ZPP_ColArbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZNPList_ZPP_ColArbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZNPList_ZPP_ColArbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
