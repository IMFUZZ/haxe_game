// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionPair
#include <zpp_nape/geom/ZPP_PartitionPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionPair
#include <zpp_nape/util/ZPP_Set_ZPP_PartitionPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2842_new,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","new",0x0fb4ae44,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.new","zpp_nape/util/RBTree.hx",2842,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2869_free,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","free",0xa923e648,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.free","zpp_nape/util/RBTree.hx",2869,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2876_alloc,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","alloc",0x7152c359,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.alloc","zpp_nape/util/RBTree.hx",2876,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2885_verify,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","verify",0x18bb6c15,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.verify","zpp_nape/util/RBTree.hx",2885,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2951_empty,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","empty",0xbf995971,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.empty","zpp_nape/util/RBTree.hx",2951,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2954_singular,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","singular",0x93e2f073,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.singular","zpp_nape/util/RBTree.hx",2954,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2956_size,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","size",0xb1b4ea5d,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.size","zpp_nape/util/RBTree.hx",2956,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2987_has,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","has",0x0fb01d3e,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.has","zpp_nape/util/RBTree.hx",2987,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2989_find,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","find",0xa91d19d5,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.find","zpp_nape/util/RBTree.hx",2989,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2998_has_weak,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","has_weak",0x37ed9a59,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.has_weak","zpp_nape/util/RBTree.hx",2998,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3000_find_weak,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","find_weak",0x45d29a62,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.find_weak","zpp_nape/util/RBTree.hx",3000,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3010_lower_bound,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","lower_bound",0x4ab84a24,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.lower_bound","zpp_nape/util/RBTree.hx",3010,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3046_first,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","first",0x505c9714,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.first","zpp_nape/util/RBTree.hx",3046,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3059_pop_front,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","pop_front",0x3259211f,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.pop_front","zpp_nape/util/RBTree.hx",3059,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3084_remove,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","remove",0x7c0484e0,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.remove","zpp_nape/util/RBTree.hx",3084,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3086_successor_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","successor_node",0xbeb61317,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.successor_node","zpp_nape/util/RBTree.hx",3086,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3109_predecessor_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","predecessor_node",0x13488a14,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.predecessor_node","zpp_nape/util/RBTree.hx",3109,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3132_successor,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","successor",0xec781e8a,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.successor","zpp_nape/util/RBTree.hx",3132,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3144_predecessor,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","predecessor",0xba9308ad,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.predecessor","zpp_nape/util/RBTree.hx",3144,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3156_remove_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","remove_node",0x1d28f501,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.remove_node","zpp_nape/util/RBTree.hx",3156,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3277_clear,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","clear",0x981a9071,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.clear","zpp_nape/util/RBTree.hx",3277,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3281_clear_with,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","clear_with",0x5df8c7d4,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.clear_with","zpp_nape/util/RBTree.hx",3281,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3289_clear_node,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","clear_node",0x580a5bd0,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.clear_node","zpp_nape/util/RBTree.hx",3289,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3324___fix_neg_red,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","__fix_neg_red",0x383eb2bc,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.__fix_neg_red","zpp_nape/util/RBTree.hx",3324,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3392___fix_dbl_red,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","__fix_dbl_red",0x4656e09a,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.__fix_dbl_red","zpp_nape/util/RBTree.hx",3392,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3480_try_insert_bool,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","try_insert_bool",0x2514b5d0,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.try_insert_bool","zpp_nape/util/RBTree.hx",3480,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3572_try_insert,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","try_insert",0x407dbf99,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.try_insert","zpp_nape/util/RBTree.hx",3572,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_3664_insert,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","insert",0x15592bd5,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.insert","zpp_nape/util/RBTree.hx",3664,0x3f078845)
HX_DEFINE_STACK_FRAME(_hx_pos_37ea5206b0a2cd9f_2843_boot,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair","boot",0xa67ccdce,"zpp_nape.util.ZPP_Set_ZPP_PartitionPair.boot","zpp_nape/util/RBTree.hx",2843,0x3f078845)
namespace zpp_nape{
namespace util{

void ZPP_Set_ZPP_PartitionPair_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2842_new)
            	HX_STACK_THIS(this)
HXLINE(2883)		this->colour = (int)0;
HXLINE(2882)		this->parent = null();
HXLINE(2881)		this->next = null();
HXLINE(2880)		this->prev = null();
HXLINE(2879)		this->data = null();
HXLINE(2878)		this->swapped = null();
HXLINE(2877)		this->lt = null();
            	}

Dynamic ZPP_Set_ZPP_PartitionPair_obj::__CreateEmpty() { return new ZPP_Set_ZPP_PartitionPair_obj; }

void *ZPP_Set_ZPP_PartitionPair_obj::_hx_vtable = 0;

Dynamic ZPP_Set_ZPP_PartitionPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Set_ZPP_PartitionPair_obj > _hx_result = new ZPP_Set_ZPP_PartitionPair_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Set_ZPP_PartitionPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7d98cf8e;
}

void ZPP_Set_ZPP_PartitionPair_obj::free(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2869_free)
            	HX_STACK_THIS(this)
HXLINE(2870)		this->data = null();
HXLINE(2871)		this->lt = null();
HXLINE(2872)		this->swapped = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,free,(void))

void ZPP_Set_ZPP_PartitionPair_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2876_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,alloc,(void))

bool ZPP_Set_ZPP_PartitionPair_obj::verify(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2885_verify)
            	HX_STACK_THIS(this)
HXLINE(2895)		if (!(this->empty())) {
HXLINE(2896)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,set_ite) = this->parent;
HXLINE(2897)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(2897)				set_ite = set_ite->prev;
            			}
HXLINE(2898)			while(hx::IsNotNull( set_ite )){
HXLINE(2899)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,i) = set_ite->data;
HXLINE(2900)				{
HXLINE(2901)					HX_VARI( bool,prei) = true;
HXLINE(2911)					if (!(this->empty())) {
HXLINE(2912)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,set_ite1,"set_ite") = this->parent;
HXLINE(2913)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE(2913)							set_ite1 = set_ite1->prev;
            						}
HXLINE(2914)						while(hx::IsNotNull( set_ite1 )){
HXLINE(2915)							HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,j) = set_ite1->data;
HXLINE(2917)							if (!(prei)) {
HXLINE(2918)								bool _hx_tmp;
HXDLIN(2918)								if (!(( (bool)(this->lt(i,j)) ))) {
HXLINE(2918)									_hx_tmp = ( (bool)(this->lt(j,i)) );
            								}
            								else {
HXLINE(2918)									_hx_tmp = false;
            								}
HXDLIN(2918)								if (_hx_tmp) {
HXLINE(2918)									return false;
            								}
            							}
            							else {
HXLINE(2920)								if (hx::IsEq( i,j )) {
HXLINE(2920)									prei = false;
            								}
            								else {
HXLINE(2922)									bool _hx_tmp1;
HXDLIN(2922)									if (!(( (bool)(this->lt(j,i)) ))) {
HXLINE(2922)										_hx_tmp1 = ( (bool)(this->lt(i,j)) );
            									}
            									else {
HXLINE(2922)										_hx_tmp1 = false;
            									}
HXDLIN(2922)									if (_hx_tmp1) {
HXLINE(2922)										return false;
            									}
            								}
            							}
HXLINE(2925)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE(2926)								set_ite1 = set_ite1->next;
HXLINE(2927)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE(2927)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE(2930)								while(true){
HXLINE(2930)									bool _hx_tmp2;
HXDLIN(2930)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE(2930)										_hx_tmp2 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE(2930)										_hx_tmp2 = false;
            									}
HXDLIN(2930)									if (!(_hx_tmp2)) {
HXLINE(2930)										goto _hx_goto_8;
            									}
HXDLIN(2930)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_8:;
HXLINE(2931)								set_ite1 = set_ite1->parent;
            							}
            						}
            					}
            				}
HXLINE(2937)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(2938)					set_ite = set_ite->next;
HXLINE(2939)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(2939)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(2942)					while(true){
HXLINE(2942)						bool _hx_tmp3;
HXDLIN(2942)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(2942)							_hx_tmp3 = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(2942)							_hx_tmp3 = false;
            						}
HXDLIN(2942)						if (!(_hx_tmp3)) {
HXLINE(2942)							goto _hx_goto_10;
            						}
HXDLIN(2942)						set_ite = set_ite->parent;
            					}
            					_hx_goto_10:;
HXLINE(2943)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(2948)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,verify,return )

bool ZPP_Set_ZPP_PartitionPair_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2951_empty)
            	HX_STACK_THIS(this)
HXLINE(2951)		return hx::IsNull( this->parent );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,empty,return )

bool ZPP_Set_ZPP_PartitionPair_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2954_singular)
            	HX_STACK_THIS(this)
HXLINE(2954)		bool _hx_tmp;
HXDLIN(2954)		if (hx::IsNotNull( this->parent )) {
HXLINE(2954)			_hx_tmp = hx::IsNull( this->parent->prev );
            		}
            		else {
HXLINE(2954)			_hx_tmp = false;
            		}
HXDLIN(2954)		if (_hx_tmp) {
HXLINE(2954)			return hx::IsNull( this->parent->next );
            		}
            		else {
HXLINE(2954)			return false;
            		}
HXDLIN(2954)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,singular,return )

int ZPP_Set_ZPP_PartitionPair_obj::size(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2956_size)
            	HX_STACK_THIS(this)
HXLINE(2957)		HX_VARI( int,ret) = (int)0;
HXLINE(2967)		if (!(this->empty())) {
HXLINE(2968)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,set_ite) = this->parent;
HXLINE(2969)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(2969)				set_ite = set_ite->prev;
            			}
HXLINE(2970)			while(hx::IsNotNull( set_ite )){
HXLINE(2972)				ret = (ret + (int)1);
HXLINE(2973)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(2974)					set_ite = set_ite->next;
HXLINE(2975)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(2975)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(2978)					while(true){
HXLINE(2978)						bool _hx_tmp;
HXDLIN(2978)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(2978)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(2978)							_hx_tmp = false;
            						}
HXDLIN(2978)						if (!(_hx_tmp)) {
HXLINE(2978)							goto _hx_goto_17;
            						}
HXDLIN(2978)						set_ite = set_ite->parent;
            					}
            					_hx_goto_17:;
HXLINE(2979)					set_ite = set_ite->parent;
            				}
            			}
            		}
HXLINE(2984)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,size,return )

bool ZPP_Set_ZPP_PartitionPair_obj::has( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2987_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2987)		return hx::IsNotNull( this->find(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,has,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::find( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2989_find)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2990)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = this->parent;
HXLINE(2991)		while(true){
HXLINE(2991)			bool _hx_tmp;
HXDLIN(2991)			if (hx::IsNotNull( cur )) {
HXLINE(2991)				_hx_tmp = hx::IsNotEq( cur->data,obj );
            			}
            			else {
HXLINE(2991)				_hx_tmp = false;
            			}
HXDLIN(2991)			if (!(_hx_tmp)) {
HXLINE(2991)				goto _hx_goto_20;
            			}
HXLINE(2992)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(2992)				cur = cur->prev;
            			}
            			else {
HXLINE(2993)				cur = cur->next;
            			}
            		}
            		_hx_goto_20:;
HXLINE(2995)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,find,return )

bool ZPP_Set_ZPP_PartitionPair_obj::has_weak( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2998_has_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(2998)		return hx::IsNotNull( this->find_weak(obj) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,has_weak,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::find_weak( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3000_find_weak)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3001)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = this->parent;
HXLINE(3002)		while(hx::IsNotNull( cur )){
HXLINE(3003)			if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(3003)				cur = cur->prev;
            			}
            			else {
HXLINE(3004)				if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(3004)					cur = cur->next;
            				}
            				else {
HXLINE(3005)					goto _hx_goto_23;
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE(3007)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,find_weak,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::lower_bound( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3010_lower_bound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3011)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,ret) = null();
HXLINE(3021)		if (!(this->empty())) {
HXLINE(3022)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,set_ite) = this->parent;
HXLINE(3023)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(3023)				set_ite = set_ite->prev;
            			}
HXLINE(3024)			while(hx::IsNotNull( set_ite )){
HXLINE(3025)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,elt) = set_ite->data;
HXLINE(3027)				if (!(( (bool)(this->lt(elt,obj)) ))) {
HXLINE(3028)					ret = elt;
HXLINE(3029)					goto _hx_goto_26;
            				}
HXLINE(3032)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(3033)					set_ite = set_ite->next;
HXLINE(3034)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(3034)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(3037)					while(true){
HXLINE(3037)						bool _hx_tmp;
HXDLIN(3037)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(3037)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(3037)							_hx_tmp = false;
            						}
HXDLIN(3037)						if (!(_hx_tmp)) {
HXLINE(3037)							goto _hx_goto_28;
            						}
HXDLIN(3037)						set_ite = set_ite->parent;
            					}
            					_hx_goto_28:;
HXLINE(3038)					set_ite = set_ite->parent;
            				}
            			}
            			_hx_goto_26:;
            		}
HXLINE(3010)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,lower_bound,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::first(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3046_first)
            	HX_STACK_THIS(this)
HXLINE(3055)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = this->parent;
HXLINE(3056)		while(hx::IsNotNull( cur->prev )){
HXLINE(3056)			cur = cur->prev;
            		}
HXLINE(3057)		return cur->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,first,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::pop_front(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3059_pop_front)
            	HX_STACK_THIS(this)
HXLINE(3068)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = this->parent;
HXLINE(3069)		while(hx::IsNotNull( cur->prev )){
HXLINE(3069)			cur = cur->prev;
            		}
HXLINE(3070)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,ret) = cur->data;
HXLINE(3071)		this->remove_node(cur);
HXLINE(3072)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,pop_front,return )

void ZPP_Set_ZPP_PartitionPair_obj::remove( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3084_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3084)		this->remove_node(this->find(obj));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,remove,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::successor_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair cur){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3086_successor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(3095)		if (hx::IsNotNull( cur->next )) {
HXLINE(3096)			cur = cur->next;
HXLINE(3097)			while(hx::IsNotNull( cur->prev )){
HXLINE(3097)				cur = cur->prev;
            			}
            		}
            		else {
HXLINE(3100)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,pre) = cur;
HXLINE(3101)			cur = cur->parent;
HXLINE(3102)			while(true){
HXLINE(3102)				bool _hx_tmp;
HXDLIN(3102)				if (hx::IsNotNull( cur )) {
HXLINE(3102)					_hx_tmp = hx::IsNotEq( cur->prev,pre );
            				}
            				else {
HXLINE(3102)					_hx_tmp = false;
            				}
HXDLIN(3102)				if (!(_hx_tmp)) {
HXLINE(3102)					goto _hx_goto_36;
            				}
HXLINE(3103)				pre = cur;
HXLINE(3104)				cur = cur->parent;
            			}
            			_hx_goto_36:;
            		}
HXLINE(3107)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,successor_node,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::predecessor_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair cur){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3109_predecessor_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(3118)		if (hx::IsNotNull( cur->prev )) {
HXLINE(3119)			cur = cur->prev;
HXLINE(3120)			while(hx::IsNotNull( cur->next )){
HXLINE(3120)				cur = cur->next;
            			}
            		}
            		else {
HXLINE(3123)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,pre) = cur;
HXLINE(3124)			cur = cur->parent;
HXLINE(3125)			while(true){
HXLINE(3125)				bool _hx_tmp;
HXDLIN(3125)				if (hx::IsNotNull( cur )) {
HXLINE(3125)					_hx_tmp = hx::IsNotEq( cur->next,pre );
            				}
            				else {
HXLINE(3125)					_hx_tmp = false;
            				}
HXDLIN(3125)				if (!(_hx_tmp)) {
HXLINE(3125)					goto _hx_goto_39;
            				}
HXLINE(3126)				pre = cur;
HXLINE(3127)				cur = cur->parent;
            			}
            			_hx_goto_39:;
            		}
HXLINE(3130)		return cur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,predecessor_node,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::successor( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3132_successor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3141)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,node) = this->successor_node(this->find(obj));
HXLINE(3142)		if (hx::IsNull( node )) {
HXLINE(3142)			return null();
            		}
            		else {
HXLINE(3142)			return node->data;
            		}
HXDLIN(3142)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,successor,return )

 ::zpp_nape::geom::ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::predecessor( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3144_predecessor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3153)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,node) = this->predecessor_node(this->find(obj));
HXLINE(3154)		if (hx::IsNull( node )) {
HXLINE(3154)			return null();
            		}
            		else {
HXLINE(3154)			return node->data;
            		}
HXDLIN(3154)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,predecessor,return )

void ZPP_Set_ZPP_PartitionPair_obj::remove_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair cur){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3156_remove_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
HXLINE(3165)		bool _hx_tmp;
HXDLIN(3165)		if (hx::IsNotNull( cur->next )) {
HXLINE(3165)			_hx_tmp = hx::IsNotNull( cur->prev );
            		}
            		else {
HXLINE(3165)			_hx_tmp = false;
            		}
HXDLIN(3165)		if (_hx_tmp) {
HXLINE(3166)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,sm) = cur->next;
HXLINE(3167)			while(hx::IsNotNull( sm->prev )){
HXLINE(3167)				sm = sm->prev;
            			}
HXLINE(3168)			{
HXLINE(3169)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,t) = cur->data;
HXLINE(3170)				cur->data = sm->data;
HXLINE(3171)				sm->data = t;
            			}
HXLINE(3173)			if (hx::IsNotNull( this->swapped )) {
HXLINE(3173)				this->swapped(cur->data,sm->data);
            			}
HXLINE(3174)			cur = sm;
            		}
HXLINE(3184)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,child);
HXDLIN(3184)		if (hx::IsNull( cur->prev )) {
HXLINE(3184)			child = cur->next;
            		}
            		else {
HXLINE(3184)			child = cur->prev;
            		}
HXLINE(3185)		if ((cur->colour == (int)1)) {
HXLINE(3186)			bool _hx_tmp1;
HXDLIN(3186)			if (hx::IsNull( cur->prev )) {
HXLINE(3186)				_hx_tmp1 = hx::IsNotNull( cur->next );
            			}
            			else {
HXLINE(3186)				_hx_tmp1 = true;
            			}
HXDLIN(3186)			if (_hx_tmp1) {
HXLINE(3186)				child->colour = (int)1;
            			}
            			else {
HXLINE(3187)				if (hx::IsNotNull( cur->parent )) {
HXLINE(3188)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,parent) = cur->parent;
HXLINE(3189)					while(true){
HXLINE(3190)						parent->colour++;
HXLINE(3191)						parent->prev->colour--;
HXLINE(3192)						parent->next->colour--;
HXLINE(3193)						{
HXLINE(3194)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,child1,"child") = parent->prev;
HXLINE(3195)							if ((child1->colour == (int)-1)) {
HXLINE(3196)								this->_hx___fix_neg_red(child1);
HXLINE(3197)								goto _hx_goto_44;
            							}
            							else {
HXLINE(3199)								if ((child1->colour == (int)0)) {
HXLINE(3201)									bool _hx_tmp2;
HXDLIN(3201)									if (hx::IsNotNull( child1->prev )) {
HXLINE(3201)										_hx_tmp2 = (child1->prev->colour == (int)0);
            									}
            									else {
HXLINE(3201)										_hx_tmp2 = false;
            									}
HXDLIN(3201)									if (_hx_tmp2) {
HXLINE(3202)										this->_hx___fix_dbl_red(child1->prev);
HXLINE(3203)										goto _hx_goto_44;
            									}
HXLINE(3207)									bool _hx_tmp3;
HXDLIN(3207)									if (hx::IsNotNull( child1->next )) {
HXLINE(3207)										_hx_tmp3 = (child1->next->colour == (int)0);
            									}
            									else {
HXLINE(3207)										_hx_tmp3 = false;
            									}
HXDLIN(3207)									if (_hx_tmp3) {
HXLINE(3208)										this->_hx___fix_dbl_red(child1->next);
HXLINE(3209)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(3214)						{
HXLINE(3215)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,child2,"child") = parent->next;
HXLINE(3216)							if ((child2->colour == (int)-1)) {
HXLINE(3217)								this->_hx___fix_neg_red(child2);
HXLINE(3218)								goto _hx_goto_44;
            							}
            							else {
HXLINE(3220)								if ((child2->colour == (int)0)) {
HXLINE(3222)									bool _hx_tmp4;
HXDLIN(3222)									if (hx::IsNotNull( child2->prev )) {
HXLINE(3222)										_hx_tmp4 = (child2->prev->colour == (int)0);
            									}
            									else {
HXLINE(3222)										_hx_tmp4 = false;
            									}
HXDLIN(3222)									if (_hx_tmp4) {
HXLINE(3223)										this->_hx___fix_dbl_red(child2->prev);
HXLINE(3224)										goto _hx_goto_44;
            									}
HXLINE(3228)									bool _hx_tmp5;
HXDLIN(3228)									if (hx::IsNotNull( child2->next )) {
HXLINE(3228)										_hx_tmp5 = (child2->next->colour == (int)0);
            									}
            									else {
HXLINE(3228)										_hx_tmp5 = false;
            									}
HXDLIN(3228)									if (_hx_tmp5) {
HXLINE(3229)										this->_hx___fix_dbl_red(child2->next);
HXLINE(3230)										goto _hx_goto_44;
            									}
            								}
            							}
            						}
HXLINE(3235)						if ((parent->colour == (int)2)) {
HXLINE(3236)							if (hx::IsNull( parent->parent )) {
HXLINE(3237)								parent->colour = (int)1;
            							}
            							else {
HXLINE(3240)								parent = parent->parent;
HXLINE(3241)								continue;
            							}
            						}
HXLINE(3244)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE(3248)		{
HXLINE(3249)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,par) = cur->parent;
HXLINE(3250)			if (hx::IsNull( par )) {
HXLINE(3251)				this->parent = child;
            			}
            			else {
HXLINE(3253)				if (hx::IsEq( par->prev,cur )) {
HXLINE(3253)					par->prev = child;
            				}
            				else {
HXLINE(3254)					par->next = child;
            				}
            			}
HXLINE(3255)			if (hx::IsNotNull( child )) {
HXLINE(3255)				child->parent = par;
            			}
            		}
HXLINE(3257)		cur->parent = (cur->prev = (cur->next = null()));
HXLINE(3258)		{
HXLINE(3259)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,o) = cur;
HXLINE(3268)			{
HXLINE(3268)				o->data = null();
HXDLIN(3268)				o->lt = null();
HXDLIN(3268)				o->swapped = null();
            			}
HXLINE(3269)			o->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3270)			::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = o;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,remove_node,(void))

void ZPP_Set_ZPP_PartitionPair_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3277_clear)
            	HX_STACK_THIS(this)
HXLINE(3277)		if (hx::IsNotNull( this->parent )) {
HXLINE(3277)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = this->parent;
HXDLIN(3277)			while(hx::IsNotNull( cur )){
HXLINE(3277)				if (hx::IsNotNull( cur->prev )) {
HXLINE(3277)					cur = cur->prev;
            				}
            				else {
HXLINE(3277)					if (hx::IsNotNull( cur->next )) {
HXLINE(3277)						cur = cur->next;
            					}
            					else {
HXLINE(3277)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,ret) = cur->parent;
HXDLIN(3277)						if (hx::IsNotNull( ret )) {
HXLINE(3277)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(3277)								ret->prev = null();
            							}
            							else {
HXLINE(3277)								ret->next = null();
            							}
HXDLIN(3277)							cur->parent = null();
            						}
HXDLIN(3277)						{
HXLINE(3277)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,o) = cur;
HXDLIN(3277)							{
HXLINE(3277)								o->data = null();
HXDLIN(3277)								o->lt = null();
HXDLIN(3277)								o->swapped = null();
            							}
HXDLIN(3277)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXDLIN(3277)							::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = o;
            						}
HXDLIN(3277)						cur = ret;
            					}
            				}
            			}
HXDLIN(3277)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Set_ZPP_PartitionPair_obj,clear,(void))

void ZPP_Set_ZPP_PartitionPair_obj::clear_with( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3281_clear_with)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(3281)		if (hx::IsNull( this->parent )) {
HXLINE(3281)			return;
            		}
            		else {
HXLINE(3283)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = this->parent;
HXLINE(3284)			while(hx::IsNotNull( cur )){
HXLINE(3284)				if (hx::IsNotNull( cur->prev )) {
HXLINE(3284)					cur = cur->prev;
            				}
            				else {
HXLINE(3284)					if (hx::IsNotNull( cur->next )) {
HXLINE(3284)						cur = cur->next;
            					}
            					else {
HXLINE(3284)						lambda(cur->data);
HXDLIN(3284)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,ret) = cur->parent;
HXDLIN(3284)						if (hx::IsNotNull( ret )) {
HXLINE(3284)							if (hx::IsEq( cur,ret->prev )) {
HXLINE(3284)								ret->prev = null();
            							}
            							else {
HXLINE(3284)								ret->next = null();
            							}
HXDLIN(3284)							cur->parent = null();
            						}
HXDLIN(3284)						{
HXLINE(3284)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,o) = cur;
HXDLIN(3284)							{
HXLINE(3284)								o->data = null();
HXDLIN(3284)								o->lt = null();
HXDLIN(3284)								o->swapped = null();
            							}
HXDLIN(3284)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXDLIN(3284)							::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = o;
            						}
HXDLIN(3284)						cur = ret;
            					}
            				}
            			}
HXLINE(3285)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,clear_with,(void))

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::clear_node( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair node, ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3289_clear_node)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE(3298)		lambda(node->data);
HXLINE(3299)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,ret) = node->parent;
HXLINE(3300)		if (hx::IsNotNull( ret )) {
HXLINE(3301)			if (hx::IsEq( node,ret->prev )) {
HXLINE(3301)				ret->prev = null();
            			}
            			else {
HXLINE(3302)				ret->next = null();
            			}
HXLINE(3303)			node->parent = null();
            		}
HXLINE(3305)		{
HXLINE(3315)			{
HXLINE(3315)				node->data = null();
HXDLIN(3315)				node->lt = null();
HXDLIN(3315)				node->swapped = null();
            			}
HXLINE(3316)			node->next = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3317)			::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = node;
            		}
HXLINE(3322)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Set_ZPP_PartitionPair_obj,clear_node,return )

void ZPP_Set_ZPP_PartitionPair_obj::_hx___fix_neg_red( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair negred){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3324___fix_neg_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(negred,"negred")
HXLINE(3325)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,parent) = negred->parent;
HXLINE(3326)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,child);
HXDLIN(3326)		if (hx::IsEq( parent->prev,negred )) {
HXLINE(3327)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,nl) = negred->prev;
HXLINE(3328)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,nr) = negred->next;
HXLINE(3329)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,trl) = nr->prev;
HXLINE(3330)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,trr) = nr->next;
HXLINE(3331)			nl->colour = (int)0;
HXLINE(3332)			negred->colour = (parent->colour = (int)1);
HXLINE(3333)			{
HXLINE(3334)				negred->next = trl;
HXLINE(3335)				if (hx::IsNotNull( trl )) {
HXLINE(3335)					trl->parent = negred;
            				}
            			}
HXLINE(3337)			{
HXLINE(3338)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,t) = parent->data;
HXLINE(3339)				parent->data = nr->data;
HXLINE(3340)				nr->data = t;
            			}
HXLINE(3342)			if (hx::IsNotNull( this->swapped )) {
HXLINE(3342)				this->swapped(parent->data,nr->data);
            			}
HXLINE(3343)			{
HXLINE(3344)				nr->prev = trr;
HXLINE(3345)				if (hx::IsNotNull( trr )) {
HXLINE(3345)					trr->parent = nr;
            				}
            			}
HXLINE(3347)			{
HXLINE(3348)				nr->next = parent->next;
HXLINE(3349)				if (hx::IsNotNull( parent->next )) {
HXLINE(3349)					parent->next->parent = nr;
            				}
            			}
HXLINE(3351)			{
HXLINE(3352)				parent->next = nr;
HXLINE(3353)				if (hx::IsNotNull( nr )) {
HXLINE(3353)					nr->parent = parent;
            				}
            			}
HXLINE(3326)			child = nl;
            		}
            		else {
HXLINE(3358)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,nl1,"nl") = negred->next;
HXLINE(3359)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,nr1,"nr") = negred->prev;
HXLINE(3360)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,trl1,"trl") = nr1->next;
HXLINE(3361)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,trr1,"trr") = nr1->prev;
HXLINE(3362)			nl1->colour = (int)0;
HXLINE(3363)			negred->colour = (parent->colour = (int)1);
HXLINE(3364)			{
HXLINE(3365)				negred->prev = trl1;
HXLINE(3366)				if (hx::IsNotNull( trl1 )) {
HXLINE(3366)					trl1->parent = negred;
            				}
            			}
HXLINE(3368)			{
HXLINE(3369)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionPair,t1,"t") = parent->data;
HXLINE(3370)				parent->data = nr1->data;
HXLINE(3371)				nr1->data = t1;
            			}
HXLINE(3373)			if (hx::IsNotNull( this->swapped )) {
HXLINE(3373)				this->swapped(parent->data,nr1->data);
            			}
HXLINE(3374)			{
HXLINE(3375)				nr1->next = trr1;
HXLINE(3376)				if (hx::IsNotNull( trr1 )) {
HXLINE(3376)					trr1->parent = nr1;
            				}
            			}
HXLINE(3378)			{
HXLINE(3379)				nr1->prev = parent->prev;
HXLINE(3380)				if (hx::IsNotNull( parent->prev )) {
HXLINE(3380)					parent->prev->parent = nr1;
            				}
            			}
HXLINE(3382)			{
HXLINE(3383)				parent->prev = nr1;
HXLINE(3384)				if (hx::IsNotNull( nr1 )) {
HXLINE(3384)					nr1->parent = parent;
            				}
            			}
HXLINE(3326)			child = nl1;
            		}
HXLINE(3388)		bool _hx_tmp;
HXDLIN(3388)		if (hx::IsNotNull( child->prev )) {
HXLINE(3388)			_hx_tmp = (child->prev->colour == (int)0);
            		}
            		else {
HXLINE(3388)			_hx_tmp = false;
            		}
HXDLIN(3388)		if (_hx_tmp) {
HXLINE(3388)			this->_hx___fix_dbl_red(child->prev);
            		}
            		else {
HXLINE(3389)			bool _hx_tmp1;
HXDLIN(3389)			if (hx::IsNotNull( child->next )) {
HXLINE(3389)				_hx_tmp1 = (child->next->colour == (int)0);
            			}
            			else {
HXLINE(3389)				_hx_tmp1 = false;
            			}
HXDLIN(3389)			if (_hx_tmp1) {
HXLINE(3389)				this->_hx___fix_dbl_red(child->next);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,_hx___fix_neg_red,(void))

void ZPP_Set_ZPP_PartitionPair_obj::_hx___fix_dbl_red( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair x){
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3392___fix_dbl_red)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(3392)		while(true){
HXLINE(3393)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,par) = x->parent;
HXLINE(3394)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,g) = par->parent;
HXLINE(3395)			if (hx::IsNull( g )) {
HXLINE(3396)				par->colour = (int)1;
HXLINE(3397)				goto _hx_goto_52;
            			}
HXLINE(3399)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,n1);
HXDLIN(3399)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,n2);
HXDLIN(3399)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,n3);
HXDLIN(3399)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,t1);
HXDLIN(3399)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,t2);
HXDLIN(3399)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,t3);
HXDLIN(3399)			HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,t4);
HXLINE(3400)			if (hx::IsEq( par,g->prev )) {
HXLINE(3401)				n3 = g;
HXLINE(3402)				t4 = g->next;
HXLINE(3403)				if (hx::IsEq( x,par->prev )) {
HXLINE(3404)					n1 = x;
HXLINE(3405)					n2 = par;
HXLINE(3406)					t1 = x->prev;
HXLINE(3407)					t2 = x->next;
HXLINE(3408)					t3 = par->next;
            				}
            				else {
HXLINE(3411)					n1 = par;
HXLINE(3412)					n2 = x;
HXLINE(3413)					t1 = par->prev;
HXLINE(3414)					t2 = x->prev;
HXLINE(3415)					t3 = x->next;
            				}
            			}
            			else {
HXLINE(3419)				n1 = g;
HXLINE(3420)				t1 = g->prev;
HXLINE(3421)				if (hx::IsEq( x,par->prev )) {
HXLINE(3422)					n2 = x;
HXLINE(3423)					n3 = par;
HXLINE(3424)					t2 = x->prev;
HXLINE(3425)					t3 = x->next;
HXLINE(3426)					t4 = par->next;
            				}
            				else {
HXLINE(3429)					n2 = par;
HXLINE(3430)					n3 = x;
HXLINE(3431)					t2 = par->prev;
HXLINE(3432)					t3 = x->prev;
HXLINE(3433)					t4 = x->next;
            				}
            			}
HXLINE(3436)			{
HXLINE(3437)				HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,par1,"par") = g->parent;
HXLINE(3438)				if (hx::IsNull( par1 )) {
HXLINE(3439)					this->parent = n2;
            				}
            				else {
HXLINE(3441)					if (hx::IsEq( par1->prev,g )) {
HXLINE(3441)						par1->prev = n2;
            					}
            					else {
HXLINE(3442)						par1->next = n2;
            					}
            				}
HXLINE(3443)				if (hx::IsNotNull( n2 )) {
HXLINE(3443)					n2->parent = par1;
            				}
            			}
HXLINE(3445)			{
HXLINE(3446)				n1->prev = t1;
HXLINE(3447)				if (hx::IsNotNull( t1 )) {
HXLINE(3447)					t1->parent = n1;
            				}
            			}
HXLINE(3449)			{
HXLINE(3450)				n1->next = t2;
HXLINE(3451)				if (hx::IsNotNull( t2 )) {
HXLINE(3451)					t2->parent = n1;
            				}
            			}
HXLINE(3453)			{
HXLINE(3454)				n2->prev = n1;
HXLINE(3455)				if (hx::IsNotNull( n1 )) {
HXLINE(3455)					n1->parent = n2;
            				}
            			}
HXLINE(3457)			{
HXLINE(3458)				n2->next = n3;
HXLINE(3459)				if (hx::IsNotNull( n3 )) {
HXLINE(3459)					n3->parent = n2;
            				}
            			}
HXLINE(3461)			{
HXLINE(3462)				n3->prev = t3;
HXLINE(3463)				if (hx::IsNotNull( t3 )) {
HXLINE(3463)					t3->parent = n3;
            				}
            			}
HXLINE(3465)			{
HXLINE(3466)				n3->next = t4;
HXLINE(3467)				if (hx::IsNotNull( t4 )) {
HXLINE(3467)					t4->parent = n3;
            				}
            			}
HXLINE(3469)			n2->colour = (g->colour - (int)1);
HXLINE(3470)			n1->colour = (int)1;
HXLINE(3471)			n3->colour = (int)1;
HXLINE(3472)			if (hx::IsEq( n2,this->parent )) {
HXLINE(3472)				this->parent->colour = (int)1;
            			}
            			else {
HXLINE(3473)				bool _hx_tmp;
HXDLIN(3473)				if ((n2->colour == (int)0)) {
HXLINE(3473)					_hx_tmp = (n2->parent->colour == (int)0);
            				}
            				else {
HXLINE(3473)					_hx_tmp = false;
            				}
HXDLIN(3473)				if (_hx_tmp) {
HXLINE(3474)					x = n2;
HXLINE(3475)					continue;
            				}
            			}
HXLINE(3477)			goto _hx_goto_52;
            		}
            		_hx_goto_52:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,_hx___fix_dbl_red,(void))

bool ZPP_Set_ZPP_PartitionPair_obj::try_insert_bool( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_GC_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3480_try_insert_bool)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3481)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,x) = null();
HXLINE(3482)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = null();
HXLINE(3483)		if (hx::IsNull( this->parent )) {
HXLINE(3485)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE(3486)				x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(3492)				x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3493)				::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = x->next;
HXLINE(3494)				x->next = null();
            			}
HXLINE(3501)			x->data = obj;
HXLINE(3502)			this->parent = x;
            		}
            		else {
HXLINE(3505)			cur = this->parent;
HXLINE(3506)			while(true){
HXLINE(3507)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(3508)					if (hx::IsNull( cur->prev )) {
HXLINE(3510)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE(3511)							x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(3517)							x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3518)							::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = x->next;
HXLINE(3519)							x->next = null();
            						}
HXLINE(3526)						x->data = obj;
HXLINE(3527)						cur->prev = x;
HXLINE(3528)						x->parent = cur;
HXLINE(3529)						goto _hx_goto_54;
            					}
            					else {
HXLINE(3531)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(3533)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(3534)						if (hx::IsNull( cur->next )) {
HXLINE(3536)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE(3537)								x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(3543)								x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3544)								::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = x->next;
HXLINE(3545)								x->next = null();
            							}
HXLINE(3552)							x->data = obj;
HXLINE(3553)							cur->next = x;
HXLINE(3554)							x->parent = cur;
HXLINE(3555)							goto _hx_goto_54;
            						}
            						else {
HXLINE(3557)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(3559)						goto _hx_goto_54;
            					}
            				}
            			}
            			_hx_goto_54:;
            		}
HXLINE(3562)		if (hx::IsNull( x )) {
HXLINE(3562)			return false;
            		}
            		else {
HXLINE(3564)			if (hx::IsNull( x->parent )) {
HXLINE(3564)				x->colour = (int)1;
            			}
            			else {
HXLINE(3566)				x->colour = (int)0;
HXLINE(3567)				if ((x->parent->colour == (int)0)) {
HXLINE(3567)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(3569)			return true;
            		}
HXLINE(3562)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,try_insert_bool,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::try_insert( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_GC_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3572_try_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3573)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,x) = null();
HXLINE(3574)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = null();
HXLINE(3575)		if (hx::IsNull( this->parent )) {
HXLINE(3577)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE(3578)				x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(3584)				x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3585)				::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = x->next;
HXLINE(3586)				x->next = null();
            			}
HXLINE(3593)			x->data = obj;
HXLINE(3594)			this->parent = x;
            		}
            		else {
HXLINE(3597)			cur = this->parent;
HXLINE(3598)			while(true){
HXLINE(3599)				if (( (bool)(this->lt(obj,cur->data)) )) {
HXLINE(3600)					if (hx::IsNull( cur->prev )) {
HXLINE(3602)						if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE(3603)							x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE(3609)							x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3610)							::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = x->next;
HXLINE(3611)							x->next = null();
            						}
HXLINE(3618)						x->data = obj;
HXLINE(3619)						cur->prev = x;
HXLINE(3620)						x->parent = cur;
HXLINE(3621)						goto _hx_goto_56;
            					}
            					else {
HXLINE(3623)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(3625)					if (( (bool)(this->lt(cur->data,obj)) )) {
HXLINE(3626)						if (hx::IsNull( cur->next )) {
HXLINE(3628)							if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE(3629)								x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE(3635)								x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3636)								::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = x->next;
HXLINE(3637)								x->next = null();
            							}
HXLINE(3644)							x->data = obj;
HXLINE(3645)							cur->next = x;
HXLINE(3646)							x->parent = cur;
HXLINE(3647)							goto _hx_goto_56;
            						}
            						else {
HXLINE(3649)							cur = cur->next;
            						}
            					}
            					else {
HXLINE(3651)						goto _hx_goto_56;
            					}
            				}
            			}
            			_hx_goto_56:;
            		}
HXLINE(3654)		if (hx::IsNull( x )) {
HXLINE(3654)			return cur;
            		}
            		else {
HXLINE(3656)			if (hx::IsNull( x->parent )) {
HXLINE(3656)				x->colour = (int)1;
            			}
            			else {
HXLINE(3658)				x->colour = (int)0;
HXLINE(3659)				if ((x->parent->colour == (int)0)) {
HXLINE(3659)					this->_hx___fix_dbl_red(x);
            				}
            			}
HXLINE(3661)			return x;
            		}
HXLINE(3654)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,try_insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::insert( ::zpp_nape::geom::ZPP_PartitionPair obj){
            	HX_GC_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_3664_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(3673)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,x);
HXLINE(3675)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE(3676)			x =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(3682)			x = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE(3683)			::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = x->next;
HXLINE(3684)			x->next = null();
            		}
HXLINE(3691)		x->data = obj;
HXLINE(3692)		if (hx::IsNull( this->parent )) {
HXLINE(3692)			this->parent = x;
            		}
            		else {
HXLINE(3694)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,cur) = this->parent;
HXLINE(3695)			while(true){
HXLINE(3696)				if (( (bool)(this->lt(x->data,cur->data)) )) {
HXLINE(3697)					if (hx::IsNull( cur->prev )) {
HXLINE(3698)						cur->prev = x;
HXLINE(3699)						x->parent = cur;
HXLINE(3700)						goto _hx_goto_58;
            					}
            					else {
HXLINE(3702)						cur = cur->prev;
            					}
            				}
            				else {
HXLINE(3705)					if (hx::IsNull( cur->next )) {
HXLINE(3706)						cur->next = x;
HXLINE(3707)						x->parent = cur;
HXLINE(3708)						goto _hx_goto_58;
            					}
            					else {
HXLINE(3710)						cur = cur->next;
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE(3714)		if (hx::IsNull( x->parent )) {
HXLINE(3714)			x->colour = (int)1;
            		}
            		else {
HXLINE(3716)			x->colour = (int)0;
HXLINE(3717)			if ((x->parent->colour == (int)0)) {
HXLINE(3717)				this->_hx___fix_dbl_red(x);
            			}
            		}
HXLINE(3727)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Set_ZPP_PartitionPair_obj,insert,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;


hx::ObjectPtr< ZPP_Set_ZPP_PartitionPair_obj > ZPP_Set_ZPP_PartitionPair_obj::__new() {
	hx::ObjectPtr< ZPP_Set_ZPP_PartitionPair_obj > __this = new ZPP_Set_ZPP_PartitionPair_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Set_ZPP_PartitionPair_obj > ZPP_Set_ZPP_PartitionPair_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Set_ZPP_PartitionPair_obj *__this = (ZPP_Set_ZPP_PartitionPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Set_ZPP_PartitionPair_obj), true, "zpp_nape.util.ZPP_Set_ZPP_PartitionPair"));
	*(void **)__this = ZPP_Set_ZPP_PartitionPair_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Set_ZPP_PartitionPair_obj::ZPP_Set_ZPP_PartitionPair_obj()
{
}

void ZPP_Set_ZPP_PartitionPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Set_ZPP_PartitionPair);
	HX_MARK_MEMBER_NAME(lt,"lt");
	HX_MARK_MEMBER_NAME(swapped,"swapped");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_END_CLASS();
}

void ZPP_Set_ZPP_PartitionPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lt,"lt");
	HX_VISIT_MEMBER_NAME(swapped,"swapped");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(colour,"colour");
}

hx::Val ZPP_Set_ZPP_PartitionPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { return hx::Val( lt); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"first") ) { return hx::Val( first_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		if (HX_FIELD_EQ(inName,"verify") ) { return hx::Val( verify_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { return hx::Val( swapped); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"has_weak") ) { return hx::Val( has_weak_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"find_weak") ) { return hx::Val( find_weak_dyn()); }
		if (HX_FIELD_EQ(inName,"pop_front") ) { return hx::Val( pop_front_dyn()); }
		if (HX_FIELD_EQ(inName,"successor") ) { return hx::Val( successor_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clear_with") ) { return hx::Val( clear_with_dyn()); }
		if (HX_FIELD_EQ(inName,"clear_node") ) { return hx::Val( clear_node_dyn()); }
		if (HX_FIELD_EQ(inName,"try_insert") ) { return hx::Val( try_insert_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lower_bound") ) { return hx::Val( lower_bound_dyn()); }
		if (HX_FIELD_EQ(inName,"predecessor") ) { return hx::Val( predecessor_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_node") ) { return hx::Val( remove_node_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fix_neg_red") ) { return hx::Val( _hx___fix_neg_red_dyn()); }
		if (HX_FIELD_EQ(inName,"__fix_dbl_red") ) { return hx::Val( _hx___fix_dbl_red_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"successor_node") ) { return hx::Val( successor_node_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"try_insert_bool") ) { return hx::Val( try_insert_bool_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"predecessor_node") ) { return hx::Val( predecessor_node_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Set_ZPP_PartitionPair_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_Set_ZPP_PartitionPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { lt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"swapped") ) { swapped=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Set_ZPP_PartitionPair_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair >(); return true; }
	}
	return false;
}

void ZPP_Set_ZPP_PartitionPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Set_ZPP_PartitionPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionPair_obj,lt),HX_HCSTRING("lt","\x88","\x5e","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionPair_obj,swapped),HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionPair*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionPair_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionPair*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionPair_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionPair*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionPair_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionPair*/ ,(int)offsetof(ZPP_Set_ZPP_PartitionPair_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(ZPP_Set_ZPP_PartitionPair_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Set_ZPP_PartitionPair_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionPair*/ ,(void *) &ZPP_Set_ZPP_PartitionPair_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Set_ZPP_PartitionPair_obj_sMemberFields[] = {
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("swapped","\x1c","\xc8","\xd7","\x66"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("verify","\x79","\x83","\x3f","\xa1"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("has_weak","\xbd","\x52","\x31","\xfb"),
	HX_HCSTRING("find_weak","\x7e","\x39","\xd0","\x5d"),
	HX_HCSTRING("lower_bound","\x40","\xe8","\xb0","\x94"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("pop_front","\x3b","\xc0","\x56","\x4a"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("successor_node","\x7b","\x2e","\xf6","\x81"),
	HX_HCSTRING("predecessor_node","\x78","\x46","\x51","\x3b"),
	HX_HCSTRING("successor","\xa6","\xbd","\x75","\x04"),
	HX_HCSTRING("predecessor","\xc9","\xa6","\x8b","\x04"),
	HX_HCSTRING("remove_node","\x1d","\x93","\x21","\x67"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clear_with","\x38","\x61","\xe6","\x43"),
	HX_HCSTRING("clear_node","\x34","\xf5","\xf7","\x3d"),
	HX_HCSTRING("__fix_neg_red","\xd8","\x0f","\x30","\x68"),
	HX_HCSTRING("__fix_dbl_red","\xb6","\x3d","\x48","\x76"),
	HX_HCSTRING("try_insert_bool","\xec","\x91","\xec","\x39"),
	HX_HCSTRING("try_insert","\xfd","\x58","\x6b","\x26"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	::String(null()) };

static void ZPP_Set_ZPP_PartitionPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_PartitionPair_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Set_ZPP_PartitionPair_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Set_ZPP_PartitionPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_PartitionPair_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Set_ZPP_PartitionPair_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_Set_ZPP_PartitionPair_obj::__mClass;

static ::String ZPP_Set_ZPP_PartitionPair_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_Set_ZPP_PartitionPair_obj::__register()
{
	hx::Object *dummy = new ZPP_Set_ZPP_PartitionPair_obj;
	ZPP_Set_ZPP_PartitionPair_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Set_ZPP_PartitionPair","\x52","\x7c","\xaf","\x86");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Set_ZPP_PartitionPair_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Set_ZPP_PartitionPair_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Set_ZPP_PartitionPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_PartitionPair_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Set_ZPP_PartitionPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Set_ZPP_PartitionPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Set_ZPP_PartitionPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Set_ZPP_PartitionPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Set_ZPP_PartitionPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Set_ZPP_PartitionPair_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_37ea5206b0a2cd9f_2843_boot)
HXLINE(2843)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace util
