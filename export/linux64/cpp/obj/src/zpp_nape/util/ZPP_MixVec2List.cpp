// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2List
#include <nape/geom/Vec2List.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_MixVec2List
#include <zpp_nape/util/ZPP_MixVec2List.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Vec2List
#include <zpp_nape/util/ZPP_Vec2List.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16277_new,"zpp_nape.util.ZPP_MixVec2List","new",0x430cbb5a,"zpp_nape.util.ZPP_MixVec2List.new","zpp_nape/util/Lists.hx",16277,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16296_zpp_gl,"zpp_nape.util.ZPP_MixVec2List","zpp_gl",0x203000d0,"zpp_nape.util.ZPP_MixVec2List.zpp_gl","zpp_nape/util/Lists.hx",16296,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16312_zpp_vm,"zpp_nape.util.ZPP_MixVec2List","zpp_vm",0x20300de2,"zpp_nape.util.ZPP_MixVec2List.zpp_vm","zpp_nape/util/Lists.hx",16312,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16321_at,"zpp_nape.util.ZPP_MixVec2List","at",0x85776739,"zpp_nape.util.ZPP_MixVec2List.at","zpp_nape/util/Lists.hx",16321,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16348_push,"zpp_nape.util.ZPP_MixVec2List","push",0x6975c1a0,"zpp_nape.util.ZPP_MixVec2List.push","zpp_nape/util/Lists.hx",16348,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16370_unshift,"zpp_nape.util.ZPP_MixVec2List","unshift",0x2d56d383,"zpp_nape.util.ZPP_MixVec2List.unshift","zpp_nape/util/Lists.hx",16370,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16392_pop,"zpp_nape.util.ZPP_MixVec2List","pop",0x430e488b,"zpp_nape.util.ZPP_MixVec2List.pop","zpp_nape/util/Lists.hx",16392,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16421_shift,"zpp_nape.util.ZPP_MixVec2List","shift",0x8f2809fc,"zpp_nape.util.ZPP_MixVec2List.shift","zpp_nape/util/Lists.hx",16421,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16450_remove,"zpp_nape.util.ZPP_MixVec2List","remove",0x95fd498a,"zpp_nape.util.ZPP_MixVec2List.remove","zpp_nape/util/Lists.hx",16450,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16485_clear,"zpp_nape.util.ZPP_MixVec2List","clear",0x5b608f07,"zpp_nape.util.ZPP_MixVec2List.clear","zpp_nape/util/Lists.hx",16485,0x9f4e6754)
HX_DEFINE_STACK_FRAME(_hx_pos_d5d81bc05534bfcd_16283_get,"zpp_nape.util.ZPP_MixVec2List","get",0x43076b90,"zpp_nape.util.ZPP_MixVec2List.get","zpp_nape/util/Lists.hx",16283,0x9f4e6754)
namespace zpp_nape{
namespace util{

void ZPP_MixVec2List_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16277_new)
            	HX_STACK_THIS(this)
HXLINE(16282)		this->at_index = (int)0;
HXLINE(16281)		this->at_ite = null();
HXLINE(16280)		this->zip_length = false;
HXLINE(16279)		this->_length = (int)0;
HXLINE(16278)		this->inner = null();
HXLINE(16290)		super::__construct();
HXLINE(16291)		this->at_ite = null();
HXLINE(16292)		this->at_index = (int)0;
HXLINE(16293)		this->zip_length = true;
HXLINE(16294)		this->_length = (int)0;
            	}

Dynamic ZPP_MixVec2List_obj::__CreateEmpty() { return new ZPP_MixVec2List_obj; }

void *ZPP_MixVec2List_obj::_hx_vtable = 0;

Dynamic ZPP_MixVec2List_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_MixVec2List_obj > _hx_result = new ZPP_MixVec2List_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_MixVec2List_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x46d0af20) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x46d0af20;
	} else {
		return inClassId==(int)0x52f5f6a4;
	}
}

int ZPP_MixVec2List_obj::zpp_gl(){
            	HX_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16296_zpp_gl)
            	HX_STACK_THIS(this)
HXLINE(16297)		this->zpp_vm();
HXLINE(16298)		if (this->zip_length) {
HXLINE(16299)			this->_length = (int)0;
HXLINE(16300)			{
HXLINE(16301)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = this->inner->next;
HXLINE(16302)				while(hx::IsNotNull( cx_ite )){
HXLINE(16304)					this->_length++;
HXLINE(16305)					cx_ite = cx_ite->next;
            				}
            			}
HXLINE(16308)			this->zip_length = false;
            		}
HXLINE(16310)		return this->_length;
            	}


void ZPP_MixVec2List_obj::zpp_vm(){
            	HX_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16312_zpp_vm)
            	HX_STACK_THIS(this)
HXLINE(16313)		this->zpp_inner->validate();
HXLINE(16314)		if (this->inner->modified) {
HXLINE(16315)			this->zip_length = true;
HXLINE(16316)			this->_length = (int)0;
HXLINE(16317)			this->at_ite = null();
            		}
            	}


 ::nape::geom::Vec2 ZPP_MixVec2List_obj::at(int index){
            	HX_GC_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16321_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(16322)		this->zpp_vm();
HXLINE(16326)		if (this->zpp_inner->reverse_flag) {
HXLINE(16326)			index = ((this->zpp_gl() - (int)1) - index);
            		}
HXLINE(16327)		bool _hx_tmp;
HXDLIN(16327)		if ((index >= this->at_index)) {
HXLINE(16327)			_hx_tmp = hx::IsNull( this->at_ite );
            		}
            		else {
HXLINE(16327)			_hx_tmp = true;
            		}
HXDLIN(16327)		if (_hx_tmp) {
HXLINE(16328)			this->at_index = (int)0;
HXLINE(16329)			this->at_ite = this->inner->next;
HXLINE(16330)			while(true){
HXLINE(16332)				goto _hx_goto_4;
            			}
            			_hx_goto_4:;
            		}
HXLINE(16336)		while((this->at_index != index)){
HXLINE(16337)			this->at_index++;
HXLINE(16338)			this->at_ite = this->at_ite->next;
HXLINE(16339)			while(true){
HXLINE(16341)				goto _hx_goto_6;
            			}
            			_hx_goto_6:;
            		}
HXLINE(16345)		 ::zpp_nape::geom::ZPP_Vec2 _this = this->at_ite;
HXDLIN(16345)		if (hx::IsNull( _this->outer )) {
HXLINE(16345)			_this->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(16345)			{
HXLINE(16345)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,o) = _this->outer->zpp_inner;
HXDLIN(16345)				{
HXLINE(16345)					if (hx::IsNotNull( o->outer )) {
HXLINE(16345)						o->outer->zpp_inner = null();
HXDLIN(16345)						o->outer = null();
            					}
HXDLIN(16345)					o->_isimmutable = null();
HXDLIN(16345)					o->_validate = null();
HXDLIN(16345)					o->_invalidate = null();
            				}
HXDLIN(16345)				o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(16345)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            			}
HXDLIN(16345)			_this->outer->zpp_inner = _this;
            		}
HXDLIN(16345)		return _this->outer;
            	}


bool ZPP_MixVec2List_obj::push( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16348_push)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(16353)		this->zpp_vm();
HXLINE(16357)		HX_VAR( bool,cont);
HXDLIN(16357)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE(16357)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE(16357)			cont = true;
            		}
HXLINE(16358)		if (cont) {
HXLINE(16359)			if (this->zpp_inner->reverse_flag) {
HXLINE(16359)				this->inner->add(obj->zpp_inner);
            			}
            			else {
HXLINE(16361)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ite) = this->inner;
HXDLIN(16361)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,ite1,"ite") = ite->iterator_at((this->zpp_gl() - (int)1));
HXLINE(16362)				this->inner->insert(ite1,obj->zpp_inner);
            			}
HXLINE(16364)			this->zpp_inner->invalidate();
HXLINE(16365)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE(16365)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE(16367)		return cont;
            	}


bool ZPP_MixVec2List_obj::unshift( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16370_unshift)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(16375)		this->zpp_vm();
HXLINE(16379)		HX_VAR( bool,cont);
HXDLIN(16379)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE(16379)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE(16379)			cont = true;
            		}
HXLINE(16380)		if (cont) {
HXLINE(16381)			if (this->zpp_inner->reverse_flag) {
HXLINE(16382)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ite) = this->inner;
HXDLIN(16382)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,ite1,"ite") = ite->iterator_at((this->zpp_gl() - (int)1));
HXLINE(16383)				this->inner->insert(ite1,obj->zpp_inner);
            			}
            			else {
HXLINE(16385)				this->inner->add(obj->zpp_inner);
            			}
HXLINE(16386)			this->zpp_inner->invalidate();
HXLINE(16387)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE(16387)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE(16389)		return cont;
            	}


 ::nape::geom::Vec2 ZPP_MixVec2List_obj::pop(){
            	HX_GC_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16392_pop)
            	HX_STACK_THIS(this)
HXLINE(16400)		this->zpp_vm();
HXLINE(16401)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ret) = null();
HXLINE(16402)		if (this->zpp_inner->reverse_flag) {
HXLINE(16403)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->inner->next;
HXDLIN(16403)			ret = _this;
HXLINE(16404)			if (hx::IsNull( _this->outer )) {
HXLINE(16404)				_this->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(16404)				{
HXLINE(16404)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,o) = _this->outer->zpp_inner;
HXDLIN(16404)					{
HXLINE(16404)						if (hx::IsNotNull( o->outer )) {
HXLINE(16404)							o->outer->zpp_inner = null();
HXDLIN(16404)							o->outer = null();
            						}
HXDLIN(16404)						o->_isimmutable = null();
HXDLIN(16404)						o->_validate = null();
HXDLIN(16404)						o->_invalidate = null();
            					}
HXDLIN(16404)					o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(16404)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            				}
HXDLIN(16404)				_this->outer->zpp_inner = _this;
            			}
HXLINE(16405)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE(16405)				this->zpp_inner->subber(_this->outer);
            			}
HXLINE(16406)			if (!(this->zpp_inner->dontremove)) {
HXLINE(16406)				this->inner->pop();
            			}
            		}
            		else {
HXLINE(16409)			bool _hx_tmp;
HXDLIN(16409)			if (hx::IsNotNull( this->at_ite )) {
HXLINE(16409)				_hx_tmp = hx::IsNull( this->at_ite->next );
            			}
            			else {
HXLINE(16409)				_hx_tmp = false;
            			}
HXDLIN(16409)			if (_hx_tmp) {
HXLINE(16409)				this->at_ite = null();
            			}
HXLINE(16410)			HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,ite);
HXDLIN(16410)			if ((this->zpp_gl() == (int)1)) {
HXLINE(16410)				ite = null();
            			}
            			else {
HXLINE(16410)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,ite1,"ite") = this->inner;
HXDLIN(16410)				ite = ite1->iterator_at((this->zpp_gl() - (int)2));
            			}
HXLINE(16411)			if (hx::IsNull( ite )) {
HXLINE(16411)				ret = this->inner->next;
            			}
            			else {
HXLINE(16411)				ret = ite->next;
            			}
HXLINE(16412)			if (hx::IsNull( ret->outer )) {
HXLINE(16412)				ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(16412)				{
HXLINE(16412)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,o1,"o") = ret->outer->zpp_inner;
HXDLIN(16412)					{
HXLINE(16412)						if (hx::IsNotNull( o1->outer )) {
HXLINE(16412)							o1->outer->zpp_inner = null();
HXDLIN(16412)							o1->outer = null();
            						}
HXDLIN(16412)						o1->_isimmutable = null();
HXDLIN(16412)						o1->_validate = null();
HXDLIN(16412)						o1->_invalidate = null();
            					}
HXDLIN(16412)					o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(16412)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            				}
HXDLIN(16412)				ret->outer->zpp_inner = ret;
            			}
HXLINE(16413)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE(16413)				this->zpp_inner->subber(ret->outer);
            			}
HXLINE(16414)			if (!(this->zpp_inner->dontremove)) {
HXLINE(16414)				this->inner->erase(ite);
            			}
            		}
HXLINE(16416)		this->zpp_inner->invalidate();
HXLINE(16417)		if (hx::IsNull( ret->outer )) {
HXLINE(16417)			ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(16417)			{
HXLINE(16417)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,o2,"o") = ret->outer->zpp_inner;
HXDLIN(16417)				{
HXLINE(16417)					if (hx::IsNotNull( o2->outer )) {
HXLINE(16417)						o2->outer->zpp_inner = null();
HXDLIN(16417)						o2->outer = null();
            					}
HXDLIN(16417)					o2->_isimmutable = null();
HXDLIN(16417)					o2->_validate = null();
HXDLIN(16417)					o2->_invalidate = null();
            				}
HXDLIN(16417)				o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(16417)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            			}
HXDLIN(16417)			ret->outer->zpp_inner = ret;
            		}
HXLINE(16418)		return ret->outer;
            	}


 ::nape::geom::Vec2 ZPP_MixVec2List_obj::shift(){
            	HX_GC_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16421_shift)
            	HX_STACK_THIS(this)
HXLINE(16429)		this->zpp_vm();
HXLINE(16430)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ret) = null();
HXLINE(16431)		if (this->zpp_inner->reverse_flag) {
HXLINE(16432)			bool _hx_tmp;
HXDLIN(16432)			if (hx::IsNotNull( this->at_ite )) {
HXLINE(16432)				_hx_tmp = hx::IsNull( this->at_ite->next );
            			}
            			else {
HXLINE(16432)				_hx_tmp = false;
            			}
HXDLIN(16432)			if (_hx_tmp) {
HXLINE(16432)				this->at_ite = null();
            			}
HXLINE(16433)			HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,ite);
HXDLIN(16433)			if ((this->zpp_gl() == (int)1)) {
HXLINE(16433)				ite = null();
            			}
            			else {
HXLINE(16433)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,ite1,"ite") = this->inner;
HXDLIN(16433)				ite = ite1->iterator_at((this->zpp_gl() - (int)2));
            			}
HXLINE(16434)			if (hx::IsNull( ite )) {
HXLINE(16434)				ret = this->inner->next;
            			}
            			else {
HXLINE(16434)				ret = ite->next;
            			}
HXLINE(16435)			if (hx::IsNull( ret->outer )) {
HXLINE(16435)				ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(16435)				{
HXLINE(16435)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,o) = ret->outer->zpp_inner;
HXDLIN(16435)					{
HXLINE(16435)						if (hx::IsNotNull( o->outer )) {
HXLINE(16435)							o->outer->zpp_inner = null();
HXDLIN(16435)							o->outer = null();
            						}
HXDLIN(16435)						o->_isimmutable = null();
HXDLIN(16435)						o->_validate = null();
HXDLIN(16435)						o->_invalidate = null();
            					}
HXDLIN(16435)					o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(16435)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            				}
HXDLIN(16435)				ret->outer->zpp_inner = ret;
            			}
HXLINE(16436)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE(16436)				this->zpp_inner->subber(ret->outer);
            			}
HXLINE(16437)			if (!(this->zpp_inner->dontremove)) {
HXLINE(16437)				this->inner->erase(ite);
            			}
            		}
            		else {
HXLINE(16440)			 ::zpp_nape::geom::ZPP_Vec2 _this = this->inner->next;
HXDLIN(16440)			ret = _this;
HXLINE(16441)			if (hx::IsNull( _this->outer )) {
HXLINE(16441)				_this->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(16441)				{
HXLINE(16441)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,o1,"o") = _this->outer->zpp_inner;
HXDLIN(16441)					{
HXLINE(16441)						if (hx::IsNotNull( o1->outer )) {
HXLINE(16441)							o1->outer->zpp_inner = null();
HXDLIN(16441)							o1->outer = null();
            						}
HXDLIN(16441)						o1->_isimmutable = null();
HXDLIN(16441)						o1->_validate = null();
HXDLIN(16441)						o1->_invalidate = null();
            					}
HXDLIN(16441)					o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(16441)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            				}
HXDLIN(16441)				_this->outer->zpp_inner = _this;
            			}
HXLINE(16442)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE(16442)				this->zpp_inner->subber(_this->outer);
            			}
HXLINE(16443)			if (!(this->zpp_inner->dontremove)) {
HXLINE(16443)				this->inner->pop();
            			}
            		}
HXLINE(16445)		this->zpp_inner->invalidate();
HXLINE(16446)		if (hx::IsNull( ret->outer )) {
HXLINE(16446)			ret->outer =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(16446)			{
HXLINE(16446)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,o2,"o") = ret->outer->zpp_inner;
HXDLIN(16446)				{
HXLINE(16446)					if (hx::IsNotNull( o2->outer )) {
HXLINE(16446)						o2->outer->zpp_inner = null();
HXDLIN(16446)						o2->outer = null();
            					}
HXDLIN(16446)					o2->_isimmutable = null();
HXDLIN(16446)					o2->_validate = null();
HXDLIN(16446)					o2->_invalidate = null();
            				}
HXDLIN(16446)				o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(16446)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            			}
HXDLIN(16446)			ret->outer->zpp_inner = ret;
            		}
HXLINE(16447)		return ret->outer;
            	}


bool ZPP_MixVec2List_obj::remove( ::nape::geom::Vec2 obj){
            	HX_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16450_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(16455)		this->zpp_vm();
HXLINE(16456)		HX_VAR( bool,ret);
HXLINE(16457)		{
HXLINE(16458)			ret = false;
HXLINE(16459)			{
HXLINE(16460)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = this->inner->next;
HXLINE(16461)				while(hx::IsNotNull( cx_ite )){
HXLINE(16464)					if (hx::IsEq( obj->zpp_inner,cx_ite )) {
HXLINE(16465)						ret = true;
HXLINE(16466)						goto _hx_goto_12;
            					}
HXLINE(16469)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_12:;
            			}
            		}
HXLINE(16473)		if (ret) {
HXLINE(16474)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE(16474)				this->zpp_inner->subber(obj);
            			}
HXLINE(16475)			if (!(this->zpp_inner->dontremove)) {
HXLINE(16475)				this->inner->remove(obj->zpp_inner);
            			}
HXLINE(16476)			this->zpp_inner->invalidate();
            		}
HXLINE(16478)		return ret;
            	}


void ZPP_MixVec2List_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16485_clear)
            	HX_STACK_THIS(this)
HXLINE(16485)		if (this->zpp_inner->reverse_flag) {
HXLINE(16486)			while(!(this->empty())){
HXLINE(16486)				this->pop();
            			}
            		}
            		else {
HXLINE(16489)			while(!(this->empty())){
HXLINE(16489)				this->shift();
            			}
            		}
            	}


 ::zpp_nape::util::ZPP_MixVec2List ZPP_MixVec2List_obj::get( ::zpp_nape::geom::ZPP_Vec2 list,hx::Null< bool >  __o_immutable){
bool immutable = __o_immutable.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d5d81bc05534bfcd_16283_get)
            	HX_STACK_ARG(list,"list")
            	HX_STACK_ARG(immutable,"immutable")
HXLINE(16284)		HX_VARI(  ::zpp_nape::util::ZPP_MixVec2List,ret) =  ::zpp_nape::util::ZPP_MixVec2List_obj::__alloc( HX_CTX );
HXLINE(16285)		ret->inner = list;
HXLINE(16286)		ret->zpp_inner->immutable = immutable;
HXLINE(16287)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_MixVec2List_obj,get,return )


hx::ObjectPtr< ZPP_MixVec2List_obj > ZPP_MixVec2List_obj::__new() {
	hx::ObjectPtr< ZPP_MixVec2List_obj > __this = new ZPP_MixVec2List_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_MixVec2List_obj > ZPP_MixVec2List_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_MixVec2List_obj *__this = (ZPP_MixVec2List_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_MixVec2List_obj), true, "zpp_nape.util.ZPP_MixVec2List"));
	*(void **)__this = ZPP_MixVec2List_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_MixVec2List_obj::ZPP_MixVec2List_obj()
{
}

void ZPP_MixVec2List_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_MixVec2List);
	HX_MARK_MEMBER_NAME(inner,"inner");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_MEMBER_NAME(zip_length,"zip_length");
	HX_MARK_MEMBER_NAME(at_ite,"at_ite");
	HX_MARK_MEMBER_NAME(at_index,"at_index");
	 ::nape::geom::Vec2List_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_MixVec2List_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(inner,"inner");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	HX_VISIT_MEMBER_NAME(zip_length,"zip_length");
	HX_VISIT_MEMBER_NAME(at_ite,"at_ite");
	HX_VISIT_MEMBER_NAME(at_index,"at_index");
	 ::nape::geom::Vec2List_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_MixVec2List_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"inner") ) { return hx::Val( inner); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"at_ite") ) { return hx::Val( at_ite); }
		if (HX_FIELD_EQ(inName,"zpp_gl") ) { return hx::Val( zpp_gl_dyn()); }
		if (HX_FIELD_EQ(inName,"zpp_vm") ) { return hx::Val( zpp_vm_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { return hx::Val( _length); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"at_index") ) { return hx::Val( at_index); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zip_length") ) { return hx::Val( zip_length); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_MixVec2List_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
	}
	return false;
}

hx::Val ZPP_MixVec2List_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"inner") ) { inner=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"at_ite") ) { at_ite=inValue.Cast<  ::zpp_nape::geom::ZPP_Vec2 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"at_index") ) { at_index=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"zip_length") ) { zip_length=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_MixVec2List_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"));
	outFields->push(HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"));
	outFields->push(HX_HCSTRING("zip_length","\xc4","\xc5","\x11","\x3c"));
	outFields->push(HX_HCSTRING("at_ite","\x8e","\xa1","\x34","\xd2"));
	outFields->push(HX_HCSTRING("at_index","\x86","\xef","\xd2","\x3d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_MixVec2List_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_Vec2*/ ,(int)offsetof(ZPP_MixVec2List_obj,inner),HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe")},
	{hx::fsInt,(int)offsetof(ZPP_MixVec2List_obj,_length),HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d")},
	{hx::fsBool,(int)offsetof(ZPP_MixVec2List_obj,zip_length),HX_HCSTRING("zip_length","\xc4","\xc5","\x11","\x3c")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_Vec2*/ ,(int)offsetof(ZPP_MixVec2List_obj,at_ite),HX_HCSTRING("at_ite","\x8e","\xa1","\x34","\xd2")},
	{hx::fsInt,(int)offsetof(ZPP_MixVec2List_obj,at_index),HX_HCSTRING("at_index","\x86","\xef","\xd2","\x3d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_MixVec2List_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_MixVec2List_obj_sMemberFields[] = {
	HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"),
	HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"),
	HX_HCSTRING("zip_length","\xc4","\xc5","\x11","\x3c"),
	HX_HCSTRING("at_ite","\x8e","\xa1","\x34","\xd2"),
	HX_HCSTRING("at_index","\x86","\xef","\xd2","\x3d"),
	HX_HCSTRING("zpp_gl","\x8a","\x53","\xbb","\x8e"),
	HX_HCSTRING("zpp_vm","\x9c","\x60","\xbb","\x8e"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	::String(null()) };

static void ZPP_MixVec2List_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_MixVec2List_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_MixVec2List_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_MixVec2List_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_MixVec2List_obj::__mClass;

static ::String ZPP_MixVec2List_obj_sStaticFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null())
};

void ZPP_MixVec2List_obj::__register()
{
	hx::Object *dummy = new ZPP_MixVec2List_obj;
	ZPP_MixVec2List_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_MixVec2List","\x68","\xc6","\x49","\x13");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_MixVec2List_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_MixVec2List_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_MixVec2List_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_MixVec2List_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_MixVec2List_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_MixVec2List_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_MixVec2List_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_MixVec2List_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
