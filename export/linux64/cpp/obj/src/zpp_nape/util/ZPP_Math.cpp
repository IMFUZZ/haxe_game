// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Math
#include <zpp_nape/util/ZPP_Math.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c26300f3685d233f_189_sqrt,"zpp_nape.util.ZPP_Math","sqrt",0x21f81616,"zpp_nape.util.ZPP_Math.sqrt","zpp_nape/util/Math.hx",189,0x3133988b)
HX_DEFINE_STACK_FRAME(_hx_pos_c26300f3685d233f_206_invsqrt,"zpp_nape.util.ZPP_Math","invsqrt",0x7ca2e0db,"zpp_nape.util.ZPP_Math.invsqrt","zpp_nape/util/Math.hx",206,0x3133988b)
HX_DEFINE_STACK_FRAME(_hx_pos_c26300f3685d233f_219_sqr,"zpp_nape.util.ZPP_Math","sqr",0x943df49e,"zpp_nape.util.ZPP_Math.sqr","zpp_nape/util/Math.hx",219,0x3133988b)
HX_DEFINE_STACK_FRAME(_hx_pos_c26300f3685d233f_231_clamp2,"zpp_nape.util.ZPP_Math","clamp2",0x4ec20c8d,"zpp_nape.util.ZPP_Math.clamp2","zpp_nape/util/Math.hx",231,0x3133988b)
HX_DEFINE_STACK_FRAME(_hx_pos_c26300f3685d233f_243_clamp,"zpp_nape.util.ZPP_Math","clamp",0x5d56f805,"zpp_nape.util.ZPP_Math.clamp","zpp_nape/util/Math.hx",243,0x3133988b)
namespace zpp_nape{
namespace util{

void ZPP_Math_obj::__construct() { }

Dynamic ZPP_Math_obj::__CreateEmpty() { return new ZPP_Math_obj; }

void *ZPP_Math_obj::_hx_vtable = 0;

Dynamic ZPP_Math_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Math_obj > _hx_result = new ZPP_Math_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Math_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3fb8423c;
}

Float ZPP_Math_obj::sqrt(Float x){
            	HX_STACKFRAME(&_hx_pos_c26300f3685d233f_189_sqrt)
            	HX_STACK_ARG(x,"x")
HXLINE( 189)		return ::Math_obj::sqrt(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Math_obj,sqrt,return )

Float ZPP_Math_obj::invsqrt(Float x){
            	HX_STACKFRAME(&_hx_pos_c26300f3685d233f_206_invsqrt)
            	HX_STACK_ARG(x,"x")
HXLINE( 206)		return ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Math_obj,invsqrt,return )

Float ZPP_Math_obj::sqr(Float x){
            	HX_STACKFRAME(&_hx_pos_c26300f3685d233f_219_sqr)
            	HX_STACK_ARG(x,"x")
HXLINE( 219)		return (x * x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Math_obj,sqr,return )

Float ZPP_Math_obj::clamp2(Float x,Float a){
            	HX_STACKFRAME(&_hx_pos_c26300f3685d233f_231_clamp2)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(a,"a")
HXLINE( 231)		HX_VARI_NAME( Float,a1,"a") = -(a);
HXDLIN( 231)		if ((x < a1)) {
HXLINE( 231)			return a1;
            		}
            		else {
HXLINE( 231)			if ((x > a)) {
HXLINE( 231)				return a;
            			}
            			else {
HXLINE( 231)				return x;
            			}
            		}
HXDLIN( 231)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Math_obj,clamp2,return )

Float ZPP_Math_obj::clamp(Float x,Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_c26300f3685d233f_243_clamp)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 243)		if ((x < a)) {
HXLINE( 243)			return a;
            		}
            		else {
HXLINE( 243)			if ((x > b)) {
HXLINE( 243)				return b;
            			}
            			else {
HXLINE( 243)				return x;
            			}
            		}
HXDLIN( 243)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_Math_obj,clamp,return )


ZPP_Math_obj::ZPP_Math_obj()
{
}

bool ZPP_Math_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sqr") ) { outValue = sqr_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sqrt") ) { outValue = sqrt_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"clamp2") ) { outValue = clamp2_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"invsqrt") ) { outValue = invsqrt_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Math_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ZPP_Math_obj_sStaticStorageInfo = 0;
#endif

static void ZPP_Math_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Math_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Math_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Math_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_Math_obj::__mClass;

static ::String ZPP_Math_obj_sStaticFields[] = {
	HX_HCSTRING("sqrt","\xe0","\xab","\x59","\x4c"),
	HX_HCSTRING("invsqrt","\x51","\x85","\x31","\x47"),
	HX_HCSTRING("sqr","\x14","\xa6","\x57","\x00"),
	HX_HCSTRING("clamp2","\xd7","\x28","\x0c","\x05"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	::String(null())
};

void ZPP_Math_obj::__register()
{
	hx::Object *dummy = new ZPP_Math_obj;
	ZPP_Math_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.util.ZPP_Math","\xf8","\x21","\xfa","\xeb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Math_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_Math_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Math_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Math_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Math_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Math_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Math_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace util
