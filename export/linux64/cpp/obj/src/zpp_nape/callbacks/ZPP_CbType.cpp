// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_CbType
#include <nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_phys_InteractorList
#include <nape/phys/InteractorList.h>
#endif
#ifndef INCLUDED_zpp_nape_ZPP_ID
#include <zpp_nape/ZPP_ID.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSet
#include <zpp_nape/util/ZNPNode_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_174_new,"zpp_nape.callbacks.ZPP_CbType","new",0x45010371,"zpp_nape.callbacks.ZPP_CbType.new","zpp_nape/callbacks/CbType.hx",174,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_190_addConstraint,"zpp_nape.callbacks.ZPP_CbType","addConstraint",0x62255c2f,"zpp_nape.callbacks.ZPP_CbType.addConstraint","zpp_nape/callbacks/CbType.hx",190,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_195_addInteractor,"zpp_nape.callbacks.ZPP_CbType","addInteractor",0x8cc9222b,"zpp_nape.callbacks.ZPP_CbType.addInteractor","zpp_nape/callbacks/CbType.hx",195,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_200_remConstraint,"zpp_nape.callbacks.ZPP_CbType","remConstraint",0xcd7ee4a8,"zpp_nape.callbacks.ZPP_CbType.remConstraint","zpp_nape/callbacks/CbType.hx",200,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_205_remInteractor,"zpp_nape.callbacks.ZPP_CbType","remInteractor",0xf822aaa4,"zpp_nape.callbacks.ZPP_CbType.remInteractor","zpp_nape/callbacks/CbType.hx",205,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_210_addint,"zpp_nape.callbacks.ZPP_CbType","addint",0x85aab2fd,"zpp_nape.callbacks.ZPP_CbType.addint","zpp_nape/callbacks/CbType.hx",210,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_238_removeint,"zpp_nape.callbacks.ZPP_CbType","removeint",0xd905c8fc,"zpp_nape.callbacks.ZPP_CbType.removeint","zpp_nape/callbacks/CbType.hx",238,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_245_invalidateint,"zpp_nape.callbacks.ZPP_CbType","invalidateint",0x4418e4a5,"zpp_nape.callbacks.ZPP_CbType.invalidateint","zpp_nape/callbacks/CbType.hx",245,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_257_addbody,"zpp_nape.callbacks.ZPP_CbType","addbody",0x6b1220d4,"zpp_nape.callbacks.ZPP_CbType.addbody","zpp_nape/callbacks/CbType.hx",257,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_285_removebody,"zpp_nape.callbacks.ZPP_CbType","removebody",0x076a49f5,"zpp_nape.callbacks.ZPP_CbType.removebody","zpp_nape/callbacks/CbType.hx",285,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_292_invalidatebody,"zpp_nape.callbacks.ZPP_CbType","invalidatebody",0x4d0f622c,"zpp_nape.callbacks.ZPP_CbType.invalidatebody","zpp_nape/callbacks/CbType.hx",292,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_304_addconstraint,"zpp_nape.callbacks.ZPP_CbType","addconstraint",0x6b74580f,"zpp_nape.callbacks.ZPP_CbType.addconstraint","zpp_nape/callbacks/CbType.hx",304,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_332_removeconstraint,"zpp_nape.callbacks.ZPP_CbType","removeconstraint",0x26158ff0,"zpp_nape.callbacks.ZPP_CbType.removeconstraint","zpp_nape/callbacks/CbType.hx",332,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_339_invalidateconstraint,"zpp_nape.callbacks.ZPP_CbType","invalidateconstraint",0xa7b92b67,"zpp_nape.callbacks.ZPP_CbType.invalidateconstraint","zpp_nape/callbacks/CbType.hx",339,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_181_setlt,"zpp_nape.callbacks.ZPP_CbType","setlt",0x2adc7ffb,"zpp_nape.callbacks.ZPP_CbType.setlt","zpp_nape/callbacks/CbType.hx",181,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_348_boot,"zpp_nape.callbacks.ZPP_CbType","boot",0x13fb0001,"zpp_nape.callbacks.ZPP_CbType.boot","zpp_nape/callbacks/CbType.hx",348,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_349_boot,"zpp_nape.callbacks.ZPP_CbType","boot",0x13fb0001,"zpp_nape.callbacks.ZPP_CbType.boot","zpp_nape/callbacks/CbType.hx",349,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_350_boot,"zpp_nape.callbacks.ZPP_CbType","boot",0x13fb0001,"zpp_nape.callbacks.ZPP_CbType.boot","zpp_nape/callbacks/CbType.hx",350,0x45e9a502)
HX_DEFINE_STACK_FRAME(_hx_pos_12c7c42920c230d1_351_boot,"zpp_nape.callbacks.ZPP_CbType","boot",0x13fb0001,"zpp_nape.callbacks.ZPP_CbType.boot","zpp_nape/callbacks/CbType.hx",351,0x45e9a502)
namespace zpp_nape{
namespace callbacks{

void ZPP_CbType_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_174_new)
            	HX_STACK_THIS(this)
HXLINE( 301)		this->conlisteners = null();
HXLINE( 254)		this->bodylisteners = null();
HXLINE( 207)		this->listeners = null();
HXLINE( 178)		this->cbsets = null();
HXLINE( 177)		this->id = (int)0;
HXLINE( 176)		this->userData = null();
HXLINE( 175)		this->outer = null();
HXLINE( 353)		this->id = ::zpp_nape::ZPP_ID_obj::CbType();
HXLINE( 355)		this->listeners =  ::zpp_nape::util::ZNPList_ZPP_InteractionListener_obj::__alloc( HX_CTX );
HXLINE( 356)		this->bodylisteners =  ::zpp_nape::util::ZNPList_ZPP_BodyListener_obj::__alloc( HX_CTX );
HXLINE( 357)		this->conlisteners =  ::zpp_nape::util::ZNPList_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
HXLINE( 358)		this->constraints =  ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__alloc( HX_CTX );
HXLINE( 359)		this->interactors =  ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__alloc( HX_CTX );
HXLINE( 360)		this->cbsets =  ::zpp_nape::util::ZNPList_ZPP_CbSet_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_CbType_obj::__CreateEmpty() { return new ZPP_CbType_obj; }

void *ZPP_CbType_obj::_hx_vtable = 0;

Dynamic ZPP_CbType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_CbType_obj > _hx_result = new ZPP_CbType_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_CbType_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ed7d087;
}

void ZPP_CbType_obj::addConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_190_addConstraint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(con,"con")
HXLINE( 190)		this->constraints->add(con);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,addConstraint,(void))

void ZPP_CbType_obj::addInteractor( ::zpp_nape::phys::ZPP_Interactor intx){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_195_addInteractor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(intx,"intx")
HXLINE( 195)		this->interactors->add(intx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,addInteractor,(void))

void ZPP_CbType_obj::remConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_200_remConstraint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(con,"con")
HXLINE( 200)		this->constraints->remove(con);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,remConstraint,(void))

void ZPP_CbType_obj::remInteractor( ::zpp_nape::phys::ZPP_Interactor intx){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_205_remInteractor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(intx,"intx")
HXLINE( 205)		this->interactors->remove(intx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,remInteractor,(void))

void ZPP_CbType_obj::addint( ::zpp_nape::callbacks::ZPP_InteractionListener x){
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_210_addint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 219)		{
HXLINE( 220)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre) = null();
HXLINE( 221)			{
HXLINE( 222)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite) = this->listeners->head;
HXLINE( 223)				while(hx::IsNotNull( cx_ite )){
HXLINE( 224)					HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,j) = cx_ite->elt;
HXLINE( 225)					{
HXLINE( 226)						bool _hx_tmp;
HXDLIN( 226)						if ((x->precedence <= j->precedence)) {
HXLINE( 226)							if ((x->precedence == j->precedence)) {
HXLINE( 226)								_hx_tmp = (x->id > j->id);
            							}
            							else {
HXLINE( 226)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 226)							_hx_tmp = true;
            						}
HXDLIN( 226)						if (_hx_tmp) {
HXLINE( 226)							goto _hx_goto_5;
            						}
HXLINE( 227)						pre = cx_ite;
            					}
HXLINE( 229)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_5:;
            			}
HXLINE( 232)			{
HXLINE( 232)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this) = this->listeners;
HXDLIN( 232)				HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret);
HXDLIN( 232)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 232)					ret =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 232)					ret = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 232)					::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret->next;
HXDLIN( 232)					ret->next = null();
            				}
HXDLIN( 232)				ret->elt = x;
HXDLIN( 232)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp) = ret;
HXDLIN( 232)				if (hx::IsNull( pre )) {
HXLINE( 232)					temp->next = _this->head;
HXDLIN( 232)					_this->head = temp;
            				}
            				else {
HXLINE( 232)					temp->next = pre->next;
HXDLIN( 232)					pre->next = temp;
            				}
HXDLIN( 232)				_this->pushmod = (_this->modified = true);
HXDLIN( 232)				_this->length++;
            			}
            		}
HXLINE( 234)		{
HXLINE( 234)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite1,"cx_ite") = this->cbsets->head;
HXDLIN( 234)			while(hx::IsNotNull( cx_ite1 )){
HXLINE( 234)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,cb) = cx_ite1->elt;
HXDLIN( 234)				{
HXLINE( 234)					cb->zip_listeners = true;
HXDLIN( 234)					cb->invalidate_pairs();
            				}
HXDLIN( 234)				cx_ite1 = cx_ite1->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,addint,(void))

void ZPP_CbType_obj::removeint( ::zpp_nape::callbacks::ZPP_InteractionListener x){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_238_removeint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 239)		this->listeners->remove(x);
HXLINE( 240)		{
HXLINE( 240)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->cbsets->head;
HXDLIN( 240)			while(hx::IsNotNull( cx_ite )){
HXLINE( 240)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,cb) = cx_ite->elt;
HXDLIN( 240)				{
HXLINE( 240)					cb->zip_listeners = true;
HXDLIN( 240)					cb->invalidate_pairs();
            				}
HXDLIN( 240)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,removeint,(void))

void ZPP_CbType_obj::invalidateint(){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_245_invalidateint)
            	HX_STACK_THIS(this)
HXLINE( 246)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->cbsets->head;
HXLINE( 247)		while(hx::IsNotNull( cx_ite )){
HXLINE( 248)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,cb) = cx_ite->elt;
HXLINE( 249)			{
HXLINE( 249)				cb->zip_listeners = true;
HXDLIN( 249)				cb->invalidate_pairs();
            			}
HXLINE( 250)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbType_obj,invalidateint,(void))

void ZPP_CbType_obj::addbody( ::zpp_nape::callbacks::ZPP_BodyListener x){
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_257_addbody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 266)		{
HXLINE( 267)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_BodyListener,pre) = null();
HXLINE( 268)			{
HXLINE( 269)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_BodyListener,cx_ite) = this->bodylisteners->head;
HXLINE( 270)				while(hx::IsNotNull( cx_ite )){
HXLINE( 271)					HX_VARI(  ::zpp_nape::callbacks::ZPP_BodyListener,j) = cx_ite->elt;
HXLINE( 272)					{
HXLINE( 273)						bool _hx_tmp;
HXDLIN( 273)						if ((x->precedence <= j->precedence)) {
HXLINE( 273)							if ((x->precedence == j->precedence)) {
HXLINE( 273)								_hx_tmp = (x->id > j->id);
            							}
            							else {
HXLINE( 273)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 273)							_hx_tmp = true;
            						}
HXDLIN( 273)						if (_hx_tmp) {
HXLINE( 273)							goto _hx_goto_12;
            						}
HXLINE( 274)						pre = cx_ite;
            					}
HXLINE( 276)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_12:;
            			}
HXLINE( 279)			{
HXLINE( 279)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_BodyListener,_this) = this->bodylisteners;
HXDLIN( 279)				HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_BodyListener,ret);
HXDLIN( 279)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool )) {
HXLINE( 279)					ret =  ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 279)					ret = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool;
HXDLIN( 279)					::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = ret->next;
HXDLIN( 279)					ret->next = null();
            				}
HXDLIN( 279)				ret->elt = x;
HXDLIN( 279)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_BodyListener,temp) = ret;
HXDLIN( 279)				if (hx::IsNull( pre )) {
HXLINE( 279)					temp->next = _this->head;
HXDLIN( 279)					_this->head = temp;
            				}
            				else {
HXLINE( 279)					temp->next = pre->next;
HXDLIN( 279)					pre->next = temp;
            				}
HXDLIN( 279)				_this->pushmod = (_this->modified = true);
HXDLIN( 279)				_this->length++;
            			}
            		}
HXLINE( 281)		{
HXLINE( 281)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite1,"cx_ite") = this->cbsets->head;
HXDLIN( 281)			while(hx::IsNotNull( cx_ite1 )){
HXLINE( 281)				cx_ite1->elt->zip_bodylisteners = true;
HXDLIN( 281)				cx_ite1 = cx_ite1->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,addbody,(void))

void ZPP_CbType_obj::removebody( ::zpp_nape::callbacks::ZPP_BodyListener x){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_285_removebody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 286)		this->bodylisteners->remove(x);
HXLINE( 287)		{
HXLINE( 287)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->cbsets->head;
HXDLIN( 287)			while(hx::IsNotNull( cx_ite )){
HXLINE( 287)				cx_ite->elt->zip_bodylisteners = true;
HXDLIN( 287)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,removebody,(void))

void ZPP_CbType_obj::invalidatebody(){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_292_invalidatebody)
            	HX_STACK_THIS(this)
HXLINE( 293)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->cbsets->head;
HXLINE( 294)		while(hx::IsNotNull( cx_ite )){
HXLINE( 296)			cx_ite->elt->zip_bodylisteners = true;
HXLINE( 297)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbType_obj,invalidatebody,(void))

void ZPP_CbType_obj::addconstraint( ::zpp_nape::callbacks::ZPP_ConstraintListener x){
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_304_addconstraint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 313)		{
HXLINE( 314)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener,pre) = null();
HXLINE( 315)			{
HXLINE( 316)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener,cx_ite) = this->conlisteners->head;
HXLINE( 317)				while(hx::IsNotNull( cx_ite )){
HXLINE( 318)					HX_VARI(  ::zpp_nape::callbacks::ZPP_ConstraintListener,j) = cx_ite->elt;
HXLINE( 319)					{
HXLINE( 320)						bool _hx_tmp;
HXDLIN( 320)						if ((x->precedence <= j->precedence)) {
HXLINE( 320)							if ((x->precedence == j->precedence)) {
HXLINE( 320)								_hx_tmp = (x->id > j->id);
            							}
            							else {
HXLINE( 320)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 320)							_hx_tmp = true;
            						}
HXDLIN( 320)						if (_hx_tmp) {
HXLINE( 320)							goto _hx_goto_19;
            						}
HXLINE( 321)						pre = cx_ite;
            					}
HXLINE( 323)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_19:;
            			}
HXLINE( 326)			{
HXLINE( 326)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_ConstraintListener,_this) = this->conlisteners;
HXDLIN( 326)				HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener,ret);
HXDLIN( 326)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )) {
HXLINE( 326)					ret =  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 326)					ret = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool;
HXDLIN( 326)					::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = ret->next;
HXDLIN( 326)					ret->next = null();
            				}
HXDLIN( 326)				ret->elt = x;
HXDLIN( 326)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener,temp) = ret;
HXDLIN( 326)				if (hx::IsNull( pre )) {
HXLINE( 326)					temp->next = _this->head;
HXDLIN( 326)					_this->head = temp;
            				}
            				else {
HXLINE( 326)					temp->next = pre->next;
HXDLIN( 326)					pre->next = temp;
            				}
HXDLIN( 326)				_this->pushmod = (_this->modified = true);
HXDLIN( 326)				_this->length++;
            			}
            		}
HXLINE( 328)		{
HXLINE( 328)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite1,"cx_ite") = this->cbsets->head;
HXDLIN( 328)			while(hx::IsNotNull( cx_ite1 )){
HXLINE( 328)				cx_ite1->elt->zip_conlisteners = true;
HXDLIN( 328)				cx_ite1 = cx_ite1->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,addconstraint,(void))

void ZPP_CbType_obj::removeconstraint( ::zpp_nape::callbacks::ZPP_ConstraintListener x){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_332_removeconstraint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 333)		this->conlisteners->remove(x);
HXLINE( 334)		{
HXLINE( 334)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->cbsets->head;
HXDLIN( 334)			while(hx::IsNotNull( cx_ite )){
HXLINE( 334)				cx_ite->elt->zip_conlisteners = true;
HXDLIN( 334)				cx_ite = cx_ite->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbType_obj,removeconstraint,(void))

void ZPP_CbType_obj::invalidateconstraint(){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_339_invalidateconstraint)
            	HX_STACK_THIS(this)
HXLINE( 340)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = this->cbsets->head;
HXLINE( 341)		while(hx::IsNotNull( cx_ite )){
HXLINE( 343)			cx_ite->elt->zip_conlisteners = true;
HXLINE( 344)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbType_obj,invalidateconstraint,(void))

bool ZPP_CbType_obj::setlt( ::zpp_nape::callbacks::ZPP_CbType a, ::zpp_nape::callbacks::ZPP_CbType b){
            	HX_STACKFRAME(&_hx_pos_12c7c42920c230d1_181_setlt)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 181)		return (a->id < b->id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_CbType_obj,setlt,return )

 ::nape::callbacks::CbType ZPP_CbType_obj::ANY_SHAPE;

 ::nape::callbacks::CbType ZPP_CbType_obj::ANY_BODY;

 ::nape::callbacks::CbType ZPP_CbType_obj::ANY_COMPOUND;

 ::nape::callbacks::CbType ZPP_CbType_obj::ANY_CONSTRAINT;


hx::ObjectPtr< ZPP_CbType_obj > ZPP_CbType_obj::__new() {
	hx::ObjectPtr< ZPP_CbType_obj > __this = new ZPP_CbType_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_CbType_obj > ZPP_CbType_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_CbType_obj *__this = (ZPP_CbType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_CbType_obj), true, "zpp_nape.callbacks.ZPP_CbType"));
	*(void **)__this = ZPP_CbType_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_CbType_obj::ZPP_CbType_obj()
{
}

void ZPP_CbType_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_CbType);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(cbsets,"cbsets");
	HX_MARK_MEMBER_NAME(interactors,"interactors");
	HX_MARK_MEMBER_NAME(wrap_interactors,"wrap_interactors");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_MEMBER_NAME(bodylisteners,"bodylisteners");
	HX_MARK_MEMBER_NAME(conlisteners,"conlisteners");
	HX_MARK_END_CLASS();
}

void ZPP_CbType_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(cbsets,"cbsets");
	HX_VISIT_MEMBER_NAME(interactors,"interactors");
	HX_VISIT_MEMBER_NAME(wrap_interactors,"wrap_interactors");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
	HX_VISIT_MEMBER_NAME(bodylisteners,"bodylisteners");
	HX_VISIT_MEMBER_NAME(conlisteners,"conlisteners");
}

hx::Val ZPP_CbType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cbsets") ) { return hx::Val( cbsets); }
		if (HX_FIELD_EQ(inName,"addint") ) { return hx::Val( addint_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addbody") ) { return hx::Val( addbody_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { return hx::Val( listeners); }
		if (HX_FIELD_EQ(inName,"removeint") ) { return hx::Val( removeint_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removebody") ) { return hx::Val( removebody_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interactors") ) { return hx::Val( interactors); }
		if (HX_FIELD_EQ(inName,"constraints") ) { return hx::Val( constraints); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"conlisteners") ) { return hx::Val( conlisteners); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addConstraint") ) { return hx::Val( addConstraint_dyn()); }
		if (HX_FIELD_EQ(inName,"addInteractor") ) { return hx::Val( addInteractor_dyn()); }
		if (HX_FIELD_EQ(inName,"remConstraint") ) { return hx::Val( remConstraint_dyn()); }
		if (HX_FIELD_EQ(inName,"remInteractor") ) { return hx::Val( remInteractor_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidateint") ) { return hx::Val( invalidateint_dyn()); }
		if (HX_FIELD_EQ(inName,"bodylisteners") ) { return hx::Val( bodylisteners); }
		if (HX_FIELD_EQ(inName,"addconstraint") ) { return hx::Val( addconstraint_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"invalidatebody") ) { return hx::Val( invalidatebody_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_interactors") ) { return hx::Val( wrap_interactors); }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { return hx::Val( wrap_constraints); }
		if (HX_FIELD_EQ(inName,"removeconstraint") ) { return hx::Val( removeconstraint_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"invalidateconstraint") ) { return hx::Val( invalidateconstraint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_CbType_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setlt") ) { outValue = setlt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ANY_BODY") ) { outValue = ANY_BODY; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ANY_SHAPE") ) { outValue = ANY_SHAPE; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ANY_COMPOUND") ) { outValue = ANY_COMPOUND; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ANY_CONSTRAINT") ) { outValue = ANY_CONSTRAINT; return true; }
	}
	return false;
}

hx::Val ZPP_CbType_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::callbacks::CbType >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cbsets") ) { cbsets=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbSet >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_InteractionListener >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interactors") ) { interactors=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"conlisteners") ) { conlisteners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_ConstraintListener >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bodylisteners") ) { bodylisteners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_BodyListener >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_interactors") ) { wrap_interactors=inValue.Cast<  ::nape::phys::InteractorList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { wrap_constraints=inValue.Cast<  ::nape::constraint::ConstraintList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_CbType_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"ANY_BODY") ) { ANY_BODY=ioValue.Cast<  ::nape::callbacks::CbType >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ANY_SHAPE") ) { ANY_SHAPE=ioValue.Cast<  ::nape::callbacks::CbType >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ANY_COMPOUND") ) { ANY_COMPOUND=ioValue.Cast<  ::nape::callbacks::CbType >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ANY_CONSTRAINT") ) { ANY_CONSTRAINT=ioValue.Cast<  ::nape::callbacks::CbType >(); return true; }
	}
	return false;
}

void ZPP_CbType_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"));
	outFields->push(HX_HCSTRING("interactors","\xfa","\xc7","\x5d","\x3c"));
	outFields->push(HX_HCSTRING("wrap_interactors","\xc5","\x36","\xbb","\xd9"));
	outFields->push(HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"));
	outFields->push(HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5"));
	outFields->push(HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"));
	outFields->push(HX_HCSTRING("bodylisteners","\x9d","\x86","\x53","\x63"));
	outFields->push(HX_HCSTRING("conlisteners","\xfd","\xcc","\x05","\xe1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_CbType_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::callbacks::CbType*/ ,(int)offsetof(ZPP_CbType_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_CbType_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsInt,(int)offsetof(ZPP_CbType_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbSet*/ ,(int)offsetof(ZPP_CbType_obj,cbsets),HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Interactor*/ ,(int)offsetof(ZPP_CbType_obj,interactors),HX_HCSTRING("interactors","\xfa","\xc7","\x5d","\x3c")},
	{hx::fsObject /*::nape::phys::InteractorList*/ ,(int)offsetof(ZPP_CbType_obj,wrap_interactors),HX_HCSTRING("wrap_interactors","\xc5","\x36","\xbb","\xd9")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Constraint*/ ,(int)offsetof(ZPP_CbType_obj,constraints),HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17")},
	{hx::fsObject /*::nape::constraint::ConstraintList*/ ,(int)offsetof(ZPP_CbType_obj,wrap_constraints),HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_InteractionListener*/ ,(int)offsetof(ZPP_CbType_obj,listeners),HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_BodyListener*/ ,(int)offsetof(ZPP_CbType_obj,bodylisteners),HX_HCSTRING("bodylisteners","\x9d","\x86","\x53","\x63")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_ConstraintListener*/ ,(int)offsetof(ZPP_CbType_obj,conlisteners),HX_HCSTRING("conlisteners","\xfd","\xcc","\x05","\xe1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_CbType_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::nape::callbacks::CbType*/ ,(void *) &ZPP_CbType_obj::ANY_SHAPE,HX_HCSTRING("ANY_SHAPE","\x0e","\x1a","\x93","\x67")},
	{hx::fsObject /*::nape::callbacks::CbType*/ ,(void *) &ZPP_CbType_obj::ANY_BODY,HX_HCSTRING("ANY_BODY","\x35","\xa4","\x09","\xa6")},
	{hx::fsObject /*::nape::callbacks::CbType*/ ,(void *) &ZPP_CbType_obj::ANY_COMPOUND,HX_HCSTRING("ANY_COMPOUND","\x7e","\x7a","\x2e","\xf2")},
	{hx::fsObject /*::nape::callbacks::CbType*/ ,(void *) &ZPP_CbType_obj::ANY_CONSTRAINT,HX_HCSTRING("ANY_CONSTRAINT","\x30","\xc6","\x94","\xa9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_CbType_obj_sMemberFields[] = {
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"),
	HX_HCSTRING("interactors","\xfa","\xc7","\x5d","\x3c"),
	HX_HCSTRING("wrap_interactors","\xc5","\x36","\xbb","\xd9"),
	HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"),
	HX_HCSTRING("wrap_constraints","\x41","\xc0","\x11","\xb5"),
	HX_HCSTRING("addConstraint","\xde","\x49","\x15","\xc5"),
	HX_HCSTRING("addInteractor","\xda","\x0f","\xb9","\xef"),
	HX_HCSTRING("remConstraint","\x57","\xd2","\x6e","\x30"),
	HX_HCSTRING("remInteractor","\x53","\x98","\x12","\x5b"),
	HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"),
	HX_HCSTRING("addint","\x6e","\x65","\x19","\x9f"),
	HX_HCSTRING("removeint","\x2b","\x73","\x03","\xcb"),
	HX_HCSTRING("invalidateint","\x54","\xd2","\x08","\xa7"),
	HX_HCSTRING("bodylisteners","\x9d","\x86","\x53","\x63"),
	HX_HCSTRING("addbody","\x43","\x91","\x7f","\x92"),
	HX_HCSTRING("removebody","\xe6","\x88","\x61","\xd3"),
	HX_HCSTRING("invalidatebody","\x9d","\x6d","\x0f","\x7c"),
	HX_HCSTRING("conlisteners","\xfd","\xcc","\x05","\xe1"),
	HX_HCSTRING("addconstraint","\xbe","\x45","\x64","\xce"),
	HX_HCSTRING("removeconstraint","\xa1","\x19","\xc4","\x1d"),
	HX_HCSTRING("invalidateconstraint","\x98","\xe1","\xcc","\xdd"),
	::String(null()) };

static void ZPP_CbType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_CbType_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_CbType_obj::ANY_SHAPE,"ANY_SHAPE");
	HX_MARK_MEMBER_NAME(ZPP_CbType_obj::ANY_BODY,"ANY_BODY");
	HX_MARK_MEMBER_NAME(ZPP_CbType_obj::ANY_COMPOUND,"ANY_COMPOUND");
	HX_MARK_MEMBER_NAME(ZPP_CbType_obj::ANY_CONSTRAINT,"ANY_CONSTRAINT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_CbType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_CbType_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_CbType_obj::ANY_SHAPE,"ANY_SHAPE");
	HX_VISIT_MEMBER_NAME(ZPP_CbType_obj::ANY_BODY,"ANY_BODY");
	HX_VISIT_MEMBER_NAME(ZPP_CbType_obj::ANY_COMPOUND,"ANY_COMPOUND");
	HX_VISIT_MEMBER_NAME(ZPP_CbType_obj::ANY_CONSTRAINT,"ANY_CONSTRAINT");
};

#endif

hx::Class ZPP_CbType_obj::__mClass;

static ::String ZPP_CbType_obj_sStaticFields[] = {
	HX_HCSTRING("setlt","\xaa","\xa6","\x2f","\x7a"),
	HX_HCSTRING("ANY_SHAPE","\x0e","\x1a","\x93","\x67"),
	HX_HCSTRING("ANY_BODY","\x35","\xa4","\x09","\xa6"),
	HX_HCSTRING("ANY_COMPOUND","\x7e","\x7a","\x2e","\xf2"),
	HX_HCSTRING("ANY_CONSTRAINT","\x30","\xc6","\x94","\xa9"),
	::String(null())
};

void ZPP_CbType_obj::__register()
{
	hx::Object *dummy = new ZPP_CbType_obj;
	ZPP_CbType_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.callbacks.ZPP_CbType","\xff","\x76","\xa4","\xe8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_CbType_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_CbType_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_CbType_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_CbType_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_CbType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_CbType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_CbType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_CbType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_CbType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_CbType_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_348_boot)
HXLINE( 348)		ANY_SHAPE =  ::nape::callbacks::CbType_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_349_boot)
HXLINE( 349)		ANY_BODY =  ::nape::callbacks::CbType_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_350_boot)
HXLINE( 350)		ANY_COMPOUND =  ::nape::callbacks::CbType_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_12c7c42920c230d1_351_boot)
HXLINE( 351)		ANY_CONSTRAINT =  ::nape::callbacks::CbType_obj::__alloc( HX_CTX );
            	}
}

} // end namespace zpp_nape
} // end namespace callbacks
