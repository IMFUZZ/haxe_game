// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_CbEvent
#include <nape/callbacks/CbEvent.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerType
#include <nape/callbacks/ListenerType.h>
#endif
#ifndef INCLUDED_zpp_nape_ZPP_ID
#include <zpp_nape/ZPP_ID.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_174_new,"zpp_nape.callbacks.ZPP_Listener","new",0x71eaf9ec,"zpp_nape.callbacks.ZPP_Listener.new","zpp_nape/callbacks/Listener.hx",174,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_196_swapEvent,"zpp_nape.callbacks.ZPP_Listener","swapEvent",0xd60ab313,"zpp_nape.callbacks.ZPP_Listener.swapEvent","zpp_nape/callbacks/Listener.hx",196,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_197_invalidate_precedence,"zpp_nape.callbacks.ZPP_Listener","invalidate_precedence",0x5e07721a,"zpp_nape.callbacks.ZPP_Listener.invalidate_precedence","zpp_nape/callbacks/Listener.hx",197,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_198_addedToSpace,"zpp_nape.callbacks.ZPP_Listener","addedToSpace",0x4325895f,"zpp_nape.callbacks.ZPP_Listener.addedToSpace","zpp_nape/callbacks/Listener.hx",198,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_199_removedFromSpace,"zpp_nape.callbacks.ZPP_Listener","removedFromSpace",0x0cfe1230,"zpp_nape.callbacks.ZPP_Listener.removedFromSpace","zpp_nape/callbacks/Listener.hx",199,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_194_setlt,"zpp_nape.callbacks.ZPP_Listener","setlt",0xdf0d4b36,"zpp_nape.callbacks.ZPP_Listener.setlt","zpp_nape/callbacks/Listener.hx",194,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_182_boot,"zpp_nape.callbacks.ZPP_Listener","boot",0x33c8b526,"zpp_nape.callbacks.ZPP_Listener.boot","zpp_nape/callbacks/Listener.hx",182,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_faa8e46ff739c640_183_boot,"zpp_nape.callbacks.ZPP_Listener","boot",0x33c8b526,"zpp_nape.callbacks.ZPP_Listener.boot","zpp_nape/callbacks/Listener.hx",183,0x87b155a7)
namespace zpp_nape{
namespace callbacks{

void ZPP_Listener_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_174_new)
            	HX_STACK_THIS(this)
HXLINE( 188)		this->space = null();
HXLINE( 187)		this->interaction = null();
HXLINE( 186)		this->constraint = null();
HXLINE( 185)		this->body = null();
HXLINE( 184)		this->precedence = (int)0;
HXLINE( 181)		this->event = (int)0;
HXLINE( 180)		this->type = (int)0;
HXLINE( 179)		this->id = (int)0;
HXLINE( 175)		this->outer = null();
HXLINE( 190)		this->id = ::zpp_nape::ZPP_ID_obj::Listener();
            	}

Dynamic ZPP_Listener_obj::__CreateEmpty() { return new ZPP_Listener_obj; }

void *ZPP_Listener_obj::_hx_vtable = 0;

Dynamic ZPP_Listener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Listener_obj > _hx_result = new ZPP_Listener_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Listener_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x763b4a3a;
}

void ZPP_Listener_obj::swapEvent(int event){
            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_196_swapEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Listener_obj,swapEvent,(void))

void ZPP_Listener_obj::invalidate_precedence(){
            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_197_invalidate_precedence)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Listener_obj,invalidate_precedence,(void))

void ZPP_Listener_obj::addedToSpace(){
            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_198_addedToSpace)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Listener_obj,addedToSpace,(void))

void ZPP_Listener_obj::removedFromSpace(){
            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_199_removedFromSpace)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Listener_obj,removedFromSpace,(void))

::Array< ::Dynamic> ZPP_Listener_obj::types;

::Array< ::Dynamic> ZPP_Listener_obj::events;

bool ZPP_Listener_obj::setlt( ::zpp_nape::callbacks::ZPP_Listener a, ::zpp_nape::callbacks::ZPP_Listener b){
            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_194_setlt)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 194)		if ((a->precedence <= b->precedence)) {
HXLINE( 194)			if ((a->precedence == b->precedence)) {
HXLINE( 194)				return (a->id > b->id);
            			}
            			else {
HXLINE( 194)				return false;
            			}
            		}
            		else {
HXLINE( 194)			return true;
            		}
HXDLIN( 194)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Listener_obj,setlt,return )


hx::ObjectPtr< ZPP_Listener_obj > ZPP_Listener_obj::__new() {
	hx::ObjectPtr< ZPP_Listener_obj > __this = new ZPP_Listener_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Listener_obj > ZPP_Listener_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Listener_obj *__this = (ZPP_Listener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Listener_obj), true, "zpp_nape.callbacks.ZPP_Listener"));
	*(void **)__this = ZPP_Listener_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Listener_obj::ZPP_Listener_obj()
{
}

void ZPP_Listener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Listener);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(event,"event");
	HX_MARK_MEMBER_NAME(precedence,"precedence");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(constraint,"constraint");
	HX_MARK_MEMBER_NAME(interaction,"interaction");
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_END_CLASS();
}

void ZPP_Listener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(event,"event");
	HX_VISIT_MEMBER_NAME(precedence,"precedence");
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(constraint,"constraint");
	HX_VISIT_MEMBER_NAME(interaction,"interaction");
	HX_VISIT_MEMBER_NAME(space,"space");
}

hx::Val ZPP_Listener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"event") ) { return hx::Val( event); }
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swapEvent") ) { return hx::Val( swapEvent_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"precedence") ) { return hx::Val( precedence); }
		if (HX_FIELD_EQ(inName,"constraint") ) { return hx::Val( constraint); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interaction") ) { return hx::Val( interaction); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedToSpace") ) { return hx::Val( addedToSpace_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removedFromSpace") ) { return hx::Val( removedFromSpace_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"invalidate_precedence") ) { return hx::Val( invalidate_precedence_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_Listener_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { outValue = types; return true; }
		if (HX_FIELD_EQ(inName,"setlt") ) { outValue = setlt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { outValue = events; return true; }
	}
	return false;
}

hx::Val ZPP_Listener_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::zpp_nape::callbacks::ZPP_BodyListener >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::callbacks::Listener >(); return inValue; }
		if (HX_FIELD_EQ(inName,"event") ) { event=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"precedence") ) { precedence=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraint") ) { constraint=inValue.Cast<  ::zpp_nape::callbacks::ZPP_ConstraintListener >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interaction") ) { interaction=inValue.Cast<  ::zpp_nape::callbacks::ZPP_InteractionListener >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_Listener_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { events=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void ZPP_Listener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("event","\x1a","\xc8","\xc4","\x75"));
	outFields->push(HX_HCSTRING("precedence","\x0a","\xf6","\xfc","\xee"));
	outFields->push(HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"));
	outFields->push(HX_HCSTRING("constraint","\x5d","\x00","\xcc","\x5a"));
	outFields->push(HX_HCSTRING("interaction","\xd2","\x37","\x59","\x3c"));
	outFields->push(HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Listener_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::callbacks::Listener*/ ,(int)offsetof(ZPP_Listener_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsInt,(int)offsetof(ZPP_Listener_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ZPP_Listener_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(ZPP_Listener_obj,event),HX_HCSTRING("event","\x1a","\xc8","\xc4","\x75")},
	{hx::fsInt,(int)offsetof(ZPP_Listener_obj,precedence),HX_HCSTRING("precedence","\x0a","\xf6","\xfc","\xee")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_BodyListener*/ ,(int)offsetof(ZPP_Listener_obj,body),HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_ConstraintListener*/ ,(int)offsetof(ZPP_Listener_obj,constraint),HX_HCSTRING("constraint","\x5d","\x00","\xcc","\x5a")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_InteractionListener*/ ,(int)offsetof(ZPP_Listener_obj,interaction),HX_HCSTRING("interaction","\xd2","\x37","\x59","\x3c")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Space*/ ,(int)offsetof(ZPP_Listener_obj,space),HX_HCSTRING("space","\xc6","\x8c","\x66","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_Listener_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &ZPP_Listener_obj::types,HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &ZPP_Listener_obj::events,HX_HCSTRING("events","\x19","\x4f","\x6a","\x96")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_Listener_obj_sMemberFields[] = {
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("event","\x1a","\xc8","\xc4","\x75"),
	HX_HCSTRING("precedence","\x0a","\xf6","\xfc","\xee"),
	HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"),
	HX_HCSTRING("constraint","\x5d","\x00","\xcc","\x5a"),
	HX_HCSTRING("interaction","\xd2","\x37","\x59","\x3c"),
	HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"),
	HX_HCSTRING("swapEvent","\x87","\xd8","\x71","\xeb"),
	HX_HCSTRING("invalidate_precedence","\x8e","\xf5","\x4a","\xdf"),
	HX_HCSTRING("addedToSpace","\x6b","\x44","\xb0","\x09"),
	HX_HCSTRING("removedFromSpace","\x3c","\x43","\xd1","\xb7"),
	::String(null()) };

static void ZPP_Listener_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Listener_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Listener_obj::types,"types");
	HX_MARK_MEMBER_NAME(ZPP_Listener_obj::events,"events");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Listener_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Listener_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Listener_obj::types,"types");
	HX_VISIT_MEMBER_NAME(ZPP_Listener_obj::events,"events");
};

#endif

hx::Class ZPP_Listener_obj::__mClass;

static ::String ZPP_Listener_obj_sStaticFields[] = {
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("events","\x19","\x4f","\x6a","\x96"),
	HX_HCSTRING("setlt","\xaa","\xa6","\x2f","\x7a"),
	::String(null())
};

void ZPP_Listener_obj::__register()
{
	hx::Object *dummy = new ZPP_Listener_obj;
	ZPP_Listener_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.callbacks.ZPP_Listener","\xfa","\xd3","\x9c","\x56");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Listener_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Listener_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Listener_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Listener_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Listener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Listener_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Listener_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Listener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Listener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Listener_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_faa8e46ff739c640_182_boot)
HXLINE( 182)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY )) {
HXLINE( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 182)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT )) {
HXLINE( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 182)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION )) {
HXLINE( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 182)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE )) {
HXLINE( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 182)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 182)			return ::Array_obj< ::Dynamic>::__new(4)->init(0,::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY)->init(1,::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT)->init(2,::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION)->init(3,::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_182_boot)
HXLINE( 182)		types =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_faa8e46ff739c640_183_boot)
HXLINE( 183)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::CbEvent_BEGIN )) {
HXLINE( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::CbEvent_BEGIN =  ::nape::callbacks::CbEvent_obj::__alloc( HX_CTX );
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 183)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::CbEvent_END )) {
HXLINE( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::CbEvent_END =  ::nape::callbacks::CbEvent_obj::__alloc( HX_CTX );
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 183)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::CbEvent_WAKE )) {
HXLINE( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::CbEvent_WAKE =  ::nape::callbacks::CbEvent_obj::__alloc( HX_CTX );
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 183)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::CbEvent_SLEEP )) {
HXLINE( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::CbEvent_SLEEP =  ::nape::callbacks::CbEvent_obj::__alloc( HX_CTX );
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 183)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::CbEvent_BREAK )) {
HXLINE( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::CbEvent_BREAK =  ::nape::callbacks::CbEvent_obj::__alloc( HX_CTX );
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 183)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::CbEvent_PRE )) {
HXLINE( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::CbEvent_PRE =  ::nape::callbacks::CbEvent_obj::__alloc( HX_CTX );
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 183)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::CbEvent_ONGOING )) {
HXLINE( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::CbEvent_ONGOING =  ::nape::callbacks::CbEvent_obj::__alloc( HX_CTX );
HXDLIN( 183)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 183)			return ::Array_obj< ::Dynamic>::__new(7)->init(0,::zpp_nape::util::ZPP_Flags_obj::CbEvent_BEGIN)->init(1,::zpp_nape::util::ZPP_Flags_obj::CbEvent_END)->init(2,::zpp_nape::util::ZPP_Flags_obj::CbEvent_WAKE)->init(3,::zpp_nape::util::ZPP_Flags_obj::CbEvent_SLEEP)->init(4,::zpp_nape::util::ZPP_Flags_obj::CbEvent_BREAK)->init(5,::zpp_nape::util::ZPP_Flags_obj::CbEvent_PRE)->init(6,::zpp_nape::util::ZPP_Flags_obj::CbEvent_ONGOING);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_faa8e46ff739c640_183_boot)
HXLINE( 183)		events =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace zpp_nape
} // end namespace callbacks
