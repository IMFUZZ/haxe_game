// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_174_new,"zpp_nape.callbacks.ZPP_CbSetPair","new",0x012d1a29,"zpp_nape.callbacks.ZPP_CbSetPair.new","zpp_nape/callbacks/CbSetPair.hx",174,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_204_free,"zpp_nape.callbacks.ZPP_CbSetPair","free",0x0109e2c3,"zpp_nape.callbacks.ZPP_CbSetPair.free","zpp_nape/callbacks/CbSetPair.hx",204,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_211_alloc,"zpp_nape.callbacks.ZPP_CbSetPair","alloc",0x02a9b27e,"zpp_nape.callbacks.ZPP_CbSetPair.alloc","zpp_nape/callbacks/CbSetPair.hx",211,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_261_compatible,"zpp_nape.callbacks.ZPP_CbSetPair","compatible",0x3f904cab,"zpp_nape.callbacks.ZPP_CbSetPair.compatible","zpp_nape/callbacks/CbSetPair.hx",261,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_268_invalidate,"zpp_nape.callbacks.ZPP_CbSetPair","invalidate",0x8e978ad2,"zpp_nape.callbacks.ZPP_CbSetPair.invalidate","zpp_nape/callbacks/CbSetPair.hx",268,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_273_validate,"zpp_nape.callbacks.ZPP_CbSetPair","validate",0xbc7d6e2d,"zpp_nape.callbacks.ZPP_CbSetPair.validate","zpp_nape/callbacks/CbSetPair.hx",273,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_278___validate,"zpp_nape.callbacks.ZPP_CbSetPair","__validate",0xaf89b50d,"zpp_nape.callbacks.ZPP_CbSetPair.__validate","zpp_nape/callbacks/CbSetPair.hx",278,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_323_empty_intersection,"zpp_nape.callbacks.ZPP_CbSetPair","empty_intersection",0x14e1c6d2,"zpp_nape.callbacks.ZPP_CbSetPair.empty_intersection","zpp_nape/callbacks/CbSetPair.hx",323,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_327_single_intersection,"zpp_nape.callbacks.ZPP_CbSetPair","single_intersection",0xa7868569,"zpp_nape.callbacks.ZPP_CbSetPair.single_intersection","zpp_nape/callbacks/CbSetPair.hx",327,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_350_forall,"zpp_nape.callbacks.ZPP_CbSetPair","forall",0x0fbbb78f,"zpp_nape.callbacks.ZPP_CbSetPair.forall","zpp_nape/callbacks/CbSetPair.hx",350,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_217_get,"zpp_nape.callbacks.ZPP_CbSetPair","get",0x0127ca5f,"zpp_nape.callbacks.ZPP_CbSetPair.get","zpp_nape/callbacks/CbSetPair.hx",217,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_256_setlt,"zpp_nape.callbacks.ZPP_CbSetPair","setlt",0x5b45b4b3,"zpp_nape.callbacks.ZPP_CbSetPair.setlt","zpp_nape/callbacks/CbSetPair.hx",256,0xd7643d64)
HX_DEFINE_STACK_FRAME(_hx_pos_439a173f3e4a8196_178_boot,"zpp_nape.callbacks.ZPP_CbSetPair","boot",0xfe62ca49,"zpp_nape.callbacks.ZPP_CbSetPair.boot","zpp_nape/callbacks/CbSetPair.hx",178,0xd7643d64)
namespace zpp_nape{
namespace callbacks{

void ZPP_CbSetPair_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_439a173f3e4a8196_174_new)
            	HX_STACK_THIS(this)
HXLINE( 264)		this->listeners = null();
HXLINE( 263)		this->zip_listeners = false;
HXLINE( 177)		this->next = null();
HXLINE( 176)		this->b = null();
HXLINE( 175)		this->a = null();
HXLINE( 214)		this->listeners =  ::zpp_nape::util::ZNPList_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_CbSetPair_obj::__CreateEmpty() { return new ZPP_CbSetPair_obj; }

void *ZPP_CbSetPair_obj::_hx_vtable = 0;

Dynamic ZPP_CbSetPair_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_CbSetPair_obj > _hx_result = new ZPP_CbSetPair_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_CbSetPair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5fe9d377;
}

void ZPP_CbSetPair_obj::free(){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_204_free)
            	HX_STACK_THIS(this)
HXLINE( 205)		this->a = (this->b = null());
HXLINE( 206)		this->listeners->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetPair_obj,free,(void))

void ZPP_CbSetPair_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_211_alloc)
            	HX_STACK_THIS(this)
HXLINE( 211)		this->zip_listeners = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetPair_obj,alloc,(void))

bool ZPP_CbSetPair_obj::compatible( ::zpp_nape::callbacks::ZPP_InteractionListener i){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_261_compatible)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 261)		bool _hx_tmp;
HXDLIN( 261)		HX_VARI(  ::zpp_nape::callbacks::ZPP_OptionType,_this) = i->options1;
HXDLIN( 261)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs) = this->a->cbTypes;
HXDLIN( 261)		bool _hx_tmp1;
HXDLIN( 261)		if (_this->nonemptyintersection(xs,_this->includes)) {
HXLINE( 261)			_hx_tmp1 = !(_this->nonemptyintersection(xs,_this->excludes));
            		}
            		else {
HXLINE( 261)			_hx_tmp1 = false;
            		}
HXDLIN( 261)		if (_hx_tmp1) {
HXLINE( 261)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_OptionType,_this1,"_this") = i->options2;
HXDLIN( 261)			HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs1,"xs") = this->b->cbTypes;
HXDLIN( 261)			if (_this1->nonemptyintersection(xs1,_this1->includes)) {
HXLINE( 261)				_hx_tmp = !(_this1->nonemptyintersection(xs1,_this1->excludes));
            			}
            			else {
HXLINE( 261)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 261)			_hx_tmp = false;
            		}
HXDLIN( 261)		if (!(_hx_tmp)) {
HXLINE( 261)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_OptionType,_this2,"_this") = i->options2;
HXDLIN( 261)			HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs2,"xs") = this->a->cbTypes;
HXDLIN( 261)			bool _hx_tmp2;
HXDLIN( 261)			if (_this2->nonemptyintersection(xs2,_this2->includes)) {
HXLINE( 261)				_hx_tmp2 = !(_this2->nonemptyintersection(xs2,_this2->excludes));
            			}
            			else {
HXLINE( 261)				_hx_tmp2 = false;
            			}
HXDLIN( 261)			if (_hx_tmp2) {
HXLINE( 261)				HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_OptionType,_this3,"_this") = i->options1;
HXDLIN( 261)				HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs3,"xs") = this->b->cbTypes;
HXDLIN( 261)				if (_this3->nonemptyintersection(xs3,_this3->includes)) {
HXLINE( 261)					return !(_this3->nonemptyintersection(xs3,_this3->excludes));
            				}
            				else {
HXLINE( 261)					return false;
            				}
            			}
            			else {
HXLINE( 261)				return false;
            			}
            		}
            		else {
HXLINE( 261)			return true;
            		}
HXDLIN( 261)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSetPair_obj,compatible,return )

void ZPP_CbSetPair_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_268_invalidate)
            	HX_STACK_THIS(this)
HXLINE( 268)		this->zip_listeners = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetPair_obj,invalidate,(void))

void ZPP_CbSetPair_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_273_validate)
            	HX_STACK_THIS(this)
HXLINE( 273)		if (this->zip_listeners) {
HXLINE( 274)			this->zip_listeners = false;
HXLINE( 275)			this->_hx___validate();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetPair_obj,validate,(void))

void ZPP_CbSetPair_obj::_hx___validate(){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_278___validate)
            	HX_STACK_THIS(this)
HXLINE( 279)		this->listeners->clear();
HXLINE( 296)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,aite) = this->a->listeners->head;
HXLINE( 297)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,bite) = this->b->listeners->head;
HXLINE( 298)		while(true){
HXLINE( 298)			bool _hx_tmp;
HXDLIN( 298)			if (hx::IsNotNull( aite )) {
HXLINE( 298)				_hx_tmp = hx::IsNotNull( bite );
            			}
            			else {
HXLINE( 298)				_hx_tmp = false;
            			}
HXDLIN( 298)			if (!(_hx_tmp)) {
HXLINE( 298)				goto _hx_goto_6;
            			}
HXLINE( 299)			HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,ax) = aite->elt;
HXLINE( 300)			HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,bx) = bite->elt;
HXLINE( 301)			if (hx::IsEq( ax,bx )) {
HXLINE( 302)				bool _hx_tmp1;
HXDLIN( 302)				bool _hx_tmp2;
HXDLIN( 302)				HX_VARI(  ::zpp_nape::callbacks::ZPP_OptionType,_this) = ax->options1;
HXDLIN( 302)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs) = this->a->cbTypes;
HXDLIN( 302)				bool _hx_tmp3;
HXDLIN( 302)				if (_this->nonemptyintersection(xs,_this->includes)) {
HXLINE( 302)					_hx_tmp3 = !(_this->nonemptyintersection(xs,_this->excludes));
            				}
            				else {
HXLINE( 302)					_hx_tmp3 = false;
            				}
HXDLIN( 302)				if (_hx_tmp3) {
HXLINE( 302)					HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_OptionType,_this1,"_this") = ax->options2;
HXDLIN( 302)					HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs1,"xs") = this->b->cbTypes;
HXDLIN( 302)					if (_this1->nonemptyintersection(xs1,_this1->includes)) {
HXLINE( 302)						_hx_tmp2 = !(_this1->nonemptyintersection(xs1,_this1->excludes));
            					}
            					else {
HXLINE( 302)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE( 302)					_hx_tmp2 = false;
            				}
HXDLIN( 302)				if (!(_hx_tmp2)) {
HXLINE( 302)					HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_OptionType,_this2,"_this") = ax->options2;
HXDLIN( 302)					HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs2,"xs") = this->a->cbTypes;
HXDLIN( 302)					bool _hx_tmp4;
HXDLIN( 302)					if (_this2->nonemptyintersection(xs2,_this2->includes)) {
HXLINE( 302)						_hx_tmp4 = !(_this2->nonemptyintersection(xs2,_this2->excludes));
            					}
            					else {
HXLINE( 302)						_hx_tmp4 = false;
            					}
HXDLIN( 302)					if (_hx_tmp4) {
HXLINE( 302)						HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_OptionType,_this3,"_this") = ax->options1;
HXDLIN( 302)						HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,xs3,"xs") = this->b->cbTypes;
HXDLIN( 302)						if (_this3->nonemptyintersection(xs3,_this3->includes)) {
HXLINE( 302)							_hx_tmp1 = !(_this3->nonemptyintersection(xs3,_this3->excludes));
            						}
            						else {
HXLINE( 302)							_hx_tmp1 = false;
            						}
            					}
            					else {
HXLINE( 302)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 302)					_hx_tmp1 = true;
            				}
HXDLIN( 302)				if (_hx_tmp1) {
HXLINE( 303)					this->listeners->add(ax);
            				}
HXLINE( 305)				aite = aite->next;
HXLINE( 306)				bite = bite->next;
            			}
            			else {
HXLINE( 308)				bool _hx_tmp5;
HXDLIN( 308)				if ((ax->precedence <= bx->precedence)) {
HXLINE( 308)					if ((ax->precedence == bx->precedence)) {
HXLINE( 308)						_hx_tmp5 = (ax->id > bx->id);
            					}
            					else {
HXLINE( 308)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 308)					_hx_tmp5 = true;
            				}
HXDLIN( 308)				if (_hx_tmp5) {
HXLINE( 308)					aite = aite->next;
            				}
            				else {
HXLINE( 309)					bite = bite->next;
            				}
            			}
            		}
            		_hx_goto_6:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetPair_obj,_hx___validate,(void))

bool ZPP_CbSetPair_obj::empty_intersection(){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_323_empty_intersection)
            	HX_STACK_THIS(this)
HXLINE( 323)		return hx::IsNull( this->listeners->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetPair_obj,empty_intersection,return )

bool ZPP_CbSetPair_obj::single_intersection( ::zpp_nape::callbacks::ZPP_InteractionListener i){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_327_single_intersection)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 336)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ite) = this->listeners->head;
HXLINE( 337)		bool _hx_tmp;
HXDLIN( 337)		if (hx::IsNotNull( ite )) {
HXLINE( 337)			_hx_tmp = hx::IsEq( ite->elt,i );
            		}
            		else {
HXLINE( 337)			_hx_tmp = false;
            		}
HXDLIN( 337)		if (_hx_tmp) {
HXLINE( 337)			return hx::IsNull( ite->next );
            		}
            		else {
HXLINE( 337)			return false;
            		}
HXDLIN( 337)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSetPair_obj,single_intersection,return )

void ZPP_CbSetPair_obj::forall(int event, ::Dynamic cb){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_350_forall)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
            	HX_STACK_ARG(cb,"cb")
HXLINE( 351)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite) = this->listeners->head;
HXLINE( 352)		while(hx::IsNotNull( cx_ite )){
HXLINE( 353)			HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,x) = cx_ite->elt;
HXLINE( 355)			if ((x->event == event)) {
HXLINE( 355)				cb(x);
            			}
HXLINE( 357)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_CbSetPair_obj,forall,(void))

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_CbSetPair_obj::zpp_pool;

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_CbSetPair_obj::get( ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b){
            	HX_GC_STACKFRAME(&_hx_pos_439a173f3e4a8196_217_get)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 218)		HX_VAR(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret);
HXLINE( 219)		{
HXLINE( 220)			if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 221)				ret =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 227)				ret = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXLINE( 228)				::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret->next;
HXLINE( 229)				ret->next = null();
            			}
HXLINE( 234)			ret->zip_listeners = true;
            		}
HXLINE( 236)		if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b)) {
HXLINE( 237)			ret->a = a;
HXLINE( 238)			ret->b = b;
            		}
            		else {
HXLINE( 241)			ret->a = b;
HXLINE( 242)			ret->b = a;
            		}
HXLINE( 244)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_CbSetPair_obj,get,return )

bool ZPP_CbSetPair_obj::setlt( ::zpp_nape::callbacks::ZPP_CbSetPair x, ::zpp_nape::callbacks::ZPP_CbSetPair y){
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_256_setlt)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 256)		if (!(::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x->a,y->a))) {
HXLINE( 256)			if (hx::IsEq( x->a,y->a )) {
HXLINE( 256)				return ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x->b,y->b);
            			}
            			else {
HXLINE( 256)				return false;
            			}
            		}
            		else {
HXLINE( 256)			return true;
            		}
HXDLIN( 256)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_CbSetPair_obj,setlt,return )


hx::ObjectPtr< ZPP_CbSetPair_obj > ZPP_CbSetPair_obj::__new() {
	hx::ObjectPtr< ZPP_CbSetPair_obj > __this = new ZPP_CbSetPair_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_CbSetPair_obj > ZPP_CbSetPair_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_CbSetPair_obj *__this = (ZPP_CbSetPair_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_CbSetPair_obj), true, "zpp_nape.callbacks.ZPP_CbSetPair"));
	*(void **)__this = ZPP_CbSetPair_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_CbSetPair_obj::ZPP_CbSetPair_obj()
{
}

void ZPP_CbSetPair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_CbSetPair);
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(zip_listeners,"zip_listeners");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_END_CLASS();
}

void ZPP_CbSetPair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(zip_listeners,"zip_listeners");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
}

hx::Val ZPP_CbSetPair_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forall") ) { return hx::Val( forall_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { return hx::Val( listeners); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"compatible") ) { return hx::Val( compatible_dyn()); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"__validate") ) { return hx::Val( _hx___validate_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"zip_listeners") ) { return hx::Val( zip_listeners); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"empty_intersection") ) { return hx::Val( empty_intersection_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"single_intersection") ) { return hx::Val( single_intersection_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_CbSetPair_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setlt") ) { outValue = setlt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_CbSetPair_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSet >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSetPair >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_InteractionListener >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"zip_listeners") ) { zip_listeners=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_CbSetPair_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::callbacks::ZPP_CbSetPair >(); return true; }
	}
	return false;
}

void ZPP_CbSetPair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("zip_listeners","\x61","\x93","\xbf","\xe5"));
	outFields->push(HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_CbSetPair_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_CbSet*/ ,(int)offsetof(ZPP_CbSetPair_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_CbSet*/ ,(int)offsetof(ZPP_CbSetPair_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_CbSetPair*/ ,(int)offsetof(ZPP_CbSetPair_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsBool,(int)offsetof(ZPP_CbSetPair_obj,zip_listeners),HX_HCSTRING("zip_listeners","\x61","\x93","\xbf","\xe5")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_InteractionListener*/ ,(int)offsetof(ZPP_CbSetPair_obj,listeners),HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_CbSetPair_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_CbSetPair*/ ,(void *) &ZPP_CbSetPair_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_CbSetPair_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("compatible","\x54","\xdb","\x22","\x38"),
	HX_HCSTRING("zip_listeners","\x61","\x93","\xbf","\xe5"),
	HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("__validate","\xb6","\x43","\x1c","\xa8"),
	HX_HCSTRING("empty_intersection","\x7b","\xa6","\x10","\x19"),
	HX_HCSTRING("single_intersection","\xa0","\x59","\x5b","\x4c"),
	HX_HCSTRING("forall","\xb8","\x7d","\x85","\xfd"),
	::String(null()) };

static void ZPP_CbSetPair_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_CbSetPair_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_CbSetPair_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_CbSetPair_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_CbSetPair_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_CbSetPair_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_CbSetPair_obj::__mClass;

static ::String ZPP_CbSetPair_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("setlt","\xaa","\xa6","\x2f","\x7a"),
	::String(null())
};

void ZPP_CbSetPair_obj::__register()
{
	hx::Object *dummy = new ZPP_CbSetPair_obj;
	ZPP_CbSetPair_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.callbacks.ZPP_CbSetPair","\xb7","\xd1","\xe0","\xd4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_CbSetPair_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_CbSetPair_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_CbSetPair_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_CbSetPair_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_CbSetPair_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_CbSetPair_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_CbSetPair_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_CbSetPair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_CbSetPair_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_CbSetPair_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_439a173f3e4a8196_178_boot)
HXLINE( 178)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace callbacks
