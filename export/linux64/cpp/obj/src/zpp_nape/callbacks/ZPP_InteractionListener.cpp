// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_Callback
#include <nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionCallback
#include <nape/callbacks/InteractionCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionListener
#include <nape/callbacks/InteractionListener.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_OptionType
#include <nape/callbacks/OptionType.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreCallback
#include <nape/callbacks/PreCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreFlag
#include <nape/callbacks/PreFlag.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreListener
#include <nape/callbacks/PreListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSet
#include <zpp_nape/util/ZNPNode_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSetPair
#include <zpp_nape/util/ZPP_Set_ZPP_CbSetPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_338_new,"zpp_nape.callbacks.ZPP_InteractionListener","new",0xf921f592,"zpp_nape.callbacks.ZPP_InteractionListener.new","zpp_nape/callbacks/Listener.hx",338,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_351_setInteractionType,"zpp_nape.callbacks.ZPP_InteractionListener","setInteractionType",0x9488fd38,"zpp_nape.callbacks.ZPP_InteractionListener.setInteractionType","zpp_nape/callbacks/Listener.hx",351,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_371_wake,"zpp_nape.callbacks.ZPP_InteractionListener","wake",0x0a84c2b2,"zpp_nape.callbacks.ZPP_InteractionListener.wake","zpp_nape/callbacks/Listener.hx",371,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_390_CbSetset,"zpp_nape.callbacks.ZPP_InteractionListener","CbSetset",0x162afeed,"zpp_nape.callbacks.ZPP_InteractionListener.CbSetset","zpp_nape/callbacks/Listener.hx",390,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_469_CbTypeset,"zpp_nape.callbacks.ZPP_InteractionListener","CbTypeset",0x215c02db,"zpp_nape.callbacks.ZPP_InteractionListener.CbTypeset","zpp_nape/callbacks/Listener.hx",469,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_543_with_uniquesets,"zpp_nape.callbacks.ZPP_InteractionListener","with_uniquesets",0x3718532d,"zpp_nape.callbacks.ZPP_InteractionListener.with_uniquesets","zpp_nape/callbacks/Listener.hx",543,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_613_with_union,"zpp_nape.callbacks.ZPP_InteractionListener","with_union",0xad4f2fe4,"zpp_nape.callbacks.ZPP_InteractionListener.with_union","zpp_nape/callbacks/Listener.hx",613,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_642_addedToSpace,"zpp_nape.callbacks.ZPP_InteractionListener","addedToSpace",0xd900e8f9,"zpp_nape.callbacks.ZPP_InteractionListener.addedToSpace","zpp_nape/callbacks/Listener.hx",642,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_661_removedFromSpace,"zpp_nape.callbacks.ZPP_InteractionListener","removedFromSpace",0xe92a46ca,"zpp_nape.callbacks.ZPP_InteractionListener.removedFromSpace","zpp_nape/callbacks/Listener.hx",661,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_680_invalidate_precedence,"zpp_nape.callbacks.ZPP_InteractionListener","invalidate_precedence",0x04144f40,"zpp_nape.callbacks.ZPP_InteractionListener.invalidate_precedence","zpp_nape/callbacks/Listener.hx",680,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_700_cbtype_change1,"zpp_nape.callbacks.ZPP_InteractionListener","cbtype_change1",0xd11af429,"zpp_nape.callbacks.ZPP_InteractionListener.cbtype_change1","zpp_nape/callbacks/Listener.hx",700,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_703_cbtype_change2,"zpp_nape.callbacks.ZPP_InteractionListener","cbtype_change2",0xd11af42a,"zpp_nape.callbacks.ZPP_InteractionListener.cbtype_change2","zpp_nape/callbacks/Listener.hx",703,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_705_cbtype_change,"zpp_nape.callbacks.ZPP_InteractionListener","cbtype_change",0x0461b308,"zpp_nape.callbacks.ZPP_InteractionListener.cbtype_change","zpp_nape/callbacks/Listener.hx",705,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_712_swapEvent,"zpp_nape.callbacks.ZPP_InteractionListener","swapEvent",0x2c1aef39,"zpp_nape.callbacks.ZPP_InteractionListener.swapEvent","zpp_nape/callbacks/Listener.hx",712,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_385_boot,"zpp_nape.callbacks.ZPP_InteractionListener","boot",0xfcadeac0,"zpp_nape.callbacks.ZPP_InteractionListener.boot","zpp_nape/callbacks/Listener.hx",385,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_386_boot,"zpp_nape.callbacks.ZPP_InteractionListener","boot",0xfcadeac0,"zpp_nape.callbacks.ZPP_InteractionListener.boot","zpp_nape/callbacks/Listener.hx",386,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_387_boot,"zpp_nape.callbacks.ZPP_InteractionListener","boot",0xfcadeac0,"zpp_nape.callbacks.ZPP_InteractionListener.boot","zpp_nape/callbacks/Listener.hx",387,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_464_boot,"zpp_nape.callbacks.ZPP_InteractionListener","boot",0xfcadeac0,"zpp_nape.callbacks.ZPP_InteractionListener.boot","zpp_nape/callbacks/Listener.hx",464,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_465_boot,"zpp_nape.callbacks.ZPP_InteractionListener","boot",0xfcadeac0,"zpp_nape.callbacks.ZPP_InteractionListener.boot","zpp_nape/callbacks/Listener.hx",465,0x87b155a7)
HX_DEFINE_STACK_FRAME(_hx_pos_02b7feea1016c80f_466_boot,"zpp_nape.callbacks.ZPP_InteractionListener","boot",0xfcadeac0,"zpp_nape.callbacks.ZPP_InteractionListener.boot","zpp_nape/callbacks/Listener.hx",466,0x87b155a7)
namespace zpp_nape{
namespace callbacks{

void ZPP_InteractionListener_obj::__construct( ::nape::callbacks::OptionType options1, ::nape::callbacks::OptionType options2,int event,int type){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_338_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(options1,"options1")
            	HX_STACK_ARG(options2,"options2")
            	HX_STACK_ARG(event,"event")
            	HX_STACK_ARG(type,"type")
HXLINE( 347)		this->handlerp = null();
HXLINE( 346)		this->pure = false;
HXLINE( 345)		this->allowSleepingCallbacks = false;
HXLINE( 344)		this->handleri = null();
HXLINE( 343)		this->options2 = null();
HXLINE( 342)		this->options1 = null();
HXLINE( 341)		this->itype = (int)0;
HXLINE( 340)		this->outer_znp = null();
HXLINE( 339)		this->outer_zni = null();
HXLINE( 354)		super::__construct();
HXLINE( 355)		this->type = type;
HXLINE( 356)		this->interaction = hx::ObjectPtr<OBJ_>(this);
HXLINE( 357)		this->event = event;
HXLINE( 358)		this->options1 = options1->zpp_inner;
HXLINE( 359)		this->options2 = options2->zpp_inner;
HXLINE( 360)		this->allowSleepingCallbacks = false;
            	}

Dynamic ZPP_InteractionListener_obj::__CreateEmpty() { return new ZPP_InteractionListener_obj; }

void *ZPP_InteractionListener_obj::_hx_vtable = 0;

Dynamic ZPP_InteractionListener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_InteractionListener_obj > _hx_result = new ZPP_InteractionListener_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool ZPP_InteractionListener_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x67e66328) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x67e66328;
	} else {
		return inClassId==(int)0x763b4a3a;
	}
}

void ZPP_InteractionListener_obj::setInteractionType(int itype){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_351_setInteractionType)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(itype,"itype")
HXLINE( 351)		this->itype = itype;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionListener_obj,setInteractionType,(void))

void ZPP_InteractionListener_obj::wake(){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_371_wake)
            	HX_STACK_THIS(this)
HXLINE( 371)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite1) = this->options1->includes->head;
HXDLIN( 371)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite2) = this->options2->includes->head;
HXDLIN( 371)		while(true){
HXLINE( 371)			bool _hx_tmp;
HXDLIN( 371)			if (hx::IsNotNull( ite1 )) {
HXLINE( 371)				_hx_tmp = hx::IsNotNull( ite2 );
            			}
            			else {
HXLINE( 371)				_hx_tmp = false;
            			}
HXDLIN( 371)			if (!(_hx_tmp)) {
HXLINE( 371)				goto _hx_goto_2;
            			}
HXDLIN( 371)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb1) = ite1->elt;
HXDLIN( 371)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb2) = ite2->elt;
HXDLIN( 371)			if (hx::IsEq( cb1,cb2 )) {
HXLINE( 372)				{
HXLINE( 373)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite) = cb1->interactors->head;
HXLINE( 374)					while(hx::IsNotNull( cx_ite )){
HXLINE( 377)						cx_ite->elt->wake();
HXLINE( 379)						cx_ite = cx_ite->next;
            					}
            				}
HXLINE( 371)				ite1 = ite1->next;
HXDLIN( 371)				ite2 = ite2->next;
            			}
            			else {
HXLINE( 371)				if ((cb1->id < cb2->id)) {
HXLINE( 372)					{
HXLINE( 373)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite1,"cx_ite") = cb1->interactors->head;
HXLINE( 374)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 377)							cx_ite1->elt->wake();
HXLINE( 379)							cx_ite1 = cx_ite1->next;
            						}
            					}
HXLINE( 371)					ite1 = ite1->next;
            				}
            				else {
HXLINE( 372)					{
HXLINE( 373)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite2,"cx_ite") = cb2->interactors->head;
HXLINE( 374)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 377)							cx_ite2->elt->wake();
HXLINE( 379)							cx_ite2 = cx_ite2->next;
            						}
            					}
HXLINE( 371)					ite2 = ite2->next;
            				}
            			}
            		}
            		_hx_goto_2:;
HXDLIN( 371)		while(hx::IsNotNull( ite1 )){
HXLINE( 372)			{
HXLINE( 373)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite3,"cx_ite") = ite1->elt->interactors->head;
HXLINE( 374)				while(hx::IsNotNull( cx_ite3 )){
HXLINE( 377)					cx_ite3->elt->wake();
HXLINE( 379)					cx_ite3 = cx_ite3->next;
            				}
            			}
HXLINE( 371)			ite1 = ite1->next;
            		}
HXDLIN( 371)		while(hx::IsNotNull( ite2 )){
HXLINE( 372)			{
HXLINE( 373)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite4,"cx_ite") = ite2->elt->interactors->head;
HXLINE( 374)				while(hx::IsNotNull( cx_ite4 )){
HXLINE( 377)					cx_ite4->elt->wake();
HXLINE( 379)					cx_ite4 = cx_ite4->next;
            				}
            			}
HXLINE( 371)			ite2 = ite2->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_InteractionListener_obj,wake,(void))

void ZPP_InteractionListener_obj::CbSetset( ::zpp_nape::util::ZNPList_ZPP_CbSet A, ::zpp_nape::util::ZNPList_ZPP_CbSet B, ::Dynamic lambda){
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_390_CbSetset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(A,"A")
            	HX_STACK_ARG(B,"B")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 391)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbSet,U) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::UCbSet;
HXLINE( 392)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbSet,V) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::VCbSet;
HXLINE( 393)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbSet,W) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::WCbSet;
HXLINE( 394)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,aite) = A->head;
HXLINE( 395)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,bite) = B->head;
HXLINE( 396)		while(true){
HXLINE( 396)			bool _hx_tmp;
HXDLIN( 396)			if (hx::IsNotNull( aite )) {
HXLINE( 396)				_hx_tmp = hx::IsNotNull( bite );
            			}
            			else {
HXLINE( 396)				_hx_tmp = false;
            			}
HXDLIN( 396)			if (!(_hx_tmp)) {
HXLINE( 396)				goto _hx_goto_11;
            			}
HXLINE( 397)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,a) = aite->elt;
HXLINE( 398)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,b) = bite->elt;
HXLINE( 399)			if (hx::IsEq( a,b )) {
HXLINE( 400)				{
HXLINE( 400)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret);
HXDLIN( 400)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 400)						ret =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 400)						ret = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 400)						::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret->next;
HXDLIN( 400)						ret->next = null();
            					}
HXDLIN( 400)					ret->elt = a;
HXDLIN( 400)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp) = ret;
HXDLIN( 400)					temp->next = W->head;
HXDLIN( 400)					W->head = temp;
HXDLIN( 400)					W->modified = true;
HXDLIN( 400)					W->length++;
            				}
HXLINE( 401)				aite = aite->next;
HXLINE( 402)				bite = bite->next;
            			}
            			else {
HXLINE( 404)				if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b)) {
HXLINE( 405)					{
HXLINE( 405)						HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret1,"ret");
HXDLIN( 405)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 405)							ret1 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 405)							ret1 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 405)							::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret1->next;
HXDLIN( 405)							ret1->next = null();
            						}
HXDLIN( 405)						ret1->elt = a;
HXDLIN( 405)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp1,"temp") = ret1;
HXDLIN( 405)						temp1->next = U->head;
HXDLIN( 405)						U->head = temp1;
HXDLIN( 405)						U->modified = true;
HXDLIN( 405)						U->length++;
            					}
HXLINE( 406)					aite = aite->next;
            				}
            				else {
HXLINE( 409)					{
HXLINE( 409)						HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret2,"ret");
HXDLIN( 409)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 409)							ret2 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 409)							ret2 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 409)							::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret2->next;
HXDLIN( 409)							ret2->next = null();
            						}
HXDLIN( 409)						ret2->elt = b;
HXDLIN( 409)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp2,"temp") = ret2;
HXDLIN( 409)						temp2->next = V->head;
HXDLIN( 409)						V->head = temp2;
HXDLIN( 409)						V->modified = true;
HXDLIN( 409)						V->length++;
            					}
HXLINE( 410)					bite = bite->next;
            				}
            			}
            		}
            		_hx_goto_11:;
HXLINE( 413)		while(hx::IsNotNull( aite )){
HXLINE( 414)			{
HXLINE( 414)				HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret3,"ret");
HXDLIN( 414)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 414)					ret3 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 414)					ret3 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 414)					::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret3->next;
HXDLIN( 414)					ret3->next = null();
            				}
HXDLIN( 414)				ret3->elt = aite->elt;
HXDLIN( 414)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp3,"temp") = ret3;
HXDLIN( 414)				temp3->next = U->head;
HXDLIN( 414)				U->head = temp3;
HXDLIN( 414)				U->modified = true;
HXDLIN( 414)				U->length++;
            			}
HXLINE( 415)			aite = aite->next;
            		}
HXLINE( 417)		while(hx::IsNotNull( bite )){
HXLINE( 418)			{
HXLINE( 418)				HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret4,"ret");
HXDLIN( 418)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 418)					ret4 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 418)					ret4 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 418)					::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret4->next;
HXDLIN( 418)					ret4->next = null();
            				}
HXDLIN( 418)				ret4->elt = bite->elt;
HXDLIN( 418)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp4,"temp") = ret4;
HXDLIN( 418)				temp4->next = V->head;
HXDLIN( 418)				V->head = temp4;
HXDLIN( 418)				V->modified = true;
HXDLIN( 418)				V->length++;
            			}
HXLINE( 419)			bite = bite->next;
            		}
HXLINE( 422)		while(hx::IsNotNull( U->head )){
HXLINE( 423)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,x) = U->pop_unsafe();
HXLINE( 424)			{
HXLINE( 425)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = B->head;
HXLINE( 426)				while(hx::IsNotNull( cx_ite )){
HXLINE( 428)					lambda(x,cx_ite->elt);
HXLINE( 429)					cx_ite = cx_ite->next;
            				}
            			}
            		}
HXLINE( 435)		while(hx::IsNotNull( V->head )){
HXLINE( 436)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x1,"x") = V->pop_unsafe();
HXLINE( 437)			{
HXLINE( 438)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite1,"cx_ite") = W->head;
HXLINE( 439)				while(hx::IsNotNull( cx_ite1 )){
HXLINE( 441)					lambda(x1,cx_ite1->elt);
HXLINE( 442)					cx_ite1 = cx_ite1->next;
            				}
            			}
            		}
HXLINE( 448)		while(hx::IsNotNull( W->head )){
HXLINE( 449)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x2,"x") = W->pop_unsafe();
HXLINE( 450)			{
HXLINE( 451)				lambda(x2,x2);
HXLINE( 452)				{
HXLINE( 453)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite2,"cx_ite") = W->head;
HXLINE( 454)					while(hx::IsNotNull( cx_ite2 )){
HXLINE( 456)						lambda(x2,cx_ite2->elt);
HXLINE( 457)						cx_ite2 = cx_ite2->next;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_InteractionListener_obj,CbSetset,(void))

void ZPP_InteractionListener_obj::CbTypeset( ::zpp_nape::util::ZNPList_ZPP_CbType A, ::zpp_nape::util::ZNPList_ZPP_CbType B, ::Dynamic lambda){
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_469_CbTypeset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(A,"A")
            	HX_STACK_ARG(B,"B")
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 470)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,U) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::UCbType;
HXLINE( 471)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,V) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::VCbType;
HXLINE( 472)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,W) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::WCbType;
HXLINE( 473)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,aite) = A->head;
HXLINE( 474)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,bite) = B->head;
HXLINE( 475)		while(true){
HXLINE( 475)			bool _hx_tmp;
HXDLIN( 475)			if (hx::IsNotNull( aite )) {
HXLINE( 475)				_hx_tmp = hx::IsNotNull( bite );
            			}
            			else {
HXLINE( 475)				_hx_tmp = false;
            			}
HXDLIN( 475)			if (!(_hx_tmp)) {
HXLINE( 475)				goto _hx_goto_21;
            			}
HXLINE( 476)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,a) = aite->elt;
HXLINE( 477)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,b) = bite->elt;
HXLINE( 478)			if (hx::IsEq( a,b )) {
HXLINE( 479)				{
HXLINE( 479)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 479)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 479)						ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 479)						ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 479)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 479)						ret->next = null();
            					}
HXDLIN( 479)					ret->elt = a;
HXDLIN( 479)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXDLIN( 479)					temp->next = W->head;
HXDLIN( 479)					W->head = temp;
HXDLIN( 479)					W->modified = true;
HXDLIN( 479)					W->length++;
            				}
HXLINE( 480)				aite = aite->next;
HXLINE( 481)				bite = bite->next;
            			}
            			else {
HXLINE( 483)				if ((a->id < b->id)) {
HXLINE( 484)					{
HXLINE( 484)						HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret1,"ret");
HXDLIN( 484)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 484)							ret1 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 484)							ret1 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 484)							::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret1->next;
HXDLIN( 484)							ret1->next = null();
            						}
HXDLIN( 484)						ret1->elt = a;
HXDLIN( 484)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp1,"temp") = ret1;
HXDLIN( 484)						temp1->next = U->head;
HXDLIN( 484)						U->head = temp1;
HXDLIN( 484)						U->modified = true;
HXDLIN( 484)						U->length++;
            					}
HXLINE( 485)					aite = aite->next;
            				}
            				else {
HXLINE( 488)					{
HXLINE( 488)						HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret2,"ret");
HXDLIN( 488)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 488)							ret2 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 488)							ret2 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 488)							::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret2->next;
HXDLIN( 488)							ret2->next = null();
            						}
HXDLIN( 488)						ret2->elt = b;
HXDLIN( 488)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp2,"temp") = ret2;
HXDLIN( 488)						temp2->next = V->head;
HXDLIN( 488)						V->head = temp2;
HXDLIN( 488)						V->modified = true;
HXDLIN( 488)						V->length++;
            					}
HXLINE( 489)					bite = bite->next;
            				}
            			}
            		}
            		_hx_goto_21:;
HXLINE( 492)		while(hx::IsNotNull( aite )){
HXLINE( 493)			{
HXLINE( 493)				HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret3,"ret");
HXDLIN( 493)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 493)					ret3 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 493)					ret3 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 493)					::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret3->next;
HXDLIN( 493)					ret3->next = null();
            				}
HXDLIN( 493)				ret3->elt = aite->elt;
HXDLIN( 493)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp3,"temp") = ret3;
HXDLIN( 493)				temp3->next = U->head;
HXDLIN( 493)				U->head = temp3;
HXDLIN( 493)				U->modified = true;
HXDLIN( 493)				U->length++;
            			}
HXLINE( 494)			aite = aite->next;
            		}
HXLINE( 496)		while(hx::IsNotNull( bite )){
HXLINE( 497)			{
HXLINE( 497)				HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret4,"ret");
HXDLIN( 497)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 497)					ret4 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 497)					ret4 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 497)					::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret4->next;
HXDLIN( 497)					ret4->next = null();
            				}
HXDLIN( 497)				ret4->elt = bite->elt;
HXDLIN( 497)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp4,"temp") = ret4;
HXDLIN( 497)				temp4->next = V->head;
HXDLIN( 497)				V->head = temp4;
HXDLIN( 497)				V->modified = true;
HXDLIN( 497)				V->length++;
            			}
HXLINE( 498)			bite = bite->next;
            		}
HXLINE( 501)		while(hx::IsNotNull( U->head )){
HXLINE( 502)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,x) = U->pop_unsafe();
HXLINE( 503)			{
HXLINE( 504)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = B->head;
HXLINE( 505)				while(hx::IsNotNull( cx_ite )){
HXLINE( 507)					lambda(x,cx_ite->elt);
HXLINE( 508)					cx_ite = cx_ite->next;
            				}
            			}
            		}
HXLINE( 514)		while(hx::IsNotNull( V->head )){
HXLINE( 515)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,x1,"x") = V->pop_unsafe();
HXLINE( 516)			{
HXLINE( 517)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite1,"cx_ite") = W->head;
HXLINE( 518)				while(hx::IsNotNull( cx_ite1 )){
HXLINE( 520)					lambda(x1,cx_ite1->elt);
HXLINE( 521)					cx_ite1 = cx_ite1->next;
            				}
            			}
            		}
HXLINE( 527)		while(hx::IsNotNull( W->head )){
HXLINE( 528)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,x2,"x") = W->pop_unsafe();
HXLINE( 529)			{
HXLINE( 530)				lambda(x2,x2);
HXLINE( 531)				{
HXLINE( 532)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite2,"cx_ite") = W->head;
HXLINE( 533)					while(hx::IsNotNull( cx_ite2 )){
HXLINE( 535)						lambda(x2,cx_ite2->elt);
HXLINE( 536)						cx_ite2 = cx_ite2->next;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_InteractionListener_obj,CbTypeset,(void))

void ZPP_InteractionListener_obj::with_uniquesets(bool fresh){
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_543_with_uniquesets)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fresh,"fresh")
HXLINE( 543)		HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 544)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,set);
HXLINE( 546)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 547)			set =  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 553)			set = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE( 554)			::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = set->next;
HXLINE( 555)			set->next = null();
            		}
HXLINE( 562)		set->lt = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::setlt_dyn();
HXLINE( 563)		{
HXLINE( 563)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,B) = this->options2->includes;
HXDLIN( 563)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,U) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::UCbType;
HXDLIN( 563)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,V) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::VCbType;
HXDLIN( 563)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,W) = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::WCbType;
HXDLIN( 563)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,aite) = this->options1->includes->head;
HXDLIN( 563)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,bite) = B->head;
HXDLIN( 563)			while(true){
HXLINE( 563)				bool _hx_tmp;
HXDLIN( 563)				if (hx::IsNotNull( aite )) {
HXLINE( 563)					_hx_tmp = hx::IsNotNull( bite );
            				}
            				else {
HXLINE( 563)					_hx_tmp = false;
            				}
HXDLIN( 563)				if (!(_hx_tmp)) {
HXLINE( 563)					goto _hx_goto_31;
            				}
HXDLIN( 563)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,a) = aite->elt;
HXDLIN( 563)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,b) = bite->elt;
HXDLIN( 563)				if (hx::IsEq( a,b )) {
HXLINE( 563)					{
HXLINE( 563)						HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 563)						if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 563)							ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 563)							ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 563)							::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 563)							ret->next = null();
            						}
HXDLIN( 563)						ret->elt = a;
HXDLIN( 563)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXDLIN( 563)						temp->next = W->head;
HXDLIN( 563)						W->head = temp;
HXDLIN( 563)						W->modified = true;
HXDLIN( 563)						W->length++;
            					}
HXDLIN( 563)					aite = aite->next;
HXDLIN( 563)					bite = bite->next;
            				}
            				else {
HXLINE( 563)					if ((a->id < b->id)) {
HXLINE( 563)						{
HXLINE( 563)							HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret1,"ret");
HXDLIN( 563)							if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 563)								ret1 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 563)								ret1 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 563)								::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret1->next;
HXDLIN( 563)								ret1->next = null();
            							}
HXDLIN( 563)							ret1->elt = a;
HXDLIN( 563)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp1,"temp") = ret1;
HXDLIN( 563)							temp1->next = U->head;
HXDLIN( 563)							U->head = temp1;
HXDLIN( 563)							U->modified = true;
HXDLIN( 563)							U->length++;
            						}
HXDLIN( 563)						aite = aite->next;
            					}
            					else {
HXLINE( 563)						{
HXLINE( 563)							HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret2,"ret");
HXDLIN( 563)							if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 563)								ret2 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 563)								ret2 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 563)								::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret2->next;
HXDLIN( 563)								ret2->next = null();
            							}
HXDLIN( 563)							ret2->elt = b;
HXDLIN( 563)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp2,"temp") = ret2;
HXDLIN( 563)							temp2->next = V->head;
HXDLIN( 563)							V->head = temp2;
HXDLIN( 563)							V->modified = true;
HXDLIN( 563)							V->length++;
            						}
HXDLIN( 563)						bite = bite->next;
            					}
            				}
            			}
            			_hx_goto_31:;
HXDLIN( 563)			while(hx::IsNotNull( aite )){
HXLINE( 563)				{
HXLINE( 563)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret3,"ret");
HXDLIN( 563)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 563)						ret3 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 563)						ret3 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 563)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret3->next;
HXDLIN( 563)						ret3->next = null();
            					}
HXDLIN( 563)					ret3->elt = aite->elt;
HXDLIN( 563)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp3,"temp") = ret3;
HXDLIN( 563)					temp3->next = U->head;
HXDLIN( 563)					U->head = temp3;
HXDLIN( 563)					U->modified = true;
HXDLIN( 563)					U->length++;
            				}
HXDLIN( 563)				aite = aite->next;
            			}
HXDLIN( 563)			while(hx::IsNotNull( bite )){
HXLINE( 563)				{
HXLINE( 563)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret4,"ret");
HXDLIN( 563)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 563)						ret4 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 563)						ret4 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 563)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret4->next;
HXDLIN( 563)						ret4->next = null();
            					}
HXDLIN( 563)					ret4->elt = bite->elt;
HXDLIN( 563)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp4,"temp") = ret4;
HXDLIN( 563)					temp4->next = V->head;
HXDLIN( 563)					V->head = temp4;
HXDLIN( 563)					V->modified = true;
HXDLIN( 563)					V->length++;
            				}
HXDLIN( 563)				bite = bite->next;
            			}
HXDLIN( 563)			while(hx::IsNotNull( U->head )){
HXLINE( 563)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,x) = U->pop_unsafe();
HXDLIN( 563)				{
HXLINE( 563)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = B->head;
HXDLIN( 563)					while(hx::IsNotNull( cx_ite )){
HXLINE( 564)						{
HXLINE( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,B1,"B") = cx_ite->elt->cbsets;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,U1,"U") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::UCbSet;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,V1,"V") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::VCbSet;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,W1,"W") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::WCbSet;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,aite1,"aite") = x->cbsets->head;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,bite1,"bite") = B1->head;
HXDLIN( 564)							while(true){
HXLINE( 564)								bool _hx_tmp1;
HXDLIN( 564)								if (hx::IsNotNull( aite1 )) {
HXLINE( 564)									_hx_tmp1 = hx::IsNotNull( bite1 );
            								}
            								else {
HXLINE( 564)									_hx_tmp1 = false;
            								}
HXDLIN( 564)								if (!(_hx_tmp1)) {
HXLINE( 564)									goto _hx_goto_36;
            								}
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,a1,"a") = aite1->elt;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,b1,"b") = bite1->elt;
HXDLIN( 564)								if (hx::IsEq( a1,b1 )) {
HXLINE( 564)									{
HXLINE( 564)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret5,"ret");
HXDLIN( 564)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)											ret5 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 564)											ret5 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)											::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret5->next;
HXDLIN( 564)											ret5->next = null();
            										}
HXDLIN( 564)										ret5->elt = a1;
HXDLIN( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp5,"temp") = ret5;
HXDLIN( 564)										temp5->next = W1->head;
HXDLIN( 564)										W1->head = temp5;
HXDLIN( 564)										W1->modified = true;
HXDLIN( 564)										W1->length++;
            									}
HXDLIN( 564)									aite1 = aite1->next;
HXDLIN( 564)									bite1 = bite1->next;
            								}
            								else {
HXLINE( 564)									if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a1,b1)) {
HXLINE( 564)										{
HXLINE( 564)											HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret6,"ret");
HXDLIN( 564)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)												ret6 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 564)												ret6 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)												::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret6->next;
HXDLIN( 564)												ret6->next = null();
            											}
HXDLIN( 564)											ret6->elt = a1;
HXDLIN( 564)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp6,"temp") = ret6;
HXDLIN( 564)											temp6->next = U1->head;
HXDLIN( 564)											U1->head = temp6;
HXDLIN( 564)											U1->modified = true;
HXDLIN( 564)											U1->length++;
            										}
HXDLIN( 564)										aite1 = aite1->next;
            									}
            									else {
HXLINE( 564)										{
HXLINE( 564)											HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret7,"ret");
HXDLIN( 564)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)												ret7 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 564)												ret7 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)												::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret7->next;
HXDLIN( 564)												ret7->next = null();
            											}
HXDLIN( 564)											ret7->elt = b1;
HXDLIN( 564)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp7,"temp") = ret7;
HXDLIN( 564)											temp7->next = V1->head;
HXDLIN( 564)											V1->head = temp7;
HXDLIN( 564)											V1->modified = true;
HXDLIN( 564)											V1->length++;
            										}
HXDLIN( 564)										bite1 = bite1->next;
            									}
            								}
            							}
            							_hx_goto_36:;
HXDLIN( 564)							while(hx::IsNotNull( aite1 )){
HXLINE( 564)								{
HXLINE( 564)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret8,"ret");
HXDLIN( 564)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)										ret8 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 564)										ret8 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)										::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret8->next;
HXDLIN( 564)										ret8->next = null();
            									}
HXDLIN( 564)									ret8->elt = aite1->elt;
HXDLIN( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp8,"temp") = ret8;
HXDLIN( 564)									temp8->next = U1->head;
HXDLIN( 564)									U1->head = temp8;
HXDLIN( 564)									U1->modified = true;
HXDLIN( 564)									U1->length++;
            								}
HXDLIN( 564)								aite1 = aite1->next;
            							}
HXDLIN( 564)							while(hx::IsNotNull( bite1 )){
HXLINE( 564)								{
HXLINE( 564)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret9,"ret");
HXDLIN( 564)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)										ret9 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 564)										ret9 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)										::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret9->next;
HXDLIN( 564)										ret9->next = null();
            									}
HXDLIN( 564)									ret9->elt = bite1->elt;
HXDLIN( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp9,"temp") = ret9;
HXDLIN( 564)									temp9->next = V1->head;
HXDLIN( 564)									V1->head = temp9;
HXDLIN( 564)									V1->modified = true;
HXDLIN( 564)									V1->length++;
            								}
HXDLIN( 564)								bite1 = bite1->next;
            							}
HXDLIN( 564)							while(hx::IsNotNull( U1->head )){
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x1,"x") = U1->pop_unsafe();
HXDLIN( 564)								{
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite1,"cx_ite") = B1->head;
HXDLIN( 564)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 564)										HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,y) = cx_ite1->elt;
HXDLIN( 564)										{
HXLINE( 565)											x1->validate();
HXLINE( 566)											y->validate();
HXLINE( 567)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x1,y,_gthis)) {
HXLINE( 568)												HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret10,"ret");
HXDLIN( 568)												{
HXLINE( 568)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)														ret10 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE( 568)														ret10 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret10->next;
HXDLIN( 568)														ret10->next = null();
            													}
HXDLIN( 568)													ret10->zip_listeners = true;
            												}
HXDLIN( 568)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x1,y)) {
HXLINE( 568)													ret10->a = x1;
HXDLIN( 568)													ret10->b = y;
            												}
            												else {
HXLINE( 568)													ret10->a = y;
HXDLIN( 568)													ret10->b = x1;
            												}
HXDLIN( 568)												set->try_insert(ret10);
            											}
            										}
HXLINE( 564)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
HXDLIN( 564)							while(hx::IsNotNull( V1->head )){
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x2,"x") = V1->pop_unsafe();
HXDLIN( 564)								{
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite2,"cx_ite") = W1->head;
HXDLIN( 564)									while(hx::IsNotNull( cx_ite2 )){
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y1,"y") = cx_ite2->elt;
HXDLIN( 564)										{
HXLINE( 565)											x2->validate();
HXLINE( 566)											y1->validate();
HXLINE( 567)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x2,y1,_gthis)) {
HXLINE( 568)												HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret11,"ret");
HXDLIN( 568)												{
HXLINE( 568)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)														ret11 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE( 568)														ret11 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret11->next;
HXDLIN( 568)														ret11->next = null();
            													}
HXDLIN( 568)													ret11->zip_listeners = true;
            												}
HXDLIN( 568)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x2,y1)) {
HXLINE( 568)													ret11->a = x2;
HXDLIN( 568)													ret11->b = y1;
            												}
            												else {
HXLINE( 568)													ret11->a = y1;
HXDLIN( 568)													ret11->b = x2;
            												}
HXDLIN( 568)												set->try_insert(ret11);
            											}
            										}
HXLINE( 564)										cx_ite2 = cx_ite2->next;
            									}
            								}
            							}
HXDLIN( 564)							while(hx::IsNotNull( W1->head )){
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x3,"x") = W1->pop_unsafe();
HXDLIN( 564)								{
HXLINE( 564)									{
HXLINE( 565)										x3->validate();
HXLINE( 566)										x3->validate();
HXLINE( 567)										if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x3,x3,_gthis)) {
HXLINE( 568)											HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret12,"ret");
HXDLIN( 568)											{
HXLINE( 568)												if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)													ret12 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE( 568)													ret12 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)													::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret12->next;
HXDLIN( 568)													ret12->next = null();
            												}
HXDLIN( 568)												ret12->zip_listeners = true;
            											}
HXDLIN( 568)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x3,x3)) {
HXLINE( 568)												ret12->a = x3;
HXDLIN( 568)												ret12->b = x3;
            											}
            											else {
HXLINE( 568)												ret12->a = x3;
HXDLIN( 568)												ret12->b = x3;
            											}
HXDLIN( 568)											set->try_insert(ret12);
            										}
            									}
HXLINE( 564)									{
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite3,"cx_ite") = W1->head;
HXDLIN( 564)										while(hx::IsNotNull( cx_ite3 )){
HXLINE( 564)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y2,"y") = cx_ite3->elt;
HXDLIN( 564)											{
HXLINE( 565)												x3->validate();
HXLINE( 566)												y2->validate();
HXLINE( 567)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x3,y2,_gthis)) {
HXLINE( 568)													HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret13,"ret");
HXDLIN( 568)													{
HXLINE( 568)														if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)															ret13 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE( 568)															ret13 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret13->next;
HXDLIN( 568)															ret13->next = null();
            														}
HXDLIN( 568)														ret13->zip_listeners = true;
            													}
HXDLIN( 568)													if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x3,y2)) {
HXLINE( 568)														ret13->a = x3;
HXDLIN( 568)														ret13->b = y2;
            													}
            													else {
HXLINE( 568)														ret13->a = y2;
HXDLIN( 568)														ret13->b = x3;
            													}
HXDLIN( 568)													set->try_insert(ret13);
            												}
            											}
HXLINE( 564)											cx_ite3 = cx_ite3->next;
            										}
            									}
            								}
            							}
            						}
HXLINE( 563)						cx_ite = cx_ite->next;
            					}
            				}
            			}
HXDLIN( 563)			while(hx::IsNotNull( V->head )){
HXLINE( 563)				HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,x4,"x") = V->pop_unsafe();
HXDLIN( 563)				{
HXLINE( 563)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite4,"cx_ite") = W->head;
HXDLIN( 563)					while(hx::IsNotNull( cx_ite4 )){
HXLINE( 564)						{
HXLINE( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,B2,"B") = cx_ite4->elt->cbsets;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,U2,"U") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::UCbSet;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,V2,"V") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::VCbSet;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,W2,"W") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::WCbSet;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,aite2,"aite") = x4->cbsets->head;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,bite2,"bite") = B2->head;
HXDLIN( 564)							while(true){
HXLINE( 564)								bool _hx_tmp2;
HXDLIN( 564)								if (hx::IsNotNull( aite2 )) {
HXLINE( 564)									_hx_tmp2 = hx::IsNotNull( bite2 );
            								}
            								else {
HXLINE( 564)									_hx_tmp2 = false;
            								}
HXDLIN( 564)								if (!(_hx_tmp2)) {
HXLINE( 564)									goto _hx_goto_47;
            								}
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,a2,"a") = aite2->elt;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,b2,"b") = bite2->elt;
HXDLIN( 564)								if (hx::IsEq( a2,b2 )) {
HXLINE( 564)									{
HXLINE( 564)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret14,"ret");
HXDLIN( 564)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)											ret14 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 564)											ret14 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)											::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret14->next;
HXDLIN( 564)											ret14->next = null();
            										}
HXDLIN( 564)										ret14->elt = a2;
HXDLIN( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp10,"temp") = ret14;
HXDLIN( 564)										temp10->next = W2->head;
HXDLIN( 564)										W2->head = temp10;
HXDLIN( 564)										W2->modified = true;
HXDLIN( 564)										W2->length++;
            									}
HXDLIN( 564)									aite2 = aite2->next;
HXDLIN( 564)									bite2 = bite2->next;
            								}
            								else {
HXLINE( 564)									if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a2,b2)) {
HXLINE( 564)										{
HXLINE( 564)											HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret15,"ret");
HXDLIN( 564)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)												ret15 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 564)												ret15 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)												::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret15->next;
HXDLIN( 564)												ret15->next = null();
            											}
HXDLIN( 564)											ret15->elt = a2;
HXDLIN( 564)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp11,"temp") = ret15;
HXDLIN( 564)											temp11->next = U2->head;
HXDLIN( 564)											U2->head = temp11;
HXDLIN( 564)											U2->modified = true;
HXDLIN( 564)											U2->length++;
            										}
HXDLIN( 564)										aite2 = aite2->next;
            									}
            									else {
HXLINE( 564)										{
HXLINE( 564)											HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret16,"ret");
HXDLIN( 564)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)												ret16 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 564)												ret16 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)												::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret16->next;
HXDLIN( 564)												ret16->next = null();
            											}
HXDLIN( 564)											ret16->elt = b2;
HXDLIN( 564)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp12,"temp") = ret16;
HXDLIN( 564)											temp12->next = V2->head;
HXDLIN( 564)											V2->head = temp12;
HXDLIN( 564)											V2->modified = true;
HXDLIN( 564)											V2->length++;
            										}
HXDLIN( 564)										bite2 = bite2->next;
            									}
            								}
            							}
            							_hx_goto_47:;
HXDLIN( 564)							while(hx::IsNotNull( aite2 )){
HXLINE( 564)								{
HXLINE( 564)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret17,"ret");
HXDLIN( 564)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)										ret17 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 564)										ret17 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)										::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret17->next;
HXDLIN( 564)										ret17->next = null();
            									}
HXDLIN( 564)									ret17->elt = aite2->elt;
HXDLIN( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp13,"temp") = ret17;
HXDLIN( 564)									temp13->next = U2->head;
HXDLIN( 564)									U2->head = temp13;
HXDLIN( 564)									U2->modified = true;
HXDLIN( 564)									U2->length++;
            								}
HXDLIN( 564)								aite2 = aite2->next;
            							}
HXDLIN( 564)							while(hx::IsNotNull( bite2 )){
HXLINE( 564)								{
HXLINE( 564)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret18,"ret");
HXDLIN( 564)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)										ret18 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 564)										ret18 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)										::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret18->next;
HXDLIN( 564)										ret18->next = null();
            									}
HXDLIN( 564)									ret18->elt = bite2->elt;
HXDLIN( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp14,"temp") = ret18;
HXDLIN( 564)									temp14->next = V2->head;
HXDLIN( 564)									V2->head = temp14;
HXDLIN( 564)									V2->modified = true;
HXDLIN( 564)									V2->length++;
            								}
HXDLIN( 564)								bite2 = bite2->next;
            							}
HXDLIN( 564)							while(hx::IsNotNull( U2->head )){
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x5,"x") = U2->pop_unsafe();
HXDLIN( 564)								{
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite5,"cx_ite") = B2->head;
HXDLIN( 564)									while(hx::IsNotNull( cx_ite5 )){
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y3,"y") = cx_ite5->elt;
HXDLIN( 564)										{
HXLINE( 565)											x5->validate();
HXLINE( 566)											y3->validate();
HXLINE( 567)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x5,y3,_gthis)) {
HXLINE( 568)												HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret19,"ret");
HXDLIN( 568)												{
HXLINE( 568)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)														ret19 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE( 568)														ret19 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret19->next;
HXDLIN( 568)														ret19->next = null();
            													}
HXDLIN( 568)													ret19->zip_listeners = true;
            												}
HXDLIN( 568)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x5,y3)) {
HXLINE( 568)													ret19->a = x5;
HXDLIN( 568)													ret19->b = y3;
            												}
            												else {
HXLINE( 568)													ret19->a = y3;
HXDLIN( 568)													ret19->b = x5;
            												}
HXDLIN( 568)												set->try_insert(ret19);
            											}
            										}
HXLINE( 564)										cx_ite5 = cx_ite5->next;
            									}
            								}
            							}
HXDLIN( 564)							while(hx::IsNotNull( V2->head )){
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x6,"x") = V2->pop_unsafe();
HXDLIN( 564)								{
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite6,"cx_ite") = W2->head;
HXDLIN( 564)									while(hx::IsNotNull( cx_ite6 )){
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y4,"y") = cx_ite6->elt;
HXDLIN( 564)										{
HXLINE( 565)											x6->validate();
HXLINE( 566)											y4->validate();
HXLINE( 567)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x6,y4,_gthis)) {
HXLINE( 568)												HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret20,"ret");
HXDLIN( 568)												{
HXLINE( 568)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)														ret20 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE( 568)														ret20 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret20->next;
HXDLIN( 568)														ret20->next = null();
            													}
HXDLIN( 568)													ret20->zip_listeners = true;
            												}
HXDLIN( 568)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x6,y4)) {
HXLINE( 568)													ret20->a = x6;
HXDLIN( 568)													ret20->b = y4;
            												}
            												else {
HXLINE( 568)													ret20->a = y4;
HXDLIN( 568)													ret20->b = x6;
            												}
HXDLIN( 568)												set->try_insert(ret20);
            											}
            										}
HXLINE( 564)										cx_ite6 = cx_ite6->next;
            									}
            								}
            							}
HXDLIN( 564)							while(hx::IsNotNull( W2->head )){
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x7,"x") = W2->pop_unsafe();
HXDLIN( 564)								{
HXLINE( 564)									{
HXLINE( 565)										x7->validate();
HXLINE( 566)										x7->validate();
HXLINE( 567)										if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x7,x7,_gthis)) {
HXLINE( 568)											HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret21,"ret");
HXDLIN( 568)											{
HXLINE( 568)												if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)													ret21 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE( 568)													ret21 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)													::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret21->next;
HXDLIN( 568)													ret21->next = null();
            												}
HXDLIN( 568)												ret21->zip_listeners = true;
            											}
HXDLIN( 568)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x7,x7)) {
HXLINE( 568)												ret21->a = x7;
HXDLIN( 568)												ret21->b = x7;
            											}
            											else {
HXLINE( 568)												ret21->a = x7;
HXDLIN( 568)												ret21->b = x7;
            											}
HXDLIN( 568)											set->try_insert(ret21);
            										}
            									}
HXLINE( 564)									{
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite7,"cx_ite") = W2->head;
HXDLIN( 564)										while(hx::IsNotNull( cx_ite7 )){
HXLINE( 564)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y5,"y") = cx_ite7->elt;
HXDLIN( 564)											{
HXLINE( 565)												x7->validate();
HXLINE( 566)												y5->validate();
HXLINE( 567)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x7,y5,_gthis)) {
HXLINE( 568)													HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret22,"ret");
HXDLIN( 568)													{
HXLINE( 568)														if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)															ret22 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE( 568)															ret22 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret22->next;
HXDLIN( 568)															ret22->next = null();
            														}
HXDLIN( 568)														ret22->zip_listeners = true;
            													}
HXDLIN( 568)													if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x7,y5)) {
HXLINE( 568)														ret22->a = x7;
HXDLIN( 568)														ret22->b = y5;
            													}
            													else {
HXLINE( 568)														ret22->a = y5;
HXDLIN( 568)														ret22->b = x7;
            													}
HXDLIN( 568)													set->try_insert(ret22);
            												}
            											}
HXLINE( 564)											cx_ite7 = cx_ite7->next;
            										}
            									}
            								}
            							}
            						}
HXLINE( 563)						cx_ite4 = cx_ite4->next;
            					}
            				}
            			}
HXDLIN( 563)			while(hx::IsNotNull( W->head )){
HXLINE( 563)				HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,x8,"x") = W->pop_unsafe();
HXDLIN( 563)				{
HXLINE( 564)					{
HXLINE( 564)						HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,B3,"B") = x8->cbsets;
HXDLIN( 564)						HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,U3,"U") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::UCbSet;
HXDLIN( 564)						HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,V3,"V") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::VCbSet;
HXDLIN( 564)						HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,W3,"W") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::WCbSet;
HXDLIN( 564)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,aite3,"aite") = x8->cbsets->head;
HXDLIN( 564)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,bite3,"bite") = B3->head;
HXDLIN( 564)						while(true){
HXLINE( 564)							bool _hx_tmp3;
HXDLIN( 564)							if (hx::IsNotNull( aite3 )) {
HXLINE( 564)								_hx_tmp3 = hx::IsNotNull( bite3 );
            							}
            							else {
HXLINE( 564)								_hx_tmp3 = false;
            							}
HXDLIN( 564)							if (!(_hx_tmp3)) {
HXLINE( 564)								goto _hx_goto_57;
            							}
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,a3,"a") = aite3->elt;
HXDLIN( 564)							HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,b3,"b") = bite3->elt;
HXDLIN( 564)							if (hx::IsEq( a3,b3 )) {
HXLINE( 564)								{
HXLINE( 564)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret23,"ret");
HXDLIN( 564)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)										ret23 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 564)										ret23 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)										::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret23->next;
HXDLIN( 564)										ret23->next = null();
            									}
HXDLIN( 564)									ret23->elt = a3;
HXDLIN( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp15,"temp") = ret23;
HXDLIN( 564)									temp15->next = W3->head;
HXDLIN( 564)									W3->head = temp15;
HXDLIN( 564)									W3->modified = true;
HXDLIN( 564)									W3->length++;
            								}
HXDLIN( 564)								aite3 = aite3->next;
HXDLIN( 564)								bite3 = bite3->next;
            							}
            							else {
HXLINE( 564)								if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a3,b3)) {
HXLINE( 564)									{
HXLINE( 564)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret24,"ret");
HXDLIN( 564)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)											ret24 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 564)											ret24 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)											::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret24->next;
HXDLIN( 564)											ret24->next = null();
            										}
HXDLIN( 564)										ret24->elt = a3;
HXDLIN( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp16,"temp") = ret24;
HXDLIN( 564)										temp16->next = U3->head;
HXDLIN( 564)										U3->head = temp16;
HXDLIN( 564)										U3->modified = true;
HXDLIN( 564)										U3->length++;
            									}
HXDLIN( 564)									aite3 = aite3->next;
            								}
            								else {
HXLINE( 564)									{
HXLINE( 564)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret25,"ret");
HXDLIN( 564)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)											ret25 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 564)											ret25 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)											::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret25->next;
HXDLIN( 564)											ret25->next = null();
            										}
HXDLIN( 564)										ret25->elt = b3;
HXDLIN( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp17,"temp") = ret25;
HXDLIN( 564)										temp17->next = V3->head;
HXDLIN( 564)										V3->head = temp17;
HXDLIN( 564)										V3->modified = true;
HXDLIN( 564)										V3->length++;
            									}
HXDLIN( 564)									bite3 = bite3->next;
            								}
            							}
            						}
            						_hx_goto_57:;
HXDLIN( 564)						while(hx::IsNotNull( aite3 )){
HXLINE( 564)							{
HXLINE( 564)								HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret26,"ret");
HXDLIN( 564)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)									ret26 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 564)									ret26 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)									::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret26->next;
HXDLIN( 564)									ret26->next = null();
            								}
HXDLIN( 564)								ret26->elt = aite3->elt;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp18,"temp") = ret26;
HXDLIN( 564)								temp18->next = U3->head;
HXDLIN( 564)								U3->head = temp18;
HXDLIN( 564)								U3->modified = true;
HXDLIN( 564)								U3->length++;
            							}
HXDLIN( 564)							aite3 = aite3->next;
            						}
HXDLIN( 564)						while(hx::IsNotNull( bite3 )){
HXLINE( 564)							{
HXLINE( 564)								HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret27,"ret");
HXDLIN( 564)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)									ret27 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 564)									ret27 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)									::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret27->next;
HXDLIN( 564)									ret27->next = null();
            								}
HXDLIN( 564)								ret27->elt = bite3->elt;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp19,"temp") = ret27;
HXDLIN( 564)								temp19->next = V3->head;
HXDLIN( 564)								V3->head = temp19;
HXDLIN( 564)								V3->modified = true;
HXDLIN( 564)								V3->length++;
            							}
HXDLIN( 564)							bite3 = bite3->next;
            						}
HXDLIN( 564)						while(hx::IsNotNull( U3->head )){
HXLINE( 564)							HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x9,"x") = U3->pop_unsafe();
HXDLIN( 564)							{
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite8,"cx_ite") = B3->head;
HXDLIN( 564)								while(hx::IsNotNull( cx_ite8 )){
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y6,"y") = cx_ite8->elt;
HXDLIN( 564)									{
HXLINE( 565)										x9->validate();
HXLINE( 566)										y6->validate();
HXLINE( 567)										if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x9,y6,_gthis)) {
HXLINE( 568)											HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret28,"ret");
HXDLIN( 568)											{
HXLINE( 568)												if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)													ret28 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE( 568)													ret28 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)													::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret28->next;
HXDLIN( 568)													ret28->next = null();
            												}
HXDLIN( 568)												ret28->zip_listeners = true;
            											}
HXDLIN( 568)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x9,y6)) {
HXLINE( 568)												ret28->a = x9;
HXDLIN( 568)												ret28->b = y6;
            											}
            											else {
HXLINE( 568)												ret28->a = y6;
HXDLIN( 568)												ret28->b = x9;
            											}
HXDLIN( 568)											set->try_insert(ret28);
            										}
            									}
HXLINE( 564)									cx_ite8 = cx_ite8->next;
            								}
            							}
            						}
HXDLIN( 564)						while(hx::IsNotNull( V3->head )){
HXLINE( 564)							HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x10,"x") = V3->pop_unsafe();
HXDLIN( 564)							{
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite9,"cx_ite") = W3->head;
HXDLIN( 564)								while(hx::IsNotNull( cx_ite9 )){
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y7,"y") = cx_ite9->elt;
HXDLIN( 564)									{
HXLINE( 565)										x10->validate();
HXLINE( 566)										y7->validate();
HXLINE( 567)										if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x10,y7,_gthis)) {
HXLINE( 568)											HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret29,"ret");
HXDLIN( 568)											{
HXLINE( 568)												if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)													ret29 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE( 568)													ret29 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)													::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret29->next;
HXDLIN( 568)													ret29->next = null();
            												}
HXDLIN( 568)												ret29->zip_listeners = true;
            											}
HXDLIN( 568)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x10,y7)) {
HXLINE( 568)												ret29->a = x10;
HXDLIN( 568)												ret29->b = y7;
            											}
            											else {
HXLINE( 568)												ret29->a = y7;
HXDLIN( 568)												ret29->b = x10;
            											}
HXDLIN( 568)											set->try_insert(ret29);
            										}
            									}
HXLINE( 564)									cx_ite9 = cx_ite9->next;
            								}
            							}
            						}
HXDLIN( 564)						while(hx::IsNotNull( W3->head )){
HXLINE( 564)							HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x11,"x") = W3->pop_unsafe();
HXDLIN( 564)							{
HXLINE( 564)								{
HXLINE( 565)									x11->validate();
HXLINE( 566)									x11->validate();
HXLINE( 567)									if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x11,x11,_gthis)) {
HXLINE( 568)										HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret30,"ret");
HXDLIN( 568)										{
HXLINE( 568)											if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)												ret30 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 568)												ret30 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)												::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret30->next;
HXDLIN( 568)												ret30->next = null();
            											}
HXDLIN( 568)											ret30->zip_listeners = true;
            										}
HXDLIN( 568)										if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x11,x11)) {
HXLINE( 568)											ret30->a = x11;
HXDLIN( 568)											ret30->b = x11;
            										}
            										else {
HXLINE( 568)											ret30->a = x11;
HXDLIN( 568)											ret30->b = x11;
            										}
HXDLIN( 568)										set->try_insert(ret30);
            									}
            								}
HXLINE( 564)								{
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite10,"cx_ite") = W3->head;
HXDLIN( 564)									while(hx::IsNotNull( cx_ite10 )){
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y8,"y") = cx_ite10->elt;
HXDLIN( 564)										{
HXLINE( 565)											x11->validate();
HXLINE( 566)											y8->validate();
HXLINE( 567)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x11,y8,_gthis)) {
HXLINE( 568)												HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret31,"ret");
HXDLIN( 568)												{
HXLINE( 568)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)														ret31 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE( 568)														ret31 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret31->next;
HXDLIN( 568)														ret31->next = null();
            													}
HXDLIN( 568)													ret31->zip_listeners = true;
            												}
HXDLIN( 568)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x11,y8)) {
HXLINE( 568)													ret31->a = x11;
HXDLIN( 568)													ret31->b = y8;
            												}
            												else {
HXLINE( 568)													ret31->a = y8;
HXDLIN( 568)													ret31->b = x11;
            												}
HXDLIN( 568)												set->try_insert(ret31);
            											}
            										}
HXLINE( 564)										cx_ite10 = cx_ite10->next;
            									}
            								}
            							}
            						}
            					}
HXLINE( 563)					{
HXLINE( 563)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite11,"cx_ite") = W->head;
HXDLIN( 563)						while(hx::IsNotNull( cx_ite11 )){
HXLINE( 564)							{
HXLINE( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,B4,"B") = cx_ite11->elt->cbsets;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,U4,"U") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::UCbSet;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,V4,"V") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::VCbSet;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbSet,W4,"W") = ::zpp_nape::callbacks::ZPP_InteractionListener_obj::WCbSet;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,aite4,"aite") = x8->cbsets->head;
HXDLIN( 564)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,bite4,"bite") = B4->head;
HXDLIN( 564)								while(true){
HXLINE( 564)									bool _hx_tmp4;
HXDLIN( 564)									if (hx::IsNotNull( aite4 )) {
HXLINE( 564)										_hx_tmp4 = hx::IsNotNull( bite4 );
            									}
            									else {
HXLINE( 564)										_hx_tmp4 = false;
            									}
HXDLIN( 564)									if (!(_hx_tmp4)) {
HXLINE( 564)										goto _hx_goto_67;
            									}
HXDLIN( 564)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,a4,"a") = aite4->elt;
HXDLIN( 564)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,b4,"b") = bite4->elt;
HXDLIN( 564)									if (hx::IsEq( a4,b4 )) {
HXLINE( 564)										{
HXLINE( 564)											HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret32,"ret");
HXDLIN( 564)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)												ret32 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 564)												ret32 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)												::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret32->next;
HXDLIN( 564)												ret32->next = null();
            											}
HXDLIN( 564)											ret32->elt = a4;
HXDLIN( 564)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp20,"temp") = ret32;
HXDLIN( 564)											temp20->next = W4->head;
HXDLIN( 564)											W4->head = temp20;
HXDLIN( 564)											W4->modified = true;
HXDLIN( 564)											W4->length++;
            										}
HXDLIN( 564)										aite4 = aite4->next;
HXDLIN( 564)										bite4 = bite4->next;
            									}
            									else {
HXLINE( 564)										if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a4,b4)) {
HXLINE( 564)											{
HXLINE( 564)												HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret33,"ret");
HXDLIN( 564)												if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)													ret33 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE( 564)													ret33 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)													::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret33->next;
HXDLIN( 564)													ret33->next = null();
            												}
HXDLIN( 564)												ret33->elt = a4;
HXDLIN( 564)												HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp21,"temp") = ret33;
HXDLIN( 564)												temp21->next = U4->head;
HXDLIN( 564)												U4->head = temp21;
HXDLIN( 564)												U4->modified = true;
HXDLIN( 564)												U4->length++;
            											}
HXDLIN( 564)											aite4 = aite4->next;
            										}
            										else {
HXLINE( 564)											{
HXLINE( 564)												HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret34,"ret");
HXDLIN( 564)												if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)													ret34 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE( 564)													ret34 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)													::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret34->next;
HXDLIN( 564)													ret34->next = null();
            												}
HXDLIN( 564)												ret34->elt = b4;
HXDLIN( 564)												HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp22,"temp") = ret34;
HXDLIN( 564)												temp22->next = V4->head;
HXDLIN( 564)												V4->head = temp22;
HXDLIN( 564)												V4->modified = true;
HXDLIN( 564)												V4->length++;
            											}
HXDLIN( 564)											bite4 = bite4->next;
            										}
            									}
            								}
            								_hx_goto_67:;
HXDLIN( 564)								while(hx::IsNotNull( aite4 )){
HXLINE( 564)									{
HXLINE( 564)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret35,"ret");
HXDLIN( 564)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)											ret35 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 564)											ret35 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)											::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret35->next;
HXDLIN( 564)											ret35->next = null();
            										}
HXDLIN( 564)										ret35->elt = aite4->elt;
HXDLIN( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp23,"temp") = ret35;
HXDLIN( 564)										temp23->next = U4->head;
HXDLIN( 564)										U4->head = temp23;
HXDLIN( 564)										U4->modified = true;
HXDLIN( 564)										U4->length++;
            									}
HXDLIN( 564)									aite4 = aite4->next;
            								}
HXDLIN( 564)								while(hx::IsNotNull( bite4 )){
HXLINE( 564)									{
HXLINE( 564)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,ret36,"ret");
HXDLIN( 564)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )) {
HXLINE( 564)											ret36 =  ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 564)											ret36 = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool;
HXDLIN( 564)											::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = ret36->next;
HXDLIN( 564)											ret36->next = null();
            										}
HXDLIN( 564)										ret36->elt = bite4->elt;
HXDLIN( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,temp24,"temp") = ret36;
HXDLIN( 564)										temp24->next = V4->head;
HXDLIN( 564)										V4->head = temp24;
HXDLIN( 564)										V4->modified = true;
HXDLIN( 564)										V4->length++;
            									}
HXDLIN( 564)									bite4 = bite4->next;
            								}
HXDLIN( 564)								while(hx::IsNotNull( U4->head )){
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x12,"x") = U4->pop_unsafe();
HXDLIN( 564)									{
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite12,"cx_ite") = B4->head;
HXDLIN( 564)										while(hx::IsNotNull( cx_ite12 )){
HXLINE( 564)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y9,"y") = cx_ite12->elt;
HXDLIN( 564)											{
HXLINE( 565)												x12->validate();
HXLINE( 566)												y9->validate();
HXLINE( 567)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x12,y9,_gthis)) {
HXLINE( 568)													HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret37,"ret");
HXDLIN( 568)													{
HXLINE( 568)														if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)															ret37 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE( 568)															ret37 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret37->next;
HXDLIN( 568)															ret37->next = null();
            														}
HXDLIN( 568)														ret37->zip_listeners = true;
            													}
HXDLIN( 568)													if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x12,y9)) {
HXLINE( 568)														ret37->a = x12;
HXDLIN( 568)														ret37->b = y9;
            													}
            													else {
HXLINE( 568)														ret37->a = y9;
HXDLIN( 568)														ret37->b = x12;
            													}
HXDLIN( 568)													set->try_insert(ret37);
            												}
            											}
HXLINE( 564)											cx_ite12 = cx_ite12->next;
            										}
            									}
            								}
HXDLIN( 564)								while(hx::IsNotNull( V4->head )){
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x13,"x") = V4->pop_unsafe();
HXDLIN( 564)									{
HXLINE( 564)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite13,"cx_ite") = W4->head;
HXDLIN( 564)										while(hx::IsNotNull( cx_ite13 )){
HXLINE( 564)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y10,"y") = cx_ite13->elt;
HXDLIN( 564)											{
HXLINE( 565)												x13->validate();
HXLINE( 566)												y10->validate();
HXLINE( 567)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x13,y10,_gthis)) {
HXLINE( 568)													HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret38,"ret");
HXDLIN( 568)													{
HXLINE( 568)														if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)															ret38 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE( 568)															ret38 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)															::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret38->next;
HXDLIN( 568)															ret38->next = null();
            														}
HXDLIN( 568)														ret38->zip_listeners = true;
            													}
HXDLIN( 568)													if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x13,y10)) {
HXLINE( 568)														ret38->a = x13;
HXDLIN( 568)														ret38->b = y10;
            													}
            													else {
HXLINE( 568)														ret38->a = y10;
HXDLIN( 568)														ret38->b = x13;
            													}
HXDLIN( 568)													set->try_insert(ret38);
            												}
            											}
HXLINE( 564)											cx_ite13 = cx_ite13->next;
            										}
            									}
            								}
HXDLIN( 564)								while(hx::IsNotNull( W4->head )){
HXLINE( 564)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,x14,"x") = W4->pop_unsafe();
HXDLIN( 564)									{
HXLINE( 564)										{
HXLINE( 565)											x14->validate();
HXLINE( 566)											x14->validate();
HXLINE( 567)											if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x14,x14,_gthis)) {
HXLINE( 568)												HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret39,"ret");
HXDLIN( 568)												{
HXLINE( 568)													if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)														ret39 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            													}
            													else {
HXLINE( 568)														ret39 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)														::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret39->next;
HXDLIN( 568)														ret39->next = null();
            													}
HXDLIN( 568)													ret39->zip_listeners = true;
            												}
HXDLIN( 568)												if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x14,x14)) {
HXLINE( 568)													ret39->a = x14;
HXDLIN( 568)													ret39->b = x14;
            												}
            												else {
HXLINE( 568)													ret39->a = x14;
HXDLIN( 568)													ret39->b = x14;
            												}
HXDLIN( 568)												set->try_insert(ret39);
            											}
            										}
HXLINE( 564)										{
HXLINE( 564)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite14,"cx_ite") = W4->head;
HXDLIN( 564)											while(hx::IsNotNull( cx_ite14 )){
HXLINE( 564)												HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,y11,"y") = cx_ite14->elt;
HXDLIN( 564)												{
HXLINE( 565)													x14->validate();
HXLINE( 566)													y11->validate();
HXLINE( 567)													if (::zpp_nape::callbacks::ZPP_CbSet_obj::single_intersection(x14,y11,_gthis)) {
HXLINE( 568)														HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret40,"ret");
HXDLIN( 568)														{
HXLINE( 568)															if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE( 568)																ret40 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE( 568)																ret40 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 568)																::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret40->next;
HXDLIN( 568)																ret40->next = null();
            															}
HXDLIN( 568)															ret40->zip_listeners = true;
            														}
HXDLIN( 568)														if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(x14,y11)) {
HXLINE( 568)															ret40->a = x14;
HXDLIN( 568)															ret40->b = y11;
            														}
            														else {
HXLINE( 568)															ret40->a = y11;
HXDLIN( 568)															ret40->b = x14;
            														}
HXDLIN( 568)														set->try_insert(ret40);
            													}
            												}
HXLINE( 564)												cx_ite14 = cx_ite14->next;
            											}
            										}
            									}
            								}
            							}
HXLINE( 563)							cx_ite11 = cx_ite11->next;
            						}
            					}
            				}
            			}
            		}
HXLINE( 572)		if (hx::IsNotNull( set->parent )) {
HXLINE( 572)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,cur) = set->parent;
HXDLIN( 572)			while(hx::IsNotNull( cur )){
HXLINE( 572)				if (hx::IsNotNull( cur->prev )) {
HXLINE( 572)					cur = cur->prev;
            				}
            				else {
HXLINE( 572)					if (hx::IsNotNull( cur->next )) {
HXLINE( 572)						cur = cur->next;
            					}
            					else {
HXLINE( 572)						{
HXLINE( 572)							HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,pair) = cur->data;
HXLINE( 573)							if (fresh) {
HXLINE( 573)								_gthis->space->freshListenerType(pair->a,pair->b);
            							}
            							else {
HXLINE( 574)								_gthis->space->nullListenerType(pair->a,pair->b);
            							}
HXLINE( 575)							{
HXLINE( 585)								{
HXLINE( 585)									pair->a = (pair->b = null());
HXDLIN( 585)									pair->listeners->clear();
            								}
HXLINE( 586)								pair->next = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXLINE( 587)								::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = pair;
            							}
            						}
HXLINE( 572)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,ret41,"ret") = cur->parent;
HXDLIN( 572)						if (hx::IsNotNull( ret41 )) {
HXLINE( 572)							if (hx::IsEq( cur,ret41->prev )) {
HXLINE( 572)								ret41->prev = null();
            							}
            							else {
HXLINE( 572)								ret41->next = null();
            							}
HXDLIN( 572)							cur->parent = null();
            						}
HXDLIN( 572)						{
HXLINE( 572)							HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,o) = cur;
HXDLIN( 572)							{
HXLINE( 572)								o->data = null();
HXDLIN( 572)								o->lt = null();
HXDLIN( 572)								o->swapped = null();
            							}
HXDLIN( 572)							o->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXDLIN( 572)							::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = o;
            						}
HXDLIN( 572)						cur = ret41;
            					}
            				}
            			}
HXDLIN( 572)			set->parent = null();
            		}
HXLINE( 593)		{
HXLINE( 594)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,o1,"o") = set;
HXLINE( 603)			{
HXLINE( 603)				o1->data = null();
HXDLIN( 603)				o1->lt = null();
HXDLIN( 603)				o1->swapped = null();
            			}
HXLINE( 604)			o1->next = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool;
HXLINE( 605)			::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = o1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionListener_obj,with_uniquesets,(void))

void ZPP_InteractionListener_obj::with_union( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_613_with_union)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 614)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite1) = this->options1->includes->head;
HXLINE( 615)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite2) = this->options2->includes->head;
HXLINE( 616)		while(true){
HXLINE( 616)			bool _hx_tmp;
HXDLIN( 616)			if (hx::IsNotNull( ite1 )) {
HXLINE( 616)				_hx_tmp = hx::IsNotNull( ite2 );
            			}
            			else {
HXLINE( 616)				_hx_tmp = false;
            			}
HXDLIN( 616)			if (!(_hx_tmp)) {
HXLINE( 616)				goto _hx_goto_78;
            			}
HXLINE( 617)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb1) = ite1->elt;
HXLINE( 618)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb2) = ite2->elt;
HXLINE( 619)			if (hx::IsEq( cb1,cb2 )) {
HXLINE( 620)				lambda(cb1);
HXLINE( 621)				ite1 = ite1->next;
HXLINE( 622)				ite2 = ite2->next;
            			}
            			else {
HXLINE( 624)				if ((cb1->id < cb2->id)) {
HXLINE( 625)					lambda(cb1);
HXLINE( 626)					ite1 = ite1->next;
            				}
            				else {
HXLINE( 629)					lambda(cb2);
HXLINE( 630)					ite2 = ite2->next;
            				}
            			}
            		}
            		_hx_goto_78:;
HXLINE( 633)		while(hx::IsNotNull( ite1 )){
HXLINE( 634)			lambda(ite1->elt);
HXLINE( 635)			ite1 = ite1->next;
            		}
HXLINE( 637)		while(hx::IsNotNull( ite2 )){
HXLINE( 638)			lambda(ite2->elt);
HXLINE( 639)			ite2 = ite2->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_InteractionListener_obj,with_union,(void))

void ZPP_InteractionListener_obj::addedToSpace(){
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_642_addedToSpace)
            	HX_STACK_THIS(this)
HXLINE( 642)		HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 643)		HX_VARI( bool,pre) = (this->type == (int)3);
HXLINE( 644)		{
HXLINE( 644)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite1) = this->options1->includes->head;
HXDLIN( 644)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite2) = this->options2->includes->head;
HXDLIN( 644)			while(true){
HXLINE( 644)				bool _hx_tmp;
HXDLIN( 644)				if (hx::IsNotNull( ite1 )) {
HXLINE( 644)					_hx_tmp = hx::IsNotNull( ite2 );
            				}
            				else {
HXLINE( 644)					_hx_tmp = false;
            				}
HXDLIN( 644)				if (!(_hx_tmp)) {
HXLINE( 644)					goto _hx_goto_82;
            				}
HXDLIN( 644)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb1) = ite1->elt;
HXDLIN( 644)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb2) = ite2->elt;
HXDLIN( 644)				if (hx::IsEq( cb1,cb2 )) {
HXLINE( 644)					{
HXLINE( 645)						{
HXLINE( 645)							{
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre1,"pre") = null();
HXDLIN( 645)								{
HXLINE( 645)									HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite) = cb1->listeners->head;
HXDLIN( 645)									while(hx::IsNotNull( cx_ite )){
HXLINE( 645)										HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,j) = cx_ite->elt;
HXDLIN( 645)										{
HXLINE( 645)											bool _hx_tmp1;
HXDLIN( 645)											if ((_gthis->precedence <= j->precedence)) {
HXLINE( 645)												if ((_gthis->precedence == j->precedence)) {
HXLINE( 645)													_hx_tmp1 = (_gthis->id > j->id);
            												}
            												else {
HXLINE( 645)													_hx_tmp1 = false;
            												}
            											}
            											else {
HXLINE( 645)												_hx_tmp1 = true;
            											}
HXDLIN( 645)											if (_hx_tmp1) {
HXLINE( 645)												goto _hx_goto_83;
            											}
HXDLIN( 645)											pre1 = cx_ite;
            										}
HXDLIN( 645)										cx_ite = cx_ite->next;
            									}
            									_hx_goto_83:;
            								}
HXDLIN( 645)								{
HXLINE( 645)									HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this) = cb1->listeners;
HXDLIN( 645)									HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret);
HXDLIN( 645)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 645)										ret =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 645)										ret = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 645)										::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret->next;
HXDLIN( 645)										ret->next = null();
            									}
HXDLIN( 645)									ret->elt = _gthis;
HXDLIN( 645)									HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp) = ret;
HXDLIN( 645)									if (hx::IsNull( pre1 )) {
HXLINE( 645)										temp->next = _this->head;
HXDLIN( 645)										_this->head = temp;
            									}
            									else {
HXLINE( 645)										temp->next = pre1->next;
HXDLIN( 645)										pre1->next = temp;
            									}
HXDLIN( 645)									_this->pushmod = (_this->modified = true);
HXDLIN( 645)									_this->length++;
            								}
            							}
HXDLIN( 645)							{
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite1,"cx_ite") = cb1->cbsets->head;
HXDLIN( 645)								while(hx::IsNotNull( cx_ite1 )){
HXLINE( 645)									HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,cb) = cx_ite1->elt;
HXDLIN( 645)									{
HXLINE( 645)										cb->zip_listeners = true;
HXDLIN( 645)										cb->invalidate_pairs();
            									}
HXDLIN( 645)									cx_ite1 = cx_ite1->next;
            								}
            							}
            						}
HXLINE( 646)						if (pre) {
HXLINE( 648)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite2,"cx_ite") = cb1->interactors->head;
HXLINE( 649)							while(hx::IsNotNull( cx_ite2 )){
HXLINE( 651)								cx_ite2->elt->wake();
HXLINE( 652)								cx_ite2 = cx_ite2->next;
            							}
            						}
            					}
HXLINE( 644)					ite1 = ite1->next;
HXDLIN( 644)					ite2 = ite2->next;
            				}
            				else {
HXLINE( 644)					if ((cb1->id < cb2->id)) {
HXLINE( 644)						{
HXLINE( 645)							{
HXLINE( 645)								{
HXLINE( 645)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre2,"pre") = null();
HXDLIN( 645)									{
HXLINE( 645)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite3,"cx_ite") = cb1->listeners->head;
HXDLIN( 645)										while(hx::IsNotNull( cx_ite3 )){
HXLINE( 645)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j1,"j") = cx_ite3->elt;
HXDLIN( 645)											{
HXLINE( 645)												bool _hx_tmp2;
HXDLIN( 645)												if ((_gthis->precedence <= j1->precedence)) {
HXLINE( 645)													if ((_gthis->precedence == j1->precedence)) {
HXLINE( 645)														_hx_tmp2 = (_gthis->id > j1->id);
            													}
            													else {
HXLINE( 645)														_hx_tmp2 = false;
            													}
            												}
            												else {
HXLINE( 645)													_hx_tmp2 = true;
            												}
HXDLIN( 645)												if (_hx_tmp2) {
HXLINE( 645)													goto _hx_goto_86;
            												}
HXDLIN( 645)												pre2 = cx_ite3;
            											}
HXDLIN( 645)											cx_ite3 = cx_ite3->next;
            										}
            										_hx_goto_86:;
            									}
HXDLIN( 645)									{
HXLINE( 645)										HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this1,"_this") = cb1->listeners;
HXDLIN( 645)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret1,"ret");
HXDLIN( 645)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 645)											ret1 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 645)											ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 645)											::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
HXDLIN( 645)											ret1->next = null();
            										}
HXDLIN( 645)										ret1->elt = _gthis;
HXDLIN( 645)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp1,"temp") = ret1;
HXDLIN( 645)										if (hx::IsNull( pre2 )) {
HXLINE( 645)											temp1->next = _this1->head;
HXDLIN( 645)											_this1->head = temp1;
            										}
            										else {
HXLINE( 645)											temp1->next = pre2->next;
HXDLIN( 645)											pre2->next = temp1;
            										}
HXDLIN( 645)										_this1->pushmod = (_this1->modified = true);
HXDLIN( 645)										_this1->length++;
            									}
            								}
HXDLIN( 645)								{
HXLINE( 645)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite4,"cx_ite") = cb1->cbsets->head;
HXDLIN( 645)									while(hx::IsNotNull( cx_ite4 )){
HXLINE( 645)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb3,"cb") = cx_ite4->elt;
HXDLIN( 645)										{
HXLINE( 645)											cb3->zip_listeners = true;
HXDLIN( 645)											cb3->invalidate_pairs();
            										}
HXDLIN( 645)										cx_ite4 = cx_ite4->next;
            									}
            								}
            							}
HXLINE( 646)							if (pre) {
HXLINE( 648)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite5,"cx_ite") = cb1->interactors->head;
HXLINE( 649)								while(hx::IsNotNull( cx_ite5 )){
HXLINE( 651)									cx_ite5->elt->wake();
HXLINE( 652)									cx_ite5 = cx_ite5->next;
            								}
            							}
            						}
HXLINE( 644)						ite1 = ite1->next;
            					}
            					else {
HXLINE( 644)						{
HXLINE( 645)							{
HXLINE( 645)								{
HXLINE( 645)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre3,"pre") = null();
HXDLIN( 645)									{
HXLINE( 645)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite6,"cx_ite") = cb2->listeners->head;
HXDLIN( 645)										while(hx::IsNotNull( cx_ite6 )){
HXLINE( 645)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j2,"j") = cx_ite6->elt;
HXDLIN( 645)											{
HXLINE( 645)												bool _hx_tmp3;
HXDLIN( 645)												if ((_gthis->precedence <= j2->precedence)) {
HXLINE( 645)													if ((_gthis->precedence == j2->precedence)) {
HXLINE( 645)														_hx_tmp3 = (_gthis->id > j2->id);
            													}
            													else {
HXLINE( 645)														_hx_tmp3 = false;
            													}
            												}
            												else {
HXLINE( 645)													_hx_tmp3 = true;
            												}
HXDLIN( 645)												if (_hx_tmp3) {
HXLINE( 645)													goto _hx_goto_89;
            												}
HXDLIN( 645)												pre3 = cx_ite6;
            											}
HXDLIN( 645)											cx_ite6 = cx_ite6->next;
            										}
            										_hx_goto_89:;
            									}
HXDLIN( 645)									{
HXLINE( 645)										HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this2,"_this") = cb2->listeners;
HXDLIN( 645)										HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret2,"ret");
HXDLIN( 645)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 645)											ret2 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 645)											ret2 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 645)											::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret2->next;
HXDLIN( 645)											ret2->next = null();
            										}
HXDLIN( 645)										ret2->elt = _gthis;
HXDLIN( 645)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp2,"temp") = ret2;
HXDLIN( 645)										if (hx::IsNull( pre3 )) {
HXLINE( 645)											temp2->next = _this2->head;
HXDLIN( 645)											_this2->head = temp2;
            										}
            										else {
HXLINE( 645)											temp2->next = pre3->next;
HXDLIN( 645)											pre3->next = temp2;
            										}
HXDLIN( 645)										_this2->pushmod = (_this2->modified = true);
HXDLIN( 645)										_this2->length++;
            									}
            								}
HXDLIN( 645)								{
HXLINE( 645)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite7,"cx_ite") = cb2->cbsets->head;
HXDLIN( 645)									while(hx::IsNotNull( cx_ite7 )){
HXLINE( 645)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb4,"cb") = cx_ite7->elt;
HXDLIN( 645)										{
HXLINE( 645)											cb4->zip_listeners = true;
HXDLIN( 645)											cb4->invalidate_pairs();
            										}
HXDLIN( 645)										cx_ite7 = cx_ite7->next;
            									}
            								}
            							}
HXLINE( 646)							if (pre) {
HXLINE( 648)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite8,"cx_ite") = cb2->interactors->head;
HXLINE( 649)								while(hx::IsNotNull( cx_ite8 )){
HXLINE( 651)									cx_ite8->elt->wake();
HXLINE( 652)									cx_ite8 = cx_ite8->next;
            								}
            							}
            						}
HXLINE( 644)						ite2 = ite2->next;
            					}
            				}
            			}
            			_hx_goto_82:;
HXDLIN( 644)			while(hx::IsNotNull( ite1 )){
HXLINE( 644)				{
HXLINE( 644)					HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,cb5,"cb") = ite1->elt;
HXLINE( 645)					{
HXLINE( 645)						{
HXLINE( 645)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre4,"pre") = null();
HXDLIN( 645)							{
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite9,"cx_ite") = cb5->listeners->head;
HXDLIN( 645)								while(hx::IsNotNull( cx_ite9 )){
HXLINE( 645)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j3,"j") = cx_ite9->elt;
HXDLIN( 645)									{
HXLINE( 645)										bool _hx_tmp4;
HXDLIN( 645)										if ((_gthis->precedence <= j3->precedence)) {
HXLINE( 645)											if ((_gthis->precedence == j3->precedence)) {
HXLINE( 645)												_hx_tmp4 = (_gthis->id > j3->id);
            											}
            											else {
HXLINE( 645)												_hx_tmp4 = false;
            											}
            										}
            										else {
HXLINE( 645)											_hx_tmp4 = true;
            										}
HXDLIN( 645)										if (_hx_tmp4) {
HXLINE( 645)											goto _hx_goto_93;
            										}
HXDLIN( 645)										pre4 = cx_ite9;
            									}
HXDLIN( 645)									cx_ite9 = cx_ite9->next;
            								}
            								_hx_goto_93:;
            							}
HXDLIN( 645)							{
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this3,"_this") = cb5->listeners;
HXDLIN( 645)								HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret3,"ret");
HXDLIN( 645)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 645)									ret3 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 645)									ret3 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 645)									::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret3->next;
HXDLIN( 645)									ret3->next = null();
            								}
HXDLIN( 645)								ret3->elt = _gthis;
HXDLIN( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp3,"temp") = ret3;
HXDLIN( 645)								if (hx::IsNull( pre4 )) {
HXLINE( 645)									temp3->next = _this3->head;
HXDLIN( 645)									_this3->head = temp3;
            								}
            								else {
HXLINE( 645)									temp3->next = pre4->next;
HXDLIN( 645)									pre4->next = temp3;
            								}
HXDLIN( 645)								_this3->pushmod = (_this3->modified = true);
HXDLIN( 645)								_this3->length++;
            							}
            						}
HXDLIN( 645)						{
HXLINE( 645)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite10,"cx_ite") = cb5->cbsets->head;
HXDLIN( 645)							while(hx::IsNotNull( cx_ite10 )){
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb6,"cb") = cx_ite10->elt;
HXDLIN( 645)								{
HXLINE( 645)									cb6->zip_listeners = true;
HXDLIN( 645)									cb6->invalidate_pairs();
            								}
HXDLIN( 645)								cx_ite10 = cx_ite10->next;
            							}
            						}
            					}
HXLINE( 646)					if (pre) {
HXLINE( 648)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite11,"cx_ite") = cb5->interactors->head;
HXLINE( 649)						while(hx::IsNotNull( cx_ite11 )){
HXLINE( 651)							cx_ite11->elt->wake();
HXLINE( 652)							cx_ite11 = cx_ite11->next;
            						}
            					}
            				}
HXLINE( 644)				ite1 = ite1->next;
            			}
HXDLIN( 644)			while(hx::IsNotNull( ite2 )){
HXLINE( 644)				{
HXLINE( 644)					HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,cb7,"cb") = ite2->elt;
HXLINE( 645)					{
HXLINE( 645)						{
HXLINE( 645)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre5,"pre") = null();
HXDLIN( 645)							{
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite12,"cx_ite") = cb7->listeners->head;
HXDLIN( 645)								while(hx::IsNotNull( cx_ite12 )){
HXLINE( 645)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j4,"j") = cx_ite12->elt;
HXDLIN( 645)									{
HXLINE( 645)										bool _hx_tmp5;
HXDLIN( 645)										if ((_gthis->precedence <= j4->precedence)) {
HXLINE( 645)											if ((_gthis->precedence == j4->precedence)) {
HXLINE( 645)												_hx_tmp5 = (_gthis->id > j4->id);
            											}
            											else {
HXLINE( 645)												_hx_tmp5 = false;
            											}
            										}
            										else {
HXLINE( 645)											_hx_tmp5 = true;
            										}
HXDLIN( 645)										if (_hx_tmp5) {
HXLINE( 645)											goto _hx_goto_97;
            										}
HXDLIN( 645)										pre5 = cx_ite12;
            									}
HXDLIN( 645)									cx_ite12 = cx_ite12->next;
            								}
            								_hx_goto_97:;
            							}
HXDLIN( 645)							{
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this4,"_this") = cb7->listeners;
HXDLIN( 645)								HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret4,"ret");
HXDLIN( 645)								if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 645)									ret4 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 645)									ret4 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 645)									::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret4->next;
HXDLIN( 645)									ret4->next = null();
            								}
HXDLIN( 645)								ret4->elt = _gthis;
HXDLIN( 645)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp4,"temp") = ret4;
HXDLIN( 645)								if (hx::IsNull( pre5 )) {
HXLINE( 645)									temp4->next = _this4->head;
HXDLIN( 645)									_this4->head = temp4;
            								}
            								else {
HXLINE( 645)									temp4->next = pre5->next;
HXDLIN( 645)									pre5->next = temp4;
            								}
HXDLIN( 645)								_this4->pushmod = (_this4->modified = true);
HXDLIN( 645)								_this4->length++;
            							}
            						}
HXDLIN( 645)						{
HXLINE( 645)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite13,"cx_ite") = cb7->cbsets->head;
HXDLIN( 645)							while(hx::IsNotNull( cx_ite13 )){
HXLINE( 645)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb8,"cb") = cx_ite13->elt;
HXDLIN( 645)								{
HXLINE( 645)									cb8->zip_listeners = true;
HXDLIN( 645)									cb8->invalidate_pairs();
            								}
HXDLIN( 645)								cx_ite13 = cx_ite13->next;
            							}
            						}
            					}
HXLINE( 646)					if (pre) {
HXLINE( 648)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite14,"cx_ite") = cb7->interactors->head;
HXLINE( 649)						while(hx::IsNotNull( cx_ite14 )){
HXLINE( 651)							cx_ite14->elt->wake();
HXLINE( 652)							cx_ite14 = cx_ite14->next;
            						}
            					}
            				}
HXLINE( 644)				ite2 = ite2->next;
            			}
            		}
HXLINE( 657)		this->options1->handler = this->cbtype_change1_dyn();
HXLINE( 658)		this->options2->handler = this->cbtype_change2_dyn();
HXLINE( 659)		this->with_uniquesets(true);
            	}


void ZPP_InteractionListener_obj::removedFromSpace(){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_661_removedFromSpace)
            	HX_STACK_THIS(this)
HXLINE( 661)		HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 662)		this->with_uniquesets(false);
HXLINE( 663)		HX_VARI( bool,pre) = (this->type == (int)3);
HXLINE( 664)		{
HXLINE( 664)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite1) = this->options1->includes->head;
HXDLIN( 664)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite2) = this->options2->includes->head;
HXDLIN( 664)			while(true){
HXLINE( 664)				bool _hx_tmp;
HXDLIN( 664)				if (hx::IsNotNull( ite1 )) {
HXLINE( 664)					_hx_tmp = hx::IsNotNull( ite2 );
            				}
            				else {
HXLINE( 664)					_hx_tmp = false;
            				}
HXDLIN( 664)				if (!(_hx_tmp)) {
HXLINE( 664)					goto _hx_goto_101;
            				}
HXDLIN( 664)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb1) = ite1->elt;
HXDLIN( 664)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb2) = ite2->elt;
HXDLIN( 664)				if (hx::IsEq( cb1,cb2 )) {
HXLINE( 664)					{
HXLINE( 665)						{
HXLINE( 665)							cb1->listeners->remove(_gthis);
HXDLIN( 665)							{
HXLINE( 665)								HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = cb1->cbsets->head;
HXDLIN( 665)								while(hx::IsNotNull( cx_ite )){
HXLINE( 665)									HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,cb) = cx_ite->elt;
HXDLIN( 665)									{
HXLINE( 665)										cb->zip_listeners = true;
HXDLIN( 665)										cb->invalidate_pairs();
            									}
HXDLIN( 665)									cx_ite = cx_ite->next;
            								}
            							}
            						}
HXLINE( 666)						if (pre) {
HXLINE( 668)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite1,"cx_ite") = cb1->interactors->head;
HXLINE( 669)							while(hx::IsNotNull( cx_ite1 )){
HXLINE( 671)								cx_ite1->elt->wake();
HXLINE( 672)								cx_ite1 = cx_ite1->next;
            							}
            						}
            					}
HXLINE( 664)					ite1 = ite1->next;
HXDLIN( 664)					ite2 = ite2->next;
            				}
            				else {
HXLINE( 664)					if ((cb1->id < cb2->id)) {
HXLINE( 664)						{
HXLINE( 665)							{
HXLINE( 665)								cb1->listeners->remove(_gthis);
HXDLIN( 665)								{
HXLINE( 665)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite2,"cx_ite") = cb1->cbsets->head;
HXDLIN( 665)									while(hx::IsNotNull( cx_ite2 )){
HXLINE( 665)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb3,"cb") = cx_ite2->elt;
HXDLIN( 665)										{
HXLINE( 665)											cb3->zip_listeners = true;
HXDLIN( 665)											cb3->invalidate_pairs();
            										}
HXDLIN( 665)										cx_ite2 = cx_ite2->next;
            									}
            								}
            							}
HXLINE( 666)							if (pre) {
HXLINE( 668)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite3,"cx_ite") = cb1->interactors->head;
HXLINE( 669)								while(hx::IsNotNull( cx_ite3 )){
HXLINE( 671)									cx_ite3->elt->wake();
HXLINE( 672)									cx_ite3 = cx_ite3->next;
            								}
            							}
            						}
HXLINE( 664)						ite1 = ite1->next;
            					}
            					else {
HXLINE( 664)						{
HXLINE( 665)							{
HXLINE( 665)								cb2->listeners->remove(_gthis);
HXDLIN( 665)								{
HXLINE( 665)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite4,"cx_ite") = cb2->cbsets->head;
HXDLIN( 665)									while(hx::IsNotNull( cx_ite4 )){
HXLINE( 665)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb4,"cb") = cx_ite4->elt;
HXDLIN( 665)										{
HXLINE( 665)											cb4->zip_listeners = true;
HXDLIN( 665)											cb4->invalidate_pairs();
            										}
HXDLIN( 665)										cx_ite4 = cx_ite4->next;
            									}
            								}
            							}
HXLINE( 666)							if (pre) {
HXLINE( 668)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite5,"cx_ite") = cb2->interactors->head;
HXLINE( 669)								while(hx::IsNotNull( cx_ite5 )){
HXLINE( 671)									cx_ite5->elt->wake();
HXLINE( 672)									cx_ite5 = cx_ite5->next;
            								}
            							}
            						}
HXLINE( 664)						ite2 = ite2->next;
            					}
            				}
            			}
            			_hx_goto_101:;
HXDLIN( 664)			while(hx::IsNotNull( ite1 )){
HXLINE( 664)				{
HXLINE( 664)					HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,cb5,"cb") = ite1->elt;
HXLINE( 665)					{
HXLINE( 665)						cb5->listeners->remove(_gthis);
HXDLIN( 665)						{
HXLINE( 665)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite6,"cx_ite") = cb5->cbsets->head;
HXDLIN( 665)							while(hx::IsNotNull( cx_ite6 )){
HXLINE( 665)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb6,"cb") = cx_ite6->elt;
HXDLIN( 665)								{
HXLINE( 665)									cb6->zip_listeners = true;
HXDLIN( 665)									cb6->invalidate_pairs();
            								}
HXDLIN( 665)								cx_ite6 = cx_ite6->next;
            							}
            						}
            					}
HXLINE( 666)					if (pre) {
HXLINE( 668)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite7,"cx_ite") = cb5->interactors->head;
HXLINE( 669)						while(hx::IsNotNull( cx_ite7 )){
HXLINE( 671)							cx_ite7->elt->wake();
HXLINE( 672)							cx_ite7 = cx_ite7->next;
            						}
            					}
            				}
HXLINE( 664)				ite1 = ite1->next;
            			}
HXDLIN( 664)			while(hx::IsNotNull( ite2 )){
HXLINE( 664)				{
HXLINE( 664)					HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,cb7,"cb") = ite2->elt;
HXLINE( 665)					{
HXLINE( 665)						cb7->listeners->remove(_gthis);
HXDLIN( 665)						{
HXLINE( 665)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite8,"cx_ite") = cb7->cbsets->head;
HXDLIN( 665)							while(hx::IsNotNull( cx_ite8 )){
HXLINE( 665)								HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb8,"cb") = cx_ite8->elt;
HXDLIN( 665)								{
HXLINE( 665)									cb8->zip_listeners = true;
HXDLIN( 665)									cb8->invalidate_pairs();
            								}
HXDLIN( 665)								cx_ite8 = cx_ite8->next;
            							}
            						}
            					}
HXLINE( 666)					if (pre) {
HXLINE( 668)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite9,"cx_ite") = cb7->interactors->head;
HXLINE( 669)						while(hx::IsNotNull( cx_ite9 )){
HXLINE( 671)							cx_ite9->elt->wake();
HXLINE( 672)							cx_ite9 = cx_ite9->next;
            						}
            					}
            				}
HXLINE( 664)				ite2 = ite2->next;
            			}
            		}
HXLINE( 677)		this->options1->handler = null();
HXLINE( 678)		this->options2->handler = null();
            	}


void ZPP_InteractionListener_obj::invalidate_precedence(){
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_680_invalidate_precedence)
            	HX_STACK_THIS(this)
HXLINE( 680)		HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 681)		if (hx::IsNotNull( this->space )) {
HXLINE( 682)			HX_VARI( bool,pre) = (this->type == (int)3);
HXLINE( 683)			{
HXLINE( 683)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite1) = this->options1->includes->head;
HXDLIN( 683)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ite2) = this->options2->includes->head;
HXDLIN( 683)				while(true){
HXLINE( 683)					bool _hx_tmp;
HXDLIN( 683)					if (hx::IsNotNull( ite1 )) {
HXLINE( 683)						_hx_tmp = hx::IsNotNull( ite2 );
            					}
            					else {
HXLINE( 683)						_hx_tmp = false;
            					}
HXDLIN( 683)					if (!(_hx_tmp)) {
HXLINE( 683)						goto _hx_goto_115;
            					}
HXDLIN( 683)					HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb1) = ite1->elt;
HXDLIN( 683)					HX_VARI(  ::zpp_nape::callbacks::ZPP_CbType,cb2) = ite2->elt;
HXDLIN( 683)					if (hx::IsEq( cb1,cb2 )) {
HXLINE( 683)						{
HXLINE( 684)							{
HXLINE( 684)								cb1->listeners->remove(_gthis);
HXDLIN( 684)								{
HXLINE( 684)									HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite) = cb1->cbsets->head;
HXDLIN( 684)									while(hx::IsNotNull( cx_ite )){
HXLINE( 684)										HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,cb) = cx_ite->elt;
HXDLIN( 684)										{
HXLINE( 684)											cb->zip_listeners = true;
HXDLIN( 684)											cb->invalidate_pairs();
            										}
HXDLIN( 684)										cx_ite = cx_ite->next;
            									}
            								}
            							}
HXLINE( 685)							{
HXLINE( 685)								{
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre1,"pre") = null();
HXDLIN( 685)									{
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite1,"cx_ite") = cb1->listeners->head;
HXDLIN( 685)										while(hx::IsNotNull( cx_ite1 )){
HXLINE( 685)											HX_VARI(  ::zpp_nape::callbacks::ZPP_InteractionListener,j) = cx_ite1->elt;
HXDLIN( 685)											{
HXLINE( 685)												bool _hx_tmp1;
HXDLIN( 685)												if ((_gthis->precedence <= j->precedence)) {
HXLINE( 685)													if ((_gthis->precedence == j->precedence)) {
HXLINE( 685)														_hx_tmp1 = (_gthis->id > j->id);
            													}
            													else {
HXLINE( 685)														_hx_tmp1 = false;
            													}
            												}
            												else {
HXLINE( 685)													_hx_tmp1 = true;
            												}
HXDLIN( 685)												if (_hx_tmp1) {
HXLINE( 685)													goto _hx_goto_117;
            												}
HXDLIN( 685)												pre1 = cx_ite1;
            											}
HXDLIN( 685)											cx_ite1 = cx_ite1->next;
            										}
            										_hx_goto_117:;
            									}
HXDLIN( 685)									{
HXLINE( 685)										HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this) = cb1->listeners;
HXDLIN( 685)										HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret);
HXDLIN( 685)										if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 685)											ret =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 685)											ret = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 685)											::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret->next;
HXDLIN( 685)											ret->next = null();
            										}
HXDLIN( 685)										ret->elt = _gthis;
HXDLIN( 685)										HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp) = ret;
HXDLIN( 685)										if (hx::IsNull( pre1 )) {
HXLINE( 685)											temp->next = _this->head;
HXDLIN( 685)											_this->head = temp;
            										}
            										else {
HXLINE( 685)											temp->next = pre1->next;
HXDLIN( 685)											pre1->next = temp;
            										}
HXDLIN( 685)										_this->pushmod = (_this->modified = true);
HXDLIN( 685)										_this->length++;
            									}
            								}
HXDLIN( 685)								{
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite2,"cx_ite") = cb1->cbsets->head;
HXDLIN( 685)									while(hx::IsNotNull( cx_ite2 )){
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb3,"cb") = cx_ite2->elt;
HXDLIN( 685)										{
HXLINE( 685)											cb3->zip_listeners = true;
HXDLIN( 685)											cb3->invalidate_pairs();
            										}
HXDLIN( 685)										cx_ite2 = cx_ite2->next;
            									}
            								}
            							}
HXLINE( 686)							if (pre) {
HXLINE( 688)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite3,"cx_ite") = cb1->interactors->head;
HXLINE( 689)								while(hx::IsNotNull( cx_ite3 )){
HXLINE( 691)									cx_ite3->elt->wake();
HXLINE( 692)									cx_ite3 = cx_ite3->next;
            								}
            							}
            						}
HXLINE( 683)						ite1 = ite1->next;
HXDLIN( 683)						ite2 = ite2->next;
            					}
            					else {
HXLINE( 683)						if ((cb1->id < cb2->id)) {
HXLINE( 683)							{
HXLINE( 684)								{
HXLINE( 684)									cb1->listeners->remove(_gthis);
HXDLIN( 684)									{
HXLINE( 684)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite4,"cx_ite") = cb1->cbsets->head;
HXDLIN( 684)										while(hx::IsNotNull( cx_ite4 )){
HXLINE( 684)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb4,"cb") = cx_ite4->elt;
HXDLIN( 684)											{
HXLINE( 684)												cb4->zip_listeners = true;
HXDLIN( 684)												cb4->invalidate_pairs();
            											}
HXDLIN( 684)											cx_ite4 = cx_ite4->next;
            										}
            									}
            								}
HXLINE( 685)								{
HXLINE( 685)									{
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre2,"pre") = null();
HXDLIN( 685)										{
HXLINE( 685)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite5,"cx_ite") = cb1->listeners->head;
HXDLIN( 685)											while(hx::IsNotNull( cx_ite5 )){
HXLINE( 685)												HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j1,"j") = cx_ite5->elt;
HXDLIN( 685)												{
HXLINE( 685)													bool _hx_tmp2;
HXDLIN( 685)													if ((_gthis->precedence <= j1->precedence)) {
HXLINE( 685)														if ((_gthis->precedence == j1->precedence)) {
HXLINE( 685)															_hx_tmp2 = (_gthis->id > j1->id);
            														}
            														else {
HXLINE( 685)															_hx_tmp2 = false;
            														}
            													}
            													else {
HXLINE( 685)														_hx_tmp2 = true;
            													}
HXDLIN( 685)													if (_hx_tmp2) {
HXLINE( 685)														goto _hx_goto_121;
            													}
HXDLIN( 685)													pre2 = cx_ite5;
            												}
HXDLIN( 685)												cx_ite5 = cx_ite5->next;
            											}
            											_hx_goto_121:;
            										}
HXDLIN( 685)										{
HXLINE( 685)											HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this1,"_this") = cb1->listeners;
HXDLIN( 685)											HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret1,"ret");
HXDLIN( 685)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 685)												ret1 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 685)												ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 685)												::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
HXDLIN( 685)												ret1->next = null();
            											}
HXDLIN( 685)											ret1->elt = _gthis;
HXDLIN( 685)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp1,"temp") = ret1;
HXDLIN( 685)											if (hx::IsNull( pre2 )) {
HXLINE( 685)												temp1->next = _this1->head;
HXDLIN( 685)												_this1->head = temp1;
            											}
            											else {
HXLINE( 685)												temp1->next = pre2->next;
HXDLIN( 685)												pre2->next = temp1;
            											}
HXDLIN( 685)											_this1->pushmod = (_this1->modified = true);
HXDLIN( 685)											_this1->length++;
            										}
            									}
HXDLIN( 685)									{
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite6,"cx_ite") = cb1->cbsets->head;
HXDLIN( 685)										while(hx::IsNotNull( cx_ite6 )){
HXLINE( 685)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb5,"cb") = cx_ite6->elt;
HXDLIN( 685)											{
HXLINE( 685)												cb5->zip_listeners = true;
HXDLIN( 685)												cb5->invalidate_pairs();
            											}
HXDLIN( 685)											cx_ite6 = cx_ite6->next;
            										}
            									}
            								}
HXLINE( 686)								if (pre) {
HXLINE( 688)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite7,"cx_ite") = cb1->interactors->head;
HXLINE( 689)									while(hx::IsNotNull( cx_ite7 )){
HXLINE( 691)										cx_ite7->elt->wake();
HXLINE( 692)										cx_ite7 = cx_ite7->next;
            									}
            								}
            							}
HXLINE( 683)							ite1 = ite1->next;
            						}
            						else {
HXLINE( 683)							{
HXLINE( 684)								{
HXLINE( 684)									cb2->listeners->remove(_gthis);
HXDLIN( 684)									{
HXLINE( 684)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite8,"cx_ite") = cb2->cbsets->head;
HXDLIN( 684)										while(hx::IsNotNull( cx_ite8 )){
HXLINE( 684)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb6,"cb") = cx_ite8->elt;
HXDLIN( 684)											{
HXLINE( 684)												cb6->zip_listeners = true;
HXDLIN( 684)												cb6->invalidate_pairs();
            											}
HXDLIN( 684)											cx_ite8 = cx_ite8->next;
            										}
            									}
            								}
HXLINE( 685)								{
HXLINE( 685)									{
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre3,"pre") = null();
HXDLIN( 685)										{
HXLINE( 685)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite9,"cx_ite") = cb2->listeners->head;
HXDLIN( 685)											while(hx::IsNotNull( cx_ite9 )){
HXLINE( 685)												HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j2,"j") = cx_ite9->elt;
HXDLIN( 685)												{
HXLINE( 685)													bool _hx_tmp3;
HXDLIN( 685)													if ((_gthis->precedence <= j2->precedence)) {
HXLINE( 685)														if ((_gthis->precedence == j2->precedence)) {
HXLINE( 685)															_hx_tmp3 = (_gthis->id > j2->id);
            														}
            														else {
HXLINE( 685)															_hx_tmp3 = false;
            														}
            													}
            													else {
HXLINE( 685)														_hx_tmp3 = true;
            													}
HXDLIN( 685)													if (_hx_tmp3) {
HXLINE( 685)														goto _hx_goto_125;
            													}
HXDLIN( 685)													pre3 = cx_ite9;
            												}
HXDLIN( 685)												cx_ite9 = cx_ite9->next;
            											}
            											_hx_goto_125:;
            										}
HXDLIN( 685)										{
HXLINE( 685)											HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this2,"_this") = cb2->listeners;
HXDLIN( 685)											HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret2,"ret");
HXDLIN( 685)											if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 685)												ret2 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 685)												ret2 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 685)												::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret2->next;
HXDLIN( 685)												ret2->next = null();
            											}
HXDLIN( 685)											ret2->elt = _gthis;
HXDLIN( 685)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp2,"temp") = ret2;
HXDLIN( 685)											if (hx::IsNull( pre3 )) {
HXLINE( 685)												temp2->next = _this2->head;
HXDLIN( 685)												_this2->head = temp2;
            											}
            											else {
HXLINE( 685)												temp2->next = pre3->next;
HXDLIN( 685)												pre3->next = temp2;
            											}
HXDLIN( 685)											_this2->pushmod = (_this2->modified = true);
HXDLIN( 685)											_this2->length++;
            										}
            									}
HXDLIN( 685)									{
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite10,"cx_ite") = cb2->cbsets->head;
HXDLIN( 685)										while(hx::IsNotNull( cx_ite10 )){
HXLINE( 685)											HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb7,"cb") = cx_ite10->elt;
HXDLIN( 685)											{
HXLINE( 685)												cb7->zip_listeners = true;
HXDLIN( 685)												cb7->invalidate_pairs();
            											}
HXDLIN( 685)											cx_ite10 = cx_ite10->next;
            										}
            									}
            								}
HXLINE( 686)								if (pre) {
HXLINE( 688)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite11,"cx_ite") = cb2->interactors->head;
HXLINE( 689)									while(hx::IsNotNull( cx_ite11 )){
HXLINE( 691)										cx_ite11->elt->wake();
HXLINE( 692)										cx_ite11 = cx_ite11->next;
            									}
            								}
            							}
HXLINE( 683)							ite2 = ite2->next;
            						}
            					}
            				}
            				_hx_goto_115:;
HXDLIN( 683)				while(hx::IsNotNull( ite1 )){
HXLINE( 683)					{
HXLINE( 683)						HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,cb8,"cb") = ite1->elt;
HXLINE( 684)						{
HXLINE( 684)							cb8->listeners->remove(_gthis);
HXDLIN( 684)							{
HXLINE( 684)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite12,"cx_ite") = cb8->cbsets->head;
HXDLIN( 684)								while(hx::IsNotNull( cx_ite12 )){
HXLINE( 684)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb9,"cb") = cx_ite12->elt;
HXDLIN( 684)									{
HXLINE( 684)										cb9->zip_listeners = true;
HXDLIN( 684)										cb9->invalidate_pairs();
            									}
HXDLIN( 684)									cx_ite12 = cx_ite12->next;
            								}
            							}
            						}
HXLINE( 685)						{
HXLINE( 685)							{
HXLINE( 685)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre4,"pre") = null();
HXDLIN( 685)								{
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite13,"cx_ite") = cb8->listeners->head;
HXDLIN( 685)									while(hx::IsNotNull( cx_ite13 )){
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j3,"j") = cx_ite13->elt;
HXDLIN( 685)										{
HXLINE( 685)											bool _hx_tmp4;
HXDLIN( 685)											if ((_gthis->precedence <= j3->precedence)) {
HXLINE( 685)												if ((_gthis->precedence == j3->precedence)) {
HXLINE( 685)													_hx_tmp4 = (_gthis->id > j3->id);
            												}
            												else {
HXLINE( 685)													_hx_tmp4 = false;
            												}
            											}
            											else {
HXLINE( 685)												_hx_tmp4 = true;
            											}
HXDLIN( 685)											if (_hx_tmp4) {
HXLINE( 685)												goto _hx_goto_130;
            											}
HXDLIN( 685)											pre4 = cx_ite13;
            										}
HXDLIN( 685)										cx_ite13 = cx_ite13->next;
            									}
            									_hx_goto_130:;
            								}
HXDLIN( 685)								{
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this3,"_this") = cb8->listeners;
HXDLIN( 685)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret3,"ret");
HXDLIN( 685)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 685)										ret3 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 685)										ret3 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 685)										::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret3->next;
HXDLIN( 685)										ret3->next = null();
            									}
HXDLIN( 685)									ret3->elt = _gthis;
HXDLIN( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp3,"temp") = ret3;
HXDLIN( 685)									if (hx::IsNull( pre4 )) {
HXLINE( 685)										temp3->next = _this3->head;
HXDLIN( 685)										_this3->head = temp3;
            									}
            									else {
HXLINE( 685)										temp3->next = pre4->next;
HXDLIN( 685)										pre4->next = temp3;
            									}
HXDLIN( 685)									_this3->pushmod = (_this3->modified = true);
HXDLIN( 685)									_this3->length++;
            								}
            							}
HXDLIN( 685)							{
HXLINE( 685)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite14,"cx_ite") = cb8->cbsets->head;
HXDLIN( 685)								while(hx::IsNotNull( cx_ite14 )){
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb10,"cb") = cx_ite14->elt;
HXDLIN( 685)									{
HXLINE( 685)										cb10->zip_listeners = true;
HXDLIN( 685)										cb10->invalidate_pairs();
            									}
HXDLIN( 685)									cx_ite14 = cx_ite14->next;
            								}
            							}
            						}
HXLINE( 686)						if (pre) {
HXLINE( 688)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite15,"cx_ite") = cb8->interactors->head;
HXLINE( 689)							while(hx::IsNotNull( cx_ite15 )){
HXLINE( 691)								cx_ite15->elt->wake();
HXLINE( 692)								cx_ite15 = cx_ite15->next;
            							}
            						}
            					}
HXLINE( 683)					ite1 = ite1->next;
            				}
HXDLIN( 683)				while(hx::IsNotNull( ite2 )){
HXLINE( 683)					{
HXLINE( 683)						HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbType,cb11,"cb") = ite2->elt;
HXLINE( 684)						{
HXLINE( 684)							cb11->listeners->remove(_gthis);
HXDLIN( 684)							{
HXLINE( 684)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite16,"cx_ite") = cb11->cbsets->head;
HXDLIN( 684)								while(hx::IsNotNull( cx_ite16 )){
HXLINE( 684)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb12,"cb") = cx_ite16->elt;
HXDLIN( 684)									{
HXLINE( 684)										cb12->zip_listeners = true;
HXDLIN( 684)										cb12->invalidate_pairs();
            									}
HXDLIN( 684)									cx_ite16 = cx_ite16->next;
            								}
            							}
            						}
HXLINE( 685)						{
HXLINE( 685)							{
HXLINE( 685)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,pre5,"pre") = null();
HXDLIN( 685)								{
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,cx_ite17,"cx_ite") = cb11->listeners->head;
HXDLIN( 685)									while(hx::IsNotNull( cx_ite17 )){
HXLINE( 685)										HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_InteractionListener,j4,"j") = cx_ite17->elt;
HXDLIN( 685)										{
HXLINE( 685)											bool _hx_tmp5;
HXDLIN( 685)											if ((_gthis->precedence <= j4->precedence)) {
HXLINE( 685)												if ((_gthis->precedence == j4->precedence)) {
HXLINE( 685)													_hx_tmp5 = (_gthis->id > j4->id);
            												}
            												else {
HXLINE( 685)													_hx_tmp5 = false;
            												}
            											}
            											else {
HXLINE( 685)												_hx_tmp5 = true;
            											}
HXDLIN( 685)											if (_hx_tmp5) {
HXLINE( 685)												goto _hx_goto_135;
            											}
HXDLIN( 685)											pre5 = cx_ite17;
            										}
HXDLIN( 685)										cx_ite17 = cx_ite17->next;
            									}
            									_hx_goto_135:;
            								}
HXDLIN( 685)								{
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_InteractionListener,_this4,"_this") = cb11->listeners;
HXDLIN( 685)									HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,ret4,"ret");
HXDLIN( 685)									if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )) {
HXLINE( 685)										ret4 =  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 685)										ret4 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
HXDLIN( 685)										::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret4->next;
HXDLIN( 685)										ret4->next = null();
            									}
HXDLIN( 685)									ret4->elt = _gthis;
HXDLIN( 685)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,temp4,"temp") = ret4;
HXDLIN( 685)									if (hx::IsNull( pre5 )) {
HXLINE( 685)										temp4->next = _this4->head;
HXDLIN( 685)										_this4->head = temp4;
            									}
            									else {
HXLINE( 685)										temp4->next = pre5->next;
HXDLIN( 685)										pre5->next = temp4;
            									}
HXDLIN( 685)									_this4->pushmod = (_this4->modified = true);
HXDLIN( 685)									_this4->length++;
            								}
            							}
HXDLIN( 685)							{
HXLINE( 685)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,cx_ite18,"cx_ite") = cb11->cbsets->head;
HXDLIN( 685)								while(hx::IsNotNull( cx_ite18 )){
HXLINE( 685)									HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,cb13,"cb") = cx_ite18->elt;
HXDLIN( 685)									{
HXLINE( 685)										cb13->zip_listeners = true;
HXDLIN( 685)										cb13->invalidate_pairs();
            									}
HXDLIN( 685)									cx_ite18 = cx_ite18->next;
            								}
            							}
            						}
HXLINE( 686)						if (pre) {
HXLINE( 688)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,cx_ite19,"cx_ite") = cb11->interactors->head;
HXLINE( 689)							while(hx::IsNotNull( cx_ite19 )){
HXLINE( 691)								cx_ite19->elt->wake();
HXLINE( 692)								cx_ite19 = cx_ite19->next;
            							}
            						}
            					}
HXLINE( 683)					ite2 = ite2->next;
            				}
            			}
            		}
            	}


void ZPP_InteractionListener_obj::cbtype_change1( ::zpp_nape::callbacks::ZPP_CbType cb,bool included,bool added){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_700_cbtype_change1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cb,"cb")
            	HX_STACK_ARG(included,"included")
            	HX_STACK_ARG(added,"added")
HXLINE( 700)		this->cbtype_change(this->options1,cb,included,added);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_InteractionListener_obj,cbtype_change1,(void))

void ZPP_InteractionListener_obj::cbtype_change2( ::zpp_nape::callbacks::ZPP_CbType cb,bool included,bool added){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_703_cbtype_change2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cb,"cb")
            	HX_STACK_ARG(included,"included")
            	HX_STACK_ARG(added,"added")
HXLINE( 703)		this->cbtype_change(this->options2,cb,included,added);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_InteractionListener_obj,cbtype_change2,(void))

void ZPP_InteractionListener_obj::cbtype_change( ::zpp_nape::callbacks::ZPP_OptionType options, ::zpp_nape::callbacks::ZPP_CbType cb,bool included,bool added){
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_705_cbtype_change)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(options,"options")
            	HX_STACK_ARG(cb,"cb")
            	HX_STACK_ARG(included,"included")
            	HX_STACK_ARG(added,"added")
HXLINE( 707)		this->removedFromSpace();
HXLINE( 708)		if (included) {
HXLINE( 708)			if (added) {
HXLINE( 708)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre) = null();
HXDLIN( 708)				{
HXLINE( 708)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite) = options->includes->head;
HXDLIN( 708)					while(hx::IsNotNull( cx_ite )){
HXLINE( 708)						{
HXLINE( 708)							if ((cb->id < cx_ite->elt->id)) {
HXLINE( 708)								goto _hx_goto_141;
            							}
HXDLIN( 708)							pre = cx_ite;
            						}
HXDLIN( 708)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_141:;
            				}
HXDLIN( 708)				{
HXLINE( 708)					HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,_this) = options->includes;
HXDLIN( 708)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret);
HXDLIN( 708)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 708)						ret =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 708)						ret = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 708)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret->next;
HXDLIN( 708)						ret->next = null();
            					}
HXDLIN( 708)					ret->elt = cb;
HXDLIN( 708)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp) = ret;
HXDLIN( 708)					if (hx::IsNull( pre )) {
HXLINE( 708)						temp->next = _this->head;
HXDLIN( 708)						_this->head = temp;
            					}
            					else {
HXLINE( 708)						temp->next = pre->next;
HXDLIN( 708)						pre->next = temp;
            					}
HXDLIN( 708)					_this->pushmod = (_this->modified = true);
HXDLIN( 708)					_this->length++;
            				}
            			}
            			else {
HXLINE( 708)				options->includes->remove(cb);
            			}
            		}
            		else {
HXLINE( 708)			if (added) {
HXLINE( 708)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,pre1,"pre") = null();
HXDLIN( 708)				{
HXLINE( 708)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,cx_ite1,"cx_ite") = options->excludes->head;
HXDLIN( 708)					while(hx::IsNotNull( cx_ite1 )){
HXLINE( 708)						{
HXLINE( 708)							if ((cb->id < cx_ite1->elt->id)) {
HXLINE( 708)								goto _hx_goto_142;
            							}
HXDLIN( 708)							pre1 = cx_ite1;
            						}
HXDLIN( 708)						cx_ite1 = cx_ite1->next;
            					}
            					_hx_goto_142:;
            				}
HXDLIN( 708)				{
HXLINE( 708)					HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_CbType,_this1,"_this") = options->excludes;
HXDLIN( 708)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,ret1,"ret");
HXDLIN( 708)					if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )) {
HXLINE( 708)						ret1 =  ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 708)						ret1 = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool;
HXDLIN( 708)						::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = ret1->next;
HXDLIN( 708)						ret1->next = null();
            					}
HXDLIN( 708)					ret1->elt = cb;
HXDLIN( 708)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,temp1,"temp") = ret1;
HXDLIN( 708)					if (hx::IsNull( pre1 )) {
HXLINE( 708)						temp1->next = _this1->head;
HXDLIN( 708)						_this1->head = temp1;
            					}
            					else {
HXLINE( 708)						temp1->next = pre1->next;
HXDLIN( 708)						pre1->next = temp1;
            					}
HXDLIN( 708)					_this1->pushmod = (_this1->modified = true);
HXDLIN( 708)					_this1->length++;
            				}
            			}
            			else {
HXLINE( 708)				options->excludes->remove(cb);
            			}
            		}
HXLINE( 709)		this->addedToSpace();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_InteractionListener_obj,cbtype_change,(void))

void ZPP_InteractionListener_obj::swapEvent(int newev){
            	HX_STACKFRAME(&_hx_pos_02b7feea1016c80f_712_swapEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newev,"newev")
HXLINE( 721)		this->removedFromSpace();
HXLINE( 722)		this->event = newev;
HXLINE( 723)		this->addedToSpace();
            	}


 ::zpp_nape::util::ZNPList_ZPP_CbSet ZPP_InteractionListener_obj::UCbSet;

 ::zpp_nape::util::ZNPList_ZPP_CbSet ZPP_InteractionListener_obj::VCbSet;

 ::zpp_nape::util::ZNPList_ZPP_CbSet ZPP_InteractionListener_obj::WCbSet;

 ::zpp_nape::util::ZNPList_ZPP_CbType ZPP_InteractionListener_obj::UCbType;

 ::zpp_nape::util::ZNPList_ZPP_CbType ZPP_InteractionListener_obj::VCbType;

 ::zpp_nape::util::ZNPList_ZPP_CbType ZPP_InteractionListener_obj::WCbType;


hx::ObjectPtr< ZPP_InteractionListener_obj > ZPP_InteractionListener_obj::__new( ::nape::callbacks::OptionType options1, ::nape::callbacks::OptionType options2,int event,int type) {
	hx::ObjectPtr< ZPP_InteractionListener_obj > __this = new ZPP_InteractionListener_obj();
	__this->__construct(options1,options2,event,type);
	return __this;
}

hx::ObjectPtr< ZPP_InteractionListener_obj > ZPP_InteractionListener_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::callbacks::OptionType options1, ::nape::callbacks::OptionType options2,int event,int type) {
	ZPP_InteractionListener_obj *__this = (ZPP_InteractionListener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_InteractionListener_obj), true, "zpp_nape.callbacks.ZPP_InteractionListener"));
	*(void **)__this = ZPP_InteractionListener_obj::_hx_vtable;
	__this->__construct(options1,options2,event,type);
	return __this;
}

ZPP_InteractionListener_obj::ZPP_InteractionListener_obj()
{
}

void ZPP_InteractionListener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_InteractionListener);
	HX_MARK_MEMBER_NAME(outer_zni,"outer_zni");
	HX_MARK_MEMBER_NAME(outer_znp,"outer_znp");
	HX_MARK_MEMBER_NAME(itype,"itype");
	HX_MARK_MEMBER_NAME(options1,"options1");
	HX_MARK_MEMBER_NAME(options2,"options2");
	HX_MARK_MEMBER_NAME(handleri,"handleri");
	HX_MARK_MEMBER_NAME(allowSleepingCallbacks,"allowSleepingCallbacks");
	HX_MARK_MEMBER_NAME(pure,"pure");
	HX_MARK_MEMBER_NAME(handlerp,"handlerp");
	 ::zpp_nape::callbacks::ZPP_Listener_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_InteractionListener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer_zni,"outer_zni");
	HX_VISIT_MEMBER_NAME(outer_znp,"outer_znp");
	HX_VISIT_MEMBER_NAME(itype,"itype");
	HX_VISIT_MEMBER_NAME(options1,"options1");
	HX_VISIT_MEMBER_NAME(options2,"options2");
	HX_VISIT_MEMBER_NAME(handleri,"handleri");
	HX_VISIT_MEMBER_NAME(allowSleepingCallbacks,"allowSleepingCallbacks");
	HX_VISIT_MEMBER_NAME(pure,"pure");
	HX_VISIT_MEMBER_NAME(handlerp,"handlerp");
	 ::zpp_nape::callbacks::ZPP_Listener_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_InteractionListener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pure") ) { return hx::Val( pure); }
		if (HX_FIELD_EQ(inName,"wake") ) { return hx::Val( wake_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"itype") ) { return hx::Val( itype); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"options1") ) { return hx::Val( options1); }
		if (HX_FIELD_EQ(inName,"options2") ) { return hx::Val( options2); }
		if (HX_FIELD_EQ(inName,"handleri") ) { return hx::Val( handleri); }
		if (HX_FIELD_EQ(inName,"handlerp") ) { return hx::Val( handlerp); }
		if (HX_FIELD_EQ(inName,"CbSetset") ) { return hx::Val( CbSetset_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"outer_zni") ) { return hx::Val( outer_zni); }
		if (HX_FIELD_EQ(inName,"outer_znp") ) { return hx::Val( outer_znp); }
		if (HX_FIELD_EQ(inName,"CbTypeset") ) { return hx::Val( CbTypeset_dyn()); }
		if (HX_FIELD_EQ(inName,"swapEvent") ) { return hx::Val( swapEvent_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"with_union") ) { return hx::Val( with_union_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedToSpace") ) { return hx::Val( addedToSpace_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cbtype_change") ) { return hx::Val( cbtype_change_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cbtype_change1") ) { return hx::Val( cbtype_change1_dyn()); }
		if (HX_FIELD_EQ(inName,"cbtype_change2") ) { return hx::Val( cbtype_change2_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"with_uniquesets") ) { return hx::Val( with_uniquesets_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removedFromSpace") ) { return hx::Val( removedFromSpace_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setInteractionType") ) { return hx::Val( setInteractionType_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"invalidate_precedence") ) { return hx::Val( invalidate_precedence_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"allowSleepingCallbacks") ) { return hx::Val( allowSleepingCallbacks); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_InteractionListener_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"UCbSet") ) { outValue = UCbSet; return true; }
		if (HX_FIELD_EQ(inName,"VCbSet") ) { outValue = VCbSet; return true; }
		if (HX_FIELD_EQ(inName,"WCbSet") ) { outValue = WCbSet; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"UCbType") ) { outValue = UCbType; return true; }
		if (HX_FIELD_EQ(inName,"VCbType") ) { outValue = VCbType; return true; }
		if (HX_FIELD_EQ(inName,"WCbType") ) { outValue = WCbType; return true; }
	}
	return false;
}

hx::Val ZPP_InteractionListener_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pure") ) { pure=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"itype") ) { itype=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"options1") ) { options1=inValue.Cast<  ::zpp_nape::callbacks::ZPP_OptionType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"options2") ) { options2=inValue.Cast<  ::zpp_nape::callbacks::ZPP_OptionType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handleri") ) { handleri=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handlerp") ) { handlerp=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"outer_zni") ) { outer_zni=inValue.Cast<  ::nape::callbacks::InteractionListener >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outer_znp") ) { outer_znp=inValue.Cast<  ::nape::callbacks::PreListener >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"allowSleepingCallbacks") ) { allowSleepingCallbacks=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_InteractionListener_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"UCbSet") ) { UCbSet=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbSet >(); return true; }
		if (HX_FIELD_EQ(inName,"VCbSet") ) { VCbSet=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbSet >(); return true; }
		if (HX_FIELD_EQ(inName,"WCbSet") ) { WCbSet=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbSet >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"UCbType") ) { UCbType=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbType >(); return true; }
		if (HX_FIELD_EQ(inName,"VCbType") ) { VCbType=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbType >(); return true; }
		if (HX_FIELD_EQ(inName,"WCbType") ) { WCbType=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CbType >(); return true; }
	}
	return false;
}

void ZPP_InteractionListener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outer_zni","\x31","\x4a","\x56","\xb7"));
	outFields->push(HX_HCSTRING("outer_znp","\x38","\x4a","\x56","\xb7"));
	outFields->push(HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2"));
	outFields->push(HX_HCSTRING("options1","\x13","\xbf","\x6e","\x1e"));
	outFields->push(HX_HCSTRING("options2","\x14","\xbf","\x6e","\x1e"));
	outFields->push(HX_HCSTRING("allowSleepingCallbacks","\x9a","\x0e","\x6b","\x5a"));
	outFields->push(HX_HCSTRING("pure","\xf8","\x10","\x61","\x4a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_InteractionListener_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::callbacks::InteractionListener*/ ,(int)offsetof(ZPP_InteractionListener_obj,outer_zni),HX_HCSTRING("outer_zni","\x31","\x4a","\x56","\xb7")},
	{hx::fsObject /*::nape::callbacks::PreListener*/ ,(int)offsetof(ZPP_InteractionListener_obj,outer_znp),HX_HCSTRING("outer_znp","\x38","\x4a","\x56","\xb7")},
	{hx::fsInt,(int)offsetof(ZPP_InteractionListener_obj,itype),HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_OptionType*/ ,(int)offsetof(ZPP_InteractionListener_obj,options1),HX_HCSTRING("options1","\x13","\xbf","\x6e","\x1e")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_OptionType*/ ,(int)offsetof(ZPP_InteractionListener_obj,options2),HX_HCSTRING("options2","\x14","\xbf","\x6e","\x1e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_InteractionListener_obj,handleri),HX_HCSTRING("handleri","\x5f","\x21","\x24","\xd5")},
	{hx::fsBool,(int)offsetof(ZPP_InteractionListener_obj,allowSleepingCallbacks),HX_HCSTRING("allowSleepingCallbacks","\x9a","\x0e","\x6b","\x5a")},
	{hx::fsBool,(int)offsetof(ZPP_InteractionListener_obj,pure),HX_HCSTRING("pure","\xf8","\x10","\x61","\x4a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_InteractionListener_obj,handlerp),HX_HCSTRING("handlerp","\x66","\x21","\x24","\xd5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_InteractionListener_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbSet*/ ,(void *) &ZPP_InteractionListener_obj::UCbSet,HX_HCSTRING("UCbSet","\xae","\xc5","\x34","\xd1")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbSet*/ ,(void *) &ZPP_InteractionListener_obj::VCbSet,HX_HCSTRING("VCbSet","\x0d","\x22","\x90","\x37")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbSet*/ ,(void *) &ZPP_InteractionListener_obj::WCbSet,HX_HCSTRING("WCbSet","\x6c","\x7e","\xeb","\x9d")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbType*/ ,(void *) &ZPP_InteractionListener_obj::UCbType,HX_HCSTRING("UCbType","\x2e","\x93","\xb0","\x3d")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbType*/ ,(void *) &ZPP_InteractionListener_obj::VCbType,HX_HCSTRING("VCbType","\xef","\x09","\x46","\x67")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CbType*/ ,(void *) &ZPP_InteractionListener_obj::WCbType,HX_HCSTRING("WCbType","\xb0","\x80","\xdb","\x90")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_InteractionListener_obj_sMemberFields[] = {
	HX_HCSTRING("outer_zni","\x31","\x4a","\x56","\xb7"),
	HX_HCSTRING("outer_znp","\x38","\x4a","\x56","\xb7"),
	HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2"),
	HX_HCSTRING("options1","\x13","\xbf","\x6e","\x1e"),
	HX_HCSTRING("options2","\x14","\xbf","\x6e","\x1e"),
	HX_HCSTRING("handleri","\x5f","\x21","\x24","\xd5"),
	HX_HCSTRING("allowSleepingCallbacks","\x9a","\x0e","\x6b","\x5a"),
	HX_HCSTRING("pure","\xf8","\x10","\x61","\x4a"),
	HX_HCSTRING("handlerp","\x66","\x21","\x24","\xd5"),
	HX_HCSTRING("setInteractionType","\x2a","\x7a","\x3d","\x98"),
	HX_HCSTRING("wake","\x24","\x5c","\xf2","\x4e"),
	HX_HCSTRING("CbSetset","\x5f","\x39","\x87","\x87"),
	HX_HCSTRING("CbTypeset","\x29","\xec","\xb2","\xe0"),
	HX_HCSTRING("with_uniquesets","\xfb","\x2a","\x8e","\xcf"),
	HX_HCSTRING("with_union","\xd6","\x6a","\x04","\x5a"),
	HX_HCSTRING("addedToSpace","\x6b","\x44","\xb0","\x09"),
	HX_HCSTRING("removedFromSpace","\x3c","\x43","\xd1","\xb7"),
	HX_HCSTRING("invalidate_precedence","\x8e","\xf5","\x4a","\xdf"),
	HX_HCSTRING("cbtype_change1","\x1b","\x90","\xed","\x10"),
	HX_HCSTRING("cbtype_change2","\x1c","\x90","\xed","\x10"),
	HX_HCSTRING("cbtype_change","\x56","\x5b","\x22","\x6d"),
	HX_HCSTRING("swapEvent","\x87","\xd8","\x71","\xeb"),
	::String(null()) };

static void ZPP_InteractionListener_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_InteractionListener_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_InteractionListener_obj::UCbSet,"UCbSet");
	HX_MARK_MEMBER_NAME(ZPP_InteractionListener_obj::VCbSet,"VCbSet");
	HX_MARK_MEMBER_NAME(ZPP_InteractionListener_obj::WCbSet,"WCbSet");
	HX_MARK_MEMBER_NAME(ZPP_InteractionListener_obj::UCbType,"UCbType");
	HX_MARK_MEMBER_NAME(ZPP_InteractionListener_obj::VCbType,"VCbType");
	HX_MARK_MEMBER_NAME(ZPP_InteractionListener_obj::WCbType,"WCbType");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_InteractionListener_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_InteractionListener_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionListener_obj::UCbSet,"UCbSet");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionListener_obj::VCbSet,"VCbSet");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionListener_obj::WCbSet,"WCbSet");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionListener_obj::UCbType,"UCbType");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionListener_obj::VCbType,"VCbType");
	HX_VISIT_MEMBER_NAME(ZPP_InteractionListener_obj::WCbType,"WCbType");
};

#endif

hx::Class ZPP_InteractionListener_obj::__mClass;

static ::String ZPP_InteractionListener_obj_sStaticFields[] = {
	HX_HCSTRING("UCbSet","\xae","\xc5","\x34","\xd1"),
	HX_HCSTRING("VCbSet","\x0d","\x22","\x90","\x37"),
	HX_HCSTRING("WCbSet","\x6c","\x7e","\xeb","\x9d"),
	HX_HCSTRING("UCbType","\x2e","\x93","\xb0","\x3d"),
	HX_HCSTRING("VCbType","\xef","\x09","\x46","\x67"),
	HX_HCSTRING("WCbType","\xb0","\x80","\xdb","\x90"),
	::String(null())
};

void ZPP_InteractionListener_obj::__register()
{
	hx::Object *dummy = new ZPP_InteractionListener_obj;
	ZPP_InteractionListener_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.callbacks.ZPP_InteractionListener","\xa0","\x84","\x37","\xee");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_InteractionListener_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_InteractionListener_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_InteractionListener_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_InteractionListener_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_InteractionListener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_InteractionListener_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_InteractionListener_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_InteractionListener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_InteractionListener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_InteractionListener_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_385_boot)
HXLINE( 385)		UCbSet =  ::zpp_nape::util::ZNPList_ZPP_CbSet_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_386_boot)
HXLINE( 386)		VCbSet =  ::zpp_nape::util::ZNPList_ZPP_CbSet_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_387_boot)
HXLINE( 387)		WCbSet =  ::zpp_nape::util::ZNPList_ZPP_CbSet_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_464_boot)
HXLINE( 464)		UCbType =  ::zpp_nape::util::ZNPList_ZPP_CbType_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_465_boot)
HXLINE( 465)		VCbType =  ::zpp_nape::util::ZNPList_ZPP_CbType_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_02b7feea1016c80f_466_boot)
HXLINE( 466)		WCbType =  ::zpp_nape::util::ZNPList_ZPP_CbType_obj::__alloc( HX_CTX );
            	}
}

} // end namespace zpp_nape
} // end namespace callbacks
