// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_645_new,"zpp_nape.space.ZPP_CallbackSet","new",0x2b5b69c1,"zpp_nape.space.ZPP_CallbackSet.new","zpp_nape/space/Space.hx",645,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_708_elem,"zpp_nape.space.ZPP_CallbackSet","elem",0xbeb3740e,"zpp_nape.space.ZPP_CallbackSet.elem","zpp_nape/space/Space.hx",708,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_713_begin,"zpp_nape.space.ZPP_CallbackSet","begin",0x5f7f5dca,"zpp_nape.space.ZPP_CallbackSet.begin","zpp_nape/space/Space.hx",713,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_721_setbegin,"zpp_nape.space.ZPP_CallbackSet","setbegin",0x09c8aa46,"zpp_nape.space.ZPP_CallbackSet.setbegin","zpp_nape/space/Space.hx",721,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_727_add,"zpp_nape.space.ZPP_CallbackSet","add",0x2b518b82,"zpp_nape.space.ZPP_CallbackSet.add","zpp_nape/space/Space.hx",727,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_731_inlined_add,"zpp_nape.space.ZPP_CallbackSet","inlined_add",0x416faeee,"zpp_nape.space.ZPP_CallbackSet.inlined_add","zpp_nape/space/Space.hx",731,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_759_addAll,"zpp_nape.space.ZPP_CallbackSet","addAll",0x3416c2bf,"zpp_nape.space.ZPP_CallbackSet.addAll","zpp_nape/space/Space.hx",759,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_769_insert,"zpp_nape.space.ZPP_CallbackSet","insert",0x32f8fc78,"zpp_nape.space.ZPP_CallbackSet.insert","zpp_nape/space/Space.hx",769,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_773_inlined_insert,"zpp_nape.space.ZPP_CallbackSet","inlined_insert",0xad75c48c,"zpp_nape.space.ZPP_CallbackSet.inlined_insert","zpp_nape/space/Space.hx",773,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_799_pop,"zpp_nape.space.ZPP_CallbackSet","pop",0x2b5cf6f2,"zpp_nape.space.ZPP_CallbackSet.pop","zpp_nape/space/Space.hx",799,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_803_inlined_pop,"zpp_nape.space.ZPP_CallbackSet","inlined_pop",0x417b1a5e,"zpp_nape.space.ZPP_CallbackSet.inlined_pop","zpp_nape/space/Space.hx",803,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_823_pop_unsafe,"zpp_nape.space.ZPP_CallbackSet","pop_unsafe",0x9c174113,"zpp_nape.space.ZPP_CallbackSet.pop_unsafe","zpp_nape/space/Space.hx",823,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_827_inlined_pop_unsafe,"zpp_nape.space.ZPP_CallbackSet","inlined_pop_unsafe",0xac9ba327,"zpp_nape.space.ZPP_CallbackSet.inlined_pop_unsafe","zpp_nape/space/Space.hx",827,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_849_remove,"zpp_nape.space.ZPP_CallbackSet","remove",0x99a45583,"zpp_nape.space.ZPP_CallbackSet.remove","zpp_nape/space/Space.hx",849,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_851_try_remove,"zpp_nape.space.ZPP_CallbackSet","try_remove",0xb34176c7,"zpp_nape.space.ZPP_CallbackSet.try_remove","zpp_nape/space/Space.hx",851,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_885_inlined_remove,"zpp_nape.space.ZPP_CallbackSet","inlined_remove",0x14211d97,"zpp_nape.space.ZPP_CallbackSet.inlined_remove","zpp_nape/space/Space.hx",885,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_889_inlined_try_remove,"zpp_nape.space.ZPP_CallbackSet","inlined_try_remove",0xc3c5d8db,"zpp_nape.space.ZPP_CallbackSet.inlined_try_remove","zpp_nape/space/Space.hx",889,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_913_erase,"zpp_nape.space.ZPP_CallbackSet","erase",0x22465c87,"zpp_nape.space.ZPP_CallbackSet.erase","zpp_nape/space/Space.hx",913,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_917_inlined_erase,"zpp_nape.space.ZPP_CallbackSet","inlined_erase",0x96c532f3,"zpp_nape.space.ZPP_CallbackSet.inlined_erase","zpp_nape/space/Space.hx",917,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_949_splice,"zpp_nape.space.ZPP_CallbackSet","splice",0x54ba3ebb,"zpp_nape.space.ZPP_CallbackSet.splice","zpp_nape/space/Space.hx",949,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_954_clear,"zpp_nape.space.ZPP_CallbackSet","clear",0xf784e52e,"zpp_nape.space.ZPP_CallbackSet.clear","zpp_nape/space/Space.hx",954,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_959_inlined_clear,"zpp_nape.space.ZPP_CallbackSet","inlined_clear",0x6c03bb9a,"zpp_nape.space.ZPP_CallbackSet.inlined_clear","zpp_nape/space/Space.hx",959,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_964_reverse,"zpp_nape.space.ZPP_CallbackSet","reverse",0xfe229703,"zpp_nape.space.ZPP_CallbackSet.reverse","zpp_nape/space/Space.hx",964,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_980_empty,"zpp_nape.space.ZPP_CallbackSet","empty",0x1f03ae2e,"zpp_nape.space.ZPP_CallbackSet.empty","zpp_nape/space/Space.hx",980,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_985_size,"zpp_nape.space.ZPP_CallbackSet","size",0xc7f23c40,"zpp_nape.space.ZPP_CallbackSet.size","zpp_nape/space/Space.hx",985,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_988_has,"zpp_nape.space.ZPP_CallbackSet","has",0x2b56d8bb,"zpp_nape.space.ZPP_CallbackSet.has","zpp_nape/space/Space.hx",988,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_992_inlined_has,"zpp_nape.space.ZPP_CallbackSet","inlined_has",0x4174fc27,"zpp_nape.space.ZPP_CallbackSet.inlined_has","zpp_nape/space/Space.hx",992,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1023_front,"zpp_nape.space.ZPP_CallbackSet","front",0xb5b78c4a,"zpp_nape.space.ZPP_CallbackSet.front","zpp_nape/space/Space.hx",1023,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1025_back,"zpp_nape.space.ZPP_CallbackSet","back",0xbcaf75a6,"zpp_nape.space.ZPP_CallbackSet.back","zpp_nape/space/Space.hx",1025,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1034_iterator_at,"zpp_nape.space.ZPP_CallbackSet","iterator_at",0x4613ec45,"zpp_nape.space.ZPP_CallbackSet.iterator_at","zpp_nape/space/Space.hx",1034,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1047_at,"zpp_nape.space.ZPP_CallbackSet","at",0xe258c2b2,"zpp_nape.space.ZPP_CallbackSet.at","zpp_nape/space/Space.hx",1047,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1087_free,"zpp_nape.space.ZPP_CallbackSet","free",0xbf61382b,"zpp_nape.space.ZPP_CallbackSet.free","zpp_nape/space/Space.hx",1087,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1102_alloc,"zpp_nape.space.ZPP_CallbackSet","alloc",0xd0bd1816,"zpp_nape.space.ZPP_CallbackSet.alloc","zpp_nape/space/Space.hx",1102,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1118_add_arb,"zpp_nape.space.ZPP_CallbackSet","add_arb",0x739fb7d4,"zpp_nape.space.ZPP_CallbackSet.add_arb","zpp_nape/space/Space.hx",1118,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1125_try_remove_arb,"zpp_nape.space.ZPP_CallbackSet","try_remove_arb",0x04072999,"zpp_nape.space.ZPP_CallbackSet.try_remove_arb","zpp_nape/space/Space.hx",1125,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1128_remove_arb,"zpp_nape.space.ZPP_CallbackSet","remove_arb",0xf7861655,"zpp_nape.space.ZPP_CallbackSet.remove_arb","zpp_nape/space/Space.hx",1128,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1130_empty_arb,"zpp_nape.space.ZPP_CallbackSet","empty_arb",0xd0f6a080,"zpp_nape.space.ZPP_CallbackSet.empty_arb","zpp_nape/space/Space.hx",1130,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1159_really_empty,"zpp_nape.space.ZPP_CallbackSet","really_empty",0x47b253f8,"zpp_nape.space.ZPP_CallbackSet.really_empty","zpp_nape/space/Space.hx",1159,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1163_sleeping,"zpp_nape.space.ZPP_CallbackSet","sleeping",0xeeff1f2a,"zpp_nape.space.ZPP_CallbackSet.sleeping","zpp_nape/space/Space.hx",1163,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_650_get,"zpp_nape.space.ZPP_CallbackSet","get",0x2b5619f7,"zpp_nape.space.ZPP_CallbackSet.get","zpp_nape/space/Space.hx",650,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_8c1ddcc2f4543736_1059_boot,"zpp_nape.space.ZPP_CallbackSet","boot",0xbcba1fb1,"zpp_nape.space.ZPP_CallbackSet.boot","zpp_nape/space/Space.hx",1059,0x2b65ed03)
namespace zpp_nape{
namespace space{

void ZPP_CallbackSet_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_645_new)
            	HX_STACK_THIS(this)
HXLINE(1084)		this->lazydel = false;
HXLINE(1083)		this->freed = false;
HXLINE( 718)		this->length = (int)0;
HXLINE( 717)		this->pushmod = false;
HXLINE( 716)		this->modified = false;
HXLINE( 715)		this->_inuse = false;
HXLINE( 704)		this->next = null();
HXLINE( 649)		this->int2 = null();
HXLINE( 648)		this->int1 = null();
HXLINE( 647)		this->di = (int)0;
HXLINE( 646)		this->id = (int)0;
HXLINE(1114)		this->arbiters =  ::zpp_nape::util::ZNPList_ZPP_Arbiter_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_CallbackSet_obj::__CreateEmpty() { return new ZPP_CallbackSet_obj; }

void *ZPP_CallbackSet_obj::_hx_vtable = 0;

Dynamic ZPP_CallbackSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_CallbackSet_obj > _hx_result = new ZPP_CallbackSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_CallbackSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4a30c59f;
}

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::elem(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_708_elem)
            	HX_STACK_THIS(this)
HXLINE( 708)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,elem,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_713_begin)
            	HX_STACK_THIS(this)
HXLINE( 713)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,begin,return )

void ZPP_CallbackSet_obj::setbegin( ::zpp_nape::space::ZPP_CallbackSet i){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_721_setbegin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 722)		this->next = i;
HXLINE( 723)		this->modified = true;
HXLINE( 724)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,setbegin,(void))

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::add( ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_727_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE( 727)		o->_inuse = true;
HXDLIN( 727)		o->next = this->next;
HXDLIN( 727)		this->next = o;
HXDLIN( 727)		this->modified = true;
HXDLIN( 727)		this->length++;
HXDLIN( 727)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,add,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::inlined_add( ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_731_inlined_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
HXLINE( 741)		o->_inuse = true;
HXLINE( 744)		o->next = this->next;
HXLINE( 745)		this->next = o;
HXLINE( 746)		this->modified = true;
HXLINE( 747)		this->length++;
HXLINE( 748)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,inlined_add,return )

void ZPP_CallbackSet_obj::addAll( ::zpp_nape::space::ZPP_CallbackSet x){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_759_addAll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 760)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cx_ite) = x->next;
HXLINE( 761)		while(hx::IsNotNull( cx_ite )){
HXLINE( 763)			this->add(cx_ite);
HXLINE( 764)			cx_ite = cx_ite->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,addAll,(void))

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::insert( ::zpp_nape::space::ZPP_CallbackSet cur, ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_769_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE( 769)		o->_inuse = true;
HXDLIN( 769)		if (hx::IsNull( cur )) {
HXLINE( 769)			o->next = this->next;
HXDLIN( 769)			this->next = o;
            		}
            		else {
HXLINE( 769)			o->next = cur->next;
HXDLIN( 769)			cur->next = o;
            		}
HXDLIN( 769)		this->pushmod = (this->modified = true);
HXDLIN( 769)		this->length++;
HXDLIN( 769)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_CallbackSet_obj,insert,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::inlined_insert( ::zpp_nape::space::ZPP_CallbackSet cur, ::zpp_nape::space::ZPP_CallbackSet o){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_773_inlined_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cur,"cur")
            	HX_STACK_ARG(o,"o")
HXLINE( 783)		o->_inuse = true;
HXLINE( 786)		if (hx::IsNull( cur )) {
HXLINE( 787)			o->next = this->next;
HXLINE( 788)			this->next = o;
            		}
            		else {
HXLINE( 791)			o->next = cur->next;
HXLINE( 792)			cur->next = o;
            		}
HXLINE( 794)		this->pushmod = (this->modified = true);
HXLINE( 795)		this->length++;
HXLINE( 796)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_CallbackSet_obj,inlined_insert,return )

void ZPP_CallbackSet_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_799_pop)
            	HX_STACK_THIS(this)
HXLINE( 799)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,ret) = this->next;
HXDLIN( 799)		this->next = ret->next;
HXDLIN( 799)		ret->_inuse = false;
HXDLIN( 799)		if (hx::IsNull( this->next )) {
HXLINE( 799)			this->pushmod = true;
            		}
HXDLIN( 799)		this->modified = true;
HXDLIN( 799)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,pop,(void))

void ZPP_CallbackSet_obj::inlined_pop(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_803_inlined_pop)
            	HX_STACK_THIS(this)
HXLINE( 812)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,ret) = this->next;
HXLINE( 813)		this->next = ret->next;
HXLINE( 815)		ret->_inuse = false;
HXLINE( 818)		if (hx::IsNull( this->next )) {
HXLINE( 818)			this->pushmod = true;
            		}
HXLINE( 819)		this->modified = true;
HXLINE( 820)		this->length--;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,inlined_pop,(void))

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_823_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE( 823)		 ::zpp_nape::space::ZPP_CallbackSet _this = this->next;
HXDLIN( 823)		this->pop();
HXDLIN( 823)		return _this;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,pop_unsafe,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::inlined_pop_unsafe(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_827_inlined_pop_unsafe)
            	HX_STACK_THIS(this)
HXLINE( 836)		 ::zpp_nape::space::ZPP_CallbackSet _this = this->next;
HXLINE( 837)		this->pop();
HXLINE( 838)		return _this;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,inlined_pop_unsafe,return )

void ZPP_CallbackSet_obj::remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_849_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 849)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,pre) = null();
HXDLIN( 849)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cur) = this->next;
HXDLIN( 849)		while(hx::IsNotNull( cur )){
HXLINE( 849)			if (hx::IsEq( cur,obj )) {
HXLINE( 849)				{
HXLINE( 849)					HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,old);
HXDLIN( 849)					HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,ret);
HXDLIN( 849)					if (hx::IsNull( pre )) {
HXLINE( 849)						old = this->next;
HXDLIN( 849)						ret = old->next;
HXDLIN( 849)						this->next = ret;
HXDLIN( 849)						if (hx::IsNull( this->next )) {
HXLINE( 849)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 849)						old = pre->next;
HXDLIN( 849)						ret = old->next;
HXDLIN( 849)						pre->next = ret;
HXDLIN( 849)						if (hx::IsNull( ret )) {
HXLINE( 849)							this->pushmod = true;
            						}
            					}
HXDLIN( 849)					old->_inuse = false;
HXDLIN( 849)					this->modified = true;
HXDLIN( 849)					this->length--;
HXDLIN( 849)					this->pushmod = true;
            				}
HXDLIN( 849)				goto _hx_goto_14;
            			}
HXDLIN( 849)			pre = cur;
HXDLIN( 849)			cur = cur->next;
            		}
            		_hx_goto_14:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,remove,(void))

bool ZPP_CallbackSet_obj::try_remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_851_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 860)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,pre) = null();
HXLINE( 861)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cur) = this->next;
HXLINE( 862)		HX_VARI( bool,ret) = false;
HXLINE( 863)		while(hx::IsNotNull( cur )){
HXLINE( 864)			if (hx::IsEq( cur,obj )) {
HXLINE( 865)				this->erase(pre);
HXLINE( 866)				ret = true;
HXLINE( 867)				goto _hx_goto_16;
            			}
HXLINE( 869)			pre = cur;
HXLINE( 870)			cur = cur->next;
            		}
            		_hx_goto_16:;
HXLINE( 872)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,try_remove,return )

void ZPP_CallbackSet_obj::inlined_remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_885_inlined_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 885)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,pre) = null();
HXDLIN( 885)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cur) = this->next;
HXDLIN( 885)		while(hx::IsNotNull( cur )){
HXLINE( 885)			if (hx::IsEq( cur,obj )) {
HXLINE( 885)				{
HXLINE( 885)					HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,old);
HXDLIN( 885)					HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,ret);
HXDLIN( 885)					if (hx::IsNull( pre )) {
HXLINE( 885)						old = this->next;
HXDLIN( 885)						ret = old->next;
HXDLIN( 885)						this->next = ret;
HXDLIN( 885)						if (hx::IsNull( this->next )) {
HXLINE( 885)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 885)						old = pre->next;
HXDLIN( 885)						ret = old->next;
HXDLIN( 885)						pre->next = ret;
HXDLIN( 885)						if (hx::IsNull( ret )) {
HXLINE( 885)							this->pushmod = true;
            						}
            					}
HXDLIN( 885)					old->_inuse = false;
HXDLIN( 885)					this->modified = true;
HXDLIN( 885)					this->length--;
HXDLIN( 885)					this->pushmod = true;
            				}
HXDLIN( 885)				goto _hx_goto_18;
            			}
HXDLIN( 885)			pre = cur;
HXDLIN( 885)			cur = cur->next;
            		}
            		_hx_goto_18:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,inlined_remove,(void))

bool ZPP_CallbackSet_obj::inlined_try_remove( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_889_inlined_try_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 898)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,pre) = null();
HXLINE( 899)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cur) = this->next;
HXLINE( 900)		HX_VARI( bool,ret) = false;
HXLINE( 901)		while(hx::IsNotNull( cur )){
HXLINE( 902)			if (hx::IsEq( cur,obj )) {
HXLINE( 903)				{
HXLINE( 903)					HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,old);
HXDLIN( 903)					HX_VAR_NAME(  ::zpp_nape::space::ZPP_CallbackSet,ret1,"ret");
HXDLIN( 903)					if (hx::IsNull( pre )) {
HXLINE( 903)						old = this->next;
HXDLIN( 903)						ret1 = old->next;
HXDLIN( 903)						this->next = ret1;
HXDLIN( 903)						if (hx::IsNull( this->next )) {
HXLINE( 903)							this->pushmod = true;
            						}
            					}
            					else {
HXLINE( 903)						old = pre->next;
HXDLIN( 903)						ret1 = old->next;
HXDLIN( 903)						pre->next = ret1;
HXDLIN( 903)						if (hx::IsNull( ret1 )) {
HXLINE( 903)							this->pushmod = true;
            						}
            					}
HXDLIN( 903)					old->_inuse = false;
HXDLIN( 903)					this->modified = true;
HXDLIN( 903)					this->length--;
HXDLIN( 903)					this->pushmod = true;
            				}
HXLINE( 904)				ret = true;
HXLINE( 905)				goto _hx_goto_20;
            			}
HXLINE( 907)			pre = cur;
HXLINE( 908)			cur = cur->next;
            		}
            		_hx_goto_20:;
HXLINE( 910)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,inlined_try_remove,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::erase( ::zpp_nape::space::ZPP_CallbackSet pre){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_913_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE( 913)		HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,old);
HXDLIN( 913)		HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,ret);
HXDLIN( 913)		if (hx::IsNull( pre )) {
HXLINE( 913)			old = this->next;
HXDLIN( 913)			ret = old->next;
HXDLIN( 913)			this->next = ret;
HXDLIN( 913)			if (hx::IsNull( this->next )) {
HXLINE( 913)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 913)			old = pre->next;
HXDLIN( 913)			ret = old->next;
HXDLIN( 913)			pre->next = ret;
HXDLIN( 913)			if (hx::IsNull( ret )) {
HXLINE( 913)				this->pushmod = true;
            			}
            		}
HXDLIN( 913)		old->_inuse = false;
HXDLIN( 913)		this->modified = true;
HXDLIN( 913)		this->length--;
HXDLIN( 913)		this->pushmod = true;
HXDLIN( 913)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,erase,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::inlined_erase( ::zpp_nape::space::ZPP_CallbackSet pre){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_917_inlined_erase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
HXLINE( 926)		HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,old);
HXLINE( 927)		HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,ret);
HXLINE( 928)		if (hx::IsNull( pre )) {
HXLINE( 929)			old = this->next;
HXLINE( 930)			ret = old->next;
HXLINE( 931)			this->next = ret;
HXLINE( 932)			if (hx::IsNull( this->next )) {
HXLINE( 932)				this->pushmod = true;
            			}
            		}
            		else {
HXLINE( 935)			old = pre->next;
HXLINE( 936)			ret = old->next;
HXLINE( 937)			pre->next = ret;
HXLINE( 938)			if (hx::IsNull( ret )) {
HXLINE( 938)				this->pushmod = true;
            			}
            		}
HXLINE( 941)		old->_inuse = false;
HXLINE( 944)		this->modified = true;
HXLINE( 945)		this->length--;
HXLINE( 946)		this->pushmod = true;
HXLINE( 947)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,inlined_erase,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::splice( ::zpp_nape::space::ZPP_CallbackSet pre,int n){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_949_splice)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pre,"pre")
            	HX_STACK_ARG(n,"n")
HXLINE( 950)		while(true){
HXLINE( 950)			bool _hx_tmp;
HXDLIN( 950)			n = (n - (int)1);
HXDLIN( 950)			if (((n + (int)1) > (int)0)) {
HXLINE( 950)				_hx_tmp = hx::IsNotNull( pre->next );
            			}
            			else {
HXLINE( 950)				_hx_tmp = false;
            			}
HXDLIN( 950)			if (!(_hx_tmp)) {
HXLINE( 950)				goto _hx_goto_24;
            			}
HXDLIN( 950)			this->erase(pre);
            		}
            		_hx_goto_24:;
HXLINE( 951)		return pre->next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_CallbackSet_obj,splice,return )

void ZPP_CallbackSet_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_954_clear)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,clear,(void))

void ZPP_CallbackSet_obj::inlined_clear(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_959_inlined_clear)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,inlined_clear,(void))

void ZPP_CallbackSet_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_964_reverse)
            	HX_STACK_THIS(this)
HXLINE( 965)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cur) = this->next;
HXLINE( 966)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,pre) = null();
HXLINE( 967)		while(hx::IsNotNull( cur )){
HXLINE( 968)			HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,nx) = cur->next;
HXLINE( 969)			cur->next = pre;
HXLINE( 970)			this->next = cur;
HXLINE( 971)			pre = cur;
HXLINE( 972)			cur = nx;
            		}
HXLINE( 974)		this->modified = true;
HXLINE( 975)		this->pushmod = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,reverse,(void))

bool ZPP_CallbackSet_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_980_empty)
            	HX_STACK_THIS(this)
HXLINE( 980)		return hx::IsNull( this->next );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,empty,return )

int ZPP_CallbackSet_obj::size(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_985_size)
            	HX_STACK_THIS(this)
HXLINE( 985)		return this->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,size,return )

bool ZPP_CallbackSet_obj::has( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_988_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 988)		HX_VAR( bool,ret);
HXDLIN( 988)		{
HXLINE( 988)			ret = false;
HXDLIN( 988)			{
HXLINE( 988)				HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cx_ite) = this->next;
HXDLIN( 988)				while(hx::IsNotNull( cx_ite )){
HXLINE( 988)					if (hx::IsEq( cx_ite,obj )) {
HXLINE( 988)						ret = true;
HXDLIN( 988)						goto _hx_goto_32;
            					}
HXDLIN( 988)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_32:;
            			}
            		}
HXDLIN( 988)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,has,return )

bool ZPP_CallbackSet_obj::inlined_has( ::zpp_nape::space::ZPP_CallbackSet obj){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_992_inlined_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE(1001)		HX_VAR( bool,ret);
HXLINE(1002)		{
HXLINE(1003)			ret = false;
HXLINE(1004)			{
HXLINE(1005)				HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cx_ite) = this->next;
HXLINE(1006)				while(hx::IsNotNull( cx_ite )){
HXLINE(1009)					if (hx::IsEq( cx_ite,obj )) {
HXLINE(1010)						ret = true;
HXLINE(1011)						goto _hx_goto_34;
            					}
HXLINE(1014)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_34:;
            			}
            		}
HXLINE(1018)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,inlined_has,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::front(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1023_front)
            	HX_STACK_THIS(this)
HXLINE(1023)		return this->next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,front,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::back(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1025_back)
            	HX_STACK_THIS(this)
HXLINE(1026)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,ret) = this->next;
HXLINE(1027)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,cur) = ret;
HXLINE(1028)		while(hx::IsNotNull( cur )){
HXLINE(1029)			ret = cur;
HXLINE(1030)			cur = cur->next;
            		}
HXLINE(1032)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,back,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::iterator_at(int ind){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1034_iterator_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(1043)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,ret) = this->next;
HXLINE(1044)		while(true){
HXLINE(1044)			bool _hx_tmp;
HXDLIN(1044)			ind = (ind - (int)1);
HXDLIN(1044)			if (((ind + (int)1) > (int)0)) {
HXLINE(1044)				_hx_tmp = hx::IsNotNull( ret );
            			}
            			else {
HXLINE(1044)				_hx_tmp = false;
            			}
HXDLIN(1044)			if (!(_hx_tmp)) {
HXLINE(1044)				goto _hx_goto_39;
            			}
HXDLIN(1044)			ret = ret->next;
            		}
            		_hx_goto_39:;
HXLINE(1045)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,iterator_at,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::at(int ind){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1047_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ind,"ind")
HXLINE(1056)		HX_VARI(  ::zpp_nape::space::ZPP_CallbackSet,it) = this->iterator_at(ind);
HXLINE(1057)		if (hx::IsNotNull( it )) {
HXLINE(1057)			return it;
            		}
            		else {
HXLINE(1057)			return null();
            		}
HXDLIN(1057)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,at,return )

void ZPP_CallbackSet_obj::free(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1087_free)
            	HX_STACK_THIS(this)
HXLINE(1088)		this->int1 = (this->int2 = null());
HXLINE(1089)		this->id = (this->di = (int)-1);
HXLINE(1090)		this->freed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,free,(void))

void ZPP_CallbackSet_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1102_alloc)
            	HX_STACK_THIS(this)
HXLINE(1103)		this->freed = false;
HXLINE(1104)		this->lazydel = false;
HXLINE(1106)		this->COLLISIONstate = (int)1;
HXLINE(1107)		this->COLLISIONstamp = (int)0;
HXLINE(1108)		this->SENSORstate = (int)1;
HXLINE(1109)		this->SENSORstamp = (int)0;
HXLINE(1110)		this->FLUIDstate = (int)1;
HXLINE(1111)		this->FLUIDstamp = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,alloc,(void))

bool ZPP_CallbackSet_obj::add_arb( ::zpp_nape::dynamics::ZPP_Arbiter x){
            	HX_GC_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1118_add_arb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1118)		HX_VAR( bool,ret);
HXDLIN(1118)		{
HXLINE(1118)			ret = false;
HXDLIN(1118)			{
HXLINE(1118)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = this->arbiters->head;
HXDLIN(1118)				while(hx::IsNotNull( cx_ite )){
HXLINE(1118)					if (hx::IsEq( cx_ite->elt,x )) {
HXLINE(1118)						ret = true;
HXDLIN(1118)						goto _hx_goto_44;
            					}
HXDLIN(1118)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_44:;
            			}
            		}
HXDLIN(1118)		if (!(ret)) {
HXLINE(1119)			{
HXLINE(1119)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->arbiters;
HXDLIN(1119)				HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN(1119)				if (hx::IsNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )) {
HXLINE(1119)					ret1 =  ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1119)					ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1119)					::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
HXDLIN(1119)					ret1->next = null();
            				}
HXDLIN(1119)				ret1->elt = x;
HXDLIN(1119)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,temp) = ret1;
HXDLIN(1119)				temp->next = _this->head;
HXDLIN(1119)				_this->head = temp;
HXDLIN(1119)				_this->modified = true;
HXDLIN(1119)				_this->length++;
            			}
HXLINE(1120)			return true;
            		}
            		else {
HXLINE(1122)			return false;
            		}
HXLINE(1118)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,add_arb,return )

bool ZPP_CallbackSet_obj::try_remove_arb( ::zpp_nape::dynamics::ZPP_Arbiter x){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1125_try_remove_arb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1125)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->arbiters;
HXDLIN(1125)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN(1125)		HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = _this->head;
HXDLIN(1125)		HX_VARI( bool,ret) = false;
HXDLIN(1125)		while(hx::IsNotNull( cur )){
HXLINE(1125)			if (hx::IsEq( cur->elt,x )) {
HXLINE(1125)				{
HXLINE(1125)					HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN(1125)					HX_VAR_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret1,"ret");
HXDLIN(1125)					if (hx::IsNull( pre )) {
HXLINE(1125)						old = _this->head;
HXDLIN(1125)						ret1 = old->next;
HXDLIN(1125)						_this->head = ret1;
HXDLIN(1125)						if (hx::IsNull( _this->head )) {
HXLINE(1125)							_this->pushmod = true;
            						}
            					}
            					else {
HXLINE(1125)						old = pre->next;
HXDLIN(1125)						ret1 = old->next;
HXDLIN(1125)						pre->next = ret1;
HXDLIN(1125)						if (hx::IsNull( ret1 )) {
HXLINE(1125)							_this->pushmod = true;
            						}
            					}
HXDLIN(1125)					{
HXLINE(1125)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN(1125)						o->elt = null();
HXDLIN(1125)						o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1125)						::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            					}
HXDLIN(1125)					_this->modified = true;
HXDLIN(1125)					_this->length--;
HXDLIN(1125)					_this->pushmod = true;
            				}
HXDLIN(1125)				ret = true;
HXDLIN(1125)				goto _hx_goto_46;
            			}
HXDLIN(1125)			pre = cur;
HXDLIN(1125)			cur = cur->next;
            		}
            		_hx_goto_46:;
HXDLIN(1125)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,try_remove_arb,return )

void ZPP_CallbackSet_obj::remove_arb( ::zpp_nape::dynamics::ZPP_Arbiter x){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1128_remove_arb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1128)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Arbiter,_this) = this->arbiters;
HXDLIN(1128)		{
HXLINE(1128)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,pre) = null();
HXDLIN(1128)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cur) = _this->head;
HXDLIN(1128)			while(hx::IsNotNull( cur )){
HXLINE(1128)				if (hx::IsEq( cur->elt,x )) {
HXLINE(1128)					{
HXLINE(1128)						HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,old);
HXDLIN(1128)						HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,ret);
HXDLIN(1128)						if (hx::IsNull( pre )) {
HXLINE(1128)							old = _this->head;
HXDLIN(1128)							ret = old->next;
HXDLIN(1128)							_this->head = ret;
HXDLIN(1128)							if (hx::IsNull( _this->head )) {
HXLINE(1128)								_this->pushmod = true;
            							}
            						}
            						else {
HXLINE(1128)							old = pre->next;
HXDLIN(1128)							ret = old->next;
HXDLIN(1128)							pre->next = ret;
HXDLIN(1128)							if (hx::IsNull( ret )) {
HXLINE(1128)								_this->pushmod = true;
            							}
            						}
HXDLIN(1128)						{
HXLINE(1128)							HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,o) = old;
HXDLIN(1128)							o->elt = null();
HXDLIN(1128)							o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
HXDLIN(1128)							::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
            						}
HXDLIN(1128)						_this->modified = true;
HXDLIN(1128)						_this->length--;
HXDLIN(1128)						_this->pushmod = true;
            					}
HXDLIN(1128)					goto _hx_goto_48;
            				}
HXDLIN(1128)				pre = cur;
HXDLIN(1128)				cur = cur->next;
            			}
            			_hx_goto_48:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,remove_arb,(void))

bool ZPP_CallbackSet_obj::empty_arb(int type){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1130_empty_arb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE(1131)		HX_VAR( bool,retvar);
HXLINE(1132)		{
HXLINE(1133)			retvar = true;
HXLINE(1134)			{
HXLINE(1135)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = this->arbiters->head;
HXLINE(1136)				while(hx::IsNotNull( cx_ite )){
HXLINE(1139)					if ((((int)cx_ite->elt->type & (int)type) == (int)0)) {
HXLINE(1141)						cx_ite = cx_ite->next;
HXLINE(1142)						continue;
            					}
            					else {
HXLINE(1146)						retvar = false;
HXLINE(1147)						goto _hx_goto_50;
            					}
            				}
            				_hx_goto_50:;
            			}
            		}
HXLINE(1154)		return retvar;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CallbackSet_obj,empty_arb,return )

bool ZPP_CallbackSet_obj::really_empty(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1159_really_empty)
            	HX_STACK_THIS(this)
HXLINE(1159)		return hx::IsNull( this->arbiters->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,really_empty,return )

bool ZPP_CallbackSet_obj::sleeping(){
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1163_sleeping)
            	HX_STACK_THIS(this)
HXLINE(1164)		HX_VAR( bool,ret);
HXLINE(1165)		{
HXLINE(1166)			ret = true;
HXLINE(1167)			{
HXLINE(1168)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,cx_ite) = this->arbiters->head;
HXLINE(1169)				while(hx::IsNotNull( cx_ite )){
HXLINE(1172)					if (cx_ite->elt->sleeping) {
HXLINE(1174)						cx_ite = cx_ite->next;
HXLINE(1175)						continue;
            					}
            					else {
HXLINE(1179)						ret = false;
HXLINE(1180)						goto _hx_goto_53;
            					}
            				}
            				_hx_goto_53:;
            			}
            		}
HXLINE(1187)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CallbackSet_obj,sleeping,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::get( ::zpp_nape::phys::ZPP_Interactor i1, ::zpp_nape::phys::ZPP_Interactor i2){
            	HX_GC_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_650_get)
            	HX_STACK_ARG(i1,"i1")
            	HX_STACK_ARG(i2,"i2")
HXLINE( 651)		HX_VAR(  ::zpp_nape::space::ZPP_CallbackSet,ret);
HXLINE( 652)		{
HXLINE( 653)			if (hx::IsNull( ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool )) {
HXLINE( 654)				ret =  ::zpp_nape::space::ZPP_CallbackSet_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 660)				ret = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;
HXLINE( 661)				::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = ret->next;
HXLINE( 662)				ret->next = null();
            			}
HXLINE( 667)			{
HXLINE( 667)				ret->freed = false;
HXDLIN( 667)				ret->lazydel = false;
HXDLIN( 667)				ret->COLLISIONstate = (int)1;
HXDLIN( 667)				ret->COLLISIONstamp = (int)0;
HXDLIN( 667)				ret->SENSORstate = (int)1;
HXDLIN( 667)				ret->SENSORstamp = (int)0;
HXDLIN( 667)				ret->FLUIDstate = (int)1;
HXDLIN( 667)				ret->FLUIDstamp = (int)0;
            			}
            		}
HXLINE( 677)		if ((i1->id < i2->id)) {
HXLINE( 678)			ret->int1 = i1;
HXLINE( 679)			ret->int2 = i2;
            		}
            		else {
HXLINE( 682)			ret->int1 = i2;
HXLINE( 683)			ret->int2 = i1;
            		}
HXLINE( 685)		ret->id = ret->int1->id;
HXLINE( 686)		ret->di = ret->int2->id;
HXLINE( 695)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_CallbackSet_obj,get,return )

 ::zpp_nape::space::ZPP_CallbackSet ZPP_CallbackSet_obj::zpp_pool;


hx::ObjectPtr< ZPP_CallbackSet_obj > ZPP_CallbackSet_obj::__new() {
	hx::ObjectPtr< ZPP_CallbackSet_obj > __this = new ZPP_CallbackSet_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_CallbackSet_obj > ZPP_CallbackSet_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_CallbackSet_obj *__this = (ZPP_CallbackSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_CallbackSet_obj), true, "zpp_nape.space.ZPP_CallbackSet"));
	*(void **)__this = ZPP_CallbackSet_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_CallbackSet_obj::ZPP_CallbackSet_obj()
{
}

void ZPP_CallbackSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_CallbackSet);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(di,"di");
	HX_MARK_MEMBER_NAME(int1,"int1");
	HX_MARK_MEMBER_NAME(int2,"int2");
	HX_MARK_MEMBER_NAME(arbiters,"arbiters");
	HX_MARK_MEMBER_NAME(COLLISIONstate,"COLLISIONstate");
	HX_MARK_MEMBER_NAME(COLLISIONstamp,"COLLISIONstamp");
	HX_MARK_MEMBER_NAME(SENSORstate,"SENSORstate");
	HX_MARK_MEMBER_NAME(SENSORstamp,"SENSORstamp");
	HX_MARK_MEMBER_NAME(FLUIDstate,"FLUIDstate");
	HX_MARK_MEMBER_NAME(FLUIDstamp,"FLUIDstamp");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(_inuse,"_inuse");
	HX_MARK_MEMBER_NAME(modified,"modified");
	HX_MARK_MEMBER_NAME(pushmod,"pushmod");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(freed,"freed");
	HX_MARK_MEMBER_NAME(lazydel,"lazydel");
	HX_MARK_END_CLASS();
}

void ZPP_CallbackSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(di,"di");
	HX_VISIT_MEMBER_NAME(int1,"int1");
	HX_VISIT_MEMBER_NAME(int2,"int2");
	HX_VISIT_MEMBER_NAME(arbiters,"arbiters");
	HX_VISIT_MEMBER_NAME(COLLISIONstate,"COLLISIONstate");
	HX_VISIT_MEMBER_NAME(COLLISIONstamp,"COLLISIONstamp");
	HX_VISIT_MEMBER_NAME(SENSORstate,"SENSORstate");
	HX_VISIT_MEMBER_NAME(SENSORstamp,"SENSORstamp");
	HX_VISIT_MEMBER_NAME(FLUIDstate,"FLUIDstate");
	HX_VISIT_MEMBER_NAME(FLUIDstamp,"FLUIDstamp");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(_inuse,"_inuse");
	HX_VISIT_MEMBER_NAME(modified,"modified");
	HX_VISIT_MEMBER_NAME(pushmod,"pushmod");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(freed,"freed");
	HX_VISIT_MEMBER_NAME(lazydel,"lazydel");
}

hx::Val ZPP_CallbackSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		if (HX_FIELD_EQ(inName,"di") ) { return hx::Val( di); }
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"int1") ) { return hx::Val( int1); }
		if (HX_FIELD_EQ(inName,"int2") ) { return hx::Val( int2); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"elem") ) { return hx::Val( elem_dyn()); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		if (HX_FIELD_EQ(inName,"back") ) { return hx::Val( back_dyn()); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"front") ) { return hx::Val( front_dyn()); }
		if (HX_FIELD_EQ(inName,"freed") ) { return hx::Val( freed); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_inuse") ) { return hx::Val( _inuse); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { return hx::Val( pushmod); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		if (HX_FIELD_EQ(inName,"lazydel") ) { return hx::Val( lazydel); }
		if (HX_FIELD_EQ(inName,"add_arb") ) { return hx::Val( add_arb_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"arbiters") ) { return hx::Val( arbiters); }
		if (HX_FIELD_EQ(inName,"modified") ) { return hx::Val( modified); }
		if (HX_FIELD_EQ(inName,"setbegin") ) { return hx::Val( setbegin_dyn()); }
		if (HX_FIELD_EQ(inName,"sleeping") ) { return hx::Val( sleeping_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"empty_arb") ) { return hx::Val( empty_arb_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"FLUIDstate") ) { return hx::Val( FLUIDstate); }
		if (HX_FIELD_EQ(inName,"FLUIDstamp") ) { return hx::Val( FLUIDstamp); }
		if (HX_FIELD_EQ(inName,"pop_unsafe") ) { return hx::Val( pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove") ) { return hx::Val( try_remove_dyn()); }
		if (HX_FIELD_EQ(inName,"remove_arb") ) { return hx::Val( remove_arb_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"SENSORstate") ) { return hx::Val( SENSORstate); }
		if (HX_FIELD_EQ(inName,"SENSORstamp") ) { return hx::Val( SENSORstamp); }
		if (HX_FIELD_EQ(inName,"inlined_add") ) { return hx::Val( inlined_add_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_pop") ) { return hx::Val( inlined_pop_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_has") ) { return hx::Val( inlined_has_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator_at") ) { return hx::Val( iterator_at_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"really_empty") ) { return hx::Val( really_empty_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inlined_erase") ) { return hx::Val( inlined_erase_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_clear") ) { return hx::Val( inlined_clear_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"COLLISIONstate") ) { return hx::Val( COLLISIONstate); }
		if (HX_FIELD_EQ(inName,"COLLISIONstamp") ) { return hx::Val( COLLISIONstamp); }
		if (HX_FIELD_EQ(inName,"inlined_insert") ) { return hx::Val( inlined_insert_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_remove") ) { return hx::Val( inlined_remove_dyn()); }
		if (HX_FIELD_EQ(inName,"try_remove_arb") ) { return hx::Val( try_remove_arb_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_pop_unsafe") ) { return hx::Val( inlined_pop_unsafe_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_try_remove") ) { return hx::Val( inlined_try_remove_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_CallbackSet_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_CallbackSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"di") ) { di=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"int1") ) { int1=inValue.Cast<  ::zpp_nape::phys::ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"int2") ) { int2=inValue.Cast<  ::zpp_nape::phys::ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::space::ZPP_CallbackSet >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"freed") ) { freed=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_inuse") ) { _inuse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pushmod") ) { pushmod=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lazydel") ) { lazydel=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"arbiters") ) { arbiters=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Arbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modified") ) { modified=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"FLUIDstate") ) { FLUIDstate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLUIDstamp") ) { FLUIDstamp=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"SENSORstate") ) { SENSORstate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SENSORstamp") ) { SENSORstamp=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"COLLISIONstate") ) { COLLISIONstate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLLISIONstamp") ) { COLLISIONstamp=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_CallbackSet_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::space::ZPP_CallbackSet >(); return true; }
	}
	return false;
}

void ZPP_CallbackSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("di","\x85","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("int1","\x62","\x44","\xbb","\x45"));
	outFields->push(HX_HCSTRING("int2","\x63","\x44","\xbb","\x45"));
	outFields->push(HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21"));
	outFields->push(HX_HCSTRING("COLLISIONstate","\x7f","\xf4","\x84","\x52"));
	outFields->push(HX_HCSTRING("COLLISIONstamp","\x71","\xee","\x84","\x52"));
	outFields->push(HX_HCSTRING("SENSORstate","\x97","\xc5","\x86","\x8f"));
	outFields->push(HX_HCSTRING("SENSORstamp","\x89","\xbf","\x86","\x8f"));
	outFields->push(HX_HCSTRING("FLUIDstate","\xe7","\xb3","\xb6","\xc1"));
	outFields->push(HX_HCSTRING("FLUIDstamp","\xd9","\xad","\xb6","\xc1"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("_inuse","\xc3","\xd4","\x08","\xba"));
	outFields->push(HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("freed","\x38","\x7a","\x86","\x06"));
	outFields->push(HX_HCSTRING("lazydel","\xd7","\xe9","\xd5","\xe2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_CallbackSet_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,di),HX_HCSTRING("di","\x85","\x57","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Interactor*/ ,(int)offsetof(ZPP_CallbackSet_obj,int1),HX_HCSTRING("int1","\x62","\x44","\xbb","\x45")},
	{hx::fsObject /*::zpp_nape::phys::ZPP_Interactor*/ ,(int)offsetof(ZPP_CallbackSet_obj,int2),HX_HCSTRING("int2","\x63","\x44","\xbb","\x45")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Arbiter*/ ,(int)offsetof(ZPP_CallbackSet_obj,arbiters),HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,COLLISIONstate),HX_HCSTRING("COLLISIONstate","\x7f","\xf4","\x84","\x52")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,COLLISIONstamp),HX_HCSTRING("COLLISIONstamp","\x71","\xee","\x84","\x52")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,SENSORstate),HX_HCSTRING("SENSORstate","\x97","\xc5","\x86","\x8f")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,SENSORstamp),HX_HCSTRING("SENSORstamp","\x89","\xbf","\x86","\x8f")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,FLUIDstate),HX_HCSTRING("FLUIDstate","\xe7","\xb3","\xb6","\xc1")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,FLUIDstamp),HX_HCSTRING("FLUIDstamp","\xd9","\xad","\xb6","\xc1")},
	{hx::fsObject /*::zpp_nape::space::ZPP_CallbackSet*/ ,(int)offsetof(ZPP_CallbackSet_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsBool,(int)offsetof(ZPP_CallbackSet_obj,_inuse),HX_HCSTRING("_inuse","\xc3","\xd4","\x08","\xba")},
	{hx::fsBool,(int)offsetof(ZPP_CallbackSet_obj,modified),HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16")},
	{hx::fsBool,(int)offsetof(ZPP_CallbackSet_obj,pushmod),HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75")},
	{hx::fsInt,(int)offsetof(ZPP_CallbackSet_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsBool,(int)offsetof(ZPP_CallbackSet_obj,freed),HX_HCSTRING("freed","\x38","\x7a","\x86","\x06")},
	{hx::fsBool,(int)offsetof(ZPP_CallbackSet_obj,lazydel),HX_HCSTRING("lazydel","\xd7","\xe9","\xd5","\xe2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_CallbackSet_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_CallbackSet*/ ,(void *) &ZPP_CallbackSet_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_CallbackSet_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("di","\x85","\x57","\x00","\x00"),
	HX_HCSTRING("int1","\x62","\x44","\xbb","\x45"),
	HX_HCSTRING("int2","\x63","\x44","\xbb","\x45"),
	HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21"),
	HX_HCSTRING("COLLISIONstate","\x7f","\xf4","\x84","\x52"),
	HX_HCSTRING("COLLISIONstamp","\x71","\xee","\x84","\x52"),
	HX_HCSTRING("SENSORstate","\x97","\xc5","\x86","\x8f"),
	HX_HCSTRING("SENSORstamp","\x89","\xbf","\x86","\x8f"),
	HX_HCSTRING("FLUIDstate","\xe7","\xb3","\xb6","\xc1"),
	HX_HCSTRING("FLUIDstamp","\xd9","\xad","\xb6","\xc1"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("elem","\x8f","\xd8","\x14","\x43"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("_inuse","\xc3","\xd4","\x08","\xba"),
	HX_HCSTRING("modified","\x49","\xdb","\xc7","\x16"),
	HX_HCSTRING("pushmod","\x28","\x29","\x4b","\x75"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("setbegin","\x47","\xe3","\x5c","\x2b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("inlined_add","\x8d","\x4c","\x2e","\x02"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("inlined_insert","\x4d","\x34","\x10","\xa7"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("inlined_pop","\xfd","\xb7","\x39","\x02"),
	HX_HCSTRING("pop_unsafe","\x54","\x7c","\xec","\x75"),
	HX_HCSTRING("inlined_pop_unsafe","\x68","\x87","\xef","\x15"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("try_remove","\x08","\xb2","\x16","\x8d"),
	HX_HCSTRING("inlined_remove","\x58","\x8d","\xbb","\x0d"),
	HX_HCSTRING("inlined_try_remove","\x1c","\xbd","\x19","\x2d"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("inlined_erase","\x52","\xb6","\x9d","\xfa"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("inlined_clear","\xf9","\x3e","\xdc","\xcf"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("inlined_has","\xc6","\x99","\x33","\x02"),
	HX_HCSTRING("front","\xa9","\x18","\x8e","\x06"),
	HX_HCSTRING("back","\x27","\xda","\x10","\x41"),
	HX_HCSTRING("iterator_at","\xe4","\x89","\xd2","\x06"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("freed","\x38","\x7a","\x86","\x06"),
	HX_HCSTRING("lazydel","\xd7","\xe9","\xd5","\xe2"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("add_arb","\xf3","\x59","\x79","\x90"),
	HX_HCSTRING("try_remove_arb","\x5a","\x99","\xa1","\xfd"),
	HX_HCSTRING("remove_arb","\x96","\x51","\x5b","\xd1"),
	HX_HCSTRING("empty_arb","\x5f","\x48","\x14","\x11"),
	HX_HCSTRING("really_empty","\x79","\xa1","\xbd","\x2d"),
	HX_HCSTRING("sleeping","\x2b","\x58","\x93","\x10"),
	::String(null()) };

static void ZPP_CallbackSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_CallbackSet_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_CallbackSet_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_CallbackSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_CallbackSet_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_CallbackSet_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_CallbackSet_obj::__mClass;

static ::String ZPP_CallbackSet_obj_sStaticFields[] = {
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_CallbackSet_obj::__register()
{
	hx::Object *dummy = new ZPP_CallbackSet_obj;
	ZPP_CallbackSet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.space.ZPP_CallbackSet","\x4f","\x75","\x99","\x6d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_CallbackSet_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_CallbackSet_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_CallbackSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_CallbackSet_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_CallbackSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_CallbackSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_CallbackSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_CallbackSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_CallbackSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_CallbackSet_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8c1ddcc2f4543736_1059_boot)
HXLINE(1059)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace space
