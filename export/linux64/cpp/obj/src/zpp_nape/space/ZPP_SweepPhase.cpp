// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepData
#include <zpp_nape/space/ZPP_SweepData.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepPhase
#include <zpp_nape/space/ZPP_SweepPhase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_221_new,"zpp_nape.space.ZPP_SweepPhase","new",0x56ef2fef,"zpp_nape.space.ZPP_SweepPhase.new","zpp_nape/space/SweepPhase.hx",221,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_228___insert,"zpp_nape.space.ZPP_SweepPhase","__insert",0x31e1886a,"zpp_nape.space.ZPP_SweepPhase.__insert","zpp_nape/space/SweepPhase.hx",228,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_262___remove,"zpp_nape.space.ZPP_SweepPhase","__remove",0x988ce175,"zpp_nape.space.ZPP_SweepPhase.__remove","zpp_nape/space/SweepPhase.hx",262,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_305___sync,"zpp_nape.space.ZPP_SweepPhase","__sync",0xa167a14c,"zpp_nape.space.ZPP_SweepPhase.__sync","zpp_nape/space/SweepPhase.hx",305,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_307_sync_broadphase,"zpp_nape.space.ZPP_SweepPhase","sync_broadphase",0xb98da26c,"zpp_nape.space.ZPP_SweepPhase.sync_broadphase","zpp_nape/space/SweepPhase.hx",307,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_313_sync_broadphase_fast,"zpp_nape.space.ZPP_SweepPhase","sync_broadphase_fast",0x7d18f48f,"zpp_nape.space.ZPP_SweepPhase.sync_broadphase_fast","zpp_nape/space/SweepPhase.hx",313,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_346_broadphase,"zpp_nape.space.ZPP_SweepPhase","broadphase",0x06699e0a,"zpp_nape.space.ZPP_SweepPhase.broadphase","zpp_nape/space/SweepPhase.hx",346,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_385_clear,"zpp_nape.space.ZPP_SweepPhase","clear",0x043912dc,"zpp_nape.space.ZPP_SweepPhase.clear","zpp_nape/space/SweepPhase.hx",385,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_390_shapesUnderPoint,"zpp_nape.space.ZPP_SweepPhase","shapesUnderPoint",0xbd03bffb,"zpp_nape.space.ZPP_SweepPhase.shapesUnderPoint","zpp_nape/space/SweepPhase.hx",390,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_429_bodiesUnderPoint,"zpp_nape.space.ZPP_SweepPhase","bodiesUnderPoint",0xf576eec9,"zpp_nape.space.ZPP_SweepPhase.bodiesUnderPoint","zpp_nape/space/SweepPhase.hx",429,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_471_shapesInAABB,"zpp_nape.space.ZPP_SweepPhase","shapesInAABB",0x839dd368,"zpp_nape.space.ZPP_SweepPhase.shapesInAABB","zpp_nape/space/SweepPhase.hx",471,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_499_bodiesInAABB,"zpp_nape.space.ZPP_SweepPhase","bodiesInAABB",0x28420336,"zpp_nape.space.ZPP_SweepPhase.bodiesInAABB","zpp_nape/space/SweepPhase.hx",499,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_549_shapesInCircle,"zpp_nape.space.ZPP_SweepPhase","shapesInCircle",0xf9d910f8,"zpp_nape.space.ZPP_SweepPhase.shapesInCircle","zpp_nape/space/SweepPhase.hx",549,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_570_bodiesInCircle,"zpp_nape.space.ZPP_SweepPhase","bodiesInCircle",0x33c35046,"zpp_nape.space.ZPP_SweepPhase.bodiesInCircle","zpp_nape/space/SweepPhase.hx",570,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_603_shapesInShape,"zpp_nape.space.ZPP_SweepPhase","shapesInShape",0x1d909939,"zpp_nape.space.ZPP_SweepPhase.shapesInShape","zpp_nape/space/SweepPhase.hx",603,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_624_bodiesInShape,"zpp_nape.space.ZPP_SweepPhase","bodiesInShape",0x88963dab,"zpp_nape.space.ZPP_SweepPhase.bodiesInShape","zpp_nape/space/SweepPhase.hx",624,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_657_rayCast,"zpp_nape.space.ZPP_SweepPhase","rayCast",0xccc030d8,"zpp_nape.space.ZPP_SweepPhase.rayCast","zpp_nape/space/SweepPhase.hx",657,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9aac401167d1c359_745_rayMultiCast,"zpp_nape.space.ZPP_SweepPhase","rayMultiCast",0xad96b91f,"zpp_nape.space.ZPP_SweepPhase.rayMultiCast","zpp_nape/space/SweepPhase.hx",745,0x6f338844)
namespace zpp_nape{
namespace space{

void ZPP_SweepPhase_obj::__construct( ::zpp_nape::space::ZPP_Space space){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_221_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(space,"space")
HXLINE( 498)		this->failed = null();
HXLINE( 222)		this->list = null();
HXLINE( 223)		super::__construct();
HXLINE( 224)		this->space = space;
HXLINE( 225)		this->is_sweep = true;
HXLINE( 226)		this->sweep = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic ZPP_SweepPhase_obj::__CreateEmpty() { return new ZPP_SweepPhase_obj; }

void *ZPP_SweepPhase_obj::_hx_vtable = 0;

Dynamic ZPP_SweepPhase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SweepPhase_obj > _hx_result = new ZPP_SweepPhase_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ZPP_SweepPhase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4394362d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4394362d;
	} else {
		return inClassId==(int)0x7fc88af7;
	}
}

void ZPP_SweepPhase_obj::__insert( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_228___insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 237)		HX_VAR(  ::zpp_nape::space::ZPP_SweepData,dat);
HXLINE( 239)		if (hx::IsNull( ::zpp_nape::space::ZPP_SweepData_obj::zpp_pool )) {
HXLINE( 240)			dat =  ::zpp_nape::space::ZPP_SweepData_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 246)			dat = ::zpp_nape::space::ZPP_SweepData_obj::zpp_pool;
HXLINE( 247)			::zpp_nape::space::ZPP_SweepData_obj::zpp_pool = dat->next;
HXLINE( 248)			dat->next = null();
            		}
HXLINE( 255)		shape->sweep = dat;
HXLINE( 256)		dat->shape = shape;
HXLINE( 257)		dat->aabb = shape->aabb;
HXLINE( 258)		dat->next = this->list;
HXLINE( 259)		if (hx::IsNotNull( this->list )) {
HXLINE( 259)			this->list->prev = dat;
            		}
HXLINE( 260)		this->list = dat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_SweepPhase_obj,__insert,(void))

void ZPP_SweepPhase_obj::__remove( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_262___remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 271)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,dat) = shape->sweep;
HXLINE( 272)		if (hx::IsNull( dat->prev )) {
HXLINE( 272)			this->list = dat->next;
            		}
            		else {
HXLINE( 273)			dat->prev->next = dat->next;
            		}
HXLINE( 274)		if (hx::IsNotNull( dat->next )) {
HXLINE( 274)			dat->next->prev = dat->prev;
            		}
HXLINE( 275)		shape->sweep = null();
HXLINE( 276)		{
HXLINE( 286)			{
HXLINE( 286)				dat->prev = null();
HXDLIN( 286)				dat->shape = null();
HXDLIN( 286)				dat->aabb = null();
            			}
HXLINE( 287)			dat->next = ::zpp_nape::space::ZPP_SweepData_obj::zpp_pool;
HXLINE( 288)			::zpp_nape::space::ZPP_SweepData_obj::zpp_pool = dat;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_SweepPhase_obj,__remove,(void))

void ZPP_SweepPhase_obj::_hx___sync( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_305___sync)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 305)		if (!(this->space->continuous)) {
HXLINE( 305)			if (shape->zip_aabb) {
HXLINE( 305)				if (hx::IsNotNull( shape->body )) {
HXLINE( 305)					shape->zip_aabb = false;
HXDLIN( 305)					if ((shape->type == (int)0)) {
HXLINE( 305)						HX_VARI(  ::zpp_nape::shape::ZPP_Circle,_this) = shape->circle;
HXDLIN( 305)						if (_this->zip_worldCOM) {
HXLINE( 305)							if (hx::IsNotNull( _this->body )) {
HXLINE( 305)								_this->zip_worldCOM = false;
HXDLIN( 305)								if (_this->zip_localCOM) {
HXLINE( 305)									_this->zip_localCOM = false;
HXDLIN( 305)									if ((_this->type == (int)1)) {
HXLINE( 305)										HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this1,"_this") = _this->polygon;
HXDLIN( 305)										if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE( 305)											_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 305)											_this1->localCOMy = _this1->lverts->next->y;
            										}
            										else {
HXLINE( 305)											if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE( 305)												{
HXLINE( 305)													_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 305)													_this1->localCOMy = _this1->lverts->next->y;
            												}
HXDLIN( 305)												{
HXLINE( 305)													_this1->localCOMx = (_this1->localCOMx + _this1->lverts->next->next->x);
HXDLIN( 305)													_this1->localCOMy = (_this1->localCOMy + _this1->lverts->next->next->y);
            												}
HXDLIN( 305)												{
HXLINE( 305)													_this1->localCOMx = (_this1->localCOMx * ((Float)0.5));
HXDLIN( 305)													_this1->localCOMy = (_this1->localCOMy * ((Float)0.5));
            												}
            											}
            											else {
HXLINE( 305)												{
HXLINE( 305)													_this1->localCOMx = (int)0;
HXDLIN( 305)													_this1->localCOMy = (int)0;
            												}
HXDLIN( 305)												HX_VARI( Float,area) = ((Float)0.0);
HXDLIN( 305)												{
HXLINE( 305)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this1->lverts->next;
HXDLIN( 305)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite;
HXDLIN( 305)													cx_ite = cx_ite->next;
HXDLIN( 305)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite;
HXDLIN( 305)													cx_ite = cx_ite->next;
HXDLIN( 305)													while(hx::IsNotNull( cx_ite )){
HXLINE( 305)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite;
HXDLIN( 305)														{
HXLINE( 305)															area = (area + (v->x * (w->y - u->y)));
HXDLIN( 305)															HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 305)															_this1->localCOMx = (_this1->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 305)															_this1->localCOMy = (_this1->localCOMy + ((v->y + w->y) * cf));
            														}
HXDLIN( 305)														u = v;
HXDLIN( 305)														v = w;
HXDLIN( 305)														cx_ite = cx_ite->next;
            													}
HXDLIN( 305)													cx_ite = _this1->lverts->next;
HXDLIN( 305)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite;
HXDLIN( 305)													{
HXLINE( 305)														area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 305)														HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 305)														_this1->localCOMx = (_this1->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 305)														_this1->localCOMy = (_this1->localCOMy + ((v->y + w1->y) * cf1));
            													}
HXDLIN( 305)													u = v;
HXDLIN( 305)													cx_ite = cx_ite->next;
HXDLIN( 305)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite;
HXDLIN( 305)													{
HXLINE( 305)														area = (area + (w1->x * (w2->y - u->y)));
HXDLIN( 305)														HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN( 305)														_this1->localCOMx = (_this1->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN( 305)														_this1->localCOMy = (_this1->localCOMy + ((w1->y + w2->y) * cf2));
            													}
            												}
HXDLIN( 305)												area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN( 305)												{
HXLINE( 305)													HX_VARI( Float,t) = area;
HXDLIN( 305)													_this1->localCOMx = (_this1->localCOMx * t);
HXDLIN( 305)													_this1->localCOMy = (_this1->localCOMy * t);
            												}
            											}
            										}
            									}
HXDLIN( 305)									if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE( 305)										_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN( 305)										_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            									}
            								}
HXDLIN( 305)								{
HXLINE( 305)									HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN( 305)									if (_this2->zip_axis) {
HXLINE( 305)										_this2->zip_axis = false;
HXDLIN( 305)										{
HXLINE( 305)											_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN( 305)											_this2->axisy = ::Math_obj::cos(_this2->rot);
            										}
            									}
            								}
HXDLIN( 305)								{
HXLINE( 305)									_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN( 305)									_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            								}
            							}
            						}
HXDLIN( 305)						HX_VARI( Float,rx) = _this->radius;
HXDLIN( 305)						HX_VARI( Float,ry) = _this->radius;
HXDLIN( 305)						{
HXLINE( 305)							_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN( 305)							_this->aabb->miny = (_this->worldCOMy - ry);
            						}
HXDLIN( 305)						{
HXLINE( 305)							_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN( 305)							_this->aabb->maxy = (_this->worldCOMy + ry);
            						}
            					}
            					else {
HXLINE( 305)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this3,"_this") = shape->polygon;
HXDLIN( 305)						if (_this3->zip_gverts) {
HXLINE( 305)							if (hx::IsNotNull( _this3->body )) {
HXLINE( 305)								_this3->zip_gverts = false;
HXDLIN( 305)								_this3->validate_lverts();
HXDLIN( 305)								{
HXLINE( 305)									HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this4,"_this") = _this3->body;
HXDLIN( 305)									if (_this4->zip_axis) {
HXLINE( 305)										_this4->zip_axis = false;
HXDLIN( 305)										{
HXLINE( 305)											_this4->axisx = ::Math_obj::sin(_this4->rot);
HXDLIN( 305)											_this4->axisy = ::Math_obj::cos(_this4->rot);
            										}
            									}
            								}
HXDLIN( 305)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this3->lverts->next;
HXDLIN( 305)								{
HXLINE( 305)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this3->gverts->next;
HXDLIN( 305)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 305)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite1;
HXDLIN( 305)										{
HXLINE( 305)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 305)											li = li->next;
HXDLIN( 305)											{
HXLINE( 305)												g->x = (_this3->body->posx + ((_this3->body->axisy * l->x) - (_this3->body->axisx * l->y)));
HXDLIN( 305)												g->y = (_this3->body->posy + ((l->x * _this3->body->axisx) + (l->y * _this3->body->axisy)));
            											}
            										}
HXDLIN( 305)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
            						}
HXDLIN( 305)						 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this3->gverts->next;
HXDLIN( 305)						{
HXLINE( 305)							_this3->aabb->minx = _this5->x;
HXDLIN( 305)							_this3->aabb->miny = _this5->y;
            						}
HXDLIN( 305)						{
HXLINE( 305)							_this3->aabb->maxx = _this5->x;
HXDLIN( 305)							_this3->aabb->maxy = _this5->y;
            						}
HXDLIN( 305)						{
HXLINE( 305)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this3->gverts->next->next;
HXDLIN( 305)							while(hx::IsNotNull( cx_ite2 )){
HXLINE( 305)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite2;
HXDLIN( 305)								{
HXLINE( 305)									if ((p->x < _this3->aabb->minx)) {
HXLINE( 305)										_this3->aabb->minx = p->x;
            									}
HXDLIN( 305)									if ((p->x > _this3->aabb->maxx)) {
HXLINE( 305)										_this3->aabb->maxx = p->x;
            									}
HXDLIN( 305)									if ((p->y < _this3->aabb->miny)) {
HXLINE( 305)										_this3->aabb->miny = p->y;
            									}
HXDLIN( 305)									if ((p->y > _this3->aabb->maxy)) {
HXLINE( 305)										_this3->aabb->maxy = p->y;
            									}
            								}
HXDLIN( 305)								cx_ite2 = cx_ite2->next;
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_SweepPhase_obj,_hx___sync,(void))

void ZPP_SweepPhase_obj::sync_broadphase(){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_307_sync_broadphase)
            	HX_STACK_THIS(this)
HXLINE( 308)		this->space->validation();
HXLINE( 309)		if (hx::IsNotNull( this->list )) {
HXLINE( 309)			HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list->next;
HXDLIN( 309)			while(hx::IsNotNull( a )){
HXLINE( 309)				HX_VARI(  ::zpp_nape::space::ZPP_SweepData,n) = a->next;
HXDLIN( 309)				HX_VARI(  ::zpp_nape::space::ZPP_SweepData,b) = a->prev;
HXDLIN( 309)				if ((a->aabb->minx > b->aabb->minx)) {
HXLINE( 309)					a = n;
HXDLIN( 309)					continue;
            				}
HXDLIN( 309)				while(true){
HXLINE( 309)					bool _hx_tmp;
HXDLIN( 309)					if (hx::IsNotNull( b->prev )) {
HXLINE( 309)						_hx_tmp = (b->prev->aabb->minx > a->aabb->minx);
            					}
            					else {
HXLINE( 309)						_hx_tmp = false;
            					}
HXDLIN( 309)					if (!(_hx_tmp)) {
HXLINE( 309)						goto _hx_goto_8;
            					}
HXDLIN( 309)					b = b->prev;
            				}
            				_hx_goto_8:;
HXDLIN( 309)				HX_VARI(  ::zpp_nape::space::ZPP_SweepData,prev) = a->prev;
HXDLIN( 309)				prev->next = a->next;
HXDLIN( 309)				if (hx::IsNotNull( a->next )) {
HXLINE( 309)					a->next->prev = prev;
            				}
HXDLIN( 309)				if (hx::IsNull( b->prev )) {
HXLINE( 309)					a->prev = null();
HXDLIN( 309)					this->list = a;
HXDLIN( 309)					a->next = b;
HXDLIN( 309)					b->prev = a;
            				}
            				else {
HXLINE( 309)					a->prev = b->prev;
HXDLIN( 309)					b->prev = a;
HXDLIN( 309)					a->prev->next = a;
HXDLIN( 309)					a->next = b;
            				}
HXDLIN( 309)				a = n;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SweepPhase_obj,sync_broadphase,(void))

void ZPP_SweepPhase_obj::sync_broadphase_fast(){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_313_sync_broadphase_fast)
            	HX_STACK_THIS(this)
HXLINE( 314)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list->next;
HXLINE( 315)		while(hx::IsNotNull( a )){
HXLINE( 318)			HX_VARI(  ::zpp_nape::space::ZPP_SweepData,n) = a->next;
HXLINE( 319)			HX_VARI(  ::zpp_nape::space::ZPP_SweepData,b) = a->prev;
HXLINE( 320)			if ((a->aabb->minx > b->aabb->minx)) {
HXLINE( 321)				a = n;
HXLINE( 322)				continue;
            			}
HXLINE( 326)			while(true){
HXLINE( 326)				bool _hx_tmp;
HXDLIN( 326)				if (hx::IsNotNull( b->prev )) {
HXLINE( 326)					_hx_tmp = (b->prev->aabb->minx > a->aabb->minx);
            				}
            				else {
HXLINE( 326)					_hx_tmp = false;
            				}
HXDLIN( 326)				if (!(_hx_tmp)) {
HXLINE( 326)					goto _hx_goto_11;
            				}
HXDLIN( 326)				b = b->prev;
            			}
            			_hx_goto_11:;
HXLINE( 327)			HX_VARI(  ::zpp_nape::space::ZPP_SweepData,prev) = a->prev;
HXLINE( 328)			prev->next = a->next;
HXLINE( 329)			if (hx::IsNotNull( a->next )) {
HXLINE( 329)				a->next->prev = prev;
            			}
HXLINE( 330)			if (hx::IsNull( b->prev )) {
HXLINE( 331)				a->prev = null();
HXLINE( 332)				this->list = a;
HXLINE( 333)				a->next = b;
HXLINE( 334)				b->prev = a;
            			}
            			else {
HXLINE( 337)				a->prev = b->prev;
HXLINE( 338)				b->prev = a;
HXLINE( 339)				a->prev->next = a;
HXLINE( 340)				a->next = b;
            			}
HXLINE( 342)			a = n;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SweepPhase_obj,sync_broadphase_fast,(void))

void ZPP_SweepPhase_obj::broadphase( ::zpp_nape::space::ZPP_Space space,bool discrete){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_346_broadphase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(space,"space")
            	HX_STACK_ARG(discrete,"discrete")
HXLINE( 346)		if (hx::IsNotNull( this->list )) {
HXLINE( 347)			{
HXLINE( 347)				HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list->next;
HXDLIN( 347)				while(hx::IsNotNull( a )){
HXLINE( 347)					HX_VARI(  ::zpp_nape::space::ZPP_SweepData,n) = a->next;
HXDLIN( 347)					HX_VARI(  ::zpp_nape::space::ZPP_SweepData,b) = a->prev;
HXDLIN( 347)					if ((a->aabb->minx > b->aabb->minx)) {
HXLINE( 347)						a = n;
HXDLIN( 347)						continue;
            					}
HXDLIN( 347)					while(true){
HXLINE( 347)						bool _hx_tmp;
HXDLIN( 347)						if (hx::IsNotNull( b->prev )) {
HXLINE( 347)							_hx_tmp = (b->prev->aabb->minx > a->aabb->minx);
            						}
            						else {
HXLINE( 347)							_hx_tmp = false;
            						}
HXDLIN( 347)						if (!(_hx_tmp)) {
HXLINE( 347)							goto _hx_goto_14;
            						}
HXDLIN( 347)						b = b->prev;
            					}
            					_hx_goto_14:;
HXDLIN( 347)					HX_VARI(  ::zpp_nape::space::ZPP_SweepData,prev) = a->prev;
HXDLIN( 347)					prev->next = a->next;
HXDLIN( 347)					if (hx::IsNotNull( a->next )) {
HXLINE( 347)						a->next->prev = prev;
            					}
HXDLIN( 347)					if (hx::IsNull( b->prev )) {
HXLINE( 347)						a->prev = null();
HXDLIN( 347)						this->list = a;
HXDLIN( 347)						a->next = b;
HXDLIN( 347)						b->prev = a;
            					}
            					else {
HXLINE( 347)						a->prev = b->prev;
HXDLIN( 347)						b->prev = a;
HXDLIN( 347)						a->prev->next = a;
HXDLIN( 347)						a->next = b;
            					}
HXDLIN( 347)					a = n;
            				}
            			}
HXLINE( 348)			HX_VARI(  ::zpp_nape::space::ZPP_SweepData,d1) = this->list;
HXLINE( 349)			while(hx::IsNotNull( d1 )){
HXLINE( 350)				HX_VARI(  ::zpp_nape::space::ZPP_SweepData,d2) = d1->next;
HXLINE( 351)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s1) = d1->shape;
HXLINE( 352)				HX_VARI(  ::zpp_nape::phys::ZPP_Body,b1) = s1->body;
HXLINE( 353)				HX_VARI( Float,bottom) = d1->aabb->maxx;
HXLINE( 354)				while(hx::IsNotNull( d2 )){
HXLINE( 355)					if ((d2->aabb->minx > bottom)) {
HXLINE( 355)						goto _hx_goto_16;
            					}
HXLINE( 356)					HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s2) = d2->shape;
HXLINE( 357)					HX_VARI(  ::zpp_nape::phys::ZPP_Body,b2) = s2->body;
HXLINE( 358)					if (hx::IsEq( b2,b1 )) {
HXLINE( 359)						d2 = d2->next;
HXLINE( 360)						continue;
            					}
HXLINE( 362)					bool _hx_tmp1;
HXDLIN( 362)					if ((b1->type == (int)1)) {
HXLINE( 362)						_hx_tmp1 = (b2->type == (int)1);
            					}
            					else {
HXLINE( 362)						_hx_tmp1 = false;
            					}
HXDLIN( 362)					if (_hx_tmp1) {
HXLINE( 363)						d2 = d2->next;
HXLINE( 364)						continue;
            					}
HXLINE( 366)					bool _hx_tmp2;
HXDLIN( 366)					if (b1->component->sleeping) {
HXLINE( 366)						_hx_tmp2 = b2->component->sleeping;
            					}
            					else {
HXLINE( 366)						_hx_tmp2 = false;
            					}
HXDLIN( 366)					if (_hx_tmp2) {
HXLINE( 367)						d2 = d2->next;
HXLINE( 368)						continue;
            					}
HXLINE( 370)					HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = s1->aabb;
HXDLIN( 370)					HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = s2->aabb;
HXDLIN( 370)					bool _hx_tmp3;
HXDLIN( 370)					if (!((x->miny > _this->maxy))) {
HXLINE( 370)						_hx_tmp3 = (_this->miny > x->maxy);
            					}
            					else {
HXLINE( 370)						_hx_tmp3 = true;
            					}
HXDLIN( 370)					if (!(_hx_tmp3)) {
HXLINE( 371)						if (discrete) {
HXLINE( 372)							bool _hx_tmp4;
HXDLIN( 372)							if ((b1->type == (int)2)) {
HXLINE( 372)								_hx_tmp4 = (b2->type != (int)2);
            							}
            							else {
HXLINE( 372)								_hx_tmp4 = true;
            							}
HXDLIN( 372)							space->narrowPhase(s1,s2,_hx_tmp4,null(),false);
            						}
            						else {
HXLINE( 375)							bool _hx_tmp5;
HXDLIN( 375)							if ((b1->type == (int)2)) {
HXLINE( 375)								_hx_tmp5 = (b2->type != (int)2);
            							}
            							else {
HXLINE( 375)								_hx_tmp5 = true;
            							}
HXDLIN( 375)							space->continuousEvent(s1,s2,_hx_tmp5,null(),false);
            						}
            					}
HXLINE( 378)					d2 = d2->next;
            				}
            				_hx_goto_16:;
HXLINE( 380)				d1 = d1->next;
            			}
            		}
            	}


void ZPP_SweepPhase_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_385_clear)
            	HX_STACK_THIS(this)
HXLINE( 385)		while(hx::IsNotNull( this->list )){
HXLINE( 386)			this->list->shape->removedFromSpace();
HXLINE( 387)			this->__remove(this->list->shape);
            		}
            	}


 ::nape::shape::ShapeList ZPP_SweepPhase_obj::shapesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_390_shapesUnderPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 391)		this->sync_broadphase();
HXLINE( 392)		HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,ret);
HXDLIN( 392)		{
HXLINE( 392)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 392)				ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 392)				ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 392)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN( 392)				ret->next = null();
            			}
HXDLIN( 392)			ret->weak = false;
            		}
HXDLIN( 392)		ret->_immutable = false;
HXDLIN( 392)		{
HXLINE( 392)			ret->x = x;
HXDLIN( 392)			ret->y = y;
            		}
HXDLIN( 392)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = ret;
HXLINE( 393)		HX_VAR_NAME(  ::nape::shape::ShapeList,ret1,"ret");
HXDLIN( 393)		if (hx::IsNull( output )) {
HXLINE( 393)			ret1 =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 393)			ret1 = output;
            		}
HXLINE( 394)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 395)		while(true){
HXLINE( 395)			bool _hx_tmp;
HXDLIN( 395)			if (hx::IsNotNull( a )) {
HXLINE( 395)				_hx_tmp = (a->aabb->minx > x);
            			}
            			else {
HXLINE( 395)				_hx_tmp = false;
            			}
HXDLIN( 395)			if (!(_hx_tmp)) {
HXLINE( 395)				goto _hx_goto_20;
            			}
HXDLIN( 395)			a = a->next;
            		}
            		_hx_goto_20:;
HXLINE( 396)		while(true){
HXLINE( 396)			bool _hx_tmp1;
HXDLIN( 396)			if (hx::IsNotNull( a )) {
HXLINE( 396)				_hx_tmp1 = (a->aabb->minx <= x);
            			}
            			else {
HXLINE( 396)				_hx_tmp1 = false;
            			}
HXDLIN( 396)			if (!(_hx_tmp1)) {
HXLINE( 396)				goto _hx_goto_21;
            			}
HXLINE( 397)			bool _hx_tmp2;
HXDLIN( 397)			bool _hx_tmp3;
HXDLIN( 397)			if ((a->aabb->maxx >= x)) {
HXLINE( 397)				_hx_tmp3 = (a->aabb->miny <= y);
            			}
            			else {
HXLINE( 397)				_hx_tmp3 = false;
            			}
HXDLIN( 397)			if (_hx_tmp3) {
HXLINE( 397)				_hx_tmp2 = (a->aabb->maxy >= y);
            			}
            			else {
HXLINE( 397)				_hx_tmp2 = false;
            			}
HXDLIN( 397)			if (_hx_tmp2) {
HXLINE( 398)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape) = a->shape;
HXLINE( 399)				bool _hx_tmp4;
HXDLIN( 399)				if (hx::IsNotNull( filter )) {
HXLINE( 399)					HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this) = shape->filter;
HXDLIN( 399)					if ((((int)_this->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 399)						_hx_tmp4 = (((int)filter->collisionMask & (int)_this->collisionGroup) != (int)0);
            					}
            					else {
HXLINE( 399)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 399)					_hx_tmp4 = true;
            				}
HXDLIN( 399)				if (_hx_tmp4) {
HXLINE( 400)					if ((shape->type == (int)0)) {
HXLINE( 401)						if (::zpp_nape::geom::ZPP_Collide_obj::circleContains(shape->circle,v)) {
HXLINE( 401)							ret1->push(shape->outer);
            						}
            					}
            					else {
HXLINE( 404)						if (::zpp_nape::geom::ZPP_Collide_obj::polyContains(shape->polygon,v)) {
HXLINE( 404)							ret1->push(shape->outer);
            						}
            					}
            				}
            			}
HXLINE( 408)			a = a->next;
            		}
            		_hx_goto_21:;
HXLINE( 410)		{
HXLINE( 420)			{
HXLINE( 420)				if (hx::IsNotNull( v->outer )) {
HXLINE( 420)					v->outer->zpp_inner = null();
HXDLIN( 420)					v->outer = null();
            				}
HXDLIN( 420)				v->_isimmutable = null();
HXDLIN( 420)				v->_validate = null();
HXDLIN( 420)				v->_invalidate = null();
            			}
HXLINE( 421)			v->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 422)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = v;
            		}
HXLINE( 427)		return ret1;
            	}


 ::nape::phys::BodyList ZPP_SweepPhase_obj::bodiesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_429_bodiesUnderPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 430)		this->sync_broadphase();
HXLINE( 431)		HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,ret);
HXDLIN( 431)		{
HXLINE( 431)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 431)				ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 431)				ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 431)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN( 431)				ret->next = null();
            			}
HXDLIN( 431)			ret->weak = false;
            		}
HXDLIN( 431)		ret->_immutable = false;
HXDLIN( 431)		{
HXLINE( 431)			ret->x = x;
HXDLIN( 431)			ret->y = y;
            		}
HXDLIN( 431)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = ret;
HXLINE( 432)		HX_VAR_NAME(  ::nape::phys::BodyList,ret1,"ret");
HXDLIN( 432)		if (hx::IsNull( output )) {
HXLINE( 432)			ret1 =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 432)			ret1 = output;
            		}
HXLINE( 433)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 434)		while(true){
HXLINE( 434)			bool _hx_tmp;
HXDLIN( 434)			if (hx::IsNotNull( a )) {
HXLINE( 434)				_hx_tmp = (a->aabb->minx > x);
            			}
            			else {
HXLINE( 434)				_hx_tmp = false;
            			}
HXDLIN( 434)			if (!(_hx_tmp)) {
HXLINE( 434)				goto _hx_goto_23;
            			}
HXDLIN( 434)			a = a->next;
            		}
            		_hx_goto_23:;
HXLINE( 435)		while(true){
HXLINE( 435)			bool _hx_tmp1;
HXDLIN( 435)			if (hx::IsNotNull( a )) {
HXLINE( 435)				_hx_tmp1 = (a->aabb->minx <= x);
            			}
            			else {
HXLINE( 435)				_hx_tmp1 = false;
            			}
HXDLIN( 435)			if (!(_hx_tmp1)) {
HXLINE( 435)				goto _hx_goto_24;
            			}
HXLINE( 436)			bool _hx_tmp2;
HXDLIN( 436)			bool _hx_tmp3;
HXDLIN( 436)			if ((a->aabb->maxx >= x)) {
HXLINE( 436)				_hx_tmp3 = (a->aabb->miny <= y);
            			}
            			else {
HXLINE( 436)				_hx_tmp3 = false;
            			}
HXDLIN( 436)			if (_hx_tmp3) {
HXLINE( 436)				_hx_tmp2 = (a->aabb->maxy >= y);
            			}
            			else {
HXLINE( 436)				_hx_tmp2 = false;
            			}
HXDLIN( 436)			if (_hx_tmp2) {
HXLINE( 437)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape) = a->shape;
HXLINE( 438)				HX_VARI(  ::nape::phys::Body,body) = shape->body->outer;
HXLINE( 439)				if (!(ret1->has(body))) {
HXLINE( 440)					bool _hx_tmp4;
HXDLIN( 440)					if (hx::IsNotNull( filter )) {
HXLINE( 440)						HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this) = shape->filter;
HXDLIN( 440)						if ((((int)_this->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 440)							_hx_tmp4 = (((int)filter->collisionMask & (int)_this->collisionGroup) != (int)0);
            						}
            						else {
HXLINE( 440)							_hx_tmp4 = false;
            						}
            					}
            					else {
HXLINE( 440)						_hx_tmp4 = true;
            					}
HXDLIN( 440)					if (_hx_tmp4) {
HXLINE( 441)						if ((shape->type == (int)0)) {
HXLINE( 442)							if (::zpp_nape::geom::ZPP_Collide_obj::circleContains(shape->circle,v)) {
HXLINE( 442)								ret1->push(body);
            							}
            						}
            						else {
HXLINE( 445)							if (::zpp_nape::geom::ZPP_Collide_obj::polyContains(shape->polygon,v)) {
HXLINE( 445)								ret1->push(body);
            							}
            						}
            					}
            				}
            			}
HXLINE( 450)			a = a->next;
            		}
            		_hx_goto_24:;
HXLINE( 452)		{
HXLINE( 462)			{
HXLINE( 462)				if (hx::IsNotNull( v->outer )) {
HXLINE( 462)					v->outer->zpp_inner = null();
HXDLIN( 462)					v->outer = null();
            				}
HXDLIN( 462)				v->_isimmutable = null();
HXDLIN( 462)				v->_validate = null();
HXDLIN( 462)				v->_invalidate = null();
            			}
HXLINE( 463)			v->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 464)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = v;
            		}
HXLINE( 469)		return ret1;
            	}


 ::nape::shape::ShapeList ZPP_SweepPhase_obj::shapesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_471_shapesInAABB)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
            	HX_STACK_ARG(strict,"strict")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 472)		this->sync_broadphase();
HXLINE( 473)		this->updateAABBShape(aabb);
HXLINE( 474)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,ab) = this->aabbShape->zpp_inner->aabb;
HXLINE( 475)		HX_VAR(  ::nape::shape::ShapeList,ret);
HXDLIN( 475)		if (hx::IsNull( output )) {
HXLINE( 475)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 475)			ret = output;
            		}
HXLINE( 476)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 477)		while(true){
HXLINE( 477)			bool _hx_tmp;
HXDLIN( 477)			if (hx::IsNotNull( a )) {
HXLINE( 477)				_hx_tmp = (a->aabb->maxx < ab->minx);
            			}
            			else {
HXLINE( 477)				_hx_tmp = false;
            			}
HXDLIN( 477)			if (!(_hx_tmp)) {
HXLINE( 477)				goto _hx_goto_26;
            			}
HXDLIN( 477)			a = a->next;
            		}
            		_hx_goto_26:;
HXLINE( 478)		while(true){
HXLINE( 478)			bool _hx_tmp1;
HXDLIN( 478)			if (hx::IsNotNull( a )) {
HXLINE( 478)				_hx_tmp1 = (a->aabb->minx <= ab->maxx);
            			}
            			else {
HXLINE( 478)				_hx_tmp1 = false;
            			}
HXDLIN( 478)			if (!(_hx_tmp1)) {
HXLINE( 478)				goto _hx_goto_27;
            			}
HXLINE( 479)			HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape) = a->shape;
HXLINE( 480)			bool _hx_tmp2;
HXDLIN( 480)			if (hx::IsNotNull( filter )) {
HXLINE( 480)				HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this) = shape->filter;
HXDLIN( 480)				if ((((int)_this->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 480)					_hx_tmp2 = (((int)filter->collisionMask & (int)_this->collisionGroup) != (int)0);
            				}
            				else {
HXLINE( 480)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 480)				_hx_tmp2 = true;
            			}
HXDLIN( 480)			if (_hx_tmp2) {
HXLINE( 481)				if (strict) {
HXLINE( 482)					if (containment) {
HXLINE( 483)						if (::zpp_nape::geom::ZPP_Collide_obj::containTest(this->aabbShape->zpp_inner,shape)) {
HXLINE( 483)							ret->push(shape->outer);
            						}
            					}
            					else {
HXLINE( 486)						HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = a->aabb;
HXDLIN( 486)						bool _hx_tmp3;
HXDLIN( 486)						bool _hx_tmp4;
HXDLIN( 486)						bool _hx_tmp5;
HXDLIN( 486)						if ((x->minx >= ab->minx)) {
HXLINE( 486)							_hx_tmp5 = (x->miny >= ab->miny);
            						}
            						else {
HXLINE( 486)							_hx_tmp5 = false;
            						}
HXDLIN( 486)						if (_hx_tmp5) {
HXLINE( 486)							_hx_tmp4 = (x->maxx <= ab->maxx);
            						}
            						else {
HXLINE( 486)							_hx_tmp4 = false;
            						}
HXDLIN( 486)						if (_hx_tmp4) {
HXLINE( 486)							_hx_tmp3 = (x->maxy <= ab->maxy);
            						}
            						else {
HXLINE( 486)							_hx_tmp3 = false;
            						}
HXDLIN( 486)						if (_hx_tmp3) {
HXLINE( 486)							ret->push(shape->outer);
            						}
            						else {
HXLINE( 487)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = a->aabb;
HXDLIN( 487)							bool _hx_tmp6;
HXDLIN( 487)							bool _hx_tmp7;
HXDLIN( 487)							bool _hx_tmp8;
HXDLIN( 487)							if ((ab->miny <= _this1->maxy)) {
HXLINE( 487)								_hx_tmp8 = (_this1->miny <= ab->maxy);
            							}
            							else {
HXLINE( 487)								_hx_tmp8 = false;
            							}
HXDLIN( 487)							if (_hx_tmp8) {
HXLINE( 487)								_hx_tmp7 = (ab->minx <= _this1->maxx);
            							}
            							else {
HXLINE( 487)								_hx_tmp7 = false;
            							}
HXDLIN( 487)							if (_hx_tmp7) {
HXLINE( 487)								_hx_tmp6 = (_this1->minx <= ab->maxx);
            							}
            							else {
HXLINE( 487)								_hx_tmp6 = false;
            							}
HXDLIN( 487)							if (_hx_tmp6) {
HXLINE( 488)								if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(shape,this->aabbShape->zpp_inner)) {
HXLINE( 488)									ret->push(shape->outer);
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 492)					bool _hx_tmp9;
HXDLIN( 492)					if (containment) {
HXLINE( 492)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,x1,"x") = a->aabb;
HXDLIN( 492)						bool _hx_tmp10;
HXDLIN( 492)						bool _hx_tmp11;
HXDLIN( 492)						if ((x1->minx >= ab->minx)) {
HXLINE( 492)							_hx_tmp11 = (x1->miny >= ab->miny);
            						}
            						else {
HXLINE( 492)							_hx_tmp11 = false;
            						}
HXDLIN( 492)						if (_hx_tmp11) {
HXLINE( 492)							_hx_tmp10 = (x1->maxx <= ab->maxx);
            						}
            						else {
HXLINE( 492)							_hx_tmp10 = false;
            						}
HXDLIN( 492)						if (_hx_tmp10) {
HXLINE( 492)							_hx_tmp9 = (x1->maxy <= ab->maxy);
            						}
            						else {
HXLINE( 492)							_hx_tmp9 = false;
            						}
            					}
            					else {
HXLINE( 492)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = a->aabb;
HXDLIN( 492)						bool _hx_tmp12;
HXDLIN( 492)						bool _hx_tmp13;
HXDLIN( 492)						if ((ab->miny <= _this2->maxy)) {
HXLINE( 492)							_hx_tmp13 = (_this2->miny <= ab->maxy);
            						}
            						else {
HXLINE( 492)							_hx_tmp13 = false;
            						}
HXDLIN( 492)						if (_hx_tmp13) {
HXLINE( 492)							_hx_tmp12 = (ab->minx <= _this2->maxx);
            						}
            						else {
HXLINE( 492)							_hx_tmp12 = false;
            						}
HXDLIN( 492)						if (_hx_tmp12) {
HXLINE( 492)							_hx_tmp9 = (_this2->minx <= ab->maxx);
            						}
            						else {
HXLINE( 492)							_hx_tmp9 = false;
            						}
            					}
HXDLIN( 492)					if (_hx_tmp9) {
HXLINE( 492)						ret->push(shape->outer);
            					}
            				}
            			}
HXLINE( 494)			a = a->next;
            		}
            		_hx_goto_27:;
HXLINE( 496)		return ret;
            	}


 ::nape::phys::BodyList ZPP_SweepPhase_obj::bodiesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_499_bodiesInAABB)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
            	HX_STACK_ARG(strict,"strict")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 500)		this->sync_broadphase();
HXLINE( 501)		this->updateAABBShape(aabb);
HXLINE( 502)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,ab) = this->aabbShape->zpp_inner->aabb;
HXLINE( 503)		HX_VAR(  ::nape::phys::BodyList,ret);
HXDLIN( 503)		if (hx::IsNull( output )) {
HXLINE( 503)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 503)			ret = output;
            		}
HXLINE( 504)		if (hx::IsNull( this->failed )) {
HXLINE( 504)			this->failed =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
HXLINE( 505)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 506)		while(true){
HXLINE( 506)			bool _hx_tmp;
HXDLIN( 506)			if (hx::IsNotNull( a )) {
HXLINE( 506)				_hx_tmp = (a->aabb->maxx < ab->minx);
            			}
            			else {
HXLINE( 506)				_hx_tmp = false;
            			}
HXDLIN( 506)			if (!(_hx_tmp)) {
HXLINE( 506)				goto _hx_goto_29;
            			}
HXDLIN( 506)			a = a->next;
            		}
            		_hx_goto_29:;
HXLINE( 507)		while(true){
HXLINE( 507)			bool _hx_tmp1;
HXDLIN( 507)			if (hx::IsNotNull( a )) {
HXLINE( 507)				_hx_tmp1 = (a->aabb->minx <= ab->maxx);
            			}
            			else {
HXLINE( 507)				_hx_tmp1 = false;
            			}
HXDLIN( 507)			if (!(_hx_tmp1)) {
HXLINE( 507)				goto _hx_goto_30;
            			}
HXLINE( 508)			HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape) = a->shape;
HXLINE( 509)			HX_VARI(  ::nape::phys::Body,body) = shape->body->outer;
HXLINE( 510)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 510)			bool _hx_tmp2;
HXDLIN( 510)			bool _hx_tmp3;
HXDLIN( 510)			bool _hx_tmp4;
HXDLIN( 510)			if ((ab->miny <= _this->maxy)) {
HXLINE( 510)				_hx_tmp4 = (_this->miny <= ab->maxy);
            			}
            			else {
HXLINE( 510)				_hx_tmp4 = false;
            			}
HXDLIN( 510)			if (_hx_tmp4) {
HXLINE( 510)				_hx_tmp3 = (ab->minx <= _this->maxx);
            			}
            			else {
HXLINE( 510)				_hx_tmp3 = false;
            			}
HXDLIN( 510)			if (_hx_tmp3) {
HXLINE( 510)				_hx_tmp2 = (_this->minx <= ab->maxx);
            			}
            			else {
HXLINE( 510)				_hx_tmp2 = false;
            			}
HXDLIN( 510)			if (_hx_tmp2) {
HXLINE( 511)				bool _hx_tmp5;
HXDLIN( 511)				if (hx::IsNotNull( filter )) {
HXLINE( 511)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this1,"_this") = shape->filter;
HXDLIN( 511)					if ((((int)_this1->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 511)						_hx_tmp5 = (((int)filter->collisionMask & (int)_this1->collisionGroup) != (int)0);
            					}
            					else {
HXLINE( 511)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 511)					_hx_tmp5 = true;
            				}
HXDLIN( 511)				if (_hx_tmp5) {
HXLINE( 512)					if (strict) {
HXLINE( 513)						if (containment) {
HXLINE( 514)							if (!(this->failed->has(body))) {
HXLINE( 515)								HX_VARI( bool,col) = ::zpp_nape::geom::ZPP_Collide_obj::containTest(this->aabbShape->zpp_inner,shape);
HXLINE( 516)								bool _hx_tmp6;
HXDLIN( 516)								if (!(ret->has(body))) {
HXLINE( 516)									_hx_tmp6 = col;
            								}
            								else {
HXLINE( 516)									_hx_tmp6 = false;
            								}
HXDLIN( 516)								if (_hx_tmp6) {
HXLINE( 516)									ret->push(body);
            								}
            								else {
HXLINE( 517)									if (!(col)) {
HXLINE( 518)										ret->remove(body);
HXLINE( 519)										this->failed->push(body);
            									}
            								}
            							}
            						}
            						else {
HXLINE( 523)							bool _hx_tmp7;
HXDLIN( 523)							if (!(ret->has(body))) {
HXLINE( 523)								_hx_tmp7 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(shape,this->aabbShape->zpp_inner);
            							}
            							else {
HXLINE( 523)								_hx_tmp7 = false;
            							}
HXDLIN( 523)							if (_hx_tmp7) {
HXLINE( 524)								ret->push(body);
            							}
            						}
            					}
            					else {
HXLINE( 528)						if (containment) {
HXLINE( 529)							if (!(this->failed->has(body))) {
HXLINE( 530)								HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = shape->aabb;
HXDLIN( 530)								HX_VAR_NAME( bool,col1,"col");
HXDLIN( 530)								bool col2;
HXDLIN( 530)								bool col3;
HXDLIN( 530)								if ((x->minx >= ab->minx)) {
HXLINE( 530)									col3 = (x->miny >= ab->miny);
            								}
            								else {
HXLINE( 530)									col3 = false;
            								}
HXDLIN( 530)								if (col3) {
HXLINE( 530)									col2 = (x->maxx <= ab->maxx);
            								}
            								else {
HXLINE( 530)									col2 = false;
            								}
HXDLIN( 530)								if (col2) {
HXLINE( 530)									col1 = (x->maxy <= ab->maxy);
            								}
            								else {
HXLINE( 530)									col1 = false;
            								}
HXLINE( 531)								bool _hx_tmp8;
HXDLIN( 531)								if (!(ret->has(body))) {
HXLINE( 531)									_hx_tmp8 = col1;
            								}
            								else {
HXLINE( 531)									_hx_tmp8 = false;
            								}
HXDLIN( 531)								if (_hx_tmp8) {
HXLINE( 531)									ret->push(body);
            								}
            								else {
HXLINE( 532)									if (!(col1)) {
HXLINE( 533)										ret->remove(body);
HXLINE( 534)										this->failed->push(body);
            									}
            								}
            							}
            						}
            						else {
HXLINE( 538)							bool _hx_tmp9;
HXDLIN( 538)							if (!(ret->has(body))) {
HXLINE( 538)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,x1,"x") = shape->aabb;
HXDLIN( 538)								bool _hx_tmp10;
HXDLIN( 538)								bool _hx_tmp11;
HXDLIN( 538)								if ((x1->minx >= ab->minx)) {
HXLINE( 538)									_hx_tmp11 = (x1->miny >= ab->miny);
            								}
            								else {
HXLINE( 538)									_hx_tmp11 = false;
            								}
HXDLIN( 538)								if (_hx_tmp11) {
HXLINE( 538)									_hx_tmp10 = (x1->maxx <= ab->maxx);
            								}
            								else {
HXLINE( 538)									_hx_tmp10 = false;
            								}
HXDLIN( 538)								if (_hx_tmp10) {
HXLINE( 538)									_hx_tmp9 = (x1->maxy <= ab->maxy);
            								}
            								else {
HXLINE( 538)									_hx_tmp9 = false;
            								}
            							}
            							else {
HXLINE( 538)								_hx_tmp9 = false;
            							}
HXDLIN( 538)							if (_hx_tmp9) {
HXLINE( 539)								ret->push(body);
            							}
            						}
            					}
            				}
            			}
HXLINE( 544)			a = a->next;
            		}
            		_hx_goto_30:;
HXLINE( 546)		this->failed->clear();
HXLINE( 547)		return ret;
            	}


 ::nape::shape::ShapeList ZPP_SweepPhase_obj::shapesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_549_shapesInCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 550)		this->sync_broadphase();
HXLINE( 551)		this->updateCircShape(x,y,r);
HXLINE( 552)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,ab) = this->circShape->zpp_inner->aabb;
HXLINE( 553)		HX_VAR(  ::nape::shape::ShapeList,ret);
HXDLIN( 553)		if (hx::IsNull( output )) {
HXLINE( 553)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 553)			ret = output;
            		}
HXLINE( 554)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 555)		while(true){
HXLINE( 555)			bool _hx_tmp;
HXDLIN( 555)			if (hx::IsNotNull( a )) {
HXLINE( 555)				_hx_tmp = (a->aabb->maxx < ab->minx);
            			}
            			else {
HXLINE( 555)				_hx_tmp = false;
            			}
HXDLIN( 555)			if (!(_hx_tmp)) {
HXLINE( 555)				goto _hx_goto_32;
            			}
HXDLIN( 555)			a = a->next;
            		}
            		_hx_goto_32:;
HXLINE( 556)		while(true){
HXLINE( 556)			bool _hx_tmp1;
HXDLIN( 556)			if (hx::IsNotNull( a )) {
HXLINE( 556)				_hx_tmp1 = (a->aabb->minx <= ab->maxx);
            			}
            			else {
HXLINE( 556)				_hx_tmp1 = false;
            			}
HXDLIN( 556)			if (!(_hx_tmp1)) {
HXLINE( 556)				goto _hx_goto_33;
            			}
HXLINE( 557)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 557)			bool _hx_tmp2;
HXDLIN( 557)			bool _hx_tmp3;
HXDLIN( 557)			bool _hx_tmp4;
HXDLIN( 557)			if ((ab->miny <= _this->maxy)) {
HXLINE( 557)				_hx_tmp4 = (_this->miny <= ab->maxy);
            			}
            			else {
HXLINE( 557)				_hx_tmp4 = false;
            			}
HXDLIN( 557)			if (_hx_tmp4) {
HXLINE( 557)				_hx_tmp3 = (ab->minx <= _this->maxx);
            			}
            			else {
HXLINE( 557)				_hx_tmp3 = false;
            			}
HXDLIN( 557)			if (_hx_tmp3) {
HXLINE( 557)				_hx_tmp2 = (_this->minx <= ab->maxx);
            			}
            			else {
HXLINE( 557)				_hx_tmp2 = false;
            			}
HXDLIN( 557)			if (_hx_tmp2) {
HXLINE( 558)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape) = a->shape;
HXLINE( 559)				bool _hx_tmp5;
HXDLIN( 559)				if (hx::IsNotNull( filter )) {
HXLINE( 559)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this1,"_this") = shape->filter;
HXDLIN( 559)					if ((((int)_this1->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 559)						_hx_tmp5 = (((int)filter->collisionMask & (int)_this1->collisionGroup) != (int)0);
            					}
            					else {
HXLINE( 559)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 559)					_hx_tmp5 = true;
            				}
HXDLIN( 559)				if (_hx_tmp5) {
HXLINE( 560)					if (containment) {
HXLINE( 561)						if (::zpp_nape::geom::ZPP_Collide_obj::containTest(this->circShape->zpp_inner,shape)) {
HXLINE( 561)							ret->push(shape->outer);
            						}
            					}
            					else {
HXLINE( 563)						if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(shape,this->circShape->zpp_inner)) {
HXLINE( 563)							ret->push(shape->outer);
            						}
            					}
            				}
            			}
HXLINE( 566)			a = a->next;
            		}
            		_hx_goto_33:;
HXLINE( 568)		return ret;
            	}


 ::nape::phys::BodyList ZPP_SweepPhase_obj::bodiesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_570_bodiesInCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 571)		this->sync_broadphase();
HXLINE( 572)		this->updateCircShape(x,y,r);
HXLINE( 573)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,ab) = this->circShape->zpp_inner->aabb;
HXLINE( 574)		HX_VAR(  ::nape::phys::BodyList,ret);
HXDLIN( 574)		if (hx::IsNull( output )) {
HXLINE( 574)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 574)			ret = output;
            		}
HXLINE( 575)		if (hx::IsNull( this->failed )) {
HXLINE( 575)			this->failed =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
HXLINE( 576)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 577)		while(true){
HXLINE( 577)			bool _hx_tmp;
HXDLIN( 577)			if (hx::IsNotNull( a )) {
HXLINE( 577)				_hx_tmp = (a->aabb->maxx < ab->minx);
            			}
            			else {
HXLINE( 577)				_hx_tmp = false;
            			}
HXDLIN( 577)			if (!(_hx_tmp)) {
HXLINE( 577)				goto _hx_goto_35;
            			}
HXDLIN( 577)			a = a->next;
            		}
            		_hx_goto_35:;
HXLINE( 578)		while(true){
HXLINE( 578)			bool _hx_tmp1;
HXDLIN( 578)			if (hx::IsNotNull( a )) {
HXLINE( 578)				_hx_tmp1 = (a->aabb->minx <= ab->maxx);
            			}
            			else {
HXLINE( 578)				_hx_tmp1 = false;
            			}
HXDLIN( 578)			if (!(_hx_tmp1)) {
HXLINE( 578)				goto _hx_goto_36;
            			}
HXLINE( 579)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 579)			bool _hx_tmp2;
HXDLIN( 579)			bool _hx_tmp3;
HXDLIN( 579)			bool _hx_tmp4;
HXDLIN( 579)			if ((ab->miny <= _this->maxy)) {
HXLINE( 579)				_hx_tmp4 = (_this->miny <= ab->maxy);
            			}
            			else {
HXLINE( 579)				_hx_tmp4 = false;
            			}
HXDLIN( 579)			if (_hx_tmp4) {
HXLINE( 579)				_hx_tmp3 = (ab->minx <= _this->maxx);
            			}
            			else {
HXLINE( 579)				_hx_tmp3 = false;
            			}
HXDLIN( 579)			if (_hx_tmp3) {
HXLINE( 579)				_hx_tmp2 = (_this->minx <= ab->maxx);
            			}
            			else {
HXLINE( 579)				_hx_tmp2 = false;
            			}
HXDLIN( 579)			if (_hx_tmp2) {
HXLINE( 580)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape) = a->shape;
HXLINE( 581)				HX_VARI(  ::nape::phys::Body,body) = shape->body->outer;
HXLINE( 582)				bool _hx_tmp5;
HXDLIN( 582)				if (hx::IsNotNull( filter )) {
HXLINE( 582)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this1,"_this") = shape->filter;
HXDLIN( 582)					if ((((int)_this1->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 582)						_hx_tmp5 = (((int)filter->collisionMask & (int)_this1->collisionGroup) != (int)0);
            					}
            					else {
HXLINE( 582)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 582)					_hx_tmp5 = true;
            				}
HXDLIN( 582)				if (_hx_tmp5) {
HXLINE( 583)					if (containment) {
HXLINE( 584)						if (!(this->failed->has(body))) {
HXLINE( 585)							HX_VARI( bool,col) = ::zpp_nape::geom::ZPP_Collide_obj::containTest(this->circShape->zpp_inner,shape);
HXLINE( 586)							bool _hx_tmp6;
HXDLIN( 586)							if (!(ret->has(body))) {
HXLINE( 586)								_hx_tmp6 = col;
            							}
            							else {
HXLINE( 586)								_hx_tmp6 = false;
            							}
HXDLIN( 586)							if (_hx_tmp6) {
HXLINE( 586)								ret->push(body);
            							}
            							else {
HXLINE( 587)								if (!(col)) {
HXLINE( 588)									ret->remove(body);
HXLINE( 589)									this->failed->push(body);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 593)						bool _hx_tmp7;
HXDLIN( 593)						if (!(ret->has(body))) {
HXLINE( 593)							_hx_tmp7 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(shape,this->circShape->zpp_inner);
            						}
            						else {
HXLINE( 593)							_hx_tmp7 = false;
            						}
HXDLIN( 593)						if (_hx_tmp7) {
HXLINE( 594)							ret->push(body);
            						}
            					}
            				}
            			}
HXLINE( 598)			a = a->next;
            		}
            		_hx_goto_36:;
HXLINE( 600)		this->failed->clear();
HXLINE( 601)		return ret;
            	}


 ::nape::shape::ShapeList ZPP_SweepPhase_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_603_shapesInShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 604)		this->sync_broadphase();
HXLINE( 605)		this->validateShape(shape);
HXLINE( 606)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,ab) = shape->aabb;
HXLINE( 607)		HX_VAR(  ::nape::shape::ShapeList,ret);
HXDLIN( 607)		if (hx::IsNull( output )) {
HXLINE( 607)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 607)			ret = output;
            		}
HXLINE( 608)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 609)		while(true){
HXLINE( 609)			bool _hx_tmp;
HXDLIN( 609)			if (hx::IsNotNull( a )) {
HXLINE( 609)				_hx_tmp = (a->aabb->maxx < ab->minx);
            			}
            			else {
HXLINE( 609)				_hx_tmp = false;
            			}
HXDLIN( 609)			if (!(_hx_tmp)) {
HXLINE( 609)				goto _hx_goto_38;
            			}
HXDLIN( 609)			a = a->next;
            		}
            		_hx_goto_38:;
HXLINE( 610)		while(true){
HXLINE( 610)			bool _hx_tmp1;
HXDLIN( 610)			if (hx::IsNotNull( a )) {
HXLINE( 610)				_hx_tmp1 = (a->aabb->minx <= ab->maxx);
            			}
            			else {
HXLINE( 610)				_hx_tmp1 = false;
            			}
HXDLIN( 610)			if (!(_hx_tmp1)) {
HXLINE( 610)				goto _hx_goto_39;
            			}
HXLINE( 611)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 611)			bool _hx_tmp2;
HXDLIN( 611)			bool _hx_tmp3;
HXDLIN( 611)			bool _hx_tmp4;
HXDLIN( 611)			if ((ab->miny <= _this->maxy)) {
HXLINE( 611)				_hx_tmp4 = (_this->miny <= ab->maxy);
            			}
            			else {
HXLINE( 611)				_hx_tmp4 = false;
            			}
HXDLIN( 611)			if (_hx_tmp4) {
HXLINE( 611)				_hx_tmp3 = (ab->minx <= _this->maxx);
            			}
            			else {
HXLINE( 611)				_hx_tmp3 = false;
            			}
HXDLIN( 611)			if (_hx_tmp3) {
HXLINE( 611)				_hx_tmp2 = (_this->minx <= ab->maxx);
            			}
            			else {
HXLINE( 611)				_hx_tmp2 = false;
            			}
HXDLIN( 611)			if (_hx_tmp2) {
HXLINE( 612)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape2) = a->shape;
HXLINE( 613)				bool _hx_tmp5;
HXDLIN( 613)				if (hx::IsNotNull( filter )) {
HXLINE( 613)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this1,"_this") = shape2->filter;
HXDLIN( 613)					if ((((int)_this1->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 613)						_hx_tmp5 = (((int)filter->collisionMask & (int)_this1->collisionGroup) != (int)0);
            					}
            					else {
HXLINE( 613)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 613)					_hx_tmp5 = true;
            				}
HXDLIN( 613)				if (_hx_tmp5) {
HXLINE( 614)					if (containment) {
HXLINE( 615)						if (::zpp_nape::geom::ZPP_Collide_obj::containTest(shape,shape2)) {
HXLINE( 615)							ret->push(shape2->outer);
            						}
            					}
            					else {
HXLINE( 617)						if (::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(shape2,shape)) {
HXLINE( 617)							ret->push(shape2->outer);
            						}
            					}
            				}
            			}
HXLINE( 620)			a = a->next;
            		}
            		_hx_goto_39:;
HXLINE( 622)		return ret;
            	}


 ::nape::phys::BodyList ZPP_SweepPhase_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_624_bodiesInShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 625)		this->sync_broadphase();
HXLINE( 626)		this->validateShape(shape);
HXLINE( 627)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,ab) = shape->aabb;
HXLINE( 628)		HX_VAR(  ::nape::phys::BodyList,ret);
HXDLIN( 628)		if (hx::IsNull( output )) {
HXLINE( 628)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 628)			ret = output;
            		}
HXLINE( 629)		if (hx::IsNull( this->failed )) {
HXLINE( 629)			this->failed =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
HXLINE( 630)		HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 631)		while(true){
HXLINE( 631)			bool _hx_tmp;
HXDLIN( 631)			if (hx::IsNotNull( a )) {
HXLINE( 631)				_hx_tmp = (a->aabb->maxx < ab->minx);
            			}
            			else {
HXLINE( 631)				_hx_tmp = false;
            			}
HXDLIN( 631)			if (!(_hx_tmp)) {
HXLINE( 631)				goto _hx_goto_41;
            			}
HXDLIN( 631)			a = a->next;
            		}
            		_hx_goto_41:;
HXLINE( 632)		while(true){
HXLINE( 632)			bool _hx_tmp1;
HXDLIN( 632)			if (hx::IsNotNull( a )) {
HXLINE( 632)				_hx_tmp1 = (a->aabb->minx <= ab->maxx);
            			}
            			else {
HXLINE( 632)				_hx_tmp1 = false;
            			}
HXDLIN( 632)			if (!(_hx_tmp1)) {
HXLINE( 632)				goto _hx_goto_42;
            			}
HXLINE( 633)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 633)			bool _hx_tmp2;
HXDLIN( 633)			bool _hx_tmp3;
HXDLIN( 633)			bool _hx_tmp4;
HXDLIN( 633)			if ((ab->miny <= _this->maxy)) {
HXLINE( 633)				_hx_tmp4 = (_this->miny <= ab->maxy);
            			}
            			else {
HXLINE( 633)				_hx_tmp4 = false;
            			}
HXDLIN( 633)			if (_hx_tmp4) {
HXLINE( 633)				_hx_tmp3 = (ab->minx <= _this->maxx);
            			}
            			else {
HXLINE( 633)				_hx_tmp3 = false;
            			}
HXDLIN( 633)			if (_hx_tmp3) {
HXLINE( 633)				_hx_tmp2 = (_this->minx <= ab->maxx);
            			}
            			else {
HXLINE( 633)				_hx_tmp2 = false;
            			}
HXDLIN( 633)			if (_hx_tmp2) {
HXLINE( 634)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,shape2) = a->shape;
HXLINE( 635)				HX_VARI(  ::nape::phys::Body,body) = shape2->body->outer;
HXLINE( 636)				bool _hx_tmp5;
HXDLIN( 636)				if (hx::IsNotNull( filter )) {
HXLINE( 636)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this1,"_this") = shape2->filter;
HXDLIN( 636)					if ((((int)_this1->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 636)						_hx_tmp5 = (((int)filter->collisionMask & (int)_this1->collisionGroup) != (int)0);
            					}
            					else {
HXLINE( 636)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 636)					_hx_tmp5 = true;
            				}
HXDLIN( 636)				if (_hx_tmp5) {
HXLINE( 637)					if (containment) {
HXLINE( 638)						if (!(this->failed->has(body))) {
HXLINE( 639)							HX_VARI( bool,col) = ::zpp_nape::geom::ZPP_Collide_obj::containTest(shape,shape2);
HXLINE( 640)							bool _hx_tmp6;
HXDLIN( 640)							if (!(ret->has(body))) {
HXLINE( 640)								_hx_tmp6 = col;
            							}
            							else {
HXLINE( 640)								_hx_tmp6 = false;
            							}
HXDLIN( 640)							if (_hx_tmp6) {
HXLINE( 640)								ret->push(body);
            							}
            							else {
HXLINE( 641)								if (!(col)) {
HXLINE( 642)									ret->remove(body);
HXLINE( 643)									this->failed->push(body);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 647)						bool _hx_tmp7;
HXDLIN( 647)						if (!(ret->has(body))) {
HXLINE( 647)							_hx_tmp7 = ::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(shape,shape2);
            						}
            						else {
HXLINE( 647)							_hx_tmp7 = false;
            						}
HXDLIN( 647)						if (_hx_tmp7) {
HXLINE( 648)							ret->push(body);
            						}
            					}
            				}
            			}
HXLINE( 652)			a = a->next;
            		}
            		_hx_goto_42:;
HXLINE( 654)		this->failed->clear();
HXLINE( 655)		return ret;
            	}


 ::nape::geom::RayResult ZPP_SweepPhase_obj::rayCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_9aac401167d1c359_657_rayCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ray,"ray")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 658)		this->sync_broadphase();
HXLINE( 659)		ray->validate_dir();
HXLINE( 660)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,rayab) = ray->rayAABB();
HXLINE( 661)		HX_VARI( Float,mint) = ray->maxdist;
HXLINE( 662)		HX_VARI(  ::nape::geom::RayResult,minres) = null();
HXLINE( 663)		if ((ray->dirx == (int)0)) {
HXLINE( 664)			HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 665)			while(true){
HXLINE( 665)				bool _hx_tmp;
HXDLIN( 665)				if (hx::IsNotNull( a )) {
HXLINE( 665)					_hx_tmp = (a->aabb->minx <= rayab->minx);
            				}
            				else {
HXLINE( 665)					_hx_tmp = false;
            				}
HXDLIN( 665)				if (!(_hx_tmp)) {
HXLINE( 665)					goto _hx_goto_44;
            				}
HXLINE( 666)				bool _hx_tmp1;
HXDLIN( 666)				HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 666)				bool _hx_tmp2;
HXDLIN( 666)				bool _hx_tmp3;
HXDLIN( 666)				bool _hx_tmp4;
HXDLIN( 666)				if ((rayab->miny <= _this->maxy)) {
HXLINE( 666)					_hx_tmp4 = (_this->miny <= rayab->maxy);
            				}
            				else {
HXLINE( 666)					_hx_tmp4 = false;
            				}
HXDLIN( 666)				if (_hx_tmp4) {
HXLINE( 666)					_hx_tmp3 = (rayab->minx <= _this->maxx);
            				}
            				else {
HXLINE( 666)					_hx_tmp3 = false;
            				}
HXDLIN( 666)				if (_hx_tmp3) {
HXLINE( 666)					_hx_tmp2 = (_this->minx <= rayab->maxx);
            				}
            				else {
HXLINE( 666)					_hx_tmp2 = false;
            				}
HXDLIN( 666)				if (_hx_tmp2) {
HXLINE( 666)					if (hx::IsNotNull( filter )) {
HXLINE( 666)						HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this1,"_this") = a->shape->filter;
HXDLIN( 666)						if ((((int)_this1->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 666)							_hx_tmp1 = (((int)filter->collisionMask & (int)_this1->collisionGroup) != (int)0);
            						}
            						else {
HXLINE( 666)							_hx_tmp1 = false;
            						}
            					}
            					else {
HXLINE( 666)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE( 666)					_hx_tmp1 = false;
            				}
HXDLIN( 666)				if (_hx_tmp1) {
HXLINE( 667)					HX_VARI( Float,t) = ray->aabbsect(a->aabb);
HXLINE( 668)					bool _hx_tmp5;
HXDLIN( 668)					if ((t >= (int)0)) {
HXLINE( 668)						_hx_tmp5 = (t < mint);
            					}
            					else {
HXLINE( 668)						_hx_tmp5 = false;
            					}
HXDLIN( 668)					if (_hx_tmp5) {
HXLINE( 669)						HX_VAR(  ::nape::geom::RayResult,result);
HXDLIN( 669)						if ((a->shape->type == (int)0)) {
HXLINE( 669)							result = ray->circlesect(a->shape->circle,inner,mint);
            						}
            						else {
HXLINE( 669)							result = ray->polysect(a->shape->polygon,inner,mint);
            						}
HXLINE( 670)						if (hx::IsNotNull( result )) {
HXLINE( 671)							mint = result->zpp_inner->toiDistance;
HXLINE( 672)							if (hx::IsNotNull( minres )) {
HXLINE( 673)								minres->zpp_inner->free();
            							}
HXLINE( 675)							minres = result;
            						}
            					}
            				}
HXLINE( 679)				a = a->next;
            			}
            			_hx_goto_44:;
            		}
            		else {
HXLINE( 682)			if ((ray->dirx < (int)0)) {
HXLINE( 683)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_SweepData,a1,"a") = this->list;
HXLINE( 684)				HX_VARI(  ::zpp_nape::space::ZPP_SweepData,b) = null();
HXLINE( 685)				while(true){
HXLINE( 685)					bool _hx_tmp6;
HXDLIN( 685)					if (hx::IsNotNull( a1 )) {
HXLINE( 685)						_hx_tmp6 = (a1->aabb->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 685)						_hx_tmp6 = false;
            					}
HXDLIN( 685)					if (!(_hx_tmp6)) {
HXLINE( 685)						goto _hx_goto_45;
            					}
HXLINE( 686)					b = a1;
HXLINE( 687)					a1 = a1->next;
            				}
            				_hx_goto_45:;
HXLINE( 689)				a1 = b;
HXLINE( 690)				while(hx::IsNotNull( a1 )){
HXLINE( 691)					bool _hx_tmp7;
HXDLIN( 691)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = a1->aabb;
HXDLIN( 691)					bool _hx_tmp8;
HXDLIN( 691)					bool _hx_tmp9;
HXDLIN( 691)					bool _hx_tmp10;
HXDLIN( 691)					if ((rayab->miny <= _this2->maxy)) {
HXLINE( 691)						_hx_tmp10 = (_this2->miny <= rayab->maxy);
            					}
            					else {
HXLINE( 691)						_hx_tmp10 = false;
            					}
HXDLIN( 691)					if (_hx_tmp10) {
HXLINE( 691)						_hx_tmp9 = (rayab->minx <= _this2->maxx);
            					}
            					else {
HXLINE( 691)						_hx_tmp9 = false;
            					}
HXDLIN( 691)					if (_hx_tmp9) {
HXLINE( 691)						_hx_tmp8 = (_this2->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 691)						_hx_tmp8 = false;
            					}
HXDLIN( 691)					if (_hx_tmp8) {
HXLINE( 691)						if (hx::IsNotNull( filter )) {
HXLINE( 691)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this3,"_this") = a1->shape->filter;
HXDLIN( 691)							if ((((int)_this3->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 691)								_hx_tmp7 = (((int)filter->collisionMask & (int)_this3->collisionGroup) != (int)0);
            							}
            							else {
HXLINE( 691)								_hx_tmp7 = false;
            							}
            						}
            						else {
HXLINE( 691)							_hx_tmp7 = true;
            						}
            					}
            					else {
HXLINE( 691)						_hx_tmp7 = false;
            					}
HXDLIN( 691)					if (_hx_tmp7) {
HXLINE( 692)						HX_VARI_NAME( Float,t1,"t") = ray->aabbsect(a1->aabb);
HXLINE( 693)						bool _hx_tmp11;
HXDLIN( 693)						if ((t1 >= (int)0)) {
HXLINE( 693)							_hx_tmp11 = (t1 < mint);
            						}
            						else {
HXLINE( 693)							_hx_tmp11 = false;
            						}
HXDLIN( 693)						if (_hx_tmp11) {
HXLINE( 694)							HX_VAR_NAME(  ::nape::geom::RayResult,result1,"result");
HXDLIN( 694)							if ((a1->shape->type == (int)0)) {
HXLINE( 694)								result1 = ray->circlesect(a1->shape->circle,inner,mint);
            							}
            							else {
HXLINE( 694)								result1 = ray->polysect(a1->shape->polygon,inner,mint);
            							}
HXLINE( 695)							if (hx::IsNotNull( result1 )) {
HXLINE( 696)								mint = result1->zpp_inner->toiDistance;
HXLINE( 697)								if (hx::IsNotNull( minres )) {
HXLINE( 698)									minres->zpp_inner->free();
            								}
HXLINE( 700)								minres = result1;
            							}
            						}
            					}
HXLINE( 704)					a1 = a1->prev;
            				}
            			}
            			else {
HXLINE( 708)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_SweepData,a2,"a") = this->list;
HXLINE( 709)				while(true){
HXLINE( 709)					bool _hx_tmp12;
HXDLIN( 709)					bool _hx_tmp13;
HXDLIN( 709)					if (hx::IsNotNull( a2 )) {
HXLINE( 709)						_hx_tmp13 = (a2->aabb->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 709)						_hx_tmp13 = false;
            					}
HXDLIN( 709)					if (_hx_tmp13) {
HXLINE( 709)						_hx_tmp12 = (a2->aabb->minx < (ray->originx + (ray->dirx * mint)));
            					}
            					else {
HXLINE( 709)						_hx_tmp12 = false;
            					}
HXDLIN( 709)					if (!(_hx_tmp12)) {
HXLINE( 709)						goto _hx_goto_47;
            					}
HXLINE( 710)					bool _hx_tmp14;
HXDLIN( 710)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = a2->aabb;
HXDLIN( 710)					bool _hx_tmp15;
HXDLIN( 710)					bool _hx_tmp16;
HXDLIN( 710)					bool _hx_tmp17;
HXDLIN( 710)					if ((rayab->miny <= _this4->maxy)) {
HXLINE( 710)						_hx_tmp17 = (_this4->miny <= rayab->maxy);
            					}
            					else {
HXLINE( 710)						_hx_tmp17 = false;
            					}
HXDLIN( 710)					if (_hx_tmp17) {
HXLINE( 710)						_hx_tmp16 = (rayab->minx <= _this4->maxx);
            					}
            					else {
HXLINE( 710)						_hx_tmp16 = false;
            					}
HXDLIN( 710)					if (_hx_tmp16) {
HXLINE( 710)						_hx_tmp15 = (_this4->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 710)						_hx_tmp15 = false;
            					}
HXDLIN( 710)					if (_hx_tmp15) {
HXLINE( 710)						if (hx::IsNotNull( filter )) {
HXLINE( 710)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this5,"_this") = a2->shape->filter;
HXDLIN( 710)							if ((((int)_this5->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 710)								_hx_tmp14 = (((int)filter->collisionMask & (int)_this5->collisionGroup) != (int)0);
            							}
            							else {
HXLINE( 710)								_hx_tmp14 = false;
            							}
            						}
            						else {
HXLINE( 710)							_hx_tmp14 = true;
            						}
            					}
            					else {
HXLINE( 710)						_hx_tmp14 = false;
            					}
HXDLIN( 710)					if (_hx_tmp14) {
HXLINE( 711)						HX_VARI_NAME( Float,t2,"t") = ray->aabbsect(a2->aabb);
HXLINE( 712)						bool _hx_tmp18;
HXDLIN( 712)						if ((t2 >= (int)0)) {
HXLINE( 712)							_hx_tmp18 = (t2 < mint);
            						}
            						else {
HXLINE( 712)							_hx_tmp18 = false;
            						}
HXDLIN( 712)						if (_hx_tmp18) {
HXLINE( 713)							HX_VAR_NAME(  ::nape::geom::RayResult,result2,"result");
HXDLIN( 713)							if ((a2->shape->type == (int)0)) {
HXLINE( 713)								result2 = ray->circlesect(a2->shape->circle,inner,mint);
            							}
            							else {
HXLINE( 713)								result2 = ray->polysect(a2->shape->polygon,inner,mint);
            							}
HXLINE( 714)							if (hx::IsNotNull( result2 )) {
HXLINE( 715)								mint = result2->zpp_inner->toiDistance;
HXLINE( 716)								if (hx::IsNotNull( minres )) {
HXLINE( 717)									minres->zpp_inner->free();
            								}
HXLINE( 719)								minres = result2;
            							}
            						}
            					}
HXLINE( 723)					a2 = a2->next;
            				}
            				_hx_goto_47:;
            			}
            		}
HXLINE( 726)		{
HXLINE( 736)			{
HXLINE( 736)				if (hx::IsNotNull( rayab->outer )) {
HXLINE( 736)					rayab->outer->zpp_inner = null();
HXDLIN( 736)					rayab->outer = null();
            				}
HXDLIN( 736)				rayab->wrap_min = (rayab->wrap_max = null());
HXDLIN( 736)				rayab->_invalidate = null();
HXDLIN( 736)				rayab->_validate = null();
            			}
HXLINE( 737)			rayab->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE( 738)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = rayab;
            		}
HXLINE( 743)		return minres;
            	}


 ::nape::geom::RayResultList ZPP_SweepPhase_obj::rayMultiCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::geom::RayResultList output){
            	HX_GC_STACKFRAME(&_hx_pos_9aac401167d1c359_745_rayMultiCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ray,"ray")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 746)		this->sync_broadphase();
HXLINE( 747)		ray->validate_dir();
HXLINE( 748)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,rayab) = ray->rayAABB();
HXLINE( 749)		HX_VAR(  ::nape::geom::RayResultList,ret);
HXDLIN( 749)		if (hx::IsNull( output )) {
HXLINE( 749)			ret =  ::nape::geom::RayResultList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 749)			ret = output;
            		}
HXLINE( 750)		if ((ray->dirx == (int)0)) {
HXLINE( 751)			HX_VARI(  ::zpp_nape::space::ZPP_SweepData,a) = this->list;
HXLINE( 752)			while(true){
HXLINE( 752)				bool _hx_tmp;
HXDLIN( 752)				if (hx::IsNotNull( a )) {
HXLINE( 752)					_hx_tmp = (a->aabb->minx <= rayab->minx);
            				}
            				else {
HXLINE( 752)					_hx_tmp = false;
            				}
HXDLIN( 752)				if (!(_hx_tmp)) {
HXLINE( 752)					goto _hx_goto_49;
            				}
HXLINE( 753)				bool _hx_tmp1;
HXDLIN( 753)				HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 753)				bool _hx_tmp2;
HXDLIN( 753)				bool _hx_tmp3;
HXDLIN( 753)				bool _hx_tmp4;
HXDLIN( 753)				if ((rayab->miny <= _this->maxy)) {
HXLINE( 753)					_hx_tmp4 = (_this->miny <= rayab->maxy);
            				}
            				else {
HXLINE( 753)					_hx_tmp4 = false;
            				}
HXDLIN( 753)				if (_hx_tmp4) {
HXLINE( 753)					_hx_tmp3 = (rayab->minx <= _this->maxx);
            				}
            				else {
HXLINE( 753)					_hx_tmp3 = false;
            				}
HXDLIN( 753)				if (_hx_tmp3) {
HXLINE( 753)					_hx_tmp2 = (_this->minx <= rayab->maxx);
            				}
            				else {
HXLINE( 753)					_hx_tmp2 = false;
            				}
HXDLIN( 753)				if (_hx_tmp2) {
HXLINE( 753)					if (hx::IsNotNull( filter )) {
HXLINE( 753)						HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this1,"_this") = a->shape->filter;
HXDLIN( 753)						if ((((int)_this1->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 753)							_hx_tmp1 = (((int)filter->collisionMask & (int)_this1->collisionGroup) != (int)0);
            						}
            						else {
HXLINE( 753)							_hx_tmp1 = false;
            						}
            					}
            					else {
HXLINE( 753)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE( 753)					_hx_tmp1 = false;
            				}
HXDLIN( 753)				if (_hx_tmp1) {
HXLINE( 755)					if ((ray->aabbsect(a->aabb) >= (int)0)) {
HXLINE( 756)						if ((a->shape->type == (int)0)) {
HXLINE( 756)							ray->circlesect2(a->shape->circle,inner,ret);
            						}
            						else {
HXLINE( 757)							ray->polysect2(a->shape->polygon,inner,ret);
            						}
            					}
            				}
HXLINE( 760)				a = a->next;
            			}
            			_hx_goto_49:;
            		}
            		else {
HXLINE( 763)			if ((ray->dirx < (int)0)) {
HXLINE( 764)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_SweepData,a1,"a") = this->list;
HXLINE( 765)				HX_VARI(  ::zpp_nape::space::ZPP_SweepData,b) = null();
HXLINE( 766)				while(true){
HXLINE( 766)					bool _hx_tmp5;
HXDLIN( 766)					if (hx::IsNotNull( a1 )) {
HXLINE( 766)						_hx_tmp5 = (a1->aabb->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 766)						_hx_tmp5 = false;
            					}
HXDLIN( 766)					if (!(_hx_tmp5)) {
HXLINE( 766)						goto _hx_goto_50;
            					}
HXLINE( 767)					b = a1;
HXLINE( 768)					a1 = a1->next;
            				}
            				_hx_goto_50:;
HXLINE( 770)				a1 = b;
HXLINE( 771)				while(hx::IsNotNull( a1 )){
HXLINE( 772)					bool _hx_tmp6;
HXDLIN( 772)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = a1->aabb;
HXDLIN( 772)					bool _hx_tmp7;
HXDLIN( 772)					bool _hx_tmp8;
HXDLIN( 772)					bool _hx_tmp9;
HXDLIN( 772)					if ((rayab->miny <= _this2->maxy)) {
HXLINE( 772)						_hx_tmp9 = (_this2->miny <= rayab->maxy);
            					}
            					else {
HXLINE( 772)						_hx_tmp9 = false;
            					}
HXDLIN( 772)					if (_hx_tmp9) {
HXLINE( 772)						_hx_tmp8 = (rayab->minx <= _this2->maxx);
            					}
            					else {
HXLINE( 772)						_hx_tmp8 = false;
            					}
HXDLIN( 772)					if (_hx_tmp8) {
HXLINE( 772)						_hx_tmp7 = (_this2->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 772)						_hx_tmp7 = false;
            					}
HXDLIN( 772)					if (_hx_tmp7) {
HXLINE( 772)						if (hx::IsNotNull( filter )) {
HXLINE( 772)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this3,"_this") = a1->shape->filter;
HXDLIN( 772)							if ((((int)_this3->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 772)								_hx_tmp6 = (((int)filter->collisionMask & (int)_this3->collisionGroup) != (int)0);
            							}
            							else {
HXLINE( 772)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 772)							_hx_tmp6 = true;
            						}
            					}
            					else {
HXLINE( 772)						_hx_tmp6 = false;
            					}
HXDLIN( 772)					if (_hx_tmp6) {
HXLINE( 774)						if ((ray->aabbsect(a1->aabb) >= (int)0)) {
HXLINE( 775)							if ((a1->shape->type == (int)0)) {
HXLINE( 775)								ray->circlesect2(a1->shape->circle,inner,ret);
            							}
            							else {
HXLINE( 776)								ray->polysect2(a1->shape->polygon,inner,ret);
            							}
            						}
            					}
HXLINE( 779)					a1 = a1->prev;
            				}
            			}
            			else {
HXLINE( 783)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_SweepData,a2,"a") = this->list;
HXLINE( 784)				while(true){
HXLINE( 784)					bool _hx_tmp10;
HXDLIN( 784)					if (hx::IsNotNull( a2 )) {
HXLINE( 784)						_hx_tmp10 = (a2->aabb->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 784)						_hx_tmp10 = false;
            					}
HXDLIN( 784)					if (!(_hx_tmp10)) {
HXLINE( 784)						goto _hx_goto_52;
            					}
HXLINE( 785)					bool _hx_tmp11;
HXDLIN( 785)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = a2->aabb;
HXDLIN( 785)					bool _hx_tmp12;
HXDLIN( 785)					bool _hx_tmp13;
HXDLIN( 785)					bool _hx_tmp14;
HXDLIN( 785)					if ((rayab->miny <= _this4->maxy)) {
HXLINE( 785)						_hx_tmp14 = (_this4->miny <= rayab->maxy);
            					}
            					else {
HXLINE( 785)						_hx_tmp14 = false;
            					}
HXDLIN( 785)					if (_hx_tmp14) {
HXLINE( 785)						_hx_tmp13 = (rayab->minx <= _this4->maxx);
            					}
            					else {
HXLINE( 785)						_hx_tmp13 = false;
            					}
HXDLIN( 785)					if (_hx_tmp13) {
HXLINE( 785)						_hx_tmp12 = (_this4->minx <= rayab->maxx);
            					}
            					else {
HXLINE( 785)						_hx_tmp12 = false;
            					}
HXDLIN( 785)					if (_hx_tmp12) {
HXLINE( 785)						if (hx::IsNotNull( filter )) {
HXLINE( 785)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this5,"_this") = a2->shape->filter;
HXDLIN( 785)							if ((((int)_this5->collisionMask & (int)filter->collisionGroup) != (int)0)) {
HXLINE( 785)								_hx_tmp11 = (((int)filter->collisionMask & (int)_this5->collisionGroup) != (int)0);
            							}
            							else {
HXLINE( 785)								_hx_tmp11 = false;
            							}
            						}
            						else {
HXLINE( 785)							_hx_tmp11 = true;
            						}
            					}
            					else {
HXLINE( 785)						_hx_tmp11 = false;
            					}
HXDLIN( 785)					if (_hx_tmp11) {
HXLINE( 787)						if ((ray->aabbsect(a2->aabb) >= (int)0)) {
HXLINE( 788)							if ((a2->shape->type == (int)0)) {
HXLINE( 788)								ray->circlesect2(a2->shape->circle,inner,ret);
            							}
            							else {
HXLINE( 789)								ray->polysect2(a2->shape->polygon,inner,ret);
            							}
            						}
            					}
HXLINE( 792)					a2 = a2->next;
            				}
            				_hx_goto_52:;
            			}
            		}
HXLINE( 795)		{
HXLINE( 805)			{
HXLINE( 805)				if (hx::IsNotNull( rayab->outer )) {
HXLINE( 805)					rayab->outer->zpp_inner = null();
HXDLIN( 805)					rayab->outer = null();
            				}
HXDLIN( 805)				rayab->wrap_min = (rayab->wrap_max = null());
HXDLIN( 805)				rayab->_invalidate = null();
HXDLIN( 805)				rayab->_validate = null();
            			}
HXLINE( 806)			rayab->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE( 807)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = rayab;
            		}
HXLINE( 812)		return ret;
            	}



hx::ObjectPtr< ZPP_SweepPhase_obj > ZPP_SweepPhase_obj::__new( ::zpp_nape::space::ZPP_Space space) {
	hx::ObjectPtr< ZPP_SweepPhase_obj > __this = new ZPP_SweepPhase_obj();
	__this->__construct(space);
	return __this;
}

hx::ObjectPtr< ZPP_SweepPhase_obj > ZPP_SweepPhase_obj::__alloc(hx::Ctx *_hx_ctx, ::zpp_nape::space::ZPP_Space space) {
	ZPP_SweepPhase_obj *__this = (ZPP_SweepPhase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SweepPhase_obj), true, "zpp_nape.space.ZPP_SweepPhase"));
	*(void **)__this = ZPP_SweepPhase_obj::_hx_vtable;
	__this->__construct(space);
	return __this;
}

ZPP_SweepPhase_obj::ZPP_SweepPhase_obj()
{
}

void ZPP_SweepPhase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SweepPhase);
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(failed,"failed");
	 ::zpp_nape::space::ZPP_Broadphase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZPP_SweepPhase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(failed,"failed");
	 ::zpp_nape::space::ZPP_Broadphase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ZPP_SweepPhase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn()); }
		if (HX_FIELD_EQ(inName,"failed") ) { return hx::Val( failed); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__insert") ) { return hx::Val( __insert_dyn()); }
		if (HX_FIELD_EQ(inName,"__remove") ) { return hx::Val( __remove_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"broadphase") ) { return hx::Val( broadphase_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return hx::Val( shapesInAABB_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return hx::Val( bodiesInAABB_dyn()); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return hx::Val( rayMultiCast_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return hx::Val( shapesInShape_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return hx::Val( bodiesInShape_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return hx::Val( shapesInCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return hx::Val( bodiesInCircle_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sync_broadphase") ) { return hx::Val( sync_broadphase_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return hx::Val( shapesUnderPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return hx::Val( bodiesUnderPoint_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sync_broadphase_fast") ) { return hx::Val( sync_broadphase_fast_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_SweepPhase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast<  ::zpp_nape::space::ZPP_SweepData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { failed=inValue.Cast<  ::nape::phys::BodyList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_SweepPhase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"));
	outFields->push(HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SweepPhase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_SweepData*/ ,(int)offsetof(ZPP_SweepPhase_obj,list),HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{hx::fsObject /*::nape::phys::BodyList*/ ,(int)offsetof(ZPP_SweepPhase_obj,failed),HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_SweepPhase_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_SweepPhase_obj_sMemberFields[] = {
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("__insert","\x59","\xae","\x0c","\x46"),
	HX_HCSTRING("__remove","\x64","\x07","\xb8","\xac"),
	HX_HCSTRING("__sync","\x7b","\x1d","\x58","\xfb"),
	HX_HCSTRING("sync_broadphase","\x5d","\xa8","\x59","\x01"),
	HX_HCSTRING("sync_broadphase_fast","\xfe","\xc4","\x9c","\x96"),
	HX_HCSTRING("broadphase","\xb9","\x5d","\x1d","\xd8"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("shapesUnderPoint","\xea","\xec","\xbc","\x47"),
	HX_HCSTRING("bodiesUnderPoint","\xb8","\x1b","\x30","\x80"),
	HX_HCSTRING("shapesInAABB","\xd7","\x1c","\x84","\xf9"),
	HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7"),
	HX_HCSTRING("bodiesInAABB","\xa5","\x4c","\x28","\x9e"),
	HX_HCSTRING("shapesInCircle","\x27","\xd4","\xf7","\x6c"),
	HX_HCSTRING("bodiesInCircle","\x75","\x13","\xe2","\xa6"),
	HX_HCSTRING("shapesInShape","\xea","\x90","\x2a","\xd1"),
	HX_HCSTRING("bodiesInShape","\x5c","\x35","\x30","\x3c"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("rayMultiCast","\x8e","\x02","\x7d","\x23"),
	::String(null()) };

static void ZPP_SweepPhase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SweepPhase_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SweepPhase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SweepPhase_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_SweepPhase_obj::__mClass;

void ZPP_SweepPhase_obj::__register()
{
	hx::Object *dummy = new ZPP_SweepPhase_obj;
	ZPP_SweepPhase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.space.ZPP_SweepPhase","\x7d","\x0c","\xa7","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_SweepPhase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SweepPhase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SweepPhase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SweepPhase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SweepPhase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SweepPhase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace space
