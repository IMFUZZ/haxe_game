// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_DynAABBPhase
#include <zpp_nape/space/ZPP_DynAABBPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepPhase
#include <zpp_nape/space/ZPP_SweepPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_174_new,"zpp_nape.space.ZPP_Broadphase","new",0xf55a4ff9,"zpp_nape.space.ZPP_Broadphase.new","zpp_nape/space/Broadphase.hx",174,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_180_insert,"zpp_nape.space.ZPP_Broadphase","insert",0x67d1c940,"zpp_nape.space.ZPP_Broadphase.insert","zpp_nape/space/Broadphase.hx",180,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_184_remove,"zpp_nape.space.ZPP_Broadphase","remove",0xce7d224b,"zpp_nape.space.ZPP_Broadphase.remove","zpp_nape/space/Broadphase.hx",184,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_188_sync,"zpp_nape.space.ZPP_Broadphase","sync",0xbd08e0a2,"zpp_nape.space.ZPP_Broadphase.sync","zpp_nape/space/Broadphase.hx",188,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_192_broadphase,"zpp_nape.space.ZPP_Broadphase","broadphase",0x659af340,"zpp_nape.space.ZPP_Broadphase.broadphase","zpp_nape/space/Broadphase.hx",192,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_201_clear,"zpp_nape.space.ZPP_Broadphase","clear",0x6bb3c966,"zpp_nape.space.ZPP_Broadphase.clear","zpp_nape/space/Broadphase.hx",201,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_203_shapesUnderPoint,"zpp_nape.space.ZPP_Broadphase","shapesUnderPoint",0x7ce9e1b1,"zpp_nape.space.ZPP_Broadphase.shapesUnderPoint","zpp_nape/space/Broadphase.hx",203,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_206_bodiesUnderPoint,"zpp_nape.space.ZPP_Broadphase","bodiesUnderPoint",0xb55d107f,"zpp_nape.space.ZPP_Broadphase.bodiesUnderPoint","zpp_nape/space/Broadphase.hx",206,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_210_updateAABBShape,"zpp_nape.space.ZPP_Broadphase","updateAABBShape",0x82875651,"zpp_nape.space.ZPP_Broadphase.updateAABBShape","zpp_nape/space/Broadphase.hx",210,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_231_shapesInAABB,"zpp_nape.space.ZPP_Broadphase","shapesInAABB",0x11b7621e,"zpp_nape.space.ZPP_Broadphase.shapesInAABB","zpp_nape/space/Broadphase.hx",231,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_234_bodiesInAABB,"zpp_nape.space.ZPP_Broadphase","bodiesInAABB",0xb65b91ec,"zpp_nape.space.ZPP_Broadphase.bodiesInAABB","zpp_nape/space/Broadphase.hx",234,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_237_updateCircShape,"zpp_nape.space.ZPP_Broadphase","updateCircShape",0x1619299a,"zpp_nape.space.ZPP_Broadphase.updateCircShape","zpp_nape/space/Broadphase.hx",237,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_255_shapesInCircle,"zpp_nape.space.ZPP_Broadphase","shapesInCircle",0x6c7c392e,"zpp_nape.space.ZPP_Broadphase.shapesInCircle","zpp_nape/space/Broadphase.hx",255,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_258_bodiesInCircle,"zpp_nape.space.ZPP_Broadphase","bodiesInCircle",0xa666787c,"zpp_nape.space.ZPP_Broadphase.bodiesInCircle","zpp_nape/space/Broadphase.hx",258,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_260_validateShape,"zpp_nape.space.ZPP_Broadphase","validateShape",0xbcc5fb84,"zpp_nape.space.ZPP_Broadphase.validateShape","zpp_nape/space/Broadphase.hx",260,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_266_shapesInShape,"zpp_nape.space.ZPP_Broadphase","shapesInShape",0xe5d3e9c3,"zpp_nape.space.ZPP_Broadphase.shapesInShape","zpp_nape/space/Broadphase.hx",266,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_269_bodiesInShape,"zpp_nape.space.ZPP_Broadphase","bodiesInShape",0x50d98e35,"zpp_nape.space.ZPP_Broadphase.bodiesInShape","zpp_nape/space/Broadphase.hx",269,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_272_rayCast,"zpp_nape.space.ZPP_Broadphase","rayCast",0x113d1de2,"zpp_nape.space.ZPP_Broadphase.rayCast","zpp_nape/space/Broadphase.hx",272,0xcf31b77a)
HX_DEFINE_STACK_FRAME(_hx_pos_771aa6e17aed28f8_275_rayMultiCast,"zpp_nape.space.ZPP_Broadphase","rayMultiCast",0x3bb047d5,"zpp_nape.space.ZPP_Broadphase.rayMultiCast","zpp_nape/space/Broadphase.hx",275,0xcf31b77a)
namespace zpp_nape{
namespace space{

void ZPP_Broadphase_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_174_new)
            	HX_STACK_THIS(this)
HXLINE( 236)		this->circShape = null();
HXLINE( 209)		this->matrix = null();
HXLINE( 208)		this->aabbShape = null();
HXLINE( 178)		this->dynab = null();
HXLINE( 177)		this->sweep = null();
HXLINE( 176)		this->is_sweep = false;
HXLINE( 175)		this->space = null();
            	}

Dynamic ZPP_Broadphase_obj::__CreateEmpty() { return new ZPP_Broadphase_obj; }

void *ZPP_Broadphase_obj::_hx_vtable = 0;

Dynamic ZPP_Broadphase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Broadphase_obj > _hx_result = new ZPP_Broadphase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Broadphase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fc88af7;
}

void ZPP_Broadphase_obj::insert( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_180_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 180)		if (this->is_sweep) {
HXLINE( 180)			this->sweep->__insert(shape);
            		}
            		else {
HXLINE( 181)			this->dynab->__insert(shape);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,insert,(void))

void ZPP_Broadphase_obj::remove( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_184_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 184)		if (this->is_sweep) {
HXLINE( 184)			this->sweep->__remove(shape);
            		}
            		else {
HXLINE( 185)			this->dynab->__remove(shape);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,remove,(void))

void ZPP_Broadphase_obj::sync( ::zpp_nape::shape::ZPP_Shape shape){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_188_sync)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
HXLINE( 188)		if (this->is_sweep) {
HXLINE( 188)			if (!(this->sweep->space->continuous)) {
HXLINE( 188)				if (shape->zip_aabb) {
HXLINE( 188)					if (hx::IsNotNull( shape->body )) {
HXLINE( 188)						shape->zip_aabb = false;
HXDLIN( 188)						if ((shape->type == (int)0)) {
HXLINE( 188)							HX_VARI(  ::zpp_nape::shape::ZPP_Circle,_this) = shape->circle;
HXDLIN( 188)							if (_this->zip_worldCOM) {
HXLINE( 188)								if (hx::IsNotNull( _this->body )) {
HXLINE( 188)									_this->zip_worldCOM = false;
HXDLIN( 188)									if (_this->zip_localCOM) {
HXLINE( 188)										_this->zip_localCOM = false;
HXDLIN( 188)										if ((_this->type == (int)1)) {
HXLINE( 188)											HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this1,"_this") = _this->polygon;
HXDLIN( 188)											if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE( 188)												_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 188)												_this1->localCOMy = _this1->lverts->next->y;
            											}
            											else {
HXLINE( 188)												if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE( 188)													{
HXLINE( 188)														_this1->localCOMx = _this1->lverts->next->x;
HXDLIN( 188)														_this1->localCOMy = _this1->lverts->next->y;
            													}
HXDLIN( 188)													{
HXLINE( 188)														_this1->localCOMx = (_this1->localCOMx + _this1->lverts->next->next->x);
HXDLIN( 188)														_this1->localCOMy = (_this1->localCOMy + _this1->lverts->next->next->y);
            													}
HXDLIN( 188)													{
HXLINE( 188)														_this1->localCOMx = (_this1->localCOMx * ((Float)0.5));
HXDLIN( 188)														_this1->localCOMy = (_this1->localCOMy * ((Float)0.5));
            													}
            												}
            												else {
HXLINE( 188)													{
HXLINE( 188)														_this1->localCOMx = (int)0;
HXDLIN( 188)														_this1->localCOMy = (int)0;
            													}
HXDLIN( 188)													HX_VARI( Float,area) = ((Float)0.0);
HXDLIN( 188)													{
HXLINE( 188)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this1->lverts->next;
HXDLIN( 188)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite;
HXDLIN( 188)														cx_ite = cx_ite->next;
HXDLIN( 188)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite;
HXDLIN( 188)														cx_ite = cx_ite->next;
HXDLIN( 188)														while(hx::IsNotNull( cx_ite )){
HXLINE( 188)															HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite;
HXDLIN( 188)															{
HXLINE( 188)																area = (area + (v->x * (w->y - u->y)));
HXDLIN( 188)																HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 188)																_this1->localCOMx = (_this1->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 188)																_this1->localCOMy = (_this1->localCOMy + ((v->y + w->y) * cf));
            															}
HXDLIN( 188)															u = v;
HXDLIN( 188)															v = w;
HXDLIN( 188)															cx_ite = cx_ite->next;
            														}
HXDLIN( 188)														cx_ite = _this1->lverts->next;
HXDLIN( 188)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite;
HXDLIN( 188)														{
HXLINE( 188)															area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 188)															HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 188)															_this1->localCOMx = (_this1->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 188)															_this1->localCOMy = (_this1->localCOMy + ((v->y + w1->y) * cf1));
            														}
HXDLIN( 188)														u = v;
HXDLIN( 188)														cx_ite = cx_ite->next;
HXDLIN( 188)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite;
HXDLIN( 188)														{
HXLINE( 188)															area = (area + (w1->x * (w2->y - u->y)));
HXDLIN( 188)															HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN( 188)															_this1->localCOMx = (_this1->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN( 188)															_this1->localCOMy = (_this1->localCOMy + ((w1->y + w2->y) * cf2));
            														}
            													}
HXDLIN( 188)													area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN( 188)													{
HXLINE( 188)														HX_VARI( Float,t) = area;
HXDLIN( 188)														_this1->localCOMx = (_this1->localCOMx * t);
HXDLIN( 188)														_this1->localCOMy = (_this1->localCOMy * t);
            													}
            												}
            											}
            										}
HXDLIN( 188)										if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE( 188)											_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN( 188)											_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            										}
            									}
HXDLIN( 188)									{
HXLINE( 188)										HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN( 188)										if (_this2->zip_axis) {
HXLINE( 188)											_this2->zip_axis = false;
HXDLIN( 188)											{
HXLINE( 188)												_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN( 188)												_this2->axisy = ::Math_obj::cos(_this2->rot);
            											}
            										}
            									}
HXDLIN( 188)									{
HXLINE( 188)										_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN( 188)										_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            									}
            								}
            							}
HXDLIN( 188)							HX_VARI( Float,rx) = _this->radius;
HXDLIN( 188)							HX_VARI( Float,ry) = _this->radius;
HXDLIN( 188)							{
HXLINE( 188)								_this->aabb->minx = (_this->worldCOMx - rx);
HXDLIN( 188)								_this->aabb->miny = (_this->worldCOMy - ry);
            							}
HXDLIN( 188)							{
HXLINE( 188)								_this->aabb->maxx = (_this->worldCOMx + rx);
HXDLIN( 188)								_this->aabb->maxy = (_this->worldCOMy + ry);
            							}
            						}
            						else {
HXLINE( 188)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this3,"_this") = shape->polygon;
HXDLIN( 188)							if (_this3->zip_gverts) {
HXLINE( 188)								if (hx::IsNotNull( _this3->body )) {
HXLINE( 188)									_this3->zip_gverts = false;
HXDLIN( 188)									_this3->validate_lverts();
HXDLIN( 188)									{
HXLINE( 188)										HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this4,"_this") = _this3->body;
HXDLIN( 188)										if (_this4->zip_axis) {
HXLINE( 188)											_this4->zip_axis = false;
HXDLIN( 188)											{
HXLINE( 188)												_this4->axisx = ::Math_obj::sin(_this4->rot);
HXDLIN( 188)												_this4->axisy = ::Math_obj::cos(_this4->rot);
            											}
            										}
            									}
HXDLIN( 188)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this3->lverts->next;
HXDLIN( 188)									{
HXLINE( 188)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this3->gverts->next;
HXDLIN( 188)										while(hx::IsNotNull( cx_ite1 )){
HXLINE( 188)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite1;
HXDLIN( 188)											{
HXLINE( 188)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 188)												li = li->next;
HXDLIN( 188)												{
HXLINE( 188)													g->x = (_this3->body->posx + ((_this3->body->axisy * l->x) - (_this3->body->axisx * l->y)));
HXDLIN( 188)													g->y = (_this3->body->posy + ((l->x * _this3->body->axisx) + (l->y * _this3->body->axisy)));
            												}
            											}
HXDLIN( 188)											cx_ite1 = cx_ite1->next;
            										}
            									}
            								}
            							}
HXDLIN( 188)							 ::zpp_nape::geom::ZPP_Vec2 _this5 = _this3->gverts->next;
HXDLIN( 188)							{
HXLINE( 188)								_this3->aabb->minx = _this5->x;
HXDLIN( 188)								_this3->aabb->miny = _this5->y;
            							}
HXDLIN( 188)							{
HXLINE( 188)								_this3->aabb->maxx = _this5->x;
HXDLIN( 188)								_this3->aabb->maxy = _this5->y;
            							}
HXDLIN( 188)							{
HXLINE( 188)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this3->gverts->next->next;
HXDLIN( 188)								while(hx::IsNotNull( cx_ite2 )){
HXLINE( 188)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite2;
HXDLIN( 188)									{
HXLINE( 188)										if ((p->x < _this3->aabb->minx)) {
HXLINE( 188)											_this3->aabb->minx = p->x;
            										}
HXDLIN( 188)										if ((p->x > _this3->aabb->maxx)) {
HXLINE( 188)											_this3->aabb->maxx = p->x;
            										}
HXDLIN( 188)										if ((p->y < _this3->aabb->miny)) {
HXLINE( 188)											_this3->aabb->miny = p->y;
            										}
HXDLIN( 188)										if ((p->y > _this3->aabb->maxy)) {
HXLINE( 188)											_this3->aabb->maxy = p->y;
            										}
            									}
HXDLIN( 188)									cx_ite2 = cx_ite2->next;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 189)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_DynAABBPhase,_this6,"_this") = this->dynab;
HXDLIN( 189)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,node) = shape->node;
HXDLIN( 189)			if (!(node->synced)) {
HXLINE( 189)				if (!(_this6->space->continuous)) {
HXLINE( 189)					if (shape->zip_aabb) {
HXLINE( 189)						if (hx::IsNotNull( shape->body )) {
HXLINE( 189)							shape->zip_aabb = false;
HXDLIN( 189)							if ((shape->type == (int)0)) {
HXLINE( 189)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,_this7,"_this") = shape->circle;
HXDLIN( 189)								if (_this7->zip_worldCOM) {
HXLINE( 189)									if (hx::IsNotNull( _this7->body )) {
HXLINE( 189)										_this7->zip_worldCOM = false;
HXDLIN( 189)										if (_this7->zip_localCOM) {
HXLINE( 189)											_this7->zip_localCOM = false;
HXDLIN( 189)											if ((_this7->type == (int)1)) {
HXLINE( 189)												HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this8,"_this") = _this7->polygon;
HXDLIN( 189)												if (hx::IsNull( _this8->lverts->next->next )) {
HXLINE( 189)													_this8->localCOMx = _this8->lverts->next->x;
HXDLIN( 189)													_this8->localCOMy = _this8->lverts->next->y;
            												}
            												else {
HXLINE( 189)													if (hx::IsNull( _this8->lverts->next->next->next )) {
HXLINE( 189)														{
HXLINE( 189)															_this8->localCOMx = _this8->lverts->next->x;
HXDLIN( 189)															_this8->localCOMy = _this8->lverts->next->y;
            														}
HXDLIN( 189)														{
HXLINE( 189)															_this8->localCOMx = (_this8->localCOMx + _this8->lverts->next->next->x);
HXDLIN( 189)															_this8->localCOMy = (_this8->localCOMy + _this8->lverts->next->next->y);
            														}
HXDLIN( 189)														{
HXLINE( 189)															_this8->localCOMx = (_this8->localCOMx * ((Float)0.5));
HXDLIN( 189)															_this8->localCOMy = (_this8->localCOMy * ((Float)0.5));
            														}
            													}
            													else {
HXLINE( 189)														{
HXLINE( 189)															_this8->localCOMx = (int)0;
HXDLIN( 189)															_this8->localCOMy = (int)0;
            														}
HXDLIN( 189)														HX_VARI_NAME( Float,area1,"area") = ((Float)0.0);
HXDLIN( 189)														{
HXLINE( 189)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = _this8->lverts->next;
HXDLIN( 189)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u1,"u") = cx_ite3;
HXDLIN( 189)															cx_ite3 = cx_ite3->next;
HXDLIN( 189)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite3;
HXDLIN( 189)															cx_ite3 = cx_ite3->next;
HXDLIN( 189)															while(hx::IsNotNull( cx_ite3 )){
HXLINE( 189)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w3,"w") = cx_ite3;
HXDLIN( 189)																{
HXLINE( 189)																	area1 = (area1 + (v1->x * (w3->y - u1->y)));
HXDLIN( 189)																	HX_VARI_NAME( Float,cf3,"cf") = ((w3->y * v1->x) - (w3->x * v1->y));
HXDLIN( 189)																	_this8->localCOMx = (_this8->localCOMx + ((v1->x + w3->x) * cf3));
HXDLIN( 189)																	_this8->localCOMy = (_this8->localCOMy + ((v1->y + w3->y) * cf3));
            																}
HXDLIN( 189)																u1 = v1;
HXDLIN( 189)																v1 = w3;
HXDLIN( 189)																cx_ite3 = cx_ite3->next;
            															}
HXDLIN( 189)															cx_ite3 = _this8->lverts->next;
HXDLIN( 189)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w4,"w") = cx_ite3;
HXDLIN( 189)															{
HXLINE( 189)																area1 = (area1 + (v1->x * (w4->y - u1->y)));
HXDLIN( 189)																HX_VARI_NAME( Float,cf4,"cf") = ((w4->y * v1->x) - (w4->x * v1->y));
HXDLIN( 189)																_this8->localCOMx = (_this8->localCOMx + ((v1->x + w4->x) * cf4));
HXDLIN( 189)																_this8->localCOMy = (_this8->localCOMy + ((v1->y + w4->y) * cf4));
            															}
HXDLIN( 189)															u1 = v1;
HXDLIN( 189)															cx_ite3 = cx_ite3->next;
HXDLIN( 189)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w5,"w") = cx_ite3;
HXDLIN( 189)															{
HXLINE( 189)																area1 = (area1 + (w4->x * (w5->y - u1->y)));
HXDLIN( 189)																HX_VARI_NAME( Float,cf5,"cf") = ((w5->y * w4->x) - (w5->x * w4->y));
HXDLIN( 189)																_this8->localCOMx = (_this8->localCOMx + ((w4->x + w5->x) * cf5));
HXDLIN( 189)																_this8->localCOMy = (_this8->localCOMy + ((w4->y + w5->y) * cf5));
            															}
            														}
HXDLIN( 189)														area1 = ((Float)(int)1 / (Float)((int)3 * area1));
HXDLIN( 189)														{
HXLINE( 189)															HX_VARI_NAME( Float,t1,"t") = area1;
HXDLIN( 189)															_this8->localCOMx = (_this8->localCOMx * t1);
HXDLIN( 189)															_this8->localCOMy = (_this8->localCOMy * t1);
            														}
            													}
            												}
            											}
HXDLIN( 189)											if (hx::IsNotNull( _this7->wrap_localCOM )) {
HXLINE( 189)												_this7->wrap_localCOM->zpp_inner->x = _this7->localCOMx;
HXDLIN( 189)												_this7->wrap_localCOM->zpp_inner->y = _this7->localCOMy;
            											}
            										}
HXDLIN( 189)										{
HXLINE( 189)											HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this9,"_this") = _this7->body;
HXDLIN( 189)											if (_this9->zip_axis) {
HXLINE( 189)												_this9->zip_axis = false;
HXDLIN( 189)												{
HXLINE( 189)													_this9->axisx = ::Math_obj::sin(_this9->rot);
HXDLIN( 189)													_this9->axisy = ::Math_obj::cos(_this9->rot);
            												}
            											}
            										}
HXDLIN( 189)										{
HXLINE( 189)											_this7->worldCOMx = (_this7->body->posx + ((_this7->body->axisy * _this7->localCOMx) - (_this7->body->axisx * _this7->localCOMy)));
HXDLIN( 189)											_this7->worldCOMy = (_this7->body->posy + ((_this7->localCOMx * _this7->body->axisx) + (_this7->localCOMy * _this7->body->axisy)));
            										}
            									}
            								}
HXDLIN( 189)								HX_VARI_NAME( Float,rx1,"rx") = _this7->radius;
HXDLIN( 189)								HX_VARI_NAME( Float,ry1,"ry") = _this7->radius;
HXDLIN( 189)								{
HXLINE( 189)									_this7->aabb->minx = (_this7->worldCOMx - rx1);
HXDLIN( 189)									_this7->aabb->miny = (_this7->worldCOMy - ry1);
            								}
HXDLIN( 189)								{
HXLINE( 189)									_this7->aabb->maxx = (_this7->worldCOMx + rx1);
HXDLIN( 189)									_this7->aabb->maxy = (_this7->worldCOMy + ry1);
            								}
            							}
            							else {
HXLINE( 189)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this10,"_this") = shape->polygon;
HXDLIN( 189)								if (_this10->zip_gverts) {
HXLINE( 189)									if (hx::IsNotNull( _this10->body )) {
HXLINE( 189)										_this10->zip_gverts = false;
HXDLIN( 189)										_this10->validate_lverts();
HXDLIN( 189)										{
HXLINE( 189)											HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this11,"_this") = _this10->body;
HXDLIN( 189)											if (_this11->zip_axis) {
HXLINE( 189)												_this11->zip_axis = false;
HXDLIN( 189)												{
HXLINE( 189)													_this11->axisx = ::Math_obj::sin(_this11->rot);
HXDLIN( 189)													_this11->axisy = ::Math_obj::cos(_this11->rot);
            												}
            											}
            										}
HXDLIN( 189)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li1,"li") = _this10->lverts->next;
HXDLIN( 189)										{
HXLINE( 189)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = _this10->gverts->next;
HXDLIN( 189)											while(hx::IsNotNull( cx_ite4 )){
HXLINE( 189)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g1,"g") = cx_ite4;
HXDLIN( 189)												{
HXLINE( 189)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l1,"l") = li1;
HXDLIN( 189)													li1 = li1->next;
HXDLIN( 189)													{
HXLINE( 189)														g1->x = (_this10->body->posx + ((_this10->body->axisy * l1->x) - (_this10->body->axisx * l1->y)));
HXDLIN( 189)														g1->y = (_this10->body->posy + ((l1->x * _this10->body->axisx) + (l1->y * _this10->body->axisy)));
            													}
            												}
HXDLIN( 189)												cx_ite4 = cx_ite4->next;
            											}
            										}
            									}
            								}
HXDLIN( 189)								 ::zpp_nape::geom::ZPP_Vec2 _this12 = _this10->gverts->next;
HXDLIN( 189)								{
HXLINE( 189)									_this10->aabb->minx = _this12->x;
HXDLIN( 189)									_this10->aabb->miny = _this12->y;
            								}
HXDLIN( 189)								{
HXLINE( 189)									_this10->aabb->maxx = _this12->x;
HXDLIN( 189)									_this10->aabb->maxy = _this12->y;
            								}
HXDLIN( 189)								{
HXLINE( 189)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite5,"cx_ite") = _this10->gverts->next->next;
HXDLIN( 189)									while(hx::IsNotNull( cx_ite5 )){
HXLINE( 189)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,p1,"p") = cx_ite5;
HXDLIN( 189)										{
HXLINE( 189)											if ((p1->x < _this10->aabb->minx)) {
HXLINE( 189)												_this10->aabb->minx = p1->x;
            											}
HXDLIN( 189)											if ((p1->x > _this10->aabb->maxx)) {
HXLINE( 189)												_this10->aabb->maxx = p1->x;
            											}
HXDLIN( 189)											if ((p1->y < _this10->aabb->miny)) {
HXLINE( 189)												_this10->aabb->miny = p1->y;
            											}
HXDLIN( 189)											if ((p1->y > _this10->aabb->maxy)) {
HXLINE( 189)												_this10->aabb->maxy = p1->y;
            											}
            										}
HXDLIN( 189)										cx_ite5 = cx_ite5->next;
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 189)				HX_VAR( bool,sync);
HXDLIN( 189)				bool sync1;
HXDLIN( 189)				if ((shape->body->type == (int)1)) {
HXLINE( 189)					sync1 = false;
            				}
            				else {
HXLINE( 189)					sync1 = !(shape->body->component->sleeping);
            				}
HXDLIN( 189)				if ((node->dyn == sync1)) {
HXLINE( 189)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this13,"_this") = node->aabb;
HXDLIN( 189)					HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = shape->aabb;
HXDLIN( 189)					bool sync2;
HXDLIN( 189)					bool sync3;
HXDLIN( 189)					bool sync4;
HXDLIN( 189)					if ((x->minx >= _this13->minx)) {
HXLINE( 189)						sync4 = (x->miny >= _this13->miny);
            					}
            					else {
HXLINE( 189)						sync4 = false;
            					}
HXDLIN( 189)					if (sync4) {
HXLINE( 189)						sync3 = (x->maxx <= _this13->maxx);
            					}
            					else {
HXLINE( 189)						sync3 = false;
            					}
HXDLIN( 189)					if (sync3) {
HXLINE( 189)						sync2 = (x->maxy <= _this13->maxy);
            					}
            					else {
HXLINE( 189)						sync2 = false;
            					}
HXDLIN( 189)					sync = !(sync2);
            				}
            				else {
HXLINE( 189)					sync = true;
            				}
HXDLIN( 189)				if (sync) {
HXLINE( 189)					node->synced = true;
HXDLIN( 189)					{
HXLINE( 189)						node->snext = _this6->syncs;
HXDLIN( 189)						_this6->syncs = node;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,sync,(void))

void ZPP_Broadphase_obj::broadphase( ::zpp_nape::space::ZPP_Space space,bool discrete){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_192_broadphase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(space,"space")
            	HX_STACK_ARG(discrete,"discrete")
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Broadphase_obj,broadphase,(void))

void ZPP_Broadphase_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_201_clear)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Broadphase_obj,clear,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_203_shapesUnderPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 203)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,shapesUnderPoint,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesUnderPoint(Float x,Float y, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_206_bodiesUnderPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 206)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,bodiesUnderPoint,return )

void ZPP_Broadphase_obj::updateAABBShape( ::zpp_nape::geom::ZPP_AABB aabb){
            	HX_GC_STACKFRAME(&_hx_pos_771aa6e17aed28f8_210_updateAABBShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
HXLINE( 211)		if (hx::IsNull( this->aabbShape )) {
HXLINE( 212)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE( 212)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 212)				::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 212)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXLINE( 213)			{
HXLINE( 213)				HX_VARI(  ::nape::shape::ShapeList,_this) =  ::nape::phys::Body_obj::__alloc( HX_CTX ,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC,null())->zpp_inner->wrap_shapes;
HXDLIN( 213)				HX_VARI(  ::nape::shape::Shape,obj) = (this->aabbShape =  ::nape::shape::Polygon_obj::__alloc( HX_CTX ,::nape::shape::Polygon_obj::rect(aabb->minx,aabb->miny,(aabb->maxx - aabb->minx),(aabb->maxy - aabb->miny),null()),null(),null()));
HXDLIN( 213)				if (_this->zpp_inner->reverse_flag) {
HXLINE( 213)					_this->push(obj);
            				}
            				else {
HXLINE( 213)					_this->unshift(obj);
            				}
            			}
            		}
            		else {
HXLINE( 216)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,ab) = this->aabbShape->zpp_inner->aabb;
HXLINE( 217)			HX_VARI( Float,sx) = ((Float)(aabb->maxx - aabb->minx) / (Float)(ab->maxx - ab->minx));
HXLINE( 218)			HX_VARI( Float,sy) = ((Float)(aabb->maxy - aabb->miny) / (Float)(ab->maxy - ab->miny));
HXLINE( 219)			if (hx::IsNull( this->matrix )) {
HXLINE( 219)				this->matrix =  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE( 220)			{
HXLINE( 220)				HX_VARI_NAME(  ::nape::geom::Mat23,_this1,"_this") = this->matrix;
HXDLIN( 220)				{
HXLINE( 220)					_this1->zpp_inner->a = sx;
HXDLIN( 220)					{
HXLINE( 220)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this2,"_this") = _this1->zpp_inner;
HXDLIN( 220)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 220)							_this2->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 221)			{
HXLINE( 221)				HX_VARI_NAME(  ::nape::geom::Mat23,_this3,"_this") = this->matrix;
HXDLIN( 221)				HX_VARI_NAME(  ::nape::geom::Mat23,_this4,"_this") = this->matrix;
HXDLIN( 221)				{
HXLINE( 221)					_this4->zpp_inner->c = (int)0;
HXDLIN( 221)					{
HXLINE( 221)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this5,"_this") = _this4->zpp_inner;
HXDLIN( 221)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 221)							_this5->_invalidate();
            						}
            					}
            				}
HXDLIN( 221)				{
HXLINE( 221)					_this3->zpp_inner->b = _this4->zpp_inner->c;
HXDLIN( 221)					{
HXLINE( 221)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this6,"_this") = _this3->zpp_inner;
HXDLIN( 221)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 221)							_this6->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 222)			{
HXLINE( 222)				HX_VARI_NAME(  ::nape::geom::Mat23,_this7,"_this") = this->matrix;
HXDLIN( 222)				{
HXLINE( 222)					_this7->zpp_inner->d = sy;
HXDLIN( 222)					{
HXLINE( 222)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this8,"_this") = _this7->zpp_inner;
HXDLIN( 222)						if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 222)							_this8->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 223)			{
HXLINE( 223)				HX_VARI_NAME(  ::nape::geom::Mat23,_this9,"_this") = this->matrix;
HXDLIN( 223)				{
HXLINE( 223)					_this9->zpp_inner->tx = (aabb->minx - (sx * ab->minx));
HXDLIN( 223)					{
HXLINE( 223)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this10,"_this") = _this9->zpp_inner;
HXDLIN( 223)						if (hx::IsNotNull( _this10->_invalidate )) {
HXLINE( 223)							_this10->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 224)			{
HXLINE( 224)				HX_VARI_NAME(  ::nape::geom::Mat23,_this11,"_this") = this->matrix;
HXDLIN( 224)				{
HXLINE( 224)					_this11->zpp_inner->ty = (aabb->miny - (sy * ab->miny));
HXDLIN( 224)					{
HXLINE( 224)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this12,"_this") = _this11->zpp_inner;
HXDLIN( 224)						if (hx::IsNotNull( _this12->_invalidate )) {
HXLINE( 224)							_this12->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 225)			this->aabbShape->transform(this->matrix);
            		}
HXLINE( 227)		{
HXLINE( 227)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,_this13,"_this") = this->aabbShape->zpp_inner;
HXDLIN( 227)			if (_this13->zip_aabb) {
HXLINE( 227)				if (hx::IsNotNull( _this13->body )) {
HXLINE( 227)					_this13->zip_aabb = false;
HXDLIN( 227)					if ((_this13->type == (int)0)) {
HXLINE( 227)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,_this14,"_this") = _this13->circle;
HXDLIN( 227)						if (_this14->zip_worldCOM) {
HXLINE( 227)							if (hx::IsNotNull( _this14->body )) {
HXLINE( 227)								_this14->zip_worldCOM = false;
HXDLIN( 227)								if (_this14->zip_localCOM) {
HXLINE( 227)									_this14->zip_localCOM = false;
HXDLIN( 227)									if ((_this14->type == (int)1)) {
HXLINE( 227)										HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this15,"_this") = _this14->polygon;
HXDLIN( 227)										if (hx::IsNull( _this15->lverts->next->next )) {
HXLINE( 227)											_this15->localCOMx = _this15->lverts->next->x;
HXDLIN( 227)											_this15->localCOMy = _this15->lverts->next->y;
            										}
            										else {
HXLINE( 227)											if (hx::IsNull( _this15->lverts->next->next->next )) {
HXLINE( 227)												{
HXLINE( 227)													_this15->localCOMx = _this15->lverts->next->x;
HXDLIN( 227)													_this15->localCOMy = _this15->lverts->next->y;
            												}
HXDLIN( 227)												{
HXLINE( 227)													_this15->localCOMx = (_this15->localCOMx + _this15->lverts->next->next->x);
HXDLIN( 227)													_this15->localCOMy = (_this15->localCOMy + _this15->lverts->next->next->y);
            												}
HXDLIN( 227)												{
HXLINE( 227)													_this15->localCOMx = (_this15->localCOMx * ((Float)0.5));
HXDLIN( 227)													_this15->localCOMy = (_this15->localCOMy * ((Float)0.5));
            												}
            											}
            											else {
HXLINE( 227)												{
HXLINE( 227)													_this15->localCOMx = (int)0;
HXDLIN( 227)													_this15->localCOMy = (int)0;
            												}
HXDLIN( 227)												HX_VARI( Float,area) = ((Float)0.0);
HXDLIN( 227)												{
HXLINE( 227)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this15->lverts->next;
HXDLIN( 227)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite;
HXDLIN( 227)													cx_ite = cx_ite->next;
HXDLIN( 227)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite;
HXDLIN( 227)													cx_ite = cx_ite->next;
HXDLIN( 227)													while(hx::IsNotNull( cx_ite )){
HXLINE( 227)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite;
HXDLIN( 227)														{
HXLINE( 227)															area = (area + (v->x * (w->y - u->y)));
HXDLIN( 227)															HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 227)															_this15->localCOMx = (_this15->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 227)															_this15->localCOMy = (_this15->localCOMy + ((v->y + w->y) * cf));
            														}
HXDLIN( 227)														u = v;
HXDLIN( 227)														v = w;
HXDLIN( 227)														cx_ite = cx_ite->next;
            													}
HXDLIN( 227)													cx_ite = _this15->lverts->next;
HXDLIN( 227)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite;
HXDLIN( 227)													{
HXLINE( 227)														area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 227)														HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 227)														_this15->localCOMx = (_this15->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 227)														_this15->localCOMy = (_this15->localCOMy + ((v->y + w1->y) * cf1));
            													}
HXDLIN( 227)													u = v;
HXDLIN( 227)													cx_ite = cx_ite->next;
HXDLIN( 227)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite;
HXDLIN( 227)													{
HXLINE( 227)														area = (area + (w1->x * (w2->y - u->y)));
HXDLIN( 227)														HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN( 227)														_this15->localCOMx = (_this15->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN( 227)														_this15->localCOMy = (_this15->localCOMy + ((w1->y + w2->y) * cf2));
            													}
            												}
HXDLIN( 227)												area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN( 227)												{
HXLINE( 227)													HX_VARI( Float,t) = area;
HXDLIN( 227)													_this15->localCOMx = (_this15->localCOMx * t);
HXDLIN( 227)													_this15->localCOMy = (_this15->localCOMy * t);
            												}
            											}
            										}
            									}
HXDLIN( 227)									if (hx::IsNotNull( _this14->wrap_localCOM )) {
HXLINE( 227)										_this14->wrap_localCOM->zpp_inner->x = _this14->localCOMx;
HXDLIN( 227)										_this14->wrap_localCOM->zpp_inner->y = _this14->localCOMy;
            									}
            								}
HXDLIN( 227)								{
HXLINE( 227)									HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this16,"_this") = _this14->body;
HXDLIN( 227)									if (_this16->zip_axis) {
HXLINE( 227)										_this16->zip_axis = false;
HXDLIN( 227)										{
HXLINE( 227)											_this16->axisx = ::Math_obj::sin(_this16->rot);
HXDLIN( 227)											_this16->axisy = ::Math_obj::cos(_this16->rot);
            										}
            									}
            								}
HXDLIN( 227)								{
HXLINE( 227)									_this14->worldCOMx = (_this14->body->posx + ((_this14->body->axisy * _this14->localCOMx) - (_this14->body->axisx * _this14->localCOMy)));
HXDLIN( 227)									_this14->worldCOMy = (_this14->body->posy + ((_this14->localCOMx * _this14->body->axisx) + (_this14->localCOMy * _this14->body->axisy)));
            								}
            							}
            						}
HXDLIN( 227)						HX_VARI( Float,rx) = _this14->radius;
HXDLIN( 227)						HX_VARI( Float,ry) = _this14->radius;
HXDLIN( 227)						{
HXLINE( 227)							_this14->aabb->minx = (_this14->worldCOMx - rx);
HXDLIN( 227)							_this14->aabb->miny = (_this14->worldCOMy - ry);
            						}
HXDLIN( 227)						{
HXLINE( 227)							_this14->aabb->maxx = (_this14->worldCOMx + rx);
HXDLIN( 227)							_this14->aabb->maxy = (_this14->worldCOMy + ry);
            						}
            					}
            					else {
HXLINE( 227)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this17,"_this") = _this13->polygon;
HXDLIN( 227)						if (_this17->zip_gverts) {
HXLINE( 227)							if (hx::IsNotNull( _this17->body )) {
HXLINE( 227)								_this17->zip_gverts = false;
HXDLIN( 227)								_this17->validate_lverts();
HXDLIN( 227)								{
HXLINE( 227)									HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this18,"_this") = _this17->body;
HXDLIN( 227)									if (_this18->zip_axis) {
HXLINE( 227)										_this18->zip_axis = false;
HXDLIN( 227)										{
HXLINE( 227)											_this18->axisx = ::Math_obj::sin(_this18->rot);
HXDLIN( 227)											_this18->axisy = ::Math_obj::cos(_this18->rot);
            										}
            									}
            								}
HXDLIN( 227)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this17->lverts->next;
HXDLIN( 227)								{
HXLINE( 227)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this17->gverts->next;
HXDLIN( 227)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 227)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite1;
HXDLIN( 227)										{
HXLINE( 227)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 227)											li = li->next;
HXDLIN( 227)											{
HXLINE( 227)												g->x = (_this17->body->posx + ((_this17->body->axisy * l->x) - (_this17->body->axisx * l->y)));
HXDLIN( 227)												g->y = (_this17->body->posy + ((l->x * _this17->body->axisx) + (l->y * _this17->body->axisy)));
            											}
            										}
HXDLIN( 227)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
            						}
HXDLIN( 227)						 ::zpp_nape::geom::ZPP_Vec2 _this19 = _this17->gverts->next;
HXDLIN( 227)						{
HXLINE( 227)							_this17->aabb->minx = _this19->x;
HXDLIN( 227)							_this17->aabb->miny = _this19->y;
            						}
HXDLIN( 227)						{
HXLINE( 227)							_this17->aabb->maxx = _this19->x;
HXDLIN( 227)							_this17->aabb->maxy = _this19->y;
            						}
HXDLIN( 227)						{
HXLINE( 227)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this17->gverts->next->next;
HXDLIN( 227)							while(hx::IsNotNull( cx_ite2 )){
HXLINE( 227)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite2;
HXDLIN( 227)								{
HXLINE( 227)									if ((p->x < _this17->aabb->minx)) {
HXLINE( 227)										_this17->aabb->minx = p->x;
            									}
HXDLIN( 227)									if ((p->x > _this17->aabb->maxx)) {
HXLINE( 227)										_this17->aabb->maxx = p->x;
            									}
HXDLIN( 227)									if ((p->y < _this17->aabb->miny)) {
HXLINE( 227)										_this17->aabb->miny = p->y;
            									}
HXDLIN( 227)									if ((p->y > _this17->aabb->maxy)) {
HXLINE( 227)										_this17->aabb->maxy = p->y;
            									}
            								}
HXDLIN( 227)								cx_ite2 = cx_ite2->next;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 228)		{
HXLINE( 228)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this20,"_this") = this->aabbShape->zpp_inner->polygon;
HXDLIN( 228)			if (_this20->zip_gaxi) {
HXLINE( 228)				if (hx::IsNotNull( _this20->body )) {
HXLINE( 228)					_this20->zip_gaxi = false;
HXDLIN( 228)					_this20->validate_laxi();
HXDLIN( 228)					{
HXLINE( 228)						HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this21,"_this") = _this20->body;
HXDLIN( 228)						if (_this21->zip_axis) {
HXLINE( 228)							_this21->zip_axis = false;
HXDLIN( 228)							{
HXLINE( 228)								_this21->axisx = ::Math_obj::sin(_this21->rot);
HXDLIN( 228)								_this21->axisy = ::Math_obj::cos(_this21->rot);
            							}
            						}
            					}
HXDLIN( 228)					if (_this20->zip_gverts) {
HXLINE( 228)						if (hx::IsNotNull( _this20->body )) {
HXLINE( 228)							_this20->zip_gverts = false;
HXDLIN( 228)							_this20->validate_lverts();
HXDLIN( 228)							{
HXLINE( 228)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this22,"_this") = _this20->body;
HXDLIN( 228)								if (_this22->zip_axis) {
HXLINE( 228)									_this22->zip_axis = false;
HXDLIN( 228)									{
HXLINE( 228)										_this22->axisx = ::Math_obj::sin(_this22->rot);
HXDLIN( 228)										_this22->axisy = ::Math_obj::cos(_this22->rot);
            									}
            								}
            							}
HXDLIN( 228)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li1,"li") = _this20->lverts->next;
HXDLIN( 228)							{
HXLINE( 228)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = _this20->gverts->next;
HXDLIN( 228)								while(hx::IsNotNull( cx_ite3 )){
HXLINE( 228)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g1,"g") = cx_ite3;
HXDLIN( 228)									{
HXLINE( 228)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l1,"l") = li1;
HXDLIN( 228)										li1 = li1->next;
HXDLIN( 228)										{
HXLINE( 228)											g1->x = (_this20->body->posx + ((_this20->body->axisy * l1->x) - (_this20->body->axisx * l1->y)));
HXDLIN( 228)											g1->y = (_this20->body->posy + ((l1->x * _this20->body->axisx) + (l1->y * _this20->body->axisy)));
            										}
            									}
HXDLIN( 228)									cx_ite3 = cx_ite3->next;
            								}
            							}
            						}
            					}
HXDLIN( 228)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite) = _this20->edges->head;
HXDLIN( 228)					{
HXLINE( 228)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = _this20->gverts->next;
HXDLIN( 228)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u1,"u") = cx_ite4;
HXDLIN( 228)						cx_ite4 = cx_ite4->next;
HXDLIN( 228)						while(hx::IsNotNull( cx_ite4 )){
HXLINE( 228)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite4;
HXDLIN( 228)							{
HXLINE( 228)								HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = ite->elt;
HXDLIN( 228)								ite = ite->next;
HXDLIN( 228)								e->gp0 = u1;
HXDLIN( 228)								e->gp1 = v1;
HXDLIN( 228)								{
HXLINE( 228)									e->gnormx = ((_this20->body->axisy * e->lnormx) - (_this20->body->axisx * e->lnormy));
HXDLIN( 228)									e->gnormy = ((e->lnormx * _this20->body->axisx) + (e->lnormy * _this20->body->axisy));
            								}
HXDLIN( 228)								e->gprojection = (((_this20->body->posx * e->gnormx) + (_this20->body->posy * e->gnormy)) + e->lprojection);
HXDLIN( 228)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE( 228)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN( 228)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN( 228)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN( 228)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN( 228)							u1 = v1;
HXDLIN( 228)							cx_ite4 = cx_ite4->next;
            						}
HXDLIN( 228)						{
HXLINE( 228)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e1,"e") = ite->elt;
HXDLIN( 228)							e1->gp0 = u1;
HXDLIN( 228)							e1->gp1 = _this20->gverts->next;
HXDLIN( 228)							{
HXLINE( 228)								e1->gnormx = ((_this20->body->axisy * e1->lnormx) - (_this20->body->axisx * e1->lnormy));
HXDLIN( 228)								e1->gnormy = ((e1->lnormx * _this20->body->axisx) + (e1->lnormy * _this20->body->axisy));
            							}
HXDLIN( 228)							e1->gprojection = (((_this20->body->posx * e1->gnormx) + (_this20->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 228)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE( 228)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN( 228)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN( 228)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN( 228)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,updateAABBShape,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_231_shapesInAABB)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
            	HX_STACK_ARG(strict,"strict")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 231)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Broadphase_obj,shapesInAABB,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesInAABB( ::zpp_nape::geom::ZPP_AABB aabb,bool strict,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_234_bodiesInAABB)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
            	HX_STACK_ARG(strict,"strict")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 234)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Broadphase_obj,bodiesInAABB,return )

void ZPP_Broadphase_obj::updateCircShape(Float x,Float y,Float r){
            	HX_GC_STACKFRAME(&_hx_pos_771aa6e17aed28f8_237_updateCircShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(r,"r")
HXLINE( 238)		if (hx::IsNull( this->circShape )) {
HXLINE( 239)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE( 239)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 239)				::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 239)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXLINE( 240)			{
HXLINE( 240)				HX_VARI(  ::nape::shape::ShapeList,_this) =  ::nape::phys::Body_obj::__alloc( HX_CTX ,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC,null())->zpp_inner->wrap_shapes;
HXDLIN( 240)				HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 240)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 240)					ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 240)					ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 240)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 240)					ret->zpp_pool = null();
            				}
HXDLIN( 240)				if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 240)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 240)					{
HXLINE( 240)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 240)							ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 240)							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 240)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 240)							ret1->next = null();
            						}
HXDLIN( 240)						ret1->weak = false;
            					}
HXDLIN( 240)					ret1->_immutable = false;
HXDLIN( 240)					{
HXLINE( 240)						ret1->x = x;
HXDLIN( 240)						ret1->y = y;
            					}
HXDLIN( 240)					ret->zpp_inner = ret1;
HXDLIN( 240)					ret->zpp_inner->outer = ret;
            				}
            				else {
HXLINE( 240)					bool obj;
HXDLIN( 240)					{
HXLINE( 240)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 240)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 240)							_this1->_validate();
            						}
            					}
HXDLIN( 240)					if ((ret->zpp_inner->x == x)) {
HXLINE( 240)						{
HXLINE( 240)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 240)							if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 240)								_this2->_validate();
            							}
            						}
HXDLIN( 240)						obj = (ret->zpp_inner->y == y);
            					}
            					else {
HXLINE( 240)						obj = false;
            					}
HXDLIN( 240)					if (!(obj)) {
HXLINE( 240)						{
HXLINE( 240)							ret->zpp_inner->x = x;
HXDLIN( 240)							ret->zpp_inner->y = y;
            						}
HXDLIN( 240)						{
HXLINE( 240)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN( 240)							if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 240)								_this3->_invalidate(_this3);
            							}
            						}
            					}
            				}
HXDLIN( 240)				ret->zpp_inner->weak = false;
HXDLIN( 240)				HX_VARI_NAME(  ::nape::shape::Shape,obj1,"obj") = (this->circShape =  ::nape::shape::Circle_obj::__alloc( HX_CTX ,r,ret,null(),null()));
HXDLIN( 240)				if (_this->zpp_inner->reverse_flag) {
HXLINE( 240)					_this->push(obj1);
            				}
            				else {
HXLINE( 240)					_this->unshift(obj1);
            				}
            			}
            		}
            		else {
HXLINE( 243)			HX_VARI(  ::zpp_nape::shape::ZPP_Circle,ci) = this->circShape->zpp_inner->circle;
HXLINE( 244)			HX_VARI( Float,ss) = ((Float)r / (Float)ci->radius);
HXLINE( 245)			if (hx::IsNull( this->matrix )) {
HXLINE( 245)				this->matrix =  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE( 246)			{
HXLINE( 246)				HX_VARI_NAME(  ::nape::geom::Mat23,_this4,"_this") = this->matrix;
HXDLIN( 246)				HX_VARI_NAME(  ::nape::geom::Mat23,_this5,"_this") = this->matrix;
HXDLIN( 246)				{
HXLINE( 246)					_this5->zpp_inner->d = ss;
HXDLIN( 246)					{
HXLINE( 246)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this6,"_this") = _this5->zpp_inner;
HXDLIN( 246)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 246)							_this6->_invalidate();
            						}
            					}
            				}
HXDLIN( 246)				{
HXLINE( 246)					_this4->zpp_inner->a = _this5->zpp_inner->d;
HXDLIN( 246)					{
HXLINE( 246)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this7,"_this") = _this4->zpp_inner;
HXDLIN( 246)						if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 246)							_this7->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 247)			{
HXLINE( 247)				HX_VARI_NAME(  ::nape::geom::Mat23,_this8,"_this") = this->matrix;
HXDLIN( 247)				HX_VARI_NAME(  ::nape::geom::Mat23,_this9,"_this") = this->matrix;
HXDLIN( 247)				{
HXLINE( 247)					_this9->zpp_inner->c = (int)0;
HXDLIN( 247)					{
HXLINE( 247)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this10,"_this") = _this9->zpp_inner;
HXDLIN( 247)						if (hx::IsNotNull( _this10->_invalidate )) {
HXLINE( 247)							_this10->_invalidate();
            						}
            					}
            				}
HXDLIN( 247)				{
HXLINE( 247)					_this8->zpp_inner->b = _this9->zpp_inner->c;
HXDLIN( 247)					{
HXLINE( 247)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this11,"_this") = _this8->zpp_inner;
HXDLIN( 247)						if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 247)							_this11->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 248)			{
HXLINE( 248)				HX_VARI_NAME(  ::nape::geom::Mat23,_this12,"_this") = this->matrix;
HXDLIN( 248)				{
HXLINE( 248)					_this12->zpp_inner->tx = (x - (ss * ci->localCOMx));
HXDLIN( 248)					{
HXLINE( 248)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this13,"_this") = _this12->zpp_inner;
HXDLIN( 248)						if (hx::IsNotNull( _this13->_invalidate )) {
HXLINE( 248)							_this13->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 249)			{
HXLINE( 249)				HX_VARI_NAME(  ::nape::geom::Mat23,_this14,"_this") = this->matrix;
HXDLIN( 249)				{
HXLINE( 249)					_this14->zpp_inner->ty = (y - (ss * ci->localCOMy));
HXDLIN( 249)					{
HXLINE( 249)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this15,"_this") = _this14->zpp_inner;
HXDLIN( 249)						if (hx::IsNotNull( _this15->_invalidate )) {
HXLINE( 249)							_this15->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 250)			this->circShape->transform(this->matrix);
            		}
HXLINE( 252)		{
HXLINE( 252)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,_this16,"_this") = this->circShape->zpp_inner;
HXDLIN( 252)			if (_this16->zip_aabb) {
HXLINE( 252)				if (hx::IsNotNull( _this16->body )) {
HXLINE( 252)					_this16->zip_aabb = false;
HXDLIN( 252)					if ((_this16->type == (int)0)) {
HXLINE( 252)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,_this17,"_this") = _this16->circle;
HXDLIN( 252)						if (_this17->zip_worldCOM) {
HXLINE( 252)							if (hx::IsNotNull( _this17->body )) {
HXLINE( 252)								_this17->zip_worldCOM = false;
HXDLIN( 252)								if (_this17->zip_localCOM) {
HXLINE( 252)									_this17->zip_localCOM = false;
HXDLIN( 252)									if ((_this17->type == (int)1)) {
HXLINE( 252)										HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this18,"_this") = _this17->polygon;
HXDLIN( 252)										if (hx::IsNull( _this18->lverts->next->next )) {
HXLINE( 252)											_this18->localCOMx = _this18->lverts->next->x;
HXDLIN( 252)											_this18->localCOMy = _this18->lverts->next->y;
            										}
            										else {
HXLINE( 252)											if (hx::IsNull( _this18->lverts->next->next->next )) {
HXLINE( 252)												{
HXLINE( 252)													_this18->localCOMx = _this18->lverts->next->x;
HXDLIN( 252)													_this18->localCOMy = _this18->lverts->next->y;
            												}
HXDLIN( 252)												{
HXLINE( 252)													_this18->localCOMx = (_this18->localCOMx + _this18->lverts->next->next->x);
HXDLIN( 252)													_this18->localCOMy = (_this18->localCOMy + _this18->lverts->next->next->y);
            												}
HXDLIN( 252)												{
HXLINE( 252)													_this18->localCOMx = (_this18->localCOMx * ((Float)0.5));
HXDLIN( 252)													_this18->localCOMy = (_this18->localCOMy * ((Float)0.5));
            												}
            											}
            											else {
HXLINE( 252)												{
HXLINE( 252)													_this18->localCOMx = (int)0;
HXDLIN( 252)													_this18->localCOMy = (int)0;
            												}
HXDLIN( 252)												HX_VARI( Float,area) = ((Float)0.0);
HXDLIN( 252)												{
HXLINE( 252)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this18->lverts->next;
HXDLIN( 252)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite;
HXDLIN( 252)													cx_ite = cx_ite->next;
HXDLIN( 252)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite;
HXDLIN( 252)													cx_ite = cx_ite->next;
HXDLIN( 252)													while(hx::IsNotNull( cx_ite )){
HXLINE( 252)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite;
HXDLIN( 252)														{
HXLINE( 252)															area = (area + (v->x * (w->y - u->y)));
HXDLIN( 252)															HX_VARI( Float,cf) = ((w->y * v->x) - (w->x * v->y));
HXDLIN( 252)															_this18->localCOMx = (_this18->localCOMx + ((v->x + w->x) * cf));
HXDLIN( 252)															_this18->localCOMy = (_this18->localCOMy + ((v->y + w->y) * cf));
            														}
HXDLIN( 252)														u = v;
HXDLIN( 252)														v = w;
HXDLIN( 252)														cx_ite = cx_ite->next;
            													}
HXDLIN( 252)													cx_ite = _this18->lverts->next;
HXDLIN( 252)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite;
HXDLIN( 252)													{
HXLINE( 252)														area = (area + (v->x * (w1->y - u->y)));
HXDLIN( 252)														HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v->x) - (w1->x * v->y));
HXDLIN( 252)														_this18->localCOMx = (_this18->localCOMx + ((v->x + w1->x) * cf1));
HXDLIN( 252)														_this18->localCOMy = (_this18->localCOMy + ((v->y + w1->y) * cf1));
            													}
HXDLIN( 252)													u = v;
HXDLIN( 252)													cx_ite = cx_ite->next;
HXDLIN( 252)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite;
HXDLIN( 252)													{
HXLINE( 252)														area = (area + (w1->x * (w2->y - u->y)));
HXDLIN( 252)														HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN( 252)														_this18->localCOMx = (_this18->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN( 252)														_this18->localCOMy = (_this18->localCOMy + ((w1->y + w2->y) * cf2));
            													}
            												}
HXDLIN( 252)												area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN( 252)												{
HXLINE( 252)													HX_VARI( Float,t) = area;
HXDLIN( 252)													_this18->localCOMx = (_this18->localCOMx * t);
HXDLIN( 252)													_this18->localCOMy = (_this18->localCOMy * t);
            												}
            											}
            										}
            									}
HXDLIN( 252)									if (hx::IsNotNull( _this17->wrap_localCOM )) {
HXLINE( 252)										_this17->wrap_localCOM->zpp_inner->x = _this17->localCOMx;
HXDLIN( 252)										_this17->wrap_localCOM->zpp_inner->y = _this17->localCOMy;
            									}
            								}
HXDLIN( 252)								{
HXLINE( 252)									HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this19,"_this") = _this17->body;
HXDLIN( 252)									if (_this19->zip_axis) {
HXLINE( 252)										_this19->zip_axis = false;
HXDLIN( 252)										{
HXLINE( 252)											_this19->axisx = ::Math_obj::sin(_this19->rot);
HXDLIN( 252)											_this19->axisy = ::Math_obj::cos(_this19->rot);
            										}
            									}
            								}
HXDLIN( 252)								{
HXLINE( 252)									_this17->worldCOMx = (_this17->body->posx + ((_this17->body->axisy * _this17->localCOMx) - (_this17->body->axisx * _this17->localCOMy)));
HXDLIN( 252)									_this17->worldCOMy = (_this17->body->posy + ((_this17->localCOMx * _this17->body->axisx) + (_this17->localCOMy * _this17->body->axisy)));
            								}
            							}
            						}
HXDLIN( 252)						HX_VARI( Float,rx) = _this17->radius;
HXDLIN( 252)						HX_VARI( Float,ry) = _this17->radius;
HXDLIN( 252)						{
HXLINE( 252)							_this17->aabb->minx = (_this17->worldCOMx - rx);
HXDLIN( 252)							_this17->aabb->miny = (_this17->worldCOMy - ry);
            						}
HXDLIN( 252)						{
HXLINE( 252)							_this17->aabb->maxx = (_this17->worldCOMx + rx);
HXDLIN( 252)							_this17->aabb->maxy = (_this17->worldCOMy + ry);
            						}
            					}
            					else {
HXLINE( 252)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this20,"_this") = _this16->polygon;
HXDLIN( 252)						if (_this20->zip_gverts) {
HXLINE( 252)							if (hx::IsNotNull( _this20->body )) {
HXLINE( 252)								_this20->zip_gverts = false;
HXDLIN( 252)								_this20->validate_lverts();
HXDLIN( 252)								{
HXLINE( 252)									HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this21,"_this") = _this20->body;
HXDLIN( 252)									if (_this21->zip_axis) {
HXLINE( 252)										_this21->zip_axis = false;
HXDLIN( 252)										{
HXLINE( 252)											_this21->axisx = ::Math_obj::sin(_this21->rot);
HXDLIN( 252)											_this21->axisy = ::Math_obj::cos(_this21->rot);
            										}
            									}
            								}
HXDLIN( 252)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this20->lverts->next;
HXDLIN( 252)								{
HXLINE( 252)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this20->gverts->next;
HXDLIN( 252)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 252)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite1;
HXDLIN( 252)										{
HXLINE( 252)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 252)											li = li->next;
HXDLIN( 252)											{
HXLINE( 252)												g->x = (_this20->body->posx + ((_this20->body->axisy * l->x) - (_this20->body->axisx * l->y)));
HXDLIN( 252)												g->y = (_this20->body->posy + ((l->x * _this20->body->axisx) + (l->y * _this20->body->axisy)));
            											}
            										}
HXDLIN( 252)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
            						}
HXDLIN( 252)						 ::zpp_nape::geom::ZPP_Vec2 _this22 = _this20->gverts->next;
HXDLIN( 252)						{
HXLINE( 252)							_this20->aabb->minx = _this22->x;
HXDLIN( 252)							_this20->aabb->miny = _this22->y;
            						}
HXDLIN( 252)						{
HXLINE( 252)							_this20->aabb->maxx = _this22->x;
HXDLIN( 252)							_this20->aabb->maxy = _this22->y;
            						}
HXDLIN( 252)						{
HXLINE( 252)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this20->gverts->next->next;
HXDLIN( 252)							while(hx::IsNotNull( cx_ite2 )){
HXLINE( 252)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite2;
HXDLIN( 252)								{
HXLINE( 252)									if ((p->x < _this20->aabb->minx)) {
HXLINE( 252)										_this20->aabb->minx = p->x;
            									}
HXDLIN( 252)									if ((p->x > _this20->aabb->maxx)) {
HXLINE( 252)										_this20->aabb->maxx = p->x;
            									}
HXDLIN( 252)									if ((p->y < _this20->aabb->miny)) {
HXLINE( 252)										_this20->aabb->miny = p->y;
            									}
HXDLIN( 252)									if ((p->y > _this20->aabb->maxy)) {
HXLINE( 252)										_this20->aabb->maxy = p->y;
            									}
            								}
HXDLIN( 252)								cx_ite2 = cx_ite2->next;
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Broadphase_obj,updateCircShape,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_255_shapesInCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 255)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC6(ZPP_Broadphase_obj,shapesInCircle,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesInCircle(Float x,Float y,Float r,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_258_bodiesInCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 258)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC6(ZPP_Broadphase_obj,bodiesInCircle,return )

void ZPP_Broadphase_obj::validateShape( ::zpp_nape::shape::ZPP_Shape s){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_260_validateShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 261)		if ((s->type == (int)1)) {
HXLINE( 261)			HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,_this) = s->polygon;
HXDLIN( 261)			if (_this->zip_gaxi) {
HXLINE( 261)				if (hx::IsNotNull( _this->body )) {
HXLINE( 261)					_this->zip_gaxi = false;
HXDLIN( 261)					_this->validate_laxi();
HXDLIN( 261)					{
HXLINE( 261)						HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this1,"_this") = _this->body;
HXDLIN( 261)						if (_this1->zip_axis) {
HXLINE( 261)							_this1->zip_axis = false;
HXDLIN( 261)							{
HXLINE( 261)								_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN( 261)								_this1->axisy = ::Math_obj::cos(_this1->rot);
            							}
            						}
            					}
HXDLIN( 261)					if (_this->zip_gverts) {
HXLINE( 261)						if (hx::IsNotNull( _this->body )) {
HXLINE( 261)							_this->zip_gverts = false;
HXDLIN( 261)							_this->validate_lverts();
HXDLIN( 261)							{
HXLINE( 261)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN( 261)								if (_this2->zip_axis) {
HXLINE( 261)									_this2->zip_axis = false;
HXDLIN( 261)									{
HXLINE( 261)										_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN( 261)										_this2->axisy = ::Math_obj::cos(_this2->rot);
            									}
            								}
            							}
HXDLIN( 261)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this->lverts->next;
HXDLIN( 261)							{
HXLINE( 261)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this->gverts->next;
HXDLIN( 261)								while(hx::IsNotNull( cx_ite )){
HXLINE( 261)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite;
HXDLIN( 261)									{
HXLINE( 261)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 261)										li = li->next;
HXDLIN( 261)										{
HXLINE( 261)											g->x = (_this->body->posx + ((_this->body->axisy * l->x) - (_this->body->axisx * l->y)));
HXDLIN( 261)											g->y = (_this->body->posy + ((l->x * _this->body->axisx) + (l->y * _this->body->axisy)));
            										}
            									}
HXDLIN( 261)									cx_ite = cx_ite->next;
            								}
            							}
            						}
            					}
HXDLIN( 261)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite) = _this->edges->head;
HXDLIN( 261)					{
HXLINE( 261)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this->gverts->next;
HXDLIN( 261)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN( 261)						cx_ite1 = cx_ite1->next;
HXDLIN( 261)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 261)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN( 261)							{
HXLINE( 261)								HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = ite->elt;
HXDLIN( 261)								ite = ite->next;
HXDLIN( 261)								e->gp0 = u;
HXDLIN( 261)								e->gp1 = v;
HXDLIN( 261)								{
HXLINE( 261)									e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
HXDLIN( 261)									e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
            								}
HXDLIN( 261)								e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
HXDLIN( 261)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE( 261)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN( 261)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN( 261)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN( 261)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN( 261)							u = v;
HXDLIN( 261)							cx_ite1 = cx_ite1->next;
            						}
HXDLIN( 261)						{
HXLINE( 261)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e1,"e") = ite->elt;
HXDLIN( 261)							e1->gp0 = u;
HXDLIN( 261)							e1->gp1 = _this->gverts->next;
HXDLIN( 261)							{
HXLINE( 261)								e1->gnormx = ((_this->body->axisy * e1->lnormx) - (_this->body->axisx * e1->lnormy));
HXDLIN( 261)								e1->gnormy = ((e1->lnormx * _this->body->axisx) + (e1->lnormy * _this->body->axisy));
            							}
HXDLIN( 261)							e1->gprojection = (((_this->body->posx * e1->gnormx) + (_this->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 261)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE( 261)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN( 261)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN( 261)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN( 261)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
HXLINE( 262)		if (s->zip_aabb) {
HXLINE( 262)			if (hx::IsNotNull( s->body )) {
HXLINE( 262)				s->zip_aabb = false;
HXDLIN( 262)				if ((s->type == (int)0)) {
HXLINE( 262)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,_this3,"_this") = s->circle;
HXDLIN( 262)					if (_this3->zip_worldCOM) {
HXLINE( 262)						if (hx::IsNotNull( _this3->body )) {
HXLINE( 262)							_this3->zip_worldCOM = false;
HXDLIN( 262)							if (_this3->zip_localCOM) {
HXLINE( 262)								_this3->zip_localCOM = false;
HXDLIN( 262)								if ((_this3->type == (int)1)) {
HXLINE( 262)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this4,"_this") = _this3->polygon;
HXDLIN( 262)									if (hx::IsNull( _this4->lverts->next->next )) {
HXLINE( 262)										_this4->localCOMx = _this4->lverts->next->x;
HXDLIN( 262)										_this4->localCOMy = _this4->lverts->next->y;
            									}
            									else {
HXLINE( 262)										if (hx::IsNull( _this4->lverts->next->next->next )) {
HXLINE( 262)											{
HXLINE( 262)												_this4->localCOMx = _this4->lverts->next->x;
HXDLIN( 262)												_this4->localCOMy = _this4->lverts->next->y;
            											}
HXDLIN( 262)											{
HXLINE( 262)												_this4->localCOMx = (_this4->localCOMx + _this4->lverts->next->next->x);
HXDLIN( 262)												_this4->localCOMy = (_this4->localCOMy + _this4->lverts->next->next->y);
            											}
HXDLIN( 262)											{
HXLINE( 262)												_this4->localCOMx = (_this4->localCOMx * ((Float)0.5));
HXDLIN( 262)												_this4->localCOMy = (_this4->localCOMy * ((Float)0.5));
            											}
            										}
            										else {
HXLINE( 262)											{
HXLINE( 262)												_this4->localCOMx = (int)0;
HXDLIN( 262)												_this4->localCOMy = (int)0;
            											}
HXDLIN( 262)											HX_VARI( Float,area) = ((Float)0.0);
HXDLIN( 262)											{
HXLINE( 262)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this4->lverts->next;
HXDLIN( 262)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u1,"u") = cx_ite2;
HXDLIN( 262)												cx_ite2 = cx_ite2->next;
HXDLIN( 262)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite2;
HXDLIN( 262)												cx_ite2 = cx_ite2->next;
HXDLIN( 262)												while(hx::IsNotNull( cx_ite2 )){
HXLINE( 262)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite2;
HXDLIN( 262)													{
HXLINE( 262)														area = (area + (v1->x * (w->y - u1->y)));
HXDLIN( 262)														HX_VARI( Float,cf) = ((w->y * v1->x) - (w->x * v1->y));
HXDLIN( 262)														_this4->localCOMx = (_this4->localCOMx + ((v1->x + w->x) * cf));
HXDLIN( 262)														_this4->localCOMy = (_this4->localCOMy + ((v1->y + w->y) * cf));
            													}
HXDLIN( 262)													u1 = v1;
HXDLIN( 262)													v1 = w;
HXDLIN( 262)													cx_ite2 = cx_ite2->next;
            												}
HXDLIN( 262)												cx_ite2 = _this4->lverts->next;
HXDLIN( 262)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite2;
HXDLIN( 262)												{
HXLINE( 262)													area = (area + (v1->x * (w1->y - u1->y)));
HXDLIN( 262)													HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v1->x) - (w1->x * v1->y));
HXDLIN( 262)													_this4->localCOMx = (_this4->localCOMx + ((v1->x + w1->x) * cf1));
HXDLIN( 262)													_this4->localCOMy = (_this4->localCOMy + ((v1->y + w1->y) * cf1));
            												}
HXDLIN( 262)												u1 = v1;
HXDLIN( 262)												cx_ite2 = cx_ite2->next;
HXDLIN( 262)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite2;
HXDLIN( 262)												{
HXLINE( 262)													area = (area + (w1->x * (w2->y - u1->y)));
HXDLIN( 262)													HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN( 262)													_this4->localCOMx = (_this4->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN( 262)													_this4->localCOMy = (_this4->localCOMy + ((w1->y + w2->y) * cf2));
            												}
            											}
HXDLIN( 262)											area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN( 262)											{
HXLINE( 262)												HX_VARI( Float,t) = area;
HXDLIN( 262)												_this4->localCOMx = (_this4->localCOMx * t);
HXDLIN( 262)												_this4->localCOMy = (_this4->localCOMy * t);
            											}
            										}
            									}
            								}
HXDLIN( 262)								if (hx::IsNotNull( _this3->wrap_localCOM )) {
HXLINE( 262)									_this3->wrap_localCOM->zpp_inner->x = _this3->localCOMx;
HXDLIN( 262)									_this3->wrap_localCOM->zpp_inner->y = _this3->localCOMy;
            								}
            							}
HXDLIN( 262)							{
HXLINE( 262)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this5,"_this") = _this3->body;
HXDLIN( 262)								if (_this5->zip_axis) {
HXLINE( 262)									_this5->zip_axis = false;
HXDLIN( 262)									{
HXLINE( 262)										_this5->axisx = ::Math_obj::sin(_this5->rot);
HXDLIN( 262)										_this5->axisy = ::Math_obj::cos(_this5->rot);
            									}
            								}
            							}
HXDLIN( 262)							{
HXLINE( 262)								_this3->worldCOMx = (_this3->body->posx + ((_this3->body->axisy * _this3->localCOMx) - (_this3->body->axisx * _this3->localCOMy)));
HXDLIN( 262)								_this3->worldCOMy = (_this3->body->posy + ((_this3->localCOMx * _this3->body->axisx) + (_this3->localCOMy * _this3->body->axisy)));
            							}
            						}
            					}
HXDLIN( 262)					HX_VARI( Float,rx) = _this3->radius;
HXDLIN( 262)					HX_VARI( Float,ry) = _this3->radius;
HXDLIN( 262)					{
HXLINE( 262)						_this3->aabb->minx = (_this3->worldCOMx - rx);
HXDLIN( 262)						_this3->aabb->miny = (_this3->worldCOMy - ry);
            					}
HXDLIN( 262)					{
HXLINE( 262)						_this3->aabb->maxx = (_this3->worldCOMx + rx);
HXDLIN( 262)						_this3->aabb->maxy = (_this3->worldCOMy + ry);
            					}
            				}
            				else {
HXLINE( 262)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this6,"_this") = s->polygon;
HXDLIN( 262)					if (_this6->zip_gverts) {
HXLINE( 262)						if (hx::IsNotNull( _this6->body )) {
HXLINE( 262)							_this6->zip_gverts = false;
HXDLIN( 262)							_this6->validate_lverts();
HXDLIN( 262)							{
HXLINE( 262)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this7,"_this") = _this6->body;
HXDLIN( 262)								if (_this7->zip_axis) {
HXLINE( 262)									_this7->zip_axis = false;
HXDLIN( 262)									{
HXLINE( 262)										_this7->axisx = ::Math_obj::sin(_this7->rot);
HXDLIN( 262)										_this7->axisy = ::Math_obj::cos(_this7->rot);
            									}
            								}
            							}
HXDLIN( 262)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li1,"li") = _this6->lverts->next;
HXDLIN( 262)							{
HXLINE( 262)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = _this6->gverts->next;
HXDLIN( 262)								while(hx::IsNotNull( cx_ite3 )){
HXLINE( 262)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g1,"g") = cx_ite3;
HXDLIN( 262)									{
HXLINE( 262)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l1,"l") = li1;
HXDLIN( 262)										li1 = li1->next;
HXDLIN( 262)										{
HXLINE( 262)											g1->x = (_this6->body->posx + ((_this6->body->axisy * l1->x) - (_this6->body->axisx * l1->y)));
HXDLIN( 262)											g1->y = (_this6->body->posy + ((l1->x * _this6->body->axisx) + (l1->y * _this6->body->axisy)));
            										}
            									}
HXDLIN( 262)									cx_ite3 = cx_ite3->next;
            								}
            							}
            						}
            					}
HXDLIN( 262)					 ::zpp_nape::geom::ZPP_Vec2 _this8 = _this6->gverts->next;
HXDLIN( 262)					{
HXLINE( 262)						_this6->aabb->minx = _this8->x;
HXDLIN( 262)						_this6->aabb->miny = _this8->y;
            					}
HXDLIN( 262)					{
HXLINE( 262)						_this6->aabb->maxx = _this8->x;
HXDLIN( 262)						_this6->aabb->maxy = _this8->y;
            					}
HXDLIN( 262)					{
HXLINE( 262)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = _this6->gverts->next->next;
HXDLIN( 262)						while(hx::IsNotNull( cx_ite4 )){
HXLINE( 262)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite4;
HXDLIN( 262)							{
HXLINE( 262)								if ((p->x < _this6->aabb->minx)) {
HXLINE( 262)									_this6->aabb->minx = p->x;
            								}
HXDLIN( 262)								if ((p->x > _this6->aabb->maxx)) {
HXLINE( 262)									_this6->aabb->maxx = p->x;
            								}
HXDLIN( 262)								if ((p->y < _this6->aabb->miny)) {
HXLINE( 262)									_this6->aabb->miny = p->y;
            								}
HXDLIN( 262)								if ((p->y > _this6->aabb->maxy)) {
HXLINE( 262)									_this6->aabb->maxy = p->y;
            								}
            							}
HXDLIN( 262)							cx_ite4 = cx_ite4->next;
            						}
            					}
            				}
            			}
            		}
HXLINE( 263)		if (s->zip_worldCOM) {
HXLINE( 263)			if (hx::IsNotNull( s->body )) {
HXLINE( 263)				s->zip_worldCOM = false;
HXDLIN( 263)				if (s->zip_localCOM) {
HXLINE( 263)					s->zip_localCOM = false;
HXDLIN( 263)					if ((s->type == (int)1)) {
HXLINE( 263)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this9,"_this") = s->polygon;
HXDLIN( 263)						if (hx::IsNull( _this9->lverts->next->next )) {
HXLINE( 263)							_this9->localCOMx = _this9->lverts->next->x;
HXDLIN( 263)							_this9->localCOMy = _this9->lverts->next->y;
            						}
            						else {
HXLINE( 263)							if (hx::IsNull( _this9->lverts->next->next->next )) {
HXLINE( 263)								{
HXLINE( 263)									_this9->localCOMx = _this9->lverts->next->x;
HXDLIN( 263)									_this9->localCOMy = _this9->lverts->next->y;
            								}
HXDLIN( 263)								{
HXLINE( 263)									_this9->localCOMx = (_this9->localCOMx + _this9->lverts->next->next->x);
HXDLIN( 263)									_this9->localCOMy = (_this9->localCOMy + _this9->lverts->next->next->y);
            								}
HXDLIN( 263)								{
HXLINE( 263)									_this9->localCOMx = (_this9->localCOMx * ((Float)0.5));
HXDLIN( 263)									_this9->localCOMy = (_this9->localCOMy * ((Float)0.5));
            								}
            							}
            							else {
HXLINE( 263)								{
HXLINE( 263)									_this9->localCOMx = (int)0;
HXDLIN( 263)									_this9->localCOMy = (int)0;
            								}
HXDLIN( 263)								HX_VARI_NAME( Float,area1,"area") = ((Float)0.0);
HXDLIN( 263)								{
HXLINE( 263)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite5,"cx_ite") = _this9->lverts->next;
HXDLIN( 263)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u2,"u") = cx_ite5;
HXDLIN( 263)									cx_ite5 = cx_ite5->next;
HXDLIN( 263)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v2,"v") = cx_ite5;
HXDLIN( 263)									cx_ite5 = cx_ite5->next;
HXDLIN( 263)									while(hx::IsNotNull( cx_ite5 )){
HXLINE( 263)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w3,"w") = cx_ite5;
HXDLIN( 263)										{
HXLINE( 263)											area1 = (area1 + (v2->x * (w3->y - u2->y)));
HXDLIN( 263)											HX_VARI_NAME( Float,cf3,"cf") = ((w3->y * v2->x) - (w3->x * v2->y));
HXDLIN( 263)											_this9->localCOMx = (_this9->localCOMx + ((v2->x + w3->x) * cf3));
HXDLIN( 263)											_this9->localCOMy = (_this9->localCOMy + ((v2->y + w3->y) * cf3));
            										}
HXDLIN( 263)										u2 = v2;
HXDLIN( 263)										v2 = w3;
HXDLIN( 263)										cx_ite5 = cx_ite5->next;
            									}
HXDLIN( 263)									cx_ite5 = _this9->lverts->next;
HXDLIN( 263)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w4,"w") = cx_ite5;
HXDLIN( 263)									{
HXLINE( 263)										area1 = (area1 + (v2->x * (w4->y - u2->y)));
HXDLIN( 263)										HX_VARI_NAME( Float,cf4,"cf") = ((w4->y * v2->x) - (w4->x * v2->y));
HXDLIN( 263)										_this9->localCOMx = (_this9->localCOMx + ((v2->x + w4->x) * cf4));
HXDLIN( 263)										_this9->localCOMy = (_this9->localCOMy + ((v2->y + w4->y) * cf4));
            									}
HXDLIN( 263)									u2 = v2;
HXDLIN( 263)									cx_ite5 = cx_ite5->next;
HXDLIN( 263)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w5,"w") = cx_ite5;
HXDLIN( 263)									{
HXLINE( 263)										area1 = (area1 + (w4->x * (w5->y - u2->y)));
HXDLIN( 263)										HX_VARI_NAME( Float,cf5,"cf") = ((w5->y * w4->x) - (w5->x * w4->y));
HXDLIN( 263)										_this9->localCOMx = (_this9->localCOMx + ((w4->x + w5->x) * cf5));
HXDLIN( 263)										_this9->localCOMy = (_this9->localCOMy + ((w4->y + w5->y) * cf5));
            									}
            								}
HXDLIN( 263)								area1 = ((Float)(int)1 / (Float)((int)3 * area1));
HXDLIN( 263)								{
HXLINE( 263)									HX_VARI_NAME( Float,t1,"t") = area1;
HXDLIN( 263)									_this9->localCOMx = (_this9->localCOMx * t1);
HXDLIN( 263)									_this9->localCOMy = (_this9->localCOMy * t1);
            								}
            							}
            						}
            					}
HXDLIN( 263)					if (hx::IsNotNull( s->wrap_localCOM )) {
HXLINE( 263)						s->wrap_localCOM->zpp_inner->x = s->localCOMx;
HXDLIN( 263)						s->wrap_localCOM->zpp_inner->y = s->localCOMy;
            					}
            				}
HXDLIN( 263)				{
HXLINE( 263)					HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this10,"_this") = s->body;
HXDLIN( 263)					if (_this10->zip_axis) {
HXLINE( 263)						_this10->zip_axis = false;
HXDLIN( 263)						{
HXLINE( 263)							_this10->axisx = ::Math_obj::sin(_this10->rot);
HXDLIN( 263)							_this10->axisy = ::Math_obj::cos(_this10->rot);
            						}
            					}
            				}
HXDLIN( 263)				{
HXLINE( 263)					s->worldCOMx = (s->body->posx + ((s->body->axisy * s->localCOMx) - (s->body->axisx * s->localCOMy)));
HXDLIN( 263)					s->worldCOMy = (s->body->posy + ((s->localCOMx * s->body->axisx) + (s->localCOMy * s->body->axisy)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Broadphase_obj,validateShape,(void))

 ::nape::shape::ShapeList ZPP_Broadphase_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_266_shapesInShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 266)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,shapesInShape,return )

 ::nape::phys::BodyList ZPP_Broadphase_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool containment, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_269_bodiesInShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 269)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,bodiesInShape,return )

 ::nape::geom::RayResult ZPP_Broadphase_obj::rayCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_272_rayCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ray,"ray")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 272)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Broadphase_obj,rayCast,return )

 ::nape::geom::RayResultList ZPP_Broadphase_obj::rayMultiCast( ::zpp_nape::geom::ZPP_Ray ray,bool inner, ::zpp_nape::dynamics::ZPP_InteractionFilter filter, ::nape::geom::RayResultList output){
            	HX_STACKFRAME(&_hx_pos_771aa6e17aed28f8_275_rayMultiCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ray,"ray")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 275)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Broadphase_obj,rayMultiCast,return )


hx::ObjectPtr< ZPP_Broadphase_obj > ZPP_Broadphase_obj::__new() {
	hx::ObjectPtr< ZPP_Broadphase_obj > __this = new ZPP_Broadphase_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_Broadphase_obj > ZPP_Broadphase_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_Broadphase_obj *__this = (ZPP_Broadphase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_Broadphase_obj), true, "zpp_nape.space.ZPP_Broadphase"));
	*(void **)__this = ZPP_Broadphase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_Broadphase_obj::ZPP_Broadphase_obj()
{
}

void ZPP_Broadphase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Broadphase);
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(is_sweep,"is_sweep");
	HX_MARK_MEMBER_NAME(sweep,"sweep");
	HX_MARK_MEMBER_NAME(dynab,"dynab");
	HX_MARK_MEMBER_NAME(aabbShape,"aabbShape");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(circShape,"circShape");
	HX_MARK_END_CLASS();
}

void ZPP_Broadphase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(is_sweep,"is_sweep");
	HX_VISIT_MEMBER_NAME(sweep,"sweep");
	HX_VISIT_MEMBER_NAME(dynab,"dynab");
	HX_VISIT_MEMBER_NAME(aabbShape,"aabbShape");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(circShape,"circShape");
}

hx::Val ZPP_Broadphase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sync") ) { return hx::Val( sync_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space); }
		if (HX_FIELD_EQ(inName,"sweep") ) { return hx::Val( sweep); }
		if (HX_FIELD_EQ(inName,"dynab") ) { return hx::Val( dynab); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"is_sweep") ) { return hx::Val( is_sweep); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aabbShape") ) { return hx::Val( aabbShape); }
		if (HX_FIELD_EQ(inName,"circShape") ) { return hx::Val( circShape); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"broadphase") ) { return hx::Val( broadphase_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return hx::Val( shapesInAABB_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return hx::Val( bodiesInAABB_dyn()); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return hx::Val( rayMultiCast_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"validateShape") ) { return hx::Val( validateShape_dyn()); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return hx::Val( shapesInShape_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return hx::Val( bodiesInShape_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return hx::Val( shapesInCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return hx::Val( bodiesInCircle_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAABBShape") ) { return hx::Val( updateAABBShape_dyn()); }
		if (HX_FIELD_EQ(inName,"updateCircShape") ) { return hx::Val( updateCircShape_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return hx::Val( shapesUnderPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return hx::Val( bodiesUnderPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_Broadphase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweep") ) { sweep=inValue.Cast<  ::zpp_nape::space::ZPP_SweepPhase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dynab") ) { dynab=inValue.Cast<  ::zpp_nape::space::ZPP_DynAABBPhase >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::nape::geom::Mat23 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"is_sweep") ) { is_sweep=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aabbShape") ) { aabbShape=inValue.Cast<  ::nape::shape::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"circShape") ) { circShape=inValue.Cast<  ::nape::shape::Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Broadphase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"));
	outFields->push(HX_HCSTRING("is_sweep","\x97","\x84","\xc6","\xa5"));
	outFields->push(HX_HCSTRING("sweep","\xec","\x15","\x0a","\x86"));
	outFields->push(HX_HCSTRING("dynab","\x5a","\xa0","\x60","\xe4"));
	outFields->push(HX_HCSTRING("aabbShape","\x61","\x2c","\x11","\xc3"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("circShape","\xca","\x57","\x3a","\x32"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_Broadphase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_Space*/ ,(int)offsetof(ZPP_Broadphase_obj,space),HX_HCSTRING("space","\xc6","\x8c","\x66","\x81")},
	{hx::fsBool,(int)offsetof(ZPP_Broadphase_obj,is_sweep),HX_HCSTRING("is_sweep","\x97","\x84","\xc6","\xa5")},
	{hx::fsObject /*::zpp_nape::space::ZPP_SweepPhase*/ ,(int)offsetof(ZPP_Broadphase_obj,sweep),HX_HCSTRING("sweep","\xec","\x15","\x0a","\x86")},
	{hx::fsObject /*::zpp_nape::space::ZPP_DynAABBPhase*/ ,(int)offsetof(ZPP_Broadphase_obj,dynab),HX_HCSTRING("dynab","\x5a","\xa0","\x60","\xe4")},
	{hx::fsObject /*::nape::shape::Shape*/ ,(int)offsetof(ZPP_Broadphase_obj,aabbShape),HX_HCSTRING("aabbShape","\x61","\x2c","\x11","\xc3")},
	{hx::fsObject /*::nape::geom::Mat23*/ ,(int)offsetof(ZPP_Broadphase_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsObject /*::nape::shape::Shape*/ ,(int)offsetof(ZPP_Broadphase_obj,circShape),HX_HCSTRING("circShape","\xca","\x57","\x3a","\x32")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_Broadphase_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_Broadphase_obj_sMemberFields[] = {
	HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"),
	HX_HCSTRING("is_sweep","\x97","\x84","\xc6","\xa5"),
	HX_HCSTRING("sweep","\xec","\x15","\x0a","\x86"),
	HX_HCSTRING("dynab","\x5a","\xa0","\x60","\xe4"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("sync","\x5b","\xba","\x5f","\x4c"),
	HX_HCSTRING("broadphase","\xb9","\x5d","\x1d","\xd8"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("shapesUnderPoint","\xea","\xec","\xbc","\x47"),
	HX_HCSTRING("bodiesUnderPoint","\xb8","\x1b","\x30","\x80"),
	HX_HCSTRING("aabbShape","\x61","\x2c","\x11","\xc3"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("updateAABBShape","\x38","\x55","\x33","\xee"),
	HX_HCSTRING("shapesInAABB","\xd7","\x1c","\x84","\xf9"),
	HX_HCSTRING("bodiesInAABB","\xa5","\x4c","\x28","\x9e"),
	HX_HCSTRING("circShape","\xca","\x57","\x3a","\x32"),
	HX_HCSTRING("updateCircShape","\x81","\x28","\xc5","\x81"),
	HX_HCSTRING("shapesInCircle","\x27","\xd4","\xf7","\x6c"),
	HX_HCSTRING("bodiesInCircle","\x75","\x13","\xe2","\xa6"),
	HX_HCSTRING("validateShape","\xab","\xa2","\x1c","\xa8"),
	HX_HCSTRING("shapesInShape","\xea","\x90","\x2a","\xd1"),
	HX_HCSTRING("bodiesInShape","\x5c","\x35","\x30","\x3c"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("rayMultiCast","\x8e","\x02","\x7d","\x23"),
	::String(null()) };

static void ZPP_Broadphase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Broadphase_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Broadphase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Broadphase_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_Broadphase_obj::__mClass;

void ZPP_Broadphase_obj::__register()
{
	hx::Object *dummy = new ZPP_Broadphase_obj;
	ZPP_Broadphase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.space.ZPP_Broadphase","\x87","\xdf","\x2a","\xe3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_Broadphase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_Broadphase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_Broadphase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Broadphase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Broadphase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Broadphase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace space
