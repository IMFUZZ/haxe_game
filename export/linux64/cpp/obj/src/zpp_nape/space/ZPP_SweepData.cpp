// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepData
#include <zpp_nape/space/ZPP_SweepData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bb3008279bcde45_174_new,"zpp_nape.space.ZPP_SweepData","new",0x98ff051a,"zpp_nape.space.ZPP_SweepData.new","zpp_nape/space/SweepPhase.hx",174,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9bb3008279bcde45_205_free,"zpp_nape.space.ZPP_SweepData","free",0x40e58ab2,"zpp_nape.space.ZPP_SweepData.free","zpp_nape/space/SweepPhase.hx",205,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9bb3008279bcde45_212_alloc,"zpp_nape.space.ZPP_SweepData","alloc",0xa300fbaf,"zpp_nape.space.ZPP_SweepData.alloc","zpp_nape/space/SweepPhase.hx",212,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9bb3008279bcde45_217_gt,"zpp_nape.space.ZPP_SweepData","gt",0x76ed9ab3,"zpp_nape.space.ZPP_SweepData.gt","zpp_nape/space/SweepPhase.hx",217,0x6f338844)
HX_DEFINE_STACK_FRAME(_hx_pos_9bb3008279bcde45_176_boot,"zpp_nape.space.ZPP_SweepData","boot",0x3e3e7238,"zpp_nape.space.ZPP_SweepData.boot","zpp_nape/space/SweepPhase.hx",176,0x6f338844)
namespace zpp_nape{
namespace space{

void ZPP_SweepData_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9bb3008279bcde45_174_new)
            	HX_STACK_THIS(this)
HXLINE( 202)		this->aabb = null();
HXLINE( 201)		this->shape = null();
HXLINE( 200)		this->prev = null();
HXLINE( 175)		this->next = null();
            	}

Dynamic ZPP_SweepData_obj::__CreateEmpty() { return new ZPP_SweepData_obj; }

void *ZPP_SweepData_obj::_hx_vtable = 0;

Dynamic ZPP_SweepData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SweepData_obj > _hx_result = new ZPP_SweepData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SweepData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ab31aa4;
}

void ZPP_SweepData_obj::free(){
            	HX_STACKFRAME(&_hx_pos_9bb3008279bcde45_205_free)
            	HX_STACK_THIS(this)
HXLINE( 206)		this->prev = null();
HXLINE( 207)		this->shape = null();
HXLINE( 208)		this->aabb = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SweepData_obj,free,(void))

void ZPP_SweepData_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_9bb3008279bcde45_212_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SweepData_obj,alloc,(void))

bool ZPP_SweepData_obj::gt( ::zpp_nape::space::ZPP_SweepData x){
            	HX_STACKFRAME(&_hx_pos_9bb3008279bcde45_217_gt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 217)		return (this->aabb->minx > x->aabb->minx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_SweepData_obj,gt,return )

 ::zpp_nape::space::ZPP_SweepData ZPP_SweepData_obj::zpp_pool;


hx::ObjectPtr< ZPP_SweepData_obj > ZPP_SweepData_obj::__new() {
	hx::ObjectPtr< ZPP_SweepData_obj > __this = new ZPP_SweepData_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SweepData_obj > ZPP_SweepData_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SweepData_obj *__this = (ZPP_SweepData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SweepData_obj), true, "zpp_nape.space.ZPP_SweepData"));
	*(void **)__this = ZPP_SweepData_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SweepData_obj::ZPP_SweepData_obj()
{
}

void ZPP_SweepData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SweepData);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(shape,"shape");
	HX_MARK_MEMBER_NAME(aabb,"aabb");
	HX_MARK_END_CLASS();
}

void ZPP_SweepData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(shape,"shape");
	HX_VISIT_MEMBER_NAME(aabb,"aabb");
}

hx::Val ZPP_SweepData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gt") ) { return hx::Val( gt_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"aabb") ) { return hx::Val( aabb); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { return hx::Val( shape); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_SweepData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_SweepData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::space::ZPP_SweepData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::space::ZPP_SweepData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aabb") ) { aabb=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { shape=inValue.Cast<  ::zpp_nape::shape::ZPP_Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_SweepData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::space::ZPP_SweepData >(); return true; }
	}
	return false;
}

void ZPP_SweepData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"));
	outFields->push(HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SweepData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_SweepData*/ ,(int)offsetof(ZPP_SweepData_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::space::ZPP_SweepData*/ ,(int)offsetof(ZPP_SweepData_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::shape::ZPP_Shape*/ ,(int)offsetof(ZPP_SweepData_obj,shape),HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(int)offsetof(ZPP_SweepData_obj,aabb),HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_SweepData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_SweepData*/ ,(void *) &ZPP_SweepData_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_SweepData_obj_sMemberFields[] = {
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"),
	HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("gt","\x2d","\x5a","\x00","\x00"),
	::String(null()) };

static void ZPP_SweepData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SweepData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_SweepData_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SweepData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SweepData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_SweepData_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_SweepData_obj::__mClass;

static ::String ZPP_SweepData_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	::String(null())
};

void ZPP_SweepData_obj::__register()
{
	hx::Object *dummy = new ZPP_SweepData_obj;
	ZPP_SweepData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.space.ZPP_SweepData","\x28","\x30","\x64","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_SweepData_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_SweepData_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_SweepData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_SweepData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SweepData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SweepData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SweepData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SweepData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SweepData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_SweepData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9bb3008279bcde45_176_boot)
HXLINE( 176)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace space
