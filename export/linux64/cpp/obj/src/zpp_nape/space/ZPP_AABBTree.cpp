// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBTree
#include <zpp_nape/space/ZPP_AABBTree.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_336_new,"zpp_nape.space.ZPP_AABBTree","new",0x9399cd3e,"zpp_nape.space.ZPP_AABBTree.new","zpp_nape/space/DynAABBPhase.hx",336,0x55500cf1)
HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_338_clear,"zpp_nape.space.ZPP_AABBTree","clear",0xb6c0e1eb,"zpp_nape.space.ZPP_AABBTree.clear","zpp_nape/space/DynAABBPhase.hx",338,0x55500cf1)
HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_421_insertLeaf,"zpp_nape.space.ZPP_AABBTree","insertLeaf",0xff0b7e59,"zpp_nape.space.ZPP_AABBTree.insertLeaf","zpp_nape/space/DynAABBPhase.hx",421,0x55500cf1)
HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_426_inlined_insertLeaf,"zpp_nape.space.ZPP_AABBTree","inlined_insertLeaf",0xd4373b6d,"zpp_nape.space.ZPP_AABBTree.inlined_insertLeaf","zpp_nape/space/DynAABBPhase.hx",426,0x55500cf1)
HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_516_removeLeaf,"zpp_nape.space.ZPP_AABBTree","removeLeaf",0x963fb8e4,"zpp_nape.space.ZPP_AABBTree.removeLeaf","zpp_nape/space/DynAABBPhase.hx",516,0x55500cf1)
HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_521_inlined_removeLeaf,"zpp_nape.space.ZPP_AABBTree","inlined_removeLeaf",0x6b6b75f8,"zpp_nape.space.ZPP_AABBTree.inlined_removeLeaf","zpp_nape/space/DynAABBPhase.hx",521,0x55500cf1)
HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_590_balance,"zpp_nape.space.ZPP_AABBTree","balance",0x0a7660fa,"zpp_nape.space.ZPP_AABBTree.balance","zpp_nape/space/DynAABBPhase.hx",590,0x55500cf1)
HX_DEFINE_STACK_FRAME(_hx_pos_d459d2e93b0b64cc_419_boot,"zpp_nape.space.ZPP_AABBTree","boot",0x8b12c994,"zpp_nape.space.ZPP_AABBTree.boot","zpp_nape/space/DynAABBPhase.hx",419,0x55500cf1)
namespace zpp_nape{
namespace space{

void ZPP_AABBTree_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_336_new)
            	HX_STACK_THIS(this)
HXLINE( 336)		this->root = null();
            	}

Dynamic ZPP_AABBTree_obj::__CreateEmpty() { return new ZPP_AABBTree_obj; }

void *ZPP_AABBTree_obj::_hx_vtable = 0;

Dynamic ZPP_AABBTree_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_AABBTree_obj > _hx_result = new ZPP_AABBTree_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_AABBTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ccefd18;
}

void ZPP_AABBTree_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_338_clear)
            	HX_STACK_THIS(this)
HXLINE( 339)		if (hx::IsNull( this->root )) {
HXLINE( 339)			return;
            		}
HXLINE( 340)		HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,stack) = null();
HXLINE( 341)		{
HXLINE( 350)			this->root->next = stack;
HXLINE( 351)			stack = this->root;
            		}
HXLINE( 353)		while(hx::IsNotNull( stack )){
HXLINE( 363)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,ret) = stack;
HXLINE( 364)			stack = ret->next;
HXLINE( 365)			ret->next = null();
HXLINE( 368)			if (hx::IsNull( ret->child1 )) {
HXLINE( 369)				ret->shape->node = null();
HXLINE( 370)				ret->shape->removedFromSpace();
HXLINE( 371)				ret->shape = null();
            			}
            			else {
HXLINE( 374)				if (hx::IsNotNull( ret->child1 )) {
HXLINE( 383)					ret->child1->next = stack;
HXLINE( 384)					stack = ret->child1;
            				}
HXLINE( 386)				if (hx::IsNotNull( ret->child2 )) {
HXLINE( 395)					ret->child2->next = stack;
HXLINE( 396)					stack = ret->child2;
            				}
            			}
HXLINE( 399)			{
HXLINE( 409)				{
HXLINE( 409)					ret->height = (int)-1;
HXDLIN( 409)					{
HXLINE( 409)						HX_VARI(  ::zpp_nape::geom::ZPP_AABB,o) = ret->aabb;
HXDLIN( 409)						{
HXLINE( 409)							if (hx::IsNotNull( o->outer )) {
HXLINE( 409)								o->outer->zpp_inner = null();
HXDLIN( 409)								o->outer = null();
            							}
HXDLIN( 409)							o->wrap_min = (o->wrap_max = null());
HXDLIN( 409)							o->_invalidate = null();
HXDLIN( 409)							o->_validate = null();
            						}
HXDLIN( 409)						o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 409)						::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
            					}
HXDLIN( 409)					ret->child1 = (ret->child2 = (ret->parent = null()));
HXDLIN( 409)					ret->next = null();
HXDLIN( 409)					ret->snext = null();
HXDLIN( 409)					ret->mnext = null();
            				}
HXLINE( 410)				ret->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXLINE( 411)				::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = ret;
            			}
            		}
HXLINE( 417)		this->root = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABBTree_obj,clear,(void))

void ZPP_AABBTree_obj::insertLeaf( ::zpp_nape::space::ZPP_AABBNode leaf){
            	HX_GC_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_421_insertLeaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(leaf,"leaf")
HXLINE( 421)		if (hx::IsNull( this->root )) {
HXLINE( 421)			this->root = leaf;
HXDLIN( 421)			this->root->parent = null();
            		}
            		else {
HXLINE( 421)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,leafaabb) = leaf->aabb;
HXDLIN( 421)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,node) = this->root;
HXDLIN( 421)			while(hx::IsNotNull( node->child1 )){
HXLINE( 421)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child1) = node->child1;
HXDLIN( 421)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child2) = node->child2;
HXDLIN( 421)				HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = node->aabb;
HXDLIN( 421)				HX_VARI( Float,area) = (((_this->maxx - _this->minx) + (_this->maxy - _this->miny)) * (int)2);
HXDLIN( 421)				{
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)					HX_VARI(  ::zpp_nape::geom::ZPP_AABB,a) = node->aabb;
HXDLIN( 421)					Float _hx_tmp;
HXDLIN( 421)					if ((a->minx < leafaabb->minx)) {
HXLINE( 421)						_hx_tmp = a->minx;
            					}
            					else {
HXLINE( 421)						_hx_tmp = leafaabb->minx;
            					}
HXDLIN( 421)					_this1->minx = _hx_tmp;
HXDLIN( 421)					Float _hx_tmp1;
HXDLIN( 421)					if ((a->miny < leafaabb->miny)) {
HXLINE( 421)						_hx_tmp1 = a->miny;
            					}
            					else {
HXLINE( 421)						_hx_tmp1 = leafaabb->miny;
            					}
HXDLIN( 421)					_this1->miny = _hx_tmp1;
HXDLIN( 421)					Float _hx_tmp2;
HXDLIN( 421)					if ((a->maxx > leafaabb->maxx)) {
HXLINE( 421)						_hx_tmp2 = a->maxx;
            					}
            					else {
HXLINE( 421)						_hx_tmp2 = leafaabb->maxx;
            					}
HXDLIN( 421)					_this1->maxx = _hx_tmp2;
HXDLIN( 421)					Float _hx_tmp3;
HXDLIN( 421)					if ((a->maxy > leafaabb->maxy)) {
HXLINE( 421)						_hx_tmp3 = a->maxy;
            					}
            					else {
HXLINE( 421)						_hx_tmp3 = leafaabb->maxy;
            					}
HXDLIN( 421)					_this1->maxy = _hx_tmp3;
            				}
HXDLIN( 421)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)				HX_VARI( Float,carea) = (((_this2->maxx - _this2->minx) + (_this2->maxy - _this2->miny)) * (int)2);
HXDLIN( 421)				HX_VARI( Float,cost) = ((int)2 * carea);
HXDLIN( 421)				HX_VARI( Float,icost) = ((int)2 * (carea - area));
HXDLIN( 421)				{
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)					HX_VARI(  ::zpp_nape::geom::ZPP_AABB,b) = child1->aabb;
HXDLIN( 421)					Float _hx_tmp4;
HXDLIN( 421)					if ((leafaabb->minx < b->minx)) {
HXLINE( 421)						_hx_tmp4 = leafaabb->minx;
            					}
            					else {
HXLINE( 421)						_hx_tmp4 = b->minx;
            					}
HXDLIN( 421)					_this3->minx = _hx_tmp4;
HXDLIN( 421)					Float _hx_tmp5;
HXDLIN( 421)					if ((leafaabb->miny < b->miny)) {
HXLINE( 421)						_hx_tmp5 = leafaabb->miny;
            					}
            					else {
HXLINE( 421)						_hx_tmp5 = b->miny;
            					}
HXDLIN( 421)					_this3->miny = _hx_tmp5;
HXDLIN( 421)					Float _hx_tmp6;
HXDLIN( 421)					if ((leafaabb->maxx > b->maxx)) {
HXLINE( 421)						_hx_tmp6 = leafaabb->maxx;
            					}
            					else {
HXLINE( 421)						_hx_tmp6 = b->maxx;
            					}
HXDLIN( 421)					_this3->maxx = _hx_tmp6;
HXDLIN( 421)					Float _hx_tmp7;
HXDLIN( 421)					if ((leafaabb->maxy > b->maxy)) {
HXLINE( 421)						_hx_tmp7 = leafaabb->maxy;
            					}
            					else {
HXLINE( 421)						_hx_tmp7 = b->maxy;
            					}
HXDLIN( 421)					_this3->maxy = _hx_tmp7;
            				}
HXDLIN( 421)				HX_VAR( Float,cost1);
HXDLIN( 421)				if (hx::IsNull( child1->child1 )) {
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)					cost1 = ((((_this4->maxx - _this4->minx) + (_this4->maxy - _this4->miny)) * (int)2) + icost);
            				}
            				else {
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = child1->aabb;
HXDLIN( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)					cost1 = (((((_this6->maxx - _this6->minx) + (_this6->maxy - _this6->miny)) * (int)2) - (((_this5->maxx - _this5->minx) + (_this5->maxy - _this5->miny)) * (int)2)) + icost);
            				}
HXDLIN( 421)				{
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this7,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b1,"b") = child2->aabb;
HXDLIN( 421)					Float _hx_tmp8;
HXDLIN( 421)					if ((leafaabb->minx < b1->minx)) {
HXLINE( 421)						_hx_tmp8 = leafaabb->minx;
            					}
            					else {
HXLINE( 421)						_hx_tmp8 = b1->minx;
            					}
HXDLIN( 421)					_this7->minx = _hx_tmp8;
HXDLIN( 421)					Float _hx_tmp9;
HXDLIN( 421)					if ((leafaabb->miny < b1->miny)) {
HXLINE( 421)						_hx_tmp9 = leafaabb->miny;
            					}
            					else {
HXLINE( 421)						_hx_tmp9 = b1->miny;
            					}
HXDLIN( 421)					_this7->miny = _hx_tmp9;
HXDLIN( 421)					Float _hx_tmp10;
HXDLIN( 421)					if ((leafaabb->maxx > b1->maxx)) {
HXLINE( 421)						_hx_tmp10 = leafaabb->maxx;
            					}
            					else {
HXLINE( 421)						_hx_tmp10 = b1->maxx;
            					}
HXDLIN( 421)					_this7->maxx = _hx_tmp10;
HXDLIN( 421)					Float _hx_tmp11;
HXDLIN( 421)					if ((leafaabb->maxy > b1->maxy)) {
HXLINE( 421)						_hx_tmp11 = leafaabb->maxy;
            					}
            					else {
HXLINE( 421)						_hx_tmp11 = b1->maxy;
            					}
HXDLIN( 421)					_this7->maxy = _hx_tmp11;
            				}
HXDLIN( 421)				HX_VAR( Float,cost2);
HXDLIN( 421)				if (hx::IsNull( child2->child1 )) {
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this8,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)					cost2 = ((((_this8->maxx - _this8->minx) + (_this8->maxy - _this8->miny)) * (int)2) + icost);
            				}
            				else {
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this9,"_this") = child2->aabb;
HXDLIN( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this10,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 421)					cost2 = (((((_this10->maxx - _this10->minx) + (_this10->maxy - _this10->miny)) * (int)2) - (((_this9->maxx - _this9->minx) + (_this9->maxy - _this9->miny)) * (int)2)) + icost);
            				}
HXDLIN( 421)				bool _hx_tmp12;
HXDLIN( 421)				if ((cost < cost1)) {
HXLINE( 421)					_hx_tmp12 = (cost < cost2);
            				}
            				else {
HXLINE( 421)					_hx_tmp12 = false;
            				}
HXDLIN( 421)				if (_hx_tmp12) {
HXLINE( 421)					goto _hx_goto_3;
            				}
            				else {
HXLINE( 421)					if ((cost1 < cost2)) {
HXLINE( 421)						node = child1;
            					}
            					else {
HXLINE( 421)						node = child2;
            					}
            				}
            			}
            			_hx_goto_3:;
HXDLIN( 421)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,sibling) = node;
HXDLIN( 421)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,oparent) = sibling->parent;
HXDLIN( 421)			HX_VAR(  ::zpp_nape::space::ZPP_AABBNode,nparent);
HXDLIN( 421)			{
HXLINE( 421)				if (hx::IsNull( ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool )) {
HXLINE( 421)					nparent =  ::zpp_nape::space::ZPP_AABBNode_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 421)					nparent = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN( 421)					::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = nparent->next;
HXDLIN( 421)					nparent->next = null();
            				}
HXDLIN( 421)				{
HXLINE( 421)					if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 421)						nparent->aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 421)						nparent->aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 421)						::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = nparent->aabb->next;
HXDLIN( 421)						nparent->aabb->next = null();
            					}
HXDLIN( 421)					nparent->moved = false;
HXDLIN( 421)					nparent->synced = false;
HXDLIN( 421)					nparent->first_sync = false;
            				}
            			}
HXDLIN( 421)			nparent->parent = oparent;
HXDLIN( 421)			{
HXLINE( 421)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this11,"_this") = nparent->aabb;
HXDLIN( 421)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b2,"b") = sibling->aabb;
HXDLIN( 421)				Float _hx_tmp13;
HXDLIN( 421)				if ((leafaabb->minx < b2->minx)) {
HXLINE( 421)					_hx_tmp13 = leafaabb->minx;
            				}
            				else {
HXLINE( 421)					_hx_tmp13 = b2->minx;
            				}
HXDLIN( 421)				_this11->minx = _hx_tmp13;
HXDLIN( 421)				Float _hx_tmp14;
HXDLIN( 421)				if ((leafaabb->miny < b2->miny)) {
HXLINE( 421)					_hx_tmp14 = leafaabb->miny;
            				}
            				else {
HXLINE( 421)					_hx_tmp14 = b2->miny;
            				}
HXDLIN( 421)				_this11->miny = _hx_tmp14;
HXDLIN( 421)				Float _hx_tmp15;
HXDLIN( 421)				if ((leafaabb->maxx > b2->maxx)) {
HXLINE( 421)					_hx_tmp15 = leafaabb->maxx;
            				}
            				else {
HXLINE( 421)					_hx_tmp15 = b2->maxx;
            				}
HXDLIN( 421)				_this11->maxx = _hx_tmp15;
HXDLIN( 421)				Float _hx_tmp16;
HXDLIN( 421)				if ((leafaabb->maxy > b2->maxy)) {
HXLINE( 421)					_hx_tmp16 = leafaabb->maxy;
            				}
            				else {
HXLINE( 421)					_hx_tmp16 = b2->maxy;
            				}
HXDLIN( 421)				_this11->maxy = _hx_tmp16;
            			}
HXDLIN( 421)			nparent->height = (sibling->height + (int)1);
HXDLIN( 421)			if (hx::IsNotNull( oparent )) {
HXLINE( 421)				if (hx::IsEq( oparent->child1,sibling )) {
HXLINE( 421)					oparent->child1 = nparent;
            				}
            				else {
HXLINE( 421)					oparent->child2 = nparent;
            				}
HXDLIN( 421)				nparent->child1 = sibling;
HXDLIN( 421)				nparent->child2 = leaf;
HXDLIN( 421)				sibling->parent = nparent;
HXDLIN( 421)				leaf->parent = nparent;
            			}
            			else {
HXLINE( 421)				nparent->child1 = sibling;
HXDLIN( 421)				nparent->child2 = leaf;
HXDLIN( 421)				sibling->parent = nparent;
HXDLIN( 421)				leaf->parent = nparent;
HXDLIN( 421)				this->root = nparent;
            			}
HXDLIN( 421)			node = leaf->parent;
HXDLIN( 421)			while(hx::IsNotNull( node )){
HXLINE( 421)				bool node1;
HXDLIN( 421)				if (hx::IsNotNull( node->child1 )) {
HXLINE( 421)					node1 = (node->height < (int)2);
            				}
            				else {
HXLINE( 421)					node1 = true;
            				}
HXDLIN( 421)				if (node1) {
HXLINE( 421)					node = node;
            				}
            				else {
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,b3,"b") = node->child1;
HXDLIN( 421)					HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,c) = node->child2;
HXDLIN( 421)					HX_VARI( int,balance) = (c->height - b3->height);
HXDLIN( 421)					if ((balance > (int)1)) {
HXLINE( 421)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,f) = c->child1;
HXDLIN( 421)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,g) = c->child2;
HXDLIN( 421)						c->child1 = node;
HXDLIN( 421)						c->parent = node->parent;
HXDLIN( 421)						node->parent = c;
HXDLIN( 421)						if (hx::IsNotNull( c->parent )) {
HXLINE( 421)							if (hx::IsEq( c->parent->child1,node )) {
HXLINE( 421)								c->parent->child1 = c;
            							}
            							else {
HXLINE( 421)								c->parent->child2 = c;
            							}
            						}
            						else {
HXLINE( 421)							this->root = c;
            						}
HXDLIN( 421)						if ((f->height > g->height)) {
HXLINE( 421)							c->child2 = f;
HXDLIN( 421)							node->child2 = g;
HXDLIN( 421)							g->parent = node;
HXDLIN( 421)							{
HXLINE( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this12,"_this") = node->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a1,"a") = b3->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b4,"b") = g->aabb;
HXDLIN( 421)								Float node2;
HXDLIN( 421)								if ((a1->minx < b4->minx)) {
HXLINE( 421)									node2 = a1->minx;
            								}
            								else {
HXLINE( 421)									node2 = b4->minx;
            								}
HXDLIN( 421)								_this12->minx = node2;
HXDLIN( 421)								Float node3;
HXDLIN( 421)								if ((a1->miny < b4->miny)) {
HXLINE( 421)									node3 = a1->miny;
            								}
            								else {
HXLINE( 421)									node3 = b4->miny;
            								}
HXDLIN( 421)								_this12->miny = node3;
HXDLIN( 421)								Float node4;
HXDLIN( 421)								if ((a1->maxx > b4->maxx)) {
HXLINE( 421)									node4 = a1->maxx;
            								}
            								else {
HXLINE( 421)									node4 = b4->maxx;
            								}
HXDLIN( 421)								_this12->maxx = node4;
HXDLIN( 421)								Float node5;
HXDLIN( 421)								if ((a1->maxy > b4->maxy)) {
HXLINE( 421)									node5 = a1->maxy;
            								}
            								else {
HXLINE( 421)									node5 = b4->maxy;
            								}
HXDLIN( 421)								_this12->maxy = node5;
            							}
HXDLIN( 421)							{
HXLINE( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this13,"_this") = c->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a2,"a") = node->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b5,"b") = f->aabb;
HXDLIN( 421)								Float node6;
HXDLIN( 421)								if ((a2->minx < b5->minx)) {
HXLINE( 421)									node6 = a2->minx;
            								}
            								else {
HXLINE( 421)									node6 = b5->minx;
            								}
HXDLIN( 421)								_this13->minx = node6;
HXDLIN( 421)								Float node7;
HXDLIN( 421)								if ((a2->miny < b5->miny)) {
HXLINE( 421)									node7 = a2->miny;
            								}
            								else {
HXLINE( 421)									node7 = b5->miny;
            								}
HXDLIN( 421)								_this13->miny = node7;
HXDLIN( 421)								Float node8;
HXDLIN( 421)								if ((a2->maxx > b5->maxx)) {
HXLINE( 421)									node8 = a2->maxx;
            								}
            								else {
HXLINE( 421)									node8 = b5->maxx;
            								}
HXDLIN( 421)								_this13->maxx = node8;
HXDLIN( 421)								Float node9;
HXDLIN( 421)								if ((a2->maxy > b5->maxy)) {
HXLINE( 421)									node9 = a2->maxy;
            								}
            								else {
HXLINE( 421)									node9 = b5->maxy;
            								}
HXDLIN( 421)								_this13->maxy = node9;
            							}
HXDLIN( 421)							HX_VARI( int,x) = b3->height;
HXDLIN( 421)							HX_VARI( int,y) = g->height;
HXDLIN( 421)							int node10;
HXDLIN( 421)							if ((x > y)) {
HXLINE( 421)								node10 = x;
            							}
            							else {
HXLINE( 421)								node10 = y;
            							}
HXDLIN( 421)							node->height = ((int)1 + node10);
HXDLIN( 421)							HX_VARI_NAME( int,x1,"x") = node->height;
HXDLIN( 421)							HX_VARI_NAME( int,y1,"y") = f->height;
HXDLIN( 421)							int node11;
HXDLIN( 421)							if ((x1 > y1)) {
HXLINE( 421)								node11 = x1;
            							}
            							else {
HXLINE( 421)								node11 = y1;
            							}
HXDLIN( 421)							c->height = ((int)1 + node11);
            						}
            						else {
HXLINE( 421)							c->child2 = g;
HXDLIN( 421)							node->child2 = f;
HXDLIN( 421)							f->parent = node;
HXDLIN( 421)							{
HXLINE( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this14,"_this") = node->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a3,"a") = b3->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b6,"b") = f->aabb;
HXDLIN( 421)								Float node12;
HXDLIN( 421)								if ((a3->minx < b6->minx)) {
HXLINE( 421)									node12 = a3->minx;
            								}
            								else {
HXLINE( 421)									node12 = b6->minx;
            								}
HXDLIN( 421)								_this14->minx = node12;
HXDLIN( 421)								Float node13;
HXDLIN( 421)								if ((a3->miny < b6->miny)) {
HXLINE( 421)									node13 = a3->miny;
            								}
            								else {
HXLINE( 421)									node13 = b6->miny;
            								}
HXDLIN( 421)								_this14->miny = node13;
HXDLIN( 421)								Float node14;
HXDLIN( 421)								if ((a3->maxx > b6->maxx)) {
HXLINE( 421)									node14 = a3->maxx;
            								}
            								else {
HXLINE( 421)									node14 = b6->maxx;
            								}
HXDLIN( 421)								_this14->maxx = node14;
HXDLIN( 421)								Float node15;
HXDLIN( 421)								if ((a3->maxy > b6->maxy)) {
HXLINE( 421)									node15 = a3->maxy;
            								}
            								else {
HXLINE( 421)									node15 = b6->maxy;
            								}
HXDLIN( 421)								_this14->maxy = node15;
            							}
HXDLIN( 421)							{
HXLINE( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this15,"_this") = c->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a4,"a") = node->aabb;
HXDLIN( 421)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b7,"b") = g->aabb;
HXDLIN( 421)								Float node16;
HXDLIN( 421)								if ((a4->minx < b7->minx)) {
HXLINE( 421)									node16 = a4->minx;
            								}
            								else {
HXLINE( 421)									node16 = b7->minx;
            								}
HXDLIN( 421)								_this15->minx = node16;
HXDLIN( 421)								Float node17;
HXDLIN( 421)								if ((a4->miny < b7->miny)) {
HXLINE( 421)									node17 = a4->miny;
            								}
            								else {
HXLINE( 421)									node17 = b7->miny;
            								}
HXDLIN( 421)								_this15->miny = node17;
HXDLIN( 421)								Float node18;
HXDLIN( 421)								if ((a4->maxx > b7->maxx)) {
HXLINE( 421)									node18 = a4->maxx;
            								}
            								else {
HXLINE( 421)									node18 = b7->maxx;
            								}
HXDLIN( 421)								_this15->maxx = node18;
HXDLIN( 421)								Float node19;
HXDLIN( 421)								if ((a4->maxy > b7->maxy)) {
HXLINE( 421)									node19 = a4->maxy;
            								}
            								else {
HXLINE( 421)									node19 = b7->maxy;
            								}
HXDLIN( 421)								_this15->maxy = node19;
            							}
HXDLIN( 421)							HX_VARI_NAME( int,x2,"x") = b3->height;
HXDLIN( 421)							HX_VARI_NAME( int,y2,"y") = f->height;
HXDLIN( 421)							int node20;
HXDLIN( 421)							if ((x2 > y2)) {
HXLINE( 421)								node20 = x2;
            							}
            							else {
HXLINE( 421)								node20 = y2;
            							}
HXDLIN( 421)							node->height = ((int)1 + node20);
HXDLIN( 421)							HX_VARI_NAME( int,x3,"x") = node->height;
HXDLIN( 421)							HX_VARI_NAME( int,y3,"y") = g->height;
HXDLIN( 421)							int node21;
HXDLIN( 421)							if ((x3 > y3)) {
HXLINE( 421)								node21 = x3;
            							}
            							else {
HXLINE( 421)								node21 = y3;
            							}
HXDLIN( 421)							c->height = ((int)1 + node21);
            						}
HXDLIN( 421)						node = c;
            					}
            					else {
HXLINE( 421)						if ((balance < (int)-1)) {
HXLINE( 421)							HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,f1,"f") = b3->child1;
HXDLIN( 421)							HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,g1,"g") = b3->child2;
HXDLIN( 421)							b3->child1 = node;
HXDLIN( 421)							b3->parent = node->parent;
HXDLIN( 421)							node->parent = b3;
HXDLIN( 421)							if (hx::IsNotNull( b3->parent )) {
HXLINE( 421)								if (hx::IsEq( b3->parent->child1,node )) {
HXLINE( 421)									b3->parent->child1 = b3;
            								}
            								else {
HXLINE( 421)									b3->parent->child2 = b3;
            								}
            							}
            							else {
HXLINE( 421)								this->root = b3;
            							}
HXDLIN( 421)							if ((f1->height > g1->height)) {
HXLINE( 421)								b3->child2 = f1;
HXDLIN( 421)								node->child1 = g1;
HXDLIN( 421)								g1->parent = node;
HXDLIN( 421)								{
HXLINE( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this16,"_this") = node->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a5,"a") = c->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b8,"b") = g1->aabb;
HXDLIN( 421)									Float node22;
HXDLIN( 421)									if ((a5->minx < b8->minx)) {
HXLINE( 421)										node22 = a5->minx;
            									}
            									else {
HXLINE( 421)										node22 = b8->minx;
            									}
HXDLIN( 421)									_this16->minx = node22;
HXDLIN( 421)									Float node23;
HXDLIN( 421)									if ((a5->miny < b8->miny)) {
HXLINE( 421)										node23 = a5->miny;
            									}
            									else {
HXLINE( 421)										node23 = b8->miny;
            									}
HXDLIN( 421)									_this16->miny = node23;
HXDLIN( 421)									Float node24;
HXDLIN( 421)									if ((a5->maxx > b8->maxx)) {
HXLINE( 421)										node24 = a5->maxx;
            									}
            									else {
HXLINE( 421)										node24 = b8->maxx;
            									}
HXDLIN( 421)									_this16->maxx = node24;
HXDLIN( 421)									Float node25;
HXDLIN( 421)									if ((a5->maxy > b8->maxy)) {
HXLINE( 421)										node25 = a5->maxy;
            									}
            									else {
HXLINE( 421)										node25 = b8->maxy;
            									}
HXDLIN( 421)									_this16->maxy = node25;
            								}
HXDLIN( 421)								{
HXLINE( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this17,"_this") = b3->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a6,"a") = node->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b9,"b") = f1->aabb;
HXDLIN( 421)									Float node26;
HXDLIN( 421)									if ((a6->minx < b9->minx)) {
HXLINE( 421)										node26 = a6->minx;
            									}
            									else {
HXLINE( 421)										node26 = b9->minx;
            									}
HXDLIN( 421)									_this17->minx = node26;
HXDLIN( 421)									Float node27;
HXDLIN( 421)									if ((a6->miny < b9->miny)) {
HXLINE( 421)										node27 = a6->miny;
            									}
            									else {
HXLINE( 421)										node27 = b9->miny;
            									}
HXDLIN( 421)									_this17->miny = node27;
HXDLIN( 421)									Float node28;
HXDLIN( 421)									if ((a6->maxx > b9->maxx)) {
HXLINE( 421)										node28 = a6->maxx;
            									}
            									else {
HXLINE( 421)										node28 = b9->maxx;
            									}
HXDLIN( 421)									_this17->maxx = node28;
HXDLIN( 421)									Float node29;
HXDLIN( 421)									if ((a6->maxy > b9->maxy)) {
HXLINE( 421)										node29 = a6->maxy;
            									}
            									else {
HXLINE( 421)										node29 = b9->maxy;
            									}
HXDLIN( 421)									_this17->maxy = node29;
            								}
HXDLIN( 421)								HX_VARI_NAME( int,x4,"x") = c->height;
HXDLIN( 421)								HX_VARI_NAME( int,y4,"y") = g1->height;
HXDLIN( 421)								int node30;
HXDLIN( 421)								if ((x4 > y4)) {
HXLINE( 421)									node30 = x4;
            								}
            								else {
HXLINE( 421)									node30 = y4;
            								}
HXDLIN( 421)								node->height = ((int)1 + node30);
HXDLIN( 421)								HX_VARI_NAME( int,x5,"x") = node->height;
HXDLIN( 421)								HX_VARI_NAME( int,y5,"y") = f1->height;
HXDLIN( 421)								int node31;
HXDLIN( 421)								if ((x5 > y5)) {
HXLINE( 421)									node31 = x5;
            								}
            								else {
HXLINE( 421)									node31 = y5;
            								}
HXDLIN( 421)								b3->height = ((int)1 + node31);
            							}
            							else {
HXLINE( 421)								b3->child2 = g1;
HXDLIN( 421)								node->child1 = f1;
HXDLIN( 421)								f1->parent = node;
HXDLIN( 421)								{
HXLINE( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this18,"_this") = node->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a7,"a") = c->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b10,"b") = f1->aabb;
HXDLIN( 421)									Float node32;
HXDLIN( 421)									if ((a7->minx < b10->minx)) {
HXLINE( 421)										node32 = a7->minx;
            									}
            									else {
HXLINE( 421)										node32 = b10->minx;
            									}
HXDLIN( 421)									_this18->minx = node32;
HXDLIN( 421)									Float node33;
HXDLIN( 421)									if ((a7->miny < b10->miny)) {
HXLINE( 421)										node33 = a7->miny;
            									}
            									else {
HXLINE( 421)										node33 = b10->miny;
            									}
HXDLIN( 421)									_this18->miny = node33;
HXDLIN( 421)									Float node34;
HXDLIN( 421)									if ((a7->maxx > b10->maxx)) {
HXLINE( 421)										node34 = a7->maxx;
            									}
            									else {
HXLINE( 421)										node34 = b10->maxx;
            									}
HXDLIN( 421)									_this18->maxx = node34;
HXDLIN( 421)									Float node35;
HXDLIN( 421)									if ((a7->maxy > b10->maxy)) {
HXLINE( 421)										node35 = a7->maxy;
            									}
            									else {
HXLINE( 421)										node35 = b10->maxy;
            									}
HXDLIN( 421)									_this18->maxy = node35;
            								}
HXDLIN( 421)								{
HXLINE( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this19,"_this") = b3->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a8,"a") = node->aabb;
HXDLIN( 421)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b11,"b") = g1->aabb;
HXDLIN( 421)									Float node36;
HXDLIN( 421)									if ((a8->minx < b11->minx)) {
HXLINE( 421)										node36 = a8->minx;
            									}
            									else {
HXLINE( 421)										node36 = b11->minx;
            									}
HXDLIN( 421)									_this19->minx = node36;
HXDLIN( 421)									Float node37;
HXDLIN( 421)									if ((a8->miny < b11->miny)) {
HXLINE( 421)										node37 = a8->miny;
            									}
            									else {
HXLINE( 421)										node37 = b11->miny;
            									}
HXDLIN( 421)									_this19->miny = node37;
HXDLIN( 421)									Float node38;
HXDLIN( 421)									if ((a8->maxx > b11->maxx)) {
HXLINE( 421)										node38 = a8->maxx;
            									}
            									else {
HXLINE( 421)										node38 = b11->maxx;
            									}
HXDLIN( 421)									_this19->maxx = node38;
HXDLIN( 421)									Float node39;
HXDLIN( 421)									if ((a8->maxy > b11->maxy)) {
HXLINE( 421)										node39 = a8->maxy;
            									}
            									else {
HXLINE( 421)										node39 = b11->maxy;
            									}
HXDLIN( 421)									_this19->maxy = node39;
            								}
HXDLIN( 421)								HX_VARI_NAME( int,x6,"x") = c->height;
HXDLIN( 421)								HX_VARI_NAME( int,y6,"y") = f1->height;
HXDLIN( 421)								int node40;
HXDLIN( 421)								if ((x6 > y6)) {
HXLINE( 421)									node40 = x6;
            								}
            								else {
HXLINE( 421)									node40 = y6;
            								}
HXDLIN( 421)								node->height = ((int)1 + node40);
HXDLIN( 421)								HX_VARI_NAME( int,x7,"x") = node->height;
HXDLIN( 421)								HX_VARI_NAME( int,y7,"y") = g1->height;
HXDLIN( 421)								int node41;
HXDLIN( 421)								if ((x7 > y7)) {
HXLINE( 421)									node41 = x7;
            								}
            								else {
HXLINE( 421)									node41 = y7;
            								}
HXDLIN( 421)								b3->height = ((int)1 + node41);
            							}
HXDLIN( 421)							node = b3;
            						}
            						else {
HXLINE( 421)							node = node;
            						}
            					}
            				}
HXDLIN( 421)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,child11,"child1") = node->child1;
HXDLIN( 421)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,child21,"child2") = node->child2;
HXDLIN( 421)				HX_VARI_NAME( int,x8,"x") = child11->height;
HXDLIN( 421)				HX_VARI_NAME( int,y8,"y") = child21->height;
HXDLIN( 421)				int _hx_tmp17;
HXDLIN( 421)				if ((x8 > y8)) {
HXLINE( 421)					_hx_tmp17 = x8;
            				}
            				else {
HXLINE( 421)					_hx_tmp17 = y8;
            				}
HXDLIN( 421)				node->height = ((int)1 + _hx_tmp17);
HXDLIN( 421)				{
HXLINE( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this20,"_this") = node->aabb;
HXDLIN( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a9,"a") = child11->aabb;
HXDLIN( 421)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b12,"b") = child21->aabb;
HXDLIN( 421)					Float _hx_tmp18;
HXDLIN( 421)					if ((a9->minx < b12->minx)) {
HXLINE( 421)						_hx_tmp18 = a9->minx;
            					}
            					else {
HXLINE( 421)						_hx_tmp18 = b12->minx;
            					}
HXDLIN( 421)					_this20->minx = _hx_tmp18;
HXDLIN( 421)					Float _hx_tmp19;
HXDLIN( 421)					if ((a9->miny < b12->miny)) {
HXLINE( 421)						_hx_tmp19 = a9->miny;
            					}
            					else {
HXLINE( 421)						_hx_tmp19 = b12->miny;
            					}
HXDLIN( 421)					_this20->miny = _hx_tmp19;
HXDLIN( 421)					Float _hx_tmp20;
HXDLIN( 421)					if ((a9->maxx > b12->maxx)) {
HXLINE( 421)						_hx_tmp20 = a9->maxx;
            					}
            					else {
HXLINE( 421)						_hx_tmp20 = b12->maxx;
            					}
HXDLIN( 421)					_this20->maxx = _hx_tmp20;
HXDLIN( 421)					Float _hx_tmp21;
HXDLIN( 421)					if ((a9->maxy > b12->maxy)) {
HXLINE( 421)						_hx_tmp21 = a9->maxy;
            					}
            					else {
HXLINE( 421)						_hx_tmp21 = b12->maxy;
            					}
HXDLIN( 421)					_this20->maxy = _hx_tmp21;
            				}
HXDLIN( 421)				node = node->parent;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABBTree_obj,insertLeaf,(void))

void ZPP_AABBTree_obj::inlined_insertLeaf( ::zpp_nape::space::ZPP_AABBNode leaf){
            	HX_GC_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_426_inlined_insertLeaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(leaf,"leaf")
HXLINE( 426)		if (hx::IsNull( this->root )) {
HXLINE( 427)			this->root = leaf;
HXLINE( 428)			this->root->parent = null();
            		}
            		else {
HXLINE( 431)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,leafaabb) = leaf->aabb;
HXLINE( 432)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,node) = this->root;
HXLINE( 433)			while(hx::IsNotNull( node->child1 )){
HXLINE( 434)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child1) = node->child1;
HXLINE( 435)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child2) = node->child2;
HXLINE( 436)				HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = node->aabb;
HXDLIN( 436)				HX_VARI( Float,area) = (((_this->maxx - _this->minx) + (_this->maxy - _this->miny)) * (int)2);
HXLINE( 437)				{
HXLINE( 437)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 437)					HX_VARI(  ::zpp_nape::geom::ZPP_AABB,a) = node->aabb;
HXDLIN( 437)					Float _hx_tmp;
HXDLIN( 437)					if ((a->minx < leafaabb->minx)) {
HXLINE( 437)						_hx_tmp = a->minx;
            					}
            					else {
HXLINE( 437)						_hx_tmp = leafaabb->minx;
            					}
HXDLIN( 437)					_this1->minx = _hx_tmp;
HXDLIN( 437)					Float _hx_tmp1;
HXDLIN( 437)					if ((a->miny < leafaabb->miny)) {
HXLINE( 437)						_hx_tmp1 = a->miny;
            					}
            					else {
HXLINE( 437)						_hx_tmp1 = leafaabb->miny;
            					}
HXDLIN( 437)					_this1->miny = _hx_tmp1;
HXDLIN( 437)					Float _hx_tmp2;
HXDLIN( 437)					if ((a->maxx > leafaabb->maxx)) {
HXLINE( 437)						_hx_tmp2 = a->maxx;
            					}
            					else {
HXLINE( 437)						_hx_tmp2 = leafaabb->maxx;
            					}
HXDLIN( 437)					_this1->maxx = _hx_tmp2;
HXDLIN( 437)					Float _hx_tmp3;
HXDLIN( 437)					if ((a->maxy > leafaabb->maxy)) {
HXLINE( 437)						_hx_tmp3 = a->maxy;
            					}
            					else {
HXLINE( 437)						_hx_tmp3 = leafaabb->maxy;
            					}
HXDLIN( 437)					_this1->maxy = _hx_tmp3;
            				}
HXLINE( 438)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 438)				HX_VARI( Float,carea) = (((_this2->maxx - _this2->minx) + (_this2->maxy - _this2->miny)) * (int)2);
HXLINE( 439)				HX_VARI( Float,cost) = ((int)2 * carea);
HXLINE( 440)				HX_VARI( Float,icost) = ((int)2 * (carea - area));
HXLINE( 442)				{
HXLINE( 442)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 442)					HX_VARI(  ::zpp_nape::geom::ZPP_AABB,b) = child1->aabb;
HXDLIN( 442)					Float _hx_tmp4;
HXDLIN( 442)					if ((leafaabb->minx < b->minx)) {
HXLINE( 442)						_hx_tmp4 = leafaabb->minx;
            					}
            					else {
HXLINE( 442)						_hx_tmp4 = b->minx;
            					}
HXDLIN( 442)					_this3->minx = _hx_tmp4;
HXDLIN( 442)					Float _hx_tmp5;
HXDLIN( 442)					if ((leafaabb->miny < b->miny)) {
HXLINE( 442)						_hx_tmp5 = leafaabb->miny;
            					}
            					else {
HXLINE( 442)						_hx_tmp5 = b->miny;
            					}
HXDLIN( 442)					_this3->miny = _hx_tmp5;
HXDLIN( 442)					Float _hx_tmp6;
HXDLIN( 442)					if ((leafaabb->maxx > b->maxx)) {
HXLINE( 442)						_hx_tmp6 = leafaabb->maxx;
            					}
            					else {
HXLINE( 442)						_hx_tmp6 = b->maxx;
            					}
HXDLIN( 442)					_this3->maxx = _hx_tmp6;
HXDLIN( 442)					Float _hx_tmp7;
HXDLIN( 442)					if ((leafaabb->maxy > b->maxy)) {
HXLINE( 442)						_hx_tmp7 = leafaabb->maxy;
            					}
            					else {
HXLINE( 442)						_hx_tmp7 = b->maxy;
            					}
HXDLIN( 442)					_this3->maxy = _hx_tmp7;
            				}
HXLINE( 441)				HX_VAR( Float,cost1);
HXLINE( 443)				if (hx::IsNull( child1->child1 )) {
HXLINE( 443)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXLINE( 441)					cost1 = ((((_this4->maxx - _this4->minx) + (_this4->maxy - _this4->miny)) * (int)2) + icost);
            				}
            				else {
HXLINE( 445)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = child1->aabb;
HXLINE( 446)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXLINE( 441)					cost1 = (((((_this6->maxx - _this6->minx) + (_this6->maxy - _this6->miny)) * (int)2) - (((_this5->maxx - _this5->minx) + (_this5->maxy - _this5->miny)) * (int)2)) + icost);
            				}
HXLINE( 451)				{
HXLINE( 451)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this7,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXDLIN( 451)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b1,"b") = child2->aabb;
HXDLIN( 451)					Float _hx_tmp8;
HXDLIN( 451)					if ((leafaabb->minx < b1->minx)) {
HXLINE( 451)						_hx_tmp8 = leafaabb->minx;
            					}
            					else {
HXLINE( 451)						_hx_tmp8 = b1->minx;
            					}
HXDLIN( 451)					_this7->minx = _hx_tmp8;
HXDLIN( 451)					Float _hx_tmp9;
HXDLIN( 451)					if ((leafaabb->miny < b1->miny)) {
HXLINE( 451)						_hx_tmp9 = leafaabb->miny;
            					}
            					else {
HXLINE( 451)						_hx_tmp9 = b1->miny;
            					}
HXDLIN( 451)					_this7->miny = _hx_tmp9;
HXDLIN( 451)					Float _hx_tmp10;
HXDLIN( 451)					if ((leafaabb->maxx > b1->maxx)) {
HXLINE( 451)						_hx_tmp10 = leafaabb->maxx;
            					}
            					else {
HXLINE( 451)						_hx_tmp10 = b1->maxx;
            					}
HXDLIN( 451)					_this7->maxx = _hx_tmp10;
HXDLIN( 451)					Float _hx_tmp11;
HXDLIN( 451)					if ((leafaabb->maxy > b1->maxy)) {
HXLINE( 451)						_hx_tmp11 = leafaabb->maxy;
            					}
            					else {
HXLINE( 451)						_hx_tmp11 = b1->maxy;
            					}
HXDLIN( 451)					_this7->maxy = _hx_tmp11;
            				}
HXLINE( 450)				HX_VAR( Float,cost2);
HXLINE( 452)				if (hx::IsNull( child2->child1 )) {
HXLINE( 452)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this8,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXLINE( 450)					cost2 = ((((_this8->maxx - _this8->minx) + (_this8->maxy - _this8->miny)) * (int)2) + icost);
            				}
            				else {
HXLINE( 454)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this9,"_this") = child2->aabb;
HXLINE( 455)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this10,"_this") = ::zpp_nape::space::ZPP_AABBTree_obj::tmpaabb;
HXLINE( 450)					cost2 = (((((_this10->maxx - _this10->minx) + (_this10->maxy - _this10->miny)) * (int)2) - (((_this9->maxx - _this9->minx) + (_this9->maxy - _this9->miny)) * (int)2)) + icost);
            				}
HXLINE( 459)				bool _hx_tmp12;
HXDLIN( 459)				if ((cost < cost1)) {
HXLINE( 459)					_hx_tmp12 = (cost < cost2);
            				}
            				else {
HXLINE( 459)					_hx_tmp12 = false;
            				}
HXDLIN( 459)				if (_hx_tmp12) {
HXLINE( 459)					goto _hx_goto_6;
            				}
            				else {
HXLINE( 460)					if ((cost1 < cost2)) {
HXLINE( 460)						node = child1;
            					}
            					else {
HXLINE( 460)						node = child2;
            					}
            				}
            			}
            			_hx_goto_6:;
HXLINE( 462)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,sibling) = node;
HXLINE( 463)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,oparent) = sibling->parent;
HXLINE( 464)			HX_VAR(  ::zpp_nape::space::ZPP_AABBNode,nparent);
HXLINE( 465)			{
HXLINE( 466)				if (hx::IsNull( ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool )) {
HXLINE( 467)					nparent =  ::zpp_nape::space::ZPP_AABBNode_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 473)					nparent = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXLINE( 474)					::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = nparent->next;
HXLINE( 475)					nparent->next = null();
            				}
HXLINE( 480)				{
HXLINE( 480)					if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 480)						nparent->aabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 480)						nparent->aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 480)						::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = nparent->aabb->next;
HXDLIN( 480)						nparent->aabb->next = null();
            					}
HXDLIN( 480)					nparent->moved = false;
HXDLIN( 480)					nparent->synced = false;
HXDLIN( 480)					nparent->first_sync = false;
            				}
            			}
HXLINE( 482)			nparent->parent = oparent;
HXLINE( 483)			{
HXLINE( 483)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this11,"_this") = nparent->aabb;
HXDLIN( 483)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b2,"b") = sibling->aabb;
HXDLIN( 483)				Float _hx_tmp13;
HXDLIN( 483)				if ((leafaabb->minx < b2->minx)) {
HXLINE( 483)					_hx_tmp13 = leafaabb->minx;
            				}
            				else {
HXLINE( 483)					_hx_tmp13 = b2->minx;
            				}
HXDLIN( 483)				_this11->minx = _hx_tmp13;
HXDLIN( 483)				Float _hx_tmp14;
HXDLIN( 483)				if ((leafaabb->miny < b2->miny)) {
HXLINE( 483)					_hx_tmp14 = leafaabb->miny;
            				}
            				else {
HXLINE( 483)					_hx_tmp14 = b2->miny;
            				}
HXDLIN( 483)				_this11->miny = _hx_tmp14;
HXDLIN( 483)				Float _hx_tmp15;
HXDLIN( 483)				if ((leafaabb->maxx > b2->maxx)) {
HXLINE( 483)					_hx_tmp15 = leafaabb->maxx;
            				}
            				else {
HXLINE( 483)					_hx_tmp15 = b2->maxx;
            				}
HXDLIN( 483)				_this11->maxx = _hx_tmp15;
HXDLIN( 483)				Float _hx_tmp16;
HXDLIN( 483)				if ((leafaabb->maxy > b2->maxy)) {
HXLINE( 483)					_hx_tmp16 = leafaabb->maxy;
            				}
            				else {
HXLINE( 483)					_hx_tmp16 = b2->maxy;
            				}
HXDLIN( 483)				_this11->maxy = _hx_tmp16;
            			}
HXLINE( 484)			nparent->height = (sibling->height + (int)1);
HXLINE( 485)			if (hx::IsNotNull( oparent )) {
HXLINE( 486)				if (hx::IsEq( oparent->child1,sibling )) {
HXLINE( 486)					oparent->child1 = nparent;
            				}
            				else {
HXLINE( 487)					oparent->child2 = nparent;
            				}
HXLINE( 488)				nparent->child1 = sibling;
HXLINE( 489)				nparent->child2 = leaf;
HXLINE( 490)				sibling->parent = nparent;
HXLINE( 491)				leaf->parent = nparent;
            			}
            			else {
HXLINE( 494)				nparent->child1 = sibling;
HXLINE( 495)				nparent->child2 = leaf;
HXLINE( 496)				sibling->parent = nparent;
HXLINE( 497)				leaf->parent = nparent;
HXLINE( 498)				this->root = nparent;
            			}
HXLINE( 500)			node = leaf->parent;
HXLINE( 501)			while(hx::IsNotNull( node )){
HXLINE( 502)				bool node1;
HXDLIN( 502)				if (hx::IsNotNull( node->child1 )) {
HXLINE( 502)					node1 = (node->height < (int)2);
            				}
            				else {
HXLINE( 502)					node1 = true;
            				}
HXDLIN( 502)				if (node1) {
HXLINE( 502)					node = node;
            				}
            				else {
HXLINE( 502)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,b3,"b") = node->child1;
HXDLIN( 502)					HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,c) = node->child2;
HXDLIN( 502)					HX_VARI( int,balance) = (c->height - b3->height);
HXDLIN( 502)					if ((balance > (int)1)) {
HXLINE( 502)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,f) = c->child1;
HXDLIN( 502)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,g) = c->child2;
HXDLIN( 502)						c->child1 = node;
HXDLIN( 502)						c->parent = node->parent;
HXDLIN( 502)						node->parent = c;
HXDLIN( 502)						if (hx::IsNotNull( c->parent )) {
HXLINE( 502)							if (hx::IsEq( c->parent->child1,node )) {
HXLINE( 502)								c->parent->child1 = c;
            							}
            							else {
HXLINE( 502)								c->parent->child2 = c;
            							}
            						}
            						else {
HXLINE( 502)							this->root = c;
            						}
HXDLIN( 502)						if ((f->height > g->height)) {
HXLINE( 502)							c->child2 = f;
HXDLIN( 502)							node->child2 = g;
HXDLIN( 502)							g->parent = node;
HXDLIN( 502)							{
HXLINE( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this12,"_this") = node->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a1,"a") = b3->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b4,"b") = g->aabb;
HXDLIN( 502)								Float node2;
HXDLIN( 502)								if ((a1->minx < b4->minx)) {
HXLINE( 502)									node2 = a1->minx;
            								}
            								else {
HXLINE( 502)									node2 = b4->minx;
            								}
HXDLIN( 502)								_this12->minx = node2;
HXDLIN( 502)								Float node3;
HXDLIN( 502)								if ((a1->miny < b4->miny)) {
HXLINE( 502)									node3 = a1->miny;
            								}
            								else {
HXLINE( 502)									node3 = b4->miny;
            								}
HXDLIN( 502)								_this12->miny = node3;
HXDLIN( 502)								Float node4;
HXDLIN( 502)								if ((a1->maxx > b4->maxx)) {
HXLINE( 502)									node4 = a1->maxx;
            								}
            								else {
HXLINE( 502)									node4 = b4->maxx;
            								}
HXDLIN( 502)								_this12->maxx = node4;
HXDLIN( 502)								Float node5;
HXDLIN( 502)								if ((a1->maxy > b4->maxy)) {
HXLINE( 502)									node5 = a1->maxy;
            								}
            								else {
HXLINE( 502)									node5 = b4->maxy;
            								}
HXDLIN( 502)								_this12->maxy = node5;
            							}
HXDLIN( 502)							{
HXLINE( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this13,"_this") = c->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a2,"a") = node->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b5,"b") = f->aabb;
HXDLIN( 502)								Float node6;
HXDLIN( 502)								if ((a2->minx < b5->minx)) {
HXLINE( 502)									node6 = a2->minx;
            								}
            								else {
HXLINE( 502)									node6 = b5->minx;
            								}
HXDLIN( 502)								_this13->minx = node6;
HXDLIN( 502)								Float node7;
HXDLIN( 502)								if ((a2->miny < b5->miny)) {
HXLINE( 502)									node7 = a2->miny;
            								}
            								else {
HXLINE( 502)									node7 = b5->miny;
            								}
HXDLIN( 502)								_this13->miny = node7;
HXDLIN( 502)								Float node8;
HXDLIN( 502)								if ((a2->maxx > b5->maxx)) {
HXLINE( 502)									node8 = a2->maxx;
            								}
            								else {
HXLINE( 502)									node8 = b5->maxx;
            								}
HXDLIN( 502)								_this13->maxx = node8;
HXDLIN( 502)								Float node9;
HXDLIN( 502)								if ((a2->maxy > b5->maxy)) {
HXLINE( 502)									node9 = a2->maxy;
            								}
            								else {
HXLINE( 502)									node9 = b5->maxy;
            								}
HXDLIN( 502)								_this13->maxy = node9;
            							}
HXDLIN( 502)							HX_VARI( int,x) = b3->height;
HXDLIN( 502)							HX_VARI( int,y) = g->height;
HXDLIN( 502)							int node10;
HXDLIN( 502)							if ((x > y)) {
HXLINE( 502)								node10 = x;
            							}
            							else {
HXLINE( 502)								node10 = y;
            							}
HXDLIN( 502)							node->height = ((int)1 + node10);
HXDLIN( 502)							HX_VARI_NAME( int,x1,"x") = node->height;
HXDLIN( 502)							HX_VARI_NAME( int,y1,"y") = f->height;
HXDLIN( 502)							int node11;
HXDLIN( 502)							if ((x1 > y1)) {
HXLINE( 502)								node11 = x1;
            							}
            							else {
HXLINE( 502)								node11 = y1;
            							}
HXDLIN( 502)							c->height = ((int)1 + node11);
            						}
            						else {
HXLINE( 502)							c->child2 = g;
HXDLIN( 502)							node->child2 = f;
HXDLIN( 502)							f->parent = node;
HXDLIN( 502)							{
HXLINE( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this14,"_this") = node->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a3,"a") = b3->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b6,"b") = f->aabb;
HXDLIN( 502)								Float node12;
HXDLIN( 502)								if ((a3->minx < b6->minx)) {
HXLINE( 502)									node12 = a3->minx;
            								}
            								else {
HXLINE( 502)									node12 = b6->minx;
            								}
HXDLIN( 502)								_this14->minx = node12;
HXDLIN( 502)								Float node13;
HXDLIN( 502)								if ((a3->miny < b6->miny)) {
HXLINE( 502)									node13 = a3->miny;
            								}
            								else {
HXLINE( 502)									node13 = b6->miny;
            								}
HXDLIN( 502)								_this14->miny = node13;
HXDLIN( 502)								Float node14;
HXDLIN( 502)								if ((a3->maxx > b6->maxx)) {
HXLINE( 502)									node14 = a3->maxx;
            								}
            								else {
HXLINE( 502)									node14 = b6->maxx;
            								}
HXDLIN( 502)								_this14->maxx = node14;
HXDLIN( 502)								Float node15;
HXDLIN( 502)								if ((a3->maxy > b6->maxy)) {
HXLINE( 502)									node15 = a3->maxy;
            								}
            								else {
HXLINE( 502)									node15 = b6->maxy;
            								}
HXDLIN( 502)								_this14->maxy = node15;
            							}
HXDLIN( 502)							{
HXLINE( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this15,"_this") = c->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a4,"a") = node->aabb;
HXDLIN( 502)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b7,"b") = g->aabb;
HXDLIN( 502)								Float node16;
HXDLIN( 502)								if ((a4->minx < b7->minx)) {
HXLINE( 502)									node16 = a4->minx;
            								}
            								else {
HXLINE( 502)									node16 = b7->minx;
            								}
HXDLIN( 502)								_this15->minx = node16;
HXDLIN( 502)								Float node17;
HXDLIN( 502)								if ((a4->miny < b7->miny)) {
HXLINE( 502)									node17 = a4->miny;
            								}
            								else {
HXLINE( 502)									node17 = b7->miny;
            								}
HXDLIN( 502)								_this15->miny = node17;
HXDLIN( 502)								Float node18;
HXDLIN( 502)								if ((a4->maxx > b7->maxx)) {
HXLINE( 502)									node18 = a4->maxx;
            								}
            								else {
HXLINE( 502)									node18 = b7->maxx;
            								}
HXDLIN( 502)								_this15->maxx = node18;
HXDLIN( 502)								Float node19;
HXDLIN( 502)								if ((a4->maxy > b7->maxy)) {
HXLINE( 502)									node19 = a4->maxy;
            								}
            								else {
HXLINE( 502)									node19 = b7->maxy;
            								}
HXDLIN( 502)								_this15->maxy = node19;
            							}
HXDLIN( 502)							HX_VARI_NAME( int,x2,"x") = b3->height;
HXDLIN( 502)							HX_VARI_NAME( int,y2,"y") = f->height;
HXDLIN( 502)							int node20;
HXDLIN( 502)							if ((x2 > y2)) {
HXLINE( 502)								node20 = x2;
            							}
            							else {
HXLINE( 502)								node20 = y2;
            							}
HXDLIN( 502)							node->height = ((int)1 + node20);
HXDLIN( 502)							HX_VARI_NAME( int,x3,"x") = node->height;
HXDLIN( 502)							HX_VARI_NAME( int,y3,"y") = g->height;
HXDLIN( 502)							int node21;
HXDLIN( 502)							if ((x3 > y3)) {
HXLINE( 502)								node21 = x3;
            							}
            							else {
HXLINE( 502)								node21 = y3;
            							}
HXDLIN( 502)							c->height = ((int)1 + node21);
            						}
HXDLIN( 502)						node = c;
            					}
            					else {
HXLINE( 502)						if ((balance < (int)-1)) {
HXLINE( 502)							HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,f1,"f") = b3->child1;
HXDLIN( 502)							HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,g1,"g") = b3->child2;
HXDLIN( 502)							b3->child1 = node;
HXDLIN( 502)							b3->parent = node->parent;
HXDLIN( 502)							node->parent = b3;
HXDLIN( 502)							if (hx::IsNotNull( b3->parent )) {
HXLINE( 502)								if (hx::IsEq( b3->parent->child1,node )) {
HXLINE( 502)									b3->parent->child1 = b3;
            								}
            								else {
HXLINE( 502)									b3->parent->child2 = b3;
            								}
            							}
            							else {
HXLINE( 502)								this->root = b3;
            							}
HXDLIN( 502)							if ((f1->height > g1->height)) {
HXLINE( 502)								b3->child2 = f1;
HXDLIN( 502)								node->child1 = g1;
HXDLIN( 502)								g1->parent = node;
HXDLIN( 502)								{
HXLINE( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this16,"_this") = node->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a5,"a") = c->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b8,"b") = g1->aabb;
HXDLIN( 502)									Float node22;
HXDLIN( 502)									if ((a5->minx < b8->minx)) {
HXLINE( 502)										node22 = a5->minx;
            									}
            									else {
HXLINE( 502)										node22 = b8->minx;
            									}
HXDLIN( 502)									_this16->minx = node22;
HXDLIN( 502)									Float node23;
HXDLIN( 502)									if ((a5->miny < b8->miny)) {
HXLINE( 502)										node23 = a5->miny;
            									}
            									else {
HXLINE( 502)										node23 = b8->miny;
            									}
HXDLIN( 502)									_this16->miny = node23;
HXDLIN( 502)									Float node24;
HXDLIN( 502)									if ((a5->maxx > b8->maxx)) {
HXLINE( 502)										node24 = a5->maxx;
            									}
            									else {
HXLINE( 502)										node24 = b8->maxx;
            									}
HXDLIN( 502)									_this16->maxx = node24;
HXDLIN( 502)									Float node25;
HXDLIN( 502)									if ((a5->maxy > b8->maxy)) {
HXLINE( 502)										node25 = a5->maxy;
            									}
            									else {
HXLINE( 502)										node25 = b8->maxy;
            									}
HXDLIN( 502)									_this16->maxy = node25;
            								}
HXDLIN( 502)								{
HXLINE( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this17,"_this") = b3->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a6,"a") = node->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b9,"b") = f1->aabb;
HXDLIN( 502)									Float node26;
HXDLIN( 502)									if ((a6->minx < b9->minx)) {
HXLINE( 502)										node26 = a6->minx;
            									}
            									else {
HXLINE( 502)										node26 = b9->minx;
            									}
HXDLIN( 502)									_this17->minx = node26;
HXDLIN( 502)									Float node27;
HXDLIN( 502)									if ((a6->miny < b9->miny)) {
HXLINE( 502)										node27 = a6->miny;
            									}
            									else {
HXLINE( 502)										node27 = b9->miny;
            									}
HXDLIN( 502)									_this17->miny = node27;
HXDLIN( 502)									Float node28;
HXDLIN( 502)									if ((a6->maxx > b9->maxx)) {
HXLINE( 502)										node28 = a6->maxx;
            									}
            									else {
HXLINE( 502)										node28 = b9->maxx;
            									}
HXDLIN( 502)									_this17->maxx = node28;
HXDLIN( 502)									Float node29;
HXDLIN( 502)									if ((a6->maxy > b9->maxy)) {
HXLINE( 502)										node29 = a6->maxy;
            									}
            									else {
HXLINE( 502)										node29 = b9->maxy;
            									}
HXDLIN( 502)									_this17->maxy = node29;
            								}
HXDLIN( 502)								HX_VARI_NAME( int,x4,"x") = c->height;
HXDLIN( 502)								HX_VARI_NAME( int,y4,"y") = g1->height;
HXDLIN( 502)								int node30;
HXDLIN( 502)								if ((x4 > y4)) {
HXLINE( 502)									node30 = x4;
            								}
            								else {
HXLINE( 502)									node30 = y4;
            								}
HXDLIN( 502)								node->height = ((int)1 + node30);
HXDLIN( 502)								HX_VARI_NAME( int,x5,"x") = node->height;
HXDLIN( 502)								HX_VARI_NAME( int,y5,"y") = f1->height;
HXDLIN( 502)								int node31;
HXDLIN( 502)								if ((x5 > y5)) {
HXLINE( 502)									node31 = x5;
            								}
            								else {
HXLINE( 502)									node31 = y5;
            								}
HXDLIN( 502)								b3->height = ((int)1 + node31);
            							}
            							else {
HXLINE( 502)								b3->child2 = g1;
HXDLIN( 502)								node->child1 = f1;
HXDLIN( 502)								f1->parent = node;
HXDLIN( 502)								{
HXLINE( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this18,"_this") = node->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a7,"a") = c->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b10,"b") = f1->aabb;
HXDLIN( 502)									Float node32;
HXDLIN( 502)									if ((a7->minx < b10->minx)) {
HXLINE( 502)										node32 = a7->minx;
            									}
            									else {
HXLINE( 502)										node32 = b10->minx;
            									}
HXDLIN( 502)									_this18->minx = node32;
HXDLIN( 502)									Float node33;
HXDLIN( 502)									if ((a7->miny < b10->miny)) {
HXLINE( 502)										node33 = a7->miny;
            									}
            									else {
HXLINE( 502)										node33 = b10->miny;
            									}
HXDLIN( 502)									_this18->miny = node33;
HXDLIN( 502)									Float node34;
HXDLIN( 502)									if ((a7->maxx > b10->maxx)) {
HXLINE( 502)										node34 = a7->maxx;
            									}
            									else {
HXLINE( 502)										node34 = b10->maxx;
            									}
HXDLIN( 502)									_this18->maxx = node34;
HXDLIN( 502)									Float node35;
HXDLIN( 502)									if ((a7->maxy > b10->maxy)) {
HXLINE( 502)										node35 = a7->maxy;
            									}
            									else {
HXLINE( 502)										node35 = b10->maxy;
            									}
HXDLIN( 502)									_this18->maxy = node35;
            								}
HXDLIN( 502)								{
HXLINE( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this19,"_this") = b3->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a8,"a") = node->aabb;
HXDLIN( 502)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b11,"b") = g1->aabb;
HXDLIN( 502)									Float node36;
HXDLIN( 502)									if ((a8->minx < b11->minx)) {
HXLINE( 502)										node36 = a8->minx;
            									}
            									else {
HXLINE( 502)										node36 = b11->minx;
            									}
HXDLIN( 502)									_this19->minx = node36;
HXDLIN( 502)									Float node37;
HXDLIN( 502)									if ((a8->miny < b11->miny)) {
HXLINE( 502)										node37 = a8->miny;
            									}
            									else {
HXLINE( 502)										node37 = b11->miny;
            									}
HXDLIN( 502)									_this19->miny = node37;
HXDLIN( 502)									Float node38;
HXDLIN( 502)									if ((a8->maxx > b11->maxx)) {
HXLINE( 502)										node38 = a8->maxx;
            									}
            									else {
HXLINE( 502)										node38 = b11->maxx;
            									}
HXDLIN( 502)									_this19->maxx = node38;
HXDLIN( 502)									Float node39;
HXDLIN( 502)									if ((a8->maxy > b11->maxy)) {
HXLINE( 502)										node39 = a8->maxy;
            									}
            									else {
HXLINE( 502)										node39 = b11->maxy;
            									}
HXDLIN( 502)									_this19->maxy = node39;
            								}
HXDLIN( 502)								HX_VARI_NAME( int,x6,"x") = c->height;
HXDLIN( 502)								HX_VARI_NAME( int,y6,"y") = f1->height;
HXDLIN( 502)								int node40;
HXDLIN( 502)								if ((x6 > y6)) {
HXLINE( 502)									node40 = x6;
            								}
            								else {
HXLINE( 502)									node40 = y6;
            								}
HXDLIN( 502)								node->height = ((int)1 + node40);
HXDLIN( 502)								HX_VARI_NAME( int,x7,"x") = node->height;
HXDLIN( 502)								HX_VARI_NAME( int,y7,"y") = g1->height;
HXDLIN( 502)								int node41;
HXDLIN( 502)								if ((x7 > y7)) {
HXLINE( 502)									node41 = x7;
            								}
            								else {
HXLINE( 502)									node41 = y7;
            								}
HXDLIN( 502)								b3->height = ((int)1 + node41);
            							}
HXDLIN( 502)							node = b3;
            						}
            						else {
HXLINE( 502)							node = node;
            						}
            					}
            				}
HXLINE( 503)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,child11,"child1") = node->child1;
HXLINE( 504)				HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,child21,"child2") = node->child2;
HXLINE( 506)				HX_VARI_NAME( int,x8,"x") = child11->height;
HXLINE( 507)				HX_VARI_NAME( int,y8,"y") = child21->height;
HXLINE( 505)				int _hx_tmp17;
HXLINE( 508)				if ((x8 > y8)) {
HXLINE( 505)					_hx_tmp17 = x8;
            				}
            				else {
HXLINE( 505)					_hx_tmp17 = y8;
            				}
HXDLIN( 505)				node->height = ((int)1 + _hx_tmp17);
HXLINE( 510)				{
HXLINE( 510)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this20,"_this") = node->aabb;
HXDLIN( 510)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a9,"a") = child11->aabb;
HXDLIN( 510)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b12,"b") = child21->aabb;
HXDLIN( 510)					Float _hx_tmp18;
HXDLIN( 510)					if ((a9->minx < b12->minx)) {
HXLINE( 510)						_hx_tmp18 = a9->minx;
            					}
            					else {
HXLINE( 510)						_hx_tmp18 = b12->minx;
            					}
HXDLIN( 510)					_this20->minx = _hx_tmp18;
HXDLIN( 510)					Float _hx_tmp19;
HXDLIN( 510)					if ((a9->miny < b12->miny)) {
HXLINE( 510)						_hx_tmp19 = a9->miny;
            					}
            					else {
HXLINE( 510)						_hx_tmp19 = b12->miny;
            					}
HXDLIN( 510)					_this20->miny = _hx_tmp19;
HXDLIN( 510)					Float _hx_tmp20;
HXDLIN( 510)					if ((a9->maxx > b12->maxx)) {
HXLINE( 510)						_hx_tmp20 = a9->maxx;
            					}
            					else {
HXLINE( 510)						_hx_tmp20 = b12->maxx;
            					}
HXDLIN( 510)					_this20->maxx = _hx_tmp20;
HXDLIN( 510)					Float _hx_tmp21;
HXDLIN( 510)					if ((a9->maxy > b12->maxy)) {
HXLINE( 510)						_hx_tmp21 = a9->maxy;
            					}
            					else {
HXLINE( 510)						_hx_tmp21 = b12->maxy;
            					}
HXDLIN( 510)					_this20->maxy = _hx_tmp21;
            				}
HXLINE( 511)				node = node->parent;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABBTree_obj,inlined_insertLeaf,(void))

void ZPP_AABBTree_obj::removeLeaf( ::zpp_nape::space::ZPP_AABBNode leaf){
            	HX_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_516_removeLeaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(leaf,"leaf")
HXLINE( 516)		if (hx::IsEq( leaf,this->root )) {
HXLINE( 516)			this->root = null();
            		}
            		else {
HXLINE( 516)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,parent) = leaf->parent;
HXDLIN( 516)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,gparent) = parent->parent;
HXDLIN( 516)			HX_VAR(  ::zpp_nape::space::ZPP_AABBNode,sibling);
HXDLIN( 516)			if (hx::IsEq( parent->child1,leaf )) {
HXLINE( 516)				sibling = parent->child2;
            			}
            			else {
HXLINE( 516)				sibling = parent->child1;
            			}
HXDLIN( 516)			if (hx::IsNotNull( gparent )) {
HXLINE( 516)				if (hx::IsEq( gparent->child1,parent )) {
HXLINE( 516)					gparent->child1 = sibling;
            				}
            				else {
HXLINE( 516)					gparent->child2 = sibling;
            				}
HXDLIN( 516)				sibling->parent = gparent;
HXDLIN( 516)				{
HXLINE( 516)					{
HXLINE( 516)						parent->height = (int)-1;
HXDLIN( 516)						{
HXLINE( 516)							HX_VARI(  ::zpp_nape::geom::ZPP_AABB,o) = parent->aabb;
HXDLIN( 516)							{
HXLINE( 516)								if (hx::IsNotNull( o->outer )) {
HXLINE( 516)									o->outer->zpp_inner = null();
HXDLIN( 516)									o->outer = null();
            								}
HXDLIN( 516)								o->wrap_min = (o->wrap_max = null());
HXDLIN( 516)								o->_invalidate = null();
HXDLIN( 516)								o->_validate = null();
            							}
HXDLIN( 516)							o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 516)							::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
            						}
HXDLIN( 516)						parent->child1 = (parent->child2 = (parent->parent = null()));
HXDLIN( 516)						parent->next = null();
HXDLIN( 516)						parent->snext = null();
HXDLIN( 516)						parent->mnext = null();
            					}
HXDLIN( 516)					parent->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN( 516)					::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = parent;
            				}
HXDLIN( 516)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,node) = gparent;
HXDLIN( 516)				while(hx::IsNotNull( node )){
HXLINE( 516)					bool node1;
HXDLIN( 516)					if (hx::IsNotNull( node->child1 )) {
HXLINE( 516)						node1 = (node->height < (int)2);
            					}
            					else {
HXLINE( 516)						node1 = true;
            					}
HXDLIN( 516)					if (node1) {
HXLINE( 516)						node = node;
            					}
            					else {
HXLINE( 516)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,b) = node->child1;
HXDLIN( 516)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,c) = node->child2;
HXDLIN( 516)						HX_VARI( int,balance) = (c->height - b->height);
HXDLIN( 516)						if ((balance > (int)1)) {
HXLINE( 516)							HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,f) = c->child1;
HXDLIN( 516)							HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,g) = c->child2;
HXDLIN( 516)							c->child1 = node;
HXDLIN( 516)							c->parent = node->parent;
HXDLIN( 516)							node->parent = c;
HXDLIN( 516)							if (hx::IsNotNull( c->parent )) {
HXLINE( 516)								if (hx::IsEq( c->parent->child1,node )) {
HXLINE( 516)									c->parent->child1 = c;
            								}
            								else {
HXLINE( 516)									c->parent->child2 = c;
            								}
            							}
            							else {
HXLINE( 516)								this->root = c;
            							}
HXDLIN( 516)							if ((f->height > g->height)) {
HXLINE( 516)								c->child2 = f;
HXDLIN( 516)								node->child2 = g;
HXDLIN( 516)								g->parent = node;
HXDLIN( 516)								{
HXLINE( 516)									HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = node->aabb;
HXDLIN( 516)									HX_VARI(  ::zpp_nape::geom::ZPP_AABB,a) = b->aabb;
HXDLIN( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b1,"b") = g->aabb;
HXDLIN( 516)									Float node2;
HXDLIN( 516)									if ((a->minx < b1->minx)) {
HXLINE( 516)										node2 = a->minx;
            									}
            									else {
HXLINE( 516)										node2 = b1->minx;
            									}
HXDLIN( 516)									_this->minx = node2;
HXDLIN( 516)									Float node3;
HXDLIN( 516)									if ((a->miny < b1->miny)) {
HXLINE( 516)										node3 = a->miny;
            									}
            									else {
HXLINE( 516)										node3 = b1->miny;
            									}
HXDLIN( 516)									_this->miny = node3;
HXDLIN( 516)									Float node4;
HXDLIN( 516)									if ((a->maxx > b1->maxx)) {
HXLINE( 516)										node4 = a->maxx;
            									}
            									else {
HXLINE( 516)										node4 = b1->maxx;
            									}
HXDLIN( 516)									_this->maxx = node4;
HXDLIN( 516)									Float node5;
HXDLIN( 516)									if ((a->maxy > b1->maxy)) {
HXLINE( 516)										node5 = a->maxy;
            									}
            									else {
HXLINE( 516)										node5 = b1->maxy;
            									}
HXDLIN( 516)									_this->maxy = node5;
            								}
HXDLIN( 516)								{
HXLINE( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = c->aabb;
HXDLIN( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a1,"a") = node->aabb;
HXDLIN( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b2,"b") = f->aabb;
HXDLIN( 516)									Float node6;
HXDLIN( 516)									if ((a1->minx < b2->minx)) {
HXLINE( 516)										node6 = a1->minx;
            									}
            									else {
HXLINE( 516)										node6 = b2->minx;
            									}
HXDLIN( 516)									_this1->minx = node6;
HXDLIN( 516)									Float node7;
HXDLIN( 516)									if ((a1->miny < b2->miny)) {
HXLINE( 516)										node7 = a1->miny;
            									}
            									else {
HXLINE( 516)										node7 = b2->miny;
            									}
HXDLIN( 516)									_this1->miny = node7;
HXDLIN( 516)									Float node8;
HXDLIN( 516)									if ((a1->maxx > b2->maxx)) {
HXLINE( 516)										node8 = a1->maxx;
            									}
            									else {
HXLINE( 516)										node8 = b2->maxx;
            									}
HXDLIN( 516)									_this1->maxx = node8;
HXDLIN( 516)									Float node9;
HXDLIN( 516)									if ((a1->maxy > b2->maxy)) {
HXLINE( 516)										node9 = a1->maxy;
            									}
            									else {
HXLINE( 516)										node9 = b2->maxy;
            									}
HXDLIN( 516)									_this1->maxy = node9;
            								}
HXDLIN( 516)								HX_VARI( int,x) = b->height;
HXDLIN( 516)								HX_VARI( int,y) = g->height;
HXDLIN( 516)								int node10;
HXDLIN( 516)								if ((x > y)) {
HXLINE( 516)									node10 = x;
            								}
            								else {
HXLINE( 516)									node10 = y;
            								}
HXDLIN( 516)								node->height = ((int)1 + node10);
HXDLIN( 516)								HX_VARI_NAME( int,x1,"x") = node->height;
HXDLIN( 516)								HX_VARI_NAME( int,y1,"y") = f->height;
HXDLIN( 516)								int node11;
HXDLIN( 516)								if ((x1 > y1)) {
HXLINE( 516)									node11 = x1;
            								}
            								else {
HXLINE( 516)									node11 = y1;
            								}
HXDLIN( 516)								c->height = ((int)1 + node11);
            							}
            							else {
HXLINE( 516)								c->child2 = g;
HXDLIN( 516)								node->child2 = f;
HXDLIN( 516)								f->parent = node;
HXDLIN( 516)								{
HXLINE( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = node->aabb;
HXDLIN( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a2,"a") = b->aabb;
HXDLIN( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b3,"b") = f->aabb;
HXDLIN( 516)									Float node12;
HXDLIN( 516)									if ((a2->minx < b3->minx)) {
HXLINE( 516)										node12 = a2->minx;
            									}
            									else {
HXLINE( 516)										node12 = b3->minx;
            									}
HXDLIN( 516)									_this2->minx = node12;
HXDLIN( 516)									Float node13;
HXDLIN( 516)									if ((a2->miny < b3->miny)) {
HXLINE( 516)										node13 = a2->miny;
            									}
            									else {
HXLINE( 516)										node13 = b3->miny;
            									}
HXDLIN( 516)									_this2->miny = node13;
HXDLIN( 516)									Float node14;
HXDLIN( 516)									if ((a2->maxx > b3->maxx)) {
HXLINE( 516)										node14 = a2->maxx;
            									}
            									else {
HXLINE( 516)										node14 = b3->maxx;
            									}
HXDLIN( 516)									_this2->maxx = node14;
HXDLIN( 516)									Float node15;
HXDLIN( 516)									if ((a2->maxy > b3->maxy)) {
HXLINE( 516)										node15 = a2->maxy;
            									}
            									else {
HXLINE( 516)										node15 = b3->maxy;
            									}
HXDLIN( 516)									_this2->maxy = node15;
            								}
HXDLIN( 516)								{
HXLINE( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = c->aabb;
HXDLIN( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a3,"a") = node->aabb;
HXDLIN( 516)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b4,"b") = g->aabb;
HXDLIN( 516)									Float node16;
HXDLIN( 516)									if ((a3->minx < b4->minx)) {
HXLINE( 516)										node16 = a3->minx;
            									}
            									else {
HXLINE( 516)										node16 = b4->minx;
            									}
HXDLIN( 516)									_this3->minx = node16;
HXDLIN( 516)									Float node17;
HXDLIN( 516)									if ((a3->miny < b4->miny)) {
HXLINE( 516)										node17 = a3->miny;
            									}
            									else {
HXLINE( 516)										node17 = b4->miny;
            									}
HXDLIN( 516)									_this3->miny = node17;
HXDLIN( 516)									Float node18;
HXDLIN( 516)									if ((a3->maxx > b4->maxx)) {
HXLINE( 516)										node18 = a3->maxx;
            									}
            									else {
HXLINE( 516)										node18 = b4->maxx;
            									}
HXDLIN( 516)									_this3->maxx = node18;
HXDLIN( 516)									Float node19;
HXDLIN( 516)									if ((a3->maxy > b4->maxy)) {
HXLINE( 516)										node19 = a3->maxy;
            									}
            									else {
HXLINE( 516)										node19 = b4->maxy;
            									}
HXDLIN( 516)									_this3->maxy = node19;
            								}
HXDLIN( 516)								HX_VARI_NAME( int,x2,"x") = b->height;
HXDLIN( 516)								HX_VARI_NAME( int,y2,"y") = f->height;
HXDLIN( 516)								int node20;
HXDLIN( 516)								if ((x2 > y2)) {
HXLINE( 516)									node20 = x2;
            								}
            								else {
HXLINE( 516)									node20 = y2;
            								}
HXDLIN( 516)								node->height = ((int)1 + node20);
HXDLIN( 516)								HX_VARI_NAME( int,x3,"x") = node->height;
HXDLIN( 516)								HX_VARI_NAME( int,y3,"y") = g->height;
HXDLIN( 516)								int node21;
HXDLIN( 516)								if ((x3 > y3)) {
HXLINE( 516)									node21 = x3;
            								}
            								else {
HXLINE( 516)									node21 = y3;
            								}
HXDLIN( 516)								c->height = ((int)1 + node21);
            							}
HXDLIN( 516)							node = c;
            						}
            						else {
HXLINE( 516)							if ((balance < (int)-1)) {
HXLINE( 516)								HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,f1,"f") = b->child1;
HXDLIN( 516)								HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,g1,"g") = b->child2;
HXDLIN( 516)								b->child1 = node;
HXDLIN( 516)								b->parent = node->parent;
HXDLIN( 516)								node->parent = b;
HXDLIN( 516)								if (hx::IsNotNull( b->parent )) {
HXLINE( 516)									if (hx::IsEq( b->parent->child1,node )) {
HXLINE( 516)										b->parent->child1 = b;
            									}
            									else {
HXLINE( 516)										b->parent->child2 = b;
            									}
            								}
            								else {
HXLINE( 516)									this->root = b;
            								}
HXDLIN( 516)								if ((f1->height > g1->height)) {
HXLINE( 516)									b->child2 = f1;
HXDLIN( 516)									node->child1 = g1;
HXDLIN( 516)									g1->parent = node;
HXDLIN( 516)									{
HXLINE( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = node->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a4,"a") = c->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b5,"b") = g1->aabb;
HXDLIN( 516)										Float node22;
HXDLIN( 516)										if ((a4->minx < b5->minx)) {
HXLINE( 516)											node22 = a4->minx;
            										}
            										else {
HXLINE( 516)											node22 = b5->minx;
            										}
HXDLIN( 516)										_this4->minx = node22;
HXDLIN( 516)										Float node23;
HXDLIN( 516)										if ((a4->miny < b5->miny)) {
HXLINE( 516)											node23 = a4->miny;
            										}
            										else {
HXLINE( 516)											node23 = b5->miny;
            										}
HXDLIN( 516)										_this4->miny = node23;
HXDLIN( 516)										Float node24;
HXDLIN( 516)										if ((a4->maxx > b5->maxx)) {
HXLINE( 516)											node24 = a4->maxx;
            										}
            										else {
HXLINE( 516)											node24 = b5->maxx;
            										}
HXDLIN( 516)										_this4->maxx = node24;
HXDLIN( 516)										Float node25;
HXDLIN( 516)										if ((a4->maxy > b5->maxy)) {
HXLINE( 516)											node25 = a4->maxy;
            										}
            										else {
HXLINE( 516)											node25 = b5->maxy;
            										}
HXDLIN( 516)										_this4->maxy = node25;
            									}
HXDLIN( 516)									{
HXLINE( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = b->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a5,"a") = node->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b6,"b") = f1->aabb;
HXDLIN( 516)										Float node26;
HXDLIN( 516)										if ((a5->minx < b6->minx)) {
HXLINE( 516)											node26 = a5->minx;
            										}
            										else {
HXLINE( 516)											node26 = b6->minx;
            										}
HXDLIN( 516)										_this5->minx = node26;
HXDLIN( 516)										Float node27;
HXDLIN( 516)										if ((a5->miny < b6->miny)) {
HXLINE( 516)											node27 = a5->miny;
            										}
            										else {
HXLINE( 516)											node27 = b6->miny;
            										}
HXDLIN( 516)										_this5->miny = node27;
HXDLIN( 516)										Float node28;
HXDLIN( 516)										if ((a5->maxx > b6->maxx)) {
HXLINE( 516)											node28 = a5->maxx;
            										}
            										else {
HXLINE( 516)											node28 = b6->maxx;
            										}
HXDLIN( 516)										_this5->maxx = node28;
HXDLIN( 516)										Float node29;
HXDLIN( 516)										if ((a5->maxy > b6->maxy)) {
HXLINE( 516)											node29 = a5->maxy;
            										}
            										else {
HXLINE( 516)											node29 = b6->maxy;
            										}
HXDLIN( 516)										_this5->maxy = node29;
            									}
HXDLIN( 516)									HX_VARI_NAME( int,x4,"x") = c->height;
HXDLIN( 516)									HX_VARI_NAME( int,y4,"y") = g1->height;
HXDLIN( 516)									int node30;
HXDLIN( 516)									if ((x4 > y4)) {
HXLINE( 516)										node30 = x4;
            									}
            									else {
HXLINE( 516)										node30 = y4;
            									}
HXDLIN( 516)									node->height = ((int)1 + node30);
HXDLIN( 516)									HX_VARI_NAME( int,x5,"x") = node->height;
HXDLIN( 516)									HX_VARI_NAME( int,y5,"y") = f1->height;
HXDLIN( 516)									int node31;
HXDLIN( 516)									if ((x5 > y5)) {
HXLINE( 516)										node31 = x5;
            									}
            									else {
HXLINE( 516)										node31 = y5;
            									}
HXDLIN( 516)									b->height = ((int)1 + node31);
            								}
            								else {
HXLINE( 516)									b->child2 = g1;
HXDLIN( 516)									node->child1 = f1;
HXDLIN( 516)									f1->parent = node;
HXDLIN( 516)									{
HXLINE( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = node->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a6,"a") = c->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b7,"b") = f1->aabb;
HXDLIN( 516)										Float node32;
HXDLIN( 516)										if ((a6->minx < b7->minx)) {
HXLINE( 516)											node32 = a6->minx;
            										}
            										else {
HXLINE( 516)											node32 = b7->minx;
            										}
HXDLIN( 516)										_this6->minx = node32;
HXDLIN( 516)										Float node33;
HXDLIN( 516)										if ((a6->miny < b7->miny)) {
HXLINE( 516)											node33 = a6->miny;
            										}
            										else {
HXLINE( 516)											node33 = b7->miny;
            										}
HXDLIN( 516)										_this6->miny = node33;
HXDLIN( 516)										Float node34;
HXDLIN( 516)										if ((a6->maxx > b7->maxx)) {
HXLINE( 516)											node34 = a6->maxx;
            										}
            										else {
HXLINE( 516)											node34 = b7->maxx;
            										}
HXDLIN( 516)										_this6->maxx = node34;
HXDLIN( 516)										Float node35;
HXDLIN( 516)										if ((a6->maxy > b7->maxy)) {
HXLINE( 516)											node35 = a6->maxy;
            										}
            										else {
HXLINE( 516)											node35 = b7->maxy;
            										}
HXDLIN( 516)										_this6->maxy = node35;
            									}
HXDLIN( 516)									{
HXLINE( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this7,"_this") = b->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a7,"a") = node->aabb;
HXDLIN( 516)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b8,"b") = g1->aabb;
HXDLIN( 516)										Float node36;
HXDLIN( 516)										if ((a7->minx < b8->minx)) {
HXLINE( 516)											node36 = a7->minx;
            										}
            										else {
HXLINE( 516)											node36 = b8->minx;
            										}
HXDLIN( 516)										_this7->minx = node36;
HXDLIN( 516)										Float node37;
HXDLIN( 516)										if ((a7->miny < b8->miny)) {
HXLINE( 516)											node37 = a7->miny;
            										}
            										else {
HXLINE( 516)											node37 = b8->miny;
            										}
HXDLIN( 516)										_this7->miny = node37;
HXDLIN( 516)										Float node38;
HXDLIN( 516)										if ((a7->maxx > b8->maxx)) {
HXLINE( 516)											node38 = a7->maxx;
            										}
            										else {
HXLINE( 516)											node38 = b8->maxx;
            										}
HXDLIN( 516)										_this7->maxx = node38;
HXDLIN( 516)										Float node39;
HXDLIN( 516)										if ((a7->maxy > b8->maxy)) {
HXLINE( 516)											node39 = a7->maxy;
            										}
            										else {
HXLINE( 516)											node39 = b8->maxy;
            										}
HXDLIN( 516)										_this7->maxy = node39;
            									}
HXDLIN( 516)									HX_VARI_NAME( int,x6,"x") = c->height;
HXDLIN( 516)									HX_VARI_NAME( int,y6,"y") = f1->height;
HXDLIN( 516)									int node40;
HXDLIN( 516)									if ((x6 > y6)) {
HXLINE( 516)										node40 = x6;
            									}
            									else {
HXLINE( 516)										node40 = y6;
            									}
HXDLIN( 516)									node->height = ((int)1 + node40);
HXDLIN( 516)									HX_VARI_NAME( int,x7,"x") = node->height;
HXDLIN( 516)									HX_VARI_NAME( int,y7,"y") = g1->height;
HXDLIN( 516)									int node41;
HXDLIN( 516)									if ((x7 > y7)) {
HXLINE( 516)										node41 = x7;
            									}
            									else {
HXLINE( 516)										node41 = y7;
            									}
HXDLIN( 516)									b->height = ((int)1 + node41);
            								}
HXDLIN( 516)								node = b;
            							}
            							else {
HXLINE( 516)								node = node;
            							}
            						}
            					}
HXDLIN( 516)					HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child1) = node->child1;
HXDLIN( 516)					HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child2) = node->child2;
HXDLIN( 516)					{
HXLINE( 516)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this8,"_this") = node->aabb;
HXDLIN( 516)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a8,"a") = child1->aabb;
HXDLIN( 516)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b9,"b") = child2->aabb;
HXDLIN( 516)						Float _hx_tmp;
HXDLIN( 516)						if ((a8->minx < b9->minx)) {
HXLINE( 516)							_hx_tmp = a8->minx;
            						}
            						else {
HXLINE( 516)							_hx_tmp = b9->minx;
            						}
HXDLIN( 516)						_this8->minx = _hx_tmp;
HXDLIN( 516)						Float _hx_tmp1;
HXDLIN( 516)						if ((a8->miny < b9->miny)) {
HXLINE( 516)							_hx_tmp1 = a8->miny;
            						}
            						else {
HXLINE( 516)							_hx_tmp1 = b9->miny;
            						}
HXDLIN( 516)						_this8->miny = _hx_tmp1;
HXDLIN( 516)						Float _hx_tmp2;
HXDLIN( 516)						if ((a8->maxx > b9->maxx)) {
HXLINE( 516)							_hx_tmp2 = a8->maxx;
            						}
            						else {
HXLINE( 516)							_hx_tmp2 = b9->maxx;
            						}
HXDLIN( 516)						_this8->maxx = _hx_tmp2;
HXDLIN( 516)						Float _hx_tmp3;
HXDLIN( 516)						if ((a8->maxy > b9->maxy)) {
HXLINE( 516)							_hx_tmp3 = a8->maxy;
            						}
            						else {
HXLINE( 516)							_hx_tmp3 = b9->maxy;
            						}
HXDLIN( 516)						_this8->maxy = _hx_tmp3;
            					}
HXDLIN( 516)					HX_VARI_NAME( int,x8,"x") = child1->height;
HXDLIN( 516)					HX_VARI_NAME( int,y8,"y") = child2->height;
HXDLIN( 516)					int _hx_tmp4;
HXDLIN( 516)					if ((x8 > y8)) {
HXLINE( 516)						_hx_tmp4 = x8;
            					}
            					else {
HXLINE( 516)						_hx_tmp4 = y8;
            					}
HXDLIN( 516)					node->height = ((int)1 + _hx_tmp4);
HXDLIN( 516)					node = node->parent;
            				}
            			}
            			else {
HXLINE( 516)				this->root = sibling;
HXDLIN( 516)				sibling->parent = null();
HXDLIN( 516)				{
HXLINE( 516)					{
HXLINE( 516)						parent->height = (int)-1;
HXDLIN( 516)						{
HXLINE( 516)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,o1,"o") = parent->aabb;
HXDLIN( 516)							{
HXLINE( 516)								if (hx::IsNotNull( o1->outer )) {
HXLINE( 516)									o1->outer->zpp_inner = null();
HXDLIN( 516)									o1->outer = null();
            								}
HXDLIN( 516)								o1->wrap_min = (o1->wrap_max = null());
HXDLIN( 516)								o1->_invalidate = null();
HXDLIN( 516)								o1->_validate = null();
            							}
HXDLIN( 516)							o1->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 516)							::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o1;
            						}
HXDLIN( 516)						parent->child1 = (parent->child2 = (parent->parent = null()));
HXDLIN( 516)						parent->next = null();
HXDLIN( 516)						parent->snext = null();
HXDLIN( 516)						parent->mnext = null();
            					}
HXDLIN( 516)					parent->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXDLIN( 516)					::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = parent;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABBTree_obj,removeLeaf,(void))

void ZPP_AABBTree_obj::inlined_removeLeaf( ::zpp_nape::space::ZPP_AABBNode leaf){
            	HX_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_521_inlined_removeLeaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(leaf,"leaf")
HXLINE( 521)		if (hx::IsEq( leaf,this->root )) {
HXLINE( 522)			this->root = null();
HXLINE( 523)			return;
            		}
            		else {
HXLINE( 526)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,parent) = leaf->parent;
HXLINE( 527)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,gparent) = parent->parent;
HXLINE( 528)			HX_VAR(  ::zpp_nape::space::ZPP_AABBNode,sibling);
HXDLIN( 528)			if (hx::IsEq( parent->child1,leaf )) {
HXLINE( 528)				sibling = parent->child2;
            			}
            			else {
HXLINE( 528)				sibling = parent->child1;
            			}
HXLINE( 529)			if (hx::IsNotNull( gparent )) {
HXLINE( 530)				if (hx::IsEq( gparent->child1,parent )) {
HXLINE( 530)					gparent->child1 = sibling;
            				}
            				else {
HXLINE( 531)					gparent->child2 = sibling;
            				}
HXLINE( 532)				sibling->parent = gparent;
HXLINE( 533)				{
HXLINE( 543)					{
HXLINE( 543)						parent->height = (int)-1;
HXDLIN( 543)						{
HXLINE( 543)							HX_VARI(  ::zpp_nape::geom::ZPP_AABB,o) = parent->aabb;
HXDLIN( 543)							{
HXLINE( 543)								if (hx::IsNotNull( o->outer )) {
HXLINE( 543)									o->outer->zpp_inner = null();
HXDLIN( 543)									o->outer = null();
            								}
HXDLIN( 543)								o->wrap_min = (o->wrap_max = null());
HXDLIN( 543)								o->_invalidate = null();
HXDLIN( 543)								o->_validate = null();
            							}
HXDLIN( 543)							o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 543)							::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
            						}
HXDLIN( 543)						parent->child1 = (parent->child2 = (parent->parent = null()));
HXDLIN( 543)						parent->next = null();
HXDLIN( 543)						parent->snext = null();
HXDLIN( 543)						parent->mnext = null();
            					}
HXLINE( 544)					parent->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXLINE( 545)					::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = parent;
            				}
HXLINE( 550)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,node) = gparent;
HXLINE( 551)				while(hx::IsNotNull( node )){
HXLINE( 552)					bool node1;
HXDLIN( 552)					if (hx::IsNotNull( node->child1 )) {
HXLINE( 552)						node1 = (node->height < (int)2);
            					}
            					else {
HXLINE( 552)						node1 = true;
            					}
HXDLIN( 552)					if (node1) {
HXLINE( 552)						node = node;
            					}
            					else {
HXLINE( 552)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,b) = node->child1;
HXDLIN( 552)						HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,c) = node->child2;
HXDLIN( 552)						HX_VARI( int,balance) = (c->height - b->height);
HXDLIN( 552)						if ((balance > (int)1)) {
HXLINE( 552)							HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,f) = c->child1;
HXDLIN( 552)							HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,g) = c->child2;
HXDLIN( 552)							c->child1 = node;
HXDLIN( 552)							c->parent = node->parent;
HXDLIN( 552)							node->parent = c;
HXDLIN( 552)							if (hx::IsNotNull( c->parent )) {
HXLINE( 552)								if (hx::IsEq( c->parent->child1,node )) {
HXLINE( 552)									c->parent->child1 = c;
            								}
            								else {
HXLINE( 552)									c->parent->child2 = c;
            								}
            							}
            							else {
HXLINE( 552)								this->root = c;
            							}
HXDLIN( 552)							if ((f->height > g->height)) {
HXLINE( 552)								c->child2 = f;
HXDLIN( 552)								node->child2 = g;
HXDLIN( 552)								g->parent = node;
HXDLIN( 552)								{
HXLINE( 552)									HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = node->aabb;
HXDLIN( 552)									HX_VARI(  ::zpp_nape::geom::ZPP_AABB,a) = b->aabb;
HXDLIN( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b1,"b") = g->aabb;
HXDLIN( 552)									Float node2;
HXDLIN( 552)									if ((a->minx < b1->minx)) {
HXLINE( 552)										node2 = a->minx;
            									}
            									else {
HXLINE( 552)										node2 = b1->minx;
            									}
HXDLIN( 552)									_this->minx = node2;
HXDLIN( 552)									Float node3;
HXDLIN( 552)									if ((a->miny < b1->miny)) {
HXLINE( 552)										node3 = a->miny;
            									}
            									else {
HXLINE( 552)										node3 = b1->miny;
            									}
HXDLIN( 552)									_this->miny = node3;
HXDLIN( 552)									Float node4;
HXDLIN( 552)									if ((a->maxx > b1->maxx)) {
HXLINE( 552)										node4 = a->maxx;
            									}
            									else {
HXLINE( 552)										node4 = b1->maxx;
            									}
HXDLIN( 552)									_this->maxx = node4;
HXDLIN( 552)									Float node5;
HXDLIN( 552)									if ((a->maxy > b1->maxy)) {
HXLINE( 552)										node5 = a->maxy;
            									}
            									else {
HXLINE( 552)										node5 = b1->maxy;
            									}
HXDLIN( 552)									_this->maxy = node5;
            								}
HXDLIN( 552)								{
HXLINE( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = c->aabb;
HXDLIN( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a1,"a") = node->aabb;
HXDLIN( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b2,"b") = f->aabb;
HXDLIN( 552)									Float node6;
HXDLIN( 552)									if ((a1->minx < b2->minx)) {
HXLINE( 552)										node6 = a1->minx;
            									}
            									else {
HXLINE( 552)										node6 = b2->minx;
            									}
HXDLIN( 552)									_this1->minx = node6;
HXDLIN( 552)									Float node7;
HXDLIN( 552)									if ((a1->miny < b2->miny)) {
HXLINE( 552)										node7 = a1->miny;
            									}
            									else {
HXLINE( 552)										node7 = b2->miny;
            									}
HXDLIN( 552)									_this1->miny = node7;
HXDLIN( 552)									Float node8;
HXDLIN( 552)									if ((a1->maxx > b2->maxx)) {
HXLINE( 552)										node8 = a1->maxx;
            									}
            									else {
HXLINE( 552)										node8 = b2->maxx;
            									}
HXDLIN( 552)									_this1->maxx = node8;
HXDLIN( 552)									Float node9;
HXDLIN( 552)									if ((a1->maxy > b2->maxy)) {
HXLINE( 552)										node9 = a1->maxy;
            									}
            									else {
HXLINE( 552)										node9 = b2->maxy;
            									}
HXDLIN( 552)									_this1->maxy = node9;
            								}
HXDLIN( 552)								HX_VARI( int,x) = b->height;
HXDLIN( 552)								HX_VARI( int,y) = g->height;
HXDLIN( 552)								int node10;
HXDLIN( 552)								if ((x > y)) {
HXLINE( 552)									node10 = x;
            								}
            								else {
HXLINE( 552)									node10 = y;
            								}
HXDLIN( 552)								node->height = ((int)1 + node10);
HXDLIN( 552)								HX_VARI_NAME( int,x1,"x") = node->height;
HXDLIN( 552)								HX_VARI_NAME( int,y1,"y") = f->height;
HXDLIN( 552)								int node11;
HXDLIN( 552)								if ((x1 > y1)) {
HXLINE( 552)									node11 = x1;
            								}
            								else {
HXLINE( 552)									node11 = y1;
            								}
HXDLIN( 552)								c->height = ((int)1 + node11);
            							}
            							else {
HXLINE( 552)								c->child2 = g;
HXDLIN( 552)								node->child2 = f;
HXDLIN( 552)								f->parent = node;
HXDLIN( 552)								{
HXLINE( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = node->aabb;
HXDLIN( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a2,"a") = b->aabb;
HXDLIN( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b3,"b") = f->aabb;
HXDLIN( 552)									Float node12;
HXDLIN( 552)									if ((a2->minx < b3->minx)) {
HXLINE( 552)										node12 = a2->minx;
            									}
            									else {
HXLINE( 552)										node12 = b3->minx;
            									}
HXDLIN( 552)									_this2->minx = node12;
HXDLIN( 552)									Float node13;
HXDLIN( 552)									if ((a2->miny < b3->miny)) {
HXLINE( 552)										node13 = a2->miny;
            									}
            									else {
HXLINE( 552)										node13 = b3->miny;
            									}
HXDLIN( 552)									_this2->miny = node13;
HXDLIN( 552)									Float node14;
HXDLIN( 552)									if ((a2->maxx > b3->maxx)) {
HXLINE( 552)										node14 = a2->maxx;
            									}
            									else {
HXLINE( 552)										node14 = b3->maxx;
            									}
HXDLIN( 552)									_this2->maxx = node14;
HXDLIN( 552)									Float node15;
HXDLIN( 552)									if ((a2->maxy > b3->maxy)) {
HXLINE( 552)										node15 = a2->maxy;
            									}
            									else {
HXLINE( 552)										node15 = b3->maxy;
            									}
HXDLIN( 552)									_this2->maxy = node15;
            								}
HXDLIN( 552)								{
HXLINE( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = c->aabb;
HXDLIN( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a3,"a") = node->aabb;
HXDLIN( 552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b4,"b") = g->aabb;
HXDLIN( 552)									Float node16;
HXDLIN( 552)									if ((a3->minx < b4->minx)) {
HXLINE( 552)										node16 = a3->minx;
            									}
            									else {
HXLINE( 552)										node16 = b4->minx;
            									}
HXDLIN( 552)									_this3->minx = node16;
HXDLIN( 552)									Float node17;
HXDLIN( 552)									if ((a3->miny < b4->miny)) {
HXLINE( 552)										node17 = a3->miny;
            									}
            									else {
HXLINE( 552)										node17 = b4->miny;
            									}
HXDLIN( 552)									_this3->miny = node17;
HXDLIN( 552)									Float node18;
HXDLIN( 552)									if ((a3->maxx > b4->maxx)) {
HXLINE( 552)										node18 = a3->maxx;
            									}
            									else {
HXLINE( 552)										node18 = b4->maxx;
            									}
HXDLIN( 552)									_this3->maxx = node18;
HXDLIN( 552)									Float node19;
HXDLIN( 552)									if ((a3->maxy > b4->maxy)) {
HXLINE( 552)										node19 = a3->maxy;
            									}
            									else {
HXLINE( 552)										node19 = b4->maxy;
            									}
HXDLIN( 552)									_this3->maxy = node19;
            								}
HXDLIN( 552)								HX_VARI_NAME( int,x2,"x") = b->height;
HXDLIN( 552)								HX_VARI_NAME( int,y2,"y") = f->height;
HXDLIN( 552)								int node20;
HXDLIN( 552)								if ((x2 > y2)) {
HXLINE( 552)									node20 = x2;
            								}
            								else {
HXLINE( 552)									node20 = y2;
            								}
HXDLIN( 552)								node->height = ((int)1 + node20);
HXDLIN( 552)								HX_VARI_NAME( int,x3,"x") = node->height;
HXDLIN( 552)								HX_VARI_NAME( int,y3,"y") = g->height;
HXDLIN( 552)								int node21;
HXDLIN( 552)								if ((x3 > y3)) {
HXLINE( 552)									node21 = x3;
            								}
            								else {
HXLINE( 552)									node21 = y3;
            								}
HXDLIN( 552)								c->height = ((int)1 + node21);
            							}
HXDLIN( 552)							node = c;
            						}
            						else {
HXLINE( 552)							if ((balance < (int)-1)) {
HXLINE( 552)								HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,f1,"f") = b->child1;
HXDLIN( 552)								HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,g1,"g") = b->child2;
HXDLIN( 552)								b->child1 = node;
HXDLIN( 552)								b->parent = node->parent;
HXDLIN( 552)								node->parent = b;
HXDLIN( 552)								if (hx::IsNotNull( b->parent )) {
HXLINE( 552)									if (hx::IsEq( b->parent->child1,node )) {
HXLINE( 552)										b->parent->child1 = b;
            									}
            									else {
HXLINE( 552)										b->parent->child2 = b;
            									}
            								}
            								else {
HXLINE( 552)									this->root = b;
            								}
HXDLIN( 552)								if ((f1->height > g1->height)) {
HXLINE( 552)									b->child2 = f1;
HXDLIN( 552)									node->child1 = g1;
HXDLIN( 552)									g1->parent = node;
HXDLIN( 552)									{
HXLINE( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = node->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a4,"a") = c->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b5,"b") = g1->aabb;
HXDLIN( 552)										Float node22;
HXDLIN( 552)										if ((a4->minx < b5->minx)) {
HXLINE( 552)											node22 = a4->minx;
            										}
            										else {
HXLINE( 552)											node22 = b5->minx;
            										}
HXDLIN( 552)										_this4->minx = node22;
HXDLIN( 552)										Float node23;
HXDLIN( 552)										if ((a4->miny < b5->miny)) {
HXLINE( 552)											node23 = a4->miny;
            										}
            										else {
HXLINE( 552)											node23 = b5->miny;
            										}
HXDLIN( 552)										_this4->miny = node23;
HXDLIN( 552)										Float node24;
HXDLIN( 552)										if ((a4->maxx > b5->maxx)) {
HXLINE( 552)											node24 = a4->maxx;
            										}
            										else {
HXLINE( 552)											node24 = b5->maxx;
            										}
HXDLIN( 552)										_this4->maxx = node24;
HXDLIN( 552)										Float node25;
HXDLIN( 552)										if ((a4->maxy > b5->maxy)) {
HXLINE( 552)											node25 = a4->maxy;
            										}
            										else {
HXLINE( 552)											node25 = b5->maxy;
            										}
HXDLIN( 552)										_this4->maxy = node25;
            									}
HXDLIN( 552)									{
HXLINE( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = b->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a5,"a") = node->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b6,"b") = f1->aabb;
HXDLIN( 552)										Float node26;
HXDLIN( 552)										if ((a5->minx < b6->minx)) {
HXLINE( 552)											node26 = a5->minx;
            										}
            										else {
HXLINE( 552)											node26 = b6->minx;
            										}
HXDLIN( 552)										_this5->minx = node26;
HXDLIN( 552)										Float node27;
HXDLIN( 552)										if ((a5->miny < b6->miny)) {
HXLINE( 552)											node27 = a5->miny;
            										}
            										else {
HXLINE( 552)											node27 = b6->miny;
            										}
HXDLIN( 552)										_this5->miny = node27;
HXDLIN( 552)										Float node28;
HXDLIN( 552)										if ((a5->maxx > b6->maxx)) {
HXLINE( 552)											node28 = a5->maxx;
            										}
            										else {
HXLINE( 552)											node28 = b6->maxx;
            										}
HXDLIN( 552)										_this5->maxx = node28;
HXDLIN( 552)										Float node29;
HXDLIN( 552)										if ((a5->maxy > b6->maxy)) {
HXLINE( 552)											node29 = a5->maxy;
            										}
            										else {
HXLINE( 552)											node29 = b6->maxy;
            										}
HXDLIN( 552)										_this5->maxy = node29;
            									}
HXDLIN( 552)									HX_VARI_NAME( int,x4,"x") = c->height;
HXDLIN( 552)									HX_VARI_NAME( int,y4,"y") = g1->height;
HXDLIN( 552)									int node30;
HXDLIN( 552)									if ((x4 > y4)) {
HXLINE( 552)										node30 = x4;
            									}
            									else {
HXLINE( 552)										node30 = y4;
            									}
HXDLIN( 552)									node->height = ((int)1 + node30);
HXDLIN( 552)									HX_VARI_NAME( int,x5,"x") = node->height;
HXDLIN( 552)									HX_VARI_NAME( int,y5,"y") = f1->height;
HXDLIN( 552)									int node31;
HXDLIN( 552)									if ((x5 > y5)) {
HXLINE( 552)										node31 = x5;
            									}
            									else {
HXLINE( 552)										node31 = y5;
            									}
HXDLIN( 552)									b->height = ((int)1 + node31);
            								}
            								else {
HXLINE( 552)									b->child2 = g1;
HXDLIN( 552)									node->child1 = f1;
HXDLIN( 552)									f1->parent = node;
HXDLIN( 552)									{
HXLINE( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = node->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a6,"a") = c->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b7,"b") = f1->aabb;
HXDLIN( 552)										Float node32;
HXDLIN( 552)										if ((a6->minx < b7->minx)) {
HXLINE( 552)											node32 = a6->minx;
            										}
            										else {
HXLINE( 552)											node32 = b7->minx;
            										}
HXDLIN( 552)										_this6->minx = node32;
HXDLIN( 552)										Float node33;
HXDLIN( 552)										if ((a6->miny < b7->miny)) {
HXLINE( 552)											node33 = a6->miny;
            										}
            										else {
HXLINE( 552)											node33 = b7->miny;
            										}
HXDLIN( 552)										_this6->miny = node33;
HXDLIN( 552)										Float node34;
HXDLIN( 552)										if ((a6->maxx > b7->maxx)) {
HXLINE( 552)											node34 = a6->maxx;
            										}
            										else {
HXLINE( 552)											node34 = b7->maxx;
            										}
HXDLIN( 552)										_this6->maxx = node34;
HXDLIN( 552)										Float node35;
HXDLIN( 552)										if ((a6->maxy > b7->maxy)) {
HXLINE( 552)											node35 = a6->maxy;
            										}
            										else {
HXLINE( 552)											node35 = b7->maxy;
            										}
HXDLIN( 552)										_this6->maxy = node35;
            									}
HXDLIN( 552)									{
HXLINE( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this7,"_this") = b->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a7,"a") = node->aabb;
HXDLIN( 552)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b8,"b") = g1->aabb;
HXDLIN( 552)										Float node36;
HXDLIN( 552)										if ((a7->minx < b8->minx)) {
HXLINE( 552)											node36 = a7->minx;
            										}
            										else {
HXLINE( 552)											node36 = b8->minx;
            										}
HXDLIN( 552)										_this7->minx = node36;
HXDLIN( 552)										Float node37;
HXDLIN( 552)										if ((a7->miny < b8->miny)) {
HXLINE( 552)											node37 = a7->miny;
            										}
            										else {
HXLINE( 552)											node37 = b8->miny;
            										}
HXDLIN( 552)										_this7->miny = node37;
HXDLIN( 552)										Float node38;
HXDLIN( 552)										if ((a7->maxx > b8->maxx)) {
HXLINE( 552)											node38 = a7->maxx;
            										}
            										else {
HXLINE( 552)											node38 = b8->maxx;
            										}
HXDLIN( 552)										_this7->maxx = node38;
HXDLIN( 552)										Float node39;
HXDLIN( 552)										if ((a7->maxy > b8->maxy)) {
HXLINE( 552)											node39 = a7->maxy;
            										}
            										else {
HXLINE( 552)											node39 = b8->maxy;
            										}
HXDLIN( 552)										_this7->maxy = node39;
            									}
HXDLIN( 552)									HX_VARI_NAME( int,x6,"x") = c->height;
HXDLIN( 552)									HX_VARI_NAME( int,y6,"y") = f1->height;
HXDLIN( 552)									int node40;
HXDLIN( 552)									if ((x6 > y6)) {
HXLINE( 552)										node40 = x6;
            									}
            									else {
HXLINE( 552)										node40 = y6;
            									}
HXDLIN( 552)									node->height = ((int)1 + node40);
HXDLIN( 552)									HX_VARI_NAME( int,x7,"x") = node->height;
HXDLIN( 552)									HX_VARI_NAME( int,y7,"y") = g1->height;
HXDLIN( 552)									int node41;
HXDLIN( 552)									if ((x7 > y7)) {
HXLINE( 552)										node41 = x7;
            									}
            									else {
HXLINE( 552)										node41 = y7;
            									}
HXDLIN( 552)									b->height = ((int)1 + node41);
            								}
HXDLIN( 552)								node = b;
            							}
            							else {
HXLINE( 552)								node = node;
            							}
            						}
            					}
HXLINE( 553)					HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child1) = node->child1;
HXLINE( 554)					HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,child2) = node->child2;
HXLINE( 555)					{
HXLINE( 555)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this8,"_this") = node->aabb;
HXDLIN( 555)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a8,"a") = child1->aabb;
HXDLIN( 555)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b9,"b") = child2->aabb;
HXDLIN( 555)						Float _hx_tmp;
HXDLIN( 555)						if ((a8->minx < b9->minx)) {
HXLINE( 555)							_hx_tmp = a8->minx;
            						}
            						else {
HXLINE( 555)							_hx_tmp = b9->minx;
            						}
HXDLIN( 555)						_this8->minx = _hx_tmp;
HXDLIN( 555)						Float _hx_tmp1;
HXDLIN( 555)						if ((a8->miny < b9->miny)) {
HXLINE( 555)							_hx_tmp1 = a8->miny;
            						}
            						else {
HXLINE( 555)							_hx_tmp1 = b9->miny;
            						}
HXDLIN( 555)						_this8->miny = _hx_tmp1;
HXDLIN( 555)						Float _hx_tmp2;
HXDLIN( 555)						if ((a8->maxx > b9->maxx)) {
HXLINE( 555)							_hx_tmp2 = a8->maxx;
            						}
            						else {
HXLINE( 555)							_hx_tmp2 = b9->maxx;
            						}
HXDLIN( 555)						_this8->maxx = _hx_tmp2;
HXDLIN( 555)						Float _hx_tmp3;
HXDLIN( 555)						if ((a8->maxy > b9->maxy)) {
HXLINE( 555)							_hx_tmp3 = a8->maxy;
            						}
            						else {
HXLINE( 555)							_hx_tmp3 = b9->maxy;
            						}
HXDLIN( 555)						_this8->maxy = _hx_tmp3;
            					}
HXLINE( 557)					HX_VARI_NAME( int,x8,"x") = child1->height;
HXLINE( 558)					HX_VARI_NAME( int,y8,"y") = child2->height;
HXLINE( 556)					int _hx_tmp4;
HXLINE( 559)					if ((x8 > y8)) {
HXLINE( 556)						_hx_tmp4 = x8;
            					}
            					else {
HXLINE( 556)						_hx_tmp4 = y8;
            					}
HXDLIN( 556)					node->height = ((int)1 + _hx_tmp4);
HXLINE( 561)					node = node->parent;
            				}
            			}
            			else {
HXLINE( 565)				this->root = sibling;
HXLINE( 566)				sibling->parent = null();
HXLINE( 567)				{
HXLINE( 577)					{
HXLINE( 577)						parent->height = (int)-1;
HXDLIN( 577)						{
HXLINE( 577)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,o1,"o") = parent->aabb;
HXDLIN( 577)							{
HXLINE( 577)								if (hx::IsNotNull( o1->outer )) {
HXLINE( 577)									o1->outer->zpp_inner = null();
HXDLIN( 577)									o1->outer = null();
            								}
HXDLIN( 577)								o1->wrap_min = (o1->wrap_max = null());
HXDLIN( 577)								o1->_invalidate = null();
HXDLIN( 577)								o1->_validate = null();
            							}
HXDLIN( 577)							o1->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 577)							::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o1;
            						}
HXDLIN( 577)						parent->child1 = (parent->child2 = (parent->parent = null()));
HXDLIN( 577)						parent->next = null();
HXDLIN( 577)						parent->snext = null();
HXDLIN( 577)						parent->mnext = null();
            					}
HXLINE( 578)					parent->next = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool;
HXLINE( 579)					::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = parent;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABBTree_obj,inlined_removeLeaf,(void))

 ::zpp_nape::space::ZPP_AABBNode ZPP_AABBTree_obj::balance( ::zpp_nape::space::ZPP_AABBNode a){
            	HX_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_590_balance)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 590)		bool _hx_tmp;
HXDLIN( 590)		if (hx::IsNotNull( a->child1 )) {
HXLINE( 590)			_hx_tmp = (a->height < (int)2);
            		}
            		else {
HXLINE( 590)			_hx_tmp = true;
            		}
HXDLIN( 590)		if (_hx_tmp) {
HXLINE( 590)			return a;
            		}
            		else {
HXLINE( 592)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,b) = a->child1;
HXLINE( 593)			HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,c) = a->child2;
HXLINE( 594)			HX_VARI( int,balance) = (c->height - b->height);
HXLINE( 595)			if ((balance > (int)1)) {
HXLINE( 596)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,f) = c->child1;
HXLINE( 597)				HX_VARI(  ::zpp_nape::space::ZPP_AABBNode,g) = c->child2;
HXLINE( 598)				c->child1 = a;
HXLINE( 599)				c->parent = a->parent;
HXLINE( 600)				a->parent = c;
HXLINE( 601)				if (hx::IsNotNull( c->parent )) {
HXLINE( 602)					if (hx::IsEq( c->parent->child1,a )) {
HXLINE( 602)						c->parent->child1 = c;
            					}
            					else {
HXLINE( 603)						c->parent->child2 = c;
            					}
            				}
            				else {
HXLINE( 605)					this->root = c;
            				}
HXLINE( 606)				if ((f->height > g->height)) {
HXLINE( 607)					c->child2 = f;
HXLINE( 608)					a->child2 = g;
HXLINE( 609)					g->parent = a;
HXLINE( 610)					{
HXLINE( 610)						HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = a->aabb;
HXDLIN( 610)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a1,"a") = b->aabb;
HXDLIN( 610)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b1,"b") = g->aabb;
HXDLIN( 610)						Float _hx_tmp1;
HXDLIN( 610)						if ((a1->minx < b1->minx)) {
HXLINE( 610)							_hx_tmp1 = a1->minx;
            						}
            						else {
HXLINE( 610)							_hx_tmp1 = b1->minx;
            						}
HXDLIN( 610)						_this->minx = _hx_tmp1;
HXDLIN( 610)						Float _hx_tmp2;
HXDLIN( 610)						if ((a1->miny < b1->miny)) {
HXLINE( 610)							_hx_tmp2 = a1->miny;
            						}
            						else {
HXLINE( 610)							_hx_tmp2 = b1->miny;
            						}
HXDLIN( 610)						_this->miny = _hx_tmp2;
HXDLIN( 610)						Float _hx_tmp3;
HXDLIN( 610)						if ((a1->maxx > b1->maxx)) {
HXLINE( 610)							_hx_tmp3 = a1->maxx;
            						}
            						else {
HXLINE( 610)							_hx_tmp3 = b1->maxx;
            						}
HXDLIN( 610)						_this->maxx = _hx_tmp3;
HXDLIN( 610)						Float _hx_tmp4;
HXDLIN( 610)						if ((a1->maxy > b1->maxy)) {
HXLINE( 610)							_hx_tmp4 = a1->maxy;
            						}
            						else {
HXLINE( 610)							_hx_tmp4 = b1->maxy;
            						}
HXDLIN( 610)						_this->maxy = _hx_tmp4;
            					}
HXLINE( 611)					{
HXLINE( 611)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = c->aabb;
HXDLIN( 611)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a2,"a") = a->aabb;
HXDLIN( 611)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b2,"b") = f->aabb;
HXDLIN( 611)						Float _hx_tmp5;
HXDLIN( 611)						if ((a2->minx < b2->minx)) {
HXLINE( 611)							_hx_tmp5 = a2->minx;
            						}
            						else {
HXLINE( 611)							_hx_tmp5 = b2->minx;
            						}
HXDLIN( 611)						_this1->minx = _hx_tmp5;
HXDLIN( 611)						Float _hx_tmp6;
HXDLIN( 611)						if ((a2->miny < b2->miny)) {
HXLINE( 611)							_hx_tmp6 = a2->miny;
            						}
            						else {
HXLINE( 611)							_hx_tmp6 = b2->miny;
            						}
HXDLIN( 611)						_this1->miny = _hx_tmp6;
HXDLIN( 611)						Float _hx_tmp7;
HXDLIN( 611)						if ((a2->maxx > b2->maxx)) {
HXLINE( 611)							_hx_tmp7 = a2->maxx;
            						}
            						else {
HXLINE( 611)							_hx_tmp7 = b2->maxx;
            						}
HXDLIN( 611)						_this1->maxx = _hx_tmp7;
HXDLIN( 611)						Float _hx_tmp8;
HXDLIN( 611)						if ((a2->maxy > b2->maxy)) {
HXLINE( 611)							_hx_tmp8 = a2->maxy;
            						}
            						else {
HXLINE( 611)							_hx_tmp8 = b2->maxy;
            						}
HXDLIN( 611)						_this1->maxy = _hx_tmp8;
            					}
HXLINE( 613)					HX_VARI( int,x) = b->height;
HXLINE( 614)					HX_VARI( int,y) = g->height;
HXLINE( 612)					int _hx_tmp9;
HXLINE( 615)					if ((x > y)) {
HXLINE( 612)						_hx_tmp9 = x;
            					}
            					else {
HXLINE( 612)						_hx_tmp9 = y;
            					}
HXDLIN( 612)					a->height = ((int)1 + _hx_tmp9);
HXLINE( 618)					HX_VARI_NAME( int,x1,"x") = a->height;
HXLINE( 619)					HX_VARI_NAME( int,y1,"y") = f->height;
HXLINE( 617)					int _hx_tmp10;
HXLINE( 620)					if ((x1 > y1)) {
HXLINE( 617)						_hx_tmp10 = x1;
            					}
            					else {
HXLINE( 617)						_hx_tmp10 = y1;
            					}
HXDLIN( 617)					c->height = ((int)1 + _hx_tmp10);
            				}
            				else {
HXLINE( 624)					c->child2 = g;
HXLINE( 625)					a->child2 = f;
HXLINE( 626)					f->parent = a;
HXLINE( 627)					{
HXLINE( 627)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = a->aabb;
HXDLIN( 627)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a3,"a") = b->aabb;
HXDLIN( 627)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b3,"b") = f->aabb;
HXDLIN( 627)						Float _hx_tmp11;
HXDLIN( 627)						if ((a3->minx < b3->minx)) {
HXLINE( 627)							_hx_tmp11 = a3->minx;
            						}
            						else {
HXLINE( 627)							_hx_tmp11 = b3->minx;
            						}
HXDLIN( 627)						_this2->minx = _hx_tmp11;
HXDLIN( 627)						Float _hx_tmp12;
HXDLIN( 627)						if ((a3->miny < b3->miny)) {
HXLINE( 627)							_hx_tmp12 = a3->miny;
            						}
            						else {
HXLINE( 627)							_hx_tmp12 = b3->miny;
            						}
HXDLIN( 627)						_this2->miny = _hx_tmp12;
HXDLIN( 627)						Float _hx_tmp13;
HXDLIN( 627)						if ((a3->maxx > b3->maxx)) {
HXLINE( 627)							_hx_tmp13 = a3->maxx;
            						}
            						else {
HXLINE( 627)							_hx_tmp13 = b3->maxx;
            						}
HXDLIN( 627)						_this2->maxx = _hx_tmp13;
HXDLIN( 627)						Float _hx_tmp14;
HXDLIN( 627)						if ((a3->maxy > b3->maxy)) {
HXLINE( 627)							_hx_tmp14 = a3->maxy;
            						}
            						else {
HXLINE( 627)							_hx_tmp14 = b3->maxy;
            						}
HXDLIN( 627)						_this2->maxy = _hx_tmp14;
            					}
HXLINE( 628)					{
HXLINE( 628)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = c->aabb;
HXDLIN( 628)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a4,"a") = a->aabb;
HXDLIN( 628)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b4,"b") = g->aabb;
HXDLIN( 628)						Float _hx_tmp15;
HXDLIN( 628)						if ((a4->minx < b4->minx)) {
HXLINE( 628)							_hx_tmp15 = a4->minx;
            						}
            						else {
HXLINE( 628)							_hx_tmp15 = b4->minx;
            						}
HXDLIN( 628)						_this3->minx = _hx_tmp15;
HXDLIN( 628)						Float _hx_tmp16;
HXDLIN( 628)						if ((a4->miny < b4->miny)) {
HXLINE( 628)							_hx_tmp16 = a4->miny;
            						}
            						else {
HXLINE( 628)							_hx_tmp16 = b4->miny;
            						}
HXDLIN( 628)						_this3->miny = _hx_tmp16;
HXDLIN( 628)						Float _hx_tmp17;
HXDLIN( 628)						if ((a4->maxx > b4->maxx)) {
HXLINE( 628)							_hx_tmp17 = a4->maxx;
            						}
            						else {
HXLINE( 628)							_hx_tmp17 = b4->maxx;
            						}
HXDLIN( 628)						_this3->maxx = _hx_tmp17;
HXDLIN( 628)						Float _hx_tmp18;
HXDLIN( 628)						if ((a4->maxy > b4->maxy)) {
HXLINE( 628)							_hx_tmp18 = a4->maxy;
            						}
            						else {
HXLINE( 628)							_hx_tmp18 = b4->maxy;
            						}
HXDLIN( 628)						_this3->maxy = _hx_tmp18;
            					}
HXLINE( 630)					HX_VARI_NAME( int,x2,"x") = b->height;
HXLINE( 631)					HX_VARI_NAME( int,y2,"y") = f->height;
HXLINE( 629)					int _hx_tmp19;
HXLINE( 632)					if ((x2 > y2)) {
HXLINE( 629)						_hx_tmp19 = x2;
            					}
            					else {
HXLINE( 629)						_hx_tmp19 = y2;
            					}
HXDLIN( 629)					a->height = ((int)1 + _hx_tmp19);
HXLINE( 635)					HX_VARI_NAME( int,x3,"x") = a->height;
HXLINE( 636)					HX_VARI_NAME( int,y3,"y") = g->height;
HXLINE( 634)					int _hx_tmp20;
HXLINE( 637)					if ((x3 > y3)) {
HXLINE( 634)						_hx_tmp20 = x3;
            					}
            					else {
HXLINE( 634)						_hx_tmp20 = y3;
            					}
HXDLIN( 634)					c->height = ((int)1 + _hx_tmp20);
            				}
HXLINE( 640)				return c;
            			}
            			else {
HXLINE( 642)				if ((balance < (int)-1)) {
HXLINE( 643)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,f1,"f") = b->child1;
HXLINE( 644)					HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,g1,"g") = b->child2;
HXLINE( 645)					b->child1 = a;
HXLINE( 646)					b->parent = a->parent;
HXLINE( 647)					a->parent = b;
HXLINE( 648)					if (hx::IsNotNull( b->parent )) {
HXLINE( 649)						if (hx::IsEq( b->parent->child1,a )) {
HXLINE( 649)							b->parent->child1 = b;
            						}
            						else {
HXLINE( 650)							b->parent->child2 = b;
            						}
            					}
            					else {
HXLINE( 652)						this->root = b;
            					}
HXLINE( 653)					if ((f1->height > g1->height)) {
HXLINE( 654)						b->child2 = f1;
HXLINE( 655)						a->child1 = g1;
HXLINE( 656)						g1->parent = a;
HXLINE( 657)						{
HXLINE( 657)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = a->aabb;
HXDLIN( 657)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a5,"a") = c->aabb;
HXDLIN( 657)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b5,"b") = g1->aabb;
HXDLIN( 657)							Float _hx_tmp21;
HXDLIN( 657)							if ((a5->minx < b5->minx)) {
HXLINE( 657)								_hx_tmp21 = a5->minx;
            							}
            							else {
HXLINE( 657)								_hx_tmp21 = b5->minx;
            							}
HXDLIN( 657)							_this4->minx = _hx_tmp21;
HXDLIN( 657)							Float _hx_tmp22;
HXDLIN( 657)							if ((a5->miny < b5->miny)) {
HXLINE( 657)								_hx_tmp22 = a5->miny;
            							}
            							else {
HXLINE( 657)								_hx_tmp22 = b5->miny;
            							}
HXDLIN( 657)							_this4->miny = _hx_tmp22;
HXDLIN( 657)							Float _hx_tmp23;
HXDLIN( 657)							if ((a5->maxx > b5->maxx)) {
HXLINE( 657)								_hx_tmp23 = a5->maxx;
            							}
            							else {
HXLINE( 657)								_hx_tmp23 = b5->maxx;
            							}
HXDLIN( 657)							_this4->maxx = _hx_tmp23;
HXDLIN( 657)							Float _hx_tmp24;
HXDLIN( 657)							if ((a5->maxy > b5->maxy)) {
HXLINE( 657)								_hx_tmp24 = a5->maxy;
            							}
            							else {
HXLINE( 657)								_hx_tmp24 = b5->maxy;
            							}
HXDLIN( 657)							_this4->maxy = _hx_tmp24;
            						}
HXLINE( 658)						{
HXLINE( 658)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = b->aabb;
HXDLIN( 658)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a6,"a") = a->aabb;
HXDLIN( 658)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b6,"b") = f1->aabb;
HXDLIN( 658)							Float _hx_tmp25;
HXDLIN( 658)							if ((a6->minx < b6->minx)) {
HXLINE( 658)								_hx_tmp25 = a6->minx;
            							}
            							else {
HXLINE( 658)								_hx_tmp25 = b6->minx;
            							}
HXDLIN( 658)							_this5->minx = _hx_tmp25;
HXDLIN( 658)							Float _hx_tmp26;
HXDLIN( 658)							if ((a6->miny < b6->miny)) {
HXLINE( 658)								_hx_tmp26 = a6->miny;
            							}
            							else {
HXLINE( 658)								_hx_tmp26 = b6->miny;
            							}
HXDLIN( 658)							_this5->miny = _hx_tmp26;
HXDLIN( 658)							Float _hx_tmp27;
HXDLIN( 658)							if ((a6->maxx > b6->maxx)) {
HXLINE( 658)								_hx_tmp27 = a6->maxx;
            							}
            							else {
HXLINE( 658)								_hx_tmp27 = b6->maxx;
            							}
HXDLIN( 658)							_this5->maxx = _hx_tmp27;
HXDLIN( 658)							Float _hx_tmp28;
HXDLIN( 658)							if ((a6->maxy > b6->maxy)) {
HXLINE( 658)								_hx_tmp28 = a6->maxy;
            							}
            							else {
HXLINE( 658)								_hx_tmp28 = b6->maxy;
            							}
HXDLIN( 658)							_this5->maxy = _hx_tmp28;
            						}
HXLINE( 660)						HX_VARI_NAME( int,x4,"x") = c->height;
HXLINE( 661)						HX_VARI_NAME( int,y4,"y") = g1->height;
HXLINE( 659)						int _hx_tmp29;
HXLINE( 662)						if ((x4 > y4)) {
HXLINE( 659)							_hx_tmp29 = x4;
            						}
            						else {
HXLINE( 659)							_hx_tmp29 = y4;
            						}
HXDLIN( 659)						a->height = ((int)1 + _hx_tmp29);
HXLINE( 665)						HX_VARI_NAME( int,x5,"x") = a->height;
HXLINE( 666)						HX_VARI_NAME( int,y5,"y") = f1->height;
HXLINE( 664)						int _hx_tmp30;
HXLINE( 667)						if ((x5 > y5)) {
HXLINE( 664)							_hx_tmp30 = x5;
            						}
            						else {
HXLINE( 664)							_hx_tmp30 = y5;
            						}
HXDLIN( 664)						b->height = ((int)1 + _hx_tmp30);
            					}
            					else {
HXLINE( 671)						b->child2 = g1;
HXLINE( 672)						a->child1 = f1;
HXLINE( 673)						f1->parent = a;
HXLINE( 674)						{
HXLINE( 674)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = a->aabb;
HXDLIN( 674)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a7,"a") = c->aabb;
HXDLIN( 674)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b7,"b") = f1->aabb;
HXDLIN( 674)							Float _hx_tmp31;
HXDLIN( 674)							if ((a7->minx < b7->minx)) {
HXLINE( 674)								_hx_tmp31 = a7->minx;
            							}
            							else {
HXLINE( 674)								_hx_tmp31 = b7->minx;
            							}
HXDLIN( 674)							_this6->minx = _hx_tmp31;
HXDLIN( 674)							Float _hx_tmp32;
HXDLIN( 674)							if ((a7->miny < b7->miny)) {
HXLINE( 674)								_hx_tmp32 = a7->miny;
            							}
            							else {
HXLINE( 674)								_hx_tmp32 = b7->miny;
            							}
HXDLIN( 674)							_this6->miny = _hx_tmp32;
HXDLIN( 674)							Float _hx_tmp33;
HXDLIN( 674)							if ((a7->maxx > b7->maxx)) {
HXLINE( 674)								_hx_tmp33 = a7->maxx;
            							}
            							else {
HXLINE( 674)								_hx_tmp33 = b7->maxx;
            							}
HXDLIN( 674)							_this6->maxx = _hx_tmp33;
HXDLIN( 674)							Float _hx_tmp34;
HXDLIN( 674)							if ((a7->maxy > b7->maxy)) {
HXLINE( 674)								_hx_tmp34 = a7->maxy;
            							}
            							else {
HXLINE( 674)								_hx_tmp34 = b7->maxy;
            							}
HXDLIN( 674)							_this6->maxy = _hx_tmp34;
            						}
HXLINE( 675)						{
HXLINE( 675)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this7,"_this") = b->aabb;
HXDLIN( 675)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,a8,"a") = a->aabb;
HXDLIN( 675)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,b8,"b") = g1->aabb;
HXDLIN( 675)							Float _hx_tmp35;
HXDLIN( 675)							if ((a8->minx < b8->minx)) {
HXLINE( 675)								_hx_tmp35 = a8->minx;
            							}
            							else {
HXLINE( 675)								_hx_tmp35 = b8->minx;
            							}
HXDLIN( 675)							_this7->minx = _hx_tmp35;
HXDLIN( 675)							Float _hx_tmp36;
HXDLIN( 675)							if ((a8->miny < b8->miny)) {
HXLINE( 675)								_hx_tmp36 = a8->miny;
            							}
            							else {
HXLINE( 675)								_hx_tmp36 = b8->miny;
            							}
HXDLIN( 675)							_this7->miny = _hx_tmp36;
HXDLIN( 675)							Float _hx_tmp37;
HXDLIN( 675)							if ((a8->maxx > b8->maxx)) {
HXLINE( 675)								_hx_tmp37 = a8->maxx;
            							}
            							else {
HXLINE( 675)								_hx_tmp37 = b8->maxx;
            							}
HXDLIN( 675)							_this7->maxx = _hx_tmp37;
HXDLIN( 675)							Float _hx_tmp38;
HXDLIN( 675)							if ((a8->maxy > b8->maxy)) {
HXLINE( 675)								_hx_tmp38 = a8->maxy;
            							}
            							else {
HXLINE( 675)								_hx_tmp38 = b8->maxy;
            							}
HXDLIN( 675)							_this7->maxy = _hx_tmp38;
            						}
HXLINE( 677)						HX_VARI_NAME( int,x6,"x") = c->height;
HXLINE( 678)						HX_VARI_NAME( int,y6,"y") = f1->height;
HXLINE( 676)						int _hx_tmp39;
HXLINE( 679)						if ((x6 > y6)) {
HXLINE( 676)							_hx_tmp39 = x6;
            						}
            						else {
HXLINE( 676)							_hx_tmp39 = y6;
            						}
HXDLIN( 676)						a->height = ((int)1 + _hx_tmp39);
HXLINE( 682)						HX_VARI_NAME( int,x7,"x") = a->height;
HXLINE( 683)						HX_VARI_NAME( int,y7,"y") = g1->height;
HXLINE( 681)						int _hx_tmp40;
HXLINE( 684)						if ((x7 > y7)) {
HXLINE( 681)							_hx_tmp40 = x7;
            						}
            						else {
HXLINE( 681)							_hx_tmp40 = y7;
            						}
HXDLIN( 681)						b->height = ((int)1 + _hx_tmp40);
            					}
HXLINE( 687)					return b;
            				}
            				else {
HXLINE( 689)					return a;
            				}
            			}
            		}
HXLINE( 590)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABBTree_obj,balance,return )

 ::zpp_nape::geom::ZPP_AABB ZPP_AABBTree_obj::tmpaabb;


hx::ObjectPtr< ZPP_AABBTree_obj > ZPP_AABBTree_obj::__new() {
	hx::ObjectPtr< ZPP_AABBTree_obj > __this = new ZPP_AABBTree_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_AABBTree_obj > ZPP_AABBTree_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_AABBTree_obj *__this = (ZPP_AABBTree_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_AABBTree_obj), true, "zpp_nape.space.ZPP_AABBTree"));
	*(void **)__this = ZPP_AABBTree_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_AABBTree_obj::ZPP_AABBTree_obj()
{
}

void ZPP_AABBTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_AABBTree);
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_END_CLASS();
}

void ZPP_AABBTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(root,"root");
}

hx::Val ZPP_AABBTree_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"balance") ) { return hx::Val( balance_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"insertLeaf") ) { return hx::Val( insertLeaf_dyn()); }
		if (HX_FIELD_EQ(inName,"removeLeaf") ) { return hx::Val( removeLeaf_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"inlined_insertLeaf") ) { return hx::Val( inlined_insertLeaf_dyn()); }
		if (HX_FIELD_EQ(inName,"inlined_removeLeaf") ) { return hx::Val( inlined_removeLeaf_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_AABBTree_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tmpaabb") ) { outValue = tmpaabb; return true; }
	}
	return false;
}

hx::Val ZPP_AABBTree_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::zpp_nape::space::ZPP_AABBNode >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_AABBTree_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tmpaabb") ) { tmpaabb=ioValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return true; }
	}
	return false;
}

void ZPP_AABBTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_AABBTree_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_AABBNode*/ ,(int)offsetof(ZPP_AABBTree_obj,root),HX_HCSTRING("root","\x22","\xee","\xae","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_AABBTree_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(void *) &ZPP_AABBTree_obj::tmpaabb,HX_HCSTRING("tmpaabb","\xf7","\xbe","\xe8","\x29")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_AABBTree_obj_sMemberFields[] = {
	HX_HCSTRING("root","\x22","\xee","\xae","\x4b"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("insertLeaf","\x77","\x03","\x9b","\x2d"),
	HX_HCSTRING("inlined_insertLeaf","\x8b","\x0e","\x9e","\xcd"),
	HX_HCSTRING("removeLeaf","\x02","\x3e","\xcf","\xc4"),
	HX_HCSTRING("inlined_removeLeaf","\x16","\x49","\xd2","\x64"),
	HX_HCSTRING("balance","\x1c","\x9d","\x8d","\x23"),
	::String(null()) };

static void ZPP_AABBTree_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_AABBTree_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_AABBTree_obj::tmpaabb,"tmpaabb");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_AABBTree_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_AABBTree_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_AABBTree_obj::tmpaabb,"tmpaabb");
};

#endif

hx::Class ZPP_AABBTree_obj::__mClass;

static ::String ZPP_AABBTree_obj_sStaticFields[] = {
	HX_HCSTRING("tmpaabb","\xf7","\xbe","\xe8","\x29"),
	::String(null())
};

void ZPP_AABBTree_obj::__register()
{
	hx::Object *dummy = new ZPP_AABBTree_obj;
	ZPP_AABBTree_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.space.ZPP_AABBTree","\x4c","\x16","\x27","\x42");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_AABBTree_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_AABBTree_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_AABBTree_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_AABBTree_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_AABBTree_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_AABBTree_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_AABBTree_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_AABBTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_AABBTree_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_AABBTree_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d459d2e93b0b64cc_419_boot)
HXLINE( 419)		tmpaabb =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            	}
}

} // end namespace zpp_nape
} // end namespace space
