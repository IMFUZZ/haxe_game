// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSet
#include <zpp_nape/util/ZNPList_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSetPair
#include <zpp_nape/util/ZNPList_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSet
#include <zpp_nape/util/ZPP_Set_ZPP_CbSet.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d9b013510572e296_1191_new,"zpp_nape.space.ZPP_CbSetManager","new",0x664c1caa,"zpp_nape.space.ZPP_CbSetManager.new","zpp_nape/space/Space.hx",1191,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_d9b013510572e296_1194_get,"zpp_nape.space.ZPP_CbSetManager","get",0x6646cce0,"zpp_nape.space.ZPP_CbSetManager.get","zpp_nape/space/Space.hx",1194,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_d9b013510572e296_1253_remove,"zpp_nape.space.ZPP_CbSetManager","remove",0x16b19a3a,"zpp_nape.space.ZPP_CbSetManager.remove","zpp_nape/space/Space.hx",1253,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_d9b013510572e296_1286_clear,"zpp_nape.space.ZPP_CbSetManager","clear",0x5636e457,"zpp_nape.space.ZPP_CbSetManager.clear","zpp_nape/space/Space.hx",1286,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_d9b013510572e296_1328_validate,"zpp_nape.space.ZPP_CbSetManager","validate",0xb1c0b80c,"zpp_nape.space.ZPP_CbSetManager.validate","zpp_nape/space/Space.hx",1328,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_d9b013510572e296_1348_pair,"zpp_nape.space.ZPP_CbSetManager","pair",0x1d9c5090,"zpp_nape.space.ZPP_CbSetManager.pair","zpp_nape/space/Space.hx",1348,0x2b65ed03)
HX_DEFINE_STACK_FRAME(_hx_pos_d9b013510572e296_1375_valid_listener,"zpp_nape.space.ZPP_CbSetManager","valid_listener",0x2197e74d,"zpp_nape.space.ZPP_CbSetManager.valid_listener","zpp_nape/space/Space.hx",1375,0x2b65ed03)
namespace zpp_nape{
namespace space{

void ZPP_CbSetManager_obj::__construct( ::zpp_nape::space::ZPP_Space space){
            	HX_GC_STACKFRAME(&_hx_pos_d9b013510572e296_1191_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(space,"space")
HXLINE(1193)		this->space = null();
HXLINE(1192)		this->cbsets = null();
HXLINE(1297)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )) {
HXLINE(1298)			this->cbsets =  ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1304)			this->cbsets = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool;
HXLINE(1305)			::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = this->cbsets->next;
HXLINE(1306)			this->cbsets->next = null();
            		}
HXLINE(1313)		this->cbsets->lt = ::zpp_nape::callbacks::ZPP_CbSet_obj::setlt_dyn();
HXLINE(1314)		this->space = space;
            	}

Dynamic ZPP_CbSetManager_obj::__CreateEmpty() { return new ZPP_CbSetManager_obj; }

void *ZPP_CbSetManager_obj::_hx_vtable = 0;

Dynamic ZPP_CbSetManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_CbSetManager_obj > _hx_result = new ZPP_CbSetManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ZPP_CbSetManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x52193568;
}

 ::zpp_nape::callbacks::ZPP_CbSet ZPP_CbSetManager_obj::get( ::zpp_nape::util::ZNPList_ZPP_CbType cbTypes){
            	HX_GC_STACKFRAME(&_hx_pos_d9b013510572e296_1194_get)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cbTypes,"cbTypes")
HXLINE(1195)		if (hx::IsNull( cbTypes->head )) {
HXLINE(1195)			return null();
            		}
HXLINE(1198)		HX_VAR(  ::zpp_nape::callbacks::ZPP_CbSet,fake);
HXLINE(1200)		if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool )) {
HXLINE(1201)			fake =  ::zpp_nape::callbacks::ZPP_CbSet_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1207)			fake = ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool;
HXLINE(1208)			::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool = fake->next;
HXLINE(1209)			fake->next = null();
            		}
HXLINE(1216)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CbType,faketypes) = fake->cbTypes;
HXLINE(1217)		fake->cbTypes = cbTypes;
HXLINE(1218)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,res) = this->cbsets->find_weak(fake);
HXLINE(1219)		HX_VAR(  ::zpp_nape::callbacks::ZPP_CbSet,ret);
HXDLIN(1219)		if (hx::IsNotNull( res )) {
HXLINE(1219)			ret = res->data;
            		}
            		else {
HXLINE(1220)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,set) = ::zpp_nape::callbacks::ZPP_CbSet_obj::get(cbTypes);
HXLINE(1229)			this->cbsets->insert(set);
HXLINE(1230)			set->manager = hx::ObjectPtr<OBJ_>(this);
HXLINE(1219)			ret = set;
            		}
HXLINE(1233)		fake->cbTypes = faketypes;
HXLINE(1234)		{
HXLINE(1235)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSet,o) = fake;
HXLINE(1244)			{
HXLINE(1244)				o->listeners->clear();
HXDLIN(1244)				o->zip_listeners = true;
HXDLIN(1244)				o->bodylisteners->clear();
HXDLIN(1244)				o->zip_bodylisteners = true;
HXDLIN(1244)				o->conlisteners->clear();
HXDLIN(1244)				o->zip_conlisteners = true;
HXDLIN(1244)				while(hx::IsNotNull( o->cbTypes->head )){
HXLINE(1244)					o->cbTypes->pop_unsafe()->cbsets->remove(o);
            				}
            			}
HXLINE(1245)			o->next = ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool;
HXLINE(1246)			::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool = o;
            		}
HXLINE(1251)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSetManager_obj,get,return )

void ZPP_CbSetManager_obj::remove( ::zpp_nape::callbacks::ZPP_CbSet set){
            	HX_STACKFRAME(&_hx_pos_d9b013510572e296_1253_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(set,"set")
HXLINE(1254)		this->cbsets->remove(set);
HXLINE(1256)		while(hx::IsNotNull( set->cbpairs->head )){
HXLINE(1257)			HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,pair) = set->cbpairs->pop_unsafe();
HXLINE(1258)			{
HXLINE(1259)				if (hx::IsNotEq( pair->a,pair->b )) {
HXLINE(1260)					if (hx::IsEq( set,pair->a )) {
HXLINE(1260)						pair->b->cbpairs->remove(pair);
            					}
            					else {
HXLINE(1261)						pair->a->cbpairs->remove(pair);
            					}
            				}
HXLINE(1263)				{
HXLINE(1273)					{
HXLINE(1273)						pair->a = (pair->b = null());
HXDLIN(1273)						pair->listeners->clear();
            					}
HXLINE(1274)					pair->next = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXLINE(1275)					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = pair;
            				}
            			}
            		}
HXLINE(1283)		set->manager = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSetManager_obj,remove,(void))

void ZPP_CbSetManager_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_d9b013510572e296_1286_clear)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetManager_obj,clear,(void))

void ZPP_CbSetManager_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_d9b013510572e296_1328_validate)
            	HX_STACK_THIS(this)
HXLINE(1328)		if (!(this->cbsets->empty())) {
HXLINE(1329)			HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,set_ite) = this->cbsets->parent;
HXLINE(1330)			while(hx::IsNotNull( set_ite->prev )){
HXLINE(1330)				set_ite = set_ite->prev;
            			}
HXLINE(1331)			while(hx::IsNotNull( set_ite )){
HXLINE(1333)				set_ite->data->validate();
HXLINE(1334)				if (hx::IsNotNull( set_ite->next )) {
HXLINE(1335)					set_ite = set_ite->next;
HXLINE(1336)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(1336)						set_ite = set_ite->prev;
            					}
            				}
            				else {
HXLINE(1339)					while(true){
HXLINE(1339)						bool _hx_tmp;
HXDLIN(1339)						if (hx::IsNotNull( set_ite->parent )) {
HXLINE(1339)							_hx_tmp = hx::IsEq( set_ite,set_ite->parent->next );
            						}
            						else {
HXLINE(1339)							_hx_tmp = false;
            						}
HXDLIN(1339)						if (!(_hx_tmp)) {
HXLINE(1339)							goto _hx_goto_9;
            						}
HXDLIN(1339)						set_ite = set_ite->parent;
            					}
            					_hx_goto_9:;
HXLINE(1340)					set_ite = set_ite->parent;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_CbSetManager_obj,validate,(void))

 ::zpp_nape::callbacks::ZPP_CbSetPair ZPP_CbSetManager_obj::pair( ::zpp_nape::callbacks::ZPP_CbSet a, ::zpp_nape::callbacks::ZPP_CbSet b){
            	HX_GC_STACKFRAME(&_hx_pos_d9b013510572e296_1348_pair)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(1349)		HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret) = null();
HXLINE(1350)		HX_VAR(  ::zpp_nape::util::ZNPList_ZPP_CbSetPair,pairs);
HXDLIN(1350)		if ((a->cbpairs->length < b->cbpairs->length)) {
HXLINE(1350)			pairs = a->cbpairs;
            		}
            		else {
HXLINE(1350)			pairs = b->cbpairs;
            		}
HXLINE(1351)		{
HXLINE(1352)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,cx_ite) = pairs->head;
HXLINE(1353)			while(hx::IsNotNull( cx_ite )){
HXLINE(1354)				HX_VARI(  ::zpp_nape::callbacks::ZPP_CbSetPair,p) = cx_ite->elt;
HXLINE(1356)				bool _hx_tmp;
HXDLIN(1356)				bool _hx_tmp1;
HXDLIN(1356)				if (hx::IsEq( p->a,a )) {
HXLINE(1356)					_hx_tmp1 = hx::IsEq( p->b,b );
            				}
            				else {
HXLINE(1356)					_hx_tmp1 = false;
            				}
HXDLIN(1356)				if (!(_hx_tmp1)) {
HXLINE(1356)					if (hx::IsEq( p->a,b )) {
HXLINE(1356)						_hx_tmp = hx::IsEq( p->b,a );
            					}
            					else {
HXLINE(1356)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(1356)					_hx_tmp = true;
            				}
HXDLIN(1356)				if (_hx_tmp) {
HXLINE(1357)					ret = p;
HXLINE(1358)					goto _hx_goto_11;
            				}
HXLINE(1361)				cx_ite = cx_ite->next;
            			}
            			_hx_goto_11:;
            		}
HXLINE(1364)		if (hx::IsNull( ret )) {
HXLINE(1365)			HX_VAR_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,ret1,"ret");
HXDLIN(1365)			{
HXLINE(1365)				if (hx::IsNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )) {
HXLINE(1365)					ret1 =  ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1365)					ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
HXDLIN(1365)					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
HXDLIN(1365)					ret1->next = null();
            				}
HXDLIN(1365)				ret1->zip_listeners = true;
            			}
HXDLIN(1365)			if (::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b)) {
HXLINE(1365)				ret1->a = a;
HXDLIN(1365)				ret1->b = b;
            			}
            			else {
HXLINE(1365)				ret1->a = b;
HXDLIN(1365)				ret1->b = a;
            			}
HXDLIN(1365)			ret = ret1;
HXLINE(1366)			a->cbpairs->add(ret);
HXLINE(1367)			if (hx::IsNotEq( b,a )) {
HXLINE(1367)				b->cbpairs->add(ret);
            			}
            		}
HXLINE(1369)		if (ret->zip_listeners) {
HXLINE(1369)			ret->zip_listeners = false;
HXDLIN(1369)			ret->_hx___validate();
            		}
HXLINE(1370)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_CbSetManager_obj,pair,return )

bool ZPP_CbSetManager_obj::valid_listener( ::zpp_nape::callbacks::ZPP_Listener i){
            	HX_STACKFRAME(&_hx_pos_d9b013510572e296_1375_valid_listener)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(1375)		return hx::IsEq( i->space,this->space );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_CbSetManager_obj,valid_listener,return )


hx::ObjectPtr< ZPP_CbSetManager_obj > ZPP_CbSetManager_obj::__new( ::zpp_nape::space::ZPP_Space space) {
	hx::ObjectPtr< ZPP_CbSetManager_obj > __this = new ZPP_CbSetManager_obj();
	__this->__construct(space);
	return __this;
}

hx::ObjectPtr< ZPP_CbSetManager_obj > ZPP_CbSetManager_obj::__alloc(hx::Ctx *_hx_ctx, ::zpp_nape::space::ZPP_Space space) {
	ZPP_CbSetManager_obj *__this = (ZPP_CbSetManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_CbSetManager_obj), true, "zpp_nape.space.ZPP_CbSetManager"));
	*(void **)__this = ZPP_CbSetManager_obj::_hx_vtable;
	__this->__construct(space);
	return __this;
}

ZPP_CbSetManager_obj::ZPP_CbSetManager_obj()
{
}

void ZPP_CbSetManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_CbSetManager);
	HX_MARK_MEMBER_NAME(cbsets,"cbsets");
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_END_CLASS();
}

void ZPP_CbSetManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cbsets,"cbsets");
	HX_VISIT_MEMBER_NAME(space,"space");
}

hx::Val ZPP_CbSetManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pair") ) { return hx::Val( pair_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { return hx::Val( space); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cbsets") ) { return hx::Val( cbsets); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"valid_listener") ) { return hx::Val( valid_listener_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ZPP_CbSetManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cbsets") ) { cbsets=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_CbSet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_CbSetManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"));
	outFields->push(HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_CbSetManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_CbSet*/ ,(int)offsetof(ZPP_CbSetManager_obj,cbsets),HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Space*/ ,(int)offsetof(ZPP_CbSetManager_obj,space),HX_HCSTRING("space","\xc6","\x8c","\x66","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ZPP_CbSetManager_obj_sStaticStorageInfo = 0;
#endif

static ::String ZPP_CbSetManager_obj_sMemberFields[] = {
	HX_HCSTRING("cbsets","\xb0","\x24","\xea","\x4e"),
	HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("pair","\x1a","\xdc","\x51","\x4a"),
	HX_HCSTRING("valid_listener","\x57","\x03","\xaf","\x5e"),
	::String(null()) };

static void ZPP_CbSetManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_CbSetManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_CbSetManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_CbSetManager_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_CbSetManager_obj::__mClass;

void ZPP_CbSetManager_obj::__register()
{
	hx::Object *dummy = new ZPP_CbSetManager_obj;
	ZPP_CbSetManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.space.ZPP_CbSetManager","\xb8","\x3f","\x4a","\x2a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_CbSetManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_CbSetManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_CbSetManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_CbSetManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_CbSetManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_CbSetManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace space
