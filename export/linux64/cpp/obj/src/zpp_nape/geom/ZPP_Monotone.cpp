// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Monotone
#include <zpp_nape/geom/ZPP_Monotone.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionedPoly
#include <zpp_nape/geom/ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPList_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPNode_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionVertex
#include <zpp_nape/util/ZPP_Set_ZPP_PartitionVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_175_bisector,"zpp_nape.geom.ZPP_Monotone","bisector",0xca647430,"zpp_nape.geom.ZPP_Monotone.bisector","zpp_nape/geom/Monotone.hx",175,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_223_below,"zpp_nape.geom.ZPP_Monotone","below",0xedc4474e,"zpp_nape.geom.ZPP_Monotone.below","zpp_nape/geom/Monotone.hx",223,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_297_above,"zpp_nape.geom.ZPP_Monotone","above",0x58645bba,"zpp_nape.geom.ZPP_Monotone.above","zpp_nape/geom/Monotone.hx",297,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_299_left_vertex,"zpp_nape.geom.ZPP_Monotone","left_vertex",0xa8866439,"zpp_nape.geom.ZPP_Monotone.left_vertex","zpp_nape/geom/Monotone.hx",299,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_303_isMonotone,"zpp_nape.geom.ZPP_Monotone","isMonotone",0xad973062,"zpp_nape.geom.ZPP_Monotone.isMonotone","zpp_nape/geom/Monotone.hx",303,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_378_getShared,"zpp_nape.geom.ZPP_Monotone","getShared",0x530b86f8,"zpp_nape.geom.ZPP_Monotone.getShared","zpp_nape/geom/Monotone.hx",378,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_384_decompose,"zpp_nape.geom.ZPP_Monotone","decompose",0x343162ce,"zpp_nape.geom.ZPP_Monotone.decompose","zpp_nape/geom/Monotone.hx",384,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_382_boot,"zpp_nape.geom.ZPP_Monotone","boot",0xa1d03a35,"zpp_nape.geom.ZPP_Monotone.boot","zpp_nape/geom/Monotone.hx",382,0x3d0f4898)
HX_DEFINE_STACK_FRAME(_hx_pos_22fc4b034b490167_383_boot,"zpp_nape.geom.ZPP_Monotone","boot",0xa1d03a35,"zpp_nape.geom.ZPP_Monotone.boot","zpp_nape/geom/Monotone.hx",383,0x3d0f4898)
namespace zpp_nape{
namespace geom{

void ZPP_Monotone_obj::__construct() { }

Dynamic ZPP_Monotone_obj::__CreateEmpty() { return new ZPP_Monotone_obj; }

void *ZPP_Monotone_obj::_hx_vtable = 0;

Dynamic ZPP_Monotone_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Monotone_obj > _hx_result = new ZPP_Monotone_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Monotone_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x414006c3;
}

 ::zpp_nape::geom::ZPP_Vec2 ZPP_Monotone_obj::bisector( ::zpp_nape::geom::ZPP_PartitionVertex b){
            	HX_GC_STACKFRAME(&_hx_pos_22fc4b034b490167_175_bisector)
            	HX_STACK_ARG(b,"b")
HXLINE( 176)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,a) = b->prev;
HXLINE( 177)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,c) = b->next;
HXLINE( 178)		HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 179)		HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 180)		{
HXLINE( 181)			ux = (b->x - a->x);
HXLINE( 182)			uy = (b->y - a->y);
            		}
HXLINE( 184)		HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 185)		HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 186)		{
HXLINE( 187)			vx = (c->x - b->x);
HXLINE( 188)			vy = (c->y - b->y);
            		}
HXLINE( 190)		HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,ret);
HXDLIN( 190)		{
HXLINE( 190)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 190)				ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 190)				ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 190)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN( 190)				ret->next = null();
            			}
HXDLIN( 190)			ret->weak = false;
            		}
HXDLIN( 190)		ret->_immutable = false;
HXDLIN( 190)		{
HXLINE( 190)			ret->x = (-(uy) - vy);
HXDLIN( 190)			ret->y = (ux + vx);
            		}
HXDLIN( 190)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret") = ret;
HXLINE( 191)		{
HXLINE( 201)			HX_VARI( Float,imag) = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(((ret1->x * ret1->x) + (ret1->y * ret1->y))));
HXLINE( 202)			{
HXLINE( 212)				ret1->x = (ret1->x * imag);
HXLINE( 213)				ret1->y = (ret1->y * imag);
            			}
            		}
HXLINE( 216)		if ((((vy * ux) - (vx * uy)) < (int)0)) {
HXLINE( 217)			ret1->x = -(ret1->x);
HXLINE( 218)			ret1->y = -(ret1->y);
            		}
HXLINE( 220)		return ret1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Monotone_obj,bisector,return )

bool ZPP_Monotone_obj::below( ::zpp_nape::geom::ZPP_PartitionVertex p, ::zpp_nape::geom::ZPP_PartitionVertex q){
            	HX_STACKFRAME(&_hx_pos_22fc4b034b490167_223_below)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 223)		if ((p->y < q->y)) {
HXLINE( 223)			return true;
            		}
            		else {
HXLINE( 224)			if ((p->y > q->y)) {
HXLINE( 224)				return false;
            			}
            			else {
HXLINE( 226)				if ((p->x < q->x)) {
HXLINE( 226)					return true;
            				}
            				else {
HXLINE( 227)					if ((p->x > q->x)) {
HXLINE( 227)						return false;
            					}
            					else {
HXLINE( 229)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,po) = ::zpp_nape::geom::ZPP_Monotone_obj::bisector(p);
HXLINE( 230)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,qo) = ::zpp_nape::geom::ZPP_Monotone_obj::bisector(q);
HXLINE( 231)						{
HXLINE( 241)							po->x = (po->x + p->x);
HXLINE( 242)							po->y = (po->y + p->y);
            						}
HXLINE( 244)						{
HXLINE( 254)							qo->x = (qo->x + q->x);
HXLINE( 255)							qo->y = (qo->y + q->y);
            						}
HXLINE( 257)						HX_VAR( bool,ret);
HXDLIN( 257)						if (!((po->x < qo->x))) {
HXLINE( 257)							if ((po->x == qo->x)) {
HXLINE( 257)								ret = (po->y < qo->y);
            							}
            							else {
HXLINE( 257)								ret = false;
            							}
            						}
            						else {
HXLINE( 257)							ret = true;
            						}
HXLINE( 258)						{
HXLINE( 268)							{
HXLINE( 268)								if (hx::IsNotNull( po->outer )) {
HXLINE( 268)									po->outer->zpp_inner = null();
HXDLIN( 268)									po->outer = null();
            								}
HXDLIN( 268)								po->_isimmutable = null();
HXDLIN( 268)								po->_validate = null();
HXDLIN( 268)								po->_invalidate = null();
            							}
HXLINE( 269)							po->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 270)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = po;
            						}
HXLINE( 275)						{
HXLINE( 285)							{
HXLINE( 285)								if (hx::IsNotNull( qo->outer )) {
HXLINE( 285)									qo->outer->zpp_inner = null();
HXDLIN( 285)									qo->outer = null();
            								}
HXDLIN( 285)								qo->_isimmutable = null();
HXDLIN( 285)								qo->_validate = null();
HXDLIN( 285)								qo->_invalidate = null();
            							}
HXLINE( 286)							qo->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 287)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = qo;
            						}
HXLINE( 292)						return ret;
            					}
            				}
            			}
            		}
HXLINE( 223)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Monotone_obj,below,return )

bool ZPP_Monotone_obj::above( ::zpp_nape::geom::ZPP_PartitionVertex p, ::zpp_nape::geom::ZPP_PartitionVertex q){
            	HX_STACKFRAME(&_hx_pos_22fc4b034b490167_297_above)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 297)		return ::zpp_nape::geom::ZPP_Monotone_obj::below(q,p);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Monotone_obj,above,return )

bool ZPP_Monotone_obj::left_vertex( ::zpp_nape::geom::ZPP_PartitionVertex p){
            	HX_STACKFRAME(&_hx_pos_22fc4b034b490167_299_left_vertex)
            	HX_STACK_ARG(p,"p")
HXLINE( 300)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,pre) = p->prev;
HXLINE( 301)		if (!((pre->y > p->y))) {
HXLINE( 301)			if ((pre->y == p->y)) {
HXLINE( 301)				return (p->next->y < p->y);
            			}
            			else {
HXLINE( 301)				return false;
            			}
            		}
            		else {
HXLINE( 301)			return true;
            		}
HXDLIN( 301)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Monotone_obj,left_vertex,return )

bool ZPP_Monotone_obj::isMonotone( ::zpp_nape::geom::ZPP_GeomVert P){
            	HX_STACKFRAME(&_hx_pos_22fc4b034b490167_303_isMonotone)
            	HX_STACK_ARG(P,"P")
HXLINE( 304)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,min) = P;
HXLINE( 305)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,max) = P;
HXLINE( 306)		{
HXLINE( 307)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,F) = P->next;
HXLINE( 309)			if (hx::IsNotNull( F )) {
HXLINE( 310)				HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,nite) = F;
HXLINE( 311)				while(true){
HXLINE( 312)					HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,p) = nite;
HXLINE( 314)					{
HXLINE( 315)						if ((p->y < min->y)) {
HXLINE( 315)							min = p;
            						}
HXLINE( 316)						if ((p->y > max->y)) {
HXLINE( 316)							max = p;
            						}
            					}
HXLINE( 319)					nite = nite->next;
HXLINE( 311)					if (!(hx::IsNotEq( nite,P ))) {
HXLINE( 311)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
            		}
HXLINE( 324)		HX_VARI( bool,ret) = true;
HXLINE( 325)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,pre) = min;
HXLINE( 326)		if (hx::IsNotEq( max,min->next )) {
HXLINE( 328)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,F1,"F") = min->next;
HXLINE( 329)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,L) = max;
HXLINE( 330)			if (hx::IsNotNull( F1 )) {
HXLINE( 331)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,nite1,"nite") = F1;
HXLINE( 332)				while(true){
HXLINE( 333)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,p1,"p") = nite1;
HXLINE( 335)					{
HXLINE( 336)						if ((p1->y < pre->y)) {
HXLINE( 337)							ret = false;
HXLINE( 338)							goto _hx_goto_5;
            						}
HXLINE( 340)						pre = p1;
            					}
HXLINE( 343)					nite1 = nite1->next;
HXLINE( 332)					if (!(hx::IsNotEq( nite1,L ))) {
HXLINE( 332)						goto _hx_goto_5;
            					}
            				}
            				_hx_goto_5:;
            			}
            		}
HXLINE( 349)		if (!(ret)) {
HXLINE( 349)			return false;
            		}
HXLINE( 350)		pre = min;
HXLINE( 351)		if (hx::IsNotEq( max,min->prev )) {
HXLINE( 353)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,F2,"F") = min->prev;
HXLINE( 354)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,L1,"L") = max;
HXLINE( 355)			if (hx::IsNotNull( F2 )) {
HXLINE( 356)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,nite2,"nite") = F2;
HXLINE( 357)				while(true){
HXLINE( 358)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,p2,"p") = nite2;
HXLINE( 360)					{
HXLINE( 361)						if ((p2->y < pre->y)) {
HXLINE( 362)							ret = false;
HXLINE( 363)							goto _hx_goto_6;
            						}
HXLINE( 365)						pre = p2;
            					}
HXLINE( 368)					nite2 = nite2->prev;
HXLINE( 357)					if (!(hx::IsNotEq( nite2,L1 ))) {
HXLINE( 357)						goto _hx_goto_6;
            					}
            				}
            				_hx_goto_6:;
            			}
            		}
HXLINE( 374)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Monotone_obj,isMonotone,return )

 ::zpp_nape::geom::ZPP_PartitionedPoly ZPP_Monotone_obj::sharedPPoly;

 ::zpp_nape::geom::ZPP_PartitionedPoly ZPP_Monotone_obj::getShared(){
            	HX_GC_STACKFRAME(&_hx_pos_22fc4b034b490167_378_getShared)
HXLINE( 379)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly )) {
HXLINE( 379)			::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly =  ::zpp_nape::geom::ZPP_PartitionedPoly_obj::__alloc( HX_CTX ,null());
            		}
HXLINE( 380)		return ::zpp_nape::geom::ZPP_Monotone_obj::sharedPPoly;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ZPP_Monotone_obj,getShared,return )

 ::zpp_nape::util::ZNPList_ZPP_PartitionVertex ZPP_Monotone_obj::queue;

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex ZPP_Monotone_obj::edges;

 ::zpp_nape::geom::ZPP_PartitionedPoly ZPP_Monotone_obj::decompose( ::zpp_nape::geom::ZPP_GeomVert P, ::zpp_nape::geom::ZPP_PartitionedPoly poly){
            	HX_GC_STACKFRAME(&_hx_pos_22fc4b034b490167_384_decompose)
            	HX_STACK_ARG(P,"P")
            	HX_STACK_ARG(poly,"poly")
HXLINE( 385)		if (hx::IsNull( poly )) {
HXLINE( 386)			poly =  ::zpp_nape::geom::ZPP_PartitionedPoly_obj::__alloc( HX_CTX ,P);
            		}
            		else {
HXLINE( 389)			poly->init(P);
            		}
HXLINE( 391)		if (hx::IsNull( poly->vertices )) {
HXLINE( 391)			return poly;
            		}
HXLINE( 392)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Monotone_obj::queue )) {
HXLINE( 392)			::zpp_nape::geom::ZPP_Monotone_obj::queue =  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
HXLINE( 393)		{
HXLINE( 394)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,F) = poly->vertices;
HXLINE( 395)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,L) = poly->vertices;
HXLINE( 396)			if (hx::IsNotNull( F )) {
HXLINE( 397)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,nite) = F;
HXLINE( 398)				while(true){
HXLINE( 399)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,p) = nite;
HXLINE( 401)					{
HXLINE( 402)						::zpp_nape::geom::ZPP_Monotone_obj::queue->add(p);
HXLINE( 403)						HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 404)						HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 405)						{
HXLINE( 406)							ux = (p->next->x - p->x);
HXLINE( 407)							uy = (p->next->y - p->y);
            						}
HXLINE( 409)						HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 410)						HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 411)						{
HXLINE( 412)							vx = (p->prev->x - p->x);
HXLINE( 413)							vy = (p->prev->y - p->y);
            						}
HXLINE( 415)						HX_VARI( bool,cx) = (((vy * ux) - (vx * uy)) > ((Float)0.0));
HXLINE( 416)						int _hx_tmp;
HXDLIN( 416)						if (::zpp_nape::geom::ZPP_Monotone_obj::below(p->prev,p)) {
HXLINE( 417)							if (::zpp_nape::geom::ZPP_Monotone_obj::below(p->next,p)) {
HXLINE( 417)								if (cx) {
HXLINE( 416)									_hx_tmp = (int)0;
            								}
            								else {
HXLINE( 416)									_hx_tmp = (int)3;
            								}
            							}
            							else {
HXLINE( 416)								_hx_tmp = (int)4;
            							}
            						}
            						else {
HXLINE( 420)							if (::zpp_nape::geom::ZPP_Monotone_obj::below(p,p->next)) {
HXLINE( 420)								if (cx) {
HXLINE( 416)									_hx_tmp = (int)1;
            								}
            								else {
HXLINE( 416)									_hx_tmp = (int)2;
            								}
            							}
            							else {
HXLINE( 416)								_hx_tmp = (int)4;
            							}
            						}
HXDLIN( 416)						p->type = _hx_tmp;
            					}
HXLINE( 424)					nite = nite->next;
HXLINE( 398)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 398)						goto _hx_goto_9;
            					}
            				}
            				_hx_goto_9:;
            			}
            		}
HXLINE( 429)		{
HXLINE( 430)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex,xxlist) = ::zpp_nape::geom::ZPP_Monotone_obj::queue;
HXLINE( 431)			bool _hx_tmp1;
HXDLIN( 431)			if (hx::IsNotNull( xxlist->head )) {
HXLINE( 431)				_hx_tmp1 = hx::IsNotNull( xxlist->head->next );
            			}
            			else {
HXLINE( 431)				_hx_tmp1 = false;
            			}
HXDLIN( 431)			if (_hx_tmp1) {
HXLINE( 432)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,head) = xxlist->head;
HXLINE( 433)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,tail) = null();
HXLINE( 434)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,left) = null();
HXLINE( 435)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,right) = null();
HXLINE( 436)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,nxt) = null();
HXLINE( 437)				HX_VARI( int,listSize) = (int)1;
HXLINE( 438)				HX_VAR( int,numMerges);
HXDLIN( 438)				HX_VAR( int,leftSize);
HXDLIN( 438)				HX_VAR( int,rightSize);
HXLINE( 439)				while(true){
HXLINE( 440)					numMerges = (int)0;
HXLINE( 441)					left = head;
HXLINE( 442)					head = null();
HXDLIN( 442)					tail = head;
HXLINE( 443)					while(hx::IsNotNull( left )){
HXLINE( 444)						numMerges = (numMerges + (int)1);
HXLINE( 445)						right = left;
HXLINE( 446)						leftSize = (int)0;
HXLINE( 447)						rightSize = listSize;
HXLINE( 448)						while(true){
HXLINE( 448)							bool _hx_tmp2;
HXDLIN( 448)							if (hx::IsNotNull( right )) {
HXLINE( 448)								_hx_tmp2 = (leftSize < listSize);
            							}
            							else {
HXLINE( 448)								_hx_tmp2 = false;
            							}
HXDLIN( 448)							if (!(_hx_tmp2)) {
HXLINE( 448)								goto _hx_goto_12;
            							}
HXLINE( 449)							leftSize = (leftSize + (int)1);
HXLINE( 450)							right = right->next;
            						}
            						_hx_goto_12:;
HXLINE( 452)						while(true){
HXLINE( 452)							bool _hx_tmp3;
HXDLIN( 452)							if ((leftSize <= (int)0)) {
HXLINE( 452)								if ((rightSize > (int)0)) {
HXLINE( 452)									_hx_tmp3 = hx::IsNotNull( right );
            								}
            								else {
HXLINE( 452)									_hx_tmp3 = false;
            								}
            							}
            							else {
HXLINE( 452)								_hx_tmp3 = true;
            							}
HXDLIN( 452)							if (!(_hx_tmp3)) {
HXLINE( 452)								goto _hx_goto_13;
            							}
HXLINE( 453)							if ((leftSize == (int)0)) {
HXLINE( 454)								nxt = right;
HXLINE( 455)								right = right->next;
HXLINE( 456)								rightSize = (rightSize - (int)1);
            							}
            							else {
HXLINE( 458)								bool _hx_tmp4;
HXDLIN( 458)								if ((rightSize != (int)0)) {
HXLINE( 458)									_hx_tmp4 = hx::IsNull( right );
            								}
            								else {
HXLINE( 458)									_hx_tmp4 = true;
            								}
HXDLIN( 458)								if (_hx_tmp4) {
HXLINE( 459)									nxt = left;
HXLINE( 460)									left = left->next;
HXLINE( 461)									leftSize = (leftSize - (int)1);
            								}
            								else {
HXLINE( 463)									if (::zpp_nape::geom::ZPP_Monotone_obj::above(left->elt,right->elt)) {
HXLINE( 464)										nxt = left;
HXLINE( 465)										left = left->next;
HXLINE( 466)										leftSize = (leftSize - (int)1);
            									}
            									else {
HXLINE( 469)										nxt = right;
HXLINE( 470)										right = right->next;
HXLINE( 471)										rightSize = (rightSize - (int)1);
            									}
            								}
            							}
HXLINE( 473)							if (hx::IsNotNull( tail )) {
HXLINE( 473)								tail->next = nxt;
            							}
            							else {
HXLINE( 474)								head = nxt;
            							}
HXLINE( 475)							tail = nxt;
            						}
            						_hx_goto_13:;
HXLINE( 477)						left = right;
            					}
HXLINE( 479)					tail->next = null();
HXLINE( 480)					listSize = ((int)listSize << (int)(int)1);
HXLINE( 439)					if (!((numMerges > (int)1))) {
HXLINE( 439)						goto _hx_goto_10;
            					}
            				}
            				_hx_goto_10:;
HXLINE( 483)				{
HXLINE( 483)					xxlist->head = head;
HXDLIN( 483)					xxlist->modified = true;
HXDLIN( 483)					xxlist->pushmod = true;
            				}
            			}
            		}
HXLINE( 486)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Monotone_obj::edges )) {
HXLINE( 488)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE( 489)				::zpp_nape::geom::ZPP_Monotone_obj::edges =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 495)				::zpp_nape::geom::ZPP_Monotone_obj::edges = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 496)				::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = ::zpp_nape::geom::ZPP_Monotone_obj::edges->next;
HXLINE( 497)				::zpp_nape::geom::ZPP_Monotone_obj::edges->next = null();
            			}
HXLINE( 504)			::zpp_nape::geom::ZPP_Monotone_obj::edges->lt = ::zpp_nape::geom::ZPP_PartitionVertex_obj::edge_lt_dyn();
HXLINE( 505)			::zpp_nape::geom::ZPP_Monotone_obj::edges->swapped = ::zpp_nape::geom::ZPP_PartitionVertex_obj::edge_swap_dyn();
            		}
HXLINE( 507)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Monotone_obj::queue->head )){
HXLINE( 508)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,v) = ::zpp_nape::geom::ZPP_Monotone_obj::queue->pop_unsafe();
HXLINE( 509)			switch((int)(v->type)){
            				case (int)0: {
HXLINE( 510)					v->helper = v;
HXLINE( 511)					v->node = ::zpp_nape::geom::ZPP_Monotone_obj::edges->insert(v);
            				}
            				break;
            				case (int)1: {
HXLINE( 512)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,e) = v->prev;
HXLINE( 516)					if ((e->helper->type == (int)2)) {
HXLINE( 517)						poly->add_diagonal(v,e->helper);
            					}
HXLINE( 519)					::zpp_nape::geom::ZPP_Monotone_obj::edges->remove_node(e->node);
            				}
            				break;
            				case (int)2: {
HXLINE( 567)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,e1,"e") = v->prev;
HXLINE( 571)					if ((e1->helper->type == (int)2)) {
HXLINE( 572)						poly->add_diagonal(v,e1->helper);
            					}
HXLINE( 574)					::zpp_nape::geom::ZPP_Monotone_obj::edges->remove_node(e1->node);
HXLINE( 579)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,ret) = null();
HXLINE( 589)					if (!(::zpp_nape::geom::ZPP_Monotone_obj::edges->empty())) {
HXLINE( 590)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,set_ite) = ::zpp_nape::geom::ZPP_Monotone_obj::edges->parent;
HXLINE( 591)						while(hx::IsNotNull( set_ite->prev )){
HXLINE( 591)							set_ite = set_ite->prev;
            						}
HXLINE( 592)						while(hx::IsNotNull( set_ite )){
HXLINE( 593)							HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,elt) = set_ite->data;
HXLINE( 595)							if (!(::zpp_nape::geom::ZPP_PartitionVertex_obj::vert_lt(elt,v))) {
HXLINE( 596)								ret = elt;
HXLINE( 597)								goto _hx_goto_16;
            							}
HXLINE( 600)							if (hx::IsNotNull( set_ite->next )) {
HXLINE( 601)								set_ite = set_ite->next;
HXLINE( 602)								while(hx::IsNotNull( set_ite->prev )){
HXLINE( 602)									set_ite = set_ite->prev;
            								}
            							}
            							else {
HXLINE( 605)								while(true){
HXLINE( 605)									bool _hx_tmp5;
HXDLIN( 605)									if (hx::IsNotNull( set_ite->parent )) {
HXLINE( 605)										_hx_tmp5 = hx::IsEq( set_ite,set_ite->parent->next );
            									}
            									else {
HXLINE( 605)										_hx_tmp5 = false;
            									}
HXDLIN( 605)									if (!(_hx_tmp5)) {
HXLINE( 605)										goto _hx_goto_18;
            									}
HXDLIN( 605)									set_ite = set_ite->parent;
            								}
            								_hx_goto_18:;
HXLINE( 606)								set_ite = set_ite->parent;
            							}
            						}
            						_hx_goto_16:;
            					}
HXLINE( 578)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,e2,"e") = ret;
HXLINE( 613)					if (hx::IsNotNull( e2 )) {
HXLINE( 617)						if ((e2->helper->type == (int)2)) {
HXLINE( 618)							poly->add_diagonal(v,e2->helper);
            						}
HXLINE( 620)						e2->helper = v;
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 524)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,ret1,"ret") = null();
HXLINE( 534)					if (!(::zpp_nape::geom::ZPP_Monotone_obj::edges->empty())) {
HXLINE( 535)						HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,set_ite1,"set_ite") = ::zpp_nape::geom::ZPP_Monotone_obj::edges->parent;
HXLINE( 536)						while(hx::IsNotNull( set_ite1->prev )){
HXLINE( 536)							set_ite1 = set_ite1->prev;
            						}
HXLINE( 537)						while(hx::IsNotNull( set_ite1 )){
HXLINE( 538)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,elt1,"elt") = set_ite1->data;
HXLINE( 540)							if (!(::zpp_nape::geom::ZPP_PartitionVertex_obj::vert_lt(elt1,v))) {
HXLINE( 541)								ret1 = elt1;
HXLINE( 542)								goto _hx_goto_20;
            							}
HXLINE( 545)							if (hx::IsNotNull( set_ite1->next )) {
HXLINE( 546)								set_ite1 = set_ite1->next;
HXLINE( 547)								while(hx::IsNotNull( set_ite1->prev )){
HXLINE( 547)									set_ite1 = set_ite1->prev;
            								}
            							}
            							else {
HXLINE( 550)								while(true){
HXLINE( 550)									bool _hx_tmp6;
HXDLIN( 550)									if (hx::IsNotNull( set_ite1->parent )) {
HXLINE( 550)										_hx_tmp6 = hx::IsEq( set_ite1,set_ite1->parent->next );
            									}
            									else {
HXLINE( 550)										_hx_tmp6 = false;
            									}
HXDLIN( 550)									if (!(_hx_tmp6)) {
HXLINE( 550)										goto _hx_goto_22;
            									}
HXDLIN( 550)									set_ite1 = set_ite1->parent;
            								}
            								_hx_goto_22:;
HXLINE( 551)								set_ite1 = set_ite1->parent;
            							}
            						}
            						_hx_goto_20:;
            					}
HXLINE( 523)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,e3,"e") = ret1;
HXLINE( 558)					if (hx::IsNotNull( e3 )) {
HXLINE( 562)						poly->add_diagonal(v,e3->helper);
HXLINE( 563)						e3->helper = v;
            					}
HXLINE( 565)					v->node = ::zpp_nape::geom::ZPP_Monotone_obj::edges->insert(v);
HXLINE( 566)					v->helper = v;
            				}
            				break;
            				case (int)4: {
HXLINE( 622)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,pre) = v->prev;
HXLINE( 623)					if (::zpp_nape::geom::ZPP_Monotone_obj::left_vertex(v)) {
HXLINE( 627)						if ((pre->helper->type == (int)2)) {
HXLINE( 627)							poly->add_diagonal(v,pre->helper);
            						}
HXLINE( 628)						::zpp_nape::geom::ZPP_Monotone_obj::edges->remove_node(pre->node);
HXLINE( 632)						v->node = ::zpp_nape::geom::ZPP_Monotone_obj::edges->insert(v);
HXLINE( 633)						v->helper = v;
            					}
            					else {
HXLINE( 637)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,ret2,"ret") = null();
HXLINE( 647)						if (!(::zpp_nape::geom::ZPP_Monotone_obj::edges->empty())) {
HXLINE( 648)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,set_ite2,"set_ite") = ::zpp_nape::geom::ZPP_Monotone_obj::edges->parent;
HXLINE( 649)							while(hx::IsNotNull( set_ite2->prev )){
HXLINE( 649)								set_ite2 = set_ite2->prev;
            							}
HXLINE( 650)							while(hx::IsNotNull( set_ite2 )){
HXLINE( 651)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,elt2,"elt") = set_ite2->data;
HXLINE( 653)								if (!(::zpp_nape::geom::ZPP_PartitionVertex_obj::vert_lt(elt2,v))) {
HXLINE( 654)									ret2 = elt2;
HXLINE( 655)									goto _hx_goto_24;
            								}
HXLINE( 658)								if (hx::IsNotNull( set_ite2->next )) {
HXLINE( 659)									set_ite2 = set_ite2->next;
HXLINE( 660)									while(hx::IsNotNull( set_ite2->prev )){
HXLINE( 660)										set_ite2 = set_ite2->prev;
            									}
            								}
            								else {
HXLINE( 663)									while(true){
HXLINE( 663)										bool _hx_tmp7;
HXDLIN( 663)										if (hx::IsNotNull( set_ite2->parent )) {
HXLINE( 663)											_hx_tmp7 = hx::IsEq( set_ite2,set_ite2->parent->next );
            										}
            										else {
HXLINE( 663)											_hx_tmp7 = false;
            										}
HXDLIN( 663)										if (!(_hx_tmp7)) {
HXLINE( 663)											goto _hx_goto_26;
            										}
HXDLIN( 663)										set_ite2 = set_ite2->parent;
            									}
            									_hx_goto_26:;
HXLINE( 664)									set_ite2 = set_ite2->parent;
            								}
            							}
            							_hx_goto_24:;
            						}
HXLINE( 636)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,e4,"e") = ret2;
HXLINE( 674)						if ((e4->helper->type == (int)2)) {
HXLINE( 675)							poly->add_diagonal(v,e4->helper);
            						}
HXLINE( 677)						e4->helper = v;
            					}
            				}
            				break;
            			}
            		}
HXLINE( 689)		return poly;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Monotone_obj,decompose,return )


ZPP_Monotone_obj::ZPP_Monotone_obj()
{
}

bool ZPP_Monotone_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"below") ) { outValue = below_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"above") ) { outValue = above_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"queue") ) { outValue = queue; return true; }
		if (HX_FIELD_EQ(inName,"edges") ) { outValue = edges; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bisector") ) { outValue = bisector_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getShared") ) { outValue = getShared_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"decompose") ) { outValue = decompose_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isMonotone") ) { outValue = isMonotone_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"left_vertex") ) { outValue = left_vertex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sharedPPoly") ) { outValue = sharedPPoly; return true; }
	}
	return false;
}

bool ZPP_Monotone_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { queue=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex >(); return true; }
		if (HX_FIELD_EQ(inName,"edges") ) { edges=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sharedPPoly") ) { sharedPPoly=ioValue.Cast<  ::zpp_nape::geom::ZPP_PartitionedPoly >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Monotone_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_Monotone_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionedPoly*/ ,(void *) &ZPP_Monotone_obj::sharedPPoly,HX_HCSTRING("sharedPPoly","\xf7","\x7d","\x06","\x11")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_PartitionVertex*/ ,(void *) &ZPP_Monotone_obj::queue,HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex*/ ,(void *) &ZPP_Monotone_obj::edges,HX_HCSTRING("edges","\x96","\x6d","\xe0","\x69")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ZPP_Monotone_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Monotone_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Monotone_obj::sharedPPoly,"sharedPPoly");
	HX_MARK_MEMBER_NAME(ZPP_Monotone_obj::queue,"queue");
	HX_MARK_MEMBER_NAME(ZPP_Monotone_obj::edges,"edges");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Monotone_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Monotone_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Monotone_obj::sharedPPoly,"sharedPPoly");
	HX_VISIT_MEMBER_NAME(ZPP_Monotone_obj::queue,"queue");
	HX_VISIT_MEMBER_NAME(ZPP_Monotone_obj::edges,"edges");
};

#endif

hx::Class ZPP_Monotone_obj::__mClass;

static ::String ZPP_Monotone_obj_sStaticFields[] = {
	HX_HCSTRING("bisector","\xad","\x00","\xe9","\x57"),
	HX_HCSTRING("below","\xb1","\xba","\x59","\xb0"),
	HX_HCSTRING("above","\x1d","\xcf","\xf9","\x1a"),
	HX_HCSTRING("left_vertex","\xdc","\x03","\x01","\x42"),
	HX_HCSTRING("isMonotone","\x1f","\x96","\xb5","\x0e"),
	HX_HCSTRING("sharedPPoly","\xf7","\x7d","\x06","\x11"),
	HX_HCSTRING("getShared","\xdb","\xe7","\x81","\x99"),
	HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"),
	HX_HCSTRING("edges","\x96","\x6d","\xe0","\x69"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	::String(null())
};

void ZPP_Monotone_obj::__register()
{
	hx::Object *dummy = new ZPP_Monotone_obj;
	ZPP_Monotone_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_Monotone","\x4b","\x69","\xc1","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Monotone_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Monotone_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Monotone_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Monotone_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Monotone_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Monotone_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Monotone_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Monotone_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Monotone_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_22fc4b034b490167_382_boot)
HXLINE( 382)		queue = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_22fc4b034b490167_383_boot)
HXLINE( 383)		edges = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
