// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionedPoly
#include <zpp_nape/geom/ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_GeomVert
#include <zpp_nape/util/ZNPList_ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPList_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionedPoly
#include <zpp_nape/util/ZNPList_ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPNode_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionedPoly
#include <zpp_nape/util/ZNPNode_ZPP_PartitionedPoly.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_587_new,"zpp_nape.geom.ZPP_PartitionedPoly","new",0x933a85b1,"zpp_nape.geom.ZPP_PartitionedPoly.new","zpp_nape/geom/PartitionedPoly.hx",587,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_590_eq,"zpp_nape.geom.ZPP_PartitionedPoly","eq",0x0f95783b,"zpp_nape.geom.ZPP_PartitionedPoly.eq","zpp_nape/geom/PartitionedPoly.hx",590,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_621_alloc,"zpp_nape.geom.ZPP_PartitionedPoly","alloc",0x438f1006,"zpp_nape.geom.ZPP_PartitionedPoly.alloc","zpp_nape/geom/PartitionedPoly.hx",621,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_624_free,"zpp_nape.geom.ZPP_PartitionedPoly","free",0x3aba8e3b,"zpp_nape.geom.ZPP_PartitionedPoly.free","zpp_nape/geom/PartitionedPoly.hx",624,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_633_init,"zpp_nape.geom.ZPP_PartitionedPoly","init",0x3cb32c9f,"zpp_nape.geom.ZPP_PartitionedPoly.init","zpp_nape/geom/PartitionedPoly.hx",633,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_712_remove_collinear_vertices,"zpp_nape.geom.ZPP_PartitionedPoly","remove_collinear_vertices",0xef0c64ff,"zpp_nape.geom.ZPP_PartitionedPoly.remove_collinear_vertices","zpp_nape/geom/PartitionedPoly.hx",712,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_884_add_diagonal,"zpp_nape.geom.ZPP_PartitionedPoly","add_diagonal",0xca5a56a2,"zpp_nape.geom.ZPP_PartitionedPoly.add_diagonal","zpp_nape/geom/PartitionedPoly.hx",884,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_895_extract_partitions,"zpp_nape.geom.ZPP_PartitionedPoly","extract_partitions",0xb5140696,"zpp_nape.geom.ZPP_PartitionedPoly.extract_partitions","zpp_nape/geom/PartitionedPoly.hx",895,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_990_pull_partitions,"zpp_nape.geom.ZPP_PartitionedPoly","pull_partitions",0x0c45f394,"zpp_nape.geom.ZPP_PartitionedPoly.pull_partitions","zpp_nape/geom/PartitionedPoly.hx",990,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_1138_extract,"zpp_nape.geom.ZPP_PartitionedPoly","extract",0xa144e712,"zpp_nape.geom.ZPP_PartitionedPoly.extract","zpp_nape/geom/PartitionedPoly.hx",1138,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_1218_pull,"zpp_nape.geom.ZPP_PartitionedPoly","pull",0x4158fd54,"zpp_nape.geom.ZPP_PartitionedPoly.pull","zpp_nape/geom/PartitionedPoly.hx",1218,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_891_getSharedPP,"zpp_nape.geom.ZPP_PartitionedPoly","getSharedPP",0xc23608ec,"zpp_nape.geom.ZPP_PartitionedPoly.getSharedPP","zpp_nape/geom/PartitionedPoly.hx",891,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_1134_getShared,"zpp_nape.geom.ZPP_PartitionedPoly","getShared",0x3228efec,"zpp_nape.geom.ZPP_PartitionedPoly.getShared","zpp_nape/geom/PartitionedPoly.hx",1134,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_543f4038c3f084b2_596_boot,"zpp_nape.geom.ZPP_PartitionedPoly","boot",0x381375c1,"zpp_nape.geom.ZPP_PartitionedPoly.boot","zpp_nape/geom/PartitionedPoly.hx",596,0x0d312f3a)
namespace zpp_nape{
namespace geom{

void ZPP_PartitionedPoly_obj::__construct( ::zpp_nape::geom::ZPP_GeomVert P){
            	HX_STACKFRAME(&_hx_pos_543f4038c3f084b2_587_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(P,"P")
HXLINE( 595)		this->next = null();
HXLINE( 588)		this->vertices = null();
HXLINE( 593)		this->init(P);
            	}

Dynamic ZPP_PartitionedPoly_obj::__CreateEmpty() { return new ZPP_PartitionedPoly_obj; }

void *ZPP_PartitionedPoly_obj::_hx_vtable = 0;

Dynamic ZPP_PartitionedPoly_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_PartitionedPoly_obj > _hx_result = new ZPP_PartitionedPoly_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ZPP_PartitionedPoly_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3abba0e3;
}

bool ZPP_PartitionedPoly_obj::eq( ::zpp_nape::geom::ZPP_PartitionVertex a, ::zpp_nape::geom::ZPP_PartitionVertex b){
            	HX_STACKFRAME(&_hx_pos_543f4038c3f084b2_590_eq)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 590)		HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN( 590)		HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN( 590)		{
HXLINE( 590)			dx = (a->x - b->x);
HXDLIN( 590)			dy = (a->y - b->y);
            		}
HXDLIN( 590)		return (((dx * dx) + (dy * dy)) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionedPoly_obj,eq,return )

void ZPP_PartitionedPoly_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_543f4038c3f084b2_621_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionedPoly_obj,alloc,(void))

void ZPP_PartitionedPoly_obj::free(){
            	HX_STACKFRAME(&_hx_pos_543f4038c3f084b2_624_free)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionedPoly_obj,free,(void))

void ZPP_PartitionedPoly_obj::init( ::zpp_nape::geom::ZPP_GeomVert P){
            	HX_GC_STACKFRAME(&_hx_pos_543f4038c3f084b2_633_init)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(P,"P")
HXLINE( 634)		if (hx::IsNull( P )) {
HXLINE( 634)			return;
            		}
HXLINE( 661)		HX_VARI( Float,area) = ((Float)0.0);
HXLINE( 665)		if (hx::IsNotNull( P )) {
HXLINE( 666)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,nite) = P;
HXLINE( 667)			while(true){
HXLINE( 668)				HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,v) = nite;
HXLINE( 671)				area = (area + (v->x * (v->next->y - v->prev->y)));
HXLINE( 674)				nite = nite->next;
HXLINE( 667)				if (!(hx::IsNotEq( nite,P ))) {
HXLINE( 667)					goto _hx_goto_4;
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 635)		HX_VARI( bool,cw) = ((area * ((Float)0.5)) > ((Float)0.0));
HXLINE( 682)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,p) = P;
HXLINE( 683)		while(true){
HXLINE( 684)			 ::zpp_nape::geom::ZPP_PartitionVertex _hx_tmp;
HXDLIN( 684)			if (cw) {
HXLINE( 685)				HX_VAR(  ::zpp_nape::geom::ZPP_PartitionVertex,ret);
HXDLIN( 685)				if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE( 685)					ret =  ::zpp_nape::geom::ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 685)					ret = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN( 685)					::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = ret->next;
HXDLIN( 685)					ret->next = null();
            				}
HXDLIN( 685)				{
HXLINE( 685)					ret->x = p->x;
HXDLIN( 685)					ret->y = p->y;
            				}
HXDLIN( 685)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,obj) = ret;
HXLINE( 686)				if (hx::IsNull( this->vertices )) {
HXLINE( 686)					this->vertices = (obj->prev = (obj->next = obj));
            				}
            				else {
HXLINE( 688)					obj->prev = this->vertices;
HXLINE( 689)					obj->next = this->vertices->next;
HXLINE( 690)					this->vertices->next->prev = obj;
HXLINE( 691)					this->vertices->next = obj;
            				}
HXLINE( 684)				_hx_tmp = obj;
            			}
            			else {
HXLINE( 696)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,ret1,"ret");
HXDLIN( 696)				if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE( 696)					ret1 =  ::zpp_nape::geom::ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 696)					ret1 = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN( 696)					::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = ret1->next;
HXDLIN( 696)					ret1->next = null();
            				}
HXDLIN( 696)				{
HXLINE( 696)					ret1->x = p->x;
HXDLIN( 696)					ret1->y = p->y;
            				}
HXDLIN( 696)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,obj1,"obj") = ret1;
HXLINE( 697)				if (hx::IsNull( this->vertices )) {
HXLINE( 697)					this->vertices = (obj1->prev = (obj1->next = obj1));
            				}
            				else {
HXLINE( 699)					obj1->next = this->vertices;
HXLINE( 700)					obj1->prev = this->vertices->prev;
HXLINE( 701)					this->vertices->prev->next = obj1;
HXLINE( 702)					this->vertices->prev = obj1;
            				}
HXLINE( 684)				_hx_tmp = obj1;
            			}
HXDLIN( 684)			this->vertices = _hx_tmp;
HXLINE( 706)			this->vertices->forced = p->forced;
HXLINE( 707)			p = p->next;
HXLINE( 683)			if (!(hx::IsNotEq( p,P ))) {
HXLINE( 683)				goto _hx_goto_5;
            			}
            		}
            		_hx_goto_5:;
HXLINE( 710)		this->remove_collinear_vertices();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionedPoly_obj,init,(void))

bool ZPP_PartitionedPoly_obj::remove_collinear_vertices(){
            	HX_STACKFRAME(&_hx_pos_543f4038c3f084b2_712_remove_collinear_vertices)
            	HX_STACK_THIS(this)
HXLINE( 713)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,p) = this->vertices;
HXLINE( 714)		HX_VARI( bool,skip) = true;
HXLINE( 715)		while(true){
HXLINE( 715)			bool _hx_tmp;
HXDLIN( 715)			if (!(skip)) {
HXLINE( 715)				_hx_tmp = hx::IsNotEq( p,this->vertices );
            			}
            			else {
HXLINE( 715)				_hx_tmp = true;
            			}
HXDLIN( 715)			if (!(_hx_tmp)) {
HXLINE( 715)				goto _hx_goto_7;
            			}
HXLINE( 716)			skip = false;
HXLINE( 717)			if (this->eq(p,p->next)) {
HXLINE( 718)				if (hx::IsEq( p,this->vertices )) {
HXLINE( 719)					this->vertices = p->next;
HXLINE( 720)					skip = true;
            				}
HXLINE( 722)				if (p->forced) {
HXLINE( 722)					p->next->forced = true;
            				}
HXLINE( 732)				bool p1;
HXDLIN( 732)				if (hx::IsNotNull( p )) {
HXLINE( 732)					p1 = hx::IsEq( p->prev,p );
            				}
            				else {
HXLINE( 732)					p1 = false;
            				}
HXDLIN( 732)				if (p1) {
HXLINE( 733)					p->next = (p->prev = null());
HXLINE( 734)					{
HXLINE( 735)						HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,o) = p;
HXLINE( 744)						o->helper = null();
HXLINE( 745)						o->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 746)						::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o;
            					}
HXLINE( 751)					p = null();
HXDLIN( 751)					p = p;
            				}
            				else {
HXLINE( 754)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,retnodes) = p->next;
HXLINE( 755)					p->prev->next = p->next;
HXLINE( 756)					p->next->prev = p->prev;
HXLINE( 757)					p->next = (p->prev = null());
HXLINE( 758)					{
HXLINE( 759)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,o1,"o") = p;
HXLINE( 768)						o1->helper = null();
HXLINE( 769)						o1->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 770)						::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o1;
            					}
HXLINE( 775)					p = null();
HXLINE( 776)					p = retnodes;
            				}
HXLINE( 779)				if (hx::IsNull( p )) {
HXLINE( 780)					this->vertices = null();
HXLINE( 781)					goto _hx_goto_7;
            				}
            			}
            			else {
HXLINE( 784)				p = p->next;
            			}
            		}
            		_hx_goto_7:;
HXLINE( 786)		if (hx::IsNull( this->vertices )) {
HXLINE( 786)			return true;
            		}
HXLINE( 787)		HX_VAR( bool,removed);
HXLINE( 788)		while(true){
HXLINE( 789)			removed = false;
HXLINE( 790)			p = this->vertices;
HXLINE( 791)			skip = true;
HXLINE( 792)			while(true){
HXLINE( 792)				bool _hx_tmp1;
HXDLIN( 792)				if (!(skip)) {
HXLINE( 792)					_hx_tmp1 = hx::IsNotEq( p,this->vertices );
            				}
            				else {
HXLINE( 792)					_hx_tmp1 = true;
            				}
HXDLIN( 792)				if (!(_hx_tmp1)) {
HXLINE( 792)					goto _hx_goto_9;
            				}
HXLINE( 793)				skip = false;
HXLINE( 794)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,pre) = p->prev;
HXLINE( 795)				HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 796)				HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 797)				{
HXLINE( 798)					ux = (p->x - pre->x);
HXLINE( 799)					uy = (p->y - pre->y);
            				}
HXLINE( 801)				HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 802)				HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 803)				{
HXLINE( 804)					vx = (p->next->x - p->x);
HXLINE( 805)					vy = (p->next->y - p->y);
            				}
HXLINE( 807)				HX_VARI( Float,crs) = ((vy * ux) - (vx * uy));
HXLINE( 808)				if (((crs * crs) >= (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE( 809)					p = p->next;
            				}
            				else {
HXLINE( 812)					if (hx::IsEq( p,this->vertices )) {
HXLINE( 813)						this->vertices = p->next;
HXLINE( 814)						skip = true;
            					}
HXLINE( 825)					bool p2;
HXDLIN( 825)					if (hx::IsNotNull( p )) {
HXLINE( 825)						p2 = hx::IsEq( p->prev,p );
            					}
            					else {
HXLINE( 825)						p2 = false;
            					}
HXDLIN( 825)					if (p2) {
HXLINE( 826)						p->next = (p->prev = null());
HXLINE( 827)						{
HXLINE( 828)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,o2,"o") = p;
HXLINE( 837)							o2->helper = null();
HXLINE( 838)							o2->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 839)							::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o2;
            						}
HXLINE( 844)						p = null();
HXDLIN( 844)						p = p;
            					}
            					else {
HXLINE( 847)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,retnodes1,"retnodes") = p->next;
HXLINE( 848)						p->prev->next = p->next;
HXLINE( 849)						p->next->prev = p->prev;
HXLINE( 850)						p->next = (p->prev = null());
HXLINE( 851)						{
HXLINE( 852)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,o3,"o") = p;
HXLINE( 861)							o3->helper = null();
HXLINE( 862)							o3->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 863)							::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o3;
            						}
HXLINE( 868)						p = null();
HXLINE( 869)						p = retnodes1;
            					}
HXLINE( 872)					removed = true;
HXLINE( 873)					if (hx::IsNull( p )) {
HXLINE( 874)						removed = false;
HXLINE( 875)						this->vertices = null();
HXLINE( 876)						goto _hx_goto_9;
            					}
            				}
            			}
            			_hx_goto_9:;
HXLINE( 788)			if (!(removed)) {
HXLINE( 788)				goto _hx_goto_8;
            			}
            		}
            		_hx_goto_8:;
HXLINE( 882)		return hx::IsNull( this->vertices );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionedPoly_obj,remove_collinear_vertices,return )

void ZPP_PartitionedPoly_obj::add_diagonal( ::zpp_nape::geom::ZPP_PartitionVertex p, ::zpp_nape::geom::ZPP_PartitionVertex q){
            	HX_STACKFRAME(&_hx_pos_543f4038c3f084b2_884_add_diagonal)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 885)		p->diagonals->add(q);
HXLINE( 886)		q->diagonals->add(p);
HXLINE( 887)		p->forced = (q->forced = true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionedPoly_obj,add_diagonal,(void))

 ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly ZPP_PartitionedPoly_obj::extract_partitions( ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly ret){
            	HX_GC_STACKFRAME(&_hx_pos_543f4038c3f084b2_895_extract_partitions)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ret,"ret")
HXLINE( 896)		if (hx::IsNull( ret )) {
HXLINE( 896)			ret =  ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
HXLINE( 897)		if (hx::IsNotNull( this->vertices )) {
HXLINE( 898)			{
HXLINE( 899)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,F) = this->vertices;
HXLINE( 900)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,L) = this->vertices;
HXLINE( 901)				if (hx::IsNotNull( F )) {
HXLINE( 902)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,nite) = F;
HXLINE( 903)					while(true){
HXLINE( 906)						nite->sort();
HXLINE( 908)						nite = nite->next;
HXLINE( 903)						if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 903)							goto _hx_goto_12;
            						}
            					}
            					_hx_goto_12:;
            				}
            			}
HXLINE( 913)			this->pull_partitions(this->vertices,ret);
HXLINE( 915)			while(hx::IsNotNull( this->vertices )){
HXLINE( 924)				 ::zpp_nape::geom::ZPP_PartitionVertex _hx_tmp;
HXDLIN( 924)				bool _hx_tmp1;
HXDLIN( 924)				if (hx::IsNotNull( this->vertices )) {
HXLINE( 924)					_hx_tmp1 = hx::IsEq( this->vertices->prev,this->vertices );
            				}
            				else {
HXLINE( 924)					_hx_tmp1 = false;
            				}
HXDLIN( 924)				if (_hx_tmp1) {
HXLINE( 925)					this->vertices->next = (this->vertices->prev = null());
HXLINE( 926)					{
HXLINE( 927)						HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,o) = this->vertices;
HXLINE( 936)						o->helper = null();
HXLINE( 937)						o->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 938)						::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o;
            					}
HXLINE( 924)					_hx_tmp = (this->vertices = null());
            				}
            				else {
HXLINE( 946)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,retnodes) = this->vertices->next;
HXLINE( 947)					this->vertices->prev->next = this->vertices->next;
HXLINE( 948)					this->vertices->next->prev = this->vertices->prev;
HXLINE( 949)					this->vertices->next = (this->vertices->prev = null());
HXLINE( 950)					{
HXLINE( 951)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,o1,"o") = this->vertices;
HXLINE( 960)						o1->helper = null();
HXLINE( 961)						o1->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 962)						::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o1;
            					}
HXLINE( 967)					this->vertices = null();
HXLINE( 924)					_hx_tmp = retnodes;
            				}
HXLINE( 915)				this->vertices = _hx_tmp;
            			}
HXLINE( 972)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,pre) = null();
HXLINE( 973)			{
HXLINE( 974)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,cx_ite) = ret->head;
HXLINE( 975)				while(hx::IsNotNull( cx_ite )){
HXLINE( 977)					{
HXLINE( 978)						if (cx_ite->elt->remove_collinear_vertices()) {
HXLINE( 979)							ret->erase(pre);
HXLINE( 980)							continue;
            						}
HXLINE( 982)						pre = cx_ite;
            					}
HXLINE( 984)					cx_ite = cx_ite->next;
            				}
            			}
            		}
HXLINE( 988)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionedPoly_obj,extract_partitions,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_PartitionedPoly_obj::pull_partitions( ::zpp_nape::geom::ZPP_PartitionVertex start, ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly ret){
            	HX_GC_STACKFRAME(&_hx_pos_543f4038c3f084b2_990_pull_partitions)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(ret,"ret")
HXLINE( 991)		HX_VAR(  ::zpp_nape::geom::ZPP_PartitionedPoly,poly);
HXLINE( 993)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool )) {
HXLINE( 994)			poly =  ::zpp_nape::geom::ZPP_PartitionedPoly_obj::__alloc( HX_CTX ,null());
            		}
            		else {
HXLINE(1000)			poly = ::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool;
HXLINE(1001)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool = poly->next;
HXLINE(1002)			poly->next = null();
            		}
HXLINE(1009)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,next) = start;
HXLINE(1010)		while(true){
HXLINE(1012)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,ret1,"ret");
HXDLIN(1012)			if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE(1012)				ret1 =  ::zpp_nape::geom::ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(1012)				ret1 = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXDLIN(1012)				::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = ret1->next;
HXDLIN(1012)				ret1->next = null();
            			}
HXDLIN(1012)			{
HXLINE(1012)				ret1->x = next->x;
HXDLIN(1012)				ret1->y = next->y;
            			}
HXDLIN(1012)			ret1->forced = next->forced;
HXDLIN(1012)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,obj) = ret1;
HXLINE(1013)			if (hx::IsNull( poly->vertices )) {
HXLINE(1013)				poly->vertices = (obj->prev = (obj->next = obj));
            			}
            			else {
HXLINE(1015)				obj->prev = poly->vertices;
HXLINE(1016)				obj->next = poly->vertices->next;
HXLINE(1017)				poly->vertices->next->prev = obj;
HXLINE(1018)				poly->vertices->next = obj;
            			}
HXLINE(1011)			poly->vertices = obj;
HXLINE(1022)			poly->vertices->forced = next->forced;
HXLINE(1023)			if (hx::IsNotNull( next->diagonals->head )) {
HXLINE(1024)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex,_this) = next->diagonals;
HXDLIN(1024)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,ret2,"ret") = _this->head->elt;
HXDLIN(1024)				_this->pop();
HXLINE(1025)				if (hx::IsEq( ret2,start )) {
HXLINE(1025)					goto _hx_goto_16;
            				}
            				else {
HXLINE(1026)					next = this->pull_partitions(next,ret);
            				}
            			}
            			else {
HXLINE(1028)				next = next->next;
            			}
HXLINE(1010)			if (!(hx::IsNotEq( next,start ))) {
HXLINE(1010)				goto _hx_goto_16;
            			}
            		}
            		_hx_goto_16:;
HXLINE(1110)		HX_VARI( Float,area) = ((Float)0.0);
HXLINE(1111)		{
HXLINE(1112)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,F) = poly->vertices;
HXLINE(1113)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,L) = poly->vertices;
HXLINE(1114)			if (hx::IsNotNull( F )) {
HXLINE(1115)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,nite) = F;
HXLINE(1116)				while(true){
HXLINE(1117)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,v) = nite;
HXLINE(1120)					area = (area + (v->x * (v->next->y - v->prev->y)));
HXLINE(1123)					nite = nite->next;
HXLINE(1116)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1116)						goto _hx_goto_17;
            					}
            				}
            				_hx_goto_17:;
            			}
            		}
HXLINE(1085)		if (((area * ((Float)0.5)) != (int)0)) {
HXLINE(1129)			ret->add(poly);
            		}
HXLINE(1130)		return next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionedPoly_obj,pull_partitions,return )

 ::zpp_nape::util::ZNPList_ZPP_GeomVert ZPP_PartitionedPoly_obj::extract( ::zpp_nape::util::ZNPList_ZPP_GeomVert ret){
            	HX_GC_STACKFRAME(&_hx_pos_543f4038c3f084b2_1138_extract)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ret,"ret")
HXLINE(1139)		if (hx::IsNull( ret )) {
HXLINE(1139)			ret =  ::zpp_nape::util::ZNPList_ZPP_GeomVert_obj::__alloc( HX_CTX );
            		}
HXLINE(1140)		if (hx::IsNotNull( this->vertices )) {
HXLINE(1141)			{
HXLINE(1142)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,F) = this->vertices;
HXLINE(1143)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,L) = this->vertices;
HXLINE(1144)				if (hx::IsNotNull( F )) {
HXLINE(1145)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,nite) = F;
HXLINE(1146)					while(true){
HXLINE(1149)						nite->sort();
HXLINE(1151)						nite = nite->next;
HXLINE(1146)						if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1146)							goto _hx_goto_19;
            						}
            					}
            					_hx_goto_19:;
            				}
            			}
HXLINE(1156)			this->pull(this->vertices,ret);
HXLINE(1158)			while(hx::IsNotNull( this->vertices )){
HXLINE(1167)				 ::zpp_nape::geom::ZPP_PartitionVertex _hx_tmp;
HXDLIN(1167)				bool _hx_tmp1;
HXDLIN(1167)				if (hx::IsNotNull( this->vertices )) {
HXLINE(1167)					_hx_tmp1 = hx::IsEq( this->vertices->prev,this->vertices );
            				}
            				else {
HXLINE(1167)					_hx_tmp1 = false;
            				}
HXDLIN(1167)				if (_hx_tmp1) {
HXLINE(1168)					this->vertices->next = (this->vertices->prev = null());
HXLINE(1169)					{
HXLINE(1170)						HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,o) = this->vertices;
HXLINE(1179)						o->helper = null();
HXLINE(1180)						o->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(1181)						::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o;
            					}
HXLINE(1167)					_hx_tmp = (this->vertices = null());
            				}
            				else {
HXLINE(1189)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,retnodes) = this->vertices->next;
HXLINE(1190)					this->vertices->prev->next = this->vertices->next;
HXLINE(1191)					this->vertices->next->prev = this->vertices->prev;
HXLINE(1192)					this->vertices->next = (this->vertices->prev = null());
HXLINE(1193)					{
HXLINE(1194)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,o1,"o") = this->vertices;
HXLINE(1203)						o1->helper = null();
HXLINE(1204)						o1->next = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE(1205)						::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = o1;
            					}
HXLINE(1210)					this->vertices = null();
HXLINE(1167)					_hx_tmp = retnodes;
            				}
HXLINE(1158)				this->vertices = _hx_tmp;
            			}
            		}
HXLINE(1216)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionedPoly_obj,extract,return )

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_PartitionedPoly_obj::pull( ::zpp_nape::geom::ZPP_PartitionVertex start, ::zpp_nape::util::ZNPList_ZPP_GeomVert ret){
            	HX_GC_STACKFRAME(&_hx_pos_543f4038c3f084b2_1218_pull)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(ret,"ret")
HXLINE(1219)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,poly) = null();
HXLINE(1220)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,next) = start;
HXLINE(1221)		while(true){
HXLINE(1223)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret1,"ret");
HXDLIN(1223)			{
HXLINE(1223)				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1223)					ret1 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1223)					ret1 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1223)					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret1->next;
HXDLIN(1223)					ret1->next = null();
            				}
HXDLIN(1223)				ret1->forced = false;
            			}
HXDLIN(1223)			{
HXLINE(1223)				ret1->x = next->x;
HXDLIN(1223)				ret1->y = next->y;
            			}
HXDLIN(1223)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,obj) = ret1;
HXLINE(1224)			if (hx::IsNull( poly )) {
HXLINE(1224)				poly = (obj->prev = (obj->next = obj));
            			}
            			else {
HXLINE(1226)				obj->prev = poly;
HXLINE(1227)				obj->next = poly->next;
HXLINE(1228)				poly->next->prev = obj;
HXLINE(1229)				poly->next = obj;
            			}
HXLINE(1231)			poly = obj;
HXLINE(1233)			obj->forced = next->forced;
HXLINE(1234)			if (hx::IsNotNull( next->diagonals->head )) {
HXLINE(1235)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex,_this) = next->diagonals;
HXDLIN(1235)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,ret2,"ret") = _this->head->elt;
HXDLIN(1235)				_this->pop();
HXLINE(1236)				if (hx::IsEq( ret2,start )) {
HXLINE(1237)					goto _hx_goto_22;
            				}
            				else {
HXLINE(1239)					next = this->pull(next,ret);
            				}
            			}
            			else {
HXLINE(1241)				next = next->next;
            			}
HXLINE(1221)			if (!(hx::IsNotEq( next,start ))) {
HXLINE(1221)				goto _hx_goto_22;
            			}
            		}
            		_hx_goto_22:;
HXLINE(1323)		HX_VARI( Float,area) = ((Float)0.0);
HXLINE(1324)		{
HXLINE(1325)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,F) = poly;
HXLINE(1326)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,L) = poly;
HXLINE(1327)			if (hx::IsNotNull( F )) {
HXLINE(1328)				HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,nite) = F;
HXLINE(1329)				while(true){
HXLINE(1330)					HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,v) = nite;
HXLINE(1333)					area = (area + (v->x * (v->next->y - v->prev->y)));
HXLINE(1336)					nite = nite->next;
HXLINE(1329)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE(1329)						goto _hx_goto_23;
            					}
            				}
            				_hx_goto_23:;
            			}
            		}
HXLINE(1298)		HX_VARI_NAME( Float,area1,"area") = (area * ((Float)0.5));
HXLINE(1343)		if (((area1 * area1) >= (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1345)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,p) = poly;
HXLINE(1346)			HX_VARI( bool,skip) = true;
HXLINE(1347)			while(true){
HXLINE(1347)				bool _hx_tmp;
HXDLIN(1347)				if (!(skip)) {
HXLINE(1347)					_hx_tmp = hx::IsNotEq( p,poly );
            				}
            				else {
HXLINE(1347)					_hx_tmp = true;
            				}
HXDLIN(1347)				if (!(_hx_tmp)) {
HXLINE(1347)					goto _hx_goto_24;
            				}
HXLINE(1348)				skip = false;
HXLINE(1349)				HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN(1349)				HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN(1349)				{
HXLINE(1349)					dx = (p->x - p->next->x);
HXDLIN(1349)					dy = (p->y - p->next->y);
            				}
HXDLIN(1349)				if ((((dx * dx) + (dy * dy)) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1350)					if (hx::IsEq( p,poly )) {
HXLINE(1351)						poly = p->next;
HXLINE(1352)						skip = true;
            					}
HXLINE(1354)					if (p->forced) {
HXLINE(1354)						p->next->forced = true;
            					}
HXLINE(1364)					bool p1;
HXDLIN(1364)					if (hx::IsNotNull( p )) {
HXLINE(1364)						p1 = hx::IsEq( p->prev,p );
            					}
            					else {
HXLINE(1364)						p1 = false;
            					}
HXDLIN(1364)					if (p1) {
HXLINE(1365)						p->next = (p->prev = null());
HXLINE(1367)						p = null();
HXDLIN(1367)						p = p;
            					}
            					else {
HXLINE(1370)						HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,retnodes) = p->next;
HXLINE(1371)						p->prev->next = p->next;
HXLINE(1372)						p->next->prev = p->prev;
HXLINE(1373)						p->next = (p->prev = null());
HXLINE(1375)						p = null();
HXLINE(1376)						p = retnodes;
            					}
HXLINE(1379)					if (hx::IsNull( p )) {
HXLINE(1380)						poly = null();
HXLINE(1381)						goto _hx_goto_24;
            					}
            				}
            				else {
HXLINE(1384)					p = p->next;
            				}
            			}
            			_hx_goto_24:;
HXLINE(1386)			if (hx::IsNotNull( poly )) {
HXLINE(1387)				HX_VAR( bool,removed);
HXLINE(1388)				while(true){
HXLINE(1389)					removed = false;
HXLINE(1390)					p = poly;
HXLINE(1391)					skip = true;
HXLINE(1392)					while(true){
HXLINE(1392)						bool _hx_tmp1;
HXDLIN(1392)						if (!(skip)) {
HXLINE(1392)							_hx_tmp1 = hx::IsNotEq( p,poly );
            						}
            						else {
HXLINE(1392)							_hx_tmp1 = true;
            						}
HXDLIN(1392)						if (!(_hx_tmp1)) {
HXLINE(1392)							goto _hx_goto_26;
            						}
HXLINE(1393)						skip = false;
HXLINE(1394)						HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,pre) = p->prev;
HXLINE(1395)						HX_VARI( Float,ux) = ((Float)0.0);
HXLINE(1396)						HX_VARI( Float,uy) = ((Float)0.0);
HXLINE(1397)						{
HXLINE(1398)							ux = (p->x - pre->x);
HXLINE(1399)							uy = (p->y - pre->y);
            						}
HXLINE(1401)						HX_VARI( Float,vx) = ((Float)0.0);
HXLINE(1402)						HX_VARI( Float,vy) = ((Float)0.0);
HXLINE(1403)						{
HXLINE(1404)							vx = (p->next->x - p->x);
HXLINE(1405)							vy = (p->next->y - p->y);
            						}
HXLINE(1407)						HX_VARI( Float,crs) = ((vy * ux) - (vx * uy));
HXLINE(1408)						if (((crs * crs) >= (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1409)							p = p->next;
            						}
            						else {
HXLINE(1412)							if (hx::IsEq( p,poly )) {
HXLINE(1413)								poly = p->next;
HXLINE(1414)								skip = true;
            							}
HXLINE(1425)							bool p2;
HXDLIN(1425)							if (hx::IsNotNull( p )) {
HXLINE(1425)								p2 = hx::IsEq( p->prev,p );
            							}
            							else {
HXLINE(1425)								p2 = false;
            							}
HXDLIN(1425)							if (p2) {
HXLINE(1426)								p->next = (p->prev = null());
HXLINE(1428)								p = null();
HXDLIN(1428)								p = p;
            							}
            							else {
HXLINE(1431)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,retnodes1,"retnodes") = p->next;
HXLINE(1432)								p->prev->next = p->next;
HXLINE(1433)								p->next->prev = p->prev;
HXLINE(1434)								p->next = (p->prev = null());
HXLINE(1436)								p = null();
HXLINE(1437)								p = retnodes1;
            							}
HXLINE(1440)							removed = true;
HXLINE(1441)							if (hx::IsNull( p )) {
HXLINE(1442)								removed = false;
HXLINE(1443)								poly = null();
HXLINE(1444)								goto _hx_goto_26;
            							}
            						}
            					}
            					_hx_goto_26:;
HXLINE(1388)					if (!(removed)) {
HXLINE(1388)						goto _hx_goto_25;
            					}
            				}
            				_hx_goto_25:;
            			}
HXLINE(1344)			if (hx::IsNotNull( poly )) {
HXLINE(1453)				ret->add(poly);
            			}
            		}
HXLINE(1456)		return next;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionedPoly_obj,pull,return )

 ::zpp_nape::geom::ZPP_PartitionedPoly ZPP_PartitionedPoly_obj::zpp_pool;

 ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly ZPP_PartitionedPoly_obj::sharedPPList;

 ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly ZPP_PartitionedPoly_obj::getSharedPP(){
            	HX_GC_STACKFRAME(&_hx_pos_543f4038c3f084b2_891_getSharedPP)
HXLINE( 892)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList )) {
HXLINE( 892)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList =  ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly_obj::__alloc( HX_CTX );
            		}
HXLINE( 893)		return ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedPPList;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionedPoly_obj,getSharedPP,return )

 ::zpp_nape::util::ZNPList_ZPP_GeomVert ZPP_PartitionedPoly_obj::sharedGVList;

 ::zpp_nape::util::ZNPList_ZPP_GeomVert ZPP_PartitionedPoly_obj::getShared(){
            	HX_GC_STACKFRAME(&_hx_pos_543f4038c3f084b2_1134_getShared)
HXLINE(1135)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList )) {
HXLINE(1135)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList =  ::zpp_nape::util::ZNPList_ZPP_GeomVert_obj::__alloc( HX_CTX );
            		}
HXLINE(1136)		return ::zpp_nape::geom::ZPP_PartitionedPoly_obj::sharedGVList;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionedPoly_obj,getShared,return )


hx::ObjectPtr< ZPP_PartitionedPoly_obj > ZPP_PartitionedPoly_obj::__new( ::zpp_nape::geom::ZPP_GeomVert P) {
	hx::ObjectPtr< ZPP_PartitionedPoly_obj > __this = new ZPP_PartitionedPoly_obj();
	__this->__construct(P);
	return __this;
}

hx::ObjectPtr< ZPP_PartitionedPoly_obj > ZPP_PartitionedPoly_obj::__alloc(hx::Ctx *_hx_ctx, ::zpp_nape::geom::ZPP_GeomVert P) {
	ZPP_PartitionedPoly_obj *__this = (ZPP_PartitionedPoly_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_PartitionedPoly_obj), true, "zpp_nape.geom.ZPP_PartitionedPoly"));
	*(void **)__this = ZPP_PartitionedPoly_obj::_hx_vtable;
	__this->__construct(P);
	return __this;
}

ZPP_PartitionedPoly_obj::ZPP_PartitionedPoly_obj()
{
}

void ZPP_PartitionedPoly_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_PartitionedPoly);
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_END_CLASS();
}

void ZPP_PartitionedPoly_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(next,"next");
}

hx::Val ZPP_PartitionedPoly_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"eq") ) { return hx::Val( eq_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"pull") ) { return hx::Val( pull_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"extract") ) { return hx::Val( extract_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return hx::Val( vertices); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"add_diagonal") ) { return hx::Val( add_diagonal_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pull_partitions") ) { return hx::Val( pull_partitions_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"extract_partitions") ) { return hx::Val( extract_partitions_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"remove_collinear_vertices") ) { return hx::Val( remove_collinear_vertices_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_PartitionedPoly_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getShared") ) { outValue = getShared_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getSharedPP") ) { outValue = getSharedPP_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sharedPPList") ) { outValue = sharedPPList; return true; }
		if (HX_FIELD_EQ(inName,"sharedGVList") ) { outValue = sharedGVList; return true; }
	}
	return false;
}

hx::Val ZPP_PartitionedPoly_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionedPoly >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_PartitionedPoly_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_PartitionedPoly >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sharedPPList") ) { sharedPPList=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_PartitionedPoly >(); return true; }
		if (HX_FIELD_EQ(inName,"sharedGVList") ) { sharedGVList=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_GeomVert >(); return true; }
	}
	return false;
}

void ZPP_PartitionedPoly_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_PartitionedPoly_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_PartitionedPoly_obj,vertices),HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionedPoly*/ ,(int)offsetof(ZPP_PartitionedPoly_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_PartitionedPoly_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionedPoly*/ ,(void *) &ZPP_PartitionedPoly_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_PartitionedPoly*/ ,(void *) &ZPP_PartitionedPoly_obj::sharedPPList,HX_HCSTRING("sharedPPList","\xe3","\xf6","\x82","\xbd")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_GeomVert*/ ,(void *) &ZPP_PartitionedPoly_obj::sharedGVList,HX_HCSTRING("sharedGVList","\x92","\x32","\xb4","\x98")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_PartitionedPoly_obj_sMemberFields[] = {
	HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"),
	HX_HCSTRING("eq","\x6c","\x58","\x00","\x00"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("remove_collinear_vertices","\xee","\x6a","\xa4","\x07"),
	HX_HCSTRING("add_diagonal","\x13","\xbe","\xaf","\x6b"),
	HX_HCSTRING("extract_partitions","\xc7","\x18","\xea","\x01"),
	HX_HCSTRING("pull_partitions","\xc3","\x08","\xbc","\x8d"),
	HX_HCSTRING("extract","\x41","\xb5","\xea","\x78"),
	HX_HCSTRING("pull","\xc5","\x0b","\x61","\x4a"),
	::String(null()) };

static void ZPP_PartitionedPoly_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_PartitionedPoly_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_PartitionedPoly_obj::zpp_pool,"zpp_pool");
	HX_MARK_MEMBER_NAME(ZPP_PartitionedPoly_obj::sharedPPList,"sharedPPList");
	HX_MARK_MEMBER_NAME(ZPP_PartitionedPoly_obj::sharedGVList,"sharedGVList");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_PartitionedPoly_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_PartitionedPoly_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_PartitionedPoly_obj::zpp_pool,"zpp_pool");
	HX_VISIT_MEMBER_NAME(ZPP_PartitionedPoly_obj::sharedPPList,"sharedPPList");
	HX_VISIT_MEMBER_NAME(ZPP_PartitionedPoly_obj::sharedGVList,"sharedGVList");
};

#endif

hx::Class ZPP_PartitionedPoly_obj::__mClass;

static ::String ZPP_PartitionedPoly_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("sharedPPList","\xe3","\xf6","\x82","\xbd"),
	HX_HCSTRING("getSharedPP","\x9b","\x1a","\xb0","\x6b"),
	HX_HCSTRING("sharedGVList","\x92","\x32","\xb4","\x98"),
	HX_HCSTRING("getShared","\xdb","\xe7","\x81","\x99"),
	::String(null())
};

void ZPP_PartitionedPoly_obj::__register()
{
	hx::Object *dummy = new ZPP_PartitionedPoly_obj;
	ZPP_PartitionedPoly_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_PartitionedPoly","\x3f","\xd9","\xdf","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_PartitionedPoly_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_PartitionedPoly_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_PartitionedPoly_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_PartitionedPoly_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_PartitionedPoly_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_PartitionedPoly_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_PartitionedPoly_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_PartitionedPoly_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_PartitionedPoly_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_PartitionedPoly_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_543f4038c3f084b2_596_boot)
HXLINE( 596)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
