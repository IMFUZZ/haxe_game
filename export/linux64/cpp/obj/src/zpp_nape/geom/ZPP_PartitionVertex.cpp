// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPList_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPNode_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionVertex
#include <zpp_nape/util/ZPP_Set_ZPP_PartitionVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_174_new,"zpp_nape.geom.ZPP_PartitionVertex","new",0x2a87476a,"zpp_nape.geom.ZPP_PartitionVertex.new","zpp_nape/geom/PartitionedPoly.hx",174,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_216_alloc,"zpp_nape.geom.ZPP_PartitionVertex","alloc",0xd8da71ff,"zpp_nape.geom.ZPP_PartitionVertex.alloc","zpp_nape/geom/PartitionedPoly.hx",216,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_219_free,"zpp_nape.geom.ZPP_PartitionVertex","free",0x06974e62,"zpp_nape.geom.ZPP_PartitionVertex.free","zpp_nape/geom/PartitionedPoly.hx",219,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_272_copy,"zpp_nape.geom.ZPP_PartitionVertex","copy",0x04996d6b,"zpp_nape.geom.ZPP_PartitionVertex.copy","zpp_nape/geom/PartitionedPoly.hx",272,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_314_sort,"zpp_nape.geom.ZPP_PartitionVertex","sort",0x0f2cd914,"zpp_nape.geom.ZPP_PartitionVertex.sort","zpp_nape/geom/PartitionedPoly.hx",314,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_230_get,"zpp_nape.geom.ZPP_PartitionVertex","get",0x2a81f7a0,"zpp_nape.geom.ZPP_PartitionVertex.get","zpp_nape/geom/PartitionedPoly.hx",230,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_493_rightdistance,"zpp_nape.geom.ZPP_PartitionVertex","rightdistance",0x74d5429b,"zpp_nape.geom.ZPP_PartitionVertex.rightdistance","zpp_nape/geom/PartitionedPoly.hx",493,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_510_vert_lt,"zpp_nape.geom.ZPP_PartitionVertex","vert_lt",0xae5048a0,"zpp_nape.geom.ZPP_PartitionVertex.vert_lt","zpp_nape/geom/PartitionedPoly.hx",510,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_518_edge_swap,"zpp_nape.geom.ZPP_PartitionVertex","edge_swap",0x1a0ddb9f,"zpp_nape.geom.ZPP_PartitionVertex.edge_swap","zpp_nape/geom/PartitionedPoly.hx",518,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_523_edge_lt,"zpp_nape.geom.ZPP_PartitionVertex","edge_lt",0x25b57494,"zpp_nape.geom.ZPP_PartitionVertex.edge_lt","zpp_nape/geom/PartitionedPoly.hx",523,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_176_boot,"zpp_nape.geom.ZPP_PartitionVertex","boot",0x03f035e8,"zpp_nape.geom.ZPP_PartitionVertex.boot","zpp_nape/geom/PartitionedPoly.hx",176,0x0d312f3a)
HX_DEFINE_STACK_FRAME(_hx_pos_8da00814ed838b44_185_boot,"zpp_nape.geom.ZPP_PartitionVertex","boot",0x03f035e8,"zpp_nape.geom.ZPP_PartitionVertex.boot","zpp_nape/geom/PartitionedPoly.hx",185,0x0d312f3a)
namespace zpp_nape{
namespace geom{

void ZPP_PartitionVertex_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_8da00814ed838b44_174_new)
            	HX_STACK_THIS(this)
HXLINE( 517)		this->node = null();
HXLINE( 210)		this->prev = null();
HXLINE( 209)		this->next = null();
HXLINE( 184)		this->rightchain = false;
HXLINE( 183)		this->helper = null();
HXLINE( 182)		this->type = (int)0;
HXLINE( 181)		this->diagonals = null();
HXLINE( 180)		this->forced = false;
HXLINE( 179)		this->y = ((Float)0.0);
HXLINE( 178)		this->x = ((Float)0.0);
HXLINE( 177)		this->mag = ((Float)0);
HXLINE( 175)		this->id = (int)0;
HXLINE( 212)		this->id = ::zpp_nape::geom::ZPP_PartitionVertex_obj::nextId++;
HXLINE( 213)		this->diagonals =  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            	}

Dynamic ZPP_PartitionVertex_obj::__CreateEmpty() { return new ZPP_PartitionVertex_obj; }

void *ZPP_PartitionVertex_obj::_hx_vtable = 0;

Dynamic ZPP_PartitionVertex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_PartitionVertex_obj > _hx_result = new ZPP_PartitionVertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_PartitionVertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x213c1838;
}

void ZPP_PartitionVertex_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_216_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionVertex_obj,alloc,(void))

void ZPP_PartitionVertex_obj::free(){
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_219_free)
            	HX_STACK_THIS(this)
HXLINE( 219)		this->helper = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionVertex_obj,free,(void))

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_PartitionVertex_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_8da00814ed838b44_272_copy)
            	HX_STACK_THIS(this)
HXLINE( 273)		HX_VAR(  ::zpp_nape::geom::ZPP_PartitionVertex,ret);
HXLINE( 275)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE( 276)			ret =  ::zpp_nape::geom::ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 282)			ret = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 283)			::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = ret->next;
HXLINE( 284)			ret->next = null();
            		}
HXLINE( 291)		{
HXLINE( 292)			ret->x = this->x;
HXLINE( 293)			ret->y = this->y;
            		}
HXLINE( 311)		ret->forced = this->forced;
HXLINE( 312)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionVertex_obj,copy,return )

void ZPP_PartitionVertex_obj::sort(){
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_314_sort)
            	HX_STACK_THIS(this)
HXLINE( 315)		HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 316)		HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 317)		HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 318)		HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 320)		{
HXLINE( 321)			ux = (this->prev->x - this->x);
HXLINE( 322)			uy = (this->prev->y - this->y);
            		}
HXLINE( 324)		{
HXLINE( 325)			vx = (this->next->x - this->x);
HXLINE( 326)			vy = (this->next->y - this->y);
            		}
HXLINE( 328)		HX_VARI( Float,ret) = ((vy * ux) - (vx * uy));
HXLINE( 319)		HX_VAR( int,vorient);
HXLINE( 329)		if ((ret > (int)0)) {
HXLINE( 319)			vorient = (int)-1;
            		}
            		else {
HXLINE( 329)			if ((ret == (int)0)) {
HXLINE( 319)				vorient = (int)0;
            			}
            			else {
HXLINE( 319)				vorient = (int)1;
            			}
            		}
HXLINE( 339)		{
HXLINE( 340)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex,xxlist) = this->diagonals;
HXLINE( 341)			bool _hx_tmp;
HXDLIN( 341)			if (hx::IsNotNull( xxlist->head )) {
HXLINE( 341)				_hx_tmp = hx::IsNotNull( xxlist->head->next );
            			}
            			else {
HXLINE( 341)				_hx_tmp = false;
            			}
HXDLIN( 341)			if (_hx_tmp) {
HXLINE( 342)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,head) = xxlist->head;
HXLINE( 343)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,tail) = null();
HXLINE( 344)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,left) = null();
HXLINE( 345)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,right) = null();
HXLINE( 346)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,nxt) = null();
HXLINE( 347)				HX_VARI( int,listSize) = (int)1;
HXLINE( 348)				HX_VAR( int,numMerges);
HXDLIN( 348)				HX_VAR( int,leftSize);
HXDLIN( 348)				HX_VAR( int,rightSize);
HXLINE( 349)				while(true){
HXLINE( 350)					numMerges = (int)0;
HXLINE( 351)					left = head;
HXLINE( 352)					head = null();
HXDLIN( 352)					tail = head;
HXLINE( 353)					while(hx::IsNotNull( left )){
HXLINE( 354)						numMerges = (numMerges + (int)1);
HXLINE( 355)						right = left;
HXLINE( 356)						leftSize = (int)0;
HXLINE( 357)						rightSize = listSize;
HXLINE( 358)						while(true){
HXLINE( 358)							bool _hx_tmp1;
HXDLIN( 358)							if (hx::IsNotNull( right )) {
HXLINE( 358)								_hx_tmp1 = (leftSize < listSize);
            							}
            							else {
HXLINE( 358)								_hx_tmp1 = false;
            							}
HXDLIN( 358)							if (!(_hx_tmp1)) {
HXLINE( 358)								goto _hx_goto_6;
            							}
HXLINE( 359)							leftSize = (leftSize + (int)1);
HXLINE( 360)							right = right->next;
            						}
            						_hx_goto_6:;
HXLINE( 362)						while(true){
HXLINE( 362)							bool _hx_tmp2;
HXDLIN( 362)							if ((leftSize <= (int)0)) {
HXLINE( 362)								if ((rightSize > (int)0)) {
HXLINE( 362)									_hx_tmp2 = hx::IsNotNull( right );
            								}
            								else {
HXLINE( 362)									_hx_tmp2 = false;
            								}
            							}
            							else {
HXLINE( 362)								_hx_tmp2 = true;
            							}
HXDLIN( 362)							if (!(_hx_tmp2)) {
HXLINE( 362)								goto _hx_goto_7;
            							}
HXLINE( 363)							if ((leftSize == (int)0)) {
HXLINE( 364)								nxt = right;
HXLINE( 365)								right = right->next;
HXLINE( 366)								rightSize = (rightSize - (int)1);
            							}
            							else {
HXLINE( 368)								bool _hx_tmp3;
HXDLIN( 368)								if ((rightSize != (int)0)) {
HXLINE( 368)									_hx_tmp3 = hx::IsNull( right );
            								}
            								else {
HXLINE( 368)									_hx_tmp3 = true;
            								}
HXDLIN( 368)								if (_hx_tmp3) {
HXLINE( 369)									nxt = left;
HXLINE( 370)									left = left->next;
HXLINE( 371)									leftSize = (leftSize - (int)1);
            								}
            								else {
HXLINE( 373)									bool _hx_tmp4;
HXDLIN( 373)									if ((vorient == (int)1)) {
HXLINE( 376)										{
HXLINE( 377)											ux = (left->elt->x - this->x);
HXLINE( 378)											uy = (left->elt->y - this->y);
            										}
HXLINE( 380)										{
HXLINE( 381)											vx = (right->elt->x - this->x);
HXLINE( 382)											vy = (right->elt->y - this->y);
            										}
HXLINE( 384)										HX_VARI_NAME( Float,ret1,"ret") = ((vy * ux) - (vx * uy));
HXLINE( 375)										int _hx_tmp5;
HXLINE( 385)										if ((ret1 > (int)0)) {
HXLINE( 375)											_hx_tmp5 = (int)-1;
            										}
            										else {
HXLINE( 385)											if ((ret1 == (int)0)) {
HXLINE( 375)												_hx_tmp5 = (int)0;
            											}
            											else {
HXLINE( 375)												_hx_tmp5 = (int)1;
            											}
            										}
HXLINE( 373)										_hx_tmp4 = (_hx_tmp5 == (int)1);
            									}
            									else {
HXLINE( 390)										{
HXLINE( 391)											ux = (this->prev->x - this->x);
HXLINE( 392)											uy = (this->prev->y - this->y);
            										}
HXLINE( 394)										{
HXLINE( 395)											vx = (left->elt->x - this->x);
HXLINE( 396)											vy = (left->elt->y - this->y);
            										}
HXLINE( 398)										HX_VARI_NAME( Float,ret2,"ret") = ((vy * ux) - (vx * uy));
HXLINE( 389)										HX_VAR( int,d1);
HXLINE( 399)										if ((ret2 > (int)0)) {
HXLINE( 389)											d1 = (int)-1;
            										}
            										else {
HXLINE( 399)											if ((ret2 == (int)0)) {
HXLINE( 389)												d1 = (int)0;
            											}
            											else {
HXLINE( 389)												d1 = (int)1;
            											}
            										}
HXLINE( 402)										{
HXLINE( 403)											ux = (this->prev->x - this->x);
HXLINE( 404)											uy = (this->prev->y - this->y);
            										}
HXLINE( 406)										{
HXLINE( 407)											vx = (right->elt->x - this->x);
HXLINE( 408)											vy = (right->elt->y - this->y);
            										}
HXLINE( 410)										HX_VARI_NAME( Float,ret3,"ret") = ((vy * ux) - (vx * uy));
HXLINE( 401)										HX_VAR( int,d2);
HXLINE( 411)										if ((ret3 > (int)0)) {
HXLINE( 401)											d2 = (int)-1;
            										}
            										else {
HXLINE( 411)											if ((ret3 == (int)0)) {
HXLINE( 401)												d2 = (int)0;
            											}
            											else {
HXLINE( 401)												d2 = (int)1;
            											}
            										}
HXLINE( 413)										bool _hx_tmp6;
HXDLIN( 413)										if (((d1 * d2) != (int)1)) {
HXLINE( 413)											if (((d1 * d2) == (int)0)) {
HXLINE( 413)												if ((d1 != (int)1)) {
HXLINE( 413)													_hx_tmp6 = (d2 == (int)1);
            												}
            												else {
HXLINE( 413)													_hx_tmp6 = true;
            												}
            											}
            											else {
HXLINE( 413)												_hx_tmp6 = false;
            											}
            										}
            										else {
HXLINE( 413)											_hx_tmp6 = true;
            										}
HXDLIN( 413)										if (_hx_tmp6) {
HXLINE( 415)											{
HXLINE( 416)												ux = (left->elt->x - this->x);
HXLINE( 417)												uy = (left->elt->y - this->y);
            											}
HXLINE( 419)											{
HXLINE( 420)												vx = (right->elt->x - this->x);
HXLINE( 421)												vy = (right->elt->y - this->y);
            											}
HXLINE( 423)											HX_VARI_NAME( Float,ret4,"ret") = ((vy * ux) - (vx * uy));
HXLINE( 414)											int _hx_tmp7;
HXLINE( 424)											if ((ret4 > (int)0)) {
HXLINE( 414)												_hx_tmp7 = (int)-1;
            											}
            											else {
HXLINE( 424)												if ((ret4 == (int)0)) {
HXLINE( 414)													_hx_tmp7 = (int)0;
            												}
            												else {
HXLINE( 414)													_hx_tmp7 = (int)1;
            												}
            											}
HXLINE( 373)											_hx_tmp4 = (_hx_tmp7 == (int)1);
            										}
            										else {
HXLINE( 427)											bool _hx_tmp8;
HXDLIN( 427)											if ((d1 != (int)-1)) {
HXLINE( 427)												_hx_tmp8 = (d2 == (int)-1);
            											}
            											else {
HXLINE( 427)												_hx_tmp8 = true;
            											}
HXDLIN( 427)											if (_hx_tmp8) {
HXLINE( 373)												_hx_tmp4 = (d2 == (int)-1);
            											}
            											else {
HXLINE( 430)												bool _hx_tmp9;
HXDLIN( 430)												if ((d1 == (int)0)) {
HXLINE( 430)													_hx_tmp9 = (d2 == (int)0);
            												}
            												else {
HXLINE( 430)													_hx_tmp9 = false;
            												}
HXDLIN( 430)												if (_hx_tmp9) {
HXLINE( 431)													{
HXLINE( 432)														ux = (this->x - this->prev->x);
HXLINE( 433)														uy = (this->y - this->prev->y);
            													}
HXLINE( 435)													{
HXLINE( 436)														vx = (left->elt->x - this->x);
HXLINE( 437)														vy = (left->elt->y - this->y);
            													}
HXLINE( 439)													HX_VARI_NAME( Float,d11,"d1") = ((ux * vx) + (uy * vy));
HXLINE( 440)													{
HXLINE( 441)														vx = (right->elt->x - this->x);
HXLINE( 442)														vy = (right->elt->y - this->y);
            													}
HXLINE( 444)													HX_VARI_NAME( Float,d21,"d2") = ((ux * vx) + (uy * vy));
HXLINE( 445)													bool _hx_tmp10;
HXDLIN( 445)													if ((d11 < (int)0)) {
HXLINE( 445)														_hx_tmp10 = (d21 > (int)0);
            													}
            													else {
HXLINE( 445)														_hx_tmp10 = false;
            													}
HXDLIN( 445)													if (_hx_tmp10) {
HXLINE( 373)														_hx_tmp4 = true;
            													}
            													else {
HXLINE( 445)														bool _hx_tmp11;
HXDLIN( 445)														if ((d21 < (int)0)) {
HXLINE( 445)															_hx_tmp11 = (d11 > (int)0);
            														}
            														else {
HXLINE( 445)															_hx_tmp11 = false;
            														}
HXDLIN( 445)														if (_hx_tmp11) {
HXLINE( 373)															_hx_tmp4 = false;
            														}
            														else {
HXLINE( 373)															_hx_tmp4 = true;
            														}
            													}
            												}
            												else {
HXLINE( 373)													_hx_tmp4 = true;
            												}
            											}
            										}
            									}
HXDLIN( 373)									if (_hx_tmp4) {
HXLINE( 470)										nxt = left;
HXLINE( 471)										left = left->next;
HXLINE( 472)										leftSize = (leftSize - (int)1);
            									}
            									else {
HXLINE( 475)										nxt = right;
HXLINE( 476)										right = right->next;
HXLINE( 477)										rightSize = (rightSize - (int)1);
            									}
            								}
            							}
HXLINE( 479)							if (hx::IsNotNull( tail )) {
HXLINE( 479)								tail->next = nxt;
            							}
            							else {
HXLINE( 480)								head = nxt;
            							}
HXLINE( 481)							tail = nxt;
            						}
            						_hx_goto_7:;
HXLINE( 483)						left = right;
            					}
HXLINE( 485)					tail->next = null();
HXLINE( 486)					listSize = ((int)listSize << (int)(int)1);
HXLINE( 349)					if (!((numMerges > (int)1))) {
HXLINE( 349)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
HXLINE( 489)				{
HXLINE( 489)					xxlist->head = head;
HXDLIN( 489)					xxlist->modified = true;
HXDLIN( 489)					xxlist->pushmod = true;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_PartitionVertex_obj,sort,(void))

int ZPP_PartitionVertex_obj::nextId;

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_PartitionVertex_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_PartitionVertex ZPP_PartitionVertex_obj::get( ::zpp_nape::geom::ZPP_GeomVert x){
            	HX_GC_STACKFRAME(&_hx_pos_8da00814ed838b44_230_get)
            	HX_STACK_ARG(x,"x")
HXLINE( 231)		HX_VAR(  ::zpp_nape::geom::ZPP_PartitionVertex,ret);
HXLINE( 233)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool )) {
HXLINE( 234)			ret =  ::zpp_nape::geom::ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 240)			ret = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool;
HXLINE( 241)			::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = ret->next;
HXLINE( 242)			ret->next = null();
            		}
HXLINE( 249)		{
HXLINE( 250)			ret->x = x->x;
HXLINE( 251)			ret->y = x->y;
            		}
HXLINE( 269)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_PartitionVertex_obj,get,return )

Float ZPP_PartitionVertex_obj::rightdistance( ::zpp_nape::geom::ZPP_PartitionVertex edge, ::zpp_nape::geom::ZPP_PartitionVertex vert){
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_493_rightdistance)
            	HX_STACK_ARG(edge,"edge")
            	HX_STACK_ARG(vert,"vert")
HXLINE( 495)		HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 496)		HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 497)		{
HXLINE( 498)			ux = (edge->next->x - edge->x);
HXLINE( 499)			uy = (edge->next->y - edge->y);
            		}
HXLINE( 501)		HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 502)		HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 503)		{
HXLINE( 504)			vx = (vert->x - edge->x);
HXLINE( 505)			vy = (vert->y - edge->y);
            		}
HXLINE( 507)		Float _hx_tmp;
HXDLIN( 507)		if ((edge->next->y > edge->y)) {
HXLINE( 507)			_hx_tmp = ((Float)-1.0);
            		}
            		else {
HXLINE( 507)			_hx_tmp = ((Float)1.0);
            		}
HXDLIN( 507)		return (_hx_tmp * ((vy * ux) - (vx * uy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionVertex_obj,rightdistance,return )

bool ZPP_PartitionVertex_obj::vert_lt( ::zpp_nape::geom::ZPP_PartitionVertex edge, ::zpp_nape::geom::ZPP_PartitionVertex vert){
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_510_vert_lt)
            	HX_STACK_ARG(edge,"edge")
            	HX_STACK_ARG(vert,"vert")
HXLINE( 510)		bool _hx_tmp;
HXDLIN( 510)		if (hx::IsNotEq( vert,edge )) {
HXLINE( 510)			_hx_tmp = hx::IsEq( vert,edge->next );
            		}
            		else {
HXLINE( 510)			_hx_tmp = true;
            		}
HXDLIN( 510)		if (_hx_tmp) {
HXLINE( 510)			return true;
            		}
            		else {
HXLINE( 510)			if ((edge->y == edge->next->y)) {
HXLINE( 511)				HX_VARI( Float,x) = edge->x;
HXLINE( 512)				HX_VARI( Float,y) = edge->next->x;
HXLINE( 510)				Float _hx_tmp1;
HXLINE( 513)				if ((x < y)) {
HXLINE( 510)					_hx_tmp1 = x;
            				}
            				else {
HXLINE( 510)					_hx_tmp1 = y;
            				}
HXDLIN( 510)				return (_hx_tmp1 <= vert->x);
            			}
            			else {
HXLINE( 510)				return (::zpp_nape::geom::ZPP_PartitionVertex_obj::rightdistance(edge,vert) <= ((Float)0.0));
            			}
            		}
HXDLIN( 510)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionVertex_obj,vert_lt,return )

void ZPP_PartitionVertex_obj::edge_swap( ::zpp_nape::geom::ZPP_PartitionVertex p, ::zpp_nape::geom::ZPP_PartitionVertex q){
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_518_edge_swap)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 519)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,t) = p->node;
HXLINE( 520)		p->node = q->node;
HXLINE( 521)		q->node = t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionVertex_obj,edge_swap,(void))

bool ZPP_PartitionVertex_obj::edge_lt( ::zpp_nape::geom::ZPP_PartitionVertex p, ::zpp_nape::geom::ZPP_PartitionVertex q){
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_523_edge_lt)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 524)		bool _hx_tmp;
HXDLIN( 524)		if (hx::IsEq( p,q )) {
HXLINE( 524)			_hx_tmp = hx::IsEq( p->next,q->next );
            		}
            		else {
HXLINE( 524)			_hx_tmp = false;
            		}
HXDLIN( 524)		if (_hx_tmp) {
HXLINE( 533)			return false;
            		}
HXLINE( 535)		if (hx::IsEq( p,q->next )) {
HXLINE( 535)			return !(::zpp_nape::geom::ZPP_PartitionVertex_obj::vert_lt(p,q));
            		}
            		else {
HXLINE( 536)			if (hx::IsEq( q,p->next )) {
HXLINE( 536)				return ::zpp_nape::geom::ZPP_PartitionVertex_obj::vert_lt(q,p);
            			}
            			else {
HXLINE( 537)				if ((p->y == p->next->y)) {
HXLINE( 538)					if ((q->y == q->next->y)) {
HXLINE( 539)						HX_VARI( Float,x) = p->x;
HXLINE( 540)						HX_VARI( Float,y) = p->next->x;
HXLINE( 538)						Float _hx_tmp1;
HXLINE( 541)						if ((x > y)) {
HXLINE( 538)							_hx_tmp1 = x;
            						}
            						else {
HXLINE( 538)							_hx_tmp1 = y;
            						}
HXLINE( 543)						HX_VARI_NAME( Float,x1,"x") = q->x;
HXLINE( 544)						HX_VARI_NAME( Float,y1,"y") = q->next->x;
HXLINE( 542)						Float _hx_tmp2;
HXLINE( 545)						if ((x1 > y1)) {
HXLINE( 542)							_hx_tmp2 = x1;
            						}
            						else {
HXLINE( 542)							_hx_tmp2 = y1;
            						}
HXLINE( 538)						return (_hx_tmp1 > _hx_tmp2);
            					}
            					else {
HXLINE( 546)						if (!((::zpp_nape::geom::ZPP_PartitionVertex_obj::rightdistance(q,p) > ((Float)0.0)))) {
HXLINE( 538)							return (::zpp_nape::geom::ZPP_PartitionVertex_obj::rightdistance(q,p->next) > ((Float)0.0));
            						}
            						else {
HXLINE( 538)							return true;
            						}
            					}
            				}
            				else {
HXLINE( 549)					HX_VARI( Float,qRight) = ::zpp_nape::geom::ZPP_PartitionVertex_obj::rightdistance(p,q);
HXLINE( 550)					HX_VARI( Float,qNextRight) = ::zpp_nape::geom::ZPP_PartitionVertex_obj::rightdistance(p,q->next);
HXLINE( 551)					bool _hx_tmp3;
HXDLIN( 551)					if ((qRight == (int)0)) {
HXLINE( 551)						_hx_tmp3 = (qNextRight == (int)0);
            					}
            					else {
HXLINE( 551)						_hx_tmp3 = false;
            					}
HXDLIN( 551)					if (_hx_tmp3) {
HXLINE( 553)						HX_VARI_NAME( Float,x2,"x") = p->x;
HXLINE( 554)						HX_VARI_NAME( Float,y2,"y") = p->next->x;
HXLINE( 552)						Float _hx_tmp4;
HXLINE( 555)						if ((x2 > y2)) {
HXLINE( 552)							_hx_tmp4 = x2;
            						}
            						else {
HXLINE( 552)							_hx_tmp4 = y2;
            						}
HXLINE( 557)						HX_VARI_NAME( Float,x3,"x") = q->x;
HXLINE( 558)						HX_VARI_NAME( Float,y3,"y") = q->next->x;
HXLINE( 556)						Float _hx_tmp5;
HXLINE( 559)						if ((x3 > y3)) {
HXLINE( 556)							_hx_tmp5 = x3;
            						}
            						else {
HXLINE( 556)							_hx_tmp5 = y3;
            						}
HXLINE( 552)						return (_hx_tmp4 > _hx_tmp5);
            					}
HXLINE( 562)					if (((qRight * qNextRight) >= (int)0)) {
HXLINE( 562)						if (!((qRight < (int)0))) {
HXLINE( 562)							return (qNextRight < (int)0);
            						}
            						else {
HXLINE( 562)							return true;
            						}
            					}
HXLINE( 563)					HX_VARI( Float,pRight) = ::zpp_nape::geom::ZPP_PartitionVertex_obj::rightdistance(q,p);
HXLINE( 564)					HX_VARI( Float,pNextRight) = ::zpp_nape::geom::ZPP_PartitionVertex_obj::rightdistance(q,p->next);
HXLINE( 573)					if (((pRight * pNextRight) >= (int)0)) {
HXLINE( 573)						if (!((pRight > (int)0))) {
HXLINE( 573)							return (pNextRight > (int)0);
            						}
            						else {
HXLINE( 573)							return true;
            						}
            					}
HXLINE( 582)					return false;
            				}
            			}
            		}
HXLINE( 535)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_PartitionVertex_obj,edge_lt,return )


hx::ObjectPtr< ZPP_PartitionVertex_obj > ZPP_PartitionVertex_obj::__new() {
	hx::ObjectPtr< ZPP_PartitionVertex_obj > __this = new ZPP_PartitionVertex_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_PartitionVertex_obj > ZPP_PartitionVertex_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_PartitionVertex_obj *__this = (ZPP_PartitionVertex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_PartitionVertex_obj), true, "zpp_nape.geom.ZPP_PartitionVertex"));
	*(void **)__this = ZPP_PartitionVertex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_PartitionVertex_obj::ZPP_PartitionVertex_obj()
{
}

void ZPP_PartitionVertex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_PartitionVertex);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(mag,"mag");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(forced,"forced");
	HX_MARK_MEMBER_NAME(diagonals,"diagonals");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(helper,"helper");
	HX_MARK_MEMBER_NAME(rightchain,"rightchain");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(node,"node");
	HX_MARK_END_CLASS();
}

void ZPP_PartitionVertex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(mag,"mag");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(forced,"forced");
	HX_VISIT_MEMBER_NAME(diagonals,"diagonals");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(helper,"helper");
	HX_VISIT_MEMBER_NAME(rightchain,"rightchain");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(node,"node");
}

hx::Val ZPP_PartitionVertex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mag") ) { return hx::Val( mag); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn()); }
		if (HX_FIELD_EQ(inName,"node") ) { return hx::Val( node); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forced") ) { return hx::Val( forced); }
		if (HX_FIELD_EQ(inName,"helper") ) { return hx::Val( helper); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"diagonals") ) { return hx::Val( diagonals); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightchain") ) { return hx::Val( rightchain); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_PartitionVertex_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { outValue = nextId; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"vert_lt") ) { outValue = vert_lt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"edge_lt") ) { outValue = edge_lt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"edge_swap") ) { outValue = edge_swap_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rightdistance") ) { outValue = rightdistance_dyn(); return true; }
	}
	return false;
}

hx::Val ZPP_PartitionVertex_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mag") ) { mag=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"node") ) { node=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forced") ) { forced=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"helper") ) { helper=inValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"diagonals") ) { diagonals=inValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightchain") ) { rightchain=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_PartitionVertex_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { nextId=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_PartitionVertex >(); return true; }
	}
	return false;
}

void ZPP_PartitionVertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("mag","\x93","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd"));
	outFields->push(HX_HCSTRING("diagonals","\xde","\xd1","\xdb","\xfe"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("helper","\x6e","\x7d","\x4e","\x04"));
	outFields->push(HX_HCSTRING("rightchain","\xa5","\x0b","\x4b","\xb5"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("node","\x02","\x0a","\x0a","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_PartitionVertex_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ZPP_PartitionVertex_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PartitionVertex_obj,mag),HX_HCSTRING("mag","\x93","\x0a","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PartitionVertex_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_PartitionVertex_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(ZPP_PartitionVertex_obj,forced),HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_PartitionVertex_obj,diagonals),HX_HCSTRING("diagonals","\xde","\xd1","\xdb","\xfe")},
	{hx::fsInt,(int)offsetof(ZPP_PartitionVertex_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_PartitionVertex_obj,helper),HX_HCSTRING("helper","\x6e","\x7d","\x4e","\x04")},
	{hx::fsBool,(int)offsetof(ZPP_PartitionVertex_obj,rightchain),HX_HCSTRING("rightchain","\xa5","\x0b","\x4b","\xb5")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_PartitionVertex_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_PartitionVertex_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex*/ ,(int)offsetof(ZPP_PartitionVertex_obj,node),HX_HCSTRING("node","\x02","\x0a","\x0a","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_PartitionVertex_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ZPP_PartitionVertex_obj::nextId,HX_HCSTRING("nextId","\xae","\x27","\x64","\x72")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_PartitionVertex*/ ,(void *) &ZPP_PartitionVertex_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_PartitionVertex_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("mag","\x93","\x0a","\x53","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd"),
	HX_HCSTRING("diagonals","\xde","\xd1","\xdb","\xfe"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("helper","\x6e","\x7d","\x4e","\x04"),
	HX_HCSTRING("rightchain","\xa5","\x0b","\x4b","\xb5"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("node","\x02","\x0a","\x0a","\x49"),
	::String(null()) };

static void ZPP_PartitionVertex_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_PartitionVertex_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_PartitionVertex_obj::nextId,"nextId");
	HX_MARK_MEMBER_NAME(ZPP_PartitionVertex_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_PartitionVertex_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_PartitionVertex_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_PartitionVertex_obj::nextId,"nextId");
	HX_VISIT_MEMBER_NAME(ZPP_PartitionVertex_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_PartitionVertex_obj::__mClass;

static ::String ZPP_PartitionVertex_obj_sStaticFields[] = {
	HX_HCSTRING("nextId","\xae","\x27","\x64","\x72"),
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("rightdistance","\x11","\xdb","\x56","\x00"),
	HX_HCSTRING("vert_lt","\x96","\x84","\x93","\x7d"),
	HX_HCSTRING("edge_swap","\x15","\x81","\x90","\xad"),
	HX_HCSTRING("edge_lt","\x8a","\xb0","\xf8","\xf4"),
	::String(null())
};

void ZPP_PartitionVertex_obj::__register()
{
	hx::Object *dummy = new ZPP_PartitionVertex_obj;
	ZPP_PartitionVertex_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_PartitionVertex","\x78","\x0a","\x69","\x89");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_PartitionVertex_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_PartitionVertex_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_PartitionVertex_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_PartitionVertex_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_PartitionVertex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_PartitionVertex_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_PartitionVertex_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_PartitionVertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_PartitionVertex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_PartitionVertex_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_176_boot)
HXLINE( 176)		nextId = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8da00814ed838b44_185_boot)
HXLINE( 185)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
