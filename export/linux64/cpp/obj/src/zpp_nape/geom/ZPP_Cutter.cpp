// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_GeomPoly
#include <nape/geom/GeomPoly.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPolyList
#include <nape/geom/GeomPolyList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_CutInt
#include <zpp_nape/geom/ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_CutVert
#include <zpp_nape/geom/ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Cutter
#include <zpp_nape/geom/ZPP_Cutter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomPoly
#include <zpp_nape/geom/ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CutInt
#include <zpp_nape/util/ZNPList_ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CutVert
#include <zpp_nape/util/ZNPList_ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CutInt
#include <zpp_nape/util/ZNPNode_ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CutVert
#include <zpp_nape/util/ZNPNode_ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_GeomPolyList
#include <zpp_nape/util/ZPP_GeomPolyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d91cf3e3c3fa4dae_324_run,"zpp_nape.geom.ZPP_Cutter","run",0x3e5647b2,"zpp_nape.geom.ZPP_Cutter.run","zpp_nape/geom/Cutter.hx",324,0x9f85878e)
HX_DEFINE_STACK_FRAME(_hx_pos_d91cf3e3c3fa4dae_322_boot,"zpp_nape.geom.ZPP_Cutter","boot",0x42907deb,"zpp_nape.geom.ZPP_Cutter.boot","zpp_nape/geom/Cutter.hx",322,0x9f85878e)
HX_DEFINE_STACK_FRAME(_hx_pos_d91cf3e3c3fa4dae_323_boot,"zpp_nape.geom.ZPP_Cutter","boot",0x42907deb,"zpp_nape.geom.ZPP_Cutter.boot","zpp_nape/geom/Cutter.hx",323,0x9f85878e)
namespace zpp_nape{
namespace geom{

void ZPP_Cutter_obj::__construct() { }

Dynamic ZPP_Cutter_obj::__CreateEmpty() { return new ZPP_Cutter_obj; }

void *ZPP_Cutter_obj::_hx_vtable = 0;

Dynamic ZPP_Cutter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Cutter_obj > _hx_result = new ZPP_Cutter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Cutter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0bd358f9;
}

 ::zpp_nape::util::ZNPList_ZPP_CutInt ZPP_Cutter_obj::ints;

 ::zpp_nape::util::ZNPList_ZPP_CutVert ZPP_Cutter_obj::paths;

 ::nape::geom::GeomPolyList ZPP_Cutter_obj::run( ::zpp_nape::geom::ZPP_GeomVert P, ::nape::geom::Vec2 _start, ::nape::geom::Vec2 _end,bool bstart,bool bend, ::nape::geom::GeomPolyList output){
            	HX_GC_STACKFRAME(&_hx_pos_d91cf3e3c3fa4dae_324_run)
            	HX_STACK_ARG(P,"P")
            	HX_STACK_ARG(_start,"_start")
            	HX_STACK_ARG(_end,"_end")
            	HX_STACK_ARG(bstart,"bstart")
            	HX_STACK_ARG(bend,"bend")
            	HX_STACK_ARG(output,"output")
HXLINE( 325)		HX_VARI( Float,px) = ((Float)0.0);
HXLINE( 326)		HX_VARI( Float,py) = ((Float)0.0);
HXLINE( 327)		{
HXLINE( 328)			{
HXLINE( 328)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = _start->zpp_inner;
HXDLIN( 328)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 328)					_this->_validate();
            				}
            			}
HXDLIN( 328)			px = _start->zpp_inner->x;
HXLINE( 329)			{
HXLINE( 329)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = _start->zpp_inner;
HXDLIN( 329)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 329)					_this1->_validate();
            				}
            			}
HXDLIN( 329)			py = _start->zpp_inner->y;
            		}
HXLINE( 347)		HX_VARI( Float,dx) = ((Float)0.0);
HXLINE( 348)		HX_VARI( Float,dy) = ((Float)0.0);
HXLINE( 349)		{
HXLINE( 350)			{
HXLINE( 350)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _end->zpp_inner;
HXDLIN( 350)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 350)					_this2->_validate();
            				}
            			}
HXDLIN( 350)			dx = (_end->zpp_inner->x - px);
HXLINE( 351)			{
HXLINE( 351)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _end->zpp_inner;
HXDLIN( 351)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 351)					_this3->_validate();
            				}
            			}
HXDLIN( 351)			dy = (_end->zpp_inner->y - py);
            		}
HXLINE( 353)		HX_VAR( Float,min);
HXDLIN( 353)		if (bstart) {
HXLINE( 353)			min = (int)0;
            		}
            		else {
HXLINE( 353)			min = ::Math_obj::NEGATIVE_INFINITY;
            		}
HXLINE( 354)		HX_VAR( Float,max);
HXDLIN( 354)		if (bend) {
HXLINE( 354)			max = (int)1;
            		}
            		else {
HXLINE( 354)			max = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE( 355)		HX_VARI( Float,crx) = -(((py * dx) - (px * dy)));
HXLINE( 356)		HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,verts) = null();
HXLINE( 357)		HX_VARI( bool,clashes) = false;
HXLINE( 358)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,p) = P;
HXLINE( 359)		while(true){
HXLINE( 360)			HX_VAR(  ::zpp_nape::geom::ZPP_CutVert,c);
HXLINE( 362)			if (hx::IsNull( ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool )) {
HXLINE( 363)				c =  ::zpp_nape::geom::ZPP_CutVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 369)				c = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXLINE( 370)				::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = c->next;
HXLINE( 371)				c->next = null();
            			}
HXLINE( 378)			c->vert = p;
HXLINE( 379)			{
HXLINE( 380)				c->posx = c->vert->x;
HXLINE( 381)				c->posy = c->vert->y;
            			}
HXLINE( 399)			c->value = (((c->posy * dx) - (c->posx * dy)) + crx);
HXLINE( 400)			c->positive = (c->value > (int)0);
HXLINE( 401)			if ((c->value == (int)0)) {
HXLINE( 401)				clashes = true;
            			}
HXLINE( 403)			HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,obj) = c;
HXLINE( 404)			if (hx::IsNull( verts )) {
HXLINE( 404)				verts = (obj->prev = (obj->next = obj));
            			}
            			else {
HXLINE( 406)				obj->prev = verts;
HXLINE( 407)				obj->next = verts->next;
HXLINE( 408)				verts->next->prev = obj;
HXLINE( 409)				verts->next = obj;
            			}
HXLINE( 411)			verts = obj;
HXLINE( 413)			p = p->next;
HXLINE( 359)			if (!(hx::IsNotEq( p,P ))) {
HXLINE( 359)				goto _hx_goto_0;
            			}
            		}
            		_hx_goto_0:;
HXLINE( 416)		if (clashes) {
HXLINE( 417)			HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,start) = null();
HXLINE( 418)			{
HXLINE( 419)				HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,F) = verts;
HXLINE( 420)				HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,L) = verts;
HXLINE( 421)				if (hx::IsNotNull( F )) {
HXLINE( 422)					HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,nite) = F;
HXLINE( 423)					while(true){
HXLINE( 424)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,p1,"p") = nite;
HXLINE( 427)						if ((p1->value != ((Float)0.0))) {
HXLINE( 428)							start = p1;
HXLINE( 429)							goto _hx_goto_1;
            						}
HXLINE( 433)						nite = nite->next;
HXLINE( 423)						if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 423)							goto _hx_goto_1;
            						}
            					}
            					_hx_goto_1:;
            				}
            			}
HXLINE( 446)			HX_VARI( Float,nx) = ((Float)0.0);
HXLINE( 447)			HX_VARI( Float,ny) = ((Float)0.0);
HXLINE( 448)			{
HXLINE( 449)				nx = dx;
HXLINE( 450)				ny = dy;
            			}
HXLINE( 468)			{
HXLINE( 469)				{
HXLINE( 479)					HX_VARI( Float,imag) = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(((nx * nx) + (ny * ny))));
HXLINE( 480)					{
HXLINE( 490)						nx = (nx * imag);
HXLINE( 491)						ny = (ny * imag);
            					}
            				}
HXLINE( 494)				{
HXLINE( 495)					HX_VARI( Float,t) = nx;
HXLINE( 496)					nx = -(ny);
HXLINE( 497)					ny = t;
            				}
            			}
HXLINE( 500)			HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,pre) = null();
HXLINE( 501)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,p2,"p") = start;
HXLINE( 502)			while(true){
HXLINE( 503)				bool _hx_tmp;
HXDLIN( 503)				if ((p2->value != ((Float)0.0))) {
HXLINE( 503)					if (hx::IsNotNull( pre )) {
HXLINE( 503)						_hx_tmp = hx::IsEq( p2,pre->next );
            					}
            					else {
HXLINE( 503)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 503)					_hx_tmp = false;
            				}
HXDLIN( 503)				if (_hx_tmp) {
HXLINE( 504)					pre = p2;
HXLINE( 505)					p2 = p2->next;
HXLINE( 502)					if (!(hx::IsNotEq( p2,start ))) {
HXLINE( 502)						goto _hx_goto_2;
            					}
            					else {
HXLINE( 506)						continue;
            					}
            				}
HXLINE( 508)				HX_VARI( Float,prod) = (pre->value * p2->value);
HXLINE( 509)				if ((prod == (int)0)) {
HXLINE( 510)					p2 = p2->next;
HXLINE( 502)					if (!(hx::IsNotEq( p2,start ))) {
HXLINE( 502)						goto _hx_goto_2;
            					}
            					else {
HXLINE( 511)						continue;
            					}
            				}
HXLINE( 513)				HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,a) = pre->next;
HXLINE( 514)				HX_VAR( bool,positive);
HXDLIN( 514)				if ((prod > (int)0)) {
HXLINE( 514)					positive = pre->positive;
            				}
            				else {
HXLINE( 516)					HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,b) = a->next;
HXLINE( 517)					HX_VARI( Float,midx) = ((Float)0.0);
HXLINE( 518)					HX_VARI( Float,midy) = ((Float)0.0);
HXLINE( 519)					{
HXLINE( 520)						midx = (a->posx + b->posx);
HXLINE( 521)						midy = (a->posy + b->posy);
            					}
HXLINE( 523)					{
HXLINE( 533)						midx = (midx * ((Float)0.5));
HXLINE( 534)						midy = (midy * ((Float)0.5));
            					}
HXLINE( 537)					HX_VARI( Float,x) = (midx + (nx * ((Float)1e-8)));
HXLINE( 538)					HX_VARI( Float,y) = (midy + (ny * ((Float)1e-8)));
HXLINE( 539)					HX_VARI( bool,ret) = false;
HXLINE( 543)					if (hx::IsNotNull( P )) {
HXLINE( 544)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,nite1,"nite") = P;
HXLINE( 545)						while(true){
HXLINE( 546)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,p3,"p") = nite1;
HXLINE( 548)							{
HXLINE( 549)								HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,q) = p3->prev;
HXLINE( 550)								bool positive1;
HXDLIN( 550)								bool positive2;
HXDLIN( 550)								bool positive3;
HXDLIN( 550)								if ((p3->y < y)) {
HXLINE( 550)									positive3 = (q->y >= y);
            								}
            								else {
HXLINE( 550)									positive3 = false;
            								}
HXDLIN( 550)								if (!(positive3)) {
HXLINE( 550)									if ((q->y < y)) {
HXLINE( 550)										positive2 = (p3->y >= y);
            									}
            									else {
HXLINE( 550)										positive2 = false;
            									}
            								}
            								else {
HXLINE( 550)									positive2 = true;
            								}
HXDLIN( 550)								if (positive2) {
HXLINE( 550)									if (!((p3->x <= x))) {
HXLINE( 550)										positive1 = (q->x <= x);
            									}
            									else {
HXLINE( 550)										positive1 = true;
            									}
            								}
            								else {
HXLINE( 550)									positive1 = false;
            								}
HXDLIN( 550)								if (positive1) {
HXLINE( 551)									if (((p3->x + (((Float)(y - p3->y) / (Float)(q->y - p3->y)) * (q->x - p3->x))) < x)) {
HXLINE( 552)										ret = !(ret);
            									}
            								}
            							}
HXLINE( 557)							nite1 = nite1->next;
HXLINE( 545)							if (!(hx::IsNotEq( nite1,P ))) {
HXLINE( 545)								goto _hx_goto_3;
            							}
            						}
            						_hx_goto_3:;
            					}
HXLINE( 514)					positive = ret;
            				}
HXLINE( 565)				{
HXLINE( 567)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,L1,"L") = p2;
HXLINE( 568)					if (hx::IsNotNull( a )) {
HXLINE( 569)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nite2,"nite") = a;
HXLINE( 570)						while(true){
HXLINE( 573)							nite2->positive = positive;
HXLINE( 575)							nite2 = nite2->next;
HXLINE( 570)							if (!(hx::IsNotEq( nite2,L1 ))) {
HXLINE( 570)								goto _hx_goto_4;
            							}
            						}
            						_hx_goto_4:;
            					}
            				}
HXLINE( 580)				pre = p2;
HXLINE( 581)				p2 = p2->next;
HXLINE( 502)				if (!(hx::IsNotEq( p2,start ))) {
HXLINE( 502)					goto _hx_goto_2;
            				}
            			}
            			_hx_goto_2:;
HXLINE( 584)			while(true){
HXLINE( 585)				bool _hx_tmp1;
HXDLIN( 585)				if ((p2->value != ((Float)0.0))) {
HXLINE( 585)					if (hx::IsNotNull( pre )) {
HXLINE( 585)						_hx_tmp1 = hx::IsEq( p2,pre->next );
            					}
            					else {
HXLINE( 585)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE( 585)					_hx_tmp1 = false;
            				}
HXDLIN( 585)				if (_hx_tmp1) {
HXLINE( 586)					pre = p2;
HXLINE( 587)					p2 = p2->next;
HXLINE( 584)					goto _hx_goto_5;
            				}
HXLINE( 590)				HX_VARI_NAME( Float,prod1,"prod") = (pre->value * p2->value);
HXLINE( 591)				if ((prod1 == (int)0)) {
HXLINE( 592)					p2 = p2->next;
HXLINE( 584)					goto _hx_goto_5;
            				}
HXLINE( 595)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,a1,"a") = pre->next;
HXLINE( 596)				HX_VAR_NAME( bool,positive4,"positive");
HXDLIN( 596)				if ((prod1 > (int)0)) {
HXLINE( 596)					positive4 = pre->positive;
            				}
            				else {
HXLINE( 598)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,b1,"b") = a1->next;
HXLINE( 599)					HX_VARI_NAME( Float,midx1,"midx") = ((Float)0.0);
HXLINE( 600)					HX_VARI_NAME( Float,midy1,"midy") = ((Float)0.0);
HXLINE( 601)					{
HXLINE( 602)						midx1 = (a1->posx + b1->posx);
HXLINE( 603)						midy1 = (a1->posy + b1->posy);
            					}
HXLINE( 605)					{
HXLINE( 615)						midx1 = (midx1 * ((Float)0.5));
HXLINE( 616)						midy1 = (midy1 * ((Float)0.5));
            					}
HXLINE( 619)					HX_VARI_NAME( Float,x1,"x") = (midx1 + (nx * ((Float)1e-8)));
HXLINE( 620)					HX_VARI_NAME( Float,y1,"y") = (midy1 + (ny * ((Float)1e-8)));
HXLINE( 621)					HX_VARI_NAME( bool,ret1,"ret") = false;
HXLINE( 625)					if (hx::IsNotNull( P )) {
HXLINE( 626)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,nite3,"nite") = P;
HXLINE( 627)						while(true){
HXLINE( 628)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,p4,"p") = nite3;
HXLINE( 630)							{
HXLINE( 631)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,q1,"q") = p4->prev;
HXLINE( 632)								bool positive5;
HXDLIN( 632)								bool positive6;
HXDLIN( 632)								bool positive7;
HXDLIN( 632)								if ((p4->y < y1)) {
HXLINE( 632)									positive7 = (q1->y >= y1);
            								}
            								else {
HXLINE( 632)									positive7 = false;
            								}
HXDLIN( 632)								if (!(positive7)) {
HXLINE( 632)									if ((q1->y < y1)) {
HXLINE( 632)										positive6 = (p4->y >= y1);
            									}
            									else {
HXLINE( 632)										positive6 = false;
            									}
            								}
            								else {
HXLINE( 632)									positive6 = true;
            								}
HXDLIN( 632)								if (positive6) {
HXLINE( 632)									if (!((p4->x <= x1))) {
HXLINE( 632)										positive5 = (q1->x <= x1);
            									}
            									else {
HXLINE( 632)										positive5 = true;
            									}
            								}
            								else {
HXLINE( 632)									positive5 = false;
            								}
HXDLIN( 632)								if (positive5) {
HXLINE( 633)									if (((p4->x + (((Float)(y1 - p4->y) / (Float)(q1->y - p4->y)) * (q1->x - p4->x))) < x1)) {
HXLINE( 634)										ret1 = !(ret1);
            									}
            								}
            							}
HXLINE( 639)							nite3 = nite3->next;
HXLINE( 627)							if (!(hx::IsNotEq( nite3,P ))) {
HXLINE( 627)								goto _hx_goto_6;
            							}
            						}
            						_hx_goto_6:;
            					}
HXLINE( 596)					positive4 = ret1;
            				}
HXLINE( 647)				{
HXLINE( 649)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,L2,"L") = p2;
HXLINE( 650)					if (hx::IsNotNull( a1 )) {
HXLINE( 651)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nite4,"nite") = a1;
HXLINE( 652)						while(true){
HXLINE( 655)							nite4->positive = positive4;
HXLINE( 657)							nite4 = nite4->next;
HXLINE( 652)							if (!(hx::IsNotEq( nite4,L2 ))) {
HXLINE( 652)								goto _hx_goto_7;
            							}
            						}
            						_hx_goto_7:;
            					}
            				}
HXLINE( 662)				pre = p2;
HXLINE( 663)				p2 = p2->next;
HXLINE( 584)				goto _hx_goto_5;
            			}
            			_hx_goto_5:;
            		}
HXLINE( 667)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Cutter_obj::ints )) {
HXLINE( 668)			::zpp_nape::geom::ZPP_Cutter_obj::ints =  ::zpp_nape::util::ZNPList_ZPP_CutInt_obj::__alloc( HX_CTX );
            		}
HXLINE( 670)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Cutter_obj::paths )) {
HXLINE( 671)			::zpp_nape::geom::ZPP_Cutter_obj::paths =  ::zpp_nape::util::ZNPList_ZPP_CutVert_obj::__alloc( HX_CTX );
            		}
HXLINE( 673)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,start1,"start") = null();
HXLINE( 674)		{
HXLINE( 675)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret2,"ret");
HXDLIN( 675)			{
HXLINE( 675)				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 675)					ret2 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 675)					ret2 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 675)					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret2->next;
HXDLIN( 675)					ret2->next = null();
            				}
HXDLIN( 675)				ret2->forced = false;
            			}
HXDLIN( 675)			{
HXLINE( 675)				ret2->x = verts->posx;
HXDLIN( 675)				ret2->y = verts->posy;
            			}
HXDLIN( 675)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,obj1,"obj") = ret2;
HXLINE( 676)			if (hx::IsNull( start1 )) {
HXLINE( 676)				start1 = (obj1->prev = (obj1->next = obj1));
            			}
            			else {
HXLINE( 678)				obj1->next = start1;
HXLINE( 679)				obj1->prev = start1->prev;
HXLINE( 680)				start1->prev->next = obj1;
HXLINE( 681)				start1->prev = obj1;
            			}
            		}
HXLINE( 685)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,origin) = start1;
HXLINE( 686)		HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,ret3,"ret");
HXDLIN( 686)		if (hx::IsNull( ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool )) {
HXLINE( 686)			ret3 =  ::zpp_nape::geom::ZPP_CutVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 686)			ret3 = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXDLIN( 686)			::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = ret3->next;
HXDLIN( 686)			ret3->next = null();
            		}
HXDLIN( 686)		ret3->vert = start1;
HXDLIN( 686)		ret3->parent = ret3;
HXDLIN( 686)		ret3->rank = (int)0;
HXDLIN( 686)		ret3->used = false;
HXDLIN( 686)		HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,firstpath) = ret3;
HXLINE( 687)		::zpp_nape::geom::ZPP_Cutter_obj::paths->add(firstpath);
HXLINE( 688)		HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,i) = verts;
HXLINE( 689)		while(true){
HXLINE( 690)			HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,j) = i->next;
HXLINE( 691)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret4,"ret");
HXDLIN( 691)			{
HXLINE( 691)				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 691)					ret4 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 691)					ret4 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 691)					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret4->next;
HXDLIN( 691)					ret4->next = null();
            				}
HXDLIN( 691)				ret4->forced = false;
            			}
HXDLIN( 691)			{
HXLINE( 691)				ret4->x = j->posx;
HXDLIN( 691)				ret4->y = j->posy;
            			}
HXDLIN( 691)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,pj) = ret4;
HXLINE( 692)			if ((i->positive == j->positive)) {
HXLINE( 695)				if (hx::IsNull( start1 )) {
HXLINE( 695)					start1 = (pj->prev = (pj->next = pj));
            				}
            				else {
HXLINE( 697)					pj->next = start1;
HXLINE( 698)					pj->prev = start1->prev;
HXLINE( 699)					start1->prev->next = pj;
HXLINE( 700)					start1->prev = pj;
            				}
            			}
            			else {
HXLINE( 706)				HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 707)				HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 708)				{
HXLINE( 709)					ux = (j->posx - i->posx);
HXLINE( 710)					uy = (j->posy - i->posy);
            				}
HXLINE( 712)				HX_VARI( Float,denom) = ((dy * ux) - (dx * uy));
HXLINE( 721)				denom = ((Float)(int)1 / (Float)denom);
HXLINE( 722)				HX_VARI( Float,pax) = ((Float)0.0);
HXLINE( 723)				HX_VARI( Float,pay) = ((Float)0.0);
HXLINE( 724)				{
HXLINE( 725)					pax = (px - i->posx);
HXLINE( 726)					pay = (py - i->posy);
            				}
HXLINE( 728)				HX_VARI( Float,s) = (((uy * pax) - (ux * pay)) * denom);
HXLINE( 729)				bool _hx_tmp2;
HXDLIN( 729)				if (!((s < min))) {
HXLINE( 729)					_hx_tmp2 = (s > max);
            				}
            				else {
HXLINE( 729)					_hx_tmp2 = true;
            				}
HXDLIN( 729)				if (_hx_tmp2) {
HXLINE( 730)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutInt,ret5,"ret");
HXDLIN( 730)					if (hx::IsNull( ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool )) {
HXLINE( 730)						ret5 =  ::zpp_nape::geom::ZPP_CutInt_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 730)						ret5 = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool;
HXDLIN( 730)						::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = ret5->next;
HXDLIN( 730)						ret5->next = null();
            					}
HXDLIN( 730)					ret5->virtualint = true;
HXDLIN( 730)					ret5->end = null();
HXDLIN( 730)					ret5->start = null();
HXDLIN( 730)					ret5->path0 = null();
HXDLIN( 730)					ret5->path1 = null();
HXDLIN( 730)					ret5->time = s;
HXDLIN( 730)					ret5->vertex = false;
HXDLIN( 730)					::zpp_nape::geom::ZPP_Cutter_obj::ints->add(ret5);
HXLINE( 733)					if (hx::IsNull( start1 )) {
HXLINE( 733)						start1 = (pj->prev = (pj->next = pj));
            					}
            					else {
HXLINE( 735)						pj->next = start1;
HXLINE( 736)						pj->prev = start1->prev;
HXLINE( 737)						start1->prev->next = pj;
HXLINE( 738)						start1->prev = pj;
            					}
            				}
            				else {
HXLINE( 744)					if ((i->value == (int)0)) {
HXLINE( 745)						HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,endof) = start1->prev;
HXLINE( 746)						start1 = null();
HXLINE( 747)						{
HXLINE( 748)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret6,"ret");
HXDLIN( 748)							{
HXLINE( 748)								if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 748)									ret6 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 748)									ret6 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 748)									::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret6->next;
HXDLIN( 748)									ret6->next = null();
            								}
HXDLIN( 748)								ret6->forced = false;
            							}
HXDLIN( 748)							{
HXLINE( 748)								ret6->x = endof->x;
HXDLIN( 748)								ret6->y = endof->y;
            							}
HXDLIN( 748)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,obj2,"obj") = ret6;
HXLINE( 749)							if (hx::IsNull( start1 )) {
HXLINE( 749)								start1 = (obj2->prev = (obj2->next = obj2));
            							}
            							else {
HXLINE( 751)								obj2->next = start1;
HXLINE( 752)								obj2->prev = start1->prev;
HXLINE( 753)								start1->prev->next = obj2;
HXLINE( 754)								start1->prev = obj2;
            							}
            						}
HXLINE( 760)						if (hx::IsNull( start1 )) {
HXLINE( 760)							start1 = (pj->prev = (pj->next = pj));
            						}
            						else {
HXLINE( 762)							pj->next = start1;
HXLINE( 763)							pj->prev = start1->prev;
HXLINE( 764)							start1->prev->next = pj;
HXLINE( 765)							start1->prev = pj;
            						}
HXLINE( 769)						HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,prepath) = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head->elt;
HXLINE( 770)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,ret7,"ret");
HXDLIN( 770)						if (hx::IsNull( ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool )) {
HXLINE( 770)							ret7 =  ::zpp_nape::geom::ZPP_CutVert_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 770)							ret7 = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXDLIN( 770)							::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = ret7->next;
HXDLIN( 770)							ret7->next = null();
            						}
HXDLIN( 770)						ret7->vert = start1;
HXDLIN( 770)						ret7->parent = ret7;
HXDLIN( 770)						ret7->rank = (int)0;
HXDLIN( 770)						ret7->used = false;
HXDLIN( 770)						::zpp_nape::geom::ZPP_Cutter_obj::paths->add(ret7);
HXLINE( 772)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutInt,ret8,"ret");
HXDLIN( 772)						if (hx::IsNull( ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool )) {
HXLINE( 772)							ret8 =  ::zpp_nape::geom::ZPP_CutInt_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 772)							ret8 = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool;
HXDLIN( 772)							::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = ret8->next;
HXDLIN( 772)							ret8->next = null();
            						}
HXDLIN( 772)						ret8->virtualint = true;
HXDLIN( 772)						ret8->end = endof;
HXDLIN( 772)						ret8->start = start1;
HXDLIN( 772)						ret8->path0 = prepath;
HXDLIN( 772)						ret8->path1 = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head->elt;
HXDLIN( 772)						ret8->time = s;
HXDLIN( 772)						ret8->vertex = false;
HXDLIN( 772)						::zpp_nape::geom::ZPP_Cutter_obj::ints->add(ret8);
            					}
            					else {
HXLINE( 774)						if ((j->value == (int)0)) {
HXLINE( 777)							if (hx::IsNull( start1 )) {
HXLINE( 777)								start1 = (pj->prev = (pj->next = pj));
            							}
            							else {
HXLINE( 779)								pj->next = start1;
HXLINE( 780)								pj->prev = start1->prev;
HXLINE( 781)								start1->prev->next = pj;
HXLINE( 782)								start1->prev = pj;
            							}
HXLINE( 786)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,endof1,"endof") = start1->prev;
HXLINE( 787)							start1 = null();
HXLINE( 788)							{
HXLINE( 789)								HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret9,"ret");
HXDLIN( 789)								{
HXLINE( 789)									if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 789)										ret9 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 789)										ret9 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 789)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret9->next;
HXDLIN( 789)										ret9->next = null();
            									}
HXDLIN( 789)									ret9->forced = false;
            								}
HXDLIN( 789)								{
HXLINE( 789)									ret9->x = j->posx;
HXDLIN( 789)									ret9->y = j->posy;
            								}
HXDLIN( 789)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,obj3,"obj") = ret9;
HXLINE( 790)								if (hx::IsNull( start1 )) {
HXLINE( 790)									start1 = (obj3->prev = (obj3->next = obj3));
            								}
            								else {
HXLINE( 792)									obj3->next = start1;
HXLINE( 793)									obj3->prev = start1->prev;
HXLINE( 794)									start1->prev->next = obj3;
HXLINE( 795)									start1->prev = obj3;
            								}
            							}
HXLINE( 799)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,prepath1,"prepath") = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head->elt;
HXLINE( 800)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,ret10,"ret");
HXDLIN( 800)							if (hx::IsNull( ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool )) {
HXLINE( 800)								ret10 =  ::zpp_nape::geom::ZPP_CutVert_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 800)								ret10 = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXDLIN( 800)								::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = ret10->next;
HXDLIN( 800)								ret10->next = null();
            							}
HXDLIN( 800)							ret10->vert = start1;
HXDLIN( 800)							ret10->parent = ret10;
HXDLIN( 800)							ret10->rank = (int)0;
HXDLIN( 800)							ret10->used = false;
HXDLIN( 800)							::zpp_nape::geom::ZPP_Cutter_obj::paths->add(ret10);
HXLINE( 802)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutInt,ret11,"ret");
HXDLIN( 802)							if (hx::IsNull( ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool )) {
HXLINE( 802)								ret11 =  ::zpp_nape::geom::ZPP_CutInt_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 802)								ret11 = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool;
HXDLIN( 802)								::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = ret11->next;
HXDLIN( 802)								ret11->next = null();
            							}
HXDLIN( 802)							ret11->virtualint = true;
HXDLIN( 802)							ret11->end = endof1;
HXDLIN( 802)							ret11->start = start1;
HXDLIN( 802)							ret11->path0 = prepath1;
HXDLIN( 802)							ret11->path1 = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head->elt;
HXDLIN( 802)							ret11->time = s;
HXDLIN( 802)							ret11->vertex = false;
HXDLIN( 802)							::zpp_nape::geom::ZPP_Cutter_obj::ints->add(ret11);
            						}
            						else {
HXLINE( 805)							HX_VARI_NAME( Float,t1,"t") = (((dy * pax) - (dx * pay)) * denom);
HXLINE( 806)							HX_VARI( Float,qx) = ((Float)0.0);
HXLINE( 807)							HX_VARI( Float,qy) = ((Float)0.0);
HXLINE( 808)							{
HXLINE( 809)								qx = i->posx;
HXLINE( 810)								qy = i->posy;
            							}
HXLINE( 828)							{
HXLINE( 838)								qx = (qx + (ux * t1));
HXLINE( 839)								qy = (qy + (uy * t1));
            							}
HXLINE( 841)							{
HXLINE( 842)								HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret12,"ret");
HXDLIN( 842)								{
HXLINE( 842)									if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 842)										ret12 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 842)										ret12 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 842)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret12->next;
HXDLIN( 842)										ret12->next = null();
            									}
HXDLIN( 842)									ret12->forced = false;
            								}
HXDLIN( 842)								{
HXLINE( 842)									ret12->x = qx;
HXDLIN( 842)									ret12->y = qy;
            								}
HXDLIN( 842)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,obj4,"obj") = ret12;
HXLINE( 843)								if (hx::IsNull( start1 )) {
HXLINE( 843)									start1 = (obj4->prev = (obj4->next = obj4));
            								}
            								else {
HXLINE( 845)									obj4->next = start1;
HXLINE( 846)									obj4->prev = start1->prev;
HXLINE( 847)									start1->prev->next = obj4;
HXLINE( 848)									start1->prev = obj4;
            								}
            							}
HXLINE( 852)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,endof2,"endof") = start1->prev;
HXLINE( 853)							start1 = null();
HXLINE( 854)							{
HXLINE( 855)								HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret13,"ret");
HXDLIN( 855)								{
HXLINE( 855)									if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 855)										ret13 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 855)										ret13 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 855)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret13->next;
HXDLIN( 855)										ret13->next = null();
            									}
HXDLIN( 855)									ret13->forced = false;
            								}
HXDLIN( 855)								{
HXLINE( 855)									ret13->x = qx;
HXDLIN( 855)									ret13->y = qy;
            								}
HXDLIN( 855)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,obj5,"obj") = ret13;
HXLINE( 856)								if (hx::IsNull( start1 )) {
HXLINE( 856)									start1 = (obj5->prev = (obj5->next = obj5));
            								}
            								else {
HXLINE( 858)									obj5->next = start1;
HXLINE( 859)									obj5->prev = start1->prev;
HXLINE( 860)									start1->prev->next = obj5;
HXLINE( 861)									start1->prev = obj5;
            								}
            							}
HXLINE( 867)							if (hx::IsNull( start1 )) {
HXLINE( 867)								start1 = (pj->prev = (pj->next = pj));
            							}
            							else {
HXLINE( 869)								pj->next = start1;
HXLINE( 870)								pj->prev = start1->prev;
HXLINE( 871)								start1->prev->next = pj;
HXLINE( 872)								start1->prev = pj;
            							}
HXLINE( 876)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,prepath2,"prepath") = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head->elt;
HXLINE( 877)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,ret14,"ret");
HXDLIN( 877)							if (hx::IsNull( ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool )) {
HXLINE( 877)								ret14 =  ::zpp_nape::geom::ZPP_CutVert_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 877)								ret14 = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXDLIN( 877)								::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = ret14->next;
HXDLIN( 877)								ret14->next = null();
            							}
HXDLIN( 877)							ret14->vert = start1;
HXDLIN( 877)							ret14->parent = ret14;
HXDLIN( 877)							ret14->rank = (int)0;
HXDLIN( 877)							ret14->used = false;
HXDLIN( 877)							::zpp_nape::geom::ZPP_Cutter_obj::paths->add(ret14);
HXLINE( 879)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutInt,ret15,"ret");
HXDLIN( 879)							if (hx::IsNull( ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool )) {
HXLINE( 879)								ret15 =  ::zpp_nape::geom::ZPP_CutInt_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 879)								ret15 = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool;
HXDLIN( 879)								::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = ret15->next;
HXDLIN( 879)								ret15->next = null();
            							}
HXDLIN( 879)							ret15->virtualint = false;
HXDLIN( 879)							ret15->end = endof2;
HXDLIN( 879)							ret15->start = start1;
HXDLIN( 879)							ret15->path0 = prepath2;
HXDLIN( 879)							ret15->path1 = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head->elt;
HXDLIN( 879)							ret15->time = s;
HXDLIN( 879)							ret15->vertex = false;
HXDLIN( 879)							::zpp_nape::geom::ZPP_Cutter_obj::ints->add(ret15);
            						}
            					}
            				}
            			}
HXLINE( 883)			i = i->next;
HXLINE( 689)			if (!(hx::IsNotEq( i,verts ))) {
HXLINE( 689)				goto _hx_goto_8;
            			}
            		}
            		_hx_goto_8:;
HXLINE( 886)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,endof3,"endof") = start1->prev;
HXLINE( 887)		{
HXLINE( 888)			endof3->next->prev = origin->prev;
HXLINE( 889)			origin->prev->next = endof3->next;
HXLINE( 890)			endof3->next = origin;
HXLINE( 891)			origin->prev = endof3;
            		}
HXLINE( 893)		HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,lastpath) = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head->elt;
HXLINE( 894)		{
HXLINE( 895)			HX_VAR(  ::zpp_nape::geom::ZPP_CutVert,xr);
HXDLIN( 895)			if (hx::IsEq( firstpath,firstpath->parent )) {
HXLINE( 895)				xr = firstpath;
            			}
            			else {
HXLINE( 898)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj6,"obj") = firstpath;
HXLINE( 899)				HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,stack) = null();
HXLINE( 900)				while(hx::IsNotEq( obj6,obj6->parent )){
HXLINE( 901)					HX_VARI(  ::zpp_nape::geom::ZPP_CutVert,nxt) = obj6->parent;
HXLINE( 902)					obj6->parent = stack;
HXLINE( 903)					stack = obj6;
HXLINE( 904)					obj6 = nxt;
            				}
HXLINE( 906)				while(hx::IsNotNull( stack )){
HXLINE( 907)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt1,"nxt") = stack->parent;
HXLINE( 908)					stack->parent = obj6;
HXLINE( 909)					stack = nxt1;
            				}
HXLINE( 895)				xr = obj6;
            			}
HXLINE( 914)			HX_VAR(  ::zpp_nape::geom::ZPP_CutVert,yr);
HXDLIN( 914)			if (hx::IsEq( lastpath,lastpath->parent )) {
HXLINE( 914)				yr = lastpath;
            			}
            			else {
HXLINE( 917)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj7,"obj") = lastpath;
HXLINE( 918)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack1,"stack") = null();
HXLINE( 919)				while(hx::IsNotEq( obj7,obj7->parent )){
HXLINE( 920)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt2,"nxt") = obj7->parent;
HXLINE( 921)					obj7->parent = stack1;
HXLINE( 922)					stack1 = obj7;
HXLINE( 923)					obj7 = nxt2;
            				}
HXLINE( 925)				while(hx::IsNotNull( stack1 )){
HXLINE( 926)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt3,"nxt") = stack1->parent;
HXLINE( 927)					stack1->parent = obj7;
HXLINE( 928)					stack1 = nxt3;
            				}
HXLINE( 914)				yr = obj7;
            			}
HXLINE( 933)			if (hx::IsNotEq( xr,yr )) {
HXLINE( 934)				if ((xr->rank < yr->rank)) {
HXLINE( 934)					xr->parent = yr;
            				}
            				else {
HXLINE( 935)					if ((xr->rank > yr->rank)) {
HXLINE( 935)						yr->parent = xr;
            					}
            					else {
HXLINE( 937)						yr->parent = xr;
HXLINE( 938)						xr->rank++;
            					}
            				}
            			}
            		}
HXLINE( 950)		{
HXLINE( 951)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_CutInt,xxlist) = ::zpp_nape::geom::ZPP_Cutter_obj::ints;
HXLINE( 952)			bool _hx_tmp3;
HXDLIN( 952)			if (hx::IsNotNull( xxlist->head )) {
HXLINE( 952)				_hx_tmp3 = hx::IsNotNull( xxlist->head->next );
            			}
            			else {
HXLINE( 952)				_hx_tmp3 = false;
            			}
HXDLIN( 952)			if (_hx_tmp3) {
HXLINE( 953)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,head) = xxlist->head;
HXLINE( 954)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,tail) = null();
HXLINE( 955)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,left) = null();
HXLINE( 956)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,right) = null();
HXLINE( 957)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,nxt4,"nxt") = null();
HXLINE( 958)				HX_VARI( int,listSize) = (int)1;
HXLINE( 959)				HX_VAR( int,numMerges);
HXDLIN( 959)				HX_VAR( int,leftSize);
HXDLIN( 959)				HX_VAR( int,rightSize);
HXLINE( 960)				while(true){
HXLINE( 961)					numMerges = (int)0;
HXLINE( 962)					left = head;
HXLINE( 963)					head = null();
HXDLIN( 963)					tail = head;
HXLINE( 964)					while(hx::IsNotNull( left )){
HXLINE( 965)						numMerges = (numMerges + (int)1);
HXLINE( 966)						right = left;
HXLINE( 967)						leftSize = (int)0;
HXLINE( 968)						rightSize = listSize;
HXLINE( 969)						while(true){
HXLINE( 969)							bool _hx_tmp4;
HXDLIN( 969)							if (hx::IsNotNull( right )) {
HXLINE( 969)								_hx_tmp4 = (leftSize < listSize);
            							}
            							else {
HXLINE( 969)								_hx_tmp4 = false;
            							}
HXDLIN( 969)							if (!(_hx_tmp4)) {
HXLINE( 969)								goto _hx_goto_15;
            							}
HXLINE( 970)							leftSize = (leftSize + (int)1);
HXLINE( 971)							right = right->next;
            						}
            						_hx_goto_15:;
HXLINE( 973)						while(true){
HXLINE( 973)							bool _hx_tmp5;
HXDLIN( 973)							if ((leftSize <= (int)0)) {
HXLINE( 973)								if ((rightSize > (int)0)) {
HXLINE( 973)									_hx_tmp5 = hx::IsNotNull( right );
            								}
            								else {
HXLINE( 973)									_hx_tmp5 = false;
            								}
            							}
            							else {
HXLINE( 973)								_hx_tmp5 = true;
            							}
HXDLIN( 973)							if (!(_hx_tmp5)) {
HXLINE( 973)								goto _hx_goto_16;
            							}
HXLINE( 974)							if ((leftSize == (int)0)) {
HXLINE( 975)								nxt4 = right;
HXLINE( 976)								right = right->next;
HXLINE( 977)								rightSize = (rightSize - (int)1);
            							}
            							else {
HXLINE( 979)								bool _hx_tmp6;
HXDLIN( 979)								if ((rightSize != (int)0)) {
HXLINE( 979)									_hx_tmp6 = hx::IsNull( right );
            								}
            								else {
HXLINE( 979)									_hx_tmp6 = true;
            								}
HXDLIN( 979)								if (_hx_tmp6) {
HXLINE( 980)									nxt4 = left;
HXLINE( 981)									left = left->next;
HXLINE( 982)									leftSize = (leftSize - (int)1);
            								}
            								else {
HXLINE( 984)									if ((left->elt->time < right->elt->time)) {
HXLINE( 985)										nxt4 = left;
HXLINE( 986)										left = left->next;
HXLINE( 987)										leftSize = (leftSize - (int)1);
            									}
            									else {
HXLINE( 990)										nxt4 = right;
HXLINE( 991)										right = right->next;
HXLINE( 992)										rightSize = (rightSize - (int)1);
            									}
            								}
            							}
HXLINE( 994)							if (hx::IsNotNull( tail )) {
HXLINE( 994)								tail->next = nxt4;
            							}
            							else {
HXLINE( 995)								head = nxt4;
            							}
HXLINE( 996)							tail = nxt4;
            						}
            						_hx_goto_16:;
HXLINE( 998)						left = right;
            					}
HXLINE(1000)					tail->next = null();
HXLINE(1001)					listSize = ((int)listSize << (int)(int)1);
HXLINE( 960)					if (!((numMerges > (int)1))) {
HXLINE( 960)						goto _hx_goto_13;
            					}
            				}
            				_hx_goto_13:;
HXLINE(1004)				{
HXLINE(1004)					xxlist->head = head;
HXDLIN(1004)					xxlist->modified = true;
HXDLIN(1004)					xxlist->pushmod = true;
            				}
            			}
            		}
HXLINE(1007)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Cutter_obj::ints->head )){
HXLINE(1008)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutInt,i1,"i") = ::zpp_nape::geom::ZPP_Cutter_obj::ints->pop_unsafe();
HXLINE(1009)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutInt,j1,"j") = ::zpp_nape::geom::ZPP_Cutter_obj::ints->pop_unsafe();
HXLINE(1010)			bool _hx_tmp7;
HXDLIN(1010)			if (!(i1->virtualint)) {
HXLINE(1010)				_hx_tmp7 = !(j1->virtualint);
            			}
            			else {
HXLINE(1010)				_hx_tmp7 = false;
            			}
HXDLIN(1010)			if (_hx_tmp7) {
HXLINE(1011)				{
HXLINE(1012)					i1->end->next->prev = j1->start->prev;
HXLINE(1013)					j1->start->prev->next = i1->end->next;
HXLINE(1014)					i1->end->next = j1->start;
HXLINE(1015)					j1->start->prev = i1->end;
            				}
HXLINE(1017)				{
HXLINE(1018)					j1->end->next->prev = i1->start->prev;
HXLINE(1019)					i1->start->prev->next = j1->end->next;
HXLINE(1020)					j1->end->next = i1->start;
HXLINE(1021)					i1->start->prev = j1->end;
            				}
HXLINE(1023)				{
HXLINE(1024)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,xr1,"xr");
HXDLIN(1024)					if (hx::IsEq( i1->path0,i1->path0->parent )) {
HXLINE(1024)						xr1 = i1->path0;
            					}
            					else {
HXLINE(1027)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj8,"obj") = i1->path0;
HXLINE(1028)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack2,"stack") = null();
HXLINE(1029)						while(hx::IsNotEq( obj8,obj8->parent )){
HXLINE(1030)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt5,"nxt") = obj8->parent;
HXLINE(1031)							obj8->parent = stack2;
HXLINE(1032)							stack2 = obj8;
HXLINE(1033)							obj8 = nxt5;
            						}
HXLINE(1035)						while(hx::IsNotNull( stack2 )){
HXLINE(1036)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt6,"nxt") = stack2->parent;
HXLINE(1037)							stack2->parent = obj8;
HXLINE(1038)							stack2 = nxt6;
            						}
HXLINE(1024)						xr1 = obj8;
            					}
HXLINE(1043)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,yr1,"yr");
HXDLIN(1043)					if (hx::IsEq( j1->path1,j1->path1->parent )) {
HXLINE(1043)						yr1 = j1->path1;
            					}
            					else {
HXLINE(1046)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj9,"obj") = j1->path1;
HXLINE(1047)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack3,"stack") = null();
HXLINE(1048)						while(hx::IsNotEq( obj9,obj9->parent )){
HXLINE(1049)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt7,"nxt") = obj9->parent;
HXLINE(1050)							obj9->parent = stack3;
HXLINE(1051)							stack3 = obj9;
HXLINE(1052)							obj9 = nxt7;
            						}
HXLINE(1054)						while(hx::IsNotNull( stack3 )){
HXLINE(1055)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt8,"nxt") = stack3->parent;
HXLINE(1056)							stack3->parent = obj9;
HXLINE(1057)							stack3 = nxt8;
            						}
HXLINE(1043)						yr1 = obj9;
            					}
HXLINE(1062)					if (hx::IsNotEq( xr1,yr1 )) {
HXLINE(1063)						if ((xr1->rank < yr1->rank)) {
HXLINE(1063)							xr1->parent = yr1;
            						}
            						else {
HXLINE(1064)							if ((xr1->rank > yr1->rank)) {
HXLINE(1064)								yr1->parent = xr1;
            							}
            							else {
HXLINE(1066)								yr1->parent = xr1;
HXLINE(1067)								xr1->rank++;
            							}
            						}
            					}
            				}
HXLINE(1071)				{
HXLINE(1072)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,xr2,"xr");
HXDLIN(1072)					if (hx::IsEq( i1->path1,i1->path1->parent )) {
HXLINE(1072)						xr2 = i1->path1;
            					}
            					else {
HXLINE(1075)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj10,"obj") = i1->path1;
HXLINE(1076)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack4,"stack") = null();
HXLINE(1077)						while(hx::IsNotEq( obj10,obj10->parent )){
HXLINE(1078)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt9,"nxt") = obj10->parent;
HXLINE(1079)							obj10->parent = stack4;
HXLINE(1080)							stack4 = obj10;
HXLINE(1081)							obj10 = nxt9;
            						}
HXLINE(1083)						while(hx::IsNotNull( stack4 )){
HXLINE(1084)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt10,"nxt") = stack4->parent;
HXLINE(1085)							stack4->parent = obj10;
HXLINE(1086)							stack4 = nxt10;
            						}
HXLINE(1072)						xr2 = obj10;
            					}
HXLINE(1091)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,yr2,"yr");
HXDLIN(1091)					if (hx::IsEq( j1->path0,j1->path0->parent )) {
HXLINE(1091)						yr2 = j1->path0;
            					}
            					else {
HXLINE(1094)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj11,"obj") = j1->path0;
HXLINE(1095)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack5,"stack") = null();
HXLINE(1096)						while(hx::IsNotEq( obj11,obj11->parent )){
HXLINE(1097)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt11,"nxt") = obj11->parent;
HXLINE(1098)							obj11->parent = stack5;
HXLINE(1099)							stack5 = obj11;
HXLINE(1100)							obj11 = nxt11;
            						}
HXLINE(1102)						while(hx::IsNotNull( stack5 )){
HXLINE(1103)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt12,"nxt") = stack5->parent;
HXLINE(1104)							stack5->parent = obj11;
HXLINE(1105)							stack5 = nxt12;
            						}
HXLINE(1091)						yr2 = obj11;
            					}
HXLINE(1110)					if (hx::IsNotEq( xr2,yr2 )) {
HXLINE(1111)						if ((xr2->rank < yr2->rank)) {
HXLINE(1111)							xr2->parent = yr2;
            						}
            						else {
HXLINE(1112)							if ((xr2->rank > yr2->rank)) {
HXLINE(1112)								yr2->parent = xr2;
            							}
            							else {
HXLINE(1114)								yr2->parent = xr2;
HXLINE(1115)								xr2->rank++;
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE(1120)				bool _hx_tmp8;
HXDLIN(1120)				if (i1->virtualint) {
HXLINE(1120)					_hx_tmp8 = !(j1->virtualint);
            				}
            				else {
HXLINE(1120)					_hx_tmp8 = false;
            				}
HXDLIN(1120)				if (_hx_tmp8) {
HXLINE(1130)					 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp9;
HXDLIN(1130)					bool _hx_tmp10;
HXDLIN(1130)					if (hx::IsNotNull( j1->end )) {
HXLINE(1130)						_hx_tmp10 = hx::IsEq( j1->end->prev,j1->end );
            					}
            					else {
HXLINE(1130)						_hx_tmp10 = false;
            					}
HXDLIN(1130)					if (_hx_tmp10) {
HXLINE(1131)						j1->end->next = (j1->end->prev = null());
HXLINE(1132)						{
HXLINE(1133)							HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,o) = j1->end;
HXLINE(1142)							{
HXLINE(1142)								if (hx::IsNotNull( o->wrap )) {
HXLINE(1142)									o->wrap->zpp_inner->_inuse = false;
HXDLIN(1142)									{
HXLINE(1142)										HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = o->wrap;
HXDLIN(1142)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = _this4->zpp_inner;
HXDLIN(1142)										_this4->zpp_inner->outer = null();
HXDLIN(1142)										_this4->zpp_inner = null();
HXDLIN(1142)										{
HXLINE(1142)											_this4->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1142)											::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this4;
            										}
HXDLIN(1142)										{
HXLINE(1142)											{
HXLINE(1142)												if (hx::IsNotNull( inner->outer )) {
HXLINE(1142)													inner->outer->zpp_inner = null();
HXDLIN(1142)													inner->outer = null();
            												}
HXDLIN(1142)												inner->_isimmutable = null();
HXDLIN(1142)												inner->_validate = null();
HXDLIN(1142)												inner->_invalidate = null();
            											}
HXDLIN(1142)											inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1142)											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            										}
            									}
HXDLIN(1142)									o->wrap = null();
            								}
HXDLIN(1142)								o->prev = (o->next = null());
            							}
HXLINE(1143)							o->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1144)							::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o;
            						}
HXLINE(1130)						_hx_tmp9 = null();
            					}
            					else {
HXLINE(1152)						HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,retnodes) = j1->end->prev;
HXLINE(1153)						j1->end->prev->next = j1->end->next;
HXLINE(1154)						j1->end->next->prev = j1->end->prev;
HXLINE(1155)						j1->end->next = (j1->end->prev = null());
HXLINE(1156)						{
HXLINE(1157)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o1,"o") = j1->end;
HXLINE(1166)							{
HXLINE(1166)								if (hx::IsNotNull( o1->wrap )) {
HXLINE(1166)									o1->wrap->zpp_inner->_inuse = false;
HXDLIN(1166)									{
HXLINE(1166)										HX_VARI_NAME(  ::nape::geom::Vec2,_this5,"_this") = o1->wrap;
HXDLIN(1166)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = _this5->zpp_inner;
HXDLIN(1166)										_this5->zpp_inner->outer = null();
HXDLIN(1166)										_this5->zpp_inner = null();
HXDLIN(1166)										{
HXLINE(1166)											_this5->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1166)											::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this5;
            										}
HXDLIN(1166)										{
HXLINE(1166)											{
HXLINE(1166)												if (hx::IsNotNull( inner1->outer )) {
HXLINE(1166)													inner1->outer->zpp_inner = null();
HXDLIN(1166)													inner1->outer = null();
            												}
HXDLIN(1166)												inner1->_isimmutable = null();
HXDLIN(1166)												inner1->_validate = null();
HXDLIN(1166)												inner1->_invalidate = null();
            											}
HXDLIN(1166)											inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1166)											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            										}
            									}
HXDLIN(1166)									o1->wrap = null();
            								}
HXDLIN(1166)								o1->prev = (o1->next = null());
            							}
HXLINE(1167)							o1->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1168)							::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o1;
            						}
HXLINE(1173)						j1->end = null();
HXLINE(1130)						_hx_tmp9 = retnodes;
            					}
HXLINE(1121)					j1->end = _hx_tmp9;
HXLINE(1177)					if (!(j1->vertex)) {
HXLINE(1178)						if (hx::IsNotEq( j1->end,j1->path0->vert )) {
HXLINE(1179)							j1->start->x = j1->end->x;
HXLINE(1180)							j1->start->y = j1->end->y;
HXLINE(1190)							 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp11;
HXDLIN(1190)							bool _hx_tmp12;
HXDLIN(1190)							if (hx::IsNotNull( j1->end )) {
HXLINE(1190)								_hx_tmp12 = hx::IsEq( j1->end->prev,j1->end );
            							}
            							else {
HXLINE(1190)								_hx_tmp12 = false;
            							}
HXDLIN(1190)							if (_hx_tmp12) {
HXLINE(1191)								j1->end->next = (j1->end->prev = null());
HXLINE(1192)								{
HXLINE(1193)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o2,"o") = j1->end;
HXLINE(1202)									{
HXLINE(1202)										if (hx::IsNotNull( o2->wrap )) {
HXLINE(1202)											o2->wrap->zpp_inner->_inuse = false;
HXDLIN(1202)											{
HXLINE(1202)												HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = o2->wrap;
HXDLIN(1202)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = _this6->zpp_inner;
HXDLIN(1202)												_this6->zpp_inner->outer = null();
HXDLIN(1202)												_this6->zpp_inner = null();
HXDLIN(1202)												{
HXLINE(1202)													_this6->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1202)													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this6;
            												}
HXDLIN(1202)												{
HXLINE(1202)													{
HXLINE(1202)														if (hx::IsNotNull( inner2->outer )) {
HXLINE(1202)															inner2->outer->zpp_inner = null();
HXDLIN(1202)															inner2->outer = null();
            														}
HXDLIN(1202)														inner2->_isimmutable = null();
HXDLIN(1202)														inner2->_validate = null();
HXDLIN(1202)														inner2->_invalidate = null();
            													}
HXDLIN(1202)													inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1202)													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            												}
            											}
HXDLIN(1202)											o2->wrap = null();
            										}
HXDLIN(1202)										o2->prev = (o2->next = null());
            									}
HXLINE(1203)									o2->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1204)									::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o2;
            								}
HXLINE(1190)								_hx_tmp11 = null();
            							}
            							else {
HXLINE(1212)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,retnodes1,"retnodes") = j1->end->prev;
HXLINE(1213)								j1->end->prev->next = j1->end->next;
HXLINE(1214)								j1->end->next->prev = j1->end->prev;
HXLINE(1215)								j1->end->next = (j1->end->prev = null());
HXLINE(1216)								{
HXLINE(1217)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o3,"o") = j1->end;
HXLINE(1226)									{
HXLINE(1226)										if (hx::IsNotNull( o3->wrap )) {
HXLINE(1226)											o3->wrap->zpp_inner->_inuse = false;
HXDLIN(1226)											{
HXLINE(1226)												HX_VARI_NAME(  ::nape::geom::Vec2,_this7,"_this") = o3->wrap;
HXDLIN(1226)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner3,"inner") = _this7->zpp_inner;
HXDLIN(1226)												_this7->zpp_inner->outer = null();
HXDLIN(1226)												_this7->zpp_inner = null();
HXDLIN(1226)												{
HXLINE(1226)													_this7->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1226)													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this7;
            												}
HXDLIN(1226)												{
HXLINE(1226)													{
HXLINE(1226)														if (hx::IsNotNull( inner3->outer )) {
HXLINE(1226)															inner3->outer->zpp_inner = null();
HXDLIN(1226)															inner3->outer = null();
            														}
HXDLIN(1226)														inner3->_isimmutable = null();
HXDLIN(1226)														inner3->_validate = null();
HXDLIN(1226)														inner3->_invalidate = null();
            													}
HXDLIN(1226)													inner3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1226)													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner3;
            												}
            											}
HXDLIN(1226)											o3->wrap = null();
            										}
HXDLIN(1226)										o3->prev = (o3->next = null());
            									}
HXLINE(1227)									o3->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1228)									::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o3;
            								}
HXLINE(1233)								j1->end = null();
HXLINE(1190)								_hx_tmp11 = retnodes1;
            							}
HXLINE(1181)							j1->end = _hx_tmp11;
            						}
            						else {
HXLINE(1239)							HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,n) = j1->start->next;
HXLINE(1240)							j1->start->x = n->x;
HXLINE(1241)							j1->start->y = n->y;
HXLINE(1251)							bool _hx_tmp13;
HXDLIN(1251)							if (hx::IsNotNull( n )) {
HXLINE(1251)								_hx_tmp13 = hx::IsEq( n->prev,n );
            							}
            							else {
HXLINE(1251)								_hx_tmp13 = false;
            							}
HXDLIN(1251)							if (_hx_tmp13) {
HXLINE(1252)								n->next = (n->prev = null());
HXLINE(1253)								{
HXLINE(1254)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o4,"o") = n;
HXLINE(1263)									{
HXLINE(1263)										if (hx::IsNotNull( o4->wrap )) {
HXLINE(1263)											o4->wrap->zpp_inner->_inuse = false;
HXDLIN(1263)											{
HXLINE(1263)												HX_VARI_NAME(  ::nape::geom::Vec2,_this8,"_this") = o4->wrap;
HXDLIN(1263)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner4,"inner") = _this8->zpp_inner;
HXDLIN(1263)												_this8->zpp_inner->outer = null();
HXDLIN(1263)												_this8->zpp_inner = null();
HXDLIN(1263)												{
HXLINE(1263)													_this8->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1263)													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this8;
            												}
HXDLIN(1263)												{
HXLINE(1263)													{
HXLINE(1263)														if (hx::IsNotNull( inner4->outer )) {
HXLINE(1263)															inner4->outer->zpp_inner = null();
HXDLIN(1263)															inner4->outer = null();
            														}
HXDLIN(1263)														inner4->_isimmutable = null();
HXDLIN(1263)														inner4->_validate = null();
HXDLIN(1263)														inner4->_invalidate = null();
            													}
HXDLIN(1263)													inner4->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1263)													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner4;
            												}
            											}
HXDLIN(1263)											o4->wrap = null();
            										}
HXDLIN(1263)										o4->prev = (o4->next = null());
            									}
HXLINE(1264)									o4->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1265)									::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o4;
            								}
HXLINE(1270)								n = null();
            							}
            							else {
HXLINE(1273)								n->prev->next = n->next;
HXLINE(1274)								n->next->prev = n->prev;
HXLINE(1275)								n->next = (n->prev = null());
HXLINE(1276)								{
HXLINE(1277)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o5,"o") = n;
HXLINE(1286)									{
HXLINE(1286)										if (hx::IsNotNull( o5->wrap )) {
HXLINE(1286)											o5->wrap->zpp_inner->_inuse = false;
HXDLIN(1286)											{
HXLINE(1286)												HX_VARI_NAME(  ::nape::geom::Vec2,_this9,"_this") = o5->wrap;
HXDLIN(1286)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner5,"inner") = _this9->zpp_inner;
HXDLIN(1286)												_this9->zpp_inner->outer = null();
HXDLIN(1286)												_this9->zpp_inner = null();
HXDLIN(1286)												{
HXLINE(1286)													_this9->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1286)													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this9;
            												}
HXDLIN(1286)												{
HXLINE(1286)													{
HXLINE(1286)														if (hx::IsNotNull( inner5->outer )) {
HXLINE(1286)															inner5->outer->zpp_inner = null();
HXDLIN(1286)															inner5->outer = null();
            														}
HXDLIN(1286)														inner5->_isimmutable = null();
HXDLIN(1286)														inner5->_validate = null();
HXDLIN(1286)														inner5->_invalidate = null();
            													}
HXDLIN(1286)													inner5->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1286)													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner5;
            												}
            											}
HXDLIN(1286)											o5->wrap = null();
            										}
HXDLIN(1286)										o5->prev = (o5->next = null());
            									}
HXLINE(1287)									o5->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1288)									::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o5;
            								}
            							}
            						}
            					}
HXLINE(1297)					{
HXLINE(1298)						j1->end->next->prev = j1->start->prev;
HXLINE(1299)						j1->start->prev->next = j1->end->next;
HXLINE(1300)						j1->end->next = j1->start;
HXLINE(1301)						j1->start->prev = j1->end;
            					}
HXLINE(1303)					{
HXLINE(1304)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,xr3,"xr");
HXDLIN(1304)						if (hx::IsEq( j1->path0,j1->path0->parent )) {
HXLINE(1304)							xr3 = j1->path0;
            						}
            						else {
HXLINE(1307)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj12,"obj") = j1->path0;
HXLINE(1308)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack6,"stack") = null();
HXLINE(1309)							while(hx::IsNotEq( obj12,obj12->parent )){
HXLINE(1310)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt13,"nxt") = obj12->parent;
HXLINE(1311)								obj12->parent = stack6;
HXLINE(1312)								stack6 = obj12;
HXLINE(1313)								obj12 = nxt13;
            							}
HXLINE(1315)							while(hx::IsNotNull( stack6 )){
HXLINE(1316)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt14,"nxt") = stack6->parent;
HXLINE(1317)								stack6->parent = obj12;
HXLINE(1318)								stack6 = nxt14;
            							}
HXLINE(1304)							xr3 = obj12;
            						}
HXLINE(1323)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,yr3,"yr");
HXDLIN(1323)						if (hx::IsEq( j1->path1,j1->path1->parent )) {
HXLINE(1323)							yr3 = j1->path1;
            						}
            						else {
HXLINE(1326)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj13,"obj") = j1->path1;
HXLINE(1327)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack7,"stack") = null();
HXLINE(1328)							while(hx::IsNotEq( obj13,obj13->parent )){
HXLINE(1329)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt15,"nxt") = obj13->parent;
HXLINE(1330)								obj13->parent = stack7;
HXLINE(1331)								stack7 = obj13;
HXLINE(1332)								obj13 = nxt15;
            							}
HXLINE(1334)							while(hx::IsNotNull( stack7 )){
HXLINE(1335)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt16,"nxt") = stack7->parent;
HXLINE(1336)								stack7->parent = obj13;
HXLINE(1337)								stack7 = nxt16;
            							}
HXLINE(1323)							yr3 = obj13;
            						}
HXLINE(1342)						if (hx::IsNotEq( xr3,yr3 )) {
HXLINE(1343)							if ((xr3->rank < yr3->rank)) {
HXLINE(1343)								xr3->parent = yr3;
            							}
            							else {
HXLINE(1344)								if ((xr3->rank > yr3->rank)) {
HXLINE(1344)									yr3->parent = xr3;
            								}
            								else {
HXLINE(1346)									yr3->parent = xr3;
HXLINE(1347)									xr3->rank++;
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(1352)					bool _hx_tmp14;
HXDLIN(1352)					if (j1->virtualint) {
HXLINE(1352)						_hx_tmp14 = !(i1->virtualint);
            					}
            					else {
HXLINE(1352)						_hx_tmp14 = false;
            					}
HXDLIN(1352)					if (_hx_tmp14) {
HXLINE(1362)						 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp15;
HXDLIN(1362)						bool _hx_tmp16;
HXDLIN(1362)						if (hx::IsNotNull( i1->end )) {
HXLINE(1362)							_hx_tmp16 = hx::IsEq( i1->end->prev,i1->end );
            						}
            						else {
HXLINE(1362)							_hx_tmp16 = false;
            						}
HXDLIN(1362)						if (_hx_tmp16) {
HXLINE(1363)							i1->end->next = (i1->end->prev = null());
HXLINE(1364)							{
HXLINE(1365)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o6,"o") = i1->end;
HXLINE(1374)								{
HXLINE(1374)									if (hx::IsNotNull( o6->wrap )) {
HXLINE(1374)										o6->wrap->zpp_inner->_inuse = false;
HXDLIN(1374)										{
HXLINE(1374)											HX_VARI_NAME(  ::nape::geom::Vec2,_this10,"_this") = o6->wrap;
HXDLIN(1374)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner6,"inner") = _this10->zpp_inner;
HXDLIN(1374)											_this10->zpp_inner->outer = null();
HXDLIN(1374)											_this10->zpp_inner = null();
HXDLIN(1374)											{
HXLINE(1374)												_this10->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1374)												::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this10;
            											}
HXDLIN(1374)											{
HXLINE(1374)												{
HXLINE(1374)													if (hx::IsNotNull( inner6->outer )) {
HXLINE(1374)														inner6->outer->zpp_inner = null();
HXDLIN(1374)														inner6->outer = null();
            													}
HXDLIN(1374)													inner6->_isimmutable = null();
HXDLIN(1374)													inner6->_validate = null();
HXDLIN(1374)													inner6->_invalidate = null();
            												}
HXDLIN(1374)												inner6->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1374)												::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner6;
            											}
            										}
HXDLIN(1374)										o6->wrap = null();
            									}
HXDLIN(1374)									o6->prev = (o6->next = null());
            								}
HXLINE(1375)								o6->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1376)								::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o6;
            							}
HXLINE(1362)							_hx_tmp15 = null();
            						}
            						else {
HXLINE(1384)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,retnodes2,"retnodes") = i1->end->prev;
HXLINE(1385)							i1->end->prev->next = i1->end->next;
HXLINE(1386)							i1->end->next->prev = i1->end->prev;
HXLINE(1387)							i1->end->next = (i1->end->prev = null());
HXLINE(1388)							{
HXLINE(1389)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o7,"o") = i1->end;
HXLINE(1398)								{
HXLINE(1398)									if (hx::IsNotNull( o7->wrap )) {
HXLINE(1398)										o7->wrap->zpp_inner->_inuse = false;
HXDLIN(1398)										{
HXLINE(1398)											HX_VARI_NAME(  ::nape::geom::Vec2,_this11,"_this") = o7->wrap;
HXDLIN(1398)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner7,"inner") = _this11->zpp_inner;
HXDLIN(1398)											_this11->zpp_inner->outer = null();
HXDLIN(1398)											_this11->zpp_inner = null();
HXDLIN(1398)											{
HXLINE(1398)												_this11->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1398)												::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this11;
            											}
HXDLIN(1398)											{
HXLINE(1398)												{
HXLINE(1398)													if (hx::IsNotNull( inner7->outer )) {
HXLINE(1398)														inner7->outer->zpp_inner = null();
HXDLIN(1398)														inner7->outer = null();
            													}
HXDLIN(1398)													inner7->_isimmutable = null();
HXDLIN(1398)													inner7->_validate = null();
HXDLIN(1398)													inner7->_invalidate = null();
            												}
HXDLIN(1398)												inner7->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1398)												::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner7;
            											}
            										}
HXDLIN(1398)										o7->wrap = null();
            									}
HXDLIN(1398)									o7->prev = (o7->next = null());
            								}
HXLINE(1399)								o7->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1400)								::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o7;
            							}
HXLINE(1405)							i1->end = null();
HXLINE(1362)							_hx_tmp15 = retnodes2;
            						}
HXLINE(1353)						i1->end = _hx_tmp15;
HXLINE(1409)						if (!(i1->vertex)) {
HXLINE(1410)							if (hx::IsNotEq( i1->end,i1->path0->vert )) {
HXLINE(1411)								i1->start->x = i1->end->x;
HXLINE(1412)								i1->start->y = i1->end->y;
HXLINE(1422)								 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp17;
HXDLIN(1422)								bool _hx_tmp18;
HXDLIN(1422)								if (hx::IsNotNull( i1->end )) {
HXLINE(1422)									_hx_tmp18 = hx::IsEq( i1->end->prev,i1->end );
            								}
            								else {
HXLINE(1422)									_hx_tmp18 = false;
            								}
HXDLIN(1422)								if (_hx_tmp18) {
HXLINE(1423)									i1->end->next = (i1->end->prev = null());
HXLINE(1424)									{
HXLINE(1425)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o8,"o") = i1->end;
HXLINE(1434)										{
HXLINE(1434)											if (hx::IsNotNull( o8->wrap )) {
HXLINE(1434)												o8->wrap->zpp_inner->_inuse = false;
HXDLIN(1434)												{
HXLINE(1434)													HX_VARI_NAME(  ::nape::geom::Vec2,_this12,"_this") = o8->wrap;
HXDLIN(1434)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner8,"inner") = _this12->zpp_inner;
HXDLIN(1434)													_this12->zpp_inner->outer = null();
HXDLIN(1434)													_this12->zpp_inner = null();
HXDLIN(1434)													{
HXLINE(1434)														_this12->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1434)														::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this12;
            													}
HXDLIN(1434)													{
HXLINE(1434)														{
HXLINE(1434)															if (hx::IsNotNull( inner8->outer )) {
HXLINE(1434)																inner8->outer->zpp_inner = null();
HXDLIN(1434)																inner8->outer = null();
            															}
HXDLIN(1434)															inner8->_isimmutable = null();
HXDLIN(1434)															inner8->_validate = null();
HXDLIN(1434)															inner8->_invalidate = null();
            														}
HXDLIN(1434)														inner8->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1434)														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner8;
            													}
            												}
HXDLIN(1434)												o8->wrap = null();
            											}
HXDLIN(1434)											o8->prev = (o8->next = null());
            										}
HXLINE(1435)										o8->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1436)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o8;
            									}
HXLINE(1422)									_hx_tmp17 = null();
            								}
            								else {
HXLINE(1444)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,retnodes3,"retnodes") = i1->end->prev;
HXLINE(1445)									i1->end->prev->next = i1->end->next;
HXLINE(1446)									i1->end->next->prev = i1->end->prev;
HXLINE(1447)									i1->end->next = (i1->end->prev = null());
HXLINE(1448)									{
HXLINE(1449)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o9,"o") = i1->end;
HXLINE(1458)										{
HXLINE(1458)											if (hx::IsNotNull( o9->wrap )) {
HXLINE(1458)												o9->wrap->zpp_inner->_inuse = false;
HXDLIN(1458)												{
HXLINE(1458)													HX_VARI_NAME(  ::nape::geom::Vec2,_this13,"_this") = o9->wrap;
HXDLIN(1458)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner9,"inner") = _this13->zpp_inner;
HXDLIN(1458)													_this13->zpp_inner->outer = null();
HXDLIN(1458)													_this13->zpp_inner = null();
HXDLIN(1458)													{
HXLINE(1458)														_this13->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1458)														::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this13;
            													}
HXDLIN(1458)													{
HXLINE(1458)														{
HXLINE(1458)															if (hx::IsNotNull( inner9->outer )) {
HXLINE(1458)																inner9->outer->zpp_inner = null();
HXDLIN(1458)																inner9->outer = null();
            															}
HXDLIN(1458)															inner9->_isimmutable = null();
HXDLIN(1458)															inner9->_validate = null();
HXDLIN(1458)															inner9->_invalidate = null();
            														}
HXDLIN(1458)														inner9->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1458)														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner9;
            													}
            												}
HXDLIN(1458)												o9->wrap = null();
            											}
HXDLIN(1458)											o9->prev = (o9->next = null());
            										}
HXLINE(1459)										o9->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1460)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o9;
            									}
HXLINE(1465)									i1->end = null();
HXLINE(1422)									_hx_tmp17 = retnodes3;
            								}
HXLINE(1413)								i1->end = _hx_tmp17;
            							}
            							else {
HXLINE(1471)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,n1,"n") = i1->start->next;
HXLINE(1472)								i1->start->x = n1->x;
HXLINE(1473)								i1->start->y = n1->y;
HXLINE(1483)								bool _hx_tmp19;
HXDLIN(1483)								if (hx::IsNotNull( n1 )) {
HXLINE(1483)									_hx_tmp19 = hx::IsEq( n1->prev,n1 );
            								}
            								else {
HXLINE(1483)									_hx_tmp19 = false;
            								}
HXDLIN(1483)								if (_hx_tmp19) {
HXLINE(1484)									n1->next = (n1->prev = null());
HXLINE(1485)									{
HXLINE(1486)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o10,"o") = n1;
HXLINE(1495)										{
HXLINE(1495)											if (hx::IsNotNull( o10->wrap )) {
HXLINE(1495)												o10->wrap->zpp_inner->_inuse = false;
HXDLIN(1495)												{
HXLINE(1495)													HX_VARI_NAME(  ::nape::geom::Vec2,_this14,"_this") = o10->wrap;
HXDLIN(1495)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner10,"inner") = _this14->zpp_inner;
HXDLIN(1495)													_this14->zpp_inner->outer = null();
HXDLIN(1495)													_this14->zpp_inner = null();
HXDLIN(1495)													{
HXLINE(1495)														_this14->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1495)														::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this14;
            													}
HXDLIN(1495)													{
HXLINE(1495)														{
HXLINE(1495)															if (hx::IsNotNull( inner10->outer )) {
HXLINE(1495)																inner10->outer->zpp_inner = null();
HXDLIN(1495)																inner10->outer = null();
            															}
HXDLIN(1495)															inner10->_isimmutable = null();
HXDLIN(1495)															inner10->_validate = null();
HXDLIN(1495)															inner10->_invalidate = null();
            														}
HXDLIN(1495)														inner10->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1495)														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner10;
            													}
            												}
HXDLIN(1495)												o10->wrap = null();
            											}
HXDLIN(1495)											o10->prev = (o10->next = null());
            										}
HXLINE(1496)										o10->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1497)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o10;
            									}
HXLINE(1502)									n1 = null();
            								}
            								else {
HXLINE(1505)									n1->prev->next = n1->next;
HXLINE(1506)									n1->next->prev = n1->prev;
HXLINE(1507)									n1->next = (n1->prev = null());
HXLINE(1508)									{
HXLINE(1509)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,o11,"o") = n1;
HXLINE(1518)										{
HXLINE(1518)											if (hx::IsNotNull( o11->wrap )) {
HXLINE(1518)												o11->wrap->zpp_inner->_inuse = false;
HXDLIN(1518)												{
HXLINE(1518)													HX_VARI_NAME(  ::nape::geom::Vec2,_this15,"_this") = o11->wrap;
HXDLIN(1518)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner11,"inner") = _this15->zpp_inner;
HXDLIN(1518)													_this15->zpp_inner->outer = null();
HXDLIN(1518)													_this15->zpp_inner = null();
HXDLIN(1518)													{
HXLINE(1518)														_this15->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1518)														::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this15;
            													}
HXDLIN(1518)													{
HXLINE(1518)														{
HXLINE(1518)															if (hx::IsNotNull( inner11->outer )) {
HXLINE(1518)																inner11->outer->zpp_inner = null();
HXDLIN(1518)																inner11->outer = null();
            															}
HXDLIN(1518)															inner11->_isimmutable = null();
HXDLIN(1518)															inner11->_validate = null();
HXDLIN(1518)															inner11->_invalidate = null();
            														}
HXDLIN(1518)														inner11->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1518)														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner11;
            													}
            												}
HXDLIN(1518)												o11->wrap = null();
            											}
HXDLIN(1518)											o11->prev = (o11->next = null());
            										}
HXLINE(1519)										o11->next = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE(1520)										::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = o11;
            									}
            								}
            							}
            						}
HXLINE(1529)						{
HXLINE(1530)							i1->end->next->prev = i1->start->prev;
HXLINE(1531)							i1->start->prev->next = i1->end->next;
HXLINE(1532)							i1->end->next = i1->start;
HXLINE(1533)							i1->start->prev = i1->end;
            						}
HXLINE(1535)						{
HXLINE(1536)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,xr4,"xr");
HXDLIN(1536)							if (hx::IsEq( i1->path0,i1->path0->parent )) {
HXLINE(1536)								xr4 = i1->path0;
            							}
            							else {
HXLINE(1539)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj14,"obj") = i1->path0;
HXLINE(1540)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack8,"stack") = null();
HXLINE(1541)								while(hx::IsNotEq( obj14,obj14->parent )){
HXLINE(1542)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt17,"nxt") = obj14->parent;
HXLINE(1543)									obj14->parent = stack8;
HXLINE(1544)									stack8 = obj14;
HXLINE(1545)									obj14 = nxt17;
            								}
HXLINE(1547)								while(hx::IsNotNull( stack8 )){
HXLINE(1548)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt18,"nxt") = stack8->parent;
HXLINE(1549)									stack8->parent = obj14;
HXLINE(1550)									stack8 = nxt18;
            								}
HXLINE(1536)								xr4 = obj14;
            							}
HXLINE(1555)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_CutVert,yr4,"yr");
HXDLIN(1555)							if (hx::IsEq( i1->path1,i1->path1->parent )) {
HXLINE(1555)								yr4 = i1->path1;
            							}
            							else {
HXLINE(1558)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj15,"obj") = i1->path1;
HXLINE(1559)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack9,"stack") = null();
HXLINE(1560)								while(hx::IsNotEq( obj15,obj15->parent )){
HXLINE(1561)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt19,"nxt") = obj15->parent;
HXLINE(1562)									obj15->parent = stack9;
HXLINE(1563)									stack9 = obj15;
HXLINE(1564)									obj15 = nxt19;
            								}
HXLINE(1566)								while(hx::IsNotNull( stack9 )){
HXLINE(1567)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt20,"nxt") = stack9->parent;
HXLINE(1568)									stack9->parent = obj15;
HXLINE(1569)									stack9 = nxt20;
            								}
HXLINE(1555)								yr4 = obj15;
            							}
HXLINE(1574)							if (hx::IsNotEq( xr4,yr4 )) {
HXLINE(1575)								if ((xr4->rank < yr4->rank)) {
HXLINE(1575)									xr4->parent = yr4;
            								}
            								else {
HXLINE(1576)									if ((xr4->rank > yr4->rank)) {
HXLINE(1576)										yr4->parent = xr4;
            									}
            									else {
HXLINE(1578)										yr4->parent = xr4;
HXLINE(1579)										xr4->rank++;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1584)			{
HXLINE(1594)				{
HXLINE(1594)					i1->end = (i1->start = null());
HXDLIN(1594)					i1->path0 = (i1->path1 = null());
            				}
HXLINE(1595)				i1->next = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool;
HXLINE(1596)				::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = i1;
            			}
HXLINE(1601)			{
HXLINE(1611)				{
HXLINE(1611)					j1->end = (j1->start = null());
HXDLIN(1611)					j1->path0 = (j1->path1 = null());
            				}
HXLINE(1612)				j1->next = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool;
HXLINE(1613)				::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = j1;
            			}
            		}
HXLINE(1619)		HX_VAR_NAME(  ::nape::geom::GeomPolyList,ret16,"ret");
HXDLIN(1619)		if (hx::IsNull( output )) {
HXLINE(1619)			ret16 =  ::nape::geom::GeomPolyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE(1619)			ret16 = output;
            		}
HXLINE(1620)		{
HXLINE(1621)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,cx_ite) = ::zpp_nape::geom::ZPP_Cutter_obj::paths->head;
HXLINE(1622)			while(hx::IsNotNull( cx_ite )){
HXLINE(1623)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,p5,"p") = cx_ite->elt;
HXLINE(1624)				{
HXLINE(1625)					HX_VAR(  ::zpp_nape::geom::ZPP_CutVert,poly);
HXDLIN(1625)					if (hx::IsEq( p5,p5->parent )) {
HXLINE(1625)						poly = p5;
            					}
            					else {
HXLINE(1628)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,obj16,"obj") = p5;
HXLINE(1629)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,stack10,"stack") = null();
HXLINE(1630)						while(hx::IsNotEq( obj16,obj16->parent )){
HXLINE(1631)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt21,"nxt") = obj16->parent;
HXLINE(1632)							obj16->parent = stack10;
HXLINE(1633)							stack10 = obj16;
HXLINE(1634)							obj16 = nxt21;
            						}
HXLINE(1636)						while(hx::IsNotNull( stack10 )){
HXLINE(1637)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt22,"nxt") = stack10->parent;
HXLINE(1638)							stack10->parent = obj16;
HXLINE(1639)							stack10 = nxt22;
            						}
HXLINE(1625)						poly = obj16;
            					}
HXLINE(1644)					if (poly->used) {
HXLINE(1645)						cx_ite = cx_ite->next;
HXLINE(1646)						continue;
            					}
HXLINE(1648)					poly->used = true;
HXLINE(1649)					{
HXLINE(1650)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,p6,"p") = poly->vert;
HXLINE(1651)						HX_VARI( bool,skip) = true;
HXLINE(1652)						while(true){
HXLINE(1652)							bool _hx_tmp20;
HXDLIN(1652)							if (hx::IsNotNull( poly->vert )) {
HXLINE(1652)								if (!(skip)) {
HXLINE(1652)									_hx_tmp20 = hx::IsNotEq( p6,poly->vert );
            								}
            								else {
HXLINE(1652)									_hx_tmp20 = true;
            								}
            							}
            							else {
HXLINE(1652)								_hx_tmp20 = false;
            							}
HXDLIN(1652)							if (!(_hx_tmp20)) {
HXLINE(1652)								goto _hx_goto_37;
            							}
HXLINE(1653)							skip = false;
HXLINE(1654)							bool _hx_tmp21;
HXDLIN(1654)							if ((p6->x == p6->next->x)) {
HXLINE(1654)								_hx_tmp21 = (p6->y == p6->next->y);
            							}
            							else {
HXLINE(1654)								_hx_tmp21 = false;
            							}
HXDLIN(1654)							if (_hx_tmp21) {
HXLINE(1655)								if (hx::IsEq( p6,poly->vert )) {
HXLINE(1656)									 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp22;
HXDLIN(1656)									if (hx::IsEq( p6->next,p6 )) {
HXLINE(1656)										_hx_tmp22 = null();
            									}
            									else {
HXLINE(1656)										_hx_tmp22 = p6->next;
            									}
HXDLIN(1656)									poly->vert = _hx_tmp22;
HXLINE(1657)									skip = true;
            								}
HXLINE(1668)								bool p7;
HXDLIN(1668)								if (hx::IsNotNull( p6 )) {
HXLINE(1668)									p7 = hx::IsEq( p6->prev,p6 );
            								}
            								else {
HXLINE(1668)									p7 = false;
            								}
HXDLIN(1668)								if (p7) {
HXLINE(1669)									p6->next = (p6->prev = null());
HXLINE(1671)									p6 = null();
HXDLIN(1671)									p6 = p6;
            								}
            								else {
HXLINE(1674)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,retnodes4,"retnodes") = p6->next;
HXLINE(1675)									p6->prev->next = p6->next;
HXLINE(1676)									p6->next->prev = p6->prev;
HXLINE(1677)									p6->next = (p6->prev = null());
HXLINE(1679)									p6 = null();
HXLINE(1680)									p6 = retnodes4;
            								}
            							}
            							else {
HXLINE(1684)								p6 = p6->next;
            							}
            						}
            						_hx_goto_37:;
            					}
HXLINE(1687)					if (hx::IsNotNull( poly->vert )) {
HXLINE(1688)						HX_VARI(  ::nape::geom::GeomPoly,gp) = ::nape::geom::GeomPoly_obj::get(null());
HXLINE(1689)						gp->zpp_inner->vertices = poly->vert;
HXLINE(1690)						if (ret16->zpp_inner->reverse_flag) {
HXLINE(1690)							ret16->push(gp);
            						}
            						else {
HXLINE(1690)							ret16->unshift(gp);
            						}
            					}
            				}
HXLINE(1693)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1697)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Cutter_obj::paths->head )){
HXLINE(1698)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,p8,"p") = ::zpp_nape::geom::ZPP_Cutter_obj::paths->pop_unsafe();
HXLINE(1699)			{
HXLINE(1709)				{
HXLINE(1709)					p8->vert = null();
HXDLIN(1709)					p8->parent = null();
            				}
HXLINE(1710)				p8->next = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXLINE(1711)				::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = p8;
            			}
            		}
HXLINE(1719)		while(hx::IsNotNull( verts )){
HXLINE(1728)			bool verts1;
HXDLIN(1728)			if (hx::IsNotNull( verts )) {
HXLINE(1728)				verts1 = hx::IsEq( verts->prev,verts );
            			}
            			else {
HXLINE(1728)				verts1 = false;
            			}
HXDLIN(1728)			if (verts1) {
HXLINE(1729)				verts->next = (verts->prev = null());
HXLINE(1730)				{
HXLINE(1731)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,o12,"o") = verts;
HXLINE(1740)					{
HXLINE(1740)						o12->vert = null();
HXDLIN(1740)						o12->parent = null();
            					}
HXLINE(1741)					o12->next = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXLINE(1742)					::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = o12;
            				}
HXLINE(1747)				verts = null();
HXDLIN(1747)				verts = verts;
            			}
            			else {
HXLINE(1750)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,retnodes5,"retnodes") = verts->next;
HXLINE(1751)				verts->prev->next = verts->next;
HXLINE(1752)				verts->next->prev = verts->prev;
HXLINE(1753)				verts->next = (verts->prev = null());
HXLINE(1754)				{
HXLINE(1755)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,o13,"o") = verts;
HXLINE(1764)					{
HXLINE(1764)						o13->vert = null();
HXDLIN(1764)						o13->parent = null();
            					}
HXLINE(1765)					o13->next = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool;
HXLINE(1766)					::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = o13;
            				}
HXLINE(1771)				verts = null();
HXLINE(1772)				verts = retnodes5;
            			}
            		}
HXLINE(1776)		return ret16;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ZPP_Cutter_obj,run,return )


ZPP_Cutter_obj::ZPP_Cutter_obj()
{
}

bool ZPP_Cutter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ints") ) { outValue = ints; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"paths") ) { outValue = paths; return true; }
	}
	return false;
}

bool ZPP_Cutter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ints") ) { ints=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CutInt >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"paths") ) { paths=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_CutVert >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Cutter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_Cutter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CutInt*/ ,(void *) &ZPP_Cutter_obj::ints,HX_HCSTRING("ints","\xa4","\x44","\xbb","\x45")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_CutVert*/ ,(void *) &ZPP_Cutter_obj::paths,HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ZPP_Cutter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Cutter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Cutter_obj::ints,"ints");
	HX_MARK_MEMBER_NAME(ZPP_Cutter_obj::paths,"paths");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Cutter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Cutter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Cutter_obj::ints,"ints");
	HX_VISIT_MEMBER_NAME(ZPP_Cutter_obj::paths,"paths");
};

#endif

hx::Class ZPP_Cutter_obj::__mClass;

static ::String ZPP_Cutter_obj_sStaticFields[] = {
	HX_HCSTRING("ints","\xa4","\x44","\xbb","\x45"),
	HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null())
};

void ZPP_Cutter_obj::__register()
{
	hx::Object *dummy = new ZPP_Cutter_obj;
	ZPP_Cutter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_Cutter","\x55","\xc1","\x13","\x53");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Cutter_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Cutter_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Cutter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Cutter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Cutter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Cutter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Cutter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Cutter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Cutter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d91cf3e3c3fa4dae_322_boot)
HXLINE( 322)		ints = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_d91cf3e3c3fa4dae_323_boot)
HXLINE( 323)		paths = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
