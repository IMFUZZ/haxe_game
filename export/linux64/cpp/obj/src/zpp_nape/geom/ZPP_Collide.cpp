// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Vec2
#include <zpp_nape/util/ZNPList_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Vec2
#include <zpp_nape/util/ZNPNode_ZPP_Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_175_circleContains,"zpp_nape.geom.ZPP_Collide","circleContains",0x8c4c92f5,"zpp_nape.geom.ZPP_Collide.circleContains","zpp_nape/geom/Collide.hx",175,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_184_polyContains,"zpp_nape.geom.ZPP_Collide","polyContains",0x9c1c25b1,"zpp_nape.geom.ZPP_Collide.polyContains","zpp_nape/geom/Collide.hx",184,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_211_shapeContains,"zpp_nape.geom.ZPP_Collide","shapeContains",0x93829e7a,"zpp_nape.geom.ZPP_Collide.shapeContains","zpp_nape/geom/Collide.hx",211,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_214_bodyContains,"zpp_nape.geom.ZPP_Collide","bodyContains",0x01506807,"zpp_nape.geom.ZPP_Collide.bodyContains","zpp_nape/geom/Collide.hx",214,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_235_containTest,"zpp_nape.geom.ZPP_Collide","containTest",0xa0adefe0,"zpp_nape.geom.ZPP_Collide.containTest","zpp_nape/geom/Collide.hx",235,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_357_contactCollide,"zpp_nape.geom.ZPP_Collide","contactCollide",0x6ce46b64,"zpp_nape.geom.ZPP_Collide.contactCollide","zpp_nape/geom/Collide.hx",357,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_1034_testCollide_safe,"zpp_nape.geom.ZPP_Collide","testCollide_safe",0xe9023886,"zpp_nape.geom.ZPP_Collide.testCollide_safe","zpp_nape/geom/Collide.hx",1034,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_1043_testCollide,"zpp_nape.geom.ZPP_Collide","testCollide",0x3af49ee6,"zpp_nape.geom.ZPP_Collide.testCollide","zpp_nape/geom/Collide.hx",1043,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_1172_flowCollide,"zpp_nape.geom.ZPP_Collide","flowCollide",0xd0a5baca,"zpp_nape.geom.ZPP_Collide.flowCollide","zpp_nape/geom/Collide.hx",1172,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_2910_boot,"zpp_nape.geom.ZPP_Collide","boot",0xff985358,"zpp_nape.geom.ZPP_Collide.boot","zpp_nape/geom/Collide.hx",2910,0x9b695611)
HX_DEFINE_STACK_FRAME(_hx_pos_e890b6717661a957_2911_boot,"zpp_nape.geom.ZPP_Collide","boot",0xff985358,"zpp_nape.geom.ZPP_Collide.boot","zpp_nape/geom/Collide.hx",2911,0x9b695611)
namespace zpp_nape{
namespace geom{

void ZPP_Collide_obj::__construct() { }

Dynamic ZPP_Collide_obj::__CreateEmpty() { return new ZPP_Collide_obj; }

void *ZPP_Collide_obj::_hx_vtable = 0;

Dynamic ZPP_Collide_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Collide_obj > _hx_result = new ZPP_Collide_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Collide_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x670f66ac;
}

bool ZPP_Collide_obj::circleContains( ::zpp_nape::shape::ZPP_Circle c, ::zpp_nape::geom::ZPP_Vec2 p){
            	HX_STACKFRAME(&_hx_pos_e890b6717661a957_175_circleContains)
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(p,"p")
HXLINE( 176)		HX_VARI( Float,dx) = ((Float)0.0);
HXLINE( 177)		HX_VARI( Float,dy) = ((Float)0.0);
HXLINE( 178)		{
HXLINE( 179)			dx = (p->x - c->worldCOMx);
HXLINE( 180)			dy = (p->y - c->worldCOMy);
            		}
HXLINE( 182)		return (((dx * dx) + (dy * dy)) < (c->radius * c->radius));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Collide_obj,circleContains,return )

bool ZPP_Collide_obj::polyContains( ::zpp_nape::shape::ZPP_Polygon s, ::zpp_nape::geom::ZPP_Vec2 p){
            	HX_STACKFRAME(&_hx_pos_e890b6717661a957_184_polyContains)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(p,"p")
HXLINE( 185)		HX_VAR( bool,retvar);
HXLINE( 186)		{
HXLINE( 187)			retvar = true;
HXLINE( 188)			{
HXLINE( 189)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite) = s->edges->head;
HXLINE( 190)				while(hx::IsNotNull( cx_ite )){
HXLINE( 191)					HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite->elt;
HXLINE( 193)					if ((((a->gnormx * p->x) + (a->gnormy * p->y)) <= a->gprojection)) {
HXLINE( 195)						cx_ite = cx_ite->next;
HXLINE( 196)						continue;
            					}
            					else {
HXLINE( 200)						retvar = false;
HXLINE( 201)						goto _hx_goto_1;
            					}
            				}
            				_hx_goto_1:;
            			}
            		}
HXLINE( 208)		return retvar;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Collide_obj,polyContains,return )

bool ZPP_Collide_obj::shapeContains( ::zpp_nape::shape::ZPP_Shape s, ::zpp_nape::geom::ZPP_Vec2 p){
            	HX_STACKFRAME(&_hx_pos_e890b6717661a957_211_shapeContains)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(p,"p")
HXLINE( 211)		if ((s->type == (int)0)) {
HXLINE( 211)			return ::zpp_nape::geom::ZPP_Collide_obj::circleContains(s->circle,p);
            		}
            		else {
HXLINE( 211)			return ::zpp_nape::geom::ZPP_Collide_obj::polyContains(s->polygon,p);
            		}
HXDLIN( 211)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Collide_obj,shapeContains,return )

bool ZPP_Collide_obj::bodyContains( ::zpp_nape::phys::ZPP_Body b, ::zpp_nape::geom::ZPP_Vec2 p){
            	HX_STACKFRAME(&_hx_pos_e890b6717661a957_214_bodyContains)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(p,"p")
HXLINE( 215)		HX_VAR( bool,retvar);
HXLINE( 216)		{
HXLINE( 217)			retvar = false;
HXLINE( 218)			{
HXLINE( 219)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = b->shapes->head;
HXLINE( 220)				while(hx::IsNotNull( cx_ite )){
HXLINE( 223)					if (::zpp_nape::geom::ZPP_Collide_obj::shapeContains(cx_ite->elt,p)) {
HXLINE( 224)						retvar = true;
HXLINE( 225)						goto _hx_goto_4;
            					}
HXLINE( 228)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_4:;
            			}
            		}
HXLINE( 232)		return retvar;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Collide_obj,bodyContains,return )

bool ZPP_Collide_obj::containTest( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2){
            	HX_STACKFRAME(&_hx_pos_e890b6717661a957_235_containTest)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
HXLINE( 235)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = s1->aabb;
HXDLIN( 235)		HX_VARI(  ::zpp_nape::geom::ZPP_AABB,x) = s2->aabb;
HXDLIN( 235)		bool _hx_tmp;
HXDLIN( 235)		bool _hx_tmp1;
HXDLIN( 235)		bool _hx_tmp2;
HXDLIN( 235)		if ((x->minx >= _this->minx)) {
HXLINE( 235)			_hx_tmp2 = (x->miny >= _this->miny);
            		}
            		else {
HXLINE( 235)			_hx_tmp2 = false;
            		}
HXDLIN( 235)		if (_hx_tmp2) {
HXLINE( 235)			_hx_tmp1 = (x->maxx <= _this->maxx);
            		}
            		else {
HXLINE( 235)			_hx_tmp1 = false;
            		}
HXDLIN( 235)		if (_hx_tmp1) {
HXLINE( 235)			_hx_tmp = (x->maxy <= _this->maxy);
            		}
            		else {
HXLINE( 235)			_hx_tmp = false;
            		}
HXDLIN( 235)		if (_hx_tmp) {
HXLINE( 236)			if ((s1->type == (int)0)) {
HXLINE( 237)				if ((s2->type == (int)0)) {
HXLINE( 238)					HX_VARI( Float,minDist) = (s1->circle->radius + -(s2->circle->radius));
HXLINE( 239)					HX_VARI( Float,px) = ((Float)0.0);
HXLINE( 240)					HX_VARI( Float,py) = ((Float)0.0);
HXLINE( 241)					{
HXLINE( 242)						px = (s2->circle->worldCOMx - s1->circle->worldCOMx);
HXLINE( 243)						py = (s2->circle->worldCOMy - s1->circle->worldCOMy);
            					}
HXLINE( 236)					return (((px * px) + (py * py)) <= (minDist * minDist));
            				}
            				else {
HXLINE( 249)					HX_VAR( bool,retvar);
HXLINE( 250)					{
HXLINE( 251)						retvar = true;
HXLINE( 252)						{
HXLINE( 253)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = s2->polygon->gverts->next;
HXLINE( 254)							while(hx::IsNotNull( cx_ite )){
HXLINE( 255)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite;
HXLINE( 258)								HX_VARI_NAME( Float,minDist1,"minDist") = s1->circle->radius;
HXLINE( 259)								HX_VARI_NAME( Float,px1,"px") = ((Float)0.0);
HXLINE( 260)								HX_VARI_NAME( Float,py1,"py") = ((Float)0.0);
HXLINE( 261)								{
HXLINE( 262)									px1 = (p->x - s1->circle->worldCOMx);
HXLINE( 263)									py1 = (p->y - s1->circle->worldCOMy);
            								}
HXLINE( 257)								if ((((px1 * px1) + (py1 * py1)) <= (minDist1 * minDist1))) {
HXLINE( 269)									cx_ite = cx_ite->next;
HXLINE( 270)									continue;
            								}
            								else {
HXLINE( 274)									retvar = false;
HXLINE( 275)									goto _hx_goto_6;
            								}
            							}
            							_hx_goto_6:;
            						}
            					}
HXLINE( 236)					return retvar;
            				}
            			}
            			else {
HXLINE( 286)				if ((s2->type == (int)0)) {
HXLINE( 287)					HX_VAR_NAME( bool,retvar1,"retvar");
HXLINE( 288)					{
HXLINE( 289)						retvar1 = true;
HXLINE( 290)						{
HXLINE( 291)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite1,"cx_ite") = s1->polygon->edges->head;
HXLINE( 292)							while(hx::IsNotNull( cx_ite1 )){
HXLINE( 293)								HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite1->elt;
HXLINE( 295)								if (((((a->gnormx * s2->circle->worldCOMx) + (a->gnormy * s2->circle->worldCOMy)) + s2->circle->radius) <= a->gprojection)) {
HXLINE( 297)									cx_ite1 = cx_ite1->next;
HXLINE( 298)									continue;
            								}
            								else {
HXLINE( 302)									retvar1 = false;
HXLINE( 303)									goto _hx_goto_7;
            								}
            							}
            							_hx_goto_7:;
            						}
            					}
HXLINE( 236)					return retvar1;
            				}
            				else {
HXLINE( 313)					HX_VAR_NAME( bool,retvar2,"retvar");
HXLINE( 314)					{
HXLINE( 315)						retvar2 = true;
HXLINE( 316)						{
HXLINE( 317)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite2,"cx_ite") = s1->polygon->edges->head;
HXLINE( 318)							while(hx::IsNotNull( cx_ite2 )){
HXLINE( 319)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a1,"a") = cx_ite2->elt;
HXLINE( 322)								HX_VARI( Float,max) = ((Float)-1e+100);
HXLINE( 323)								{
HXLINE( 324)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = s2->polygon->gverts->next;
HXLINE( 325)									while(hx::IsNotNull( cx_ite3 )){
HXLINE( 326)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite3;
HXLINE( 327)										{
HXLINE( 328)											HX_VARI( Float,k) = ((a1->gnormx * v->x) + (a1->gnormy * v->y));
HXLINE( 329)											if ((k > max)) {
HXLINE( 329)												max = k;
            											}
            										}
HXLINE( 331)										cx_ite3 = cx_ite3->next;
            									}
            								}
HXLINE( 321)								if ((max <= a1->gprojection)) {
HXLINE( 337)									cx_ite2 = cx_ite2->next;
HXLINE( 338)									continue;
            								}
            								else {
HXLINE( 342)									retvar2 = false;
HXLINE( 343)									goto _hx_goto_8;
            								}
            							}
            							_hx_goto_8:;
            						}
            					}
HXLINE( 236)					return retvar2;
            				}
            			}
            		}
            		else {
HXLINE( 354)			return false;
            		}
HXLINE( 235)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Collide_obj,containTest,return )

bool ZPP_Collide_obj::contactCollide( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2, ::zpp_nape::dynamics::ZPP_ColArbiter arb,bool rev){
            	HX_GC_STACKFRAME(&_hx_pos_e890b6717661a957_357_contactCollide)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(arb,"arb")
            	HX_STACK_ARG(rev,"rev")
HXLINE( 357)		if ((s2->type == (int)1)) {
HXLINE( 358)			if ((s1->type == (int)1)) {
HXLINE( 359)				HX_VARI( bool,cont) = true;
HXLINE( 360)				HX_VARI( Float,max) = ((Float)-1e+100);
HXLINE( 362)				HX_VARI( int,maxi) = (int)-1;
HXLINE( 363)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,axis1) = null();
HXLINE( 364)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,axis2) = null();
HXLINE( 365)				{
HXLINE( 366)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite) = s1->polygon->edges->head;
HXLINE( 367)					while(hx::IsNotNull( cx_ite )){
HXLINE( 368)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ax) = cx_ite->elt;
HXLINE( 369)						{
HXLINE( 370)							HX_VARI( Float,min) = ((Float)1e100);
HXLINE( 371)							{
HXLINE( 372)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = s2->polygon->gverts->next;
HXLINE( 373)								while(hx::IsNotNull( cx_ite1 )){
HXLINE( 374)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXLINE( 375)									{
HXLINE( 376)										HX_VARI( Float,k) = ((ax->gnormx * v->x) + (ax->gnormy * v->y));
HXLINE( 377)										if ((k < min)) {
HXLINE( 377)											min = k;
            										}
HXLINE( 378)										if (((min - ax->gprojection) <= max)) {
HXLINE( 378)											goto _hx_goto_12;
            										}
            									}
HXLINE( 380)									cx_ite1 = cx_ite1->next;
            								}
            								_hx_goto_12:;
            							}
HXLINE( 383)							min = (min - ax->gprojection);
HXLINE( 384)							if ((min >= (int)0)) {
HXLINE( 385)								cont = false;
HXLINE( 386)								goto _hx_goto_11;
            							}
HXLINE( 388)							if ((min > max)) {
HXLINE( 389)								max = min;
HXLINE( 390)								axis1 = ax;
HXLINE( 391)								maxi = (int)1;
            							}
            						}
HXLINE( 394)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_11:;
            				}
HXLINE( 397)				if (cont) {
HXLINE( 398)					{
HXLINE( 399)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite2,"cx_ite") = s2->polygon->edges->head;
HXLINE( 400)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 401)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,ax1,"ax") = cx_ite2->elt;
HXLINE( 402)							{
HXLINE( 403)								HX_VARI_NAME( Float,min1,"min") = ((Float)1e100);
HXLINE( 404)								{
HXLINE( 405)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = s1->polygon->gverts->next;
HXLINE( 406)									while(hx::IsNotNull( cx_ite3 )){
HXLINE( 407)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite3;
HXLINE( 408)										{
HXLINE( 409)											HX_VARI_NAME( Float,k1,"k") = ((ax1->gnormx * v1->x) + (ax1->gnormy * v1->y));
HXLINE( 410)											if ((k1 < min1)) {
HXLINE( 410)												min1 = k1;
            											}
HXLINE( 411)											if (((min1 - ax1->gprojection) <= max)) {
HXLINE( 411)												goto _hx_goto_14;
            											}
            										}
HXLINE( 413)										cx_ite3 = cx_ite3->next;
            									}
            									_hx_goto_14:;
            								}
HXLINE( 416)								min1 = (min1 - ax1->gprojection);
HXLINE( 417)								if ((min1 >= (int)0)) {
HXLINE( 418)									cont = false;
HXLINE( 419)									goto _hx_goto_13;
            								}
HXLINE( 421)								if ((min1 > max)) {
HXLINE( 422)									max = min1;
HXLINE( 423)									axis2 = ax1;
HXLINE( 424)									maxi = (int)2;
            								}
            							}
HXLINE( 427)							cx_ite2 = cx_ite2->next;
            						}
            						_hx_goto_13:;
            					}
HXLINE( 430)					if (!(cont)) {
HXLINE( 430)						return false;
            					}
            					else {
HXLINE( 432)						HX_VAR(  ::zpp_nape::shape::ZPP_Polygon,q2);
HXDLIN( 432)						HX_VAR_NAME(  ::zpp_nape::shape::ZPP_Edge,ax2,"ax");
HXDLIN( 432)						HX_VAR( Float,scale);
HXLINE( 433)						if ((maxi == (int)1)) {
HXLINE( 435)							q2 = s2->polygon;
HXLINE( 436)							ax2 = axis1;
HXLINE( 437)							scale = ((Float)1.0);
            						}
            						else {
HXLINE( 441)							q2 = s1->polygon;
HXLINE( 442)							ax2 = axis2;
HXLINE( 443)							scale = ((Float)-1.0);
            						}
HXLINE( 445)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ay) = null();
HXLINE( 446)						HX_VARI_NAME( Float,min2,"min") = ((Float)1e100);
HXLINE( 447)						{
HXLINE( 448)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite4,"cx_ite") = q2->edges->head;
HXLINE( 449)							while(hx::IsNotNull( cx_ite4 )){
HXLINE( 450)								HX_VARI(  ::zpp_nape::shape::ZPP_Edge,axis) = cx_ite4->elt;
HXLINE( 451)								{
HXLINE( 452)									HX_VARI_NAME( Float,k2,"k") = ((ax2->gnormx * axis->gnormx) + (ax2->gnormy * axis->gnormy));
HXLINE( 453)									if ((k2 < min2)) {
HXLINE( 454)										min2 = k2;
HXLINE( 455)										ay = axis;
            									}
            								}
HXLINE( 458)								cx_ite4 = cx_ite4->next;
            							}
            						}
HXLINE( 461)						HX_VARI( Float,c0x) = ((Float)0.0);
HXLINE( 462)						HX_VARI( Float,c0y) = ((Float)0.0);
HXLINE( 463)						{
HXLINE( 464)							c0x = ay->gp0->x;
HXLINE( 465)							c0y = ay->gp0->y;
            						}
HXLINE( 483)						HX_VARI( Float,c1x) = ((Float)0.0);
HXLINE( 484)						HX_VARI( Float,c1y) = ((Float)0.0);
HXLINE( 485)						{
HXLINE( 486)							c1x = ay->gp1->x;
HXLINE( 487)							c1y = ay->gp1->y;
            						}
HXLINE( 505)						HX_VARI( Float,dvx) = ((Float)0.0);
HXLINE( 506)						HX_VARI( Float,dvy) = ((Float)0.0);
HXLINE( 507)						{
HXLINE( 508)							dvx = (c1x - c0x);
HXLINE( 509)							dvy = (c1y - c0y);
            						}
HXLINE( 511)						HX_VARI( Float,d0) = ((ax2->gnormy * c0x) - (ax2->gnormx * c0y));
HXLINE( 512)						HX_VARI( Float,d1) = ((ax2->gnormy * c1x) - (ax2->gnormx * c1y));
HXLINE( 513)						HX_VARI( Float,den) = ((Float)(int)1 / (Float)(d1 - d0));
HXLINE( 514)						HX_VARI( Float,t) = ((-(ax2->tp1) - d0) * den);
HXLINE( 515)						if ((t > ::nape::Config_obj::epsilon)) {
HXLINE( 525)							c0x = (c0x + (dvx * t));
HXLINE( 526)							c0y = (c0y + (dvy * t));
            						}
HXLINE( 528)						HX_VARI_NAME( Float,t1,"t") = ((-(ax2->tp0) - d1) * den);
HXLINE( 529)						if ((t1 < -(::nape::Config_obj::epsilon))) {
HXLINE( 539)							c1x = (c1x + (dvx * t1));
HXLINE( 540)							c1y = (c1y + (dvy * t1));
            						}
HXLINE( 542)						HX_VARI( Float,nx) = ((Float)0.0);
HXLINE( 543)						HX_VARI( Float,ny) = ((Float)0.0);
HXLINE( 544)						{
HXLINE( 545)							HX_VARI_NAME( Float,t2,"t") = scale;
HXLINE( 554)							nx = (ax2->gnormx * t2);
HXLINE( 555)							ny = (ax2->gnormy * t2);
            						}
HXLINE( 557)						{
HXLINE( 558)							arb->lnormx = ax2->lnormx;
HXLINE( 559)							arb->lnormy = ax2->lnormy;
            						}
HXLINE( 577)						arb->lproj = ax2->lprojection;
HXLINE( 578)						arb->radius = (int)0;
HXLINE( 579)						arb->rev = (rev != (scale == (int)-1));
HXLINE( 580)						int _hx_tmp;
HXDLIN( 580)						if (arb->rev) {
HXLINE( 580)							_hx_tmp = (int)1;
            						}
            						else {
HXLINE( 580)							_hx_tmp = (int)0;
            						}
HXDLIN( 580)						arb->ptype = _hx_tmp;
HXLINE( 581)						HX_VARI( Float,c0d) = (((c0x * ax2->gnormx) + (c0y * ax2->gnormy)) - ax2->gprojection);
HXLINE( 582)						HX_VARI( Float,c1d) = (((c1x * ax2->gnormx) + (c1y * ax2->gnormy)) - ax2->gprojection);
HXLINE( 583)						bool _hx_tmp1;
HXDLIN( 583)						if ((c0d > (int)0)) {
HXLINE( 583)							_hx_tmp1 = (c1d > (int)0);
            						}
            						else {
HXLINE( 583)							_hx_tmp1 = false;
            						}
HXDLIN( 583)						if (_hx_tmp1) {
HXLINE( 584)							return false;
            						}
            						else {
HXLINE( 587)							if (rev) {
HXLINE( 588)								nx = -(nx);
HXLINE( 589)								ny = -(ny);
            							}
HXLINE( 591)							Float px = (c0x - ((ax2->gnormx * c0d) * ((Float)0.5)));
HXDLIN( 591)							Float py = (c0y - ((ax2->gnormy * c0d) * ((Float)0.5)));
HXDLIN( 591)							HX_VAR( int,hash);
HXDLIN( 591)							if (arb->rev) {
HXLINE( 591)								hash = (int)1;
            							}
            							else {
HXLINE( 591)								hash = (int)0;
            							}
HXDLIN( 591)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,c) = null();
HXDLIN( 591)							{
HXLINE( 591)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite5,"cx_ite") = arb->contacts->next;
HXDLIN( 591)								while(hx::IsNotNull( cx_ite5 )){
HXLINE( 591)									HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cur) = cx_ite5;
HXDLIN( 591)									if ((hash == cur->hash)) {
HXLINE( 591)										c = cur;
HXDLIN( 591)										goto _hx_goto_16;
            									}
HXDLIN( 591)									cx_ite5 = cx_ite5->next;
            								}
            								_hx_goto_16:;
            							}
HXDLIN( 591)							if (hx::IsNull( c )) {
HXLINE( 591)								if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 591)									c =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 591)									c = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 591)									::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c->next;
HXDLIN( 591)									c->next = null();
            								}
HXDLIN( 591)								HX_VARI(  ::zpp_nape::dynamics::ZPP_IContact,ci) = c->inner;
HXDLIN( 591)								ci->jnAcc = (ci->jtAcc = (int)0);
HXDLIN( 591)								c->hash = hash;
HXDLIN( 591)								c->fresh = true;
HXDLIN( 591)								c->arbiter = arb;
HXDLIN( 591)								arb->jrAcc = (int)0;
HXDLIN( 591)								{
HXLINE( 591)									HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,_this) = arb->contacts;
HXDLIN( 591)									c->_inuse = true;
HXDLIN( 591)									HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,temp) = c;
HXDLIN( 591)									temp->next = _this->next;
HXDLIN( 591)									_this->next = temp;
HXDLIN( 591)									_this->modified = true;
HXDLIN( 591)									_this->length++;
            								}
HXDLIN( 591)								arb->innards->add(ci);
            							}
            							else {
HXLINE( 591)								c->fresh = false;
            							}
HXDLIN( 591)							{
HXLINE( 591)								c->px = px;
HXDLIN( 591)								c->py = py;
            							}
HXDLIN( 591)							{
HXLINE( 591)								arb->nx = nx;
HXDLIN( 591)								arb->ny = ny;
            							}
HXDLIN( 591)							c->dist = c0d;
HXDLIN( 591)							c->stamp = arb->stamp;
HXDLIN( 591)							c->posOnly = (c0d > (int)0);
HXDLIN( 591)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,con) = c;
HXLINE( 592)							{
HXLINE( 602)								c0x = (c0x - q2->body->posx);
HXLINE( 603)								c0y = (c0y - q2->body->posy);
            							}
HXLINE( 605)							{
HXLINE( 606)								con->inner->lr1x = ((c0x * q2->body->axisy) + (c0y * q2->body->axisx));
HXLINE( 607)								con->inner->lr1y = ((c0y * q2->body->axisy) - (c0x * q2->body->axisx));
            							}
HXLINE( 609)							Float px1 = (c1x - ((ax2->gnormx * c1d) * ((Float)0.5)));
HXDLIN( 609)							Float py1 = (c1y - ((ax2->gnormy * c1d) * ((Float)0.5)));
HXDLIN( 609)							HX_VAR_NAME( int,hash1,"hash");
HXDLIN( 609)							if (arb->rev) {
HXLINE( 609)								hash1 = (int)0;
            							}
            							else {
HXLINE( 609)								hash1 = (int)1;
            							}
HXDLIN( 609)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c1,"c") = null();
HXDLIN( 609)							{
HXLINE( 609)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite6,"cx_ite") = arb->contacts->next;
HXDLIN( 609)								while(hx::IsNotNull( cx_ite6 )){
HXLINE( 609)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur1,"cur") = cx_ite6;
HXDLIN( 609)									if ((hash1 == cur1->hash)) {
HXLINE( 609)										c1 = cur1;
HXDLIN( 609)										goto _hx_goto_17;
            									}
HXDLIN( 609)									cx_ite6 = cx_ite6->next;
            								}
            								_hx_goto_17:;
            							}
HXDLIN( 609)							if (hx::IsNull( c1 )) {
HXLINE( 609)								if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 609)									c1 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 609)									c1 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 609)									::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c1->next;
HXDLIN( 609)									c1->next = null();
            								}
HXDLIN( 609)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci1,"ci") = c1->inner;
HXDLIN( 609)								ci1->jnAcc = (ci1->jtAcc = (int)0);
HXDLIN( 609)								c1->hash = hash1;
HXDLIN( 609)								c1->fresh = true;
HXDLIN( 609)								c1->arbiter = arb;
HXDLIN( 609)								arb->jrAcc = (int)0;
HXDLIN( 609)								{
HXLINE( 609)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this1,"_this") = arb->contacts;
HXDLIN( 609)									c1->_inuse = true;
HXDLIN( 609)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp1,"temp") = c1;
HXDLIN( 609)									temp1->next = _this1->next;
HXDLIN( 609)									_this1->next = temp1;
HXDLIN( 609)									_this1->modified = true;
HXDLIN( 609)									_this1->length++;
            								}
HXDLIN( 609)								arb->innards->add(ci1);
            							}
            							else {
HXLINE( 609)								c1->fresh = false;
            							}
HXDLIN( 609)							{
HXLINE( 609)								c1->px = px1;
HXDLIN( 609)								c1->py = py1;
            							}
HXDLIN( 609)							{
HXLINE( 609)								arb->nx = nx;
HXDLIN( 609)								arb->ny = ny;
            							}
HXDLIN( 609)							c1->dist = c1d;
HXDLIN( 609)							c1->stamp = arb->stamp;
HXDLIN( 609)							c1->posOnly = (c1d > (int)0);
HXDLIN( 609)							con = c1;
HXLINE( 610)							{
HXLINE( 620)								c1x = (c1x - q2->body->posx);
HXLINE( 621)								c1y = (c1y - q2->body->posy);
            							}
HXLINE( 623)							{
HXLINE( 624)								con->inner->lr1x = ((c1x * q2->body->axisy) + (c1y * q2->body->axisx));
HXLINE( 625)								con->inner->lr1y = ((c1y * q2->body->axisy) - (c1x * q2->body->axisx));
            							}
HXLINE( 627)							if ((maxi == (int)1)) {
HXLINE( 628)								arb->_hx___ref_edge1 = ax2;
HXLINE( 629)								arb->_hx___ref_edge2 = ay;
            							}
            							else {
HXLINE( 632)								arb->_hx___ref_edge2 = ax2;
HXLINE( 633)								arb->_hx___ref_edge1 = ay;
            							}
HXLINE( 635)							return true;
            						}
            					}
            				}
            				else {
HXLINE( 639)					return false;
            				}
            			}
            			else {
HXLINE( 642)				HX_VARI_NAME( Float,max1,"max") = ((Float)-1e+100);
HXLINE( 644)				HX_VARI_NAME( bool,cont1,"cont") = true;
HXLINE( 645)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a0) = null();
HXDLIN( 645)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,vi) = null();
HXLINE( 646)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,vite) = s2->polygon->gverts->next;
HXLINE( 647)				{
HXLINE( 648)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite7,"cx_ite") = s2->polygon->edges->head;
HXLINE( 649)					while(hx::IsNotNull( cx_ite7 )){
HXLINE( 650)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite7->elt;
HXLINE( 651)						{
HXLINE( 652)							HX_VARI( Float,dist) = ((((a->gnormx * s1->circle->worldCOMx) + (a->gnormy * s1->circle->worldCOMy)) - a->gprojection) - s1->circle->radius);
HXLINE( 653)							if ((dist > (int)0)) {
HXLINE( 654)								cont1 = false;
HXLINE( 655)								goto _hx_goto_18;
            							}
HXLINE( 657)							if ((dist > max1)) {
HXLINE( 658)								max1 = dist;
HXLINE( 659)								a0 = a;
HXLINE( 660)								vi = vite;
            							}
HXLINE( 662)							vite = vite->next;
            						}
HXLINE( 664)						cx_ite7 = cx_ite7->next;
            					}
            					_hx_goto_18:;
            				}
HXLINE( 667)				if (cont1) {
HXLINE( 668)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v0) = vi;
HXLINE( 669)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,v11,"v1");
HXDLIN( 669)					if (hx::IsNull( vi->next )) {
HXLINE( 669)						v11 = s2->polygon->gverts->next;
            					}
            					else {
HXLINE( 669)						v11 = vi->next;
            					}
HXLINE( 670)					HX_VARI( Float,dt) = ((s1->circle->worldCOMy * a0->gnormx) - (s1->circle->worldCOMx * a0->gnormy));
HXLINE( 671)					if ((dt <= ((v0->y * a0->gnormx) - (v0->x * a0->gnormy)))) {
HXLINE( 673)						HX_VARI( Float,minDist) = s1->circle->radius;
HXLINE( 674)						HX_VARI_NAME( Float,px2,"px") = ((Float)0.0);
HXLINE( 675)						HX_VARI_NAME( Float,py2,"py") = ((Float)0.0);
HXLINE( 676)						{
HXLINE( 677)							px2 = (v0->x - s1->circle->worldCOMx);
HXLINE( 678)							py2 = (v0->y - s1->circle->worldCOMy);
            						}
HXLINE( 680)						HX_VARI( Float,distSqr) = ((px2 * px2) + (py2 * py2));
HXLINE( 672)						HX_VAR(  ::zpp_nape::dynamics::ZPP_Contact,co);
HXLINE( 681)						if ((distSqr > (minDist * minDist))) {
HXLINE( 672)							co = null();
            						}
            						else {
HXLINE( 682)							if ((distSqr < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE( 682)								Float px3 = s1->circle->worldCOMx;
HXDLIN( 682)								Float py3 = s1->circle->worldCOMy;
HXDLIN( 682)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c2,"c") = null();
HXDLIN( 682)								{
HXLINE( 682)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite8,"cx_ite") = arb->contacts->next;
HXDLIN( 682)									while(hx::IsNotNull( cx_ite8 )){
HXLINE( 682)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur2,"cur") = cx_ite8;
HXDLIN( 682)										if (((int)0 == cur2->hash)) {
HXLINE( 682)											c2 = cur2;
HXDLIN( 682)											goto _hx_goto_19;
            										}
HXDLIN( 682)										cx_ite8 = cx_ite8->next;
            									}
            									_hx_goto_19:;
            								}
HXDLIN( 682)								if (hx::IsNull( c2 )) {
HXLINE( 682)									if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 682)										c2 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 682)										c2 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 682)										::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c2->next;
HXDLIN( 682)										c2->next = null();
            									}
HXDLIN( 682)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci2,"ci") = c2->inner;
HXDLIN( 682)									ci2->jnAcc = (ci2->jtAcc = (int)0);
HXDLIN( 682)									c2->hash = (int)0;
HXDLIN( 682)									c2->fresh = true;
HXDLIN( 682)									c2->arbiter = arb;
HXDLIN( 682)									arb->jrAcc = (int)0;
HXDLIN( 682)									{
HXLINE( 682)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this2,"_this") = arb->contacts;
HXDLIN( 682)										c2->_inuse = true;
HXDLIN( 682)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp2,"temp") = c2;
HXDLIN( 682)										temp2->next = _this2->next;
HXDLIN( 682)										_this2->next = temp2;
HXDLIN( 682)										_this2->modified = true;
HXDLIN( 682)										_this2->length++;
            									}
HXDLIN( 682)									arb->innards->add(ci2);
            								}
            								else {
HXLINE( 682)									c2->fresh = false;
            								}
HXDLIN( 682)								{
HXLINE( 682)									c2->px = px3;
HXDLIN( 682)									c2->py = py3;
            								}
HXDLIN( 682)								{
HXLINE( 682)									arb->nx = (int)1;
HXDLIN( 682)									arb->ny = (int)0;
            								}
HXDLIN( 682)								c2->dist = -(minDist);
HXDLIN( 682)								c2->stamp = arb->stamp;
HXDLIN( 682)								c2->posOnly = false;
HXLINE( 672)								co = c2;
            							}
            							else {
HXLINE( 684)								HX_VARI( Float,invDist) = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(distSqr));
HXLINE( 685)								HX_VAR_NAME( Float,dist1,"dist");
HXDLIN( 685)								if ((invDist < ::nape::Config_obj::epsilon)) {
HXLINE( 685)									dist1 = ((Float)1e100);
            								}
            								else {
HXLINE( 685)									dist1 = ((Float)((Float)1.0) / (Float)invDist);
            								}
HXLINE( 686)								HX_VARI( Float,df) = (((Float)0.5) + ((s1->circle->radius - (((Float)0.5) * minDist)) * invDist));
HXLINE( 687)								if (rev) {
HXLINE( 687)									Float px4 = (s1->circle->worldCOMx + (px2 * df));
HXDLIN( 687)									Float py4 = (s1->circle->worldCOMy + (py2 * df));
HXDLIN( 687)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c3,"c") = null();
HXDLIN( 687)									{
HXLINE( 687)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite9,"cx_ite") = arb->contacts->next;
HXDLIN( 687)										while(hx::IsNotNull( cx_ite9 )){
HXLINE( 687)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur3,"cur") = cx_ite9;
HXDLIN( 687)											if (((int)0 == cur3->hash)) {
HXLINE( 687)												c3 = cur3;
HXDLIN( 687)												goto _hx_goto_20;
            											}
HXDLIN( 687)											cx_ite9 = cx_ite9->next;
            										}
            										_hx_goto_20:;
            									}
HXDLIN( 687)									if (hx::IsNull( c3 )) {
HXLINE( 687)										if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 687)											c3 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 687)											c3 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 687)											::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c3->next;
HXDLIN( 687)											c3->next = null();
            										}
HXDLIN( 687)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci3,"ci") = c3->inner;
HXDLIN( 687)										ci3->jnAcc = (ci3->jtAcc = (int)0);
HXDLIN( 687)										c3->hash = (int)0;
HXDLIN( 687)										c3->fresh = true;
HXDLIN( 687)										c3->arbiter = arb;
HXDLIN( 687)										arb->jrAcc = (int)0;
HXDLIN( 687)										{
HXLINE( 687)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this3,"_this") = arb->contacts;
HXDLIN( 687)											c3->_inuse = true;
HXDLIN( 687)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp3,"temp") = c3;
HXDLIN( 687)											temp3->next = _this3->next;
HXDLIN( 687)											_this3->next = temp3;
HXDLIN( 687)											_this3->modified = true;
HXDLIN( 687)											_this3->length++;
            										}
HXDLIN( 687)										arb->innards->add(ci3);
            									}
            									else {
HXLINE( 687)										c3->fresh = false;
            									}
HXDLIN( 687)									{
HXLINE( 687)										c3->px = px4;
HXDLIN( 687)										c3->py = py4;
            									}
HXDLIN( 687)									{
HXLINE( 687)										arb->nx = (-(px2) * invDist);
HXDLIN( 687)										arb->ny = (-(py2) * invDist);
            									}
HXDLIN( 687)									c3->dist = (dist1 - minDist);
HXDLIN( 687)									c3->stamp = arb->stamp;
HXDLIN( 687)									c3->posOnly = false;
HXLINE( 672)									co = c3;
            								}
            								else {
HXLINE( 688)									Float px5 = (s1->circle->worldCOMx + (px2 * df));
HXDLIN( 688)									Float py5 = (s1->circle->worldCOMy + (py2 * df));
HXDLIN( 688)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c4,"c") = null();
HXDLIN( 688)									{
HXLINE( 688)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite10,"cx_ite") = arb->contacts->next;
HXDLIN( 688)										while(hx::IsNotNull( cx_ite10 )){
HXLINE( 688)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur4,"cur") = cx_ite10;
HXDLIN( 688)											if (((int)0 == cur4->hash)) {
HXLINE( 688)												c4 = cur4;
HXDLIN( 688)												goto _hx_goto_21;
            											}
HXDLIN( 688)											cx_ite10 = cx_ite10->next;
            										}
            										_hx_goto_21:;
            									}
HXDLIN( 688)									if (hx::IsNull( c4 )) {
HXLINE( 688)										if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 688)											c4 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 688)											c4 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 688)											::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c4->next;
HXDLIN( 688)											c4->next = null();
            										}
HXDLIN( 688)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci4,"ci") = c4->inner;
HXDLIN( 688)										ci4->jnAcc = (ci4->jtAcc = (int)0);
HXDLIN( 688)										c4->hash = (int)0;
HXDLIN( 688)										c4->fresh = true;
HXDLIN( 688)										c4->arbiter = arb;
HXDLIN( 688)										arb->jrAcc = (int)0;
HXDLIN( 688)										{
HXLINE( 688)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this4,"_this") = arb->contacts;
HXDLIN( 688)											c4->_inuse = true;
HXDLIN( 688)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp4,"temp") = c4;
HXDLIN( 688)											temp4->next = _this4->next;
HXDLIN( 688)											_this4->next = temp4;
HXDLIN( 688)											_this4->modified = true;
HXDLIN( 688)											_this4->length++;
            										}
HXDLIN( 688)										arb->innards->add(ci4);
            									}
            									else {
HXLINE( 688)										c4->fresh = false;
            									}
HXDLIN( 688)									{
HXLINE( 688)										c4->px = px5;
HXDLIN( 688)										c4->py = py5;
            									}
HXDLIN( 688)									{
HXLINE( 688)										arb->nx = (px2 * invDist);
HXDLIN( 688)										arb->ny = (py2 * invDist);
            									}
HXDLIN( 688)									c4->dist = (dist1 - minDist);
HXDLIN( 688)									c4->stamp = arb->stamp;
HXDLIN( 688)									c4->posOnly = false;
HXLINE( 672)									co = c4;
            								}
            							}
            						}
HXLINE( 691)						if (hx::IsNotNull( co )) {
HXLINE( 692)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,con1,"con") = co->inner;
HXLINE( 693)							arb->ptype = (int)2;
HXLINE( 694)							HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 695)							HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 696)							{
HXLINE( 697)								vx = (v0->x - s2->polygon->body->posx);
HXLINE( 698)								vy = (v0->y - s2->polygon->body->posy);
            							}
HXLINE( 700)							arb->_hx___ref_edge1 = a0;
HXLINE( 701)							arb->_hx___ref_vertex = (int)-1;
HXLINE( 702)							if (rev) {
HXLINE( 703)								{
HXLINE( 704)									con1->lr1x = ((vx * s2->polygon->body->axisy) + (vy * s2->polygon->body->axisx));
HXLINE( 705)									con1->lr1y = ((vy * s2->polygon->body->axisy) - (vx * s2->polygon->body->axisx));
            								}
HXLINE( 707)								{
HXLINE( 708)									con1->lr2x = s1->circle->localCOMx;
HXLINE( 709)									con1->lr2y = s1->circle->localCOMy;
            								}
            							}
            							else {
HXLINE( 729)								{
HXLINE( 730)									con1->lr2x = ((vx * s2->polygon->body->axisy) + (vy * s2->polygon->body->axisx));
HXLINE( 731)									con1->lr2y = ((vy * s2->polygon->body->axisy) - (vx * s2->polygon->body->axisx));
            								}
HXLINE( 733)								{
HXLINE( 734)									con1->lr1x = s1->circle->localCOMx;
HXLINE( 735)									con1->lr1y = s1->circle->localCOMy;
            								}
            							}
HXLINE( 754)							arb->radius = s1->circle->radius;
            						}
HXLINE( 756)						return hx::IsNotNull( co );
            					}
            					else {
HXLINE( 758)						if ((dt >= ((v11->y * a0->gnormx) - (v11->x * a0->gnormy)))) {
HXLINE( 760)							HX_VARI_NAME( Float,minDist1,"minDist") = s1->circle->radius;
HXLINE( 761)							HX_VARI_NAME( Float,px6,"px") = ((Float)0.0);
HXLINE( 762)							HX_VARI_NAME( Float,py6,"py") = ((Float)0.0);
HXLINE( 763)							{
HXLINE( 764)								px6 = (v11->x - s1->circle->worldCOMx);
HXLINE( 765)								py6 = (v11->y - s1->circle->worldCOMy);
            							}
HXLINE( 767)							HX_VARI_NAME( Float,distSqr1,"distSqr") = ((px6 * px6) + (py6 * py6));
HXLINE( 759)							HX_VAR_NAME(  ::zpp_nape::dynamics::ZPP_Contact,co1,"co");
HXLINE( 768)							if ((distSqr1 > (minDist1 * minDist1))) {
HXLINE( 759)								co1 = null();
            							}
            							else {
HXLINE( 769)								if ((distSqr1 < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE( 769)									Float px7 = s1->circle->worldCOMx;
HXDLIN( 769)									Float py7 = s1->circle->worldCOMy;
HXDLIN( 769)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c5,"c") = null();
HXDLIN( 769)									{
HXLINE( 769)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite11,"cx_ite") = arb->contacts->next;
HXDLIN( 769)										while(hx::IsNotNull( cx_ite11 )){
HXLINE( 769)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur5,"cur") = cx_ite11;
HXDLIN( 769)											if (((int)0 == cur5->hash)) {
HXLINE( 769)												c5 = cur5;
HXDLIN( 769)												goto _hx_goto_22;
            											}
HXDLIN( 769)											cx_ite11 = cx_ite11->next;
            										}
            										_hx_goto_22:;
            									}
HXDLIN( 769)									if (hx::IsNull( c5 )) {
HXLINE( 769)										if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 769)											c5 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 769)											c5 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 769)											::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c5->next;
HXDLIN( 769)											c5->next = null();
            										}
HXDLIN( 769)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci5,"ci") = c5->inner;
HXDLIN( 769)										ci5->jnAcc = (ci5->jtAcc = (int)0);
HXDLIN( 769)										c5->hash = (int)0;
HXDLIN( 769)										c5->fresh = true;
HXDLIN( 769)										c5->arbiter = arb;
HXDLIN( 769)										arb->jrAcc = (int)0;
HXDLIN( 769)										{
HXLINE( 769)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this5,"_this") = arb->contacts;
HXDLIN( 769)											c5->_inuse = true;
HXDLIN( 769)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp5,"temp") = c5;
HXDLIN( 769)											temp5->next = _this5->next;
HXDLIN( 769)											_this5->next = temp5;
HXDLIN( 769)											_this5->modified = true;
HXDLIN( 769)											_this5->length++;
            										}
HXDLIN( 769)										arb->innards->add(ci5);
            									}
            									else {
HXLINE( 769)										c5->fresh = false;
            									}
HXDLIN( 769)									{
HXLINE( 769)										c5->px = px7;
HXDLIN( 769)										c5->py = py7;
            									}
HXDLIN( 769)									{
HXLINE( 769)										arb->nx = (int)1;
HXDLIN( 769)										arb->ny = (int)0;
            									}
HXDLIN( 769)									c5->dist = -(minDist1);
HXDLIN( 769)									c5->stamp = arb->stamp;
HXDLIN( 769)									c5->posOnly = false;
HXLINE( 759)									co1 = c5;
            								}
            								else {
HXLINE( 771)									HX_VARI_NAME( Float,invDist1,"invDist") = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(distSqr1));
HXLINE( 772)									HX_VAR_NAME( Float,dist2,"dist");
HXDLIN( 772)									if ((invDist1 < ::nape::Config_obj::epsilon)) {
HXLINE( 772)										dist2 = ((Float)1e100);
            									}
            									else {
HXLINE( 772)										dist2 = ((Float)((Float)1.0) / (Float)invDist1);
            									}
HXLINE( 773)									HX_VARI_NAME( Float,df1,"df") = (((Float)0.5) + ((s1->circle->radius - (((Float)0.5) * minDist1)) * invDist1));
HXLINE( 774)									if (rev) {
HXLINE( 774)										Float px8 = (s1->circle->worldCOMx + (px6 * df1));
HXDLIN( 774)										Float py8 = (s1->circle->worldCOMy + (py6 * df1));
HXDLIN( 774)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c6,"c") = null();
HXDLIN( 774)										{
HXLINE( 774)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite12,"cx_ite") = arb->contacts->next;
HXDLIN( 774)											while(hx::IsNotNull( cx_ite12 )){
HXLINE( 774)												HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur6,"cur") = cx_ite12;
HXDLIN( 774)												if (((int)0 == cur6->hash)) {
HXLINE( 774)													c6 = cur6;
HXDLIN( 774)													goto _hx_goto_23;
            												}
HXDLIN( 774)												cx_ite12 = cx_ite12->next;
            											}
            											_hx_goto_23:;
            										}
HXDLIN( 774)										if (hx::IsNull( c6 )) {
HXLINE( 774)											if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 774)												c6 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 774)												c6 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 774)												::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c6->next;
HXDLIN( 774)												c6->next = null();
            											}
HXDLIN( 774)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci6,"ci") = c6->inner;
HXDLIN( 774)											ci6->jnAcc = (ci6->jtAcc = (int)0);
HXDLIN( 774)											c6->hash = (int)0;
HXDLIN( 774)											c6->fresh = true;
HXDLIN( 774)											c6->arbiter = arb;
HXDLIN( 774)											arb->jrAcc = (int)0;
HXDLIN( 774)											{
HXLINE( 774)												HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this6,"_this") = arb->contacts;
HXDLIN( 774)												c6->_inuse = true;
HXDLIN( 774)												HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp6,"temp") = c6;
HXDLIN( 774)												temp6->next = _this6->next;
HXDLIN( 774)												_this6->next = temp6;
HXDLIN( 774)												_this6->modified = true;
HXDLIN( 774)												_this6->length++;
            											}
HXDLIN( 774)											arb->innards->add(ci6);
            										}
            										else {
HXLINE( 774)											c6->fresh = false;
            										}
HXDLIN( 774)										{
HXLINE( 774)											c6->px = px8;
HXDLIN( 774)											c6->py = py8;
            										}
HXDLIN( 774)										{
HXLINE( 774)											arb->nx = (-(px6) * invDist1);
HXDLIN( 774)											arb->ny = (-(py6) * invDist1);
            										}
HXDLIN( 774)										c6->dist = (dist2 - minDist1);
HXDLIN( 774)										c6->stamp = arb->stamp;
HXDLIN( 774)										c6->posOnly = false;
HXLINE( 759)										co1 = c6;
            									}
            									else {
HXLINE( 775)										Float px9 = (s1->circle->worldCOMx + (px6 * df1));
HXDLIN( 775)										Float py9 = (s1->circle->worldCOMy + (py6 * df1));
HXDLIN( 775)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c7,"c") = null();
HXDLIN( 775)										{
HXLINE( 775)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite13,"cx_ite") = arb->contacts->next;
HXDLIN( 775)											while(hx::IsNotNull( cx_ite13 )){
HXLINE( 775)												HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur7,"cur") = cx_ite13;
HXDLIN( 775)												if (((int)0 == cur7->hash)) {
HXLINE( 775)													c7 = cur7;
HXDLIN( 775)													goto _hx_goto_24;
            												}
HXDLIN( 775)												cx_ite13 = cx_ite13->next;
            											}
            											_hx_goto_24:;
            										}
HXDLIN( 775)										if (hx::IsNull( c7 )) {
HXLINE( 775)											if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 775)												c7 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE( 775)												c7 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 775)												::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c7->next;
HXDLIN( 775)												c7->next = null();
            											}
HXDLIN( 775)											HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci7,"ci") = c7->inner;
HXDLIN( 775)											ci7->jnAcc = (ci7->jtAcc = (int)0);
HXDLIN( 775)											c7->hash = (int)0;
HXDLIN( 775)											c7->fresh = true;
HXDLIN( 775)											c7->arbiter = arb;
HXDLIN( 775)											arb->jrAcc = (int)0;
HXDLIN( 775)											{
HXLINE( 775)												HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this7,"_this") = arb->contacts;
HXDLIN( 775)												c7->_inuse = true;
HXDLIN( 775)												HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp7,"temp") = c7;
HXDLIN( 775)												temp7->next = _this7->next;
HXDLIN( 775)												_this7->next = temp7;
HXDLIN( 775)												_this7->modified = true;
HXDLIN( 775)												_this7->length++;
            											}
HXDLIN( 775)											arb->innards->add(ci7);
            										}
            										else {
HXLINE( 775)											c7->fresh = false;
            										}
HXDLIN( 775)										{
HXLINE( 775)											c7->px = px9;
HXDLIN( 775)											c7->py = py9;
            										}
HXDLIN( 775)										{
HXLINE( 775)											arb->nx = (px6 * invDist1);
HXDLIN( 775)											arb->ny = (py6 * invDist1);
            										}
HXDLIN( 775)										c7->dist = (dist2 - minDist1);
HXDLIN( 775)										c7->stamp = arb->stamp;
HXDLIN( 775)										c7->posOnly = false;
HXLINE( 759)										co1 = c7;
            									}
            								}
            							}
HXLINE( 778)							if (hx::IsNotNull( co1 )) {
HXLINE( 779)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,con2,"con") = co1->inner;
HXLINE( 780)								arb->ptype = (int)2;
HXLINE( 781)								HX_VARI_NAME( Float,vx1,"vx") = ((Float)0.0);
HXLINE( 782)								HX_VARI_NAME( Float,vy1,"vy") = ((Float)0.0);
HXLINE( 783)								{
HXLINE( 784)									vx1 = (v11->x - s2->polygon->body->posx);
HXLINE( 785)									vy1 = (v11->y - s2->polygon->body->posy);
            								}
HXLINE( 787)								arb->_hx___ref_edge1 = a0;
HXLINE( 788)								arb->_hx___ref_vertex = (int)1;
HXLINE( 789)								if (rev) {
HXLINE( 790)									{
HXLINE( 791)										con2->lr1x = ((vx1 * s2->polygon->body->axisy) + (vy1 * s2->polygon->body->axisx));
HXLINE( 792)										con2->lr1y = ((vy1 * s2->polygon->body->axisy) - (vx1 * s2->polygon->body->axisx));
            									}
HXLINE( 794)									{
HXLINE( 795)										con2->lr2x = s1->circle->localCOMx;
HXLINE( 796)										con2->lr2y = s1->circle->localCOMy;
            									}
            								}
            								else {
HXLINE( 816)									{
HXLINE( 817)										con2->lr2x = ((vx1 * s2->polygon->body->axisy) + (vy1 * s2->polygon->body->axisx));
HXLINE( 818)										con2->lr2y = ((vy1 * s2->polygon->body->axisy) - (vx1 * s2->polygon->body->axisx));
            									}
HXLINE( 820)									{
HXLINE( 821)										con2->lr1x = s1->circle->localCOMx;
HXLINE( 822)										con2->lr1y = s1->circle->localCOMy;
            									}
            								}
HXLINE( 841)								arb->radius = s1->circle->radius;
            							}
HXLINE( 843)							return hx::IsNotNull( co1 );
            						}
            						else {
HXLINE( 846)							HX_VARI_NAME( Float,nx1,"nx") = ((Float)0.0);
HXLINE( 847)							HX_VARI_NAME( Float,ny1,"ny") = ((Float)0.0);
HXLINE( 848)							{
HXLINE( 849)								HX_VARI_NAME( Float,t3,"t") = (s1->circle->radius + (max1 * ((Float)0.5)));
HXLINE( 858)								nx1 = (a0->gnormx * t3);
HXLINE( 859)								ny1 = (a0->gnormy * t3);
            							}
HXLINE( 861)							HX_VARI_NAME( Float,px10,"px") = ((Float)0.0);
HXLINE( 862)							HX_VARI_NAME( Float,py10,"py") = ((Float)0.0);
HXLINE( 863)							{
HXLINE( 864)								px10 = (s1->circle->worldCOMx - nx1);
HXLINE( 865)								py10 = (s1->circle->worldCOMy - ny1);
            							}
HXLINE( 867)							HX_VAR_NAME(  ::zpp_nape::dynamics::ZPP_Contact,con3,"con");
HXDLIN( 867)							if (rev) {
HXLINE( 867)								Float nx2 = a0->gnormx;
HXDLIN( 867)								Float ny2 = a0->gnormy;
HXDLIN( 867)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c8,"c") = null();
HXDLIN( 867)								{
HXLINE( 867)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite14,"cx_ite") = arb->contacts->next;
HXDLIN( 867)									while(hx::IsNotNull( cx_ite14 )){
HXLINE( 867)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur8,"cur") = cx_ite14;
HXDLIN( 867)										if (((int)0 == cur8->hash)) {
HXLINE( 867)											c8 = cur8;
HXDLIN( 867)											goto _hx_goto_25;
            										}
HXDLIN( 867)										cx_ite14 = cx_ite14->next;
            									}
            									_hx_goto_25:;
            								}
HXDLIN( 867)								if (hx::IsNull( c8 )) {
HXLINE( 867)									if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 867)										c8 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 867)										c8 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 867)										::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c8->next;
HXDLIN( 867)										c8->next = null();
            									}
HXDLIN( 867)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci8,"ci") = c8->inner;
HXDLIN( 867)									ci8->jnAcc = (ci8->jtAcc = (int)0);
HXDLIN( 867)									c8->hash = (int)0;
HXDLIN( 867)									c8->fresh = true;
HXDLIN( 867)									c8->arbiter = arb;
HXDLIN( 867)									arb->jrAcc = (int)0;
HXDLIN( 867)									{
HXLINE( 867)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this8,"_this") = arb->contacts;
HXDLIN( 867)										c8->_inuse = true;
HXDLIN( 867)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp8,"temp") = c8;
HXDLIN( 867)										temp8->next = _this8->next;
HXDLIN( 867)										_this8->next = temp8;
HXDLIN( 867)										_this8->modified = true;
HXDLIN( 867)										_this8->length++;
            									}
HXDLIN( 867)									arb->innards->add(ci8);
            								}
            								else {
HXLINE( 867)									c8->fresh = false;
            								}
HXDLIN( 867)								{
HXLINE( 867)									c8->px = px10;
HXDLIN( 867)									c8->py = py10;
            								}
HXDLIN( 867)								{
HXLINE( 867)									arb->nx = nx2;
HXDLIN( 867)									arb->ny = ny2;
            								}
HXDLIN( 867)								c8->dist = max1;
HXDLIN( 867)								c8->stamp = arb->stamp;
HXDLIN( 867)								c8->posOnly = false;
HXDLIN( 867)								con3 = c8;
            							}
            							else {
HXLINE( 868)								Float nx3 = -(a0->gnormx);
HXDLIN( 868)								Float ny3 = -(a0->gnormy);
HXDLIN( 868)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c9,"c") = null();
HXDLIN( 868)								{
HXLINE( 868)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite15,"cx_ite") = arb->contacts->next;
HXDLIN( 868)									while(hx::IsNotNull( cx_ite15 )){
HXLINE( 868)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur9,"cur") = cx_ite15;
HXDLIN( 868)										if (((int)0 == cur9->hash)) {
HXLINE( 868)											c9 = cur9;
HXDLIN( 868)											goto _hx_goto_26;
            										}
HXDLIN( 868)										cx_ite15 = cx_ite15->next;
            									}
            									_hx_goto_26:;
            								}
HXDLIN( 868)								if (hx::IsNull( c9 )) {
HXLINE( 868)									if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 868)										c9 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 868)										c9 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 868)										::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c9->next;
HXDLIN( 868)										c9->next = null();
            									}
HXDLIN( 868)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci9,"ci") = c9->inner;
HXDLIN( 868)									ci9->jnAcc = (ci9->jtAcc = (int)0);
HXDLIN( 868)									c9->hash = (int)0;
HXDLIN( 868)									c9->fresh = true;
HXDLIN( 868)									c9->arbiter = arb;
HXDLIN( 868)									arb->jrAcc = (int)0;
HXDLIN( 868)									{
HXLINE( 868)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this9,"_this") = arb->contacts;
HXDLIN( 868)										c9->_inuse = true;
HXDLIN( 868)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp9,"temp") = c9;
HXDLIN( 868)										temp9->next = _this9->next;
HXDLIN( 868)										_this9->next = temp9;
HXDLIN( 868)										_this9->modified = true;
HXDLIN( 868)										_this9->length++;
            									}
HXDLIN( 868)									arb->innards->add(ci9);
            								}
            								else {
HXLINE( 868)									c9->fresh = false;
            								}
HXDLIN( 868)								{
HXLINE( 868)									c9->px = px10;
HXDLIN( 868)									c9->py = py10;
            								}
HXDLIN( 868)								{
HXLINE( 868)									arb->nx = nx3;
HXDLIN( 868)									arb->ny = ny3;
            								}
HXDLIN( 868)								c9->dist = max1;
HXDLIN( 868)								c9->stamp = arb->stamp;
HXDLIN( 868)								c9->posOnly = false;
HXLINE( 867)								con3 = c9;
            							}
HXLINE( 869)							int _hx_tmp2;
HXDLIN( 869)							if (rev) {
HXLINE( 869)								_hx_tmp2 = (int)0;
            							}
            							else {
HXLINE( 869)								_hx_tmp2 = (int)1;
            							}
HXDLIN( 869)							arb->ptype = _hx_tmp2;
HXLINE( 870)							{
HXLINE( 871)								arb->lnormx = a0->lnormx;
HXLINE( 872)								arb->lnormy = a0->lnormy;
            							}
HXLINE( 890)							arb->rev = !(rev);
HXLINE( 891)							arb->lproj = a0->lprojection;
HXLINE( 892)							arb->radius = s1->circle->radius;
HXLINE( 893)							{
HXLINE( 894)								con3->inner->lr1x = s1->circle->localCOMx;
HXLINE( 895)								con3->inner->lr1y = s1->circle->localCOMy;
            							}
HXLINE( 913)							arb->_hx___ref_edge1 = a0;
HXLINE( 914)							arb->_hx___ref_vertex = (int)0;
HXLINE( 915)							return true;
            						}
            					}
            				}
            				else {
HXLINE( 918)					return false;
            				}
            			}
            		}
            		else {
HXLINE( 923)			HX_VARI_NAME( Float,minDist2,"minDist") = (s1->circle->radius + s2->circle->radius);
HXLINE( 924)			HX_VARI_NAME( Float,px11,"px") = ((Float)0.0);
HXLINE( 925)			HX_VARI_NAME( Float,py11,"py") = ((Float)0.0);
HXLINE( 926)			{
HXLINE( 927)				px11 = (s2->circle->worldCOMx - s1->circle->worldCOMx);
HXLINE( 928)				py11 = (s2->circle->worldCOMy - s1->circle->worldCOMy);
            			}
HXLINE( 930)			HX_VARI_NAME( Float,distSqr2,"distSqr") = ((px11 * px11) + (py11 * py11));
HXLINE( 922)			HX_VAR_NAME(  ::zpp_nape::dynamics::ZPP_Contact,co2,"co");
HXLINE( 931)			if ((distSqr2 > (minDist2 * minDist2))) {
HXLINE( 922)				co2 = null();
            			}
            			else {
HXLINE( 932)				if ((distSqr2 < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE( 932)					Float px12 = s1->circle->worldCOMx;
HXDLIN( 932)					Float py12 = s1->circle->worldCOMy;
HXDLIN( 932)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c10,"c") = null();
HXDLIN( 932)					{
HXLINE( 932)						HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite16,"cx_ite") = arb->contacts->next;
HXDLIN( 932)						while(hx::IsNotNull( cx_ite16 )){
HXLINE( 932)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur10,"cur") = cx_ite16;
HXDLIN( 932)							if (((int)0 == cur10->hash)) {
HXLINE( 932)								c10 = cur10;
HXDLIN( 932)								goto _hx_goto_27;
            							}
HXDLIN( 932)							cx_ite16 = cx_ite16->next;
            						}
            						_hx_goto_27:;
            					}
HXDLIN( 932)					if (hx::IsNull( c10 )) {
HXLINE( 932)						if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 932)							c10 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 932)							c10 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 932)							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c10->next;
HXDLIN( 932)							c10->next = null();
            						}
HXDLIN( 932)						HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci10,"ci") = c10->inner;
HXDLIN( 932)						ci10->jnAcc = (ci10->jtAcc = (int)0);
HXDLIN( 932)						c10->hash = (int)0;
HXDLIN( 932)						c10->fresh = true;
HXDLIN( 932)						c10->arbiter = arb;
HXDLIN( 932)						arb->jrAcc = (int)0;
HXDLIN( 932)						{
HXLINE( 932)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this10,"_this") = arb->contacts;
HXDLIN( 932)							c10->_inuse = true;
HXDLIN( 932)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp10,"temp") = c10;
HXDLIN( 932)							temp10->next = _this10->next;
HXDLIN( 932)							_this10->next = temp10;
HXDLIN( 932)							_this10->modified = true;
HXDLIN( 932)							_this10->length++;
            						}
HXDLIN( 932)						arb->innards->add(ci10);
            					}
            					else {
HXLINE( 932)						c10->fresh = false;
            					}
HXDLIN( 932)					{
HXLINE( 932)						c10->px = px12;
HXDLIN( 932)						c10->py = py12;
            					}
HXDLIN( 932)					{
HXLINE( 932)						arb->nx = (int)1;
HXDLIN( 932)						arb->ny = (int)0;
            					}
HXDLIN( 932)					c10->dist = -(minDist2);
HXDLIN( 932)					c10->stamp = arb->stamp;
HXDLIN( 932)					c10->posOnly = false;
HXLINE( 922)					co2 = c10;
            				}
            				else {
HXLINE( 934)					HX_VARI_NAME( Float,invDist2,"invDist") = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(distSqr2));
HXLINE( 935)					HX_VAR_NAME( Float,dist3,"dist");
HXDLIN( 935)					if ((invDist2 < ::nape::Config_obj::epsilon)) {
HXLINE( 935)						dist3 = ((Float)1e100);
            					}
            					else {
HXLINE( 935)						dist3 = ((Float)((Float)1.0) / (Float)invDist2);
            					}
HXLINE( 936)					HX_VARI_NAME( Float,df2,"df") = (((Float)0.5) + ((s1->circle->radius - (((Float)0.5) * minDist2)) * invDist2));
HXLINE( 937)					if (rev) {
HXLINE( 937)						Float px13 = (s1->circle->worldCOMx + (px11 * df2));
HXDLIN( 937)						Float py13 = (s1->circle->worldCOMy + (py11 * df2));
HXDLIN( 937)						HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c11,"c") = null();
HXDLIN( 937)						{
HXLINE( 937)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite17,"cx_ite") = arb->contacts->next;
HXDLIN( 937)							while(hx::IsNotNull( cx_ite17 )){
HXLINE( 937)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur11,"cur") = cx_ite17;
HXDLIN( 937)								if (((int)0 == cur11->hash)) {
HXLINE( 937)									c11 = cur11;
HXDLIN( 937)									goto _hx_goto_28;
            								}
HXDLIN( 937)								cx_ite17 = cx_ite17->next;
            							}
            							_hx_goto_28:;
            						}
HXDLIN( 937)						if (hx::IsNull( c11 )) {
HXLINE( 937)							if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 937)								c11 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 937)								c11 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 937)								::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c11->next;
HXDLIN( 937)								c11->next = null();
            							}
HXDLIN( 937)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci11,"ci") = c11->inner;
HXDLIN( 937)							ci11->jnAcc = (ci11->jtAcc = (int)0);
HXDLIN( 937)							c11->hash = (int)0;
HXDLIN( 937)							c11->fresh = true;
HXDLIN( 937)							c11->arbiter = arb;
HXDLIN( 937)							arb->jrAcc = (int)0;
HXDLIN( 937)							{
HXLINE( 937)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this11,"_this") = arb->contacts;
HXDLIN( 937)								c11->_inuse = true;
HXDLIN( 937)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp11,"temp") = c11;
HXDLIN( 937)								temp11->next = _this11->next;
HXDLIN( 937)								_this11->next = temp11;
HXDLIN( 937)								_this11->modified = true;
HXDLIN( 937)								_this11->length++;
            							}
HXDLIN( 937)							arb->innards->add(ci11);
            						}
            						else {
HXLINE( 937)							c11->fresh = false;
            						}
HXDLIN( 937)						{
HXLINE( 937)							c11->px = px13;
HXDLIN( 937)							c11->py = py13;
            						}
HXDLIN( 937)						{
HXLINE( 937)							arb->nx = (-(px11) * invDist2);
HXDLIN( 937)							arb->ny = (-(py11) * invDist2);
            						}
HXDLIN( 937)						c11->dist = (dist3 - minDist2);
HXDLIN( 937)						c11->stamp = arb->stamp;
HXDLIN( 937)						c11->posOnly = false;
HXLINE( 922)						co2 = c11;
            					}
            					else {
HXLINE( 938)						Float px14 = (s1->circle->worldCOMx + (px11 * df2));
HXDLIN( 938)						Float py14 = (s1->circle->worldCOMy + (py11 * df2));
HXDLIN( 938)						HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,c12,"c") = null();
HXDLIN( 938)						{
HXLINE( 938)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite18,"cx_ite") = arb->contacts->next;
HXDLIN( 938)							while(hx::IsNotNull( cx_ite18 )){
HXLINE( 938)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cur12,"cur") = cx_ite18;
HXDLIN( 938)								if (((int)0 == cur12->hash)) {
HXLINE( 938)									c12 = cur12;
HXDLIN( 938)									goto _hx_goto_29;
            								}
HXDLIN( 938)								cx_ite18 = cx_ite18->next;
            							}
            							_hx_goto_29:;
            						}
HXDLIN( 938)						if (hx::IsNull( c12 )) {
HXLINE( 938)							if (hx::IsNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )) {
HXLINE( 938)								c12 =  ::zpp_nape::dynamics::ZPP_Contact_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 938)								c12 = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
HXDLIN( 938)								::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = c12->next;
HXDLIN( 938)								c12->next = null();
            							}
HXDLIN( 938)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,ci12,"ci") = c12->inner;
HXDLIN( 938)							ci12->jnAcc = (ci12->jtAcc = (int)0);
HXDLIN( 938)							c12->hash = (int)0;
HXDLIN( 938)							c12->fresh = true;
HXDLIN( 938)							c12->arbiter = arb;
HXDLIN( 938)							arb->jrAcc = (int)0;
HXDLIN( 938)							{
HXLINE( 938)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,_this12,"_this") = arb->contacts;
HXDLIN( 938)								c12->_inuse = true;
HXDLIN( 938)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,temp12,"temp") = c12;
HXDLIN( 938)								temp12->next = _this12->next;
HXDLIN( 938)								_this12->next = temp12;
HXDLIN( 938)								_this12->modified = true;
HXDLIN( 938)								_this12->length++;
            							}
HXDLIN( 938)							arb->innards->add(ci12);
            						}
            						else {
HXLINE( 938)							c12->fresh = false;
            						}
HXDLIN( 938)						{
HXLINE( 938)							c12->px = px14;
HXDLIN( 938)							c12->py = py14;
            						}
HXDLIN( 938)						{
HXLINE( 938)							arb->nx = (px11 * invDist2);
HXDLIN( 938)							arb->ny = (py11 * invDist2);
            						}
HXDLIN( 938)						c12->dist = (dist3 - minDist2);
HXDLIN( 938)						c12->stamp = arb->stamp;
HXDLIN( 938)						c12->posOnly = false;
HXLINE( 922)						co2 = c12;
            					}
            				}
            			}
HXLINE( 941)			if (hx::IsNotNull( co2 )) {
HXLINE( 942)				HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_IContact,con4,"con") = co2->inner;
HXLINE( 943)				if (rev) {
HXLINE( 944)					{
HXLINE( 945)						con4->lr1x = s2->circle->localCOMx;
HXLINE( 946)						con4->lr1y = s2->circle->localCOMy;
            					}
HXLINE( 964)					{
HXLINE( 965)						con4->lr2x = s1->circle->localCOMx;
HXLINE( 966)						con4->lr2y = s1->circle->localCOMy;
            					}
            				}
            				else {
HXLINE( 986)					{
HXLINE( 987)						con4->lr1x = s1->circle->localCOMx;
HXLINE( 988)						con4->lr1y = s1->circle->localCOMy;
            					}
HXLINE(1006)					{
HXLINE(1007)						con4->lr2x = s2->circle->localCOMx;
HXLINE(1008)						con4->lr2y = s2->circle->localCOMy;
            					}
            				}
HXLINE(1027)				arb->radius = (s1->circle->radius + s2->circle->radius);
HXLINE(1028)				arb->ptype = (int)2;
HXLINE(1029)				return true;
            			}
            			else {
HXLINE(1031)				return false;
            			}
            		}
HXLINE( 357)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_Collide_obj,contactCollide,return )

bool ZPP_Collide_obj::testCollide_safe( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2){
            	HX_STACKFRAME(&_hx_pos_e890b6717661a957_1034_testCollide_safe)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
HXLINE(1035)		if ((s2->type == (int)0)) {
HXLINE(1036)			HX_VARI(  ::zpp_nape::shape::ZPP_Shape,t) = s1;
HXLINE(1037)			s1 = s2;
HXLINE(1038)			s2 = t;
            		}
HXLINE(1040)		return ::zpp_nape::geom::ZPP_Collide_obj::testCollide(s1,s2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Collide_obj,testCollide_safe,return )

bool ZPP_Collide_obj::testCollide( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2){
            	HX_STACKFRAME(&_hx_pos_e890b6717661a957_1043_testCollide)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
HXLINE(1043)		if ((s2->type == (int)1)) {
HXLINE(1044)			if ((s1->type == (int)1)) {
HXLINE(1045)				HX_VARI( bool,cont) = true;
HXLINE(1046)				{
HXLINE(1047)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite) = s1->polygon->edges->head;
HXLINE(1048)					while(hx::IsNotNull( cx_ite )){
HXLINE(1049)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ax) = cx_ite->elt;
HXLINE(1050)						{
HXLINE(1051)							HX_VARI( Float,min) = ((Float)1e100);
HXLINE(1052)							{
HXLINE(1053)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = s2->polygon->gverts->next;
HXLINE(1054)								while(hx::IsNotNull( cx_ite1 )){
HXLINE(1055)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXLINE(1056)									{
HXLINE(1057)										HX_VARI( Float,k) = ((ax->gnormx * v->x) + (ax->gnormy * v->y));
HXLINE(1058)										if ((k < min)) {
HXLINE(1058)											min = k;
            										}
            									}
HXLINE(1060)									cx_ite1 = cx_ite1->next;
            								}
            							}
HXLINE(1063)							min = (min - ax->gprojection);
HXLINE(1064)							if ((min > (int)0)) {
HXLINE(1065)								cont = false;
HXLINE(1066)								goto _hx_goto_32;
            							}
            						}
HXLINE(1069)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_32:;
            				}
HXLINE(1072)				if (cont) {
HXLINE(1073)					{
HXLINE(1074)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite2,"cx_ite") = s2->polygon->edges->head;
HXLINE(1075)						while(hx::IsNotNull( cx_ite2 )){
HXLINE(1076)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,ax1,"ax") = cx_ite2->elt;
HXLINE(1077)							{
HXLINE(1078)								HX_VARI_NAME( Float,min1,"min") = ((Float)1e100);
HXLINE(1079)								{
HXLINE(1080)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = s1->polygon->gverts->next;
HXLINE(1081)									while(hx::IsNotNull( cx_ite3 )){
HXLINE(1082)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite3;
HXLINE(1083)										{
HXLINE(1084)											HX_VARI_NAME( Float,k1,"k") = ((ax1->gnormx * v1->x) + (ax1->gnormy * v1->y));
HXLINE(1085)											if ((k1 < min1)) {
HXLINE(1085)												min1 = k1;
            											}
            										}
HXLINE(1087)										cx_ite3 = cx_ite3->next;
            									}
            								}
HXLINE(1090)								min1 = (min1 - ax1->gprojection);
HXLINE(1091)								if ((min1 > (int)0)) {
HXLINE(1092)									cont = false;
HXLINE(1093)									goto _hx_goto_34;
            								}
            							}
HXLINE(1096)							cx_ite2 = cx_ite2->next;
            						}
            						_hx_goto_34:;
            					}
HXLINE(1044)					return cont;
            				}
            				else {
HXLINE(1044)					return false;
            				}
            			}
            			else {
HXLINE(1104)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a0) = null();
HXDLIN(1104)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,vi) = null();
HXLINE(1105)				HX_VARI_NAME( bool,cont1,"cont") = true;
HXLINE(1106)				HX_VARI( Float,max) = ((Float)-1e+100);
HXLINE(1107)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,vite) = s2->polygon->gverts->next;
HXLINE(1108)				{
HXLINE(1109)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite4,"cx_ite") = s2->polygon->edges->head;
HXLINE(1110)					while(hx::IsNotNull( cx_ite4 )){
HXLINE(1111)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite4->elt;
HXLINE(1112)						{
HXLINE(1113)							HX_VARI( Float,dist) = ((((a->gnormx * s1->circle->worldCOMx) + (a->gnormy * s1->circle->worldCOMy)) - a->gprojection) - s1->circle->radius);
HXLINE(1114)							if ((dist > (int)0)) {
HXLINE(1115)								cont1 = false;
HXLINE(1116)								goto _hx_goto_36;
            							}
HXLINE(1118)							if ((dist > max)) {
HXLINE(1119)								max = dist;
HXLINE(1120)								a0 = a;
HXLINE(1121)								vi = vite;
            							}
HXLINE(1123)							vite = vite->next;
            						}
HXLINE(1125)						cx_ite4 = cx_ite4->next;
            					}
            					_hx_goto_36:;
            				}
HXLINE(1128)				if (cont1) {
HXLINE(1129)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v0) = vi;
HXLINE(1130)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,v11,"v1");
HXDLIN(1130)					if (hx::IsNull( vi->next )) {
HXLINE(1130)						v11 = s2->polygon->gverts->next;
            					}
            					else {
HXLINE(1130)						v11 = vi->next;
            					}
HXLINE(1131)					HX_VARI( Float,dt) = ((s1->circle->worldCOMy * a0->gnormx) - (s1->circle->worldCOMx * a0->gnormy));
HXLINE(1132)					if ((dt <= ((v0->y * a0->gnormx) - (v0->x * a0->gnormy)))) {
HXLINE(1133)						HX_VARI( Float,minDist) = s1->circle->radius;
HXLINE(1134)						HX_VARI( Float,px) = ((Float)0.0);
HXLINE(1135)						HX_VARI( Float,py) = ((Float)0.0);
HXLINE(1136)						{
HXLINE(1137)							px = (v0->x - s1->circle->worldCOMx);
HXLINE(1138)							py = (v0->y - s1->circle->worldCOMy);
            						}
HXLINE(1044)						return (((px * px) + (py * py)) <= (minDist * minDist));
            					}
            					else {
HXLINE(1143)						if ((dt >= ((v11->y * a0->gnormx) - (v11->x * a0->gnormy)))) {
HXLINE(1144)							HX_VARI_NAME( Float,minDist1,"minDist") = s1->circle->radius;
HXLINE(1145)							HX_VARI_NAME( Float,px1,"px") = ((Float)0.0);
HXLINE(1146)							HX_VARI_NAME( Float,py1,"py") = ((Float)0.0);
HXLINE(1147)							{
HXLINE(1148)								px1 = (v11->x - s1->circle->worldCOMx);
HXLINE(1149)								py1 = (v11->y - s1->circle->worldCOMy);
            							}
HXLINE(1044)							return (((px1 * px1) + (py1 * py1)) <= (minDist1 * minDist1));
            						}
            						else {
HXLINE(1044)							return true;
            						}
            					}
            				}
            				else {
HXLINE(1044)					return false;
            				}
            			}
            		}
            		else {
HXLINE(1160)			HX_VARI_NAME( Float,minDist2,"minDist") = (s1->circle->radius + s2->circle->radius);
HXLINE(1161)			HX_VARI_NAME( Float,px2,"px") = ((Float)0.0);
HXLINE(1162)			HX_VARI_NAME( Float,py2,"py") = ((Float)0.0);
HXLINE(1163)			{
HXLINE(1164)				px2 = (s2->circle->worldCOMx - s1->circle->worldCOMx);
HXLINE(1165)				py2 = (s2->circle->worldCOMy - s1->circle->worldCOMy);
            			}
HXLINE(1159)			return (((px2 * px2) + (py2 * py2)) <= (minDist2 * minDist2));
            		}
HXLINE(1043)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Collide_obj,testCollide,return )

bool ZPP_Collide_obj::flowCollide( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2, ::zpp_nape::dynamics::ZPP_FluidArbiter arb){
            	HX_GC_STACKFRAME(&_hx_pos_e890b6717661a957_1172_flowCollide)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(arb,"arb")
HXLINE(1172)		if ((s2->type == (int)1)) {
HXLINE(1173)			if ((s1->type == (int)1)) {
HXLINE(1174)				HX_VARI( ::Array< bool >,out1) = ::Array_obj< bool >::__new();
HXLINE(1175)				HX_VARI( ::Array< bool >,out2) = ::Array_obj< bool >::__new();
HXLINE(1176)				HX_VARI( bool,cont) = true;
HXLINE(1177)				HX_VARI( bool,total) = true;
HXLINE(1178)				{
HXLINE(1179)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite) = s1->polygon->edges->head;
HXLINE(1180)					while(hx::IsNotNull( cx_ite )){
HXLINE(1181)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ax) = cx_ite->elt;
HXLINE(1182)						{
HXLINE(1183)							HX_VARI( Float,min) = ((Float)1e100);
HXLINE(1184)							HX_VARI( int,ind) = (int)0;
HXLINE(1185)							{
HXLINE(1186)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = s2->polygon->gverts->next;
HXLINE(1187)								while(hx::IsNotNull( cx_ite1 )){
HXLINE(1188)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXLINE(1189)									{
HXLINE(1190)										HX_VARI( Float,k) = ((ax->gnormx * v->x) + (ax->gnormy * v->y));
HXLINE(1191)										if ((k < min)) {
HXLINE(1191)											min = k;
            										}
HXLINE(1192)										if ((k >= (ax->gprojection + ::nape::Config_obj::epsilon))) {
HXLINE(1193)											out2[ind] = true;
HXLINE(1194)											total = false;
            										}
HXLINE(1196)										ind = (ind + (int)1);
            									}
HXLINE(1198)									cx_ite1 = cx_ite1->next;
            								}
            							}
HXLINE(1201)							min = (min - ax->gprojection);
HXLINE(1202)							if ((min > (int)0)) {
HXLINE(1203)								cont = false;
HXLINE(1204)								goto _hx_goto_38;
            							}
            						}
HXLINE(1207)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_38:;
            				}
HXLINE(1210)				if (total) {
HXLINE(1211)					{
HXLINE(1211)						HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,_this) = s2->polygon;
HXDLIN(1211)						if (_this->zip_worldCOM) {
HXLINE(1211)							if (hx::IsNotNull( _this->body )) {
HXLINE(1211)								_this->zip_worldCOM = false;
HXDLIN(1211)								if (_this->zip_localCOM) {
HXLINE(1211)									_this->zip_localCOM = false;
HXDLIN(1211)									if ((_this->type == (int)1)) {
HXLINE(1211)										HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this1,"_this") = _this->polygon;
HXDLIN(1211)										if (hx::IsNull( _this1->lverts->next->next )) {
HXLINE(1211)											_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(1211)											_this1->localCOMy = _this1->lverts->next->y;
            										}
            										else {
HXLINE(1211)											if (hx::IsNull( _this1->lverts->next->next->next )) {
HXLINE(1211)												{
HXLINE(1211)													_this1->localCOMx = _this1->lverts->next->x;
HXDLIN(1211)													_this1->localCOMy = _this1->lverts->next->y;
            												}
HXDLIN(1211)												{
HXLINE(1211)													_this1->localCOMx = (_this1->localCOMx + _this1->lverts->next->next->x);
HXDLIN(1211)													_this1->localCOMy = (_this1->localCOMy + _this1->lverts->next->next->y);
            												}
HXDLIN(1211)												{
HXLINE(1211)													_this1->localCOMx = (_this1->localCOMx * ((Float)0.5));
HXDLIN(1211)													_this1->localCOMy = (_this1->localCOMy * ((Float)0.5));
            												}
            											}
            											else {
HXLINE(1211)												{
HXLINE(1211)													_this1->localCOMx = (int)0;
HXDLIN(1211)													_this1->localCOMy = (int)0;
            												}
HXDLIN(1211)												HX_VARI( Float,area) = ((Float)0.0);
HXDLIN(1211)												{
HXLINE(1211)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this1->lverts->next;
HXDLIN(1211)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite2;
HXDLIN(1211)													cx_ite2 = cx_ite2->next;
HXDLIN(1211)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite2;
HXDLIN(1211)													cx_ite2 = cx_ite2->next;
HXDLIN(1211)													while(hx::IsNotNull( cx_ite2 )){
HXLINE(1211)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite2;
HXDLIN(1211)														{
HXLINE(1211)															area = (area + (v1->x * (w->y - u->y)));
HXDLIN(1211)															HX_VARI( Float,cf) = ((w->y * v1->x) - (w->x * v1->y));
HXDLIN(1211)															_this1->localCOMx = (_this1->localCOMx + ((v1->x + w->x) * cf));
HXDLIN(1211)															_this1->localCOMy = (_this1->localCOMy + ((v1->y + w->y) * cf));
            														}
HXDLIN(1211)														u = v1;
HXDLIN(1211)														v1 = w;
HXDLIN(1211)														cx_ite2 = cx_ite2->next;
            													}
HXDLIN(1211)													cx_ite2 = _this1->lverts->next;
HXDLIN(1211)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite2;
HXDLIN(1211)													{
HXLINE(1211)														area = (area + (v1->x * (w1->y - u->y)));
HXDLIN(1211)														HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v1->x) - (w1->x * v1->y));
HXDLIN(1211)														_this1->localCOMx = (_this1->localCOMx + ((v1->x + w1->x) * cf1));
HXDLIN(1211)														_this1->localCOMy = (_this1->localCOMy + ((v1->y + w1->y) * cf1));
            													}
HXDLIN(1211)													u = v1;
HXDLIN(1211)													cx_ite2 = cx_ite2->next;
HXDLIN(1211)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite2;
HXDLIN(1211)													{
HXLINE(1211)														area = (area + (w1->x * (w2->y - u->y)));
HXDLIN(1211)														HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN(1211)														_this1->localCOMx = (_this1->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN(1211)														_this1->localCOMy = (_this1->localCOMy + ((w1->y + w2->y) * cf2));
            													}
            												}
HXDLIN(1211)												area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN(1211)												{
HXLINE(1211)													HX_VARI( Float,t) = area;
HXDLIN(1211)													_this1->localCOMx = (_this1->localCOMx * t);
HXDLIN(1211)													_this1->localCOMy = (_this1->localCOMy * t);
            												}
            											}
            										}
            									}
HXDLIN(1211)									if (hx::IsNotNull( _this->wrap_localCOM )) {
HXLINE(1211)										_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
HXDLIN(1211)										_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
            									}
            								}
HXDLIN(1211)								{
HXLINE(1211)									HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN(1211)									if (_this2->zip_axis) {
HXLINE(1211)										_this2->zip_axis = false;
HXDLIN(1211)										{
HXLINE(1211)											_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN(1211)											_this2->axisy = ::Math_obj::cos(_this2->rot);
            										}
            									}
            								}
HXDLIN(1211)								{
HXLINE(1211)									_this->worldCOMx = (_this->body->posx + ((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy)));
HXDLIN(1211)									_this->worldCOMy = (_this->body->posy + ((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy)));
            								}
            							}
            						}
            					}
HXLINE(1212)					{
HXLINE(1212)						arb->overlap = s2->polygon->area;
HXDLIN(1212)						{
HXLINE(1212)							arb->centroidx = s2->polygon->worldCOMx;
HXDLIN(1212)							arb->centroidy = s2->polygon->worldCOMy;
            						}
            					}
HXLINE(1173)					return true;
            				}
            				else {
HXLINE(1215)					if (cont) {
HXLINE(1216)						total = true;
HXLINE(1217)						{
HXLINE(1218)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite3,"cx_ite") = s2->polygon->edges->head;
HXLINE(1219)							while(hx::IsNotNull( cx_ite3 )){
HXLINE(1220)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,ax1,"ax") = cx_ite3->elt;
HXLINE(1221)								{
HXLINE(1222)									HX_VARI_NAME( Float,min1,"min") = ((Float)1e100);
HXLINE(1223)									HX_VARI_NAME( int,ind1,"ind") = (int)0;
HXLINE(1224)									{
HXLINE(1225)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = s1->polygon->gverts->next;
HXLINE(1226)										while(hx::IsNotNull( cx_ite4 )){
HXLINE(1227)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v2,"v") = cx_ite4;
HXLINE(1228)											{
HXLINE(1229)												HX_VARI_NAME( Float,k1,"k") = ((ax1->gnormx * v2->x) + (ax1->gnormy * v2->y));
HXLINE(1230)												if ((k1 < min1)) {
HXLINE(1230)													min1 = k1;
            												}
HXLINE(1231)												if ((k1 >= (ax1->gprojection + ::nape::Config_obj::epsilon))) {
HXLINE(1232)													out1[ind1] = true;
HXLINE(1233)													total = false;
            												}
HXLINE(1235)												ind1 = (ind1 + (int)1);
            											}
HXLINE(1237)											cx_ite4 = cx_ite4->next;
            										}
            									}
HXLINE(1240)									min1 = (min1 - ax1->gprojection);
HXLINE(1241)									if ((min1 > (int)0)) {
HXLINE(1242)										cont = false;
HXLINE(1243)										goto _hx_goto_41;
            									}
            								}
HXLINE(1246)								cx_ite3 = cx_ite3->next;
            							}
            							_hx_goto_41:;
            						}
HXLINE(1249)						if (total) {
HXLINE(1250)							{
HXLINE(1250)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this3,"_this") = s1->polygon;
HXDLIN(1250)								if (_this3->zip_worldCOM) {
HXLINE(1250)									if (hx::IsNotNull( _this3->body )) {
HXLINE(1250)										_this3->zip_worldCOM = false;
HXDLIN(1250)										if (_this3->zip_localCOM) {
HXLINE(1250)											_this3->zip_localCOM = false;
HXDLIN(1250)											if ((_this3->type == (int)1)) {
HXLINE(1250)												HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this4,"_this") = _this3->polygon;
HXDLIN(1250)												if (hx::IsNull( _this4->lverts->next->next )) {
HXLINE(1250)													_this4->localCOMx = _this4->lverts->next->x;
HXDLIN(1250)													_this4->localCOMy = _this4->lverts->next->y;
            												}
            												else {
HXLINE(1250)													if (hx::IsNull( _this4->lverts->next->next->next )) {
HXLINE(1250)														{
HXLINE(1250)															_this4->localCOMx = _this4->lverts->next->x;
HXDLIN(1250)															_this4->localCOMy = _this4->lverts->next->y;
            														}
HXDLIN(1250)														{
HXLINE(1250)															_this4->localCOMx = (_this4->localCOMx + _this4->lverts->next->next->x);
HXDLIN(1250)															_this4->localCOMy = (_this4->localCOMy + _this4->lverts->next->next->y);
            														}
HXDLIN(1250)														{
HXLINE(1250)															_this4->localCOMx = (_this4->localCOMx * ((Float)0.5));
HXDLIN(1250)															_this4->localCOMy = (_this4->localCOMy * ((Float)0.5));
            														}
            													}
            													else {
HXLINE(1250)														{
HXLINE(1250)															_this4->localCOMx = (int)0;
HXDLIN(1250)															_this4->localCOMy = (int)0;
            														}
HXDLIN(1250)														HX_VARI_NAME( Float,area1,"area") = ((Float)0.0);
HXDLIN(1250)														{
HXLINE(1250)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite5,"cx_ite") = _this4->lverts->next;
HXDLIN(1250)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u1,"u") = cx_ite5;
HXDLIN(1250)															cx_ite5 = cx_ite5->next;
HXDLIN(1250)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v3,"v") = cx_ite5;
HXDLIN(1250)															cx_ite5 = cx_ite5->next;
HXDLIN(1250)															while(hx::IsNotNull( cx_ite5 )){
HXLINE(1250)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w3,"w") = cx_ite5;
HXDLIN(1250)																{
HXLINE(1250)																	area1 = (area1 + (v3->x * (w3->y - u1->y)));
HXDLIN(1250)																	HX_VARI_NAME( Float,cf3,"cf") = ((w3->y * v3->x) - (w3->x * v3->y));
HXDLIN(1250)																	_this4->localCOMx = (_this4->localCOMx + ((v3->x + w3->x) * cf3));
HXDLIN(1250)																	_this4->localCOMy = (_this4->localCOMy + ((v3->y + w3->y) * cf3));
            																}
HXDLIN(1250)																u1 = v3;
HXDLIN(1250)																v3 = w3;
HXDLIN(1250)																cx_ite5 = cx_ite5->next;
            															}
HXDLIN(1250)															cx_ite5 = _this4->lverts->next;
HXDLIN(1250)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w4,"w") = cx_ite5;
HXDLIN(1250)															{
HXLINE(1250)																area1 = (area1 + (v3->x * (w4->y - u1->y)));
HXDLIN(1250)																HX_VARI_NAME( Float,cf4,"cf") = ((w4->y * v3->x) - (w4->x * v3->y));
HXDLIN(1250)																_this4->localCOMx = (_this4->localCOMx + ((v3->x + w4->x) * cf4));
HXDLIN(1250)																_this4->localCOMy = (_this4->localCOMy + ((v3->y + w4->y) * cf4));
            															}
HXDLIN(1250)															u1 = v3;
HXDLIN(1250)															cx_ite5 = cx_ite5->next;
HXDLIN(1250)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w5,"w") = cx_ite5;
HXDLIN(1250)															{
HXLINE(1250)																area1 = (area1 + (w4->x * (w5->y - u1->y)));
HXDLIN(1250)																HX_VARI_NAME( Float,cf5,"cf") = ((w5->y * w4->x) - (w5->x * w4->y));
HXDLIN(1250)																_this4->localCOMx = (_this4->localCOMx + ((w4->x + w5->x) * cf5));
HXDLIN(1250)																_this4->localCOMy = (_this4->localCOMy + ((w4->y + w5->y) * cf5));
            															}
            														}
HXDLIN(1250)														area1 = ((Float)(int)1 / (Float)((int)3 * area1));
HXDLIN(1250)														{
HXLINE(1250)															HX_VARI_NAME( Float,t1,"t") = area1;
HXDLIN(1250)															_this4->localCOMx = (_this4->localCOMx * t1);
HXDLIN(1250)															_this4->localCOMy = (_this4->localCOMy * t1);
            														}
            													}
            												}
            											}
HXDLIN(1250)											if (hx::IsNotNull( _this3->wrap_localCOM )) {
HXLINE(1250)												_this3->wrap_localCOM->zpp_inner->x = _this3->localCOMx;
HXDLIN(1250)												_this3->wrap_localCOM->zpp_inner->y = _this3->localCOMy;
            											}
            										}
HXDLIN(1250)										{
HXLINE(1250)											HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this5,"_this") = _this3->body;
HXDLIN(1250)											if (_this5->zip_axis) {
HXLINE(1250)												_this5->zip_axis = false;
HXDLIN(1250)												{
HXLINE(1250)													_this5->axisx = ::Math_obj::sin(_this5->rot);
HXDLIN(1250)													_this5->axisy = ::Math_obj::cos(_this5->rot);
            												}
            											}
            										}
HXDLIN(1250)										{
HXLINE(1250)											_this3->worldCOMx = (_this3->body->posx + ((_this3->body->axisy * _this3->localCOMx) - (_this3->body->axisx * _this3->localCOMy)));
HXDLIN(1250)											_this3->worldCOMy = (_this3->body->posy + ((_this3->localCOMx * _this3->body->axisx) + (_this3->localCOMy * _this3->body->axisy)));
            										}
            									}
            								}
            							}
HXLINE(1251)							{
HXLINE(1251)								arb->overlap = s1->polygon->area;
HXDLIN(1251)								{
HXLINE(1251)									arb->centroidx = s1->polygon->worldCOMx;
HXDLIN(1251)									arb->centroidy = s1->polygon->worldCOMy;
            								}
            							}
HXLINE(1173)							return true;
            						}
            						else {
HXLINE(1254)							if (cont) {
HXLINE(1255)								while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head )){
HXLINE(1256)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->pop_unsafe();
HXLINE(1257)									if (!(p->_inuse)) {
HXLINE(1267)										{
HXLINE(1267)											if (hx::IsNotNull( p->outer )) {
HXLINE(1267)												p->outer->zpp_inner = null();
HXDLIN(1267)												p->outer = null();
            											}
HXDLIN(1267)											p->_isimmutable = null();
HXDLIN(1267)											p->_validate = null();
HXDLIN(1267)											p->_invalidate = null();
            										}
HXLINE(1268)										p->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE(1269)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = p;
            									}
            								}
HXLINE(1275)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,fst_vert) = null();
HXLINE(1276)								HX_VARI( bool,poly1) = false;
HXLINE(1277)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ite1) = s1->polygon->gverts->next;
HXLINE(1278)								HX_VARI_NAME( int,ind11,"ind1") = (int)0;
HXLINE(1279)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ite2) = s2->polygon->gverts->next;
HXLINE(1280)								HX_VARI( int,ind2) = (int)0;
HXLINE(1281)								{
HXLINE(1281)									HX_VARI( int,_g1) = (int)0;
HXDLIN(1281)									HX_VARI( int,_g) = s2->polygon->edgeCnt;
HXDLIN(1281)									while((_g1 < _g)){
HXLINE(1281)										_g1 = (_g1 + (int)1);
HXDLIN(1281)										HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(1281)										if (!(out2->__get(i))) {
HXLINE(1282)											ind2 = i;
HXLINE(1283)											goto _hx_goto_45;
            										}
            										else {
HXLINE(1285)											ite2 = ite2->next;
            										}
            									}
            									_hx_goto_45:;
            								}
HXLINE(1286)								if (hx::IsNull( ite2 )) {
HXLINE(1287)									ite2 = s2->polygon->gverts->next;
HXLINE(1288)									poly1 = true;
HXLINE(1289)									{
HXLINE(1289)										HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN(1289)										HX_VARI_NAME( int,_g2,"_g") = s1->polygon->edgeCnt;
HXDLIN(1289)										while((_g11 < _g2)){
HXLINE(1289)											_g11 = (_g11 + (int)1);
HXDLIN(1289)											HX_VARI_NAME( int,i1,"i") = (_g11 - (int)1);
HXDLIN(1289)											if (!(out1->__get(i1))) {
HXLINE(1290)												ind11 = i1;
HXLINE(1291)												goto _hx_goto_46;
            											}
            											else {
HXLINE(1293)												ite1 = ite1->next;
            											}
            										}
            										_hx_goto_46:;
            									}
HXLINE(1294)									if (hx::IsNull( ite1 )) {
HXLINE(1294)										ite1 = s1->polygon->gverts->next;
            									}
            									else {
HXLINE(1296)										::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ite1);
HXLINE(1297)										fst_vert = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            									}
            								}
            								else {
HXLINE(1301)									::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ite2);
HXLINE(1302)									fst_vert = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            								}
HXLINE(1304)								HX_VARI( int,cnt) = (int)1;
HXLINE(1305)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head )) {
HXLINE(1306)									{
HXLINE(1307)										HX_VARI( bool,cx_cont) = true;
HXLINE(1308)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_itei) = s1->polygon->gverts->next;
HXLINE(1309)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u2,"u") = cx_itei;
HXLINE(1310)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_itej) = cx_itei->next;
HXLINE(1311)										while(hx::IsNotNull( cx_itej )){
HXLINE(1312)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v4,"v") = cx_itej;
HXLINE(1313)											{
HXLINE(1314)												HX_VARI_NAME( Float,min2,"min") = ((Float)2.0);
HXLINE(1315)												{
HXLINE(1317)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_itei1,"cx_itei") = s2->polygon->gverts->next;
HXLINE(1318)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,a) = cx_itei1;
HXLINE(1319)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_itej1,"cx_itej") = cx_itei1->next;
HXLINE(1320)													while(hx::IsNotNull( cx_itej1 )){
HXLINE(1321)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,b) = cx_itej1;
HXLINE(1322)														{
HXLINE(1323)															HX_VARI_NAME( Float,t2,"t") = ((Float)0.0);
HXLINE(1325)															HX_VARI( Float,_sx) = ((Float)0.0);
HXLINE(1326)															HX_VARI( Float,_sy) = ((Float)0.0);
HXLINE(1327)															{
HXLINE(1328)																_sx = (u2->x - a->x);
HXLINE(1329)																_sy = (u2->y - a->y);
            															}
HXLINE(1331)															HX_VARI( Float,_vx) = ((Float)0.0);
HXLINE(1332)															HX_VARI( Float,_vy) = ((Float)0.0);
HXLINE(1333)															{
HXLINE(1334)																_vx = (v4->x - u2->x);
HXLINE(1335)																_vy = (v4->y - u2->y);
            															}
HXLINE(1337)															HX_VARI( Float,_qx) = ((Float)0.0);
HXLINE(1338)															HX_VARI( Float,_qy) = ((Float)0.0);
HXLINE(1339)															{
HXLINE(1340)																_qx = (b->x - a->x);
HXLINE(1341)																_qy = (b->y - a->y);
            															}
HXLINE(1343)															HX_VARI( Float,den) = ((_vy * _qx) - (_vx * _qy));
HXLINE(1324)															bool _hx_tmp;
HXLINE(1344)															if (((den * den) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1345)																den = ((Float)(int)1 / (Float)den);
HXLINE(1346)																HX_VARI( Float,txx) = (((_qy * _sx) - (_qx * _sy)) * den);
HXLINE(1347)																bool _hx_tmp1;
HXDLIN(1347)																if ((txx > ::nape::Config_obj::epsilon)) {
HXLINE(1347)																	_hx_tmp1 = (txx < ((int)1 - ::nape::Config_obj::epsilon));
            																}
            																else {
HXLINE(1347)																	_hx_tmp1 = false;
            																}
HXDLIN(1347)																if (_hx_tmp1) {
HXLINE(1348)																	HX_VARI( Float,sxx) = (((_vy * _sx) - (_vx * _sy)) * den);
HXLINE(1349)																	bool _hx_tmp2;
HXDLIN(1349)																	if ((sxx > ::nape::Config_obj::epsilon)) {
HXLINE(1349)																		_hx_tmp2 = (sxx < ((int)1 - ::nape::Config_obj::epsilon));
            																	}
            																	else {
HXLINE(1349)																		_hx_tmp2 = false;
            																	}
HXDLIN(1349)																	if (_hx_tmp2) {
HXLINE(1350)																		t2 = txx;
HXLINE(1324)																		_hx_tmp = true;
            																	}
            																	else {
HXLINE(1324)																		_hx_tmp = false;
            																	}
            																}
            																else {
HXLINE(1324)																	_hx_tmp = false;
            																}
            															}
            															else {
HXLINE(1324)																_hx_tmp = false;
            															}
HXDLIN(1324)															if (_hx_tmp) {
HXLINE(1359)																if ((t2 < min2)) {
HXLINE(1360)																	min2 = t2;
HXLINE(1361)																	ite2 = cx_itei1;
            																}
            															}
            														}
HXLINE(1365)														{
HXLINE(1366)															cx_itei1 = cx_itej1;
HXLINE(1367)															a = b;
HXLINE(1368)															cx_itej1 = cx_itej1->next;
            														}
            													}
HXLINE(1372)													while(true){
HXLINE(1373)														cx_itej1 = s2->polygon->gverts->next;
HXLINE(1374)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,b1,"b") = cx_itej1;
HXLINE(1375)														{
HXLINE(1376)															HX_VARI_NAME( Float,t3,"t") = ((Float)0.0);
HXLINE(1378)															HX_VARI_NAME( Float,_sx1,"_sx") = ((Float)0.0);
HXLINE(1379)															HX_VARI_NAME( Float,_sy1,"_sy") = ((Float)0.0);
HXLINE(1380)															{
HXLINE(1381)																_sx1 = (u2->x - a->x);
HXLINE(1382)																_sy1 = (u2->y - a->y);
            															}
HXLINE(1384)															HX_VARI_NAME( Float,_vx1,"_vx") = ((Float)0.0);
HXLINE(1385)															HX_VARI_NAME( Float,_vy1,"_vy") = ((Float)0.0);
HXLINE(1386)															{
HXLINE(1387)																_vx1 = (v4->x - u2->x);
HXLINE(1388)																_vy1 = (v4->y - u2->y);
            															}
HXLINE(1390)															HX_VARI_NAME( Float,_qx1,"_qx") = ((Float)0.0);
HXLINE(1391)															HX_VARI_NAME( Float,_qy1,"_qy") = ((Float)0.0);
HXLINE(1392)															{
HXLINE(1393)																_qx1 = (b1->x - a->x);
HXLINE(1394)																_qy1 = (b1->y - a->y);
            															}
HXLINE(1396)															HX_VARI_NAME( Float,den1,"den") = ((_vy1 * _qx1) - (_vx1 * _qy1));
HXLINE(1377)															bool _hx_tmp3;
HXLINE(1397)															if (((den1 * den1) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1398)																den1 = ((Float)(int)1 / (Float)den1);
HXLINE(1399)																HX_VARI_NAME( Float,txx1,"txx") = (((_qy1 * _sx1) - (_qx1 * _sy1)) * den1);
HXLINE(1400)																bool _hx_tmp4;
HXDLIN(1400)																if ((txx1 > ::nape::Config_obj::epsilon)) {
HXLINE(1400)																	_hx_tmp4 = (txx1 < ((int)1 - ::nape::Config_obj::epsilon));
            																}
            																else {
HXLINE(1400)																	_hx_tmp4 = false;
            																}
HXDLIN(1400)																if (_hx_tmp4) {
HXLINE(1401)																	HX_VARI_NAME( Float,sxx1,"sxx") = (((_vy1 * _sx1) - (_vx1 * _sy1)) * den1);
HXLINE(1402)																	bool _hx_tmp5;
HXDLIN(1402)																	if ((sxx1 > ::nape::Config_obj::epsilon)) {
HXLINE(1402)																		_hx_tmp5 = (sxx1 < ((int)1 - ::nape::Config_obj::epsilon));
            																	}
            																	else {
HXLINE(1402)																		_hx_tmp5 = false;
            																	}
HXDLIN(1402)																	if (_hx_tmp5) {
HXLINE(1403)																		t3 = txx1;
HXLINE(1377)																		_hx_tmp3 = true;
            																	}
            																	else {
HXLINE(1377)																		_hx_tmp3 = false;
            																	}
            																}
            																else {
HXLINE(1377)																	_hx_tmp3 = false;
            																}
            															}
            															else {
HXLINE(1377)																_hx_tmp3 = false;
            															}
HXDLIN(1377)															if (_hx_tmp3) {
HXLINE(1412)																if ((t3 < min2)) {
HXLINE(1413)																	min2 = t3;
HXLINE(1414)																	ite2 = cx_itei1;
            																}
            															}
            														}
HXLINE(1372)														goto _hx_goto_49;
            													}
            													_hx_goto_49:;
            												}
HXLINE(1422)												if ((min2 != ((Float)2.0))) {
HXLINE(1423)													HX_VARI( Float,cx) = ((Float)0.0);
HXLINE(1424)													HX_VARI( Float,cy) = ((Float)0.0);
HXLINE(1425)													{
HXLINE(1426)														HX_VARI( Float,T) = min2;
HXLINE(1435)														cx = (u2->x + ((v4->x - u2->x) * T));
HXLINE(1436)														cy = (u2->y + ((v4->y - u2->y) * T));
            													}
HXLINE(1438)													HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,ret);
HXDLIN(1438)													{
HXLINE(1438)														if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1438)															ret =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            														}
            														else {
HXLINE(1438)															ret = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1438)															::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret->next;
HXDLIN(1438)															ret->next = null();
            														}
HXDLIN(1438)														ret->weak = false;
            													}
HXDLIN(1438)													ret->_immutable = false;
HXDLIN(1438)													{
HXLINE(1438)														ret->x = cx;
HXDLIN(1438)														ret->y = cy;
            													}
HXDLIN(1438)													fst_vert = ret;
HXLINE(1439)													::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(fst_vert);
HXLINE(1440)													poly1 = true;
HXLINE(1441)													ite1 = cx_itei;
HXLINE(1443)													cx_cont = false;
HXLINE(1444)													goto _hx_goto_47;
            												}
            											}
HXLINE(1448)											{
HXLINE(1449)												cx_itei = cx_itej;
HXLINE(1450)												u2 = v4;
HXLINE(1451)												cx_itej = cx_itej->next;
            											}
            										}
            										_hx_goto_47:;
HXLINE(1454)										if (cx_cont) {
HXLINE(1455)											while(true){
HXLINE(1456)												cx_itej = s1->polygon->gverts->next;
HXLINE(1457)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v5,"v") = cx_itej;
HXLINE(1458)												{
HXLINE(1459)													HX_VARI_NAME( Float,min3,"min") = ((Float)2.0);
HXLINE(1460)													{
HXLINE(1462)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_itei2,"cx_itei") = s2->polygon->gverts->next;
HXLINE(1463)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,a1,"a") = cx_itei2;
HXLINE(1464)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_itej2,"cx_itej") = cx_itei2->next;
HXLINE(1465)														while(hx::IsNotNull( cx_itej2 )){
HXLINE(1466)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,b2,"b") = cx_itej2;
HXLINE(1467)															{
HXLINE(1468)																HX_VARI_NAME( Float,t4,"t") = ((Float)0.0);
HXLINE(1470)																HX_VARI_NAME( Float,_sx2,"_sx") = ((Float)0.0);
HXLINE(1471)																HX_VARI_NAME( Float,_sy2,"_sy") = ((Float)0.0);
HXLINE(1472)																{
HXLINE(1473)																	_sx2 = (u2->x - a1->x);
HXLINE(1474)																	_sy2 = (u2->y - a1->y);
            																}
HXLINE(1476)																HX_VARI_NAME( Float,_vx2,"_vx") = ((Float)0.0);
HXLINE(1477)																HX_VARI_NAME( Float,_vy2,"_vy") = ((Float)0.0);
HXLINE(1478)																{
HXLINE(1479)																	_vx2 = (v5->x - u2->x);
HXLINE(1480)																	_vy2 = (v5->y - u2->y);
            																}
HXLINE(1482)																HX_VARI_NAME( Float,_qx2,"_qx") = ((Float)0.0);
HXLINE(1483)																HX_VARI_NAME( Float,_qy2,"_qy") = ((Float)0.0);
HXLINE(1484)																{
HXLINE(1485)																	_qx2 = (b2->x - a1->x);
HXLINE(1486)																	_qy2 = (b2->y - a1->y);
            																}
HXLINE(1488)																HX_VARI_NAME( Float,den2,"den") = ((_vy2 * _qx2) - (_vx2 * _qy2));
HXLINE(1469)																bool _hx_tmp6;
HXLINE(1489)																if (((den2 * den2) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1490)																	den2 = ((Float)(int)1 / (Float)den2);
HXLINE(1491)																	HX_VARI_NAME( Float,txx2,"txx") = (((_qy2 * _sx2) - (_qx2 * _sy2)) * den2);
HXLINE(1492)																	bool _hx_tmp7;
HXDLIN(1492)																	if ((txx2 > ::nape::Config_obj::epsilon)) {
HXLINE(1492)																		_hx_tmp7 = (txx2 < ((int)1 - ::nape::Config_obj::epsilon));
            																	}
            																	else {
HXLINE(1492)																		_hx_tmp7 = false;
            																	}
HXDLIN(1492)																	if (_hx_tmp7) {
HXLINE(1493)																		HX_VARI_NAME( Float,sxx2,"sxx") = (((_vy2 * _sx2) - (_vx2 * _sy2)) * den2);
HXLINE(1494)																		bool _hx_tmp8;
HXDLIN(1494)																		if ((sxx2 > ::nape::Config_obj::epsilon)) {
HXLINE(1494)																			_hx_tmp8 = (sxx2 < ((int)1 - ::nape::Config_obj::epsilon));
            																		}
            																		else {
HXLINE(1494)																			_hx_tmp8 = false;
            																		}
HXDLIN(1494)																		if (_hx_tmp8) {
HXLINE(1495)																			t4 = txx2;
HXLINE(1469)																			_hx_tmp6 = true;
            																		}
            																		else {
HXLINE(1469)																			_hx_tmp6 = false;
            																		}
            																	}
            																	else {
HXLINE(1469)																		_hx_tmp6 = false;
            																	}
            																}
            																else {
HXLINE(1469)																	_hx_tmp6 = false;
            																}
HXDLIN(1469)																if (_hx_tmp6) {
HXLINE(1504)																	if ((t4 < min3)) {
HXLINE(1505)																		min3 = t4;
HXLINE(1506)																		ite2 = cx_itei2;
            																	}
            																}
            															}
HXLINE(1510)															{
HXLINE(1511)																cx_itei2 = cx_itej2;
HXLINE(1512)																a1 = b2;
HXLINE(1513)																cx_itej2 = cx_itej2->next;
            															}
            														}
HXLINE(1517)														while(true){
HXLINE(1518)															cx_itej2 = s2->polygon->gverts->next;
HXLINE(1519)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,b3,"b") = cx_itej2;
HXLINE(1520)															{
HXLINE(1521)																HX_VARI_NAME( Float,t5,"t") = ((Float)0.0);
HXLINE(1523)																HX_VARI_NAME( Float,_sx3,"_sx") = ((Float)0.0);
HXLINE(1524)																HX_VARI_NAME( Float,_sy3,"_sy") = ((Float)0.0);
HXLINE(1525)																{
HXLINE(1526)																	_sx3 = (u2->x - a1->x);
HXLINE(1527)																	_sy3 = (u2->y - a1->y);
            																}
HXLINE(1529)																HX_VARI_NAME( Float,_vx3,"_vx") = ((Float)0.0);
HXLINE(1530)																HX_VARI_NAME( Float,_vy3,"_vy") = ((Float)0.0);
HXLINE(1531)																{
HXLINE(1532)																	_vx3 = (v5->x - u2->x);
HXLINE(1533)																	_vy3 = (v5->y - u2->y);
            																}
HXLINE(1535)																HX_VARI_NAME( Float,_qx3,"_qx") = ((Float)0.0);
HXLINE(1536)																HX_VARI_NAME( Float,_qy3,"_qy") = ((Float)0.0);
HXLINE(1537)																{
HXLINE(1538)																	_qx3 = (b3->x - a1->x);
HXLINE(1539)																	_qy3 = (b3->y - a1->y);
            																}
HXLINE(1541)																HX_VARI_NAME( Float,den3,"den") = ((_vy3 * _qx3) - (_vx3 * _qy3));
HXLINE(1522)																bool _hx_tmp9;
HXLINE(1542)																if (((den3 * den3) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1543)																	den3 = ((Float)(int)1 / (Float)den3);
HXLINE(1544)																	HX_VARI_NAME( Float,txx3,"txx") = (((_qy3 * _sx3) - (_qx3 * _sy3)) * den3);
HXLINE(1545)																	bool _hx_tmp10;
HXDLIN(1545)																	if ((txx3 > ::nape::Config_obj::epsilon)) {
HXLINE(1545)																		_hx_tmp10 = (txx3 < ((int)1 - ::nape::Config_obj::epsilon));
            																	}
            																	else {
HXLINE(1545)																		_hx_tmp10 = false;
            																	}
HXDLIN(1545)																	if (_hx_tmp10) {
HXLINE(1546)																		HX_VARI_NAME( Float,sxx3,"sxx") = (((_vy3 * _sx3) - (_vx3 * _sy3)) * den3);
HXLINE(1547)																		bool _hx_tmp11;
HXDLIN(1547)																		if ((sxx3 > ::nape::Config_obj::epsilon)) {
HXLINE(1547)																			_hx_tmp11 = (sxx3 < ((int)1 - ::nape::Config_obj::epsilon));
            																		}
            																		else {
HXLINE(1547)																			_hx_tmp11 = false;
            																		}
HXDLIN(1547)																		if (_hx_tmp11) {
HXLINE(1548)																			t5 = txx3;
HXLINE(1522)																			_hx_tmp9 = true;
            																		}
            																		else {
HXLINE(1522)																			_hx_tmp9 = false;
            																		}
            																	}
            																	else {
HXLINE(1522)																		_hx_tmp9 = false;
            																	}
            																}
            																else {
HXLINE(1522)																	_hx_tmp9 = false;
            																}
HXDLIN(1522)																if (_hx_tmp9) {
HXLINE(1557)																	if ((t5 < min3)) {
HXLINE(1558)																		min3 = t5;
HXLINE(1559)																		ite2 = cx_itei2;
            																	}
            																}
            															}
HXLINE(1517)															goto _hx_goto_52;
            														}
            														_hx_goto_52:;
            													}
HXLINE(1567)													if ((min3 != ((Float)2.0))) {
HXLINE(1568)														HX_VARI_NAME( Float,cx1,"cx") = ((Float)0.0);
HXLINE(1569)														HX_VARI_NAME( Float,cy1,"cy") = ((Float)0.0);
HXLINE(1570)														{
HXLINE(1571)															HX_VARI_NAME( Float,T1,"T") = min3;
HXLINE(1580)															cx1 = (u2->x + ((v5->x - u2->x) * T1));
HXLINE(1581)															cy1 = (u2->y + ((v5->y - u2->y) * T1));
            														}
HXLINE(1583)														HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1583)														{
HXLINE(1583)															if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1583)																ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            															}
            															else {
HXLINE(1583)																ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1583)																::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1583)																ret1->next = null();
            															}
HXDLIN(1583)															ret1->weak = false;
            														}
HXDLIN(1583)														ret1->_immutable = false;
HXDLIN(1583)														{
HXLINE(1583)															ret1->x = cx1;
HXDLIN(1583)															ret1->y = cy1;
            														}
HXDLIN(1583)														fst_vert = ret1;
HXLINE(1584)														::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(fst_vert);
HXLINE(1585)														poly1 = true;
HXLINE(1586)														ite1 = cx_itei;
HXLINE(1587)														goto _hx_goto_50;
            													}
            												}
HXLINE(1455)												goto _hx_goto_50;
            											}
            											_hx_goto_50:;
            										}
            									}
HXLINE(1594)									cnt = (int)2;
            								}
HXLINE(1596)								while(true){
HXLINE(1597)									if (poly1) {
HXLINE(1598)										ite1 = ite1->next;
HXLINE(1599)										ind11 = (ind11 + (int)1);
HXLINE(1600)										if (hx::IsNull( ite1 )) {
HXLINE(1601)											ite1 = s1->polygon->gverts->next;
HXLINE(1602)											ind11 = (int)0;
            										}
HXLINE(1604)										if (!(out1->__get(ind11))) {
HXLINE(1605)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,ex) = ite1;
HXLINE(1606)											bool _hx_tmp12;
HXDLIN(1606)											if (hx::IsNotNull( fst_vert )) {
HXLINE(1606)												HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN(1606)												HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN(1606)												{
HXLINE(1606)													dx = (ex->x - fst_vert->x);
HXDLIN(1606)													dy = (ex->y - fst_vert->y);
            												}
HXDLIN(1606)												_hx_tmp12 = (((dx * dx) + (dy * dy)) < ::nape::Config_obj::epsilon);
            											}
            											else {
HXLINE(1606)												_hx_tmp12 = false;
            											}
HXDLIN(1606)											if (_hx_tmp12) {
HXLINE(1606)												goto _hx_goto_53;
            											}
HXLINE(1607)											::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ex);
HXLINE(1608)											if (hx::IsNull( fst_vert )) {
HXLINE(1608)												fst_vert = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            											}
HXLINE(1609)											cnt = (int)1;
            										}
            										else {
HXLINE(1612)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,a2,"a") = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
HXLINE(1613)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,b4,"b") = ite1;
HXLINE(1614)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u3,"u") = ite2;
HXLINE(1615)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,itm) = ite2->next;
HXLINE(1616)											if (hx::IsNull( itm )) {
HXLINE(1616)												itm = s2->polygon->gverts->next;
            											}
HXLINE(1617)											HX_VARI( Float,max) = ((Float)-1.0);
HXLINE(1618)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,itmo) = null();
HXLINE(1619)											HX_VARI( int,indo) = (int)0;
HXLINE(1620)											HX_VARI( int,icnt) = (int)0;
HXLINE(1621)											{
HXLINE(1622)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,beg_ite) = itm;
HXLINE(1623)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite6,"cx_ite") = itm;
HXLINE(1624)												while(true){
HXLINE(1625)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v6,"v") = cx_ite6;
HXLINE(1626)													{
HXLINE(1627)														HX_VARI_NAME( Float,t6,"t") = ((Float)0.0);
HXLINE(1629)														HX_VARI_NAME( Float,_sx4,"_sx") = ((Float)0.0);
HXLINE(1630)														HX_VARI_NAME( Float,_sy4,"_sy") = ((Float)0.0);
HXLINE(1631)														{
HXLINE(1632)															_sx4 = (u3->x - a2->x);
HXLINE(1633)															_sy4 = (u3->y - a2->y);
            														}
HXLINE(1635)														HX_VARI_NAME( Float,_vx4,"_vx") = ((Float)0.0);
HXLINE(1636)														HX_VARI_NAME( Float,_vy4,"_vy") = ((Float)0.0);
HXLINE(1637)														{
HXLINE(1638)															_vx4 = (v6->x - u3->x);
HXLINE(1639)															_vy4 = (v6->y - u3->y);
            														}
HXLINE(1641)														HX_VARI_NAME( Float,_qx4,"_qx") = ((Float)0.0);
HXLINE(1642)														HX_VARI_NAME( Float,_qy4,"_qy") = ((Float)0.0);
HXLINE(1643)														{
HXLINE(1644)															_qx4 = (b4->x - a2->x);
HXLINE(1645)															_qy4 = (b4->y - a2->y);
            														}
HXLINE(1647)														HX_VARI_NAME( Float,den4,"den") = ((_vy4 * _qx4) - (_vx4 * _qy4));
HXLINE(1628)														bool _hx_tmp13;
HXLINE(1648)														if (((den4 * den4) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1649)															den4 = ((Float)(int)1 / (Float)den4);
HXLINE(1650)															HX_VARI_NAME( Float,txx4,"txx") = (((_qy4 * _sx4) - (_qx4 * _sy4)) * den4);
HXLINE(1651)															bool _hx_tmp14;
HXDLIN(1651)															if ((txx4 > ::nape::Config_obj::epsilon)) {
HXLINE(1651)																_hx_tmp14 = (txx4 < ((int)1 - ::nape::Config_obj::epsilon));
            															}
            															else {
HXLINE(1651)																_hx_tmp14 = false;
            															}
HXDLIN(1651)															if (_hx_tmp14) {
HXLINE(1652)																HX_VARI_NAME( Float,sxx4,"sxx") = (((_vy4 * _sx4) - (_vx4 * _sy4)) * den4);
HXLINE(1653)																bool _hx_tmp15;
HXDLIN(1653)																if ((sxx4 > ::nape::Config_obj::epsilon)) {
HXLINE(1653)																	_hx_tmp15 = (sxx4 < ((int)1 - ::nape::Config_obj::epsilon));
            																}
            																else {
HXLINE(1653)																	_hx_tmp15 = false;
            																}
HXDLIN(1653)																if (_hx_tmp15) {
HXLINE(1654)																	t6 = txx4;
HXLINE(1628)																	_hx_tmp13 = true;
            																}
            																else {
HXLINE(1628)																	_hx_tmp13 = false;
            																}
            															}
            															else {
HXLINE(1628)																_hx_tmp13 = false;
            															}
            														}
            														else {
HXLINE(1628)															_hx_tmp13 = false;
            														}
HXDLIN(1628)														if (_hx_tmp13) {
HXLINE(1663)															if ((t6 >= ((Float)-1.0))) {
HXLINE(1664)																itmo = ite2;
HXLINE(1665)																indo = ind2;
HXLINE(1666)																icnt = (int)1;
HXDLIN(1666)																if (((int)1 == cnt)) {
HXLINE(1667)																	max = t6;
HXLINE(1669)																	cx_ite6 = beg_ite;
HXLINE(1670)																	goto _hx_goto_54;
            																}
            																else {
HXLINE(1673)																	max = t6;
            																}
            															}
            														}
HXLINE(1676)														u3 = v6;
HXLINE(1677)														ite2 = cx_ite6;
HXLINE(1678)														ind2 = (ind2 + (int)1);
HXLINE(1679)														if ((ind2 >= s2->polygon->edgeCnt)) {
HXLINE(1679)															ind2 = (int)0;
            														}
            													}
HXLINE(1681)													cx_ite6 = cx_ite6->next;
HXLINE(1682)													if (hx::IsNull( cx_ite6 )) {
HXLINE(1682)														cx_ite6 = s2->polygon->gverts->next;
            													}
HXLINE(1624)													goto _hx_goto_54;
            												}
            												_hx_goto_54:;
HXLINE(1685)												while(hx::IsNotEq( cx_ite6,beg_ite )){
HXLINE(1686)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v7,"v") = cx_ite6;
HXLINE(1687)													{
HXLINE(1688)														HX_VARI_NAME( Float,t7,"t") = ((Float)0.0);
HXLINE(1690)														HX_VARI_NAME( Float,_sx5,"_sx") = ((Float)0.0);
HXLINE(1691)														HX_VARI_NAME( Float,_sy5,"_sy") = ((Float)0.0);
HXLINE(1692)														{
HXLINE(1693)															_sx5 = (u3->x - a2->x);
HXLINE(1694)															_sy5 = (u3->y - a2->y);
            														}
HXLINE(1696)														HX_VARI_NAME( Float,_vx5,"_vx") = ((Float)0.0);
HXLINE(1697)														HX_VARI_NAME( Float,_vy5,"_vy") = ((Float)0.0);
HXLINE(1698)														{
HXLINE(1699)															_vx5 = (v7->x - u3->x);
HXLINE(1700)															_vy5 = (v7->y - u3->y);
            														}
HXLINE(1702)														HX_VARI_NAME( Float,_qx5,"_qx") = ((Float)0.0);
HXLINE(1703)														HX_VARI_NAME( Float,_qy5,"_qy") = ((Float)0.0);
HXLINE(1704)														{
HXLINE(1705)															_qx5 = (b4->x - a2->x);
HXLINE(1706)															_qy5 = (b4->y - a2->y);
            														}
HXLINE(1708)														HX_VARI_NAME( Float,den5,"den") = ((_vy5 * _qx5) - (_vx5 * _qy5));
HXLINE(1689)														bool _hx_tmp16;
HXLINE(1709)														if (((den5 * den5) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1710)															den5 = ((Float)(int)1 / (Float)den5);
HXLINE(1711)															HX_VARI_NAME( Float,txx5,"txx") = (((_qy5 * _sx5) - (_qx5 * _sy5)) * den5);
HXLINE(1712)															bool _hx_tmp17;
HXDLIN(1712)															if ((txx5 > ::nape::Config_obj::epsilon)) {
HXLINE(1712)																_hx_tmp17 = (txx5 < ((int)1 - ::nape::Config_obj::epsilon));
            															}
            															else {
HXLINE(1712)																_hx_tmp17 = false;
            															}
HXDLIN(1712)															if (_hx_tmp17) {
HXLINE(1713)																HX_VARI_NAME( Float,sxx5,"sxx") = (((_vy5 * _sx5) - (_vx5 * _sy5)) * den5);
HXLINE(1714)																bool _hx_tmp18;
HXDLIN(1714)																if ((sxx5 > ::nape::Config_obj::epsilon)) {
HXLINE(1714)																	_hx_tmp18 = (sxx5 < ((int)1 - ::nape::Config_obj::epsilon));
            																}
            																else {
HXLINE(1714)																	_hx_tmp18 = false;
            																}
HXDLIN(1714)																if (_hx_tmp18) {
HXLINE(1715)																	t7 = txx5;
HXLINE(1689)																	_hx_tmp16 = true;
            																}
            																else {
HXLINE(1689)																	_hx_tmp16 = false;
            																}
            															}
            															else {
HXLINE(1689)																_hx_tmp16 = false;
            															}
            														}
            														else {
HXLINE(1689)															_hx_tmp16 = false;
            														}
HXDLIN(1689)														if (_hx_tmp16) {
HXLINE(1724)															if ((t7 >= max)) {
HXLINE(1725)																itmo = ite2;
HXLINE(1726)																indo = ind2;
HXLINE(1727)																icnt = (icnt + (int)1);
HXDLIN(1727)																if ((icnt == cnt)) {
HXLINE(1728)																	max = t7;
HXLINE(1731)																	goto _hx_goto_55;
            																}
            																else {
HXLINE(1734)																	max = t7;
            																}
            															}
            														}
HXLINE(1737)														u3 = v7;
HXLINE(1738)														ite2 = cx_ite6;
HXLINE(1739)														ind2 = (ind2 + (int)1);
HXLINE(1740)														if ((ind2 >= s2->polygon->edgeCnt)) {
HXLINE(1740)															ind2 = (int)0;
            														}
            													}
HXLINE(1742)													cx_ite6 = cx_ite6->next;
HXLINE(1743)													if (hx::IsNull( cx_ite6 )) {
HXLINE(1743)														cx_ite6 = s2->polygon->gverts->next;
            													}
            												}
            												_hx_goto_55:;
            											}
HXLINE(1746)											if (hx::IsNull( itmo )) {
HXLINE(1746)												goto _hx_goto_53;
            											}
HXLINE(1747)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u4,"u") = itmo;
HXLINE(1748)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,itm2) = itmo->next;
HXLINE(1749)											if (hx::IsNull( itm2 )) {
HXLINE(1749)												itm2 = s2->polygon->gverts->next;
            											}
HXLINE(1750)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v8,"v") = itm2;
HXLINE(1751)											HX_VARI_NAME( Float,cx2,"cx") = ((Float)0.0);
HXLINE(1752)											HX_VARI_NAME( Float,cy2,"cy") = ((Float)0.0);
HXLINE(1753)											{
HXLINE(1754)												HX_VARI_NAME( Float,T2,"T") = max;
HXLINE(1763)												cx2 = (u4->x + ((v8->x - u4->x) * T2));
HXLINE(1764)												cy2 = (u4->y + ((v8->y - u4->y) * T2));
            											}
HXLINE(1766)											bool _hx_tmp19;
HXDLIN(1766)											if (hx::IsNotNull( fst_vert )) {
HXLINE(1766)												HX_VARI_NAME( Float,dx1,"dx") = ((Float)0.0);
HXDLIN(1766)												HX_VARI_NAME( Float,dy1,"dy") = ((Float)0.0);
HXDLIN(1766)												{
HXLINE(1766)													dx1 = (cx2 - fst_vert->x);
HXDLIN(1766)													dy1 = (cy2 - fst_vert->y);
            												}
HXDLIN(1766)												_hx_tmp19 = (((dx1 * dx1) + (dy1 * dy1)) < ::nape::Config_obj::epsilon);
            											}
            											else {
HXLINE(1766)												_hx_tmp19 = false;
            											}
HXDLIN(1766)											if (_hx_tmp19) {
HXLINE(1766)												goto _hx_goto_53;
            											}
HXLINE(1767)											HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret2,"ret");
HXDLIN(1767)											{
HXLINE(1767)												if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1767)													ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(1767)													ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1767)													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN(1767)													ret2->next = null();
            												}
HXDLIN(1767)												ret2->weak = false;
            											}
HXDLIN(1767)											ret2->_immutable = false;
HXDLIN(1767)											{
HXLINE(1767)												ret2->x = cx2;
HXDLIN(1767)												ret2->y = cy2;
            											}
HXDLIN(1767)											::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ret2);
HXLINE(1768)											if (hx::IsNull( fst_vert )) {
HXLINE(1768)												fst_vert = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            											}
HXLINE(1769)											ite2 = itmo;
HXLINE(1770)											ind2 = indo;
HXLINE(1771)											poly1 = !(poly1);
HXLINE(1772)											cnt = (int)2;
            										}
            									}
            									else {
HXLINE(1776)										ite2 = ite2->next;
HXLINE(1777)										ind2 = (ind2 + (int)1);
HXLINE(1778)										if (hx::IsNull( ite2 )) {
HXLINE(1779)											ite2 = s2->polygon->gverts->next;
HXLINE(1780)											ind2 = (int)0;
            										}
HXLINE(1782)										if (!(out2->__get(ind2))) {
HXLINE(1783)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,ex1,"ex") = ite2;
HXLINE(1784)											bool _hx_tmp20;
HXDLIN(1784)											if (hx::IsNotNull( fst_vert )) {
HXLINE(1784)												HX_VARI_NAME( Float,dx2,"dx") = ((Float)0.0);
HXDLIN(1784)												HX_VARI_NAME( Float,dy2,"dy") = ((Float)0.0);
HXDLIN(1784)												{
HXLINE(1784)													dx2 = (ex1->x - fst_vert->x);
HXDLIN(1784)													dy2 = (ex1->y - fst_vert->y);
            												}
HXDLIN(1784)												_hx_tmp20 = (((dx2 * dx2) + (dy2 * dy2)) < ::nape::Config_obj::epsilon);
            											}
            											else {
HXLINE(1784)												_hx_tmp20 = false;
            											}
HXDLIN(1784)											if (_hx_tmp20) {
HXLINE(1784)												goto _hx_goto_53;
            											}
HXLINE(1785)											::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ex1);
HXLINE(1786)											if (hx::IsNull( fst_vert )) {
HXLINE(1786)												fst_vert = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            											}
HXLINE(1787)											cnt = (int)1;
            										}
            										else {
HXLINE(1790)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,a3,"a") = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
HXLINE(1791)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,b5,"b") = ite2;
HXLINE(1792)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u5,"u") = ite1;
HXLINE(1793)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,itm1,"itm") = ite1->next;
HXLINE(1794)											if (hx::IsNull( itm1 )) {
HXLINE(1794)												itm1 = s1->polygon->gverts->next;
            											}
HXLINE(1795)											HX_VARI_NAME( Float,max1,"max") = ((Float)-1.0);
HXLINE(1796)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,itmo1,"itmo") = null();
HXLINE(1797)											HX_VARI_NAME( int,indo1,"indo") = (int)0;
HXLINE(1798)											HX_VARI_NAME( int,icnt1,"icnt") = (int)0;
HXLINE(1799)											{
HXLINE(1800)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,beg_ite1,"beg_ite") = itm1;
HXLINE(1801)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite7,"cx_ite") = itm1;
HXLINE(1802)												while(true){
HXLINE(1803)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v9,"v") = cx_ite7;
HXLINE(1804)													{
HXLINE(1805)														HX_VARI_NAME( Float,t8,"t") = ((Float)0.0);
HXLINE(1807)														HX_VARI_NAME( Float,_sx6,"_sx") = ((Float)0.0);
HXLINE(1808)														HX_VARI_NAME( Float,_sy6,"_sy") = ((Float)0.0);
HXLINE(1809)														{
HXLINE(1810)															_sx6 = (u5->x - a3->x);
HXLINE(1811)															_sy6 = (u5->y - a3->y);
            														}
HXLINE(1813)														HX_VARI_NAME( Float,_vx6,"_vx") = ((Float)0.0);
HXLINE(1814)														HX_VARI_NAME( Float,_vy6,"_vy") = ((Float)0.0);
HXLINE(1815)														{
HXLINE(1816)															_vx6 = (v9->x - u5->x);
HXLINE(1817)															_vy6 = (v9->y - u5->y);
            														}
HXLINE(1819)														HX_VARI_NAME( Float,_qx6,"_qx") = ((Float)0.0);
HXLINE(1820)														HX_VARI_NAME( Float,_qy6,"_qy") = ((Float)0.0);
HXLINE(1821)														{
HXLINE(1822)															_qx6 = (b5->x - a3->x);
HXLINE(1823)															_qy6 = (b5->y - a3->y);
            														}
HXLINE(1825)														HX_VARI_NAME( Float,den6,"den") = ((_vy6 * _qx6) - (_vx6 * _qy6));
HXLINE(1806)														bool _hx_tmp21;
HXLINE(1826)														if (((den6 * den6) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1827)															den6 = ((Float)(int)1 / (Float)den6);
HXLINE(1828)															HX_VARI_NAME( Float,txx6,"txx") = (((_qy6 * _sx6) - (_qx6 * _sy6)) * den6);
HXLINE(1829)															bool _hx_tmp22;
HXDLIN(1829)															if ((txx6 > ::nape::Config_obj::epsilon)) {
HXLINE(1829)																_hx_tmp22 = (txx6 < ((int)1 - ::nape::Config_obj::epsilon));
            															}
            															else {
HXLINE(1829)																_hx_tmp22 = false;
            															}
HXDLIN(1829)															if (_hx_tmp22) {
HXLINE(1830)																HX_VARI_NAME( Float,sxx6,"sxx") = (((_vy6 * _sx6) - (_vx6 * _sy6)) * den6);
HXLINE(1831)																bool _hx_tmp23;
HXDLIN(1831)																if ((sxx6 > ::nape::Config_obj::epsilon)) {
HXLINE(1831)																	_hx_tmp23 = (sxx6 < ((int)1 - ::nape::Config_obj::epsilon));
            																}
            																else {
HXLINE(1831)																	_hx_tmp23 = false;
            																}
HXDLIN(1831)																if (_hx_tmp23) {
HXLINE(1832)																	t8 = txx6;
HXLINE(1806)																	_hx_tmp21 = true;
            																}
            																else {
HXLINE(1806)																	_hx_tmp21 = false;
            																}
            															}
            															else {
HXLINE(1806)																_hx_tmp21 = false;
            															}
            														}
            														else {
HXLINE(1806)															_hx_tmp21 = false;
            														}
HXDLIN(1806)														if (_hx_tmp21) {
HXLINE(1841)															if ((t8 >= ((Float)-1.0))) {
HXLINE(1842)																itmo1 = ite1;
HXLINE(1843)																indo1 = ind11;
HXLINE(1844)																icnt1 = (int)1;
HXDLIN(1844)																if (((int)1 == cnt)) {
HXLINE(1845)																	max1 = t8;
HXLINE(1847)																	cx_ite7 = beg_ite1;
HXLINE(1848)																	goto _hx_goto_56;
            																}
            																else {
HXLINE(1851)																	max1 = t8;
            																}
            															}
            														}
HXLINE(1854)														u5 = v9;
HXLINE(1855)														ite1 = cx_ite7;
HXLINE(1856)														ind11 = (ind11 + (int)1);
HXLINE(1857)														if ((ind11 >= s1->polygon->edgeCnt)) {
HXLINE(1857)															ind11 = (int)0;
            														}
            													}
HXLINE(1859)													cx_ite7 = cx_ite7->next;
HXLINE(1860)													if (hx::IsNull( cx_ite7 )) {
HXLINE(1860)														cx_ite7 = s1->polygon->gverts->next;
            													}
HXLINE(1802)													goto _hx_goto_56;
            												}
            												_hx_goto_56:;
HXLINE(1863)												while(hx::IsNotEq( cx_ite7,beg_ite1 )){
HXLINE(1864)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v10,"v") = cx_ite7;
HXLINE(1865)													{
HXLINE(1866)														HX_VARI_NAME( Float,t9,"t") = ((Float)0.0);
HXLINE(1868)														HX_VARI_NAME( Float,_sx7,"_sx") = ((Float)0.0);
HXLINE(1869)														HX_VARI_NAME( Float,_sy7,"_sy") = ((Float)0.0);
HXLINE(1870)														{
HXLINE(1871)															_sx7 = (u5->x - a3->x);
HXLINE(1872)															_sy7 = (u5->y - a3->y);
            														}
HXLINE(1874)														HX_VARI_NAME( Float,_vx7,"_vx") = ((Float)0.0);
HXLINE(1875)														HX_VARI_NAME( Float,_vy7,"_vy") = ((Float)0.0);
HXLINE(1876)														{
HXLINE(1877)															_vx7 = (v10->x - u5->x);
HXLINE(1878)															_vy7 = (v10->y - u5->y);
            														}
HXLINE(1880)														HX_VARI_NAME( Float,_qx7,"_qx") = ((Float)0.0);
HXLINE(1881)														HX_VARI_NAME( Float,_qy7,"_qy") = ((Float)0.0);
HXLINE(1882)														{
HXLINE(1883)															_qx7 = (b5->x - a3->x);
HXLINE(1884)															_qy7 = (b5->y - a3->y);
            														}
HXLINE(1886)														HX_VARI_NAME( Float,den7,"den") = ((_vy7 * _qx7) - (_vx7 * _qy7));
HXLINE(1867)														bool _hx_tmp24;
HXLINE(1887)														if (((den7 * den7) > (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(1888)															den7 = ((Float)(int)1 / (Float)den7);
HXLINE(1889)															HX_VARI_NAME( Float,txx7,"txx") = (((_qy7 * _sx7) - (_qx7 * _sy7)) * den7);
HXLINE(1890)															bool _hx_tmp25;
HXDLIN(1890)															if ((txx7 > ::nape::Config_obj::epsilon)) {
HXLINE(1890)																_hx_tmp25 = (txx7 < ((int)1 - ::nape::Config_obj::epsilon));
            															}
            															else {
HXLINE(1890)																_hx_tmp25 = false;
            															}
HXDLIN(1890)															if (_hx_tmp25) {
HXLINE(1891)																HX_VARI_NAME( Float,sxx7,"sxx") = (((_vy7 * _sx7) - (_vx7 * _sy7)) * den7);
HXLINE(1892)																bool _hx_tmp26;
HXDLIN(1892)																if ((sxx7 > ::nape::Config_obj::epsilon)) {
HXLINE(1892)																	_hx_tmp26 = (sxx7 < ((int)1 - ::nape::Config_obj::epsilon));
            																}
            																else {
HXLINE(1892)																	_hx_tmp26 = false;
            																}
HXDLIN(1892)																if (_hx_tmp26) {
HXLINE(1893)																	t9 = txx7;
HXLINE(1867)																	_hx_tmp24 = true;
            																}
            																else {
HXLINE(1867)																	_hx_tmp24 = false;
            																}
            															}
            															else {
HXLINE(1867)																_hx_tmp24 = false;
            															}
            														}
            														else {
HXLINE(1867)															_hx_tmp24 = false;
            														}
HXDLIN(1867)														if (_hx_tmp24) {
HXLINE(1902)															if ((t9 >= max1)) {
HXLINE(1903)																itmo1 = ite1;
HXLINE(1904)																indo1 = ind11;
HXLINE(1905)																icnt1 = (icnt1 + (int)1);
HXDLIN(1905)																if ((icnt1 == cnt)) {
HXLINE(1906)																	max1 = t9;
HXLINE(1909)																	goto _hx_goto_57;
            																}
            																else {
HXLINE(1912)																	max1 = t9;
            																}
            															}
            														}
HXLINE(1915)														u5 = v10;
HXLINE(1916)														ite1 = cx_ite7;
HXLINE(1917)														ind11 = (ind11 + (int)1);
HXLINE(1918)														if ((ind11 >= s1->polygon->edgeCnt)) {
HXLINE(1918)															ind11 = (int)0;
            														}
            													}
HXLINE(1920)													cx_ite7 = cx_ite7->next;
HXLINE(1921)													if (hx::IsNull( cx_ite7 )) {
HXLINE(1921)														cx_ite7 = s1->polygon->gverts->next;
            													}
            												}
            												_hx_goto_57:;
            											}
HXLINE(1924)											if (hx::IsNull( itmo1 )) {
HXLINE(1924)												goto _hx_goto_53;
            											}
HXLINE(1925)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u6,"u") = itmo1;
HXLINE(1926)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,itm21,"itm2") = itmo1->next;
HXLINE(1927)											if (hx::IsNull( itm21 )) {
HXLINE(1927)												itm21 = s1->polygon->gverts->next;
            											}
HXLINE(1928)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v11,"v") = itm21;
HXLINE(1929)											HX_VARI_NAME( Float,cx3,"cx") = ((Float)0.0);
HXLINE(1930)											HX_VARI_NAME( Float,cy3,"cy") = ((Float)0.0);
HXLINE(1931)											{
HXLINE(1932)												HX_VARI_NAME( Float,T3,"T") = max1;
HXLINE(1941)												cx3 = (u6->x + ((v11->x - u6->x) * T3));
HXLINE(1942)												cy3 = (u6->y + ((v11->y - u6->y) * T3));
            											}
HXLINE(1944)											bool _hx_tmp27;
HXDLIN(1944)											if (hx::IsNotNull( fst_vert )) {
HXLINE(1944)												HX_VARI_NAME( Float,dx3,"dx") = ((Float)0.0);
HXDLIN(1944)												HX_VARI_NAME( Float,dy3,"dy") = ((Float)0.0);
HXDLIN(1944)												{
HXLINE(1944)													dx3 = (cx3 - fst_vert->x);
HXDLIN(1944)													dy3 = (cy3 - fst_vert->y);
            												}
HXDLIN(1944)												_hx_tmp27 = (((dx3 * dx3) + (dy3 * dy3)) < ::nape::Config_obj::epsilon);
            											}
            											else {
HXLINE(1944)												_hx_tmp27 = false;
            											}
HXDLIN(1944)											if (_hx_tmp27) {
HXLINE(1944)												goto _hx_goto_53;
            											}
HXLINE(1945)											HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret3,"ret");
HXDLIN(1945)											{
HXLINE(1945)												if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1945)													ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(1945)													ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1945)													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN(1945)													ret3->next = null();
            												}
HXDLIN(1945)												ret3->weak = false;
            											}
HXDLIN(1945)											ret3->_immutable = false;
HXDLIN(1945)											{
HXLINE(1945)												ret3->x = cx3;
HXDLIN(1945)												ret3->y = cy3;
            											}
HXDLIN(1945)											::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ret3);
HXLINE(1946)											if (hx::IsNull( fst_vert )) {
HXLINE(1946)												fst_vert = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            											}
HXLINE(1947)											ite1 = itmo1;
HXLINE(1948)											ind11 = indo1;
HXLINE(1949)											poly1 = !(poly1);
HXLINE(1950)											cnt = (int)2;
            										}
            									}
            								}
            								_hx_goto_53:;
HXLINE(1954)								bool _hx_tmp28;
HXDLIN(1954)								bool _hx_tmp29;
HXDLIN(1954)								if (hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head )) {
HXLINE(1954)									_hx_tmp29 = hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->next );
            								}
            								else {
HXLINE(1954)									_hx_tmp29 = false;
            								}
HXDLIN(1954)								if (_hx_tmp29) {
HXLINE(1954)									_hx_tmp28 = hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->next->next );
            								}
            								else {
HXLINE(1954)									_hx_tmp28 = false;
            								}
HXDLIN(1954)								if (_hx_tmp28) {
HXLINE(1955)									HX_VARI_NAME( Float,area2,"area") = ((Float)0.0);
HXLINE(1956)									HX_VARI( Float,COMx) = ((Float)0.0);
HXLINE(1957)									HX_VARI( Float,COMy) = ((Float)0.0);
HXLINE(1958)									{
HXLINE(1959)										{
HXLINE(1960)											COMx = (int)0;
HXLINE(1961)											COMy = (int)0;
            										}
HXLINE(1979)										area2 = ((Float)0.0);
HXLINE(1980)										{
HXLINE(1981)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cx_ite8,"cx_ite") = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head;
HXLINE(1982)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u7,"u") = cx_ite8->elt;
HXLINE(1983)											cx_ite8 = cx_ite8->next;
HXLINE(1984)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v12,"v") = cx_ite8->elt;
HXLINE(1985)											cx_ite8 = cx_ite8->next;
HXLINE(1986)											while(hx::IsNotNull( cx_ite8 )){
HXLINE(1987)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w6,"w") = cx_ite8->elt;
HXLINE(1988)												{
HXLINE(1989)													area2 = (area2 + (v12->x * (w6->y - u7->y)));
HXLINE(1990)													HX_VARI_NAME( Float,cf6,"cf") = ((w6->y * v12->x) - (w6->x * v12->y));
HXLINE(1991)													COMx = (COMx + ((v12->x + w6->x) * cf6));
HXLINE(1992)													COMy = (COMy + ((v12->y + w6->y) * cf6));
            												}
HXLINE(1994)												u7 = v12;
HXLINE(1995)												v12 = w6;
HXLINE(1996)												cx_ite8 = cx_ite8->next;
            											}
HXLINE(1998)											cx_ite8 = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head;
HXLINE(1999)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w7,"w") = cx_ite8->elt;
HXLINE(2000)											{
HXLINE(2001)												area2 = (area2 + (v12->x * (w7->y - u7->y)));
HXLINE(2002)												HX_VARI_NAME( Float,cf7,"cf") = ((w7->y * v12->x) - (w7->x * v12->y));
HXLINE(2003)												COMx = (COMx + ((v12->x + w7->x) * cf7));
HXLINE(2004)												COMy = (COMy + ((v12->y + w7->y) * cf7));
            											}
HXLINE(2006)											u7 = v12;
HXLINE(2008)											cx_ite8 = cx_ite8->next;
HXLINE(2009)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w8,"w") = cx_ite8->elt;
HXLINE(2010)											{
HXLINE(2011)												area2 = (area2 + (w7->x * (w8->y - u7->y)));
HXLINE(2012)												HX_VARI_NAME( Float,cf8,"cf") = ((w8->y * w7->x) - (w8->x * w7->y));
HXLINE(2013)												COMx = (COMx + ((w7->x + w8->x) * cf8));
HXLINE(2014)												COMy = (COMy + ((w7->y + w8->y) * cf8));
            											}
            										}
HXLINE(2017)										area2 = (area2 * ((Float)0.5));
HXLINE(2018)										HX_VARI( Float,ia) = ((Float)(int)1 / (Float)((int)6 * area2));
HXLINE(2019)										{
HXLINE(2029)											COMx = (COMx * ia);
HXLINE(2030)											COMy = (COMy * ia);
            										}
            									}
HXLINE(2033)									{
HXLINE(2033)										arb->overlap = -(area2);
HXDLIN(2033)										{
HXLINE(2033)											arb->centroidx = COMx;
HXDLIN(2033)											arb->centroidy = COMy;
            										}
            									}
HXLINE(1173)									return true;
            								}
            								else {
HXLINE(1173)									return false;
            								}
            							}
            							else {
HXLINE(1173)								return false;
            							}
            						}
            					}
            					else {
HXLINE(1173)						return false;
            					}
            				}
            			}
            			else {
HXLINE(2043)				HX_VARI( ::Array< bool >,inte) = ::Array_obj< bool >::__new();
HXLINE(2044)				HX_VARI_NAME( bool,total1,"total") = true;
HXLINE(2045)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a0) = null();
HXDLIN(2045)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,vi) = null();
HXLINE(2046)				HX_VARI_NAME( Float,max2,"max") = ((Float)-1e+100);
HXLINE(2047)				HX_VARI_NAME( bool,cont1,"cont") = true;
HXLINE(2048)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,vite) = s2->polygon->gverts->next;
HXLINE(2049)				HX_VARI_NAME( int,ind3,"ind") = (int)0;
HXLINE(2050)				{
HXLINE(2051)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite9,"cx_ite") = s2->polygon->edges->head;
HXLINE(2052)					while(hx::IsNotNull( cx_ite9 )){
HXLINE(2053)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a4,"a") = cx_ite9->elt;
HXLINE(2054)						{
HXLINE(2055)							HX_VARI( Float,dist) = ((a4->gnormx * s1->circle->worldCOMx) + (a4->gnormy * s1->circle->worldCOMy));
HXLINE(2056)							if ((dist > (a4->gprojection + s1->circle->radius))) {
HXLINE(2057)								cont1 = false;
HXLINE(2058)								goto _hx_goto_59;
            							}
            							else {
HXLINE(2060)								if (((dist + s1->circle->radius) > (a4->gprojection + ::nape::Config_obj::epsilon))) {
HXLINE(2061)									total1 = false;
HXLINE(2062)									inte[ind3] = true;
            								}
            							}
HXLINE(2064)							dist = (dist - (a4->gprojection + s1->circle->radius));
HXLINE(2065)							if ((dist > max2)) {
HXLINE(2066)								max2 = dist;
HXLINE(2067)								a0 = a4;
HXLINE(2068)								vi = vite;
            							}
HXLINE(2070)							vite = vite->next;
HXLINE(2071)							ind3 = (ind3 + (int)1);
            						}
HXLINE(2073)						cx_ite9 = cx_ite9->next;
            					}
            					_hx_goto_59:;
            				}
HXLINE(2076)				if (cont1) {
HXLINE(2077)					if (total1) {
HXLINE(2078)						{
HXLINE(2078)							arb->overlap = s1->circle->area;
HXDLIN(2078)							{
HXLINE(2078)								arb->centroidx = s1->circle->worldCOMx;
HXDLIN(2078)								arb->centroidy = s1->circle->worldCOMy;
            							}
            						}
HXLINE(1173)						return true;
            					}
            					else {
HXLINE(2082)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v0) = vi;
HXLINE(2083)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,v13,"v1");
HXDLIN(2083)						if (hx::IsNull( vi->next )) {
HXLINE(2083)							v13 = s2->polygon->gverts->next;
            						}
            						else {
HXLINE(2083)							v13 = vi->next;
            						}
HXLINE(2084)						HX_VARI( Float,dt) = ((s1->circle->worldCOMy * a0->gnormx) - (s1->circle->worldCOMx * a0->gnormy));
HXLINE(2085)						bool _hx_tmp30;
HXDLIN(2085)						if ((dt <= ((v0->y * a0->gnormx) - (v0->x * a0->gnormy)))) {
HXLINE(2086)							HX_VARI( Float,minDist) = s1->circle->radius;
HXLINE(2087)							HX_VARI( Float,px) = ((Float)0.0);
HXLINE(2088)							HX_VARI( Float,py) = ((Float)0.0);
HXLINE(2089)							{
HXLINE(2090)								px = (v0->x - s1->circle->worldCOMx);
HXLINE(2091)								py = (v0->y - s1->circle->worldCOMy);
            							}
HXLINE(2085)							_hx_tmp30 = (((px * px) + (py * py)) <= (minDist * minDist));
            						}
            						else {
HXLINE(2096)							if ((dt >= ((v13->y * a0->gnormx) - (v13->x * a0->gnormy)))) {
HXLINE(2097)								HX_VARI_NAME( Float,minDist1,"minDist") = s1->circle->radius;
HXLINE(2098)								HX_VARI_NAME( Float,px1,"px") = ((Float)0.0);
HXLINE(2099)								HX_VARI_NAME( Float,py1,"py") = ((Float)0.0);
HXLINE(2100)								{
HXLINE(2101)									px1 = (v13->x - s1->circle->worldCOMx);
HXLINE(2102)									py1 = (v13->y - s1->circle->worldCOMy);
            								}
HXLINE(2085)								_hx_tmp30 = (((px1 * px1) + (py1 * py1)) <= (minDist1 * minDist1));
            							}
            							else {
HXLINE(2085)								_hx_tmp30 = true;
            							}
            						}
HXDLIN(2085)						if (_hx_tmp30) {
HXLINE(2108)							HX_VARI( ::Array< bool >,ins) = ::Array_obj< bool >::__new();
HXLINE(2109)							HX_VARI_NAME( int,ind4,"ind") = (int)0;
HXLINE(2110)							HX_VARI_NAME( bool,total2,"total") = true;
HXLINE(2111)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,vi1,"vi") = null();
HXLINE(2112)							HX_VARI( int,vind) = (int)0;
HXLINE(2113)							{
HXLINE(2114)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite10,"cx_ite") = s2->polygon->gverts->next;
HXLINE(2115)								while(hx::IsNotNull( cx_ite10 )){
HXLINE(2116)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v14,"v") = cx_ite10;
HXLINE(2117)									{
HXLINE(2118)										HX_VARI_NAME( Float,dx4,"dx") = ((Float)0.0);
HXDLIN(2118)										HX_VARI_NAME( Float,dy4,"dy") = ((Float)0.0);
HXDLIN(2118)										{
HXLINE(2118)											dx4 = (v14->x - s1->circle->worldCOMx);
HXDLIN(2118)											dy4 = (v14->y - s1->circle->worldCOMy);
            										}
HXLINE(2119)										if (!((ins[ind4] = (((dx4 * dx4) + (dy4 * dy4)) <= (s1->circle->radius * s1->circle->radius))))) {
HXLINE(2119)											total2 = false;
            										}
            										else {
HXLINE(2121)											vind = ind4;
HXLINE(2122)											vi1 = cx_ite10;
            										}
HXLINE(2124)										ind4 = (ind4 + (int)1);
            									}
HXLINE(2126)									cx_ite10 = cx_ite10->next;
            								}
            							}
HXLINE(2129)							if (total2) {
HXLINE(2130)								{
HXLINE(2130)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this6,"_this") = s2->polygon;
HXDLIN(2130)									if (_this6->zip_worldCOM) {
HXLINE(2130)										if (hx::IsNotNull( _this6->body )) {
HXLINE(2130)											_this6->zip_worldCOM = false;
HXDLIN(2130)											if (_this6->zip_localCOM) {
HXLINE(2130)												_this6->zip_localCOM = false;
HXDLIN(2130)												if ((_this6->type == (int)1)) {
HXLINE(2130)													HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this7,"_this") = _this6->polygon;
HXDLIN(2130)													if (hx::IsNull( _this7->lverts->next->next )) {
HXLINE(2130)														_this7->localCOMx = _this7->lverts->next->x;
HXDLIN(2130)														_this7->localCOMy = _this7->lverts->next->y;
            													}
            													else {
HXLINE(2130)														if (hx::IsNull( _this7->lverts->next->next->next )) {
HXLINE(2130)															{
HXLINE(2130)																_this7->localCOMx = _this7->lverts->next->x;
HXDLIN(2130)																_this7->localCOMy = _this7->lverts->next->y;
            															}
HXDLIN(2130)															{
HXLINE(2130)																_this7->localCOMx = (_this7->localCOMx + _this7->lverts->next->next->x);
HXDLIN(2130)																_this7->localCOMy = (_this7->localCOMy + _this7->lverts->next->next->y);
            															}
HXDLIN(2130)															{
HXLINE(2130)																_this7->localCOMx = (_this7->localCOMx * ((Float)0.5));
HXDLIN(2130)																_this7->localCOMy = (_this7->localCOMy * ((Float)0.5));
            															}
            														}
            														else {
HXLINE(2130)															{
HXLINE(2130)																_this7->localCOMx = (int)0;
HXDLIN(2130)																_this7->localCOMy = (int)0;
            															}
HXDLIN(2130)															HX_VARI_NAME( Float,area3,"area") = ((Float)0.0);
HXDLIN(2130)															{
HXLINE(2130)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite11,"cx_ite") = _this7->lverts->next;
HXDLIN(2130)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u8,"u") = cx_ite11;
HXDLIN(2130)																cx_ite11 = cx_ite11->next;
HXDLIN(2130)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v15,"v") = cx_ite11;
HXDLIN(2130)																cx_ite11 = cx_ite11->next;
HXDLIN(2130)																while(hx::IsNotNull( cx_ite11 )){
HXLINE(2130)																	HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w9,"w") = cx_ite11;
HXDLIN(2130)																	{
HXLINE(2130)																		area3 = (area3 + (v15->x * (w9->y - u8->y)));
HXDLIN(2130)																		HX_VARI_NAME( Float,cf9,"cf") = ((w9->y * v15->x) - (w9->x * v15->y));
HXDLIN(2130)																		_this7->localCOMx = (_this7->localCOMx + ((v15->x + w9->x) * cf9));
HXDLIN(2130)																		_this7->localCOMy = (_this7->localCOMy + ((v15->y + w9->y) * cf9));
            																	}
HXDLIN(2130)																	u8 = v15;
HXDLIN(2130)																	v15 = w9;
HXDLIN(2130)																	cx_ite11 = cx_ite11->next;
            																}
HXDLIN(2130)																cx_ite11 = _this7->lverts->next;
HXDLIN(2130)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w10,"w") = cx_ite11;
HXDLIN(2130)																{
HXLINE(2130)																	area3 = (area3 + (v15->x * (w10->y - u8->y)));
HXDLIN(2130)																	HX_VARI_NAME( Float,cf10,"cf") = ((w10->y * v15->x) - (w10->x * v15->y));
HXDLIN(2130)																	_this7->localCOMx = (_this7->localCOMx + ((v15->x + w10->x) * cf10));
HXDLIN(2130)																	_this7->localCOMy = (_this7->localCOMy + ((v15->y + w10->y) * cf10));
            																}
HXDLIN(2130)																u8 = v15;
HXDLIN(2130)																cx_ite11 = cx_ite11->next;
HXDLIN(2130)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w11,"w") = cx_ite11;
HXDLIN(2130)																{
HXLINE(2130)																	area3 = (area3 + (w10->x * (w11->y - u8->y)));
HXDLIN(2130)																	HX_VARI_NAME( Float,cf11,"cf") = ((w11->y * w10->x) - (w11->x * w10->y));
HXDLIN(2130)																	_this7->localCOMx = (_this7->localCOMx + ((w10->x + w11->x) * cf11));
HXDLIN(2130)																	_this7->localCOMy = (_this7->localCOMy + ((w10->y + w11->y) * cf11));
            																}
            															}
HXDLIN(2130)															area3 = ((Float)(int)1 / (Float)((int)3 * area3));
HXDLIN(2130)															{
HXLINE(2130)																HX_VARI_NAME( Float,t10,"t") = area3;
HXDLIN(2130)																_this7->localCOMx = (_this7->localCOMx * t10);
HXDLIN(2130)																_this7->localCOMy = (_this7->localCOMy * t10);
            															}
            														}
            													}
            												}
HXDLIN(2130)												if (hx::IsNotNull( _this6->wrap_localCOM )) {
HXLINE(2130)													_this6->wrap_localCOM->zpp_inner->x = _this6->localCOMx;
HXDLIN(2130)													_this6->wrap_localCOM->zpp_inner->y = _this6->localCOMy;
            												}
            											}
HXDLIN(2130)											{
HXLINE(2130)												HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this8,"_this") = _this6->body;
HXDLIN(2130)												if (_this8->zip_axis) {
HXLINE(2130)													_this8->zip_axis = false;
HXDLIN(2130)													{
HXLINE(2130)														_this8->axisx = ::Math_obj::sin(_this8->rot);
HXDLIN(2130)														_this8->axisy = ::Math_obj::cos(_this8->rot);
            													}
            												}
            											}
HXDLIN(2130)											{
HXLINE(2130)												_this6->worldCOMx = (_this6->body->posx + ((_this6->body->axisy * _this6->localCOMx) - (_this6->body->axisx * _this6->localCOMy)));
HXDLIN(2130)												_this6->worldCOMy = (_this6->body->posy + ((_this6->localCOMx * _this6->body->axisx) + (_this6->localCOMy * _this6->body->axisy)));
            											}
            										}
            									}
            								}
HXLINE(2131)								{
HXLINE(2131)									arb->overlap = s2->polygon->area;
HXDLIN(2131)									{
HXLINE(2131)										arb->centroidx = s2->polygon->worldCOMx;
HXDLIN(2131)										arb->centroidy = s2->polygon->worldCOMy;
            									}
            								}
HXLINE(1173)								return true;
            							}
            							else {
HXLINE(2135)								while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head )){
HXLINE(2136)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,p1,"p") = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->pop_unsafe();
HXLINE(2137)									if (!(p1->_inuse)) {
HXLINE(2147)										{
HXLINE(2147)											if (hx::IsNotNull( p1->outer )) {
HXLINE(2147)												p1->outer->zpp_inner = null();
HXDLIN(2147)												p1->outer = null();
            											}
HXDLIN(2147)											p1->_isimmutable = null();
HXDLIN(2147)											p1->_validate = null();
HXDLIN(2147)											p1->_invalidate = null();
            										}
HXLINE(2148)										p1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE(2149)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = p1;
            									}
            								}
HXLINE(2155)								::zpp_nape::geom::ZPP_Collide_obj::flowsegs->clear();
HXLINE(2156)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,fst_vert1,"fst_vert") = null();
HXLINE(2157)								HX_VARI( int,state) = (int)1;
HXLINE(2158)								if (hx::IsNull( vi1 )) {
HXLINE(2159)									vi1 = s2->polygon->gverts->next;
HXLINE(2160)									state = (int)2;
            								}
            								else {
HXLINE(2162)									fst_vert1 = vi1;
HXDLIN(2162)									::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(fst_vert1);
            								}
HXLINE(2163)								while((state != (int)0)){
HXLINE(2164)									if ((state == (int)1)) {
HXLINE(2165)										vi1 = vi1->next;
HXLINE(2166)										if (hx::IsNull( vi1 )) {
HXLINE(2166)											vi1 = s2->polygon->gverts->next;
            										}
HXLINE(2167)										vind = (vind + (int)1);
HXLINE(2168)										if ((vind >= s2->polygon->edgeCnt)) {
HXLINE(2168)											vind = (int)0;
            										}
HXLINE(2169)										if (ins->__get(vind)) {
HXLINE(2170)											HX_VARI_NAME( Float,dx5,"dx") = ((Float)0.0);
HXDLIN(2170)											HX_VARI_NAME( Float,dy5,"dy") = ((Float)0.0);
HXDLIN(2170)											{
HXLINE(2170)												dx5 = (fst_vert1->x - vi1->x);
HXDLIN(2170)												dy5 = (fst_vert1->y - vi1->y);
            											}
HXDLIN(2170)											if ((((dx5 * dx5) + (dy5 * dy5)) < ::nape::Config_obj::epsilon)) {
HXLINE(2170)												goto _hx_goto_63;
            											}
HXLINE(2171)											::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(vi1);
            										}
            										else {
HXLINE(2174)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u9,"u") = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
HXLINE(2175)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v16,"v") = vi1;
HXLINE(2177)											HX_VARI( Float,vx) = ((Float)0.0);
HXLINE(2178)											HX_VARI( Float,vy) = ((Float)0.0);
HXLINE(2179)											{
HXLINE(2180)												vx = (v16->x - u9->x);
HXLINE(2181)												vy = (v16->y - u9->y);
            											}
HXLINE(2183)											HX_VARI( Float,qx) = ((Float)0.0);
HXLINE(2184)											HX_VARI( Float,qy) = ((Float)0.0);
HXLINE(2185)											{
HXLINE(2186)												qx = (u9->x - s1->circle->worldCOMx);
HXLINE(2187)												qy = (u9->y - s1->circle->worldCOMy);
            											}
HXLINE(2189)											HX_VARI( Float,A) = ((vx * vx) + (vy * vy));
HXLINE(2190)											HX_VARI( Float,B) = ((int)2 * ((qx * vx) + (qy * vy)));
HXLINE(2192)											HX_VARI( Float,D) = ::Math_obj::sqrt(((B * B) - (((int)4 * A) * (((qx * qx) + (qy * qy)) - (s1->circle->radius * s1->circle->radius)))));
HXLINE(2193)											A = ((Float)(int)1 / (Float)((int)2 * A));
HXLINE(2194)											HX_VARI_NAME( Float,t11,"t") = ((-(B) - D) * A);
HXLINE(2176)											HX_VAR( Float,tval);
HXLINE(2195)											if ((t11 < ::nape::Config_obj::epsilon)) {
HXLINE(2176)												tval = ((-(B) + D) * A);
            											}
            											else {
HXLINE(2176)												tval = t11;
            											}
HXLINE(2198)											HX_VARI_NAME( Float,cx4,"cx") = ((Float)0.0);
HXLINE(2199)											HX_VARI_NAME( Float,cy4,"cy") = ((Float)0.0);
HXLINE(2200)											{
HXLINE(2201)												HX_VARI_NAME( Float,T4,"T") = tval;
HXLINE(2210)												cx4 = (u9->x + ((v16->x - u9->x) * T4));
HXLINE(2211)												cy4 = (u9->y + ((v16->y - u9->y) * T4));
            											}
HXLINE(2213)											HX_VARI_NAME( Float,dx6,"dx") = ((Float)0.0);
HXDLIN(2213)											HX_VARI_NAME( Float,dy6,"dy") = ((Float)0.0);
HXDLIN(2213)											{
HXLINE(2213)												dx6 = (fst_vert1->x - cx4);
HXDLIN(2213)												dy6 = (fst_vert1->y - cy4);
            											}
HXDLIN(2213)											if ((((dx6 * dx6) + (dy6 * dy6)) < ::nape::Config_obj::epsilon)) {
HXLINE(2213)												goto _hx_goto_63;
            											}
HXLINE(2214)											HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret4,"ret");
HXDLIN(2214)											{
HXLINE(2214)												if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2214)													ret4 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            												}
            												else {
HXLINE(2214)													ret4 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2214)													::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret4->next;
HXDLIN(2214)													ret4->next = null();
            												}
HXDLIN(2214)												ret4->weak = false;
            											}
HXDLIN(2214)											ret4->_immutable = false;
HXDLIN(2214)											{
HXLINE(2214)												ret4->x = cx4;
HXDLIN(2214)												ret4->y = cy4;
            											}
HXDLIN(2214)											::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ret4);
HXLINE(2215)											state = (int)2;
            										}
            									}
            									else {
HXLINE(2218)										if ((state == (int)2)) {
HXLINE(2219)											HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,vi2) = vi1->next;
HXLINE(2220)											if (hx::IsNull( vi2 )) {
HXLINE(2220)												vi2 = s2->polygon->gverts->next;
            											}
HXLINE(2221)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u10,"u") = vi1;
HXLINE(2222)											state = (int)0;
HXLINE(2223)											{
HXLINE(2224)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,beg_ite2,"beg_ite") = vi2;
HXLINE(2225)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite12,"cx_ite") = vi2;
HXLINE(2226)												while(true){
HXLINE(2227)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v17,"v") = cx_ite12;
HXLINE(2228)													{
HXLINE(2229)														HX_VARI( int,vind2) = (vind + (int)1);
HXLINE(2230)														if ((vind2 == s2->polygon->edgeCnt)) {
HXLINE(2230)															vind2 = (int)0;
            														}
HXLINE(2231)														if (inte->__get(vind)) {
HXLINE(2232)															if (ins->__get(vind2)) {
HXLINE(2234)																HX_VARI_NAME( Float,vx1,"vx") = ((Float)0.0);
HXLINE(2235)																HX_VARI_NAME( Float,vy1,"vy") = ((Float)0.0);
HXLINE(2236)																{
HXLINE(2237)																	vx1 = (v17->x - u10->x);
HXLINE(2238)																	vy1 = (v17->y - u10->y);
            																}
HXLINE(2240)																HX_VARI_NAME( Float,qx1,"qx") = ((Float)0.0);
HXLINE(2241)																HX_VARI_NAME( Float,qy1,"qy") = ((Float)0.0);
HXLINE(2242)																{
HXLINE(2243)																	qx1 = (u10->x - s1->circle->worldCOMx);
HXLINE(2244)																	qy1 = (u10->y - s1->circle->worldCOMy);
            																}
HXLINE(2246)																HX_VARI_NAME( Float,A1,"A") = ((vx1 * vx1) + (vy1 * vy1));
HXLINE(2247)																HX_VARI_NAME( Float,B1,"B") = ((int)2 * ((qx1 * vx1) + (qy1 * vy1)));
HXLINE(2249)																HX_VARI_NAME( Float,D1,"D") = ::Math_obj::sqrt(((B1 * B1) - (((int)4 * A1) * (((qx1 * qx1) + (qy1 * qy1)) - (s1->circle->radius * s1->circle->radius)))));
HXLINE(2250)																A1 = ((Float)(int)1 / (Float)((int)2 * A1));
HXLINE(2251)																HX_VARI_NAME( Float,t12,"t") = ((-(B1) - D1) * A1);
HXLINE(2233)																HX_VAR_NAME( Float,tval1,"tval");
HXLINE(2252)																if ((t12 < ::nape::Config_obj::epsilon)) {
HXLINE(2233)																	tval1 = ((-(B1) + D1) * A1);
            																}
            																else {
HXLINE(2233)																	tval1 = t12;
            																}
HXLINE(2255)																HX_VARI_NAME( Float,cx5,"cx") = ((Float)0.0);
HXLINE(2256)																HX_VARI_NAME( Float,cy5,"cy") = ((Float)0.0);
HXLINE(2257)																{
HXLINE(2258)																	HX_VARI_NAME( Float,T5,"T") = tval1;
HXLINE(2267)																	cx5 = (u10->x + ((v17->x - u10->x) * T5));
HXLINE(2268)																	cy5 = (u10->y + ((v17->y - u10->y) * T5));
            																}
HXLINE(2270)																HX_VARI_NAME( Float,dx7,"dx") = ((Float)0.0);
HXDLIN(2270)																HX_VARI_NAME( Float,dy7,"dy") = ((Float)0.0);
HXDLIN(2270)																{
HXLINE(2270)																	dx7 = (fst_vert1->x - cx5);
HXDLIN(2270)																	dy7 = (fst_vert1->y - cy5);
            																}
HXDLIN(2270)																if ((((dx7 * dx7) + (dy7 * dy7)) < ::nape::Config_obj::epsilon)) {
HXLINE(2271)																	state = (int)0;
HXLINE(2273)																	cx_ite12 = beg_ite2;
HXLINE(2274)																	goto _hx_goto_64;
            																}
HXLINE(2277)																HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret5,"ret");
HXDLIN(2277)																{
HXLINE(2277)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2277)																		ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(2277)																		ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2277)																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN(2277)																		ret5->next = null();
            																	}
HXDLIN(2277)																	ret5->weak = false;
            																}
HXDLIN(2277)																ret5->_immutable = false;
HXDLIN(2277)																{
HXLINE(2277)																	ret5->x = cx5;
HXDLIN(2277)																	ret5->y = cy5;
            																}
HXDLIN(2277)																HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cp) = ret5;
HXLINE(2278)																::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt);
HXLINE(2279)																::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(cp);
HXLINE(2280)																::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(cp);
HXLINE(2281)																state = (int)1;
HXLINE(2283)																cx_ite12 = beg_ite2;
HXLINE(2284)																goto _hx_goto_64;
            															}
            															else {
HXLINE(2288)																HX_VARI( Float,t0) = ((Float)0.0);
HXLINE(2289)																HX_VARI_NAME( Float,t13,"t1") = ((Float)0.0);
HXLINE(2291)																HX_VARI_NAME( Float,vx2,"vx") = ((Float)0.0);
HXLINE(2292)																HX_VARI_NAME( Float,vy2,"vy") = ((Float)0.0);
HXLINE(2293)																{
HXLINE(2294)																	vx2 = (v17->x - u10->x);
HXLINE(2295)																	vy2 = (v17->y - u10->y);
            																}
HXLINE(2297)																HX_VARI_NAME( Float,qx2,"qx") = ((Float)0.0);
HXLINE(2298)																HX_VARI_NAME( Float,qy2,"qy") = ((Float)0.0);
HXLINE(2299)																{
HXLINE(2300)																	qx2 = (u10->x - s1->circle->worldCOMx);
HXLINE(2301)																	qy2 = (u10->y - s1->circle->worldCOMy);
            																}
HXLINE(2303)																HX_VARI_NAME( Float,A2,"A") = ((vx2 * vx2) + (vy2 * vy2));
HXLINE(2304)																HX_VARI_NAME( Float,B2,"B") = ((int)2 * ((qx2 * vx2) + (qy2 * vy2)));
HXLINE(2306)																HX_VARI_NAME( Float,D2,"D") = ((B2 * B2) - (((int)4 * A2) * (((qx2 * qx2) + (qy2 * qy2)) - (s1->circle->radius * s1->circle->radius))));
HXLINE(2290)																HX_VAR( bool,two);
HXLINE(2307)																if (((D2 * D2) < ::nape::Config_obj::epsilon)) {
HXLINE(2308)																	if ((D2 < (int)0)) {
HXLINE(2308)																		t0 = ((Float)10.0);
            																	}
            																	else {
HXLINE(2309)																		t13 = ((Float)-(B2) / (Float)((int)2 * A2));
HXDLIN(2309)																		t0 = t13;
            																	}
HXLINE(2290)																	two = false;
            																}
            																else {
HXLINE(2313)																	D2 = ::Math_obj::sqrt(D2);
HXLINE(2314)																	A2 = ((Float)(int)1 / (Float)((int)2 * A2));
HXLINE(2315)																	t0 = ((-(B2) - D2) * A2);
HXLINE(2316)																	t13 = ((-(B2) + D2) * A2);
HXLINE(2290)																	two = true;
            																}
HXLINE(2320)																bool _hx_tmp31;
HXDLIN(2320)																if ((t0 < ((int)1 - ::nape::Config_obj::epsilon))) {
HXLINE(2320)																	_hx_tmp31 = (t13 > ::nape::Config_obj::epsilon);
            																}
            																else {
HXLINE(2320)																	_hx_tmp31 = false;
            																}
HXDLIN(2320)																if (_hx_tmp31) {
HXLINE(2321)																	HX_VARI_NAME( Float,cx6,"cx") = ((Float)0.0);
HXLINE(2322)																	HX_VARI_NAME( Float,cy6,"cy") = ((Float)0.0);
HXLINE(2323)																	{
HXLINE(2324)																		HX_VARI_NAME( Float,T6,"T") = t0;
HXLINE(2333)																		cx6 = (u10->x + ((v17->x - u10->x) * T6));
HXLINE(2334)																		cy6 = (u10->y + ((v17->y - u10->y) * T6));
            																	}
HXLINE(2336)																	bool _hx_tmp32;
HXDLIN(2336)																	if (hx::IsNotNull( fst_vert1 )) {
HXLINE(2336)																		HX_VARI_NAME( Float,dx8,"dx") = ((Float)0.0);
HXDLIN(2336)																		HX_VARI_NAME( Float,dy8,"dy") = ((Float)0.0);
HXDLIN(2336)																		{
HXLINE(2336)																			dx8 = (fst_vert1->x - cx6);
HXDLIN(2336)																			dy8 = (fst_vert1->y - cy6);
            																		}
HXDLIN(2336)																		_hx_tmp32 = (((dx8 * dx8) + (dy8 * dy8)) < ::nape::Config_obj::epsilon);
            																	}
            																	else {
HXLINE(2336)																		_hx_tmp32 = false;
            																	}
HXDLIN(2336)																	if (_hx_tmp32) {
HXLINE(2337)																		state = (int)0;
HXLINE(2339)																		cx_ite12 = beg_ite2;
HXLINE(2340)																		goto _hx_goto_64;
            																	}
HXLINE(2343)																	HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret6,"ret");
HXDLIN(2343)																	{
HXLINE(2343)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2343)																			ret6 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(2343)																			ret6 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2343)																			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret6->next;
HXDLIN(2343)																			ret6->next = null();
            																		}
HXDLIN(2343)																		ret6->weak = false;
            																	}
HXDLIN(2343)																	ret6->_immutable = false;
HXDLIN(2343)																	{
HXLINE(2343)																		ret6->x = cx6;
HXDLIN(2343)																		ret6->y = cy6;
            																	}
HXDLIN(2343)																	HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cp1,"cp") = ret6;
HXLINE(2344)																	if (hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head )) {
HXLINE(2345)																		::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt);
HXLINE(2346)																		::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(cp1);
            																	}
HXLINE(2348)																	::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(cp1);
HXLINE(2349)																	if (hx::IsNull( fst_vert1 )) {
HXLINE(2349)																		fst_vert1 = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            																	}
HXLINE(2350)																	if (two) {
HXLINE(2351)																		HX_VARI_NAME( Float,cx7,"cx") = ((Float)0.0);
HXLINE(2352)																		HX_VARI_NAME( Float,cy7,"cy") = ((Float)0.0);
HXLINE(2353)																		{
HXLINE(2354)																			HX_VARI_NAME( Float,T7,"T") = t13;
HXLINE(2363)																			cx7 = (u10->x + ((v17->x - u10->x) * T7));
HXLINE(2364)																			cy7 = (u10->y + ((v17->y - u10->y) * T7));
            																		}
HXLINE(2366)																		HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret7,"ret");
HXDLIN(2366)																		{
HXLINE(2366)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2366)																				ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(2366)																				ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2366)																				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN(2366)																				ret7->next = null();
            																			}
HXDLIN(2366)																			ret7->weak = false;
            																		}
HXDLIN(2366)																		ret7->_immutable = false;
HXDLIN(2366)																		{
HXLINE(2366)																			ret7->x = cx7;
HXDLIN(2366)																			ret7->y = cy7;
            																		}
HXDLIN(2366)																		::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ret7);
            																	}
            																}
            															}
            														}
HXLINE(2371)														u10 = v17;
HXLINE(2372)														vi1 = cx_ite12;
HXLINE(2373)														vind = vind2;
            													}
HXLINE(2375)													cx_ite12 = cx_ite12->next;
HXLINE(2376)													if (hx::IsNull( cx_ite12 )) {
HXLINE(2376)														cx_ite12 = s2->polygon->gverts->next;
            													}
HXLINE(2226)													goto _hx_goto_64;
            												}
            												_hx_goto_64:;
HXLINE(2379)												while(hx::IsNotEq( cx_ite12,beg_ite2 )){
HXLINE(2380)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v18,"v") = cx_ite12;
HXLINE(2381)													{
HXLINE(2382)														HX_VARI_NAME( int,vind21,"vind2") = (vind + (int)1);
HXLINE(2383)														if ((vind21 == s2->polygon->edgeCnt)) {
HXLINE(2383)															vind21 = (int)0;
            														}
HXLINE(2384)														if (inte->__get(vind)) {
HXLINE(2385)															if (ins->__get(vind21)) {
HXLINE(2387)																HX_VARI_NAME( Float,vx3,"vx") = ((Float)0.0);
HXLINE(2388)																HX_VARI_NAME( Float,vy3,"vy") = ((Float)0.0);
HXLINE(2389)																{
HXLINE(2390)																	vx3 = (v18->x - u10->x);
HXLINE(2391)																	vy3 = (v18->y - u10->y);
            																}
HXLINE(2393)																HX_VARI_NAME( Float,qx3,"qx") = ((Float)0.0);
HXLINE(2394)																HX_VARI_NAME( Float,qy3,"qy") = ((Float)0.0);
HXLINE(2395)																{
HXLINE(2396)																	qx3 = (u10->x - s1->circle->worldCOMx);
HXLINE(2397)																	qy3 = (u10->y - s1->circle->worldCOMy);
            																}
HXLINE(2399)																HX_VARI_NAME( Float,A3,"A") = ((vx3 * vx3) + (vy3 * vy3));
HXLINE(2400)																HX_VARI_NAME( Float,B3,"B") = ((int)2 * ((qx3 * vx3) + (qy3 * vy3)));
HXLINE(2402)																HX_VARI_NAME( Float,D3,"D") = ::Math_obj::sqrt(((B3 * B3) - (((int)4 * A3) * (((qx3 * qx3) + (qy3 * qy3)) - (s1->circle->radius * s1->circle->radius)))));
HXLINE(2403)																A3 = ((Float)(int)1 / (Float)((int)2 * A3));
HXLINE(2404)																HX_VARI_NAME( Float,t14,"t") = ((-(B3) - D3) * A3);
HXLINE(2386)																HX_VAR_NAME( Float,tval2,"tval");
HXLINE(2405)																if ((t14 < ::nape::Config_obj::epsilon)) {
HXLINE(2386)																	tval2 = ((-(B3) + D3) * A3);
            																}
            																else {
HXLINE(2386)																	tval2 = t14;
            																}
HXLINE(2408)																HX_VARI_NAME( Float,cx8,"cx") = ((Float)0.0);
HXLINE(2409)																HX_VARI_NAME( Float,cy8,"cy") = ((Float)0.0);
HXLINE(2410)																{
HXLINE(2411)																	HX_VARI_NAME( Float,T8,"T") = tval2;
HXLINE(2420)																	cx8 = (u10->x + ((v18->x - u10->x) * T8));
HXLINE(2421)																	cy8 = (u10->y + ((v18->y - u10->y) * T8));
            																}
HXLINE(2423)																HX_VARI_NAME( Float,dx9,"dx") = ((Float)0.0);
HXDLIN(2423)																HX_VARI_NAME( Float,dy9,"dy") = ((Float)0.0);
HXDLIN(2423)																{
HXLINE(2423)																	dx9 = (fst_vert1->x - cx8);
HXDLIN(2423)																	dy9 = (fst_vert1->y - cy8);
            																}
HXDLIN(2423)																if ((((dx9 * dx9) + (dy9 * dy9)) < ::nape::Config_obj::epsilon)) {
HXLINE(2424)																	state = (int)0;
HXLINE(2427)																	goto _hx_goto_65;
            																}
HXLINE(2430)																HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret8,"ret");
HXDLIN(2430)																{
HXLINE(2430)																	if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2430)																		ret8 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            																	}
            																	else {
HXLINE(2430)																		ret8 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2430)																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret8->next;
HXDLIN(2430)																		ret8->next = null();
            																	}
HXDLIN(2430)																	ret8->weak = false;
            																}
HXDLIN(2430)																ret8->_immutable = false;
HXDLIN(2430)																{
HXLINE(2430)																	ret8->x = cx8;
HXDLIN(2430)																	ret8->y = cy8;
            																}
HXDLIN(2430)																HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cp2,"cp") = ret8;
HXLINE(2431)																::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt);
HXLINE(2432)																::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(cp2);
HXLINE(2433)																::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(cp2);
HXLINE(2434)																state = (int)1;
HXLINE(2437)																goto _hx_goto_65;
            															}
            															else {
HXLINE(2441)																HX_VARI_NAME( Float,t01,"t0") = ((Float)0.0);
HXLINE(2442)																HX_VARI_NAME( Float,t15,"t1") = ((Float)0.0);
HXLINE(2444)																HX_VARI_NAME( Float,vx4,"vx") = ((Float)0.0);
HXLINE(2445)																HX_VARI_NAME( Float,vy4,"vy") = ((Float)0.0);
HXLINE(2446)																{
HXLINE(2447)																	vx4 = (v18->x - u10->x);
HXLINE(2448)																	vy4 = (v18->y - u10->y);
            																}
HXLINE(2450)																HX_VARI_NAME( Float,qx4,"qx") = ((Float)0.0);
HXLINE(2451)																HX_VARI_NAME( Float,qy4,"qy") = ((Float)0.0);
HXLINE(2452)																{
HXLINE(2453)																	qx4 = (u10->x - s1->circle->worldCOMx);
HXLINE(2454)																	qy4 = (u10->y - s1->circle->worldCOMy);
            																}
HXLINE(2456)																HX_VARI_NAME( Float,A4,"A") = ((vx4 * vx4) + (vy4 * vy4));
HXLINE(2457)																HX_VARI_NAME( Float,B4,"B") = ((int)2 * ((qx4 * vx4) + (qy4 * vy4)));
HXLINE(2459)																HX_VARI_NAME( Float,D4,"D") = ((B4 * B4) - (((int)4 * A4) * (((qx4 * qx4) + (qy4 * qy4)) - (s1->circle->radius * s1->circle->radius))));
HXLINE(2443)																HX_VAR_NAME( bool,two1,"two");
HXLINE(2460)																if (((D4 * D4) < ::nape::Config_obj::epsilon)) {
HXLINE(2461)																	if ((D4 < (int)0)) {
HXLINE(2461)																		t01 = ((Float)10.0);
            																	}
            																	else {
HXLINE(2462)																		t15 = ((Float)-(B4) / (Float)((int)2 * A4));
HXDLIN(2462)																		t01 = t15;
            																	}
HXLINE(2443)																	two1 = false;
            																}
            																else {
HXLINE(2466)																	D4 = ::Math_obj::sqrt(D4);
HXLINE(2467)																	A4 = ((Float)(int)1 / (Float)((int)2 * A4));
HXLINE(2468)																	t01 = ((-(B4) - D4) * A4);
HXLINE(2469)																	t15 = ((-(B4) + D4) * A4);
HXLINE(2443)																	two1 = true;
            																}
HXLINE(2473)																bool _hx_tmp33;
HXDLIN(2473)																if ((t01 < ((int)1 - ::nape::Config_obj::epsilon))) {
HXLINE(2473)																	_hx_tmp33 = (t15 > ::nape::Config_obj::epsilon);
            																}
            																else {
HXLINE(2473)																	_hx_tmp33 = false;
            																}
HXDLIN(2473)																if (_hx_tmp33) {
HXLINE(2474)																	HX_VARI_NAME( Float,cx9,"cx") = ((Float)0.0);
HXLINE(2475)																	HX_VARI_NAME( Float,cy9,"cy") = ((Float)0.0);
HXLINE(2476)																	{
HXLINE(2477)																		HX_VARI_NAME( Float,T9,"T") = t01;
HXLINE(2486)																		cx9 = (u10->x + ((v18->x - u10->x) * T9));
HXLINE(2487)																		cy9 = (u10->y + ((v18->y - u10->y) * T9));
            																	}
HXLINE(2489)																	bool _hx_tmp34;
HXDLIN(2489)																	if (hx::IsNotNull( fst_vert1 )) {
HXLINE(2489)																		HX_VARI_NAME( Float,dx10,"dx") = ((Float)0.0);
HXDLIN(2489)																		HX_VARI_NAME( Float,dy10,"dy") = ((Float)0.0);
HXDLIN(2489)																		{
HXLINE(2489)																			dx10 = (fst_vert1->x - cx9);
HXDLIN(2489)																			dy10 = (fst_vert1->y - cy9);
            																		}
HXDLIN(2489)																		_hx_tmp34 = (((dx10 * dx10) + (dy10 * dy10)) < ::nape::Config_obj::epsilon);
            																	}
            																	else {
HXLINE(2489)																		_hx_tmp34 = false;
            																	}
HXDLIN(2489)																	if (_hx_tmp34) {
HXLINE(2490)																		state = (int)0;
HXLINE(2493)																		goto _hx_goto_65;
            																	}
HXLINE(2496)																	HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret9,"ret");
HXDLIN(2496)																	{
HXLINE(2496)																		if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2496)																			ret9 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            																		}
            																		else {
HXLINE(2496)																			ret9 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2496)																			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret9->next;
HXDLIN(2496)																			ret9->next = null();
            																		}
HXDLIN(2496)																		ret9->weak = false;
            																	}
HXDLIN(2496)																	ret9->_immutable = false;
HXDLIN(2496)																	{
HXLINE(2496)																		ret9->x = cx9;
HXDLIN(2496)																		ret9->y = cy9;
            																	}
HXDLIN(2496)																	HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cp3,"cp") = ret9;
HXLINE(2497)																	if (hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head )) {
HXLINE(2498)																		::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt);
HXLINE(2499)																		::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(cp3);
            																	}
HXLINE(2501)																	::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(cp3);
HXLINE(2502)																	if (hx::IsNull( fst_vert1 )) {
HXLINE(2502)																		fst_vert1 = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt;
            																	}
HXLINE(2503)																	if (two1) {
HXLINE(2504)																		HX_VARI_NAME( Float,cx10,"cx") = ((Float)0.0);
HXLINE(2505)																		HX_VARI_NAME( Float,cy10,"cy") = ((Float)0.0);
HXLINE(2506)																		{
HXLINE(2507)																			HX_VARI_NAME( Float,T10,"T") = t15;
HXLINE(2516)																			cx10 = (u10->x + ((v18->x - u10->x) * T10));
HXLINE(2517)																			cy10 = (u10->y + ((v18->y - u10->y) * T10));
            																		}
HXLINE(2519)																		HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret10,"ret");
HXDLIN(2519)																		{
HXLINE(2519)																			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(2519)																				ret10 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            																			}
            																			else {
HXLINE(2519)																				ret10 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2519)																				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret10->next;
HXDLIN(2519)																				ret10->next = null();
            																			}
HXDLIN(2519)																			ret10->weak = false;
            																		}
HXDLIN(2519)																		ret10->_immutable = false;
HXDLIN(2519)																		{
HXLINE(2519)																			ret10->x = cx10;
HXDLIN(2519)																			ret10->y = cy10;
            																		}
HXDLIN(2519)																		::zpp_nape::geom::ZPP_Collide_obj::flowpoly->add(ret10);
            																	}
            																}
            															}
            														}
HXLINE(2524)														u10 = v18;
HXLINE(2525)														vi1 = cx_ite12;
HXLINE(2526)														vind = vind21;
            													}
HXLINE(2528)													cx_ite12 = cx_ite12->next;
HXLINE(2529)													if (hx::IsNull( cx_ite12 )) {
HXLINE(2529)														cx_ite12 = s2->polygon->gverts->next;
            													}
            												}
            												_hx_goto_65:;
            											}
            										}
            									}
            								}
            								_hx_goto_63:;
HXLINE(2534)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head )) {
HXLINE(1173)									return false;
            								}
            								else {
HXLINE(2537)									if (hx::IsNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->next )) {
HXLINE(2538)										HX_VARI( bool,all) = true;
HXLINE(2539)										{
HXLINE(2540)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite13,"cx_ite") = s2->polygon->edges->head;
HXLINE(2541)											while(hx::IsNotNull( cx_ite13 )){
HXLINE(2542)												HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = cx_ite13->elt;
HXLINE(2545)												if ((((e->gnormx * s1->circle->worldCOMx) + (e->gnormy * s1->circle->worldCOMy)) > e->gprojection)) {
HXLINE(2546)													all = false;
HXLINE(2547)													goto _hx_goto_66;
            												}
HXLINE(2550)												cx_ite13 = cx_ite13->next;
            											}
            											_hx_goto_66:;
            										}
HXLINE(2553)										if (all) {
HXLINE(2554)											{
HXLINE(2554)												arb->overlap = s1->circle->area;
HXDLIN(2554)												{
HXLINE(2554)													arb->centroidx = s1->circle->worldCOMx;
HXDLIN(2554)													arb->centroidy = s1->circle->worldCOMy;
            												}
            											}
HXLINE(1173)											return true;
            										}
            										else {
HXLINE(1173)											return false;
            										}
            									}
            									else {
HXLINE(2560)										HX_VARI_NAME( Float,COMx1,"COMx") = (int)0;
HXLINE(2561)										HX_VARI_NAME( Float,COMy1,"COMy") = (int)0;
HXLINE(2578)										HX_VARI_NAME( Float,area4,"area") = ((Float)0.0);
HXLINE(2579)										if (hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->next->next )) {
HXLINE(2580)											HX_VARI( Float,parea) = ((Float)0.0);
HXLINE(2581)											HX_VARI( Float,pCOMx) = ((Float)0.0);
HXLINE(2582)											HX_VARI( Float,pCOMy) = ((Float)0.0);
HXLINE(2583)											{
HXLINE(2584)												{
HXLINE(2585)													pCOMx = (int)0;
HXLINE(2586)													pCOMy = (int)0;
            												}
HXLINE(2604)												parea = ((Float)0.0);
HXLINE(2605)												{
HXLINE(2606)													HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cx_ite14,"cx_ite") = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head;
HXLINE(2607)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u11,"u") = cx_ite14->elt;
HXLINE(2608)													cx_ite14 = cx_ite14->next;
HXLINE(2609)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v19,"v") = cx_ite14->elt;
HXLINE(2610)													cx_ite14 = cx_ite14->next;
HXLINE(2611)													while(hx::IsNotNull( cx_ite14 )){
HXLINE(2612)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w12,"w") = cx_ite14->elt;
HXLINE(2613)														{
HXLINE(2614)															parea = (parea + (v19->x * (w12->y - u11->y)));
HXLINE(2615)															HX_VARI_NAME( Float,cf12,"cf") = ((w12->y * v19->x) - (w12->x * v19->y));
HXLINE(2616)															pCOMx = (pCOMx + ((v19->x + w12->x) * cf12));
HXLINE(2617)															pCOMy = (pCOMy + ((v19->y + w12->y) * cf12));
            														}
HXLINE(2619)														u11 = v19;
HXLINE(2620)														v19 = w12;
HXLINE(2621)														cx_ite14 = cx_ite14->next;
            													}
HXLINE(2623)													cx_ite14 = ::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head;
HXLINE(2624)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w13,"w") = cx_ite14->elt;
HXLINE(2625)													{
HXLINE(2626)														parea = (parea + (v19->x * (w13->y - u11->y)));
HXLINE(2627)														HX_VARI_NAME( Float,cf13,"cf") = ((w13->y * v19->x) - (w13->x * v19->y));
HXLINE(2628)														pCOMx = (pCOMx + ((v19->x + w13->x) * cf13));
HXLINE(2629)														pCOMy = (pCOMy + ((v19->y + w13->y) * cf13));
            													}
HXLINE(2631)													u11 = v19;
HXLINE(2633)													cx_ite14 = cx_ite14->next;
HXLINE(2634)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w14,"w") = cx_ite14->elt;
HXLINE(2635)													{
HXLINE(2636)														parea = (parea + (w13->x * (w14->y - u11->y)));
HXLINE(2637)														HX_VARI_NAME( Float,cf14,"cf") = ((w14->y * w13->x) - (w14->x * w13->y));
HXLINE(2638)														pCOMx = (pCOMx + ((w13->x + w14->x) * cf14));
HXLINE(2639)														pCOMy = (pCOMy + ((w13->y + w14->y) * cf14));
            													}
            												}
HXLINE(2642)												parea = (parea * ((Float)0.5));
HXLINE(2643)												HX_VARI_NAME( Float,ia1,"ia") = ((Float)(int)1 / (Float)((int)6 * parea));
HXLINE(2644)												{
HXLINE(2654)													pCOMx = (pCOMx * ia1);
HXLINE(2655)													pCOMy = (pCOMy * ia1);
            												}
            											}
HXLINE(2658)											{
HXLINE(2659)												HX_VARI_NAME( Float,t16,"t") = -(parea);
HXLINE(2668)												COMx1 = (COMx1 + (pCOMx * t16));
HXLINE(2669)												COMy1 = (COMy1 + (pCOMy * t16));
            											}
HXLINE(2671)											area4 = (((Float)0.0) - parea);
            										}
            										else {
HXLINE(2674)											::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->elt);
HXLINE(2675)											::zpp_nape::geom::ZPP_Collide_obj::flowsegs->add(::zpp_nape::geom::ZPP_Collide_obj::flowpoly->head->next->elt);
            										}
HXLINE(2677)										while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Collide_obj::flowsegs->head )){
HXLINE(2678)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u12,"u") = ::zpp_nape::geom::ZPP_Collide_obj::flowsegs->pop_unsafe();
HXLINE(2679)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v20,"v") = ::zpp_nape::geom::ZPP_Collide_obj::flowsegs->pop_unsafe();
HXLINE(2680)											HX_VARI_NAME( Float,dx11,"dx") = ((Float)0.0);
HXLINE(2681)											HX_VARI_NAME( Float,dy11,"dy") = ((Float)0.0);
HXLINE(2682)											{
HXLINE(2683)												dx11 = (v20->x - u12->x);
HXLINE(2684)												dy11 = (v20->y - u12->y);
            											}
HXLINE(2686)											HX_VARI( Float,nx) = ((Float)0.0);
HXLINE(2687)											HX_VARI( Float,ny) = ((Float)0.0);
HXLINE(2688)											{
HXLINE(2689)												nx = dx11;
HXLINE(2690)												ny = dy11;
            											}
HXLINE(2708)											{
HXLINE(2709)												{
HXLINE(2719)													HX_VARI( Float,imag) = ((Float)((Float)1.0) / (Float)::Math_obj::sqrt(((nx * nx) + (ny * ny))));
HXLINE(2720)													{
HXLINE(2730)														nx = (nx * imag);
HXLINE(2731)														ny = (ny * imag);
            													}
            												}
HXLINE(2734)												{
HXLINE(2735)													HX_VARI_NAME( Float,t17,"t") = nx;
HXLINE(2736)													nx = -(ny);
HXLINE(2737)													ny = t17;
            												}
            											}
HXLINE(2740)											HX_VARI_NAME( Float,cx11,"cx") = ((Float)0.0);
HXLINE(2741)											HX_VARI_NAME( Float,cy11,"cy") = ((Float)0.0);
HXLINE(2742)											{
HXLINE(2743)												cx11 = (u12->x + v20->x);
HXLINE(2744)												cy11 = (u12->y + v20->y);
            											}
HXLINE(2746)											{
HXLINE(2756)												cx11 = (cx11 * ((Float)0.5));
HXLINE(2757)												cy11 = (cy11 * ((Float)0.5));
            											}
HXLINE(2759)											{
HXLINE(2769)												cx11 = (cx11 - s1->circle->worldCOMx);
HXLINE(2770)												cy11 = (cy11 - s1->circle->worldCOMy);
            											}
HXLINE(2772)											HX_VARI( Float,xd) = ((nx * cx11) + (ny * cy11));
HXLINE(2773)											HX_VARI( Float,carea) = ((Float)0.0);
HXLINE(2774)											HX_VARI( Float,ccom) = ((Float)0.0);
HXLINE(2775)											{
HXLINE(2777)												HX_VARI( Float,cos) = ((Float)xd / (Float)s1->circle->radius);
HXLINE(2778)												HX_VARI( Float,sin) = ::Math_obj::sqrt(((int)1 - (cos * cos)));
HXLINE(2779)												HX_VARI( Float,theta) = ::Math_obj::acos(cos);
HXLINE(2780)												carea = (s1->circle->radius * ((s1->circle->radius * theta) - (xd * sin)));
HXLINE(2781)												ccom = ((Float)((((((Float)0.66666666666666663) * s1->circle->radius) * sin) * sin) * sin) / (Float)(theta - (cos * sin)));
            											}
HXLINE(2783)											{
HXLINE(2784)												cx11 = s1->circle->worldCOMx;
HXLINE(2785)												cy11 = s1->circle->worldCOMy;
            											}
HXLINE(2803)											{
HXLINE(2804)												HX_VARI_NAME( Float,t18,"t") = ccom;
HXLINE(2813)												cx11 = (cx11 + (nx * t18));
HXLINE(2814)												cy11 = (cy11 + (ny * t18));
            											}
HXLINE(2816)											{
HXLINE(2817)												HX_VARI_NAME( Float,t19,"t") = carea;
HXLINE(2826)												COMx1 = (COMx1 + (cx11 * t19));
HXLINE(2827)												COMy1 = (COMy1 + (cy11 * t19));
            											}
HXLINE(2829)											area4 = (area4 + carea);
            										}
HXLINE(2831)										{
HXLINE(2832)											HX_VARI_NAME( Float,t20,"t") = ((Float)((Float)1.0) / (Float)area4);
HXLINE(2841)											COMx1 = (COMx1 * t20);
HXLINE(2842)											COMy1 = (COMy1 * t20);
            										}
HXLINE(2844)										{
HXLINE(2844)											arb->overlap = area4;
HXDLIN(2844)											{
HXLINE(2844)												arb->centroidx = COMx1;
HXDLIN(2844)												arb->centroidy = COMy1;
            											}
            										}
HXLINE(1173)										return true;
            									}
            								}
            							}
            						}
            						else {
HXLINE(1173)							return false;
            						}
            					}
            				}
            				else {
HXLINE(1173)					return false;
            				}
            			}
            		}
            		else {
HXLINE(2856)			HX_VARI(  ::zpp_nape::shape::ZPP_Circle,c1) = s1->circle;
HXLINE(2857)			HX_VARI(  ::zpp_nape::shape::ZPP_Circle,c2) = s2->circle;
HXLINE(2858)			HX_VARI( Float,deltax) = ((Float)0.0);
HXLINE(2859)			HX_VARI( Float,deltay) = ((Float)0.0);
HXLINE(2860)			{
HXLINE(2861)				deltax = (c2->worldCOMx - c1->worldCOMx);
HXLINE(2862)				deltay = (c2->worldCOMy - c1->worldCOMy);
            			}
HXLINE(2864)			HX_VARI( Float,cr) = (c1->radius + c2->radius);
HXLINE(2865)			HX_VARI( Float,ds) = ((deltax * deltax) + (deltay * deltay));
HXLINE(2866)			if ((ds > (cr * cr))) {
HXLINE(2855)				return false;
            			}
            			else {
HXLINE(2867)				if ((ds < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE(2868)					if ((c1->radius < c2->radius)) {
HXLINE(2868)						arb->overlap = c1->area;
HXDLIN(2868)						{
HXLINE(2868)							arb->centroidx = c1->worldCOMx;
HXDLIN(2868)							arb->centroidy = c1->worldCOMy;
            						}
            					}
            					else {
HXLINE(2869)						arb->overlap = c2->area;
HXDLIN(2869)						{
HXLINE(2869)							arb->centroidx = c2->worldCOMx;
HXDLIN(2869)							arb->centroidy = c2->worldCOMy;
            						}
            					}
HXLINE(2855)					return true;
            				}
            				else {
HXLINE(2873)					HX_VARI( Float,d) = ::Math_obj::sqrt(ds);
HXLINE(2874)					HX_VARI( Float,id) = ((Float)(int)1 / (Float)d);
HXLINE(2875)					HX_VARI( Float,x1) = (((Float)0.5) * (d - (((c2->radius * c2->radius) - (c1->radius * c1->radius)) * id)));
HXLINE(2876)					if ((x1 <= -(c1->radius))) {
HXLINE(2876)						arb->overlap = c1->area;
HXDLIN(2876)						{
HXLINE(2876)							arb->centroidx = c1->worldCOMx;
HXDLIN(2876)							arb->centroidy = c1->worldCOMy;
            						}
            					}
            					else {
HXLINE(2878)						HX_VARI( Float,x2) = (d - x1);
HXLINE(2879)						if ((x2 <= -(c2->radius))) {
HXLINE(2879)							arb->overlap = c2->area;
HXDLIN(2879)							{
HXLINE(2879)								arb->centroidx = c2->worldCOMx;
HXDLIN(2879)								arb->centroidy = c2->worldCOMy;
            							}
            						}
            						else {
HXLINE(2881)							HX_VARI_NAME( Float,area11,"area1") = ((Float)0.0);
HXLINE(2882)							HX_VARI( Float,y1) = ((Float)0.0);
HXLINE(2883)							HX_VARI_NAME( Float,area21,"area2") = ((Float)0.0);
HXLINE(2884)							HX_VARI( Float,y2) = ((Float)0.0);
HXLINE(2885)							{
HXLINE(2887)								HX_VARI_NAME( Float,cos1,"cos") = ((Float)x1 / (Float)c1->radius);
HXLINE(2888)								HX_VARI_NAME( Float,sin1,"sin") = ::Math_obj::sqrt(((int)1 - (cos1 * cos1)));
HXLINE(2889)								HX_VARI_NAME( Float,theta1,"theta") = ::Math_obj::acos(cos1);
HXLINE(2890)								area11 = (c1->radius * ((c1->radius * theta1) - (x1 * sin1)));
HXLINE(2891)								y1 = ((Float)((((((Float)0.66666666666666663) * c1->radius) * sin1) * sin1) * sin1) / (Float)(theta1 - (cos1 * sin1)));
            							}
HXLINE(2893)							{
HXLINE(2895)								HX_VARI_NAME( Float,cos2,"cos") = ((Float)x2 / (Float)c2->radius);
HXLINE(2896)								HX_VARI_NAME( Float,sin2,"sin") = ::Math_obj::sqrt(((int)1 - (cos2 * cos2)));
HXLINE(2897)								HX_VARI_NAME( Float,theta2,"theta") = ::Math_obj::acos(cos2);
HXLINE(2898)								area21 = (c2->radius * ((c2->radius * theta2) - (x2 * sin2)));
HXLINE(2899)								y2 = ((Float)((((((Float)0.66666666666666663) * c2->radius) * sin2) * sin2) * sin2) / (Float)(theta2 - (cos2 * sin2)));
            							}
HXLINE(2901)							HX_VARI( Float,tarea) = (area11 + area21);
HXLINE(2902)							HX_VARI( Float,ya) = (((Float)((y1 * area11) + ((d - y2) * area21)) / (Float)tarea) * id);
HXLINE(2903)							{
HXLINE(2903)								arb->overlap = tarea;
HXDLIN(2903)								{
HXLINE(2903)									arb->centroidx = (c1->worldCOMx + (deltax * ya));
HXDLIN(2903)									arb->centroidy = (c1->worldCOMy + (deltay * ya));
            								}
            							}
            						}
            					}
HXLINE(2855)					return true;
            				}
            			}
            		}
HXLINE(1172)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_Collide_obj,flowCollide,return )

 ::zpp_nape::util::ZNPList_ZPP_Vec2 ZPP_Collide_obj::flowpoly;

 ::zpp_nape::util::ZNPList_ZPP_Vec2 ZPP_Collide_obj::flowsegs;


ZPP_Collide_obj::ZPP_Collide_obj()
{
}

bool ZPP_Collide_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"flowpoly") ) { outValue = flowpoly; return true; }
		if (HX_FIELD_EQ(inName,"flowsegs") ) { outValue = flowsegs; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"containTest") ) { outValue = containTest_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"testCollide") ) { outValue = testCollide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flowCollide") ) { outValue = flowCollide_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"polyContains") ) { outValue = polyContains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bodyContains") ) { outValue = bodyContains_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shapeContains") ) { outValue = shapeContains_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"circleContains") ) { outValue = circleContains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"contactCollide") ) { outValue = contactCollide_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testCollide_safe") ) { outValue = testCollide_safe_dyn(); return true; }
	}
	return false;
}

bool ZPP_Collide_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"flowpoly") ) { flowpoly=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"flowsegs") ) { flowsegs=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_Vec2 >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Collide_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_Collide_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Vec2*/ ,(void *) &ZPP_Collide_obj::flowpoly,HX_HCSTRING("flowpoly","\x3a","\x25","\xd0","\x85")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Vec2*/ ,(void *) &ZPP_Collide_obj::flowsegs,HX_HCSTRING("flowsegs","\x2c","\x2e","\xc4","\x87")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ZPP_Collide_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Collide_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Collide_obj::flowpoly,"flowpoly");
	HX_MARK_MEMBER_NAME(ZPP_Collide_obj::flowsegs,"flowsegs");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Collide_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Collide_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Collide_obj::flowpoly,"flowpoly");
	HX_VISIT_MEMBER_NAME(ZPP_Collide_obj::flowsegs,"flowsegs");
};

#endif

hx::Class ZPP_Collide_obj::__mClass;

static ::String ZPP_Collide_obj_sStaticFields[] = {
	HX_HCSTRING("circleContains","\x4f","\x18","\x13","\x61"),
	HX_HCSTRING("polyContains","\x8b","\xc0","\xe2","\x7d"),
	HX_HCSTRING("shapeContains","\x60","\x82","\x83","\x3f"),
	HX_HCSTRING("bodyContains","\xe1","\x02","\x17","\xe3"),
	HX_HCSTRING("containTest","\x46","\xee","\xe5","\x0f"),
	HX_HCSTRING("contactCollide","\xbe","\xf0","\xaa","\x41"),
	HX_HCSTRING("testCollide_safe","\x60","\x48","\x78","\x60"),
	HX_HCSTRING("testCollide","\x4c","\x9d","\x2c","\xaa"),
	HX_HCSTRING("flowCollide","\x30","\xb9","\xdd","\x3f"),
	HX_HCSTRING("flowpoly","\x3a","\x25","\xd0","\x85"),
	HX_HCSTRING("flowsegs","\x2c","\x2e","\xc4","\x87"),
	::String(null())
};

void ZPP_Collide_obj::__register()
{
	hx::Object *dummy = new ZPP_Collide_obj;
	ZPP_Collide_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_Collide","\x08","\xe3","\x95","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Collide_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Collide_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Collide_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Collide_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Collide_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Collide_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Collide_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Collide_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Collide_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_e890b6717661a957_2910_boot)
HXLINE(2910)		flowpoly =  ::zpp_nape::util::ZNPList_ZPP_Vec2_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e890b6717661a957_2911_boot)
HXLINE(2911)		flowsegs =  ::zpp_nape::util::ZNPList_ZPP_Vec2_obj::__alloc( HX_CTX );
            	}
}

} // end namespace zpp_nape
} // end namespace geom
