// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Geom
#include <zpp_nape/geom/ZPP_Geom.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_16da28f7cc2b1aa0_175_validateShape,"zpp_nape.geom.ZPP_Geom","validateShape",0x53c3322f,"zpp_nape.geom.ZPP_Geom.validateShape","zpp_nape/geom/Geom.hx",175,0x229d5cd1)
namespace zpp_nape{
namespace geom{

void ZPP_Geom_obj::__construct() { }

Dynamic ZPP_Geom_obj::__CreateEmpty() { return new ZPP_Geom_obj; }

void *ZPP_Geom_obj::_hx_vtable = 0;

Dynamic ZPP_Geom_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Geom_obj > _hx_result = new ZPP_Geom_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Geom_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12301ece;
}

void ZPP_Geom_obj::validateShape( ::zpp_nape::shape::ZPP_Shape s){
            	HX_STACKFRAME(&_hx_pos_16da28f7cc2b1aa0_175_validateShape)
            	HX_STACK_ARG(s,"s")
HXLINE( 176)		if ((s->type == (int)1)) {
HXLINE( 176)			HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,_this) = s->polygon;
HXDLIN( 176)			if (_this->zip_gaxi) {
HXLINE( 176)				if (hx::IsNotNull( _this->body )) {
HXLINE( 176)					_this->zip_gaxi = false;
HXDLIN( 176)					_this->validate_laxi();
HXDLIN( 176)					{
HXLINE( 176)						HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this1,"_this") = _this->body;
HXDLIN( 176)						if (_this1->zip_axis) {
HXLINE( 176)							_this1->zip_axis = false;
HXDLIN( 176)							{
HXLINE( 176)								_this1->axisx = ::Math_obj::sin(_this1->rot);
HXDLIN( 176)								_this1->axisy = ::Math_obj::cos(_this1->rot);
            							}
            						}
            					}
HXDLIN( 176)					if (_this->zip_gverts) {
HXLINE( 176)						if (hx::IsNotNull( _this->body )) {
HXLINE( 176)							_this->zip_gverts = false;
HXDLIN( 176)							_this->validate_lverts();
HXDLIN( 176)							{
HXLINE( 176)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this2,"_this") = _this->body;
HXDLIN( 176)								if (_this2->zip_axis) {
HXLINE( 176)									_this2->zip_axis = false;
HXDLIN( 176)									{
HXLINE( 176)										_this2->axisx = ::Math_obj::sin(_this2->rot);
HXDLIN( 176)										_this2->axisy = ::Math_obj::cos(_this2->rot);
            									}
            								}
            							}
HXDLIN( 176)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = _this->lverts->next;
HXDLIN( 176)							{
HXLINE( 176)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = _this->gverts->next;
HXDLIN( 176)								while(hx::IsNotNull( cx_ite )){
HXLINE( 176)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite;
HXDLIN( 176)									{
HXLINE( 176)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 176)										li = li->next;
HXDLIN( 176)										{
HXLINE( 176)											g->x = (_this->body->posx + ((_this->body->axisy * l->x) - (_this->body->axisx * l->y)));
HXDLIN( 176)											g->y = (_this->body->posy + ((l->x * _this->body->axisx) + (l->y * _this->body->axisy)));
            										}
            									}
HXDLIN( 176)									cx_ite = cx_ite->next;
            								}
            							}
            						}
            					}
HXDLIN( 176)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite) = _this->edges->head;
HXDLIN( 176)					{
HXLINE( 176)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = _this->gverts->next;
HXDLIN( 176)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN( 176)						cx_ite1 = cx_ite1->next;
HXDLIN( 176)						while(hx::IsNotNull( cx_ite1 )){
HXLINE( 176)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN( 176)							{
HXLINE( 176)								HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = ite->elt;
HXDLIN( 176)								ite = ite->next;
HXDLIN( 176)								e->gp0 = u;
HXDLIN( 176)								e->gp1 = v;
HXDLIN( 176)								{
HXLINE( 176)									e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
HXDLIN( 176)									e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
            								}
HXDLIN( 176)								e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
HXDLIN( 176)								if (hx::IsNotNull( e->wrap_gnorm )) {
HXLINE( 176)									e->wrap_gnorm->zpp_inner->x = e->gnormx;
HXDLIN( 176)									e->wrap_gnorm->zpp_inner->y = e->gnormy;
            								}
HXDLIN( 176)								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
HXDLIN( 176)								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
            							}
HXDLIN( 176)							u = v;
HXDLIN( 176)							cx_ite1 = cx_ite1->next;
            						}
HXDLIN( 176)						{
HXLINE( 176)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e1,"e") = ite->elt;
HXDLIN( 176)							e1->gp0 = u;
HXDLIN( 176)							e1->gp1 = _this->gverts->next;
HXDLIN( 176)							{
HXLINE( 176)								e1->gnormx = ((_this->body->axisy * e1->lnormx) - (_this->body->axisx * e1->lnormy));
HXDLIN( 176)								e1->gnormy = ((e1->lnormx * _this->body->axisx) + (e1->lnormy * _this->body->axisy));
            							}
HXDLIN( 176)							e1->gprojection = (((_this->body->posx * e1->gnormx) + (_this->body->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 176)							if (hx::IsNotNull( e1->wrap_gnorm )) {
HXLINE( 176)								e1->wrap_gnorm->zpp_inner->x = e1->gnormx;
HXDLIN( 176)								e1->wrap_gnorm->zpp_inner->y = e1->gnormy;
            							}
HXDLIN( 176)							e1->tp0 = ((e1->gp0->y * e1->gnormx) - (e1->gp0->x * e1->gnormy));
HXDLIN( 176)							e1->tp1 = ((e1->gp1->y * e1->gnormx) - (e1->gp1->x * e1->gnormy));
            						}
            					}
            				}
            			}
            		}
HXLINE( 177)		if (s->zip_aabb) {
HXLINE( 177)			if (hx::IsNotNull( s->body )) {
HXLINE( 177)				s->zip_aabb = false;
HXDLIN( 177)				if ((s->type == (int)0)) {
HXLINE( 177)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,_this3,"_this") = s->circle;
HXDLIN( 177)					if (_this3->zip_worldCOM) {
HXLINE( 177)						if (hx::IsNotNull( _this3->body )) {
HXLINE( 177)							_this3->zip_worldCOM = false;
HXDLIN( 177)							if (_this3->zip_localCOM) {
HXLINE( 177)								_this3->zip_localCOM = false;
HXDLIN( 177)								if ((_this3->type == (int)1)) {
HXLINE( 177)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this4,"_this") = _this3->polygon;
HXDLIN( 177)									if (hx::IsNull( _this4->lverts->next->next )) {
HXLINE( 177)										_this4->localCOMx = _this4->lverts->next->x;
HXDLIN( 177)										_this4->localCOMy = _this4->lverts->next->y;
            									}
            									else {
HXLINE( 177)										if (hx::IsNull( _this4->lverts->next->next->next )) {
HXLINE( 177)											{
HXLINE( 177)												_this4->localCOMx = _this4->lverts->next->x;
HXDLIN( 177)												_this4->localCOMy = _this4->lverts->next->y;
            											}
HXDLIN( 177)											{
HXLINE( 177)												_this4->localCOMx = (_this4->localCOMx + _this4->lverts->next->next->x);
HXDLIN( 177)												_this4->localCOMy = (_this4->localCOMy + _this4->lverts->next->next->y);
            											}
HXDLIN( 177)											{
HXLINE( 177)												_this4->localCOMx = (_this4->localCOMx * ((Float)0.5));
HXDLIN( 177)												_this4->localCOMy = (_this4->localCOMy * ((Float)0.5));
            											}
            										}
            										else {
HXLINE( 177)											{
HXLINE( 177)												_this4->localCOMx = (int)0;
HXDLIN( 177)												_this4->localCOMy = (int)0;
            											}
HXDLIN( 177)											HX_VARI( Float,area) = ((Float)0.0);
HXDLIN( 177)											{
HXLINE( 177)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = _this4->lverts->next;
HXDLIN( 177)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u1,"u") = cx_ite2;
HXDLIN( 177)												cx_ite2 = cx_ite2->next;
HXDLIN( 177)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite2;
HXDLIN( 177)												cx_ite2 = cx_ite2->next;
HXDLIN( 177)												while(hx::IsNotNull( cx_ite2 )){
HXLINE( 177)													HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w) = cx_ite2;
HXDLIN( 177)													{
HXLINE( 177)														area = (area + (v1->x * (w->y - u1->y)));
HXDLIN( 177)														HX_VARI( Float,cf) = ((w->y * v1->x) - (w->x * v1->y));
HXDLIN( 177)														_this4->localCOMx = (_this4->localCOMx + ((v1->x + w->x) * cf));
HXDLIN( 177)														_this4->localCOMy = (_this4->localCOMy + ((v1->y + w->y) * cf));
            													}
HXDLIN( 177)													u1 = v1;
HXDLIN( 177)													v1 = w;
HXDLIN( 177)													cx_ite2 = cx_ite2->next;
            												}
HXDLIN( 177)												cx_ite2 = _this4->lverts->next;
HXDLIN( 177)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w1,"w") = cx_ite2;
HXDLIN( 177)												{
HXLINE( 177)													area = (area + (v1->x * (w1->y - u1->y)));
HXDLIN( 177)													HX_VARI_NAME( Float,cf1,"cf") = ((w1->y * v1->x) - (w1->x * v1->y));
HXDLIN( 177)													_this4->localCOMx = (_this4->localCOMx + ((v1->x + w1->x) * cf1));
HXDLIN( 177)													_this4->localCOMy = (_this4->localCOMy + ((v1->y + w1->y) * cf1));
            												}
HXDLIN( 177)												u1 = v1;
HXDLIN( 177)												cx_ite2 = cx_ite2->next;
HXDLIN( 177)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w2,"w") = cx_ite2;
HXDLIN( 177)												{
HXLINE( 177)													area = (area + (w1->x * (w2->y - u1->y)));
HXDLIN( 177)													HX_VARI_NAME( Float,cf2,"cf") = ((w2->y * w1->x) - (w2->x * w1->y));
HXDLIN( 177)													_this4->localCOMx = (_this4->localCOMx + ((w1->x + w2->x) * cf2));
HXDLIN( 177)													_this4->localCOMy = (_this4->localCOMy + ((w1->y + w2->y) * cf2));
            												}
            											}
HXDLIN( 177)											area = ((Float)(int)1 / (Float)((int)3 * area));
HXDLIN( 177)											{
HXLINE( 177)												HX_VARI( Float,t) = area;
HXDLIN( 177)												_this4->localCOMx = (_this4->localCOMx * t);
HXDLIN( 177)												_this4->localCOMy = (_this4->localCOMy * t);
            											}
            										}
            									}
            								}
HXDLIN( 177)								if (hx::IsNotNull( _this3->wrap_localCOM )) {
HXLINE( 177)									_this3->wrap_localCOM->zpp_inner->x = _this3->localCOMx;
HXDLIN( 177)									_this3->wrap_localCOM->zpp_inner->y = _this3->localCOMy;
            								}
            							}
HXDLIN( 177)							{
HXLINE( 177)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this5,"_this") = _this3->body;
HXDLIN( 177)								if (_this5->zip_axis) {
HXLINE( 177)									_this5->zip_axis = false;
HXDLIN( 177)									{
HXLINE( 177)										_this5->axisx = ::Math_obj::sin(_this5->rot);
HXDLIN( 177)										_this5->axisy = ::Math_obj::cos(_this5->rot);
            									}
            								}
            							}
HXDLIN( 177)							{
HXLINE( 177)								_this3->worldCOMx = (_this3->body->posx + ((_this3->body->axisy * _this3->localCOMx) - (_this3->body->axisx * _this3->localCOMy)));
HXDLIN( 177)								_this3->worldCOMy = (_this3->body->posy + ((_this3->localCOMx * _this3->body->axisx) + (_this3->localCOMy * _this3->body->axisy)));
            							}
            						}
            					}
HXDLIN( 177)					HX_VARI( Float,rx) = _this3->radius;
HXDLIN( 177)					HX_VARI( Float,ry) = _this3->radius;
HXDLIN( 177)					{
HXLINE( 177)						_this3->aabb->minx = (_this3->worldCOMx - rx);
HXDLIN( 177)						_this3->aabb->miny = (_this3->worldCOMy - ry);
            					}
HXDLIN( 177)					{
HXLINE( 177)						_this3->aabb->maxx = (_this3->worldCOMx + rx);
HXDLIN( 177)						_this3->aabb->maxy = (_this3->worldCOMy + ry);
            					}
            				}
            				else {
HXLINE( 177)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this6,"_this") = s->polygon;
HXDLIN( 177)					if (_this6->zip_gverts) {
HXLINE( 177)						if (hx::IsNotNull( _this6->body )) {
HXLINE( 177)							_this6->zip_gverts = false;
HXDLIN( 177)							_this6->validate_lverts();
HXDLIN( 177)							{
HXLINE( 177)								HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this7,"_this") = _this6->body;
HXDLIN( 177)								if (_this7->zip_axis) {
HXLINE( 177)									_this7->zip_axis = false;
HXDLIN( 177)									{
HXLINE( 177)										_this7->axisx = ::Math_obj::sin(_this7->rot);
HXDLIN( 177)										_this7->axisy = ::Math_obj::cos(_this7->rot);
            									}
            								}
            							}
HXDLIN( 177)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li1,"li") = _this6->lverts->next;
HXDLIN( 177)							{
HXLINE( 177)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = _this6->gverts->next;
HXDLIN( 177)								while(hx::IsNotNull( cx_ite3 )){
HXLINE( 177)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g1,"g") = cx_ite3;
HXDLIN( 177)									{
HXLINE( 177)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l1,"l") = li1;
HXDLIN( 177)										li1 = li1->next;
HXDLIN( 177)										{
HXLINE( 177)											g1->x = (_this6->body->posx + ((_this6->body->axisy * l1->x) - (_this6->body->axisx * l1->y)));
HXDLIN( 177)											g1->y = (_this6->body->posy + ((l1->x * _this6->body->axisx) + (l1->y * _this6->body->axisy)));
            										}
            									}
HXDLIN( 177)									cx_ite3 = cx_ite3->next;
            								}
            							}
            						}
            					}
HXDLIN( 177)					 ::zpp_nape::geom::ZPP_Vec2 _this8 = _this6->gverts->next;
HXDLIN( 177)					{
HXLINE( 177)						_this6->aabb->minx = _this8->x;
HXDLIN( 177)						_this6->aabb->miny = _this8->y;
            					}
HXDLIN( 177)					{
HXLINE( 177)						_this6->aabb->maxx = _this8->x;
HXDLIN( 177)						_this6->aabb->maxy = _this8->y;
            					}
HXDLIN( 177)					{
HXLINE( 177)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = _this6->gverts->next->next;
HXDLIN( 177)						while(hx::IsNotNull( cx_ite4 )){
HXLINE( 177)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,p) = cx_ite4;
HXDLIN( 177)							{
HXLINE( 177)								if ((p->x < _this6->aabb->minx)) {
HXLINE( 177)									_this6->aabb->minx = p->x;
            								}
HXDLIN( 177)								if ((p->x > _this6->aabb->maxx)) {
HXLINE( 177)									_this6->aabb->maxx = p->x;
            								}
HXDLIN( 177)								if ((p->y < _this6->aabb->miny)) {
HXLINE( 177)									_this6->aabb->miny = p->y;
            								}
HXDLIN( 177)								if ((p->y > _this6->aabb->maxy)) {
HXLINE( 177)									_this6->aabb->maxy = p->y;
            								}
            							}
HXDLIN( 177)							cx_ite4 = cx_ite4->next;
            						}
            					}
            				}
            			}
            		}
HXLINE( 178)		if (s->zip_worldCOM) {
HXLINE( 178)			if (hx::IsNotNull( s->body )) {
HXLINE( 178)				s->zip_worldCOM = false;
HXDLIN( 178)				if (s->zip_localCOM) {
HXLINE( 178)					s->zip_localCOM = false;
HXDLIN( 178)					if ((s->type == (int)1)) {
HXLINE( 178)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,_this9,"_this") = s->polygon;
HXDLIN( 178)						if (hx::IsNull( _this9->lverts->next->next )) {
HXLINE( 178)							_this9->localCOMx = _this9->lverts->next->x;
HXDLIN( 178)							_this9->localCOMy = _this9->lverts->next->y;
            						}
            						else {
HXLINE( 178)							if (hx::IsNull( _this9->lverts->next->next->next )) {
HXLINE( 178)								{
HXLINE( 178)									_this9->localCOMx = _this9->lverts->next->x;
HXDLIN( 178)									_this9->localCOMy = _this9->lverts->next->y;
            								}
HXDLIN( 178)								{
HXLINE( 178)									_this9->localCOMx = (_this9->localCOMx + _this9->lverts->next->next->x);
HXDLIN( 178)									_this9->localCOMy = (_this9->localCOMy + _this9->lverts->next->next->y);
            								}
HXDLIN( 178)								{
HXLINE( 178)									_this9->localCOMx = (_this9->localCOMx * ((Float)0.5));
HXDLIN( 178)									_this9->localCOMy = (_this9->localCOMy * ((Float)0.5));
            								}
            							}
            							else {
HXLINE( 178)								{
HXLINE( 178)									_this9->localCOMx = (int)0;
HXDLIN( 178)									_this9->localCOMy = (int)0;
            								}
HXDLIN( 178)								HX_VARI_NAME( Float,area1,"area") = ((Float)0.0);
HXDLIN( 178)								{
HXLINE( 178)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite5,"cx_ite") = _this9->lverts->next;
HXDLIN( 178)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u2,"u") = cx_ite5;
HXDLIN( 178)									cx_ite5 = cx_ite5->next;
HXDLIN( 178)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v2,"v") = cx_ite5;
HXDLIN( 178)									cx_ite5 = cx_ite5->next;
HXDLIN( 178)									while(hx::IsNotNull( cx_ite5 )){
HXLINE( 178)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w3,"w") = cx_ite5;
HXDLIN( 178)										{
HXLINE( 178)											area1 = (area1 + (v2->x * (w3->y - u2->y)));
HXDLIN( 178)											HX_VARI_NAME( Float,cf3,"cf") = ((w3->y * v2->x) - (w3->x * v2->y));
HXDLIN( 178)											_this9->localCOMx = (_this9->localCOMx + ((v2->x + w3->x) * cf3));
HXDLIN( 178)											_this9->localCOMy = (_this9->localCOMy + ((v2->y + w3->y) * cf3));
            										}
HXDLIN( 178)										u2 = v2;
HXDLIN( 178)										v2 = w3;
HXDLIN( 178)										cx_ite5 = cx_ite5->next;
            									}
HXDLIN( 178)									cx_ite5 = _this9->lverts->next;
HXDLIN( 178)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w4,"w") = cx_ite5;
HXDLIN( 178)									{
HXLINE( 178)										area1 = (area1 + (v2->x * (w4->y - u2->y)));
HXDLIN( 178)										HX_VARI_NAME( Float,cf4,"cf") = ((w4->y * v2->x) - (w4->x * v2->y));
HXDLIN( 178)										_this9->localCOMx = (_this9->localCOMx + ((v2->x + w4->x) * cf4));
HXDLIN( 178)										_this9->localCOMy = (_this9->localCOMy + ((v2->y + w4->y) * cf4));
            									}
HXDLIN( 178)									u2 = v2;
HXDLIN( 178)									cx_ite5 = cx_ite5->next;
HXDLIN( 178)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w5,"w") = cx_ite5;
HXDLIN( 178)									{
HXLINE( 178)										area1 = (area1 + (w4->x * (w5->y - u2->y)));
HXDLIN( 178)										HX_VARI_NAME( Float,cf5,"cf") = ((w5->y * w4->x) - (w5->x * w4->y));
HXDLIN( 178)										_this9->localCOMx = (_this9->localCOMx + ((w4->x + w5->x) * cf5));
HXDLIN( 178)										_this9->localCOMy = (_this9->localCOMy + ((w4->y + w5->y) * cf5));
            									}
            								}
HXDLIN( 178)								area1 = ((Float)(int)1 / (Float)((int)3 * area1));
HXDLIN( 178)								{
HXLINE( 178)									HX_VARI_NAME( Float,t1,"t") = area1;
HXDLIN( 178)									_this9->localCOMx = (_this9->localCOMx * t1);
HXDLIN( 178)									_this9->localCOMy = (_this9->localCOMy * t1);
            								}
            							}
            						}
            					}
HXDLIN( 178)					if (hx::IsNotNull( s->wrap_localCOM )) {
HXLINE( 178)						s->wrap_localCOM->zpp_inner->x = s->localCOMx;
HXDLIN( 178)						s->wrap_localCOM->zpp_inner->y = s->localCOMy;
            					}
            				}
HXDLIN( 178)				{
HXLINE( 178)					HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this10,"_this") = s->body;
HXDLIN( 178)					if (_this10->zip_axis) {
HXLINE( 178)						_this10->zip_axis = false;
HXDLIN( 178)						{
HXLINE( 178)							_this10->axisx = ::Math_obj::sin(_this10->rot);
HXDLIN( 178)							_this10->axisy = ::Math_obj::cos(_this10->rot);
            						}
            					}
            				}
HXDLIN( 178)				{
HXLINE( 178)					s->worldCOMx = (s->body->posx + ((s->body->axisy * s->localCOMx) - (s->body->axisx * s->localCOMy)));
HXDLIN( 178)					s->worldCOMy = (s->body->posy + ((s->localCOMx * s->body->axisx) + (s->localCOMy * s->body->axisy)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Geom_obj,validateShape,(void))


ZPP_Geom_obj::ZPP_Geom_obj()
{
}

bool ZPP_Geom_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"validateShape") ) { outValue = validateShape_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Geom_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ZPP_Geom_obj_sStaticStorageInfo = 0;
#endif

static void ZPP_Geom_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Geom_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Geom_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Geom_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_Geom_obj::__mClass;

static ::String ZPP_Geom_obj_sStaticFields[] = {
	HX_HCSTRING("validateShape","\xab","\xa2","\x1c","\xa8"),
	::String(null())
};

void ZPP_Geom_obj::__register()
{
	hx::Object *dummy = new ZPP_Geom_obj;
	ZPP_Geom_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_Geom","\xf2","\x90","\xc8","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Geom_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_Geom_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Geom_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Geom_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Geom_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Geom_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Geom_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace geom
