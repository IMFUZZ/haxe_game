// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_ZPP_ID
#include <zpp_nape/ZPP_ID.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleVert
#include <zpp_nape/geom/ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleVert
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e4ee633ba080f8a3_174_new,"zpp_nape.geom.ZPP_SimpleVert","new",0xe715762b,"zpp_nape.geom.ZPP_SimpleVert.new","zpp_nape/geom/Simple.hx",174,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_e4ee633ba080f8a3_208_free,"zpp_nape.geom.ZPP_SimpleVert","free",0x46720881,"zpp_nape.geom.ZPP_SimpleVert.free","zpp_nape/geom/Simple.hx",208,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_e4ee633ba080f8a3_215_alloc,"zpp_nape.geom.ZPP_SimpleVert","alloc",0x78629300,"zpp_nape.geom.ZPP_SimpleVert.alloc","zpp_nape/geom/Simple.hx",215,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_e4ee633ba080f8a3_238_less_xy,"zpp_nape.geom.ZPP_SimpleVert","less_xy",0x4bca30b2,"zpp_nape.geom.ZPP_SimpleVert.less_xy","zpp_nape/geom/Simple.hx",238,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_e4ee633ba080f8a3_240_swap_nodes,"zpp_nape.geom.ZPP_SimpleVert","swap_nodes",0xaac053da,"zpp_nape.geom.ZPP_SimpleVert.swap_nodes","zpp_nape/geom/Simple.hx",240,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_e4ee633ba080f8a3_246_get,"zpp_nape.geom.ZPP_SimpleVert","get",0xe7102661,"zpp_nape.geom.ZPP_SimpleVert.get","zpp_nape/geom/Simple.hx",246,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_e4ee633ba080f8a3_181_boot,"zpp_nape.geom.ZPP_SimpleVert","boot",0x43caf007,"zpp_nape.geom.ZPP_SimpleVert.boot","zpp_nape/geom/Simple.hx",181,0x62f156db)
namespace zpp_nape{
namespace geom{

void ZPP_SimpleVert_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e4ee633ba080f8a3_174_new)
            	HX_STACK_THIS(this)
HXLINE( 205)		this->node = null();
HXLINE( 180)		this->next = null();
HXLINE( 179)		this->id = (int)0;
HXLINE( 178)		this->links = null();
HXLINE( 177)		this->y = ((Float)0.0);
HXLINE( 176)		this->x = ((Float)0.0);
HXLINE( 175)		this->forced = false;
HXLINE( 217)		this->id = ::zpp_nape::ZPP_ID_obj::ZPP_SimpleVert();
HXLINE( 219)		if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE( 220)			this->links =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 226)			this->links = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE( 227)			::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = this->links->next;
HXLINE( 228)			this->links->next = null();
            		}
HXLINE( 235)		this->links->lt = ::zpp_nape::geom::ZPP_SimpleVert_obj::less_xy_dyn();
            	}

Dynamic ZPP_SimpleVert_obj::__CreateEmpty() { return new ZPP_SimpleVert_obj; }

void *ZPP_SimpleVert_obj::_hx_vtable = 0;

Dynamic ZPP_SimpleVert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SimpleVert_obj > _hx_result = new ZPP_SimpleVert_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SimpleVert_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0734be5d;
}

void ZPP_SimpleVert_obj::free(){
            	HX_STACKFRAME(&_hx_pos_e4ee633ba080f8a3_208_free)
            	HX_STACK_THIS(this)
HXLINE( 209)		this->links->clear();
HXLINE( 210)		this->node = null();
HXLINE( 211)		this->forced = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimpleVert_obj,free,(void))

void ZPP_SimpleVert_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_e4ee633ba080f8a3_215_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimpleVert_obj,alloc,(void))

 ::zpp_nape::geom::ZPP_SimpleVert ZPP_SimpleVert_obj::zpp_pool;

bool ZPP_SimpleVert_obj::less_xy( ::zpp_nape::geom::ZPP_SimpleVert p, ::zpp_nape::geom::ZPP_SimpleVert q){
            	HX_STACKFRAME(&_hx_pos_e4ee633ba080f8a3_238_less_xy)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 238)		if (!((p->y < q->y))) {
HXLINE( 238)			if ((p->y == q->y)) {
HXLINE( 238)				return (p->x < q->x);
            			}
            			else {
HXLINE( 238)				return false;
            			}
            		}
            		else {
HXLINE( 238)			return true;
            		}
HXDLIN( 238)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimpleVert_obj,less_xy,return )

void ZPP_SimpleVert_obj::swap_nodes( ::zpp_nape::geom::ZPP_SimpleVert p, ::zpp_nape::geom::ZPP_SimpleVert q){
            	HX_STACKFRAME(&_hx_pos_e4ee633ba080f8a3_240_swap_nodes)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 241)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,t) = p->node;
HXLINE( 242)		p->node = q->node;
HXLINE( 243)		q->node = t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimpleVert_obj,swap_nodes,(void))

 ::zpp_nape::geom::ZPP_SimpleVert ZPP_SimpleVert_obj::get(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_e4ee633ba080f8a3_246_get)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 247)		HX_VAR(  ::zpp_nape::geom::ZPP_SimpleVert,ret);
HXLINE( 249)		if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE( 250)			ret =  ::zpp_nape::geom::ZPP_SimpleVert_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 256)			ret = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE( 257)			::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = ret->next;
HXLINE( 258)			ret->next = null();
            		}
HXLINE( 265)		{
HXLINE( 266)			ret->x = x;
HXLINE( 267)			ret->y = y;
            		}
HXLINE( 285)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimpleVert_obj,get,return )


hx::ObjectPtr< ZPP_SimpleVert_obj > ZPP_SimpleVert_obj::__new() {
	hx::ObjectPtr< ZPP_SimpleVert_obj > __this = new ZPP_SimpleVert_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SimpleVert_obj > ZPP_SimpleVert_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SimpleVert_obj *__this = (ZPP_SimpleVert_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SimpleVert_obj), true, "zpp_nape.geom.ZPP_SimpleVert"));
	*(void **)__this = ZPP_SimpleVert_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SimpleVert_obj::ZPP_SimpleVert_obj()
{
}

void ZPP_SimpleVert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SimpleVert);
	HX_MARK_MEMBER_NAME(forced,"forced");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(links,"links");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(node,"node");
	HX_MARK_END_CLASS();
}

void ZPP_SimpleVert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(forced,"forced");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(links,"links");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(node,"node");
}

hx::Val ZPP_SimpleVert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"node") ) { return hx::Val( node); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"links") ) { return hx::Val( links); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forced") ) { return hx::Val( forced); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_SimpleVert_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"less_xy") ) { outValue = less_xy_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"swap_nodes") ) { outValue = swap_nodes_dyn(); return true; }
	}
	return false;
}

hx::Val ZPP_SimpleVert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_SimpleVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"node") ) { node=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"links") ) { links=inValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forced") ) { forced=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_SimpleVert_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_SimpleVert >(); return true; }
	}
	return false;
}

void ZPP_SimpleVert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("links","\x39","\xe3","\x01","\x75"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("node","\x02","\x0a","\x0a","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SimpleVert_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(ZPP_SimpleVert_obj,forced),HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd")},
	{hx::fsFloat,(int)offsetof(ZPP_SimpleVert_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_SimpleVert_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleVert*/ ,(int)offsetof(ZPP_SimpleVert_obj,links),HX_HCSTRING("links","\x39","\xe3","\x01","\x75")},
	{hx::fsInt,(int)offsetof(ZPP_SimpleVert_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimpleVert*/ ,(int)offsetof(ZPP_SimpleVert_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleVert*/ ,(int)offsetof(ZPP_SimpleVert_obj,node),HX_HCSTRING("node","\x02","\x0a","\x0a","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_SimpleVert_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimpleVert*/ ,(void *) &ZPP_SimpleVert_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_SimpleVert_obj_sMemberFields[] = {
	HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("links","\x39","\xe3","\x01","\x75"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("node","\x02","\x0a","\x0a","\x49"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	::String(null()) };

static void ZPP_SimpleVert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SimpleVert_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_SimpleVert_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SimpleVert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SimpleVert_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_SimpleVert_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_SimpleVert_obj::__mClass;

static ::String ZPP_SimpleVert_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("less_xy","\x67","\x49","\x7a","\x70"),
	HX_HCSTRING("swap_nodes","\x45","\xda","\xd2","\xe8"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null())
};

void ZPP_SimpleVert_obj::__register()
{
	hx::Object *dummy = new ZPP_SimpleVert_obj;
	ZPP_SimpleVert_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_SimpleVert","\xb9","\x84","\xa6","\x93");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_SimpleVert_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_SimpleVert_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_SimpleVert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_SimpleVert_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SimpleVert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SimpleVert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SimpleVert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SimpleVert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SimpleVert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_SimpleVert_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e4ee633ba080f8a3_181_boot)
HXLINE( 181)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
