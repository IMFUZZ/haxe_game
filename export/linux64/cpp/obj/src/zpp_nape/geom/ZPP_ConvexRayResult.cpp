// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_ConvexResult
#include <nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_174_new,"zpp_nape.geom.ZPP_ConvexRayResult","new",0xb0fabd7c,"zpp_nape.geom.ZPP_ConvexRayResult.new","zpp_nape/geom/ConvexRayResult.hx",174,0x535a39cf)
HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_234_disposed,"zpp_nape.geom.ZPP_ConvexRayResult","disposed",0x23c01849,"zpp_nape.geom.ZPP_ConvexRayResult.disposed","zpp_nape/geom/ConvexRayResult.hx",234,0x535a39cf)
HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_239_free,"zpp_nape.geom.ZPP_ConvexRayResult","free",0x252b2810,"zpp_nape.geom.ZPP_ConvexRayResult.free","zpp_nape/geom/ConvexRayResult.hx",239,0x535a39cf)
HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_187_getRay,"zpp_nape.geom.ZPP_ConvexRayResult","getRay",0x18533b58,"zpp_nape.geom.ZPP_ConvexRayResult.getRay","zpp_nape/geom/ConvexRayResult.hx",187,0x535a39cf)
HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_209_getConvex,"zpp_nape.geom.ZPP_ConvexRayResult","getConvex",0xe0a4aab9,"zpp_nape.geom.ZPP_ConvexRayResult.getConvex","zpp_nape/geom/ConvexRayResult.hx",209,0x535a39cf)
HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_177_boot,"zpp_nape.geom.ZPP_ConvexRayResult","boot",0x22840f96,"zpp_nape.geom.ZPP_ConvexRayResult.boot","zpp_nape/geom/ConvexRayResult.hx",177,0x535a39cf)
HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_180_boot,"zpp_nape.geom.ZPP_ConvexRayResult","boot",0x22840f96,"zpp_nape.geom.ZPP_ConvexRayResult.boot","zpp_nape/geom/ConvexRayResult.hx",180,0x535a39cf)
HX_DEFINE_STACK_FRAME(_hx_pos_74e08a15acb54d1a_186_boot,"zpp_nape.geom.ZPP_ConvexRayResult","boot",0x22840f96,"zpp_nape.geom.ZPP_ConvexRayResult.boot","zpp_nape/geom/ConvexRayResult.hx",186,0x535a39cf)
namespace zpp_nape{
namespace geom{

void ZPP_ConvexRayResult_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_174_new)
            	HX_STACK_THIS(this)
HXLINE( 184)		this->toiDistance = ((Float)0.0);
HXLINE( 183)		this->next = null();
HXLINE( 182)		this->inner = false;
HXLINE( 181)		this->ray = null();
HXLINE( 179)		this->position = null();
HXLINE( 178)		this->convex = null();
HXLINE( 176)		this->shape = null();
HXLINE( 175)		this->normal = null();
            	}

Dynamic ZPP_ConvexRayResult_obj::__CreateEmpty() { return new ZPP_ConvexRayResult_obj; }

void *ZPP_ConvexRayResult_obj::_hx_vtable = 0;

Dynamic ZPP_ConvexRayResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_ConvexRayResult_obj > _hx_result = new ZPP_ConvexRayResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_ConvexRayResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44641112;
}

void ZPP_ConvexRayResult_obj::disposed(){
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_234_disposed)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ConvexRayResult_obj,disposed,(void))

void ZPP_ConvexRayResult_obj::free(){
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_239_free)
            	HX_STACK_THIS(this)
HXLINE( 240)		this->normal->zpp_inner->_immutable = false;
HXLINE( 241)		{
HXLINE( 241)			HX_VARI(  ::nape::geom::Vec2,_this) = this->normal;
HXDLIN( 241)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = _this->zpp_inner;
HXDLIN( 241)			_this->zpp_inner->outer = null();
HXDLIN( 241)			_this->zpp_inner = null();
HXDLIN( 241)			{
HXLINE( 241)				_this->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 241)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this;
            			}
HXDLIN( 241)			{
HXLINE( 241)				{
HXLINE( 241)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 241)						inner->outer->zpp_inner = null();
HXDLIN( 241)						inner->outer = null();
            					}
HXDLIN( 241)					inner->_isimmutable = null();
HXDLIN( 241)					inner->_validate = null();
HXDLIN( 241)					inner->_invalidate = null();
            				}
HXDLIN( 241)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 241)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 242)		if (hx::IsNotNull( this->position )) {
HXLINE( 243)			this->position->zpp_inner->_immutable = false;
HXLINE( 244)			{
HXLINE( 244)				HX_VARI_NAME(  ::nape::geom::Vec2,_this1,"_this") = this->position;
HXDLIN( 244)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = _this1->zpp_inner;
HXDLIN( 244)				_this1->zpp_inner->outer = null();
HXDLIN( 244)				_this1->zpp_inner = null();
HXDLIN( 244)				{
HXLINE( 244)					_this1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 244)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this1;
            				}
HXDLIN( 244)				{
HXLINE( 244)					{
HXLINE( 244)						if (hx::IsNotNull( inner1->outer )) {
HXLINE( 244)							inner1->outer->zpp_inner = null();
HXDLIN( 244)							inner1->outer = null();
            						}
HXDLIN( 244)						inner1->_isimmutable = null();
HXDLIN( 244)						inner1->_validate = null();
HXDLIN( 244)						inner1->_invalidate = null();
            					}
HXDLIN( 244)					inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 244)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            				}
            			}
            		}
HXLINE( 246)		this->shape = null();
HXLINE( 247)		this->toiDistance = ((Float)0.0);
HXLINE( 248)		if (hx::IsNotNull( this->convex )) {
HXLINE( 249)			this->next = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool;
HXLINE( 250)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool = hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE( 253)			this->next = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool;
HXLINE( 254)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool = hx::ObjectPtr<OBJ_>(this);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_ConvexRayResult_obj,free,(void))

 ::zpp_nape::geom::ZPP_ConvexRayResult ZPP_ConvexRayResult_obj::convexPool;

 ::zpp_nape::geom::ZPP_ConvexRayResult ZPP_ConvexRayResult_obj::rayPool;

bool ZPP_ConvexRayResult_obj::internal;

 ::nape::geom::RayResult ZPP_ConvexRayResult_obj::getRay( ::nape::geom::Vec2 normal,Float time,bool inner, ::nape::shape::Shape shape){
            	HX_GC_STACKFRAME(&_hx_pos_74e08a15acb54d1a_187_getRay)
            	HX_STACK_ARG(normal,"normal")
            	HX_STACK_ARG(time,"time")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(shape,"shape")
HXLINE( 188)		HX_VAR(  ::nape::geom::RayResult,ret);
HXLINE( 189)		if (hx::IsNull( ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool )) {
HXLINE( 190)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = true;
HXLINE( 191)			ret =  ::nape::geom::RayResult_obj::__alloc( HX_CTX );
HXLINE( 192)			ret->zpp_inner =  ::zpp_nape::geom::ZPP_ConvexRayResult_obj::__alloc( HX_CTX );
HXLINE( 193)			ret->zpp_inner->ray = ret;
HXLINE( 194)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = false;
            		}
            		else {
HXLINE( 197)			ret = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool->ray;
HXLINE( 198)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::rayPool->next;
HXLINE( 199)			ret->zpp_inner->next = null();
            		}
HXLINE( 201)		HX_VARI(  ::zpp_nape::geom::ZPP_ConvexRayResult,zinner) = ret->zpp_inner;
HXLINE( 202)		zinner->normal = normal;
HXLINE( 203)		normal->zpp_inner->_immutable = true;
HXLINE( 204)		zinner->toiDistance = time;
HXLINE( 205)		zinner->inner = inner;
HXLINE( 206)		zinner->shape = shape;
HXLINE( 207)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_ConvexRayResult_obj,getRay,return )

 ::nape::geom::ConvexResult ZPP_ConvexRayResult_obj::getConvex( ::nape::geom::Vec2 normal, ::nape::geom::Vec2 position,Float toiDistance, ::nape::shape::Shape shape){
            	HX_GC_STACKFRAME(&_hx_pos_74e08a15acb54d1a_209_getConvex)
            	HX_STACK_ARG(normal,"normal")
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(toiDistance,"toiDistance")
            	HX_STACK_ARG(shape,"shape")
HXLINE( 210)		HX_VAR(  ::nape::geom::ConvexResult,ret);
HXLINE( 211)		if (hx::IsNull( ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool )) {
HXLINE( 212)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = true;
HXLINE( 213)			ret =  ::nape::geom::ConvexResult_obj::__alloc( HX_CTX );
HXLINE( 214)			ret->zpp_inner =  ::zpp_nape::geom::ZPP_ConvexRayResult_obj::__alloc( HX_CTX );
HXLINE( 215)			ret->zpp_inner->convex = ret;
HXLINE( 216)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::internal = false;
            		}
            		else {
HXLINE( 219)			ret = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool->convex;
HXLINE( 220)			::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::convexPool->next;
HXLINE( 221)			ret->zpp_inner->next = null();
            		}
HXLINE( 223)		HX_VARI(  ::zpp_nape::geom::ZPP_ConvexRayResult,inner) = ret->zpp_inner;
HXLINE( 224)		inner->normal = normal;
HXLINE( 225)		inner->position = position;
HXLINE( 226)		normal->zpp_inner->_immutable = true;
HXLINE( 227)		position->zpp_inner->_immutable = true;
HXLINE( 228)		inner->toiDistance = toiDistance;
HXLINE( 229)		inner->shape = shape;
HXLINE( 230)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_ConvexRayResult_obj,getConvex,return )


hx::ObjectPtr< ZPP_ConvexRayResult_obj > ZPP_ConvexRayResult_obj::__new() {
	hx::ObjectPtr< ZPP_ConvexRayResult_obj > __this = new ZPP_ConvexRayResult_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_ConvexRayResult_obj > ZPP_ConvexRayResult_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_ConvexRayResult_obj *__this = (ZPP_ConvexRayResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_ConvexRayResult_obj), true, "zpp_nape.geom.ZPP_ConvexRayResult"));
	*(void **)__this = ZPP_ConvexRayResult_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_ConvexRayResult_obj::ZPP_ConvexRayResult_obj()
{
}

void ZPP_ConvexRayResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_ConvexRayResult);
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(shape,"shape");
	HX_MARK_MEMBER_NAME(convex,"convex");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(ray,"ray");
	HX_MARK_MEMBER_NAME(inner,"inner");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(toiDistance,"toiDistance");
	HX_MARK_END_CLASS();
}

void ZPP_ConvexRayResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(shape,"shape");
	HX_VISIT_MEMBER_NAME(convex,"convex");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(ray,"ray");
	HX_VISIT_MEMBER_NAME(inner,"inner");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(toiDistance,"toiDistance");
}

hx::Val ZPP_ConvexRayResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { return hx::Val( shape); }
		if (HX_FIELD_EQ(inName,"inner") ) { return hx::Val( inner); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal); }
		if (HX_FIELD_EQ(inName,"convex") ) { return hx::Val( convex); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position); }
		if (HX_FIELD_EQ(inName,"disposed") ) { return hx::Val( disposed_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toiDistance") ) { return hx::Val( toiDistance); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_ConvexRayResult_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getRay") ) { outValue = getRay_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayPool") ) { outValue = rayPool; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { outValue = internal; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getConvex") ) { outValue = getConvex_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"convexPool") ) { outValue = convexPool; return true; }
	}
	return false;
}

hx::Val ZPP_ConvexRayResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { ray=inValue.Cast<  ::nape::geom::RayResult >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { shape=inValue.Cast<  ::nape::shape::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inner") ) { inner=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"convex") ) { convex=inValue.Cast<  ::nape::geom::ConvexResult >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toiDistance") ) { toiDistance=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_ConvexRayResult_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"rayPool") ) { rayPool=ioValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"internal") ) { internal=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"convexPool") ) { convexPool=ioValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return true; }
	}
	return false;
}

void ZPP_ConvexRayResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	outFields->push(HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"));
	outFields->push(HX_HCSTRING("convex","\x67","\x77","\xde","\xc7"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("ray","\xea","\xd5","\x56","\x00"));
	outFields->push(HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("toiDistance","\xe3","\xf3","\xc1","\x8f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_ConvexRayResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_ConvexRayResult_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{hx::fsObject /*::nape::shape::Shape*/ ,(int)offsetof(ZPP_ConvexRayResult_obj,shape),HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c")},
	{hx::fsObject /*::nape::geom::ConvexResult*/ ,(int)offsetof(ZPP_ConvexRayResult_obj,convex),HX_HCSTRING("convex","\x67","\x77","\xde","\xc7")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_ConvexRayResult_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*::nape::geom::RayResult*/ ,(int)offsetof(ZPP_ConvexRayResult_obj,ray),HX_HCSTRING("ray","\xea","\xd5","\x56","\x00")},
	{hx::fsBool,(int)offsetof(ZPP_ConvexRayResult_obj,inner),HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_ConvexRayResult*/ ,(int)offsetof(ZPP_ConvexRayResult_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsFloat,(int)offsetof(ZPP_ConvexRayResult_obj,toiDistance),HX_HCSTRING("toiDistance","\xe3","\xf3","\xc1","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_ConvexRayResult_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_ConvexRayResult*/ ,(void *) &ZPP_ConvexRayResult_obj::convexPool,HX_HCSTRING("convexPool","\xe3","\x63","\x61","\x41")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_ConvexRayResult*/ ,(void *) &ZPP_ConvexRayResult_obj::rayPool,HX_HCSTRING("rayPool","\xe6","\xbf","\xde","\x2d")},
	{hx::fsBool,(void *) &ZPP_ConvexRayResult_obj::internal,HX_HCSTRING("internal","\x3d","\x67","\x76","\x28")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_ConvexRayResult_obj_sMemberFields[] = {
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"),
	HX_HCSTRING("convex","\x67","\x77","\xde","\xc7"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("ray","\xea","\xd5","\x56","\x00"),
	HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("toiDistance","\xe3","\xf3","\xc1","\x8f"),
	HX_HCSTRING("disposed","\xe5","\x0a","\xa4","\x27"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	::String(null()) };

static void ZPP_ConvexRayResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_ConvexRayResult_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_ConvexRayResult_obj::convexPool,"convexPool");
	HX_MARK_MEMBER_NAME(ZPP_ConvexRayResult_obj::rayPool,"rayPool");
	HX_MARK_MEMBER_NAME(ZPP_ConvexRayResult_obj::internal,"internal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_ConvexRayResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_ConvexRayResult_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_ConvexRayResult_obj::convexPool,"convexPool");
	HX_VISIT_MEMBER_NAME(ZPP_ConvexRayResult_obj::rayPool,"rayPool");
	HX_VISIT_MEMBER_NAME(ZPP_ConvexRayResult_obj::internal,"internal");
};

#endif

hx::Class ZPP_ConvexRayResult_obj::__mClass;

static ::String ZPP_ConvexRayResult_obj_sStaticFields[] = {
	HX_HCSTRING("convexPool","\xe3","\x63","\x61","\x41"),
	HX_HCSTRING("rayPool","\xe6","\xbf","\xde","\x2d"),
	HX_HCSTRING("internal","\x3d","\x67","\x76","\x28"),
	HX_HCSTRING("getRay","\xf4","\x0e","\x26","\xa3"),
	HX_HCSTRING("getConvex","\x9d","\x00","\x35","\x44"),
	::String(null())
};

void ZPP_ConvexRayResult_obj::__register()
{
	hx::Object *dummy = new ZPP_ConvexRayResult_obj;
	ZPP_ConvexRayResult_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_ConvexRayResult","\x8a","\x8f","\x7f","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_ConvexRayResult_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_ConvexRayResult_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_ConvexRayResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_ConvexRayResult_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_ConvexRayResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_ConvexRayResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_ConvexRayResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_ConvexRayResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_ConvexRayResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_ConvexRayResult_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_177_boot)
HXLINE( 177)		convexPool = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_180_boot)
HXLINE( 180)		rayPool = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_74e08a15acb54d1a_186_boot)
HXLINE( 186)		internal = false;
            	}
}

} // end namespace zpp_nape
} // end namespace geom
