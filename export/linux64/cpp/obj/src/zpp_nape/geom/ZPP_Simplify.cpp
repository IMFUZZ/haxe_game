// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Simplify
#include <zpp_nape/geom/ZPP_Simplify.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimplifyP
#include <zpp_nape/geom/ZPP_SimplifyP.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimplifyV
#include <zpp_nape/geom/ZPP_SimplifyV.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SimplifyP
#include <zpp_nape/util/ZNPList_ZPP_SimplifyP.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimplifyP
#include <zpp_nape/util/ZNPNode_ZPP_SimplifyP.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c5f742f70f6c887d_323_lessval,"zpp_nape.geom.ZPP_Simplify","lessval",0xdccd3df9,"zpp_nape.geom.ZPP_Simplify.lessval","zpp_nape/geom/Simplify.hx",323,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_c5f742f70f6c887d_327_less,"zpp_nape.geom.ZPP_Simplify","less",0xc394c1e8,"zpp_nape.geom.ZPP_Simplify.less","zpp_nape/geom/Simplify.hx",327,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_c5f742f70f6c887d_329_distance,"zpp_nape.geom.ZPP_Simplify","distance",0xb91a3544,"zpp_nape.geom.ZPP_Simplify.distance","zpp_nape/geom/Simplify.hx",329,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_c5f742f70f6c887d_367_simplify,"zpp_nape.geom.ZPP_Simplify","simplify",0x6691f918,"zpp_nape.geom.ZPP_Simplify.simplify","zpp_nape/geom/Simplify.hx",367,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_c5f742f70f6c887d_366_boot,"zpp_nape.geom.ZPP_Simplify","boot",0xbd0032c1,"zpp_nape.geom.ZPP_Simplify.boot","zpp_nape/geom/Simplify.hx",366,0xe5fbc624)
namespace zpp_nape{
namespace geom{

void ZPP_Simplify_obj::__construct() { }

Dynamic ZPP_Simplify_obj::__CreateEmpty() { return new ZPP_Simplify_obj; }

void *ZPP_Simplify_obj::_hx_vtable = 0;

Dynamic ZPP_Simplify_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Simplify_obj > _hx_result = new ZPP_Simplify_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Simplify_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1605e81b;
}

Float ZPP_Simplify_obj::lessval( ::zpp_nape::geom::ZPP_SimplifyV a, ::zpp_nape::geom::ZPP_SimplifyV b){
            	HX_STACKFRAME(&_hx_pos_c5f742f70f6c887d_323_lessval)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 323)		return ((a->x - b->x) + (a->y - b->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Simplify_obj,lessval,return )

bool ZPP_Simplify_obj::less( ::zpp_nape::geom::ZPP_SimplifyV a, ::zpp_nape::geom::ZPP_SimplifyV b){
            	HX_STACKFRAME(&_hx_pos_c5f742f70f6c887d_327_less)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 327)		return (((a->x - b->x) + (a->y - b->y)) < ((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Simplify_obj,less,return )

Float ZPP_Simplify_obj::distance( ::zpp_nape::geom::ZPP_SimplifyV v, ::zpp_nape::geom::ZPP_SimplifyV a, ::zpp_nape::geom::ZPP_SimplifyV b){
            	HX_STACKFRAME(&_hx_pos_c5f742f70f6c887d_329_distance)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 330)		HX_VARI( Float,nx) = ((Float)0.0);
HXLINE( 331)		HX_VARI( Float,ny) = ((Float)0.0);
HXLINE( 332)		{
HXLINE( 333)			nx = (b->x - a->x);
HXLINE( 334)			ny = (b->y - a->y);
            		}
HXLINE( 336)		HX_VARI( Float,cx) = ((Float)0.0);
HXLINE( 337)		HX_VARI( Float,cy) = ((Float)0.0);
HXLINE( 338)		{
HXLINE( 339)			cx = (v->x - a->x);
HXLINE( 340)			cy = (v->y - a->y);
            		}
HXLINE( 343)		if ((((nx * nx) + (ny * ny)) == ((Float)0.0))) {
HXLINE( 343)			return ((cx * cx) + (cy * cy));
            		}
            		else {
HXLINE( 345)			HX_VARI( Float,t) = ((Float)((cx * nx) + (cy * ny)) / (Float)((nx * nx) + (ny * ny)));
HXLINE( 346)			if ((t <= (int)0)) {
HXLINE( 346)				return ((cx * cx) + (cy * cy));
            			}
            			else {
HXLINE( 347)				if ((t >= (int)1)) {
HXLINE( 347)					HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN( 347)					HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN( 347)					{
HXLINE( 347)						dx = (v->x - b->x);
HXDLIN( 347)						dy = (v->y - b->y);
            					}
HXDLIN( 347)					return ((dx * dx) + (dy * dy));
            				}
            				else {
HXLINE( 349)					{
HXLINE( 359)						cx = (cx - (nx * t));
HXLINE( 360)						cy = (cy - (ny * t));
            					}
HXLINE( 362)					return ((cx * cx) + (cy * cy));
            				}
            			}
            		}
HXLINE( 343)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_Simplify_obj,distance,return )

 ::zpp_nape::util::ZNPList_ZPP_SimplifyP ZPP_Simplify_obj::stack;

 ::zpp_nape::geom::ZPP_GeomVert ZPP_Simplify_obj::simplify( ::zpp_nape::geom::ZPP_GeomVert P,Float epsilon){
            	HX_GC_STACKFRAME(&_hx_pos_c5f742f70f6c887d_367_simplify)
            	HX_STACK_ARG(P,"P")
            	HX_STACK_ARG(epsilon,"epsilon")
HXLINE( 368)		HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,ret) = null();
HXLINE( 369)		HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,min) = null();
HXLINE( 370)		HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,max) = null();
HXLINE( 371)		epsilon = (epsilon * epsilon);
HXLINE( 372)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Simplify_obj::stack )) {
HXLINE( 373)			::zpp_nape::geom::ZPP_Simplify_obj::stack =  ::zpp_nape::util::ZNPList_ZPP_SimplifyP_obj::__alloc( HX_CTX );
            		}
HXLINE( 375)		HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,pre) = null();
HXLINE( 376)		HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,fst) = null();
HXLINE( 377)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,cur) = P;
HXLINE( 378)		while(true){
HXLINE( 379)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyV,ret1,"ret");
HXDLIN( 379)			if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool )) {
HXLINE( 379)				ret1 =  ::zpp_nape::geom::ZPP_SimplifyV_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 379)				ret1 = ::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool;
HXDLIN( 379)				::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool = ret1->next;
HXDLIN( 379)				ret1->next = null();
            			}
HXDLIN( 379)			{
HXLINE( 379)				ret1->x = cur->x;
HXDLIN( 379)				ret1->y = cur->y;
            			}
HXDLIN( 379)			ret1->flag = false;
HXDLIN( 379)			HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,v) = ret1;
HXLINE( 380)			v->forced = cur->forced;
HXLINE( 381)			if (v->forced) {
HXLINE( 382)				v->flag = true;
HXLINE( 383)				if (hx::IsNotNull( pre )) {
HXLINE( 383)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret2,"ret");
HXDLIN( 383)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 383)						ret2 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 383)						ret2 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 383)						::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret2->next;
HXDLIN( 383)						ret2->next = null();
            					}
HXDLIN( 383)					ret2->min = pre;
HXDLIN( 383)					ret2->max = v;
HXDLIN( 383)					::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret2);
            				}
            				else {
HXLINE( 384)					fst = v;
            				}
HXLINE( 385)				pre = v;
            			}
HXLINE( 389)			if (hx::IsNull( ret )) {
HXLINE( 389)				ret = (v->prev = (v->next = v));
            			}
            			else {
HXLINE( 391)				v->prev = ret;
HXLINE( 392)				v->next = ret->next;
HXLINE( 393)				ret->next->prev = v;
HXLINE( 394)				ret->next = v;
            			}
HXLINE( 396)			ret = v;
HXLINE( 398)			if (hx::IsNull( min )) {
HXLINE( 399)				min = v;
HXLINE( 400)				max = v;
            			}
            			else {
HXLINE( 403)				if ((((v->x - min->x) + (v->y - min->y)) < ((Float)0.0))) {
HXLINE( 403)					min = v;
            				}
HXLINE( 404)				if ((((max->x - v->x) + (max->y - v->y)) < ((Float)0.0))) {
HXLINE( 404)					max = v;
            				}
            			}
HXLINE( 406)			cur = cur->next;
HXLINE( 378)			if (!(hx::IsNotEq( cur,P ))) {
HXLINE( 378)				goto _hx_goto_3;
            			}
            		}
            		_hx_goto_3:;
HXLINE( 409)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Simplify_obj::stack->head )) {
HXLINE( 410)			if (hx::IsNull( fst )) {
HXLINE( 411)				min->flag = (max->flag = true);
HXLINE( 412)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret3,"ret");
HXDLIN( 412)				if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 412)					ret3 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 412)					ret3 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 412)					::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret3->next;
HXDLIN( 412)					ret3->next = null();
            				}
HXDLIN( 412)				ret3->min = min;
HXDLIN( 412)				ret3->max = max;
HXDLIN( 412)				::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret3);
HXLINE( 413)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret4,"ret");
HXDLIN( 413)				if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 413)					ret4 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 413)					ret4 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 413)					::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret4->next;
HXDLIN( 413)					ret4->next = null();
            				}
HXDLIN( 413)				ret4->min = max;
HXDLIN( 413)				ret4->max = min;
HXDLIN( 413)				::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret4);
            			}
            			else {
HXLINE( 416)				HX_VARI( Float,d1) = ((min->x - fst->x) + (min->y - fst->y));
HXLINE( 417)				if ((d1 < (int)0)) {
HXLINE( 417)					d1 = -(d1);
            				}
HXLINE( 418)				HX_VARI( Float,d2) = ((max->x - fst->x) + (max->y - fst->y));
HXLINE( 419)				if ((d2 < (int)0)) {
HXLINE( 419)					d2 = -(d2);
            				}
HXLINE( 420)				if ((d1 > d2)) {
HXLINE( 421)					min->flag = (fst->flag = true);
HXLINE( 422)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret5,"ret");
HXDLIN( 422)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 422)						ret5 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 422)						ret5 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 422)						::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret5->next;
HXDLIN( 422)						ret5->next = null();
            					}
HXDLIN( 422)					ret5->min = min;
HXDLIN( 422)					ret5->max = fst;
HXDLIN( 422)					::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret5);
HXLINE( 423)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret6,"ret");
HXDLIN( 423)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 423)						ret6 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 423)						ret6 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 423)						::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret6->next;
HXDLIN( 423)						ret6->next = null();
            					}
HXDLIN( 423)					ret6->min = fst;
HXDLIN( 423)					ret6->max = min;
HXDLIN( 423)					::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret6);
            				}
            				else {
HXLINE( 426)					max->flag = (fst->flag = true);
HXLINE( 427)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret7,"ret");
HXDLIN( 427)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 427)						ret7 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 427)						ret7 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 427)						::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret7->next;
HXDLIN( 427)						ret7->next = null();
            					}
HXDLIN( 427)					ret7->min = max;
HXDLIN( 427)					ret7->max = fst;
HXDLIN( 427)					::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret7);
HXLINE( 428)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret8,"ret");
HXDLIN( 428)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 428)						ret8 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 428)						ret8 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 428)						::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret8->next;
HXDLIN( 428)						ret8->next = null();
            					}
HXDLIN( 428)					ret8->min = fst;
HXDLIN( 428)					ret8->max = max;
HXDLIN( 428)					::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret8);
            				}
            			}
            		}
            		else {
HXLINE( 432)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret9,"ret");
HXDLIN( 432)			if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 432)				ret9 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 432)				ret9 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 432)				::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret9->next;
HXDLIN( 432)				ret9->next = null();
            			}
HXDLIN( 432)			ret9->min = pre;
HXDLIN( 432)			ret9->max = fst;
HXDLIN( 432)			::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret9);
            		}
HXLINE( 433)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Simplify_obj::stack->head )){
HXLINE( 434)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,cur1,"cur") = ::zpp_nape::geom::ZPP_Simplify_obj::stack->pop_unsafe();
HXLINE( 435)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimplifyV,min1,"min") = cur1->min;
HXLINE( 436)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimplifyV,max1,"max") = cur1->max;
HXLINE( 437)			{
HXLINE( 447)				cur1->min = (cur1->max = null());
HXLINE( 448)				cur1->next = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXLINE( 449)				::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = cur1;
            			}
HXLINE( 454)			HX_VARI( Float,dmax) = epsilon;
HXLINE( 455)			HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,dv) = null();
HXLINE( 456)			HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,ite) = min1->next;
HXLINE( 457)			while(hx::IsNotEq( ite,max1 )){
HXLINE( 458)				HX_VARI( Float,dist) = ::zpp_nape::geom::ZPP_Simplify_obj::distance(ite,min1,max1);
HXLINE( 459)				if ((dist > dmax)) {
HXLINE( 460)					dmax = dist;
HXLINE( 461)					dv = ite;
            				}
HXLINE( 463)				ite = ite->next;
            			}
HXLINE( 465)			if (hx::IsNotNull( dv )) {
HXLINE( 466)				dv->flag = true;
HXLINE( 467)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret10,"ret");
HXDLIN( 467)				if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 467)					ret10 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 467)					ret10 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 467)					::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret10->next;
HXDLIN( 467)					ret10->next = null();
            				}
HXDLIN( 467)				ret10->min = min1;
HXDLIN( 467)				ret10->max = dv;
HXDLIN( 467)				::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret10);
HXLINE( 468)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,ret11,"ret");
HXDLIN( 468)				if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 468)					ret11 =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 468)					ret11 = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXDLIN( 468)					::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret11->next;
HXDLIN( 468)					ret11->next = null();
            				}
HXDLIN( 468)				ret11->min = dv;
HXDLIN( 468)				ret11->max = max1;
HXDLIN( 468)				::zpp_nape::geom::ZPP_Simplify_obj::stack->add(ret11);
            			}
            		}
HXLINE( 471)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,retp) = null();
HXLINE( 472)		while(hx::IsNotNull( ret )){
HXLINE( 473)			if (ret->flag) {
HXLINE( 475)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret12,"ret");
HXDLIN( 475)				{
HXLINE( 475)					if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 475)						ret12 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 475)						ret12 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN( 475)						::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret12->next;
HXDLIN( 475)						ret12->next = null();
            					}
HXDLIN( 475)					ret12->forced = false;
            				}
HXDLIN( 475)				{
HXLINE( 475)					ret12->x = ret->x;
HXDLIN( 475)					ret12->y = ret->y;
            				}
HXDLIN( 475)				HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,obj) = ret12;
HXLINE( 476)				if (hx::IsNull( retp )) {
HXLINE( 476)					retp = (obj->prev = (obj->next = obj));
            				}
            				else {
HXLINE( 478)					obj->prev = retp;
HXLINE( 479)					obj->next = retp->next;
HXLINE( 480)					retp->next->prev = obj;
HXLINE( 481)					retp->next = obj;
            				}
HXLINE( 483)				retp = obj;
HXLINE( 485)				obj->forced = ret->forced;
            			}
HXLINE( 496)			bool ret13;
HXDLIN( 496)			if (hx::IsNotNull( ret )) {
HXLINE( 496)				ret13 = hx::IsEq( ret->prev,ret );
            			}
            			else {
HXLINE( 496)				ret13 = false;
            			}
HXDLIN( 496)			if (ret13) {
HXLINE( 497)				ret->next = (ret->prev = null());
HXLINE( 498)				{
HXLINE( 499)					HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,o) = ret;
HXLINE( 509)					o->next = ::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool;
HXLINE( 510)					::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool = o;
            				}
HXLINE( 515)				ret = null();
HXDLIN( 515)				ret = ret;
            			}
            			else {
HXLINE( 518)				HX_VARI(  ::zpp_nape::geom::ZPP_SimplifyV,retnodes) = ret->next;
HXLINE( 519)				ret->prev->next = ret->next;
HXLINE( 520)				ret->next->prev = ret->prev;
HXLINE( 521)				ret->next = (ret->prev = null());
HXLINE( 522)				{
HXLINE( 523)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimplifyV,o1,"o") = ret;
HXLINE( 533)					o1->next = ::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool;
HXLINE( 534)					::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool = o1;
            				}
HXLINE( 539)				ret = null();
HXLINE( 540)				ret = retnodes;
            			}
            		}
HXLINE( 544)		return retp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Simplify_obj,simplify,return )


ZPP_Simplify_obj::ZPP_Simplify_obj()
{
}

bool ZPP_Simplify_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { outValue = stack; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lessval") ) { outValue = lessval_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"simplify") ) { outValue = simplify_dyn(); return true; }
	}
	return false;
}

bool ZPP_Simplify_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { stack=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_SimplifyP >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Simplify_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_Simplify_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_SimplifyP*/ ,(void *) &ZPP_Simplify_obj::stack,HX_HCSTRING("stack","\x48","\x67","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ZPP_Simplify_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Simplify_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Simplify_obj::stack,"stack");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Simplify_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Simplify_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Simplify_obj::stack,"stack");
};

#endif

hx::Class ZPP_Simplify_obj::__mClass;

static ::String ZPP_Simplify_obj_sStaticFields[] = {
	HX_HCSTRING("lessval","\x28","\xa9","\x8b","\x70"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("stack","\x48","\x67","\x0b","\x84"),
	HX_HCSTRING("simplify","\x09","\x57","\x71","\x19"),
	::String(null())
};

void ZPP_Simplify_obj::__register()
{
	hx::Object *dummy = new ZPP_Simplify_obj;
	ZPP_Simplify_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_Simplify","\x3f","\x3c","\x2c","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Simplify_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Simplify_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Simplify_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Simplify_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Simplify_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Simplify_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Simplify_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Simplify_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Simplify_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c5f742f70f6c887d_366_boot)
HXLINE( 366)		stack = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
