// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_SimplifyP
#include <zpp_nape/geom/ZPP_SimplifyP.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimplifyV
#include <zpp_nape/geom/ZPP_SimplifyV.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01688597e3488a77_257_new,"zpp_nape.geom.ZPP_SimplifyP","new",0x2e4008a3,"zpp_nape.geom.ZPP_SimplifyP.new","zpp_nape/geom/Simplify.hx",257,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_01688597e3488a77_289_free,"zpp_nape.geom.ZPP_SimplifyP","free",0x44879f09,"zpp_nape.geom.ZPP_SimplifyP.free","zpp_nape/geom/Simplify.hx",289,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_01688597e3488a77_293_alloc,"zpp_nape.geom.ZPP_SimplifyP","alloc",0xcd30b378,"zpp_nape.geom.ZPP_SimplifyP.alloc","zpp_nape/geom/Simplify.hx",293,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_01688597e3488a77_295_get,"zpp_nape.geom.ZPP_SimplifyP","get",0x2e3ab8d9,"zpp_nape.geom.ZPP_SimplifyP.get","zpp_nape/geom/Simplify.hx",295,0xe5fbc624)
HX_DEFINE_STACK_FRAME(_hx_pos_01688597e3488a77_259_boot,"zpp_nape.geom.ZPP_SimplifyP","boot",0x41e0868f,"zpp_nape.geom.ZPP_SimplifyP.boot","zpp_nape/geom/Simplify.hx",259,0xe5fbc624)
namespace zpp_nape{
namespace geom{

void ZPP_SimplifyP_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_01688597e3488a77_257_new)
            	HX_STACK_THIS(this)
HXLINE( 284)		this->max = null();
HXLINE( 283)		this->min = null();
HXLINE( 258)		this->next = null();
            	}

Dynamic ZPP_SimplifyP_obj::__CreateEmpty() { return new ZPP_SimplifyP_obj; }

void *ZPP_SimplifyP_obj::_hx_vtable = 0;

Dynamic ZPP_SimplifyP_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SimplifyP_obj > _hx_result = new ZPP_SimplifyP_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SimplifyP_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ed3a6b9;
}

void ZPP_SimplifyP_obj::free(){
            	HX_STACKFRAME(&_hx_pos_01688597e3488a77_289_free)
            	HX_STACK_THIS(this)
HXLINE( 289)		this->min = (this->max = null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimplifyP_obj,free,(void))

void ZPP_SimplifyP_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_01688597e3488a77_293_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_SimplifyP_obj,alloc,(void))

 ::zpp_nape::geom::ZPP_SimplifyP ZPP_SimplifyP_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_SimplifyP ZPP_SimplifyP_obj::get( ::zpp_nape::geom::ZPP_SimplifyV min, ::zpp_nape::geom::ZPP_SimplifyV max){
            	HX_GC_STACKFRAME(&_hx_pos_01688597e3488a77_295_get)
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
HXLINE( 296)		HX_VAR(  ::zpp_nape::geom::ZPP_SimplifyP,ret);
HXLINE( 298)		if (hx::IsNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )) {
HXLINE( 299)			ret =  ::zpp_nape::geom::ZPP_SimplifyP_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 305)			ret = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool;
HXLINE( 306)			::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = ret->next;
HXLINE( 307)			ret->next = null();
            		}
HXLINE( 314)		ret->min = min;
HXLINE( 315)		ret->max = max;
HXLINE( 316)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_SimplifyP_obj,get,return )


hx::ObjectPtr< ZPP_SimplifyP_obj > ZPP_SimplifyP_obj::__new() {
	hx::ObjectPtr< ZPP_SimplifyP_obj > __this = new ZPP_SimplifyP_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_SimplifyP_obj > ZPP_SimplifyP_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_SimplifyP_obj *__this = (ZPP_SimplifyP_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_SimplifyP_obj), true, "zpp_nape.geom.ZPP_SimplifyP"));
	*(void **)__this = ZPP_SimplifyP_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_SimplifyP_obj::ZPP_SimplifyP_obj()
{
}

void ZPP_SimplifyP_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_SimplifyP);
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_END_CLASS();
}

void ZPP_SimplifyP_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
}

hx::Val ZPP_SimplifyP_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return hx::Val( min); }
		if (HX_FIELD_EQ(inName,"max") ) { return hx::Val( max); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_SimplifyP_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_SimplifyP_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast<  ::zpp_nape::geom::ZPP_SimplifyV >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast<  ::zpp_nape::geom::ZPP_SimplifyV >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_SimplifyP >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_SimplifyP_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_SimplifyP >(); return true; }
	}
	return false;
}

void ZPP_SimplifyP_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("min","\x92","\x11","\x53","\x00"));
	outFields->push(HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_SimplifyP_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimplifyP*/ ,(int)offsetof(ZPP_SimplifyP_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimplifyV*/ ,(int)offsetof(ZPP_SimplifyP_obj,min),HX_HCSTRING("min","\x92","\x11","\x53","\x00")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimplifyV*/ ,(int)offsetof(ZPP_SimplifyP_obj,max),HX_HCSTRING("max","\xa4","\x0a","\x53","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_SimplifyP_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimplifyP*/ ,(void *) &ZPP_SimplifyP_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_SimplifyP_obj_sMemberFields[] = {
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	::String(null()) };

static void ZPP_SimplifyP_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SimplifyP_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_SimplifyP_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SimplifyP_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SimplifyP_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_SimplifyP_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_SimplifyP_obj::__mClass;

static ::String ZPP_SimplifyP_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null())
};

void ZPP_SimplifyP_obj::__register()
{
	hx::Object *dummy = new ZPP_SimplifyP_obj;
	ZPP_SimplifyP_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_SimplifyP","\x31","\x7b","\x88","\x2b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_SimplifyP_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_SimplifyP_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_SimplifyP_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_SimplifyP_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_SimplifyP_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_SimplifyP_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SimplifyP_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SimplifyP_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SimplifyP_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_SimplifyP_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_01688597e3488a77_259_boot)
HXLINE( 259)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
