// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_174_new,"zpp_nape.geom.ZPP_GeomVert","new",0x5ade1135,"zpp_nape.geom.ZPP_GeomVert.new","zpp_nape/geom/GeomPoly.hx",174,0x22e30365)
HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_206_free,"zpp_nape.geom.ZPP_GeomVert","free",0x22311637,"zpp_nape.geom.ZPP_GeomVert.free","zpp_nape/geom/GeomPoly.hx",206,0x22e30365)
HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_216_alloc,"zpp_nape.geom.ZPP_GeomVert","alloc",0xe3cf848a,"zpp_nape.geom.ZPP_GeomVert.alloc","zpp_nape/geom/GeomPoly.hx",216,0x22e30365)
HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_219_wrapper,"zpp_nape.geom.ZPP_GeomVert","wrapper",0xbe68a4a8,"zpp_nape.geom.ZPP_GeomVert.wrapper","zpp_nape/geom/GeomPoly.hx",219,0x22e30365)
HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_230_modwrap,"zpp_nape.geom.ZPP_GeomVert","modwrap",0xaa55a8e1,"zpp_nape.geom.ZPP_GeomVert.modwrap","zpp_nape/geom/GeomPoly.hx",230,0x22e30365)
HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_253_getwrap,"zpp_nape.geom.ZPP_GeomVert","getwrap",0xe7ac8cb5,"zpp_nape.geom.ZPP_GeomVert.getwrap","zpp_nape/geom/GeomPoly.hx",253,0x22e30365)
HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_275_get,"zpp_nape.geom.ZPP_GeomVert","get",0x5ad8c16b,"zpp_nape.geom.ZPP_GeomVert.get","zpp_nape/geom/GeomPoly.hx",275,0x22e30365)
HX_DEFINE_STACK_FRAME(_hx_pos_b0bf67358c3e78e8_181_boot,"zpp_nape.geom.ZPP_GeomVert","boot",0x1f89fdbd,"zpp_nape.geom.ZPP_GeomVert.boot","zpp_nape/geom/GeomPoly.hx",181,0x22e30365)
namespace zpp_nape{
namespace geom{

void ZPP_GeomVert_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_174_new)
            	HX_STACK_THIS(this)
HXLINE( 180)		this->forced = false;
HXLINE( 179)		this->wrap = null();
HXLINE( 178)		this->next = null();
HXLINE( 177)		this->prev = null();
HXLINE( 176)		this->y = ((Float)0.0);
HXLINE( 175)		this->x = ((Float)0.0);
            	}

Dynamic ZPP_GeomVert_obj::__CreateEmpty() { return new ZPP_GeomVert_obj; }

void *ZPP_GeomVert_obj::_hx_vtable = 0;

Dynamic ZPP_GeomVert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_GeomVert_obj > _hx_result = new ZPP_GeomVert_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_GeomVert_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x75ecf03b;
}

void ZPP_GeomVert_obj::free(){
            	HX_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_206_free)
            	HX_STACK_THIS(this)
HXLINE( 207)		if (hx::IsNotNull( this->wrap )) {
HXLINE( 208)			this->wrap->zpp_inner->_inuse = false;
HXLINE( 209)			{
HXLINE( 209)				HX_VARI(  ::nape::geom::Vec2,_this) = this->wrap;
HXDLIN( 209)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = _this->zpp_inner;
HXDLIN( 209)				_this->zpp_inner->outer = null();
HXDLIN( 209)				_this->zpp_inner = null();
HXDLIN( 209)				{
HXLINE( 209)					_this->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 209)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this;
            				}
HXDLIN( 209)				{
HXLINE( 209)					{
HXLINE( 209)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 209)							inner->outer->zpp_inner = null();
HXDLIN( 209)							inner->outer = null();
            						}
HXDLIN( 209)						inner->_isimmutable = null();
HXDLIN( 209)						inner->_validate = null();
HXDLIN( 209)						inner->_invalidate = null();
            					}
HXDLIN( 209)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 209)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
HXLINE( 210)			this->wrap = null();
            		}
HXLINE( 212)		this->prev = (this->next = null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_GeomVert_obj,free,(void))

void ZPP_GeomVert_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_216_alloc)
            	HX_STACK_THIS(this)
HXLINE( 216)		this->forced = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_GeomVert_obj,alloc,(void))

 ::nape::geom::Vec2 ZPP_GeomVert_obj::wrapper(){
            	HX_GC_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_219_wrapper)
            	HX_STACK_THIS(this)
HXLINE( 220)		if (hx::IsNull( this->wrap )) {
HXLINE( 221)			HX_VARI( Float,x) = this->x;
HXDLIN( 221)			HX_VARI( Float,y) = this->y;
HXDLIN( 221)			HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 221)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 221)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 221)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 221)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 221)				ret->zpp_pool = null();
            			}
HXDLIN( 221)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 221)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 221)				{
HXLINE( 221)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 221)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 221)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 221)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 221)						ret1->next = null();
            					}
HXDLIN( 221)					ret1->weak = false;
            				}
HXDLIN( 221)				ret1->_immutable = false;
HXDLIN( 221)				{
HXLINE( 221)					ret1->x = x;
HXDLIN( 221)					ret1->y = y;
            				}
HXDLIN( 221)				ret->zpp_inner = ret1;
HXDLIN( 221)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE( 221)				bool _hx_tmp;
HXDLIN( 221)				{
HXLINE( 221)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 221)					if (hx::IsNotNull( _this->_validate )) {
HXLINE( 221)						_this->_validate();
            					}
            				}
HXDLIN( 221)				if ((ret->zpp_inner->x == x)) {
HXLINE( 221)					{
HXLINE( 221)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 221)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 221)							_this1->_validate();
            						}
            					}
HXDLIN( 221)					_hx_tmp = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE( 221)					_hx_tmp = false;
            				}
HXDLIN( 221)				if (!(_hx_tmp)) {
HXLINE( 221)					{
HXLINE( 221)						ret->zpp_inner->x = x;
HXDLIN( 221)						ret->zpp_inner->y = y;
            					}
HXDLIN( 221)					{
HXLINE( 221)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 221)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 221)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN( 221)			ret->zpp_inner->weak = false;
HXDLIN( 221)			this->wrap = ret;
HXLINE( 222)			this->wrap->zpp_inner->_inuse = true;
HXLINE( 223)			this->wrap->zpp_inner->_invalidate = this->modwrap_dyn();
HXLINE( 224)			this->wrap->zpp_inner->_validate = this->getwrap_dyn();
            		}
HXLINE( 226)		return this->wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_GeomVert_obj,wrapper,return )

void ZPP_GeomVert_obj::modwrap( ::zpp_nape::geom::ZPP_Vec2 n){
            	HX_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_230_modwrap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 231)		this->x = n->x;
HXLINE( 232)		this->y = n->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_GeomVert_obj,modwrap,(void))

void ZPP_GeomVert_obj::getwrap(){
            	HX_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_253_getwrap)
            	HX_STACK_THIS(this)
HXLINE( 254)		this->wrap->zpp_inner->x = this->x;
HXLINE( 255)		this->wrap->zpp_inner->y = this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_GeomVert_obj,getwrap,(void))

 ::zpp_nape::geom::ZPP_GeomVert ZPP_GeomVert_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_GeomVert ZPP_GeomVert_obj::get(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_275_get)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 276)		HX_VAR(  ::zpp_nape::geom::ZPP_GeomVert,ret);
HXLINE( 277)		{
HXLINE( 278)			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE( 279)				ret =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 285)				ret = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXLINE( 286)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret->next;
HXLINE( 287)				ret->next = null();
            			}
HXLINE( 292)			ret->forced = false;
            		}
HXLINE( 294)		{
HXLINE( 295)			ret->x = x;
HXLINE( 296)			ret->y = y;
            		}
HXLINE( 314)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_GeomVert_obj,get,return )


hx::ObjectPtr< ZPP_GeomVert_obj > ZPP_GeomVert_obj::__new() {
	hx::ObjectPtr< ZPP_GeomVert_obj > __this = new ZPP_GeomVert_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_GeomVert_obj > ZPP_GeomVert_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_GeomVert_obj *__this = (ZPP_GeomVert_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_GeomVert_obj), true, "zpp_nape.geom.ZPP_GeomVert"));
	*(void **)__this = ZPP_GeomVert_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_GeomVert_obj::ZPP_GeomVert_obj()
{
}

void ZPP_GeomVert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_GeomVert);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(wrap,"wrap");
	HX_MARK_MEMBER_NAME(forced,"forced");
	HX_MARK_END_CLASS();
}

void ZPP_GeomVert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(wrap,"wrap");
	HX_VISIT_MEMBER_NAME(forced,"forced");
}

hx::Val ZPP_GeomVert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"wrap") ) { return hx::Val( wrap); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forced") ) { return hx::Val( forced); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrapper") ) { return hx::Val( wrapper_dyn()); }
		if (HX_FIELD_EQ(inName,"modwrap") ) { return hx::Val( modwrap_dyn()); }
		if (HX_FIELD_EQ(inName,"getwrap") ) { return hx::Val( getwrap_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_GeomVert_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_GeomVert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap") ) { wrap=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"forced") ) { forced=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_GeomVert_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_GeomVert >(); return true; }
	}
	return false;
}

void ZPP_GeomVert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"));
	outFields->push(HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_GeomVert_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ZPP_GeomVert_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ZPP_GeomVert_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_GeomVert*/ ,(int)offsetof(ZPP_GeomVert_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_GeomVert*/ ,(int)offsetof(ZPP_GeomVert_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_GeomVert_obj,wrap),HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e")},
	{hx::fsBool,(int)offsetof(ZPP_GeomVert_obj,forced),HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_GeomVert_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_GeomVert*/ ,(void *) &ZPP_GeomVert_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_GeomVert_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"),
	HX_HCSTRING("forced","\x19","\xfc","\x86","\xfd"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("wrapper","\x53","\xd5","\x64","\x0d"),
	HX_HCSTRING("modwrap","\x8c","\xd9","\x51","\xf9"),
	HX_HCSTRING("getwrap","\x60","\xbd","\xa8","\x36"),
	::String(null()) };

static void ZPP_GeomVert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_GeomVert_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_GeomVert_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_GeomVert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_GeomVert_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_GeomVert_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_GeomVert_obj::__mClass;

static ::String ZPP_GeomVert_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null())
};

void ZPP_GeomVert_obj::__register()
{
	hx::Object *dummy = new ZPP_GeomVert_obj;
	ZPP_GeomVert_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_GeomVert","\xc3","\x52","\x6e","\x4a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_GeomVert_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_GeomVert_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_GeomVert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_GeomVert_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_GeomVert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_GeomVert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_GeomVert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_GeomVert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_GeomVert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_GeomVert_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b0bf67358c3e78e8_181_boot)
HXLINE( 181)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
