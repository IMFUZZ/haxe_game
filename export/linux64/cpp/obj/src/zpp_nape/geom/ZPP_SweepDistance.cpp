// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SweepDistance
#include <zpp_nape/geom/ZPP_SweepDistance.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ToiEvent
#include <zpp_nape/geom/ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bdbed0391edf141_230_dynamicSweep,"zpp_nape.geom.ZPP_SweepDistance","dynamicSweep",0x731dabf0,"zpp_nape.geom.ZPP_SweepDistance.dynamicSweep","zpp_nape/geom/SweepDistance.hx",230,0x2645f2ee)
HX_DEFINE_STACK_FRAME(_hx_pos_9bdbed0391edf141_339_staticSweep,"zpp_nape.geom.ZPP_SweepDistance","staticSweep",0x284911bb,"zpp_nape.geom.ZPP_SweepDistance.staticSweep","zpp_nape/geom/SweepDistance.hx",339,0x2645f2ee)
HX_DEFINE_STACK_FRAME(_hx_pos_9bdbed0391edf141_475_distanceBody,"zpp_nape.geom.ZPP_SweepDistance","distanceBody",0x2a59ca7a,"zpp_nape.geom.ZPP_SweepDistance.distanceBody","zpp_nape/geom/SweepDistance.hx",475,0x2645f2ee)
HX_DEFINE_STACK_FRAME(_hx_pos_9bdbed0391edf141_648_distance,"zpp_nape.geom.ZPP_SweepDistance","distance",0x5faae7b8,"zpp_nape.geom.ZPP_SweepDistance.distance","zpp_nape/geom/SweepDistance.hx",648,0x2645f2ee)
namespace zpp_nape{
namespace geom{

void ZPP_SweepDistance_obj::__construct() { }

Dynamic ZPP_SweepDistance_obj::__CreateEmpty() { return new ZPP_SweepDistance_obj; }

void *ZPP_SweepDistance_obj::_hx_vtable = 0;

Dynamic ZPP_SweepDistance_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_SweepDistance_obj > _hx_result = new ZPP_SweepDistance_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_SweepDistance_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x06897eef;
}

void ZPP_SweepDistance_obj::dynamicSweep( ::zpp_nape::geom::ZPP_ToiEvent toi,Float timeStep,Float lowerBound,Float negRadius,hx::Null< bool >  __o_userAPI){
bool userAPI = __o_userAPI.Default(false);
            	HX_STACKFRAME(&_hx_pos_9bdbed0391edf141_230_dynamicSweep)
            	HX_STACK_ARG(toi,"toi")
            	HX_STACK_ARG(timeStep,"timeStep")
            	HX_STACK_ARG(lowerBound,"lowerBound")
            	HX_STACK_ARG(negRadius,"negRadius")
            	HX_STACK_ARG(userAPI,"userAPI")
HXLINE( 231)		HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s1) = toi->s1;
HXLINE( 232)		HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s2) = toi->s2;
HXLINE( 233)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,b1) = s1->body;
HXLINE( 234)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,b2) = s2->body;
HXLINE( 235)		HX_VARI( Float,deltax) = ((Float)0.0);
HXLINE( 236)		HX_VARI( Float,deltay) = ((Float)0.0);
HXLINE( 237)		{
HXLINE( 238)			deltax = (b2->velx - b1->velx);
HXLINE( 239)			deltay = (b2->vely - b1->vely);
            		}
HXLINE( 241)		HX_VARI( Float,ang1) = b1->angvel;
HXLINE( 242)		if ((ang1 < (int)0)) {
HXLINE( 242)			ang1 = -(ang1);
            		}
HXLINE( 243)		HX_VARI( Float,ang2) = b2->angvel;
HXLINE( 244)		if ((ang2 < (int)0)) {
HXLINE( 244)			ang2 = -(ang2);
            		}
HXLINE( 245)		HX_VARI( Float,angBias) = ((s1->sweepCoef * ang1) + (s2->sweepCoef * ang2));
HXLINE( 246)		bool _hx_tmp;
HXDLIN( 246)		bool _hx_tmp1;
HXDLIN( 246)		bool _hx_tmp2;
HXDLIN( 246)		if (!(userAPI)) {
HXLINE( 246)			_hx_tmp2 = !(toi->kinematic);
            		}
            		else {
HXLINE( 246)			_hx_tmp2 = false;
            		}
HXDLIN( 246)		if (_hx_tmp2) {
HXLINE( 246)			_hx_tmp1 = (((deltax * deltax) + (deltay * deltay)) < (::nape::Config_obj::dynamicSweepLinearThreshold * ::nape::Config_obj::dynamicSweepLinearThreshold));
            		}
            		else {
HXLINE( 246)			_hx_tmp1 = false;
            		}
HXDLIN( 246)		if (_hx_tmp1) {
HXLINE( 246)			_hx_tmp = (angBias < ::nape::Config_obj::dynamicSweepAngularThreshold);
            		}
            		else {
HXLINE( 246)			_hx_tmp = false;
            		}
HXDLIN( 246)		if (_hx_tmp) {
HXLINE( 247)			toi->toi = (int)-1;
HXLINE( 248)			toi->failed = true;
HXLINE( 249)			return;
            		}
HXLINE( 251)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,c1) = toi->c1;
HXLINE( 252)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,c2) = toi->c2;
HXLINE( 253)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,axis) = toi->axis;
HXLINE( 254)		HX_VARI( Float,curTOI) = lowerBound;
HXLINE( 255)		HX_VARI( int,curIter) = (int)0;
HXLINE( 256)		while(true){
HXLINE( 257)			{
HXLINE( 257)				HX_VARI( Float,dt) = (curTOI * timeStep);
HXDLIN( 257)				HX_VARI( Float,delta) = (dt - b1->sweepTime);
HXDLIN( 257)				if ((delta != (int)0)) {
HXLINE( 257)					b1->sweepTime = dt;
HXDLIN( 257)					{
HXLINE( 257)						b1->posx = (b1->posx + (b1->velx * delta));
HXDLIN( 257)						b1->posy = (b1->posy + (b1->vely * delta));
            					}
HXDLIN( 257)					if ((b1->angvel != (int)0)) {
HXLINE( 257)						HX_VARI( Float,dr) = (b1->sweep_angvel * delta);
HXDLIN( 257)						b1->rot = (b1->rot + dr);
HXDLIN( 257)						if (((dr * dr) > ((Float)0.0001))) {
HXLINE( 257)							b1->axisx = ::Math_obj::sin(b1->rot);
HXDLIN( 257)							b1->axisy = ::Math_obj::cos(b1->rot);
            						}
            						else {
HXLINE( 257)							HX_VARI( Float,d2) = (dr * dr);
HXDLIN( 257)							HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN( 257)							HX_VARI( Float,m) = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN( 257)							HX_VARI( Float,nx) = (((p * b1->axisx) + (dr * b1->axisy)) * m);
HXDLIN( 257)							b1->axisy = (((p * b1->axisy) - (dr * b1->axisx)) * m);
HXDLIN( 257)							b1->axisx = nx;
            						}
            					}
            				}
            			}
HXLINE( 258)			if ((s1->type == (int)0)) {
HXLINE( 258)				s1->worldCOMx = (b1->posx + ((b1->axisy * s1->localCOMx) - (b1->axisx * s1->localCOMy)));
HXDLIN( 258)				s1->worldCOMy = (b1->posy + ((s1->localCOMx * b1->axisx) + (s1->localCOMy * b1->axisy)));
            			}
            			else {
HXLINE( 258)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p1,"p") = s1->polygon;
HXDLIN( 258)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = p1->lverts->next;
HXDLIN( 258)				{
HXLINE( 258)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = p1->gverts->next;
HXDLIN( 258)					while(hx::IsNotNull( cx_ite )){
HXLINE( 258)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite;
HXDLIN( 258)						{
HXLINE( 258)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 258)							li = li->next;
HXDLIN( 258)							{
HXLINE( 258)								g->x = (b1->posx + ((b1->axisy * l->x) - (b1->axisx * l->y)));
HXDLIN( 258)								g->y = (b1->posy + ((l->x * b1->axisx) + (l->y * b1->axisy)));
            							}
            						}
HXDLIN( 258)						cx_ite = cx_ite->next;
            					}
            				}
HXDLIN( 258)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite) = p1->edges->head;
HXDLIN( 258)				{
HXLINE( 258)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = p1->gverts->next;
HXDLIN( 258)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN( 258)					cx_ite1 = cx_ite1->next;
HXDLIN( 258)					while(hx::IsNotNull( cx_ite1 )){
HXLINE( 258)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN( 258)						{
HXLINE( 258)							HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = ite->elt;
HXDLIN( 258)							ite = ite->next;
HXDLIN( 258)							{
HXLINE( 258)								e->gnormx = ((b1->axisy * e->lnormx) - (b1->axisx * e->lnormy));
HXDLIN( 258)								e->gnormy = ((e->lnormx * b1->axisx) + (e->lnormy * b1->axisy));
            							}
HXDLIN( 258)							e->gprojection = (((b1->posx * e->gnormx) + (b1->posy * e->gnormy)) + e->lprojection);
HXDLIN( 258)							e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
HXDLIN( 258)							e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
            						}
HXDLIN( 258)						u = v;
HXDLIN( 258)						cx_ite1 = cx_ite1->next;
            					}
HXDLIN( 258)					 ::zpp_nape::geom::ZPP_Vec2 _this = p1->gverts->next;
HXDLIN( 258)					{
HXLINE( 258)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e1,"e") = ite->elt;
HXDLIN( 258)						{
HXLINE( 258)							e1->gnormx = ((b1->axisy * e1->lnormx) - (b1->axisx * e1->lnormy));
HXDLIN( 258)							e1->gnormy = ((e1->lnormx * b1->axisx) + (e1->lnormy * b1->axisy));
            						}
HXDLIN( 258)						e1->gprojection = (((b1->posx * e1->gnormx) + (b1->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 258)						e1->tp0 = ((u->y * e1->gnormx) - (u->x * e1->gnormy));
HXDLIN( 258)						e1->tp1 = ((_this->y * e1->gnormx) - (_this->x * e1->gnormy));
            					}
            				}
            			}
HXLINE( 259)			{
HXLINE( 259)				HX_VARI_NAME( Float,dt1,"dt") = (curTOI * timeStep);
HXDLIN( 259)				HX_VARI_NAME( Float,delta1,"delta") = (dt1 - b2->sweepTime);
HXDLIN( 259)				if ((delta1 != (int)0)) {
HXLINE( 259)					b2->sweepTime = dt1;
HXDLIN( 259)					{
HXLINE( 259)						b2->posx = (b2->posx + (b2->velx * delta1));
HXDLIN( 259)						b2->posy = (b2->posy + (b2->vely * delta1));
            					}
HXDLIN( 259)					if ((b2->angvel != (int)0)) {
HXLINE( 259)						HX_VARI_NAME( Float,dr1,"dr") = (b2->sweep_angvel * delta1);
HXDLIN( 259)						b2->rot = (b2->rot + dr1);
HXDLIN( 259)						if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE( 259)							b2->axisx = ::Math_obj::sin(b2->rot);
HXDLIN( 259)							b2->axisy = ::Math_obj::cos(b2->rot);
            						}
            						else {
HXLINE( 259)							HX_VARI_NAME( Float,d21,"d2") = (dr1 * dr1);
HXDLIN( 259)							HX_VARI_NAME( Float,p2,"p") = ((int)1 - (((Float)0.5) * d21));
HXDLIN( 259)							HX_VARI_NAME( Float,m1,"m") = ((int)1 - ((Float)(d21 * d21) / (Float)(int)8));
HXDLIN( 259)							HX_VARI_NAME( Float,nx1,"nx") = (((p2 * b2->axisx) + (dr1 * b2->axisy)) * m1);
HXDLIN( 259)							b2->axisy = (((p2 * b2->axisy) - (dr1 * b2->axisx)) * m1);
HXDLIN( 259)							b2->axisx = nx1;
            						}
            					}
            				}
            			}
HXLINE( 260)			if ((s2->type == (int)0)) {
HXLINE( 260)				s2->worldCOMx = (b2->posx + ((b2->axisy * s2->localCOMx) - (b2->axisx * s2->localCOMy)));
HXDLIN( 260)				s2->worldCOMy = (b2->posy + ((s2->localCOMx * b2->axisx) + (s2->localCOMy * b2->axisy)));
            			}
            			else {
HXLINE( 260)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p3,"p") = s2->polygon;
HXDLIN( 260)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li1,"li") = p3->lverts->next;
HXDLIN( 260)				{
HXLINE( 260)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = p3->gverts->next;
HXDLIN( 260)					while(hx::IsNotNull( cx_ite2 )){
HXLINE( 260)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g1,"g") = cx_ite2;
HXDLIN( 260)						{
HXLINE( 260)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l1,"l") = li1;
HXDLIN( 260)							li1 = li1->next;
HXDLIN( 260)							{
HXLINE( 260)								g1->x = (b2->posx + ((b2->axisy * l1->x) - (b2->axisx * l1->y)));
HXDLIN( 260)								g1->y = (b2->posy + ((l1->x * b2->axisx) + (l1->y * b2->axisy)));
            							}
            						}
HXDLIN( 260)						cx_ite2 = cx_ite2->next;
            					}
            				}
HXDLIN( 260)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite1,"ite") = p3->edges->head;
HXDLIN( 260)				{
HXLINE( 260)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite3,"cx_ite") = p3->gverts->next;
HXDLIN( 260)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u1,"u") = cx_ite3;
HXDLIN( 260)					cx_ite3 = cx_ite3->next;
HXDLIN( 260)					while(hx::IsNotNull( cx_ite3 )){
HXLINE( 260)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v1,"v") = cx_ite3;
HXDLIN( 260)						{
HXLINE( 260)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e2,"e") = ite1->elt;
HXDLIN( 260)							ite1 = ite1->next;
HXDLIN( 260)							{
HXLINE( 260)								e2->gnormx = ((b2->axisy * e2->lnormx) - (b2->axisx * e2->lnormy));
HXDLIN( 260)								e2->gnormy = ((e2->lnormx * b2->axisx) + (e2->lnormy * b2->axisy));
            							}
HXDLIN( 260)							e2->gprojection = (((b2->posx * e2->gnormx) + (b2->posy * e2->gnormy)) + e2->lprojection);
HXDLIN( 260)							e2->tp0 = ((u1->y * e2->gnormx) - (u1->x * e2->gnormy));
HXDLIN( 260)							e2->tp1 = ((v1->y * e2->gnormx) - (v1->x * e2->gnormy));
            						}
HXDLIN( 260)						u1 = v1;
HXDLIN( 260)						cx_ite3 = cx_ite3->next;
            					}
HXDLIN( 260)					 ::zpp_nape::geom::ZPP_Vec2 _this1 = p3->gverts->next;
HXDLIN( 260)					{
HXLINE( 260)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e3,"e") = ite1->elt;
HXDLIN( 260)						{
HXLINE( 260)							e3->gnormx = ((b2->axisy * e3->lnormx) - (b2->axisx * e3->lnormy));
HXDLIN( 260)							e3->gnormy = ((e3->lnormx * b2->axisx) + (e3->lnormy * b2->axisy));
            						}
HXDLIN( 260)						e3->gprojection = (((b2->posx * e3->gnormx) + (b2->posy * e3->gnormy)) + e3->lprojection);
HXDLIN( 260)						e3->tp0 = ((u1->y * e3->gnormx) - (u1->x * e3->gnormy));
HXDLIN( 260)						e3->tp1 = ((_this1->y * e3->gnormx) - (_this1->x * e3->gnormy));
            					}
            				}
            			}
HXLINE( 261)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s11,"s1") = s1;
HXDLIN( 261)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s21,"s2") = s2;
HXDLIN( 261)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w1) = c1;
HXDLIN( 261)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w2) = c2;
HXDLIN( 261)			Float sep;
HXDLIN( 261)			bool sep1;
HXDLIN( 261)			if ((s1->type == (int)0)) {
HXLINE( 261)				sep1 = (s2->type == (int)0);
            			}
            			else {
HXLINE( 261)				sep1 = false;
            			}
HXDLIN( 261)			if (sep1) {
HXLINE( 261)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c11,"c1") = s1->circle;
HXDLIN( 261)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c21,"c2") = s2->circle;
HXDLIN( 261)				HX_VAR( Float,dist);
HXDLIN( 261)				{
HXLINE( 261)					HX_VARI_NAME( Float,nx2,"nx") = ((Float)0.0);
HXDLIN( 261)					HX_VARI( Float,ny) = ((Float)0.0);
HXDLIN( 261)					{
HXLINE( 261)						nx2 = (c21->worldCOMx - c11->worldCOMx);
HXDLIN( 261)						ny = (c21->worldCOMy - c11->worldCOMy);
            					}
HXDLIN( 261)					HX_VARI( Float,len) = ::Math_obj::sqrt(((nx2 * nx2) + (ny * ny)));
HXDLIN( 261)					dist = (len - (c11->radius + c21->radius));
HXDLIN( 261)					if ((dist < ((Float)1e100))) {
HXLINE( 261)						if ((len == (int)0)) {
HXLINE( 261)							nx2 = (int)1;
HXDLIN( 261)							ny = (int)0;
            						}
            						else {
HXLINE( 261)							HX_VARI( Float,t) = ((Float)((Float)1.0) / (Float)len);
HXDLIN( 261)							nx2 = (nx2 * t);
HXDLIN( 261)							ny = (ny * t);
            						}
HXDLIN( 261)						{
HXLINE( 261)							HX_VARI_NAME( Float,t1,"t") = c11->radius;
HXDLIN( 261)							c1->x = (c11->worldCOMx + (nx2 * t1));
HXDLIN( 261)							c1->y = (c11->worldCOMy + (ny * t1));
            						}
HXDLIN( 261)						{
HXLINE( 261)							HX_VARI_NAME( Float,t2,"t") = -(c21->radius);
HXDLIN( 261)							c2->x = (c21->worldCOMx + (nx2 * t2));
HXDLIN( 261)							c2->y = (c21->worldCOMy + (ny * t2));
            						}
HXDLIN( 261)						{
HXLINE( 261)							axis->x = nx2;
HXDLIN( 261)							axis->y = ny;
            						}
            					}
            				}
HXDLIN( 261)				sep = dist;
            			}
            			else {
HXLINE( 261)				HX_VARI( bool,swapped) = false;
HXDLIN( 261)				bool sep2;
HXDLIN( 261)				if ((s1->type == (int)0)) {
HXLINE( 261)					sep2 = (s2->type == (int)1);
            				}
            				else {
HXLINE( 261)					sep2 = false;
            				}
HXDLIN( 261)				if (sep2) {
HXLINE( 261)					s11 = s2;
HXDLIN( 261)					s21 = s1;
HXDLIN( 261)					w1 = c2;
HXDLIN( 261)					w2 = c1;
HXDLIN( 261)					swapped = true;
            				}
HXDLIN( 261)				bool sep3;
HXDLIN( 261)				if ((s11->type == (int)1)) {
HXLINE( 261)					sep3 = (s21->type == (int)0);
            				}
            				else {
HXLINE( 261)					sep3 = false;
            				}
HXDLIN( 261)				if (sep3) {
HXLINE( 261)					HX_VARI(  ::zpp_nape::shape::ZPP_Circle,circle) = s21->circle;
HXDLIN( 261)					HX_VARI( Float,best) = ((Float)-1e+100);
HXDLIN( 261)					HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a0) = null();
HXDLIN( 261)					{
HXLINE( 261)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite4,"cx_ite") = s11->polygon->edges->head;
HXDLIN( 261)						while(hx::IsNotNull( cx_ite4 )){
HXLINE( 261)							HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite4->elt;
HXDLIN( 261)							{
HXLINE( 261)								HX_VARI_NAME( Float,dist1,"dist") = ((((a->gnormx * circle->worldCOMx) + (a->gnormy * circle->worldCOMy)) - a->gprojection) - circle->radius);
HXDLIN( 261)								if ((dist1 > ((Float)1e100))) {
HXLINE( 261)									best = dist1;
HXDLIN( 261)									goto _hx_goto_5;
            								}
HXDLIN( 261)								if ((dist1 > (int)0)) {
HXLINE( 261)									if ((dist1 > best)) {
HXLINE( 261)										best = dist1;
HXDLIN( 261)										a0 = a;
            									}
            								}
            								else {
HXLINE( 261)									bool sep4;
HXDLIN( 261)									if ((best < (int)0)) {
HXLINE( 261)										sep4 = (dist1 > best);
            									}
            									else {
HXLINE( 261)										sep4 = false;
            									}
HXDLIN( 261)									if (sep4) {
HXLINE( 261)										best = dist1;
HXDLIN( 261)										a0 = a;
            									}
            								}
            							}
HXDLIN( 261)							cx_ite4 = cx_ite4->next;
            						}
            						_hx_goto_5:;
            					}
HXDLIN( 261)					if ((best < ((Float)1e100))) {
HXLINE( 261)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v0) = a0->gp0;
HXDLIN( 261)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v11,"v1") = a0->gp1;
HXDLIN( 261)						HX_VARI_NAME( Float,dt2,"dt") = ((circle->worldCOMy * a0->gnormx) - (circle->worldCOMx * a0->gnormy));
HXDLIN( 261)						if ((dt2 <= ((v0->y * a0->gnormx) - (v0->x * a0->gnormy)))) {
HXLINE( 261)							HX_VARI_NAME( Float,nx3,"nx") = ((Float)0.0);
HXDLIN( 261)							HX_VARI_NAME( Float,ny1,"ny") = ((Float)0.0);
HXDLIN( 261)							{
HXLINE( 261)								nx3 = (circle->worldCOMx - v0->x);
HXDLIN( 261)								ny1 = (circle->worldCOMy - v0->y);
            							}
HXDLIN( 261)							HX_VARI_NAME( Float,len1,"len") = ::Math_obj::sqrt(((nx3 * nx3) + (ny1 * ny1)));
HXDLIN( 261)							best = (len1 - circle->radius);
HXDLIN( 261)							if ((best < ((Float)1e100))) {
HXLINE( 261)								if ((len1 == (int)0)) {
HXLINE( 261)									nx3 = (int)1;
HXDLIN( 261)									ny1 = (int)0;
            								}
            								else {
HXLINE( 261)									HX_VARI_NAME( Float,t3,"t") = ((Float)((Float)1.0) / (Float)len1);
HXDLIN( 261)									nx3 = (nx3 * t3);
HXDLIN( 261)									ny1 = (ny1 * t3);
            								}
HXDLIN( 261)								{
HXLINE( 261)									w1->x = (v0->x + (nx3 * (int)0));
HXDLIN( 261)									w1->y = (v0->y + (ny1 * (int)0));
            								}
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,t4,"t") = -(circle->radius);
HXDLIN( 261)									w2->x = (circle->worldCOMx + (nx3 * t4));
HXDLIN( 261)									w2->y = (circle->worldCOMy + (ny1 * t4));
            								}
HXDLIN( 261)								{
HXLINE( 261)									axis->x = nx3;
HXDLIN( 261)									axis->y = ny1;
            								}
            							}
            						}
            						else {
HXLINE( 261)							if ((dt2 >= ((v11->y * a0->gnormx) - (v11->x * a0->gnormy)))) {
HXLINE( 261)								HX_VARI_NAME( Float,nx4,"nx") = ((Float)0.0);
HXDLIN( 261)								HX_VARI_NAME( Float,ny2,"ny") = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									nx4 = (circle->worldCOMx - v11->x);
HXDLIN( 261)									ny2 = (circle->worldCOMy - v11->y);
            								}
HXDLIN( 261)								HX_VARI_NAME( Float,len2,"len") = ::Math_obj::sqrt(((nx4 * nx4) + (ny2 * ny2)));
HXDLIN( 261)								best = (len2 - circle->radius);
HXDLIN( 261)								if ((best < ((Float)1e100))) {
HXLINE( 261)									if ((len2 == (int)0)) {
HXLINE( 261)										nx4 = (int)1;
HXDLIN( 261)										ny2 = (int)0;
            									}
            									else {
HXLINE( 261)										HX_VARI_NAME( Float,t5,"t") = ((Float)((Float)1.0) / (Float)len2);
HXDLIN( 261)										nx4 = (nx4 * t5);
HXDLIN( 261)										ny2 = (ny2 * t5);
            									}
HXDLIN( 261)									{
HXLINE( 261)										w1->x = (v11->x + (nx4 * (int)0));
HXDLIN( 261)										w1->y = (v11->y + (ny2 * (int)0));
            									}
HXDLIN( 261)									{
HXLINE( 261)										HX_VARI_NAME( Float,t6,"t") = -(circle->radius);
HXDLIN( 261)										w2->x = (circle->worldCOMx + (nx4 * t6));
HXDLIN( 261)										w2->y = (circle->worldCOMy + (ny2 * t6));
            									}
HXDLIN( 261)									{
HXLINE( 261)										axis->x = nx4;
HXDLIN( 261)										axis->y = ny2;
            									}
            								}
            							}
            							else {
HXLINE( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,t7,"t") = -(circle->radius);
HXDLIN( 261)									w2->x = (circle->worldCOMx + (a0->gnormx * t7));
HXDLIN( 261)									w2->y = (circle->worldCOMy + (a0->gnormy * t7));
            								}
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,t8,"t") = -(best);
HXDLIN( 261)									w1->x = (w2->x + (a0->gnormx * t8));
HXDLIN( 261)									w1->y = (w2->y + (a0->gnormy * t8));
            								}
HXDLIN( 261)								{
HXLINE( 261)									axis->x = a0->gnormx;
HXDLIN( 261)									axis->y = a0->gnormy;
            								}
            							}
            						}
            					}
HXDLIN( 261)					if (swapped) {
HXLINE( 261)						axis->x = -(axis->x);
HXDLIN( 261)						axis->y = -(axis->y);
            					}
HXDLIN( 261)					sep = best;
            				}
            				else {
HXLINE( 261)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p11,"p1") = s11->polygon;
HXDLIN( 261)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p21,"p2") = s21->polygon;
HXDLIN( 261)					HX_VARI_NAME( Float,best1,"best") = ((Float)-1e+100);
HXDLIN( 261)					HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a1) = null();
HXDLIN( 261)					HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a2) = null();
HXDLIN( 261)					HX_VARI( int,besti) = (int)0;
HXDLIN( 261)					{
HXLINE( 261)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite5,"cx_ite") = p11->edges->head;
HXDLIN( 261)						while(hx::IsNotNull( cx_ite5 )){
HXLINE( 261)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a3,"a") = cx_ite5->elt;
HXDLIN( 261)							{
HXLINE( 261)								HX_VARI( Float,min) = ((Float)1e100);
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite6,"cx_ite") = p21->gverts->next;
HXDLIN( 261)									while(hx::IsNotNull( cx_ite6 )){
HXLINE( 261)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v2,"v") = cx_ite6;
HXDLIN( 261)										{
HXLINE( 261)											HX_VARI( Float,k) = ((a3->gnormx * v2->x) + (a3->gnormy * v2->y));
HXDLIN( 261)											if ((k < min)) {
HXLINE( 261)												min = k;
            											}
            										}
HXDLIN( 261)										cx_ite6 = cx_ite6->next;
            									}
            								}
HXDLIN( 261)								min = (min - a3->gprojection);
HXDLIN( 261)								if ((min > ((Float)1e100))) {
HXLINE( 261)									best1 = min;
HXDLIN( 261)									goto _hx_goto_6;
            								}
HXDLIN( 261)								if ((min > (int)0)) {
HXLINE( 261)									if ((min > best1)) {
HXLINE( 261)										best1 = min;
HXDLIN( 261)										a1 = a3;
HXDLIN( 261)										besti = (int)1;
            									}
            								}
            								else {
HXLINE( 261)									bool sep5;
HXDLIN( 261)									if ((best1 < (int)0)) {
HXLINE( 261)										sep5 = (min > best1);
            									}
            									else {
HXLINE( 261)										sep5 = false;
            									}
HXDLIN( 261)									if (sep5) {
HXLINE( 261)										best1 = min;
HXDLIN( 261)										a1 = a3;
HXDLIN( 261)										besti = (int)1;
            									}
            								}
            							}
HXDLIN( 261)							cx_ite5 = cx_ite5->next;
            						}
            						_hx_goto_6:;
            					}
HXDLIN( 261)					if ((best1 < ((Float)1e100))) {
HXLINE( 261)						{
HXLINE( 261)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite7,"cx_ite") = p21->edges->head;
HXDLIN( 261)							while(hx::IsNotNull( cx_ite7 )){
HXLINE( 261)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a4,"a") = cx_ite7->elt;
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,min1,"min") = ((Float)1e100);
HXDLIN( 261)									{
HXLINE( 261)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite8,"cx_ite") = p11->gverts->next;
HXDLIN( 261)										while(hx::IsNotNull( cx_ite8 )){
HXLINE( 261)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v3,"v") = cx_ite8;
HXDLIN( 261)											{
HXLINE( 261)												HX_VARI_NAME( Float,k1,"k") = ((a4->gnormx * v3->x) + (a4->gnormy * v3->y));
HXDLIN( 261)												if ((k1 < min1)) {
HXLINE( 261)													min1 = k1;
            												}
            											}
HXDLIN( 261)											cx_ite8 = cx_ite8->next;
            										}
            									}
HXDLIN( 261)									min1 = (min1 - a4->gprojection);
HXDLIN( 261)									if ((min1 > ((Float)1e100))) {
HXLINE( 261)										best1 = min1;
HXDLIN( 261)										goto _hx_goto_8;
            									}
HXDLIN( 261)									if ((min1 > (int)0)) {
HXLINE( 261)										if ((min1 > best1)) {
HXLINE( 261)											best1 = min1;
HXDLIN( 261)											a2 = a4;
HXDLIN( 261)											besti = (int)2;
            										}
            									}
            									else {
HXLINE( 261)										bool sep6;
HXDLIN( 261)										if ((best1 < (int)0)) {
HXLINE( 261)											sep6 = (min1 > best1);
            										}
            										else {
HXLINE( 261)											sep6 = false;
            										}
HXDLIN( 261)										if (sep6) {
HXLINE( 261)											best1 = min1;
HXDLIN( 261)											a2 = a4;
HXDLIN( 261)											besti = (int)2;
            										}
            									}
            								}
HXDLIN( 261)								cx_ite7 = cx_ite7->next;
            							}
            							_hx_goto_8:;
            						}
HXDLIN( 261)						if ((best1 < ((Float)1e100))) {
HXLINE( 261)							HX_VAR(  ::zpp_nape::shape::ZPP_Polygon,q2);
HXDLIN( 261)							HX_VAR(  ::zpp_nape::shape::ZPP_Edge,ax);
HXDLIN( 261)							if ((besti == (int)1)) {
HXLINE( 261)								q2 = p21;
HXDLIN( 261)								ax = a1;
            							}
            							else {
HXLINE( 261)								q2 = p11;
HXDLIN( 261)								ax = a2;
HXDLIN( 261)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,tmp) = w1;
HXDLIN( 261)								w1 = w2;
HXDLIN( 261)								w2 = tmp;
HXDLIN( 261)								swapped = !(swapped);
            							}
HXDLIN( 261)							HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ay) = null();
HXDLIN( 261)							HX_VARI_NAME( Float,min2,"min") = ((Float)1e100);
HXDLIN( 261)							{
HXLINE( 261)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite9,"cx_ite") = q2->edges->head;
HXDLIN( 261)								while(hx::IsNotNull( cx_ite9 )){
HXLINE( 261)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a5,"a") = cx_ite9->elt;
HXDLIN( 261)									{
HXLINE( 261)										HX_VARI_NAME( Float,k2,"k") = ((ax->gnormx * a5->gnormx) + (ax->gnormy * a5->gnormy));
HXDLIN( 261)										if ((k2 < min2)) {
HXLINE( 261)											min2 = k2;
HXDLIN( 261)											ay = a5;
            										}
            									}
HXDLIN( 261)									cx_ite9 = cx_ite9->next;
            								}
            							}
HXDLIN( 261)							if (swapped) {
HXLINE( 261)								axis->x = -(ax->gnormx);
HXDLIN( 261)								axis->y = -(ax->gnormy);
            							}
            							else {
HXLINE( 261)								axis->x = ax->gnormx;
HXDLIN( 261)								axis->y = ax->gnormy;
            							}
HXDLIN( 261)							if ((best1 >= (int)0)) {
HXLINE( 261)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v01,"v0") = ax->gp0;
HXDLIN( 261)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v12,"v1") = ax->gp1;
HXDLIN( 261)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q0) = ay->gp0;
HXDLIN( 261)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q1) = ay->gp1;
HXDLIN( 261)								HX_VARI( Float,vx) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,vy) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,qx) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,qy) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									vx = (v12->x - v01->x);
HXDLIN( 261)									vy = (v12->y - v01->y);
            								}
HXDLIN( 261)								{
HXLINE( 261)									qx = (q1->x - q0->x);
HXDLIN( 261)									qy = (q1->y - q0->y);
            								}
HXDLIN( 261)								HX_VARI( Float,vdot) = ((Float)(int)1 / (Float)((vx * vx) + (vy * vy)));
HXDLIN( 261)								HX_VARI( Float,qdot) = ((Float)(int)1 / (Float)((qx * qx) + (qy * qy)));
HXDLIN( 261)								HX_VARI_NAME( Float,t11,"t1") = (-(((vx * (v01->x - q0->x)) + (vy * (v01->y - q0->y)))) * vdot);
HXDLIN( 261)								HX_VARI_NAME( Float,t21,"t2") = (-(((vx * (v01->x - q1->x)) + (vy * (v01->y - q1->y)))) * vdot);
HXDLIN( 261)								HX_VARI_NAME( Float,s12,"s1") = (-(((qx * (q0->x - v01->x)) + (qy * (q0->y - v01->y)))) * qdot);
HXDLIN( 261)								HX_VARI_NAME( Float,s22,"s2") = (-(((qx * (q0->x - v12->x)) + (qy * (q0->y - v12->y)))) * qdot);
HXDLIN( 261)								if ((t11 < (int)0)) {
HXLINE( 261)									t11 = (int)0;
            								}
            								else {
HXLINE( 261)									if ((t11 > (int)1)) {
HXLINE( 261)										t11 = (int)1;
            									}
            								}
HXDLIN( 261)								if ((t21 < (int)0)) {
HXLINE( 261)									t21 = (int)0;
            								}
            								else {
HXLINE( 261)									if ((t21 > (int)1)) {
HXLINE( 261)										t21 = (int)1;
            									}
            								}
HXDLIN( 261)								if ((s12 < (int)0)) {
HXLINE( 261)									s12 = (int)0;
            								}
            								else {
HXLINE( 261)									if ((s12 > (int)1)) {
HXLINE( 261)										s12 = (int)1;
            									}
            								}
HXDLIN( 261)								if ((s22 < (int)0)) {
HXLINE( 261)									s22 = (int)0;
            								}
            								else {
HXLINE( 261)									if ((s22 > (int)1)) {
HXLINE( 261)										s22 = (int)1;
            									}
            								}
HXDLIN( 261)								HX_VARI( Float,f1x) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,f1y) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,t9,"t") = t11;
HXDLIN( 261)									f1x = (v01->x + (vx * t9));
HXDLIN( 261)									f1y = (v01->y + (vy * t9));
            								}
HXDLIN( 261)								HX_VARI( Float,f2x) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,f2y) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,t10,"t") = t21;
HXDLIN( 261)									f2x = (v01->x + (vx * t10));
HXDLIN( 261)									f2y = (v01->y + (vy * t10));
            								}
HXDLIN( 261)								HX_VARI( Float,g1x) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,g1y) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,t12,"t") = s12;
HXDLIN( 261)									g1x = (q0->x + (qx * t12));
HXDLIN( 261)									g1y = (q0->y + (qy * t12));
            								}
HXDLIN( 261)								HX_VARI( Float,g2x) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,g2y) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									HX_VARI_NAME( Float,t13,"t") = s22;
HXDLIN( 261)									g2x = (q0->x + (qx * t13));
HXDLIN( 261)									g2y = (q0->y + (qy * t13));
            								}
HXDLIN( 261)								HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									dx = (f1x - q0->x);
HXDLIN( 261)									dy = (f1y - q0->y);
            								}
HXDLIN( 261)								HX_VARI( Float,d1) = ((dx * dx) + (dy * dy));
HXDLIN( 261)								HX_VARI_NAME( Float,dx1,"dx") = ((Float)0.0);
HXDLIN( 261)								HX_VARI_NAME( Float,dy1,"dy") = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									dx1 = (f2x - q1->x);
HXDLIN( 261)									dy1 = (f2y - q1->y);
            								}
HXDLIN( 261)								HX_VARI_NAME( Float,d22,"d2") = ((dx1 * dx1) + (dy1 * dy1));
HXDLIN( 261)								HX_VARI_NAME( Float,dx2,"dx") = ((Float)0.0);
HXDLIN( 261)								HX_VARI_NAME( Float,dy2,"dy") = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									dx2 = (g1x - v01->x);
HXDLIN( 261)									dy2 = (g1y - v01->y);
            								}
HXDLIN( 261)								HX_VARI_NAME( Float,e11,"e1") = ((dx2 * dx2) + (dy2 * dy2));
HXDLIN( 261)								HX_VARI_NAME( Float,dx3,"dx") = ((Float)0.0);
HXDLIN( 261)								HX_VARI_NAME( Float,dy3,"dy") = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									dx3 = (g2x - v12->x);
HXDLIN( 261)									dy3 = (g2y - v12->y);
            								}
HXDLIN( 261)								HX_VARI_NAME( Float,e21,"e2") = ((dx3 * dx3) + (dy3 * dy3));
HXDLIN( 261)								HX_VARI( Float,minfx) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,minfy) = ((Float)0.0);
HXDLIN( 261)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minq) = null();
HXDLIN( 261)								if ((d1 < d22)) {
HXLINE( 261)									{
HXLINE( 261)										minfx = f1x;
HXDLIN( 261)										minfy = f1y;
            									}
HXDLIN( 261)									minq = q0;
            								}
            								else {
HXLINE( 261)									{
HXLINE( 261)										minfx = f2x;
HXDLIN( 261)										minfy = f2y;
            									}
HXDLIN( 261)									minq = q1;
HXDLIN( 261)									d1 = d22;
            								}
HXDLIN( 261)								HX_VARI( Float,mingx) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,mingy) = ((Float)0.0);
HXDLIN( 261)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minv) = null();
HXDLIN( 261)								if ((e11 < e21)) {
HXLINE( 261)									{
HXLINE( 261)										mingx = g1x;
HXDLIN( 261)										mingy = g1y;
            									}
HXDLIN( 261)									minv = v01;
            								}
            								else {
HXLINE( 261)									{
HXLINE( 261)										mingx = g2x;
HXDLIN( 261)										mingy = g2y;
            									}
HXDLIN( 261)									minv = v12;
HXDLIN( 261)									e11 = e21;
            								}
HXDLIN( 261)								if ((d1 < e11)) {
HXLINE( 261)									{
HXLINE( 261)										w1->x = minfx;
HXDLIN( 261)										w1->y = minfy;
            									}
HXDLIN( 261)									{
HXLINE( 261)										w2->x = minq->x;
HXDLIN( 261)										w2->y = minq->y;
            									}
HXDLIN( 261)									best1 = ::Math_obj::sqrt(d1);
            								}
            								else {
HXLINE( 261)									{
HXLINE( 261)										w2->x = mingx;
HXDLIN( 261)										w2->y = mingy;
            									}
HXDLIN( 261)									{
HXLINE( 261)										w1->x = minv->x;
HXDLIN( 261)										w1->y = minv->y;
            									}
HXDLIN( 261)									best1 = ::Math_obj::sqrt(e11);
            								}
HXDLIN( 261)								if ((best1 != (int)0)) {
HXLINE( 261)									{
HXLINE( 261)										axis->x = (w2->x - w1->x);
HXDLIN( 261)										axis->y = (w2->y - w1->y);
            									}
HXDLIN( 261)									{
HXLINE( 261)										HX_VARI_NAME( Float,t14,"t") = ((Float)((Float)1.0) / (Float)best1);
HXDLIN( 261)										axis->x = (axis->x * t14);
HXDLIN( 261)										axis->y = (axis->y * t14);
            									}
HXDLIN( 261)									if (swapped) {
HXLINE( 261)										axis->x = -(axis->x);
HXDLIN( 261)										axis->y = -(axis->y);
            									}
            								}
HXDLIN( 261)								sep = best1;
            							}
            							else {
HXLINE( 261)								HX_VARI( Float,c0x) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,c0y) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									c0x = ay->gp0->x;
HXDLIN( 261)									c0y = ay->gp0->y;
            								}
HXDLIN( 261)								HX_VARI( Float,c1x) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,c1y) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									c1x = ay->gp1->x;
HXDLIN( 261)									c1y = ay->gp1->y;
            								}
HXDLIN( 261)								HX_VARI( Float,dvx) = ((Float)0.0);
HXDLIN( 261)								HX_VARI( Float,dvy) = ((Float)0.0);
HXDLIN( 261)								{
HXLINE( 261)									dvx = (c1x - c0x);
HXDLIN( 261)									dvy = (c1y - c0y);
            								}
HXDLIN( 261)								HX_VARI( Float,d0) = ((ax->gnormy * c0x) - (ax->gnormx * c0y));
HXDLIN( 261)								HX_VARI_NAME( Float,d11,"d1") = ((ax->gnormy * c1x) - (ax->gnormx * c1y));
HXDLIN( 261)								HX_VARI( Float,den) = ((Float)(int)1 / (Float)(d11 - d0));
HXDLIN( 261)								HX_VARI_NAME( Float,t15,"t") = ((-(ax->tp1) - d0) * den);
HXDLIN( 261)								if ((t15 > ::nape::Config_obj::epsilon)) {
HXLINE( 261)									c0x = (c0x + (dvx * t15));
HXDLIN( 261)									c0y = (c0y + (dvy * t15));
            								}
HXDLIN( 261)								HX_VARI_NAME( Float,t16,"t") = ((-(ax->tp0) - d11) * den);
HXDLIN( 261)								if ((t16 < -(::nape::Config_obj::epsilon))) {
HXLINE( 261)									c1x = (c1x + (dvx * t16));
HXDLIN( 261)									c1y = (c1y + (dvy * t16));
            								}
HXDLIN( 261)								HX_VARI( Float,c0d) = (((c0x * ax->gnormx) + (c0y * ax->gnormy)) - ax->gprojection);
HXDLIN( 261)								HX_VARI( Float,c1d) = (((c1x * ax->gnormx) + (c1y * ax->gnormy)) - ax->gprojection);
HXDLIN( 261)								if ((c0d < c1d)) {
HXLINE( 261)									{
HXLINE( 261)										w2->x = c0x;
HXDLIN( 261)										w2->y = c0y;
            									}
HXDLIN( 261)									{
HXLINE( 261)										HX_VARI_NAME( Float,t17,"t") = -(c0d);
HXDLIN( 261)										w1->x = (w2->x + (ax->gnormx * t17));
HXDLIN( 261)										w1->y = (w2->y + (ax->gnormy * t17));
            									}
HXDLIN( 261)									sep = c0d;
            								}
            								else {
HXLINE( 261)									{
HXLINE( 261)										w2->x = c1x;
HXDLIN( 261)										w2->y = c1y;
            									}
HXDLIN( 261)									{
HXLINE( 261)										HX_VARI_NAME( Float,t18,"t") = -(c1d);
HXDLIN( 261)										w1->x = (w2->x + (ax->gnormx * t18));
HXDLIN( 261)										w1->y = (w2->y + (ax->gnormy * t18));
            									}
HXDLIN( 261)									sep = c1d;
            								}
            							}
            						}
            						else {
HXLINE( 261)							sep = ((Float)1e100);
            						}
            					}
            					else {
HXLINE( 261)						sep = ((Float)1e100);
            					}
            				}
            			}
HXDLIN( 261)			HX_VARI_NAME( Float,sep7,"sep") = (sep + negRadius);
HXLINE( 262)			HX_VARI( Float,dot) = ((deltax * axis->x) + (deltay * axis->y));
HXLINE( 263)			if ((sep7 < ::nape::Config_obj::distanceThresholdCCD)) {
HXLINE( 264)				if (userAPI) {
HXLINE( 265)					goto _hx_goto_0;
            				}
HXLINE( 267)				HX_VARI( Float,d1x) = ((Float)0.0);
HXLINE( 268)				HX_VARI( Float,d1y) = ((Float)0.0);
HXLINE( 269)				{
HXLINE( 270)					d1x = (c1->x - b1->posx);
HXLINE( 271)					d1y = (c1->y - b1->posy);
            				}
HXLINE( 273)				HX_VARI( Float,d2x) = ((Float)0.0);
HXLINE( 274)				HX_VARI( Float,d2y) = ((Float)0.0);
HXLINE( 275)				{
HXLINE( 276)					d2x = (c2->x - b2->posx);
HXLINE( 277)					d2y = (c2->y - b2->posy);
            				}
HXLINE( 279)				HX_VARI( Float,proj) = ((dot - (b1->sweep_angvel * ((axis->y * d1x) - (axis->x * d1y)))) + (b2->sweep_angvel * ((axis->y * d2x) - (axis->x * d2y))));
HXLINE( 280)				if ((proj > (int)0)) {
HXLINE( 281)					toi->slipped = true;
            				}
HXLINE( 283)				bool _hx_tmp3;
HXDLIN( 283)				if (!((proj <= (int)0))) {
HXLINE( 283)					_hx_tmp3 = (sep7 < (::nape::Config_obj::distanceThresholdCCD * ((Float)0.5)));
            				}
            				else {
HXLINE( 283)					_hx_tmp3 = true;
            				}
HXDLIN( 283)				if (_hx_tmp3) {
HXLINE( 284)					goto _hx_goto_0;
            				}
            			}
HXLINE( 287)			HX_VARI( Float,denom) = ((angBias - dot) * timeStep);
HXLINE( 288)			if ((denom <= (int)0)) {
HXLINE( 289)				curTOI = (int)-1;
HXLINE( 290)				goto _hx_goto_0;
            			}
HXLINE( 292)			HX_VARI_NAME( Float,delta2,"delta") = ((Float)sep7 / (Float)denom);
HXLINE( 293)			if ((delta2 < ((Float)1e-6))) {
HXLINE( 293)				delta2 = ((Float)1e-6);
            			}
HXLINE( 294)			curTOI = (curTOI + delta2);
HXLINE( 295)			if ((curTOI >= (int)1)) {
HXLINE( 296)				curTOI = (int)1;
HXLINE( 297)				{
HXLINE( 297)					HX_VARI_NAME( Float,dt3,"dt") = (curTOI * timeStep);
HXDLIN( 297)					HX_VARI_NAME( Float,delta3,"delta") = (dt3 - b1->sweepTime);
HXDLIN( 297)					if ((delta3 != (int)0)) {
HXLINE( 297)						b1->sweepTime = dt3;
HXDLIN( 297)						{
HXLINE( 297)							b1->posx = (b1->posx + (b1->velx * delta3));
HXDLIN( 297)							b1->posy = (b1->posy + (b1->vely * delta3));
            						}
HXDLIN( 297)						if ((b1->angvel != (int)0)) {
HXLINE( 297)							HX_VARI_NAME( Float,dr2,"dr") = (b1->sweep_angvel * delta3);
HXDLIN( 297)							b1->rot = (b1->rot + dr2);
HXDLIN( 297)							if (((dr2 * dr2) > ((Float)0.0001))) {
HXLINE( 297)								b1->axisx = ::Math_obj::sin(b1->rot);
HXDLIN( 297)								b1->axisy = ::Math_obj::cos(b1->rot);
            							}
            							else {
HXLINE( 297)								HX_VARI_NAME( Float,d23,"d2") = (dr2 * dr2);
HXDLIN( 297)								HX_VARI_NAME( Float,p4,"p") = ((int)1 - (((Float)0.5) * d23));
HXDLIN( 297)								HX_VARI_NAME( Float,m2,"m") = ((int)1 - ((Float)(d23 * d23) / (Float)(int)8));
HXDLIN( 297)								HX_VARI_NAME( Float,nx5,"nx") = (((p4 * b1->axisx) + (dr2 * b1->axisy)) * m2);
HXDLIN( 297)								b1->axisy = (((p4 * b1->axisy) - (dr2 * b1->axisx)) * m2);
HXDLIN( 297)								b1->axisx = nx5;
            							}
            						}
            					}
            				}
HXLINE( 298)				if ((s1->type == (int)0)) {
HXLINE( 298)					s1->worldCOMx = (b1->posx + ((b1->axisy * s1->localCOMx) - (b1->axisx * s1->localCOMy)));
HXDLIN( 298)					s1->worldCOMy = (b1->posy + ((s1->localCOMx * b1->axisx) + (s1->localCOMy * b1->axisy)));
            				}
            				else {
HXLINE( 298)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p5,"p") = s1->polygon;
HXDLIN( 298)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li2,"li") = p5->lverts->next;
HXDLIN( 298)					{
HXLINE( 298)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite10,"cx_ite") = p5->gverts->next;
HXDLIN( 298)						while(hx::IsNotNull( cx_ite10 )){
HXLINE( 298)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g2,"g") = cx_ite10;
HXDLIN( 298)							{
HXLINE( 298)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l2,"l") = li2;
HXDLIN( 298)								li2 = li2->next;
HXDLIN( 298)								{
HXLINE( 298)									g2->x = (b1->posx + ((b1->axisy * l2->x) - (b1->axisx * l2->y)));
HXDLIN( 298)									g2->y = (b1->posy + ((l2->x * b1->axisx) + (l2->y * b1->axisy)));
            								}
            							}
HXDLIN( 298)							cx_ite10 = cx_ite10->next;
            						}
            					}
HXDLIN( 298)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite2,"ite") = p5->edges->head;
HXDLIN( 298)					{
HXLINE( 298)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite11,"cx_ite") = p5->gverts->next;
HXDLIN( 298)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u2,"u") = cx_ite11;
HXDLIN( 298)						cx_ite11 = cx_ite11->next;
HXDLIN( 298)						while(hx::IsNotNull( cx_ite11 )){
HXLINE( 298)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v4,"v") = cx_ite11;
HXDLIN( 298)							{
HXLINE( 298)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e4,"e") = ite2->elt;
HXDLIN( 298)								ite2 = ite2->next;
HXDLIN( 298)								{
HXLINE( 298)									e4->gnormx = ((b1->axisy * e4->lnormx) - (b1->axisx * e4->lnormy));
HXDLIN( 298)									e4->gnormy = ((e4->lnormx * b1->axisx) + (e4->lnormy * b1->axisy));
            								}
HXDLIN( 298)								e4->gprojection = (((b1->posx * e4->gnormx) + (b1->posy * e4->gnormy)) + e4->lprojection);
HXDLIN( 298)								e4->tp0 = ((u2->y * e4->gnormx) - (u2->x * e4->gnormy));
HXDLIN( 298)								e4->tp1 = ((v4->y * e4->gnormx) - (v4->x * e4->gnormy));
            							}
HXDLIN( 298)							u2 = v4;
HXDLIN( 298)							cx_ite11 = cx_ite11->next;
            						}
HXDLIN( 298)						 ::zpp_nape::geom::ZPP_Vec2 _this2 = p5->gverts->next;
HXDLIN( 298)						{
HXLINE( 298)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e5,"e") = ite2->elt;
HXDLIN( 298)							{
HXLINE( 298)								e5->gnormx = ((b1->axisy * e5->lnormx) - (b1->axisx * e5->lnormy));
HXDLIN( 298)								e5->gnormy = ((e5->lnormx * b1->axisx) + (e5->lnormy * b1->axisy));
            							}
HXDLIN( 298)							e5->gprojection = (((b1->posx * e5->gnormx) + (b1->posy * e5->gnormy)) + e5->lprojection);
HXDLIN( 298)							e5->tp0 = ((u2->y * e5->gnormx) - (u2->x * e5->gnormy));
HXDLIN( 298)							e5->tp1 = ((_this2->y * e5->gnormx) - (_this2->x * e5->gnormy));
            						}
            					}
            				}
HXLINE( 299)				{
HXLINE( 299)					HX_VARI_NAME( Float,dt4,"dt") = (curTOI * timeStep);
HXDLIN( 299)					HX_VARI_NAME( Float,delta4,"delta") = (dt4 - b2->sweepTime);
HXDLIN( 299)					if ((delta4 != (int)0)) {
HXLINE( 299)						b2->sweepTime = dt4;
HXDLIN( 299)						{
HXLINE( 299)							b2->posx = (b2->posx + (b2->velx * delta4));
HXDLIN( 299)							b2->posy = (b2->posy + (b2->vely * delta4));
            						}
HXDLIN( 299)						if ((b2->angvel != (int)0)) {
HXLINE( 299)							HX_VARI_NAME( Float,dr3,"dr") = (b2->sweep_angvel * delta4);
HXDLIN( 299)							b2->rot = (b2->rot + dr3);
HXDLIN( 299)							if (((dr3 * dr3) > ((Float)0.0001))) {
HXLINE( 299)								b2->axisx = ::Math_obj::sin(b2->rot);
HXDLIN( 299)								b2->axisy = ::Math_obj::cos(b2->rot);
            							}
            							else {
HXLINE( 299)								HX_VARI_NAME( Float,d24,"d2") = (dr3 * dr3);
HXDLIN( 299)								HX_VARI_NAME( Float,p6,"p") = ((int)1 - (((Float)0.5) * d24));
HXDLIN( 299)								HX_VARI_NAME( Float,m3,"m") = ((int)1 - ((Float)(d24 * d24) / (Float)(int)8));
HXDLIN( 299)								HX_VARI_NAME( Float,nx6,"nx") = (((p6 * b2->axisx) + (dr3 * b2->axisy)) * m3);
HXDLIN( 299)								b2->axisy = (((p6 * b2->axisy) - (dr3 * b2->axisx)) * m3);
HXDLIN( 299)								b2->axisx = nx6;
            							}
            						}
            					}
            				}
HXLINE( 300)				if ((s2->type == (int)0)) {
HXLINE( 300)					s2->worldCOMx = (b2->posx + ((b2->axisy * s2->localCOMx) - (b2->axisx * s2->localCOMy)));
HXDLIN( 300)					s2->worldCOMy = (b2->posy + ((s2->localCOMx * b2->axisx) + (s2->localCOMy * b2->axisy)));
            				}
            				else {
HXLINE( 300)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p7,"p") = s2->polygon;
HXDLIN( 300)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li3,"li") = p7->lverts->next;
HXDLIN( 300)					{
HXLINE( 300)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite12,"cx_ite") = p7->gverts->next;
HXDLIN( 300)						while(hx::IsNotNull( cx_ite12 )){
HXLINE( 300)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g3,"g") = cx_ite12;
HXDLIN( 300)							{
HXLINE( 300)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l3,"l") = li3;
HXDLIN( 300)								li3 = li3->next;
HXDLIN( 300)								{
HXLINE( 300)									g3->x = (b2->posx + ((b2->axisy * l3->x) - (b2->axisx * l3->y)));
HXDLIN( 300)									g3->y = (b2->posy + ((l3->x * b2->axisx) + (l3->y * b2->axisy)));
            								}
            							}
HXDLIN( 300)							cx_ite12 = cx_ite12->next;
            						}
            					}
HXDLIN( 300)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite3,"ite") = p7->edges->head;
HXDLIN( 300)					{
HXLINE( 300)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite13,"cx_ite") = p7->gverts->next;
HXDLIN( 300)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u3,"u") = cx_ite13;
HXDLIN( 300)						cx_ite13 = cx_ite13->next;
HXDLIN( 300)						while(hx::IsNotNull( cx_ite13 )){
HXLINE( 300)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v5,"v") = cx_ite13;
HXDLIN( 300)							{
HXLINE( 300)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e6,"e") = ite3->elt;
HXDLIN( 300)								ite3 = ite3->next;
HXDLIN( 300)								{
HXLINE( 300)									e6->gnormx = ((b2->axisy * e6->lnormx) - (b2->axisx * e6->lnormy));
HXDLIN( 300)									e6->gnormy = ((e6->lnormx * b2->axisx) + (e6->lnormy * b2->axisy));
            								}
HXDLIN( 300)								e6->gprojection = (((b2->posx * e6->gnormx) + (b2->posy * e6->gnormy)) + e6->lprojection);
HXDLIN( 300)								e6->tp0 = ((u3->y * e6->gnormx) - (u3->x * e6->gnormy));
HXDLIN( 300)								e6->tp1 = ((v5->y * e6->gnormx) - (v5->x * e6->gnormy));
            							}
HXDLIN( 300)							u3 = v5;
HXDLIN( 300)							cx_ite13 = cx_ite13->next;
            						}
HXDLIN( 300)						 ::zpp_nape::geom::ZPP_Vec2 _this3 = p7->gverts->next;
HXDLIN( 300)						{
HXLINE( 300)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e7,"e") = ite3->elt;
HXDLIN( 300)							{
HXLINE( 300)								e7->gnormx = ((b2->axisy * e7->lnormx) - (b2->axisx * e7->lnormy));
HXDLIN( 300)								e7->gnormy = ((e7->lnormx * b2->axisx) + (e7->lnormy * b2->axisy));
            							}
HXDLIN( 300)							e7->gprojection = (((b2->posx * e7->gnormx) + (b2->posy * e7->gnormy)) + e7->lprojection);
HXDLIN( 300)							e7->tp0 = ((u3->y * e7->gnormx) - (u3->x * e7->gnormy));
HXDLIN( 300)							e7->tp1 = ((_this3->y * e7->gnormx) - (_this3->x * e7->gnormy));
            						}
            					}
            				}
HXLINE( 301)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s13,"s1") = s1;
HXDLIN( 301)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s23,"s2") = s2;
HXDLIN( 301)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w11,"w1") = c1;
HXDLIN( 301)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w21,"w2") = c2;
HXDLIN( 301)				Float sep8;
HXDLIN( 301)				bool sep9;
HXDLIN( 301)				if ((s1->type == (int)0)) {
HXLINE( 301)					sep9 = (s2->type == (int)0);
            				}
            				else {
HXLINE( 301)					sep9 = false;
            				}
HXDLIN( 301)				if (sep9) {
HXLINE( 301)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c12,"c1") = s1->circle;
HXDLIN( 301)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c22,"c2") = s2->circle;
HXDLIN( 301)					HX_VAR_NAME( Float,dist2,"dist");
HXDLIN( 301)					{
HXLINE( 301)						HX_VARI_NAME( Float,nx7,"nx") = ((Float)0.0);
HXDLIN( 301)						HX_VARI_NAME( Float,ny3,"ny") = ((Float)0.0);
HXDLIN( 301)						{
HXLINE( 301)							nx7 = (c22->worldCOMx - c12->worldCOMx);
HXDLIN( 301)							ny3 = (c22->worldCOMy - c12->worldCOMy);
            						}
HXDLIN( 301)						HX_VARI_NAME( Float,len3,"len") = ::Math_obj::sqrt(((nx7 * nx7) + (ny3 * ny3)));
HXDLIN( 301)						dist2 = (len3 - (c12->radius + c22->radius));
HXDLIN( 301)						if ((dist2 < ((Float)1e100))) {
HXLINE( 301)							if ((len3 == (int)0)) {
HXLINE( 301)								nx7 = (int)1;
HXDLIN( 301)								ny3 = (int)0;
            							}
            							else {
HXLINE( 301)								HX_VARI_NAME( Float,t19,"t") = ((Float)((Float)1.0) / (Float)len3);
HXDLIN( 301)								nx7 = (nx7 * t19);
HXDLIN( 301)								ny3 = (ny3 * t19);
            							}
HXDLIN( 301)							{
HXLINE( 301)								HX_VARI_NAME( Float,t20,"t") = c12->radius;
HXDLIN( 301)								c1->x = (c12->worldCOMx + (nx7 * t20));
HXDLIN( 301)								c1->y = (c12->worldCOMy + (ny3 * t20));
            							}
HXDLIN( 301)							{
HXLINE( 301)								HX_VARI_NAME( Float,t22,"t") = -(c22->radius);
HXDLIN( 301)								c2->x = (c22->worldCOMx + (nx7 * t22));
HXDLIN( 301)								c2->y = (c22->worldCOMy + (ny3 * t22));
            							}
HXDLIN( 301)							{
HXLINE( 301)								axis->x = nx7;
HXDLIN( 301)								axis->y = ny3;
            							}
            						}
            					}
HXDLIN( 301)					sep8 = dist2;
            				}
            				else {
HXLINE( 301)					HX_VARI_NAME( bool,swapped1,"swapped") = false;
HXDLIN( 301)					bool sep10;
HXDLIN( 301)					if ((s1->type == (int)0)) {
HXLINE( 301)						sep10 = (s2->type == (int)1);
            					}
            					else {
HXLINE( 301)						sep10 = false;
            					}
HXDLIN( 301)					if (sep10) {
HXLINE( 301)						s13 = s2;
HXDLIN( 301)						s23 = s1;
HXDLIN( 301)						w11 = c2;
HXDLIN( 301)						w21 = c1;
HXDLIN( 301)						swapped1 = true;
            					}
HXDLIN( 301)					bool sep11;
HXDLIN( 301)					if ((s13->type == (int)1)) {
HXLINE( 301)						sep11 = (s23->type == (int)0);
            					}
            					else {
HXLINE( 301)						sep11 = false;
            					}
HXDLIN( 301)					if (sep11) {
HXLINE( 301)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,circle1,"circle") = s23->circle;
HXDLIN( 301)						HX_VARI_NAME( Float,best2,"best") = ((Float)-1e+100);
HXDLIN( 301)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a01,"a0") = null();
HXDLIN( 301)						{
HXLINE( 301)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite14,"cx_ite") = s13->polygon->edges->head;
HXDLIN( 301)							while(hx::IsNotNull( cx_ite14 )){
HXLINE( 301)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a6,"a") = cx_ite14->elt;
HXDLIN( 301)								{
HXLINE( 301)									HX_VARI_NAME( Float,dist3,"dist") = ((((a6->gnormx * circle1->worldCOMx) + (a6->gnormy * circle1->worldCOMy)) - a6->gprojection) - circle1->radius);
HXDLIN( 301)									if ((dist3 > ((Float)1e100))) {
HXLINE( 301)										best2 = dist3;
HXDLIN( 301)										goto _hx_goto_15;
            									}
HXDLIN( 301)									if ((dist3 > (int)0)) {
HXLINE( 301)										if ((dist3 > best2)) {
HXLINE( 301)											best2 = dist3;
HXDLIN( 301)											a01 = a6;
            										}
            									}
            									else {
HXLINE( 301)										bool sep12;
HXDLIN( 301)										if ((best2 < (int)0)) {
HXLINE( 301)											sep12 = (dist3 > best2);
            										}
            										else {
HXLINE( 301)											sep12 = false;
            										}
HXDLIN( 301)										if (sep12) {
HXLINE( 301)											best2 = dist3;
HXDLIN( 301)											a01 = a6;
            										}
            									}
            								}
HXDLIN( 301)								cx_ite14 = cx_ite14->next;
            							}
            							_hx_goto_15:;
            						}
HXDLIN( 301)						if ((best2 < ((Float)1e100))) {
HXLINE( 301)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v02,"v0") = a01->gp0;
HXDLIN( 301)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v13,"v1") = a01->gp1;
HXDLIN( 301)							HX_VARI_NAME( Float,dt5,"dt") = ((circle1->worldCOMy * a01->gnormx) - (circle1->worldCOMx * a01->gnormy));
HXDLIN( 301)							if ((dt5 <= ((v02->y * a01->gnormx) - (v02->x * a01->gnormy)))) {
HXLINE( 301)								HX_VARI_NAME( Float,nx8,"nx") = ((Float)0.0);
HXDLIN( 301)								HX_VARI_NAME( Float,ny4,"ny") = ((Float)0.0);
HXDLIN( 301)								{
HXLINE( 301)									nx8 = (circle1->worldCOMx - v02->x);
HXDLIN( 301)									ny4 = (circle1->worldCOMy - v02->y);
            								}
HXDLIN( 301)								HX_VARI_NAME( Float,len4,"len") = ::Math_obj::sqrt(((nx8 * nx8) + (ny4 * ny4)));
HXDLIN( 301)								best2 = (len4 - circle1->radius);
HXDLIN( 301)								if ((best2 < ((Float)1e100))) {
HXLINE( 301)									if ((len4 == (int)0)) {
HXLINE( 301)										nx8 = (int)1;
HXDLIN( 301)										ny4 = (int)0;
            									}
            									else {
HXLINE( 301)										HX_VARI_NAME( Float,t23,"t") = ((Float)((Float)1.0) / (Float)len4);
HXDLIN( 301)										nx8 = (nx8 * t23);
HXDLIN( 301)										ny4 = (ny4 * t23);
            									}
HXDLIN( 301)									{
HXLINE( 301)										w11->x = (v02->x + (nx8 * (int)0));
HXDLIN( 301)										w11->y = (v02->y + (ny4 * (int)0));
            									}
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,t24,"t") = -(circle1->radius);
HXDLIN( 301)										w21->x = (circle1->worldCOMx + (nx8 * t24));
HXDLIN( 301)										w21->y = (circle1->worldCOMy + (ny4 * t24));
            									}
HXDLIN( 301)									{
HXLINE( 301)										axis->x = nx8;
HXDLIN( 301)										axis->y = ny4;
            									}
            								}
            							}
            							else {
HXLINE( 301)								if ((dt5 >= ((v13->y * a01->gnormx) - (v13->x * a01->gnormy)))) {
HXLINE( 301)									HX_VARI_NAME( Float,nx9,"nx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,ny5,"ny") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										nx9 = (circle1->worldCOMx - v13->x);
HXDLIN( 301)										ny5 = (circle1->worldCOMy - v13->y);
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,len5,"len") = ::Math_obj::sqrt(((nx9 * nx9) + (ny5 * ny5)));
HXDLIN( 301)									best2 = (len5 - circle1->radius);
HXDLIN( 301)									if ((best2 < ((Float)1e100))) {
HXLINE( 301)										if ((len5 == (int)0)) {
HXLINE( 301)											nx9 = (int)1;
HXDLIN( 301)											ny5 = (int)0;
            										}
            										else {
HXLINE( 301)											HX_VARI_NAME( Float,t25,"t") = ((Float)((Float)1.0) / (Float)len5);
HXDLIN( 301)											nx9 = (nx9 * t25);
HXDLIN( 301)											ny5 = (ny5 * t25);
            										}
HXDLIN( 301)										{
HXLINE( 301)											w11->x = (v13->x + (nx9 * (int)0));
HXDLIN( 301)											w11->y = (v13->y + (ny5 * (int)0));
            										}
HXDLIN( 301)										{
HXLINE( 301)											HX_VARI_NAME( Float,t26,"t") = -(circle1->radius);
HXDLIN( 301)											w21->x = (circle1->worldCOMx + (nx9 * t26));
HXDLIN( 301)											w21->y = (circle1->worldCOMy + (ny5 * t26));
            										}
HXDLIN( 301)										{
HXLINE( 301)											axis->x = nx9;
HXDLIN( 301)											axis->y = ny5;
            										}
            									}
            								}
            								else {
HXLINE( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,t27,"t") = -(circle1->radius);
HXDLIN( 301)										w21->x = (circle1->worldCOMx + (a01->gnormx * t27));
HXDLIN( 301)										w21->y = (circle1->worldCOMy + (a01->gnormy * t27));
            									}
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,t28,"t") = -(best2);
HXDLIN( 301)										w11->x = (w21->x + (a01->gnormx * t28));
HXDLIN( 301)										w11->y = (w21->y + (a01->gnormy * t28));
            									}
HXDLIN( 301)									{
HXLINE( 301)										axis->x = a01->gnormx;
HXDLIN( 301)										axis->y = a01->gnormy;
            									}
            								}
            							}
            						}
HXDLIN( 301)						if (swapped1) {
HXLINE( 301)							axis->x = -(axis->x);
HXDLIN( 301)							axis->y = -(axis->y);
            						}
HXDLIN( 301)						sep8 = best2;
            					}
            					else {
HXLINE( 301)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p12,"p1") = s13->polygon;
HXDLIN( 301)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p22,"p2") = s23->polygon;
HXDLIN( 301)						HX_VARI_NAME( Float,best3,"best") = ((Float)-1e+100);
HXDLIN( 301)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a11,"a1") = null();
HXDLIN( 301)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a21,"a2") = null();
HXDLIN( 301)						HX_VARI_NAME( int,besti1,"besti") = (int)0;
HXDLIN( 301)						{
HXLINE( 301)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite15,"cx_ite") = p12->edges->head;
HXDLIN( 301)							while(hx::IsNotNull( cx_ite15 )){
HXLINE( 301)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a7,"a") = cx_ite15->elt;
HXDLIN( 301)								{
HXLINE( 301)									HX_VARI_NAME( Float,min3,"min") = ((Float)1e100);
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite16,"cx_ite") = p22->gverts->next;
HXDLIN( 301)										while(hx::IsNotNull( cx_ite16 )){
HXLINE( 301)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v6,"v") = cx_ite16;
HXDLIN( 301)											{
HXLINE( 301)												HX_VARI_NAME( Float,k3,"k") = ((a7->gnormx * v6->x) + (a7->gnormy * v6->y));
HXDLIN( 301)												if ((k3 < min3)) {
HXLINE( 301)													min3 = k3;
            												}
            											}
HXDLIN( 301)											cx_ite16 = cx_ite16->next;
            										}
            									}
HXDLIN( 301)									min3 = (min3 - a7->gprojection);
HXDLIN( 301)									if ((min3 > ((Float)1e100))) {
HXLINE( 301)										best3 = min3;
HXDLIN( 301)										goto _hx_goto_16;
            									}
HXDLIN( 301)									if ((min3 > (int)0)) {
HXLINE( 301)										if ((min3 > best3)) {
HXLINE( 301)											best3 = min3;
HXDLIN( 301)											a11 = a7;
HXDLIN( 301)											besti1 = (int)1;
            										}
            									}
            									else {
HXLINE( 301)										bool sep13;
HXDLIN( 301)										if ((best3 < (int)0)) {
HXLINE( 301)											sep13 = (min3 > best3);
            										}
            										else {
HXLINE( 301)											sep13 = false;
            										}
HXDLIN( 301)										if (sep13) {
HXLINE( 301)											best3 = min3;
HXDLIN( 301)											a11 = a7;
HXDLIN( 301)											besti1 = (int)1;
            										}
            									}
            								}
HXDLIN( 301)								cx_ite15 = cx_ite15->next;
            							}
            							_hx_goto_16:;
            						}
HXDLIN( 301)						if ((best3 < ((Float)1e100))) {
HXLINE( 301)							{
HXLINE( 301)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite17,"cx_ite") = p22->edges->head;
HXDLIN( 301)								while(hx::IsNotNull( cx_ite17 )){
HXLINE( 301)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a8,"a") = cx_ite17->elt;
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,min4,"min") = ((Float)1e100);
HXDLIN( 301)										{
HXLINE( 301)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite18,"cx_ite") = p12->gverts->next;
HXDLIN( 301)											while(hx::IsNotNull( cx_ite18 )){
HXLINE( 301)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v7,"v") = cx_ite18;
HXDLIN( 301)												{
HXLINE( 301)													HX_VARI_NAME( Float,k4,"k") = ((a8->gnormx * v7->x) + (a8->gnormy * v7->y));
HXDLIN( 301)													if ((k4 < min4)) {
HXLINE( 301)														min4 = k4;
            													}
            												}
HXDLIN( 301)												cx_ite18 = cx_ite18->next;
            											}
            										}
HXDLIN( 301)										min4 = (min4 - a8->gprojection);
HXDLIN( 301)										if ((min4 > ((Float)1e100))) {
HXLINE( 301)											best3 = min4;
HXDLIN( 301)											goto _hx_goto_18;
            										}
HXDLIN( 301)										if ((min4 > (int)0)) {
HXLINE( 301)											if ((min4 > best3)) {
HXLINE( 301)												best3 = min4;
HXDLIN( 301)												a21 = a8;
HXDLIN( 301)												besti1 = (int)2;
            											}
            										}
            										else {
HXLINE( 301)											bool sep14;
HXDLIN( 301)											if ((best3 < (int)0)) {
HXLINE( 301)												sep14 = (min4 > best3);
            											}
            											else {
HXLINE( 301)												sep14 = false;
            											}
HXDLIN( 301)											if (sep14) {
HXLINE( 301)												best3 = min4;
HXDLIN( 301)												a21 = a8;
HXDLIN( 301)												besti1 = (int)2;
            											}
            										}
            									}
HXDLIN( 301)									cx_ite17 = cx_ite17->next;
            								}
            								_hx_goto_18:;
            							}
HXDLIN( 301)							if ((best3 < ((Float)1e100))) {
HXLINE( 301)								HX_VAR_NAME(  ::zpp_nape::shape::ZPP_Polygon,q21,"q2");
HXDLIN( 301)								HX_VAR_NAME(  ::zpp_nape::shape::ZPP_Edge,ax1,"ax");
HXDLIN( 301)								if ((besti1 == (int)1)) {
HXLINE( 301)									q21 = p22;
HXDLIN( 301)									ax1 = a11;
            								}
            								else {
HXLINE( 301)									q21 = p12;
HXDLIN( 301)									ax1 = a21;
HXDLIN( 301)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,tmp1,"tmp") = w11;
HXDLIN( 301)									w11 = w21;
HXDLIN( 301)									w21 = tmp1;
HXDLIN( 301)									swapped1 = !(swapped1);
            								}
HXDLIN( 301)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,ay1,"ay") = null();
HXDLIN( 301)								HX_VARI_NAME( Float,min5,"min") = ((Float)1e100);
HXDLIN( 301)								{
HXLINE( 301)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite19,"cx_ite") = q21->edges->head;
HXDLIN( 301)									while(hx::IsNotNull( cx_ite19 )){
HXLINE( 301)										HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a9,"a") = cx_ite19->elt;
HXDLIN( 301)										{
HXLINE( 301)											HX_VARI_NAME( Float,k5,"k") = ((ax1->gnormx * a9->gnormx) + (ax1->gnormy * a9->gnormy));
HXDLIN( 301)											if ((k5 < min5)) {
HXLINE( 301)												min5 = k5;
HXDLIN( 301)												ay1 = a9;
            											}
            										}
HXDLIN( 301)										cx_ite19 = cx_ite19->next;
            									}
            								}
HXDLIN( 301)								if (swapped1) {
HXLINE( 301)									axis->x = -(ax1->gnormx);
HXDLIN( 301)									axis->y = -(ax1->gnormy);
            								}
            								else {
HXLINE( 301)									axis->x = ax1->gnormx;
HXDLIN( 301)									axis->y = ax1->gnormy;
            								}
HXDLIN( 301)								if ((best3 >= (int)0)) {
HXLINE( 301)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v03,"v0") = ax1->gp0;
HXDLIN( 301)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v14,"v1") = ax1->gp1;
HXDLIN( 301)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,q01,"q0") = ay1->gp0;
HXDLIN( 301)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,q11,"q1") = ay1->gp1;
HXDLIN( 301)									HX_VARI_NAME( Float,vx1,"vx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,vy1,"vy") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,qx1,"qx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,qy1,"qy") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										vx1 = (v14->x - v03->x);
HXDLIN( 301)										vy1 = (v14->y - v03->y);
            									}
HXDLIN( 301)									{
HXLINE( 301)										qx1 = (q11->x - q01->x);
HXDLIN( 301)										qy1 = (q11->y - q01->y);
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,vdot1,"vdot") = ((Float)(int)1 / (Float)((vx1 * vx1) + (vy1 * vy1)));
HXDLIN( 301)									HX_VARI_NAME( Float,qdot1,"qdot") = ((Float)(int)1 / (Float)((qx1 * qx1) + (qy1 * qy1)));
HXDLIN( 301)									HX_VARI_NAME( Float,t110,"t1") = (-(((vx1 * (v03->x - q01->x)) + (vy1 * (v03->y - q01->y)))) * vdot1);
HXDLIN( 301)									HX_VARI_NAME( Float,t29,"t2") = (-(((vx1 * (v03->x - q11->x)) + (vy1 * (v03->y - q11->y)))) * vdot1);
HXDLIN( 301)									HX_VARI_NAME( Float,s14,"s1") = (-(((qx1 * (q01->x - v03->x)) + (qy1 * (q01->y - v03->y)))) * qdot1);
HXDLIN( 301)									HX_VARI_NAME( Float,s24,"s2") = (-(((qx1 * (q01->x - v14->x)) + (qy1 * (q01->y - v14->y)))) * qdot1);
HXDLIN( 301)									if ((t110 < (int)0)) {
HXLINE( 301)										t110 = (int)0;
            									}
            									else {
HXLINE( 301)										if ((t110 > (int)1)) {
HXLINE( 301)											t110 = (int)1;
            										}
            									}
HXDLIN( 301)									if ((t29 < (int)0)) {
HXLINE( 301)										t29 = (int)0;
            									}
            									else {
HXLINE( 301)										if ((t29 > (int)1)) {
HXLINE( 301)											t29 = (int)1;
            										}
            									}
HXDLIN( 301)									if ((s14 < (int)0)) {
HXLINE( 301)										s14 = (int)0;
            									}
            									else {
HXLINE( 301)										if ((s14 > (int)1)) {
HXLINE( 301)											s14 = (int)1;
            										}
            									}
HXDLIN( 301)									if ((s24 < (int)0)) {
HXLINE( 301)										s24 = (int)0;
            									}
            									else {
HXLINE( 301)										if ((s24 > (int)1)) {
HXLINE( 301)											s24 = (int)1;
            										}
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,f1x1,"f1x") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,f1y1,"f1y") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,t30,"t") = t110;
HXDLIN( 301)										f1x1 = (v03->x + (vx1 * t30));
HXDLIN( 301)										f1y1 = (v03->y + (vy1 * t30));
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,f2x1,"f2x") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,f2y1,"f2y") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,t31,"t") = t29;
HXDLIN( 301)										f2x1 = (v03->x + (vx1 * t31));
HXDLIN( 301)										f2y1 = (v03->y + (vy1 * t31));
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,g1x1,"g1x") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,g1y1,"g1y") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,t32,"t") = s14;
HXDLIN( 301)										g1x1 = (q01->x + (qx1 * t32));
HXDLIN( 301)										g1y1 = (q01->y + (qy1 * t32));
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,g2x1,"g2x") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,g2y1,"g2y") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										HX_VARI_NAME( Float,t33,"t") = s24;
HXDLIN( 301)										g2x1 = (q01->x + (qx1 * t33));
HXDLIN( 301)										g2y1 = (q01->y + (qy1 * t33));
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,dx4,"dx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,dy4,"dy") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										dx4 = (f1x1 - q01->x);
HXDLIN( 301)										dy4 = (f1y1 - q01->y);
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,d12,"d1") = ((dx4 * dx4) + (dy4 * dy4));
HXDLIN( 301)									HX_VARI_NAME( Float,dx5,"dx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,dy5,"dy") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										dx5 = (f2x1 - q11->x);
HXDLIN( 301)										dy5 = (f2y1 - q11->y);
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,d25,"d2") = ((dx5 * dx5) + (dy5 * dy5));
HXDLIN( 301)									HX_VARI_NAME( Float,dx6,"dx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,dy6,"dy") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										dx6 = (g1x1 - v03->x);
HXDLIN( 301)										dy6 = (g1y1 - v03->y);
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,e12,"e1") = ((dx6 * dx6) + (dy6 * dy6));
HXDLIN( 301)									HX_VARI_NAME( Float,dx7,"dx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,dy7,"dy") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										dx7 = (g2x1 - v14->x);
HXDLIN( 301)										dy7 = (g2y1 - v14->y);
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,e22,"e2") = ((dx7 * dx7) + (dy7 * dy7));
HXDLIN( 301)									HX_VARI_NAME( Float,minfx1,"minfx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,minfy1,"minfy") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,minq1,"minq") = null();
HXDLIN( 301)									if ((d12 < d25)) {
HXLINE( 301)										{
HXLINE( 301)											minfx1 = f1x1;
HXDLIN( 301)											minfy1 = f1y1;
            										}
HXDLIN( 301)										minq1 = q01;
            									}
            									else {
HXLINE( 301)										{
HXLINE( 301)											minfx1 = f2x1;
HXDLIN( 301)											minfy1 = f2y1;
            										}
HXDLIN( 301)										minq1 = q11;
HXDLIN( 301)										d12 = d25;
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,mingx1,"mingx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,mingy1,"mingy") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,minv1,"minv") = null();
HXDLIN( 301)									if ((e12 < e22)) {
HXLINE( 301)										{
HXLINE( 301)											mingx1 = g1x1;
HXDLIN( 301)											mingy1 = g1y1;
            										}
HXDLIN( 301)										minv1 = v03;
            									}
            									else {
HXLINE( 301)										{
HXLINE( 301)											mingx1 = g2x1;
HXDLIN( 301)											mingy1 = g2y1;
            										}
HXDLIN( 301)										minv1 = v14;
HXDLIN( 301)										e12 = e22;
            									}
HXDLIN( 301)									if ((d12 < e12)) {
HXLINE( 301)										{
HXLINE( 301)											w11->x = minfx1;
HXDLIN( 301)											w11->y = minfy1;
            										}
HXDLIN( 301)										{
HXLINE( 301)											w21->x = minq1->x;
HXDLIN( 301)											w21->y = minq1->y;
            										}
HXDLIN( 301)										best3 = ::Math_obj::sqrt(d12);
            									}
            									else {
HXLINE( 301)										{
HXLINE( 301)											w21->x = mingx1;
HXDLIN( 301)											w21->y = mingy1;
            										}
HXDLIN( 301)										{
HXLINE( 301)											w11->x = minv1->x;
HXDLIN( 301)											w11->y = minv1->y;
            										}
HXDLIN( 301)										best3 = ::Math_obj::sqrt(e12);
            									}
HXDLIN( 301)									if ((best3 != (int)0)) {
HXLINE( 301)										{
HXLINE( 301)											axis->x = (w21->x - w11->x);
HXDLIN( 301)											axis->y = (w21->y - w11->y);
            										}
HXDLIN( 301)										{
HXLINE( 301)											HX_VARI_NAME( Float,t34,"t") = ((Float)((Float)1.0) / (Float)best3);
HXDLIN( 301)											axis->x = (axis->x * t34);
HXDLIN( 301)											axis->y = (axis->y * t34);
            										}
HXDLIN( 301)										if (swapped1) {
HXLINE( 301)											axis->x = -(axis->x);
HXDLIN( 301)											axis->y = -(axis->y);
            										}
            									}
HXDLIN( 301)									sep8 = best3;
            								}
            								else {
HXLINE( 301)									HX_VARI_NAME( Float,c0x1,"c0x") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,c0y1,"c0y") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										c0x1 = ay1->gp0->x;
HXDLIN( 301)										c0y1 = ay1->gp0->y;
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,c1x1,"c1x") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,c1y1,"c1y") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										c1x1 = ay1->gp1->x;
HXDLIN( 301)										c1y1 = ay1->gp1->y;
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,dvx1,"dvx") = ((Float)0.0);
HXDLIN( 301)									HX_VARI_NAME( Float,dvy1,"dvy") = ((Float)0.0);
HXDLIN( 301)									{
HXLINE( 301)										dvx1 = (c1x1 - c0x1);
HXDLIN( 301)										dvy1 = (c1y1 - c0y1);
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,d01,"d0") = ((ax1->gnormy * c0x1) - (ax1->gnormx * c0y1));
HXDLIN( 301)									HX_VARI_NAME( Float,d13,"d1") = ((ax1->gnormy * c1x1) - (ax1->gnormx * c1y1));
HXDLIN( 301)									HX_VARI_NAME( Float,den1,"den") = ((Float)(int)1 / (Float)(d13 - d01));
HXDLIN( 301)									HX_VARI_NAME( Float,t35,"t") = ((-(ax1->tp1) - d01) * den1);
HXDLIN( 301)									if ((t35 > ::nape::Config_obj::epsilon)) {
HXLINE( 301)										c0x1 = (c0x1 + (dvx1 * t35));
HXDLIN( 301)										c0y1 = (c0y1 + (dvy1 * t35));
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,t36,"t") = ((-(ax1->tp0) - d13) * den1);
HXDLIN( 301)									if ((t36 < -(::nape::Config_obj::epsilon))) {
HXLINE( 301)										c1x1 = (c1x1 + (dvx1 * t36));
HXDLIN( 301)										c1y1 = (c1y1 + (dvy1 * t36));
            									}
HXDLIN( 301)									HX_VARI_NAME( Float,c0d1,"c0d") = (((c0x1 * ax1->gnormx) + (c0y1 * ax1->gnormy)) - ax1->gprojection);
HXDLIN( 301)									HX_VARI_NAME( Float,c1d1,"c1d") = (((c1x1 * ax1->gnormx) + (c1y1 * ax1->gnormy)) - ax1->gprojection);
HXDLIN( 301)									if ((c0d1 < c1d1)) {
HXLINE( 301)										{
HXLINE( 301)											w21->x = c0x1;
HXDLIN( 301)											w21->y = c0y1;
            										}
HXDLIN( 301)										{
HXLINE( 301)											HX_VARI_NAME( Float,t37,"t") = -(c0d1);
HXDLIN( 301)											w11->x = (w21->x + (ax1->gnormx * t37));
HXDLIN( 301)											w11->y = (w21->y + (ax1->gnormy * t37));
            										}
HXDLIN( 301)										sep8 = c0d1;
            									}
            									else {
HXLINE( 301)										{
HXLINE( 301)											w21->x = c1x1;
HXDLIN( 301)											w21->y = c1y1;
            										}
HXDLIN( 301)										{
HXLINE( 301)											HX_VARI_NAME( Float,t38,"t") = -(c1d1);
HXDLIN( 301)											w11->x = (w21->x + (ax1->gnormx * t38));
HXDLIN( 301)											w11->y = (w21->y + (ax1->gnormy * t38));
            										}
HXDLIN( 301)										sep8 = c1d1;
            									}
            								}
            							}
            							else {
HXLINE( 301)								sep8 = ((Float)1e100);
            							}
            						}
            						else {
HXLINE( 301)							sep8 = ((Float)1e100);
            						}
            					}
            				}
HXDLIN( 301)				HX_VARI_NAME( Float,sep15,"sep") = (sep8 + negRadius);
HXLINE( 303)				if ((sep15 < ::nape::Config_obj::distanceThresholdCCD)) {
HXLINE( 304)					if (userAPI) {
HXLINE( 305)						goto _hx_goto_0;
            					}
HXLINE( 307)					HX_VARI_NAME( Float,d1x1,"d1x") = ((Float)0.0);
HXLINE( 308)					HX_VARI_NAME( Float,d1y1,"d1y") = ((Float)0.0);
HXLINE( 309)					{
HXLINE( 310)						d1x1 = (c1->x - b1->posx);
HXLINE( 311)						d1y1 = (c1->y - b1->posy);
            					}
HXLINE( 313)					HX_VARI_NAME( Float,d2x1,"d2x") = ((Float)0.0);
HXLINE( 314)					HX_VARI_NAME( Float,d2y1,"d2y") = ((Float)0.0);
HXLINE( 315)					{
HXLINE( 316)						d2x1 = (c2->x - b2->posx);
HXLINE( 317)						d2y1 = (c2->y - b2->posy);
            					}
HXLINE( 319)					HX_VARI_NAME( Float,proj1,"proj") = ((((deltax * axis->x) + (deltay * axis->y)) - (b1->sweep_angvel * ((axis->y * d1x1) - (axis->x * d1y1)))) + (b2->sweep_angvel * ((axis->y * d2x1) - (axis->x * d2y1))));
HXLINE( 320)					if ((proj1 > (int)0)) {
HXLINE( 321)						toi->slipped = true;
            					}
HXLINE( 323)					bool _hx_tmp4;
HXDLIN( 323)					if (!((proj1 <= (int)0))) {
HXLINE( 323)						_hx_tmp4 = (sep15 < (::nape::Config_obj::distanceThresholdCCD * ((Float)0.5)));
            					}
            					else {
HXLINE( 323)						_hx_tmp4 = true;
            					}
HXDLIN( 323)					if (_hx_tmp4) {
HXLINE( 324)						goto _hx_goto_0;
            					}
            				}
HXLINE( 327)				curTOI = (int)-1;
HXLINE( 328)				goto _hx_goto_0;
            			}
HXLINE( 330)			curIter = (curIter + (int)1);
HXDLIN( 330)			if ((curIter >= (int)40)) {
HXLINE( 331)				if ((sep7 > negRadius)) {
HXLINE( 332)					toi->failed = true;
            				}
HXLINE( 334)				goto _hx_goto_0;
            			}
            		}
            		_hx_goto_0:;
HXLINE( 337)		toi->toi = curTOI;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ZPP_SweepDistance_obj,dynamicSweep,(void))

void ZPP_SweepDistance_obj::staticSweep( ::zpp_nape::geom::ZPP_ToiEvent toi,Float timeStep,Float lowerBound,Float negRadius){
            	HX_STACKFRAME(&_hx_pos_9bdbed0391edf141_339_staticSweep)
            	HX_STACK_ARG(toi,"toi")
            	HX_STACK_ARG(timeStep,"timeStep")
            	HX_STACK_ARG(lowerBound,"lowerBound")
            	HX_STACK_ARG(negRadius,"negRadius")
HXLINE( 340)		HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s1) = toi->s1;
HXLINE( 341)		HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s2) = toi->s2;
HXLINE( 342)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,b1) = s1->body;
HXLINE( 344)		HX_VARI( Float,deltax) = ((Float)0.0);
HXLINE( 345)		HX_VARI( Float,deltay) = ((Float)0.0);
HXLINE( 346)		{
HXLINE( 347)			deltax = -(b1->velx);
HXLINE( 348)			deltay = -(b1->vely);
            		}
HXLINE( 366)		HX_VARI( Float,ang1) = b1->sweep_angvel;
HXLINE( 367)		if ((ang1 < (int)0)) {
HXLINE( 367)			ang1 = -(ang1);
            		}
HXLINE( 368)		HX_VARI( Float,angBias) = (s1->sweepCoef * ang1);
HXLINE( 369)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,c1) = toi->c1;
HXLINE( 370)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,c2) = toi->c2;
HXLINE( 371)		HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,axis) = toi->axis;
HXLINE( 372)		HX_VARI( Float,curTOI) = lowerBound;
HXLINE( 373)		HX_VARI( int,curIter) = (int)0;
HXLINE( 374)		while(true){
HXLINE( 391)			{
HXLINE( 391)				HX_VARI( Float,dt) = (curTOI * timeStep);
HXDLIN( 391)				HX_VARI( Float,delta) = (dt - b1->sweepTime);
HXDLIN( 391)				if ((delta != (int)0)) {
HXLINE( 391)					b1->sweepTime = dt;
HXDLIN( 391)					{
HXLINE( 391)						b1->posx = (b1->posx + (b1->velx * delta));
HXDLIN( 391)						b1->posy = (b1->posy + (b1->vely * delta));
            					}
HXDLIN( 391)					if ((b1->angvel != (int)0)) {
HXLINE( 391)						HX_VARI( Float,dr) = (b1->sweep_angvel * delta);
HXDLIN( 391)						b1->rot = (b1->rot + dr);
HXDLIN( 391)						if (((dr * dr) > ((Float)0.0001))) {
HXLINE( 391)							b1->axisx = ::Math_obj::sin(b1->rot);
HXDLIN( 391)							b1->axisy = ::Math_obj::cos(b1->rot);
            						}
            						else {
HXLINE( 391)							HX_VARI( Float,d2) = (dr * dr);
HXDLIN( 391)							HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN( 391)							HX_VARI( Float,m) = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN( 391)							HX_VARI( Float,nx) = (((p * b1->axisx) + (dr * b1->axisy)) * m);
HXDLIN( 391)							b1->axisy = (((p * b1->axisy) - (dr * b1->axisx)) * m);
HXDLIN( 391)							b1->axisx = nx;
            						}
            					}
            				}
            			}
HXLINE( 392)			if ((s1->type == (int)0)) {
HXLINE( 392)				s1->worldCOMx = (b1->posx + ((b1->axisy * s1->localCOMx) - (b1->axisx * s1->localCOMy)));
HXDLIN( 392)				s1->worldCOMy = (b1->posy + ((s1->localCOMx * b1->axisx) + (s1->localCOMy * b1->axisy)));
            			}
            			else {
HXLINE( 392)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p1,"p") = s1->polygon;
HXDLIN( 392)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,li) = p1->lverts->next;
HXDLIN( 392)				{
HXLINE( 392)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,cx_ite) = p1->gverts->next;
HXDLIN( 392)					while(hx::IsNotNull( cx_ite )){
HXLINE( 392)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,g) = cx_ite;
HXDLIN( 392)						{
HXLINE( 392)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,l) = li;
HXDLIN( 392)							li = li->next;
HXDLIN( 392)							{
HXLINE( 392)								g->x = (b1->posx + ((b1->axisy * l->x) - (b1->axisx * l->y)));
HXDLIN( 392)								g->y = (b1->posy + ((l->x * b1->axisx) + (l->y * b1->axisy)));
            							}
            						}
HXDLIN( 392)						cx_ite = cx_ite->next;
            					}
            				}
HXDLIN( 392)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite) = p1->edges->head;
HXDLIN( 392)				{
HXLINE( 392)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite1,"cx_ite") = p1->gverts->next;
HXDLIN( 392)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,u) = cx_ite1;
HXDLIN( 392)					cx_ite1 = cx_ite1->next;
HXDLIN( 392)					while(hx::IsNotNull( cx_ite1 )){
HXLINE( 392)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite1;
HXDLIN( 392)						{
HXLINE( 392)							HX_VARI(  ::zpp_nape::shape::ZPP_Edge,e) = ite->elt;
HXDLIN( 392)							ite = ite->next;
HXDLIN( 392)							{
HXLINE( 392)								e->gnormx = ((b1->axisy * e->lnormx) - (b1->axisx * e->lnormy));
HXDLIN( 392)								e->gnormy = ((e->lnormx * b1->axisx) + (e->lnormy * b1->axisy));
            							}
HXDLIN( 392)							e->gprojection = (((b1->posx * e->gnormx) + (b1->posy * e->gnormy)) + e->lprojection);
HXDLIN( 392)							e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
HXDLIN( 392)							e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
            						}
HXDLIN( 392)						u = v;
HXDLIN( 392)						cx_ite1 = cx_ite1->next;
            					}
HXDLIN( 392)					 ::zpp_nape::geom::ZPP_Vec2 _this = p1->gverts->next;
HXDLIN( 392)					{
HXLINE( 392)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e1,"e") = ite->elt;
HXDLIN( 392)						{
HXLINE( 392)							e1->gnormx = ((b1->axisy * e1->lnormx) - (b1->axisx * e1->lnormy));
HXDLIN( 392)							e1->gnormy = ((e1->lnormx * b1->axisx) + (e1->lnormy * b1->axisy));
            						}
HXDLIN( 392)						e1->gprojection = (((b1->posx * e1->gnormx) + (b1->posy * e1->gnormy)) + e1->lprojection);
HXDLIN( 392)						e1->tp0 = ((u->y * e1->gnormx) - (u->x * e1->gnormy));
HXDLIN( 392)						e1->tp1 = ((_this->y * e1->gnormx) - (_this->x * e1->gnormy));
            					}
            				}
            			}
HXLINE( 393)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s11,"s1") = s1;
HXDLIN( 393)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s21,"s2") = s2;
HXDLIN( 393)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w1) = c1;
HXDLIN( 393)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,w2) = c2;
HXDLIN( 393)			Float sep;
HXDLIN( 393)			bool sep1;
HXDLIN( 393)			if ((s1->type == (int)0)) {
HXLINE( 393)				sep1 = (s2->type == (int)0);
            			}
            			else {
HXLINE( 393)				sep1 = false;
            			}
HXDLIN( 393)			if (sep1) {
HXLINE( 393)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c11,"c1") = s1->circle;
HXDLIN( 393)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c21,"c2") = s2->circle;
HXDLIN( 393)				HX_VAR( Float,dist);
HXDLIN( 393)				{
HXLINE( 393)					HX_VARI_NAME( Float,nx1,"nx") = ((Float)0.0);
HXDLIN( 393)					HX_VARI( Float,ny) = ((Float)0.0);
HXDLIN( 393)					{
HXLINE( 393)						nx1 = (c21->worldCOMx - c11->worldCOMx);
HXDLIN( 393)						ny = (c21->worldCOMy - c11->worldCOMy);
            					}
HXDLIN( 393)					HX_VARI( Float,len) = ::Math_obj::sqrt(((nx1 * nx1) + (ny * ny)));
HXDLIN( 393)					dist = (len - (c11->radius + c21->radius));
HXDLIN( 393)					if ((dist < ((Float)1e100))) {
HXLINE( 393)						if ((len == (int)0)) {
HXLINE( 393)							nx1 = (int)1;
HXDLIN( 393)							ny = (int)0;
            						}
            						else {
HXLINE( 393)							HX_VARI( Float,t) = ((Float)((Float)1.0) / (Float)len);
HXDLIN( 393)							nx1 = (nx1 * t);
HXDLIN( 393)							ny = (ny * t);
            						}
HXDLIN( 393)						{
HXLINE( 393)							HX_VARI_NAME( Float,t1,"t") = c11->radius;
HXDLIN( 393)							c1->x = (c11->worldCOMx + (nx1 * t1));
HXDLIN( 393)							c1->y = (c11->worldCOMy + (ny * t1));
            						}
HXDLIN( 393)						{
HXLINE( 393)							HX_VARI_NAME( Float,t2,"t") = -(c21->radius);
HXDLIN( 393)							c2->x = (c21->worldCOMx + (nx1 * t2));
HXDLIN( 393)							c2->y = (c21->worldCOMy + (ny * t2));
            						}
HXDLIN( 393)						{
HXLINE( 393)							axis->x = nx1;
HXDLIN( 393)							axis->y = ny;
            						}
            					}
            				}
HXDLIN( 393)				sep = dist;
            			}
            			else {
HXLINE( 393)				HX_VARI( bool,swapped) = false;
HXDLIN( 393)				bool sep2;
HXDLIN( 393)				if ((s1->type == (int)0)) {
HXLINE( 393)					sep2 = (s2->type == (int)1);
            				}
            				else {
HXLINE( 393)					sep2 = false;
            				}
HXDLIN( 393)				if (sep2) {
HXLINE( 393)					s11 = s2;
HXDLIN( 393)					s21 = s1;
HXDLIN( 393)					w1 = c2;
HXDLIN( 393)					w2 = c1;
HXDLIN( 393)					swapped = true;
            				}
HXDLIN( 393)				bool sep3;
HXDLIN( 393)				if ((s11->type == (int)1)) {
HXLINE( 393)					sep3 = (s21->type == (int)0);
            				}
            				else {
HXLINE( 393)					sep3 = false;
            				}
HXDLIN( 393)				if (sep3) {
HXLINE( 393)					HX_VARI(  ::zpp_nape::shape::ZPP_Circle,circle) = s21->circle;
HXDLIN( 393)					HX_VARI( Float,best) = ((Float)-1e+100);
HXDLIN( 393)					HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a0) = null();
HXDLIN( 393)					{
HXLINE( 393)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite2,"cx_ite") = s11->polygon->edges->head;
HXDLIN( 393)						while(hx::IsNotNull( cx_ite2 )){
HXLINE( 393)							HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite2->elt;
HXDLIN( 393)							{
HXLINE( 393)								HX_VARI_NAME( Float,dist1,"dist") = ((((a->gnormx * circle->worldCOMx) + (a->gnormy * circle->worldCOMy)) - a->gprojection) - circle->radius);
HXDLIN( 393)								if ((dist1 > ((Float)1e100))) {
HXLINE( 393)									best = dist1;
HXDLIN( 393)									goto _hx_goto_25;
            								}
HXDLIN( 393)								if ((dist1 > (int)0)) {
HXLINE( 393)									if ((dist1 > best)) {
HXLINE( 393)										best = dist1;
HXDLIN( 393)										a0 = a;
            									}
            								}
            								else {
HXLINE( 393)									bool sep4;
HXDLIN( 393)									if ((best < (int)0)) {
HXLINE( 393)										sep4 = (dist1 > best);
            									}
            									else {
HXLINE( 393)										sep4 = false;
            									}
HXDLIN( 393)									if (sep4) {
HXLINE( 393)										best = dist1;
HXDLIN( 393)										a0 = a;
            									}
            								}
            							}
HXDLIN( 393)							cx_ite2 = cx_ite2->next;
            						}
            						_hx_goto_25:;
            					}
HXDLIN( 393)					if ((best < ((Float)1e100))) {
HXLINE( 393)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v0) = a0->gp0;
HXDLIN( 393)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v1) = a0->gp1;
HXDLIN( 393)						HX_VARI_NAME( Float,dt1,"dt") = ((circle->worldCOMy * a0->gnormx) - (circle->worldCOMx * a0->gnormy));
HXDLIN( 393)						if ((dt1 <= ((v0->y * a0->gnormx) - (v0->x * a0->gnormy)))) {
HXLINE( 393)							HX_VARI_NAME( Float,nx2,"nx") = ((Float)0.0);
HXDLIN( 393)							HX_VARI_NAME( Float,ny1,"ny") = ((Float)0.0);
HXDLIN( 393)							{
HXLINE( 393)								nx2 = (circle->worldCOMx - v0->x);
HXDLIN( 393)								ny1 = (circle->worldCOMy - v0->y);
            							}
HXDLIN( 393)							HX_VARI_NAME( Float,len1,"len") = ::Math_obj::sqrt(((nx2 * nx2) + (ny1 * ny1)));
HXDLIN( 393)							best = (len1 - circle->radius);
HXDLIN( 393)							if ((best < ((Float)1e100))) {
HXLINE( 393)								if ((len1 == (int)0)) {
HXLINE( 393)									nx2 = (int)1;
HXDLIN( 393)									ny1 = (int)0;
            								}
            								else {
HXLINE( 393)									HX_VARI_NAME( Float,t3,"t") = ((Float)((Float)1.0) / (Float)len1);
HXDLIN( 393)									nx2 = (nx2 * t3);
HXDLIN( 393)									ny1 = (ny1 * t3);
            								}
HXDLIN( 393)								{
HXLINE( 393)									w1->x = (v0->x + (nx2 * (int)0));
HXDLIN( 393)									w1->y = (v0->y + (ny1 * (int)0));
            								}
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,t4,"t") = -(circle->radius);
HXDLIN( 393)									w2->x = (circle->worldCOMx + (nx2 * t4));
HXDLIN( 393)									w2->y = (circle->worldCOMy + (ny1 * t4));
            								}
HXDLIN( 393)								{
HXLINE( 393)									axis->x = nx2;
HXDLIN( 393)									axis->y = ny1;
            								}
            							}
            						}
            						else {
HXLINE( 393)							if ((dt1 >= ((v1->y * a0->gnormx) - (v1->x * a0->gnormy)))) {
HXLINE( 393)								HX_VARI_NAME( Float,nx3,"nx") = ((Float)0.0);
HXDLIN( 393)								HX_VARI_NAME( Float,ny2,"ny") = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									nx3 = (circle->worldCOMx - v1->x);
HXDLIN( 393)									ny2 = (circle->worldCOMy - v1->y);
            								}
HXDLIN( 393)								HX_VARI_NAME( Float,len2,"len") = ::Math_obj::sqrt(((nx3 * nx3) + (ny2 * ny2)));
HXDLIN( 393)								best = (len2 - circle->radius);
HXDLIN( 393)								if ((best < ((Float)1e100))) {
HXLINE( 393)									if ((len2 == (int)0)) {
HXLINE( 393)										nx3 = (int)1;
HXDLIN( 393)										ny2 = (int)0;
            									}
            									else {
HXLINE( 393)										HX_VARI_NAME( Float,t5,"t") = ((Float)((Float)1.0) / (Float)len2);
HXDLIN( 393)										nx3 = (nx3 * t5);
HXDLIN( 393)										ny2 = (ny2 * t5);
            									}
HXDLIN( 393)									{
HXLINE( 393)										w1->x = (v1->x + (nx3 * (int)0));
HXDLIN( 393)										w1->y = (v1->y + (ny2 * (int)0));
            									}
HXDLIN( 393)									{
HXLINE( 393)										HX_VARI_NAME( Float,t6,"t") = -(circle->radius);
HXDLIN( 393)										w2->x = (circle->worldCOMx + (nx3 * t6));
HXDLIN( 393)										w2->y = (circle->worldCOMy + (ny2 * t6));
            									}
HXDLIN( 393)									{
HXLINE( 393)										axis->x = nx3;
HXDLIN( 393)										axis->y = ny2;
            									}
            								}
            							}
            							else {
HXLINE( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,t7,"t") = -(circle->radius);
HXDLIN( 393)									w2->x = (circle->worldCOMx + (a0->gnormx * t7));
HXDLIN( 393)									w2->y = (circle->worldCOMy + (a0->gnormy * t7));
            								}
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,t8,"t") = -(best);
HXDLIN( 393)									w1->x = (w2->x + (a0->gnormx * t8));
HXDLIN( 393)									w1->y = (w2->y + (a0->gnormy * t8));
            								}
HXDLIN( 393)								{
HXLINE( 393)									axis->x = a0->gnormx;
HXDLIN( 393)									axis->y = a0->gnormy;
            								}
            							}
            						}
            					}
HXDLIN( 393)					if (swapped) {
HXLINE( 393)						axis->x = -(axis->x);
HXDLIN( 393)						axis->y = -(axis->y);
            					}
HXDLIN( 393)					sep = best;
            				}
            				else {
HXLINE( 393)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p11,"p1") = s11->polygon;
HXDLIN( 393)					HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,p2) = s21->polygon;
HXDLIN( 393)					HX_VARI_NAME( Float,best1,"best") = ((Float)-1e+100);
HXDLIN( 393)					HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a1) = null();
HXDLIN( 393)					HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a2) = null();
HXDLIN( 393)					HX_VARI( int,besti) = (int)0;
HXDLIN( 393)					{
HXLINE( 393)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite3,"cx_ite") = p11->edges->head;
HXDLIN( 393)						while(hx::IsNotNull( cx_ite3 )){
HXLINE( 393)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a3,"a") = cx_ite3->elt;
HXDLIN( 393)							{
HXLINE( 393)								HX_VARI( Float,min) = ((Float)1e100);
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = p2->gverts->next;
HXDLIN( 393)									while(hx::IsNotNull( cx_ite4 )){
HXLINE( 393)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v2,"v") = cx_ite4;
HXDLIN( 393)										{
HXLINE( 393)											HX_VARI( Float,k) = ((a3->gnormx * v2->x) + (a3->gnormy * v2->y));
HXDLIN( 393)											if ((k < min)) {
HXLINE( 393)												min = k;
            											}
            										}
HXDLIN( 393)										cx_ite4 = cx_ite4->next;
            									}
            								}
HXDLIN( 393)								min = (min - a3->gprojection);
HXDLIN( 393)								if ((min > ((Float)1e100))) {
HXLINE( 393)									best1 = min;
HXDLIN( 393)									goto _hx_goto_26;
            								}
HXDLIN( 393)								if ((min > (int)0)) {
HXLINE( 393)									if ((min > best1)) {
HXLINE( 393)										best1 = min;
HXDLIN( 393)										a1 = a3;
HXDLIN( 393)										besti = (int)1;
            									}
            								}
            								else {
HXLINE( 393)									bool sep5;
HXDLIN( 393)									if ((best1 < (int)0)) {
HXLINE( 393)										sep5 = (min > best1);
            									}
            									else {
HXLINE( 393)										sep5 = false;
            									}
HXDLIN( 393)									if (sep5) {
HXLINE( 393)										best1 = min;
HXDLIN( 393)										a1 = a3;
HXDLIN( 393)										besti = (int)1;
            									}
            								}
            							}
HXDLIN( 393)							cx_ite3 = cx_ite3->next;
            						}
            						_hx_goto_26:;
            					}
HXDLIN( 393)					if ((best1 < ((Float)1e100))) {
HXLINE( 393)						{
HXLINE( 393)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite5,"cx_ite") = p2->edges->head;
HXDLIN( 393)							while(hx::IsNotNull( cx_ite5 )){
HXLINE( 393)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a4,"a") = cx_ite5->elt;
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,min1,"min") = ((Float)1e100);
HXDLIN( 393)									{
HXLINE( 393)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite6,"cx_ite") = p11->gverts->next;
HXDLIN( 393)										while(hx::IsNotNull( cx_ite6 )){
HXLINE( 393)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v3,"v") = cx_ite6;
HXDLIN( 393)											{
HXLINE( 393)												HX_VARI_NAME( Float,k1,"k") = ((a4->gnormx * v3->x) + (a4->gnormy * v3->y));
HXDLIN( 393)												if ((k1 < min1)) {
HXLINE( 393)													min1 = k1;
            												}
            											}
HXDLIN( 393)											cx_ite6 = cx_ite6->next;
            										}
            									}
HXDLIN( 393)									min1 = (min1 - a4->gprojection);
HXDLIN( 393)									if ((min1 > ((Float)1e100))) {
HXLINE( 393)										best1 = min1;
HXDLIN( 393)										goto _hx_goto_28;
            									}
HXDLIN( 393)									if ((min1 > (int)0)) {
HXLINE( 393)										if ((min1 > best1)) {
HXLINE( 393)											best1 = min1;
HXDLIN( 393)											a2 = a4;
HXDLIN( 393)											besti = (int)2;
            										}
            									}
            									else {
HXLINE( 393)										bool sep6;
HXDLIN( 393)										if ((best1 < (int)0)) {
HXLINE( 393)											sep6 = (min1 > best1);
            										}
            										else {
HXLINE( 393)											sep6 = false;
            										}
HXDLIN( 393)										if (sep6) {
HXLINE( 393)											best1 = min1;
HXDLIN( 393)											a2 = a4;
HXDLIN( 393)											besti = (int)2;
            										}
            									}
            								}
HXDLIN( 393)								cx_ite5 = cx_ite5->next;
            							}
            							_hx_goto_28:;
            						}
HXDLIN( 393)						if ((best1 < ((Float)1e100))) {
HXLINE( 393)							HX_VAR(  ::zpp_nape::shape::ZPP_Polygon,q2);
HXDLIN( 393)							HX_VAR(  ::zpp_nape::shape::ZPP_Edge,ax);
HXDLIN( 393)							if ((besti == (int)1)) {
HXLINE( 393)								q2 = p2;
HXDLIN( 393)								ax = a1;
            							}
            							else {
HXLINE( 393)								q2 = p11;
HXDLIN( 393)								ax = a2;
HXDLIN( 393)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,tmp) = w1;
HXDLIN( 393)								w1 = w2;
HXDLIN( 393)								w2 = tmp;
HXDLIN( 393)								swapped = !(swapped);
            							}
HXDLIN( 393)							HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ay) = null();
HXDLIN( 393)							HX_VARI_NAME( Float,min2,"min") = ((Float)1e100);
HXDLIN( 393)							{
HXLINE( 393)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite7,"cx_ite") = q2->edges->head;
HXDLIN( 393)								while(hx::IsNotNull( cx_ite7 )){
HXLINE( 393)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a5,"a") = cx_ite7->elt;
HXDLIN( 393)									{
HXLINE( 393)										HX_VARI_NAME( Float,k2,"k") = ((ax->gnormx * a5->gnormx) + (ax->gnormy * a5->gnormy));
HXDLIN( 393)										if ((k2 < min2)) {
HXLINE( 393)											min2 = k2;
HXDLIN( 393)											ay = a5;
            										}
            									}
HXDLIN( 393)									cx_ite7 = cx_ite7->next;
            								}
            							}
HXDLIN( 393)							if (swapped) {
HXLINE( 393)								axis->x = -(ax->gnormx);
HXDLIN( 393)								axis->y = -(ax->gnormy);
            							}
            							else {
HXLINE( 393)								axis->x = ax->gnormx;
HXDLIN( 393)								axis->y = ax->gnormy;
            							}
HXDLIN( 393)							if ((best1 >= (int)0)) {
HXLINE( 393)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v01,"v0") = ax->gp0;
HXDLIN( 393)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v11,"v1") = ax->gp1;
HXDLIN( 393)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q0) = ay->gp0;
HXDLIN( 393)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q1) = ay->gp1;
HXDLIN( 393)								HX_VARI( Float,vx) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,vy) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,qx) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,qy) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									vx = (v11->x - v01->x);
HXDLIN( 393)									vy = (v11->y - v01->y);
            								}
HXDLIN( 393)								{
HXLINE( 393)									qx = (q1->x - q0->x);
HXDLIN( 393)									qy = (q1->y - q0->y);
            								}
HXDLIN( 393)								HX_VARI( Float,vdot) = ((Float)(int)1 / (Float)((vx * vx) + (vy * vy)));
HXDLIN( 393)								HX_VARI( Float,qdot) = ((Float)(int)1 / (Float)((qx * qx) + (qy * qy)));
HXDLIN( 393)								HX_VARI_NAME( Float,t11,"t1") = (-(((vx * (v01->x - q0->x)) + (vy * (v01->y - q0->y)))) * vdot);
HXDLIN( 393)								HX_VARI_NAME( Float,t21,"t2") = (-(((vx * (v01->x - q1->x)) + (vy * (v01->y - q1->y)))) * vdot);
HXDLIN( 393)								HX_VARI_NAME( Float,s12,"s1") = (-(((qx * (q0->x - v01->x)) + (qy * (q0->y - v01->y)))) * qdot);
HXDLIN( 393)								HX_VARI_NAME( Float,s22,"s2") = (-(((qx * (q0->x - v11->x)) + (qy * (q0->y - v11->y)))) * qdot);
HXDLIN( 393)								if ((t11 < (int)0)) {
HXLINE( 393)									t11 = (int)0;
            								}
            								else {
HXLINE( 393)									if ((t11 > (int)1)) {
HXLINE( 393)										t11 = (int)1;
            									}
            								}
HXDLIN( 393)								if ((t21 < (int)0)) {
HXLINE( 393)									t21 = (int)0;
            								}
            								else {
HXLINE( 393)									if ((t21 > (int)1)) {
HXLINE( 393)										t21 = (int)1;
            									}
            								}
HXDLIN( 393)								if ((s12 < (int)0)) {
HXLINE( 393)									s12 = (int)0;
            								}
            								else {
HXLINE( 393)									if ((s12 > (int)1)) {
HXLINE( 393)										s12 = (int)1;
            									}
            								}
HXDLIN( 393)								if ((s22 < (int)0)) {
HXLINE( 393)									s22 = (int)0;
            								}
            								else {
HXLINE( 393)									if ((s22 > (int)1)) {
HXLINE( 393)										s22 = (int)1;
            									}
            								}
HXDLIN( 393)								HX_VARI( Float,f1x) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,f1y) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,t9,"t") = t11;
HXDLIN( 393)									f1x = (v01->x + (vx * t9));
HXDLIN( 393)									f1y = (v01->y + (vy * t9));
            								}
HXDLIN( 393)								HX_VARI( Float,f2x) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,f2y) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,t10,"t") = t21;
HXDLIN( 393)									f2x = (v01->x + (vx * t10));
HXDLIN( 393)									f2y = (v01->y + (vy * t10));
            								}
HXDLIN( 393)								HX_VARI( Float,g1x) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,g1y) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,t12,"t") = s12;
HXDLIN( 393)									g1x = (q0->x + (qx * t12));
HXDLIN( 393)									g1y = (q0->y + (qy * t12));
            								}
HXDLIN( 393)								HX_VARI( Float,g2x) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,g2y) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									HX_VARI_NAME( Float,t13,"t") = s22;
HXDLIN( 393)									g2x = (q0->x + (qx * t13));
HXDLIN( 393)									g2y = (q0->y + (qy * t13));
            								}
HXDLIN( 393)								HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									dx = (f1x - q0->x);
HXDLIN( 393)									dy = (f1y - q0->y);
            								}
HXDLIN( 393)								HX_VARI( Float,d1) = ((dx * dx) + (dy * dy));
HXDLIN( 393)								HX_VARI_NAME( Float,dx1,"dx") = ((Float)0.0);
HXDLIN( 393)								HX_VARI_NAME( Float,dy1,"dy") = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									dx1 = (f2x - q1->x);
HXDLIN( 393)									dy1 = (f2y - q1->y);
            								}
HXDLIN( 393)								HX_VARI_NAME( Float,d21,"d2") = ((dx1 * dx1) + (dy1 * dy1));
HXDLIN( 393)								HX_VARI_NAME( Float,dx2,"dx") = ((Float)0.0);
HXDLIN( 393)								HX_VARI_NAME( Float,dy2,"dy") = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									dx2 = (g1x - v01->x);
HXDLIN( 393)									dy2 = (g1y - v01->y);
            								}
HXDLIN( 393)								HX_VARI_NAME( Float,e11,"e1") = ((dx2 * dx2) + (dy2 * dy2));
HXDLIN( 393)								HX_VARI_NAME( Float,dx3,"dx") = ((Float)0.0);
HXDLIN( 393)								HX_VARI_NAME( Float,dy3,"dy") = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									dx3 = (g2x - v11->x);
HXDLIN( 393)									dy3 = (g2y - v11->y);
            								}
HXDLIN( 393)								HX_VARI( Float,e2) = ((dx3 * dx3) + (dy3 * dy3));
HXDLIN( 393)								HX_VARI( Float,minfx) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,minfy) = ((Float)0.0);
HXDLIN( 393)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minq) = null();
HXDLIN( 393)								if ((d1 < d21)) {
HXLINE( 393)									{
HXLINE( 393)										minfx = f1x;
HXDLIN( 393)										minfy = f1y;
            									}
HXDLIN( 393)									minq = q0;
            								}
            								else {
HXLINE( 393)									{
HXLINE( 393)										minfx = f2x;
HXDLIN( 393)										minfy = f2y;
            									}
HXDLIN( 393)									minq = q1;
HXDLIN( 393)									d1 = d21;
            								}
HXDLIN( 393)								HX_VARI( Float,mingx) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,mingy) = ((Float)0.0);
HXDLIN( 393)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minv) = null();
HXDLIN( 393)								if ((e11 < e2)) {
HXLINE( 393)									{
HXLINE( 393)										mingx = g1x;
HXDLIN( 393)										mingy = g1y;
            									}
HXDLIN( 393)									minv = v01;
            								}
            								else {
HXLINE( 393)									{
HXLINE( 393)										mingx = g2x;
HXDLIN( 393)										mingy = g2y;
            									}
HXDLIN( 393)									minv = v11;
HXDLIN( 393)									e11 = e2;
            								}
HXDLIN( 393)								if ((d1 < e11)) {
HXLINE( 393)									{
HXLINE( 393)										w1->x = minfx;
HXDLIN( 393)										w1->y = minfy;
            									}
HXDLIN( 393)									{
HXLINE( 393)										w2->x = minq->x;
HXDLIN( 393)										w2->y = minq->y;
            									}
HXDLIN( 393)									best1 = ::Math_obj::sqrt(d1);
            								}
            								else {
HXLINE( 393)									{
HXLINE( 393)										w2->x = mingx;
HXDLIN( 393)										w2->y = mingy;
            									}
HXDLIN( 393)									{
HXLINE( 393)										w1->x = minv->x;
HXDLIN( 393)										w1->y = minv->y;
            									}
HXDLIN( 393)									best1 = ::Math_obj::sqrt(e11);
            								}
HXDLIN( 393)								if ((best1 != (int)0)) {
HXLINE( 393)									{
HXLINE( 393)										axis->x = (w2->x - w1->x);
HXDLIN( 393)										axis->y = (w2->y - w1->y);
            									}
HXDLIN( 393)									{
HXLINE( 393)										HX_VARI_NAME( Float,t14,"t") = ((Float)((Float)1.0) / (Float)best1);
HXDLIN( 393)										axis->x = (axis->x * t14);
HXDLIN( 393)										axis->y = (axis->y * t14);
            									}
HXDLIN( 393)									if (swapped) {
HXLINE( 393)										axis->x = -(axis->x);
HXDLIN( 393)										axis->y = -(axis->y);
            									}
            								}
HXDLIN( 393)								sep = best1;
            							}
            							else {
HXLINE( 393)								HX_VARI( Float,c0x) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,c0y) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									c0x = ay->gp0->x;
HXDLIN( 393)									c0y = ay->gp0->y;
            								}
HXDLIN( 393)								HX_VARI( Float,c1x) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,c1y) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									c1x = ay->gp1->x;
HXDLIN( 393)									c1y = ay->gp1->y;
            								}
HXDLIN( 393)								HX_VARI( Float,dvx) = ((Float)0.0);
HXDLIN( 393)								HX_VARI( Float,dvy) = ((Float)0.0);
HXDLIN( 393)								{
HXLINE( 393)									dvx = (c1x - c0x);
HXDLIN( 393)									dvy = (c1y - c0y);
            								}
HXDLIN( 393)								HX_VARI( Float,d0) = ((ax->gnormy * c0x) - (ax->gnormx * c0y));
HXDLIN( 393)								HX_VARI_NAME( Float,d11,"d1") = ((ax->gnormy * c1x) - (ax->gnormx * c1y));
HXDLIN( 393)								HX_VARI( Float,den) = ((Float)(int)1 / (Float)(d11 - d0));
HXDLIN( 393)								HX_VARI_NAME( Float,t15,"t") = ((-(ax->tp1) - d0) * den);
HXDLIN( 393)								if ((t15 > ::nape::Config_obj::epsilon)) {
HXLINE( 393)									c0x = (c0x + (dvx * t15));
HXDLIN( 393)									c0y = (c0y + (dvy * t15));
            								}
HXDLIN( 393)								HX_VARI_NAME( Float,t16,"t") = ((-(ax->tp0) - d11) * den);
HXDLIN( 393)								if ((t16 < -(::nape::Config_obj::epsilon))) {
HXLINE( 393)									c1x = (c1x + (dvx * t16));
HXDLIN( 393)									c1y = (c1y + (dvy * t16));
            								}
HXDLIN( 393)								HX_VARI( Float,c0d) = (((c0x * ax->gnormx) + (c0y * ax->gnormy)) - ax->gprojection);
HXDLIN( 393)								HX_VARI( Float,c1d) = (((c1x * ax->gnormx) + (c1y * ax->gnormy)) - ax->gprojection);
HXDLIN( 393)								if ((c0d < c1d)) {
HXLINE( 393)									{
HXLINE( 393)										w2->x = c0x;
HXDLIN( 393)										w2->y = c0y;
            									}
HXDLIN( 393)									{
HXLINE( 393)										HX_VARI_NAME( Float,t17,"t") = -(c0d);
HXDLIN( 393)										w1->x = (w2->x + (ax->gnormx * t17));
HXDLIN( 393)										w1->y = (w2->y + (ax->gnormy * t17));
            									}
HXDLIN( 393)									sep = c0d;
            								}
            								else {
HXLINE( 393)									{
HXLINE( 393)										w2->x = c1x;
HXDLIN( 393)										w2->y = c1y;
            									}
HXDLIN( 393)									{
HXLINE( 393)										HX_VARI_NAME( Float,t18,"t") = -(c1d);
HXDLIN( 393)										w1->x = (w2->x + (ax->gnormx * t18));
HXDLIN( 393)										w1->y = (w2->y + (ax->gnormy * t18));
            									}
HXDLIN( 393)									sep = c1d;
            								}
            							}
            						}
            						else {
HXLINE( 393)							sep = ((Float)1e100);
            						}
            					}
            					else {
HXLINE( 393)						sep = ((Float)1e100);
            					}
            				}
            			}
HXDLIN( 393)			HX_VARI_NAME( Float,sep7,"sep") = (sep + negRadius);
HXLINE( 394)			HX_VARI( Float,dot) = ((deltax * axis->x) + (deltay * axis->y));
HXLINE( 395)			if ((sep7 < ::nape::Config_obj::distanceThresholdCCD)) {
HXLINE( 396)				HX_VARI( Float,d1x) = ((Float)0.0);
HXLINE( 397)				HX_VARI( Float,d1y) = ((Float)0.0);
HXLINE( 398)				{
HXLINE( 399)					d1x = (c1->x - b1->posx);
HXLINE( 400)					d1y = (c1->y - b1->posy);
            				}
HXLINE( 402)				HX_VARI( Float,proj) = (dot - (b1->sweep_angvel * ((axis->y * d1x) - (axis->x * d1y))));
HXLINE( 403)				if ((proj > (int)0)) {
HXLINE( 404)					toi->slipped = true;
            				}
HXLINE( 406)				bool _hx_tmp;
HXDLIN( 406)				if (!((proj <= (int)0))) {
HXLINE( 406)					_hx_tmp = (sep7 < (::nape::Config_obj::distanceThresholdCCD * ((Float)0.5)));
            				}
            				else {
HXLINE( 406)					_hx_tmp = true;
            				}
HXDLIN( 406)				if (_hx_tmp) {
HXLINE( 407)					goto _hx_goto_22;
            				}
            			}
HXLINE( 410)			HX_VARI( Float,denom) = ((angBias - dot) * timeStep);
HXLINE( 411)			if ((denom <= (int)0)) {
HXLINE( 412)				curTOI = (int)-1;
HXLINE( 413)				goto _hx_goto_22;
            			}
HXLINE( 415)			HX_VARI_NAME( Float,delta1,"delta") = ((Float)sep7 / (Float)denom);
HXLINE( 416)			if ((delta1 < ((Float)1e-6))) {
HXLINE( 416)				delta1 = ((Float)1e-6);
            			}
HXLINE( 425)			curTOI = (curTOI + delta1);
HXLINE( 426)			if ((curTOI >= (int)1)) {
HXLINE( 427)				curTOI = (int)1;
HXLINE( 444)				{
HXLINE( 444)					HX_VARI_NAME( Float,dt2,"dt") = (curTOI * timeStep);
HXDLIN( 444)					HX_VARI_NAME( Float,delta2,"delta") = (dt2 - b1->sweepTime);
HXDLIN( 444)					if ((delta2 != (int)0)) {
HXLINE( 444)						b1->sweepTime = dt2;
HXDLIN( 444)						{
HXLINE( 444)							b1->posx = (b1->posx + (b1->velx * delta2));
HXDLIN( 444)							b1->posy = (b1->posy + (b1->vely * delta2));
            						}
HXDLIN( 444)						if ((b1->angvel != (int)0)) {
HXLINE( 444)							HX_VARI_NAME( Float,dr1,"dr") = (b1->sweep_angvel * delta2);
HXDLIN( 444)							b1->rot = (b1->rot + dr1);
HXDLIN( 444)							if (((dr1 * dr1) > ((Float)0.0001))) {
HXLINE( 444)								b1->axisx = ::Math_obj::sin(b1->rot);
HXDLIN( 444)								b1->axisy = ::Math_obj::cos(b1->rot);
            							}
            							else {
HXLINE( 444)								HX_VARI_NAME( Float,d22,"d2") = (dr1 * dr1);
HXDLIN( 444)								HX_VARI_NAME( Float,p3,"p") = ((int)1 - (((Float)0.5) * d22));
HXDLIN( 444)								HX_VARI_NAME( Float,m1,"m") = ((int)1 - ((Float)(d22 * d22) / (Float)(int)8));
HXDLIN( 444)								HX_VARI_NAME( Float,nx4,"nx") = (((p3 * b1->axisx) + (dr1 * b1->axisy)) * m1);
HXDLIN( 444)								b1->axisy = (((p3 * b1->axisy) - (dr1 * b1->axisx)) * m1);
HXDLIN( 444)								b1->axisx = nx4;
            							}
            						}
            					}
            				}
HXLINE( 445)				if ((s1->type == (int)0)) {
HXLINE( 445)					s1->worldCOMx = (b1->posx + ((b1->axisy * s1->localCOMx) - (b1->axisx * s1->localCOMy)));
HXDLIN( 445)					s1->worldCOMy = (b1->posy + ((s1->localCOMx * b1->axisx) + (s1->localCOMy * b1->axisy)));
            				}
            				else {
HXLINE( 445)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p4,"p") = s1->polygon;
HXDLIN( 445)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,li1,"li") = p4->lverts->next;
HXDLIN( 445)					{
HXLINE( 445)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite8,"cx_ite") = p4->gverts->next;
HXDLIN( 445)						while(hx::IsNotNull( cx_ite8 )){
HXLINE( 445)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,g1,"g") = cx_ite8;
HXDLIN( 445)							{
HXLINE( 445)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,l1,"l") = li1;
HXDLIN( 445)								li1 = li1->next;
HXDLIN( 445)								{
HXLINE( 445)									g1->x = (b1->posx + ((b1->axisy * l1->x) - (b1->axisx * l1->y)));
HXDLIN( 445)									g1->y = (b1->posy + ((l1->x * b1->axisx) + (l1->y * b1->axisy)));
            								}
            							}
HXDLIN( 445)							cx_ite8 = cx_ite8->next;
            						}
            					}
HXDLIN( 445)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,ite1,"ite") = p4->edges->head;
HXDLIN( 445)					{
HXLINE( 445)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite9,"cx_ite") = p4->gverts->next;
HXDLIN( 445)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,u1,"u") = cx_ite9;
HXDLIN( 445)						cx_ite9 = cx_ite9->next;
HXDLIN( 445)						while(hx::IsNotNull( cx_ite9 )){
HXLINE( 445)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v4,"v") = cx_ite9;
HXDLIN( 445)							{
HXLINE( 445)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e3,"e") = ite1->elt;
HXDLIN( 445)								ite1 = ite1->next;
HXDLIN( 445)								{
HXLINE( 445)									e3->gnormx = ((b1->axisy * e3->lnormx) - (b1->axisx * e3->lnormy));
HXDLIN( 445)									e3->gnormy = ((e3->lnormx * b1->axisx) + (e3->lnormy * b1->axisy));
            								}
HXDLIN( 445)								e3->gprojection = (((b1->posx * e3->gnormx) + (b1->posy * e3->gnormy)) + e3->lprojection);
HXDLIN( 445)								e3->tp0 = ((u1->y * e3->gnormx) - (u1->x * e3->gnormy));
HXDLIN( 445)								e3->tp1 = ((v4->y * e3->gnormx) - (v4->x * e3->gnormy));
            							}
HXDLIN( 445)							u1 = v4;
HXDLIN( 445)							cx_ite9 = cx_ite9->next;
            						}
HXDLIN( 445)						 ::zpp_nape::geom::ZPP_Vec2 _this1 = p4->gverts->next;
HXDLIN( 445)						{
HXLINE( 445)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,e4,"e") = ite1->elt;
HXDLIN( 445)							{
HXLINE( 445)								e4->gnormx = ((b1->axisy * e4->lnormx) - (b1->axisx * e4->lnormy));
HXDLIN( 445)								e4->gnormy = ((e4->lnormx * b1->axisx) + (e4->lnormy * b1->axisy));
            							}
HXDLIN( 445)							e4->gprojection = (((b1->posx * e4->gnormx) + (b1->posy * e4->gnormy)) + e4->lprojection);
HXDLIN( 445)							e4->tp0 = ((u1->y * e4->gnormx) - (u1->x * e4->gnormy));
HXDLIN( 445)							e4->tp1 = ((_this1->y * e4->gnormx) - (_this1->x * e4->gnormy));
            						}
            					}
            				}
HXLINE( 446)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s13,"s1") = s1;
HXDLIN( 446)				HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s23,"s2") = s2;
HXDLIN( 446)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w11,"w1") = c1;
HXDLIN( 446)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w21,"w2") = c2;
HXDLIN( 446)				Float sep8;
HXDLIN( 446)				bool sep9;
HXDLIN( 446)				if ((s1->type == (int)0)) {
HXLINE( 446)					sep9 = (s2->type == (int)0);
            				}
            				else {
HXLINE( 446)					sep9 = false;
            				}
HXDLIN( 446)				if (sep9) {
HXLINE( 446)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c12,"c1") = s1->circle;
HXDLIN( 446)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,c22,"c2") = s2->circle;
HXDLIN( 446)					HX_VAR_NAME( Float,dist2,"dist");
HXDLIN( 446)					{
HXLINE( 446)						HX_VARI_NAME( Float,nx5,"nx") = ((Float)0.0);
HXDLIN( 446)						HX_VARI_NAME( Float,ny3,"ny") = ((Float)0.0);
HXDLIN( 446)						{
HXLINE( 446)							nx5 = (c22->worldCOMx - c12->worldCOMx);
HXDLIN( 446)							ny3 = (c22->worldCOMy - c12->worldCOMy);
            						}
HXDLIN( 446)						HX_VARI_NAME( Float,len3,"len") = ::Math_obj::sqrt(((nx5 * nx5) + (ny3 * ny3)));
HXDLIN( 446)						dist2 = (len3 - (c12->radius + c22->radius));
HXDLIN( 446)						if ((dist2 < ((Float)1e100))) {
HXLINE( 446)							if ((len3 == (int)0)) {
HXLINE( 446)								nx5 = (int)1;
HXDLIN( 446)								ny3 = (int)0;
            							}
            							else {
HXLINE( 446)								HX_VARI_NAME( Float,t19,"t") = ((Float)((Float)1.0) / (Float)len3);
HXDLIN( 446)								nx5 = (nx5 * t19);
HXDLIN( 446)								ny3 = (ny3 * t19);
            							}
HXDLIN( 446)							{
HXLINE( 446)								HX_VARI_NAME( Float,t20,"t") = c12->radius;
HXDLIN( 446)								c1->x = (c12->worldCOMx + (nx5 * t20));
HXDLIN( 446)								c1->y = (c12->worldCOMy + (ny3 * t20));
            							}
HXDLIN( 446)							{
HXLINE( 446)								HX_VARI_NAME( Float,t22,"t") = -(c22->radius);
HXDLIN( 446)								c2->x = (c22->worldCOMx + (nx5 * t22));
HXDLIN( 446)								c2->y = (c22->worldCOMy + (ny3 * t22));
            							}
HXDLIN( 446)							{
HXLINE( 446)								axis->x = nx5;
HXDLIN( 446)								axis->y = ny3;
            							}
            						}
            					}
HXDLIN( 446)					sep8 = dist2;
            				}
            				else {
HXLINE( 446)					HX_VARI_NAME( bool,swapped1,"swapped") = false;
HXDLIN( 446)					bool sep10;
HXDLIN( 446)					if ((s1->type == (int)0)) {
HXLINE( 446)						sep10 = (s2->type == (int)1);
            					}
            					else {
HXLINE( 446)						sep10 = false;
            					}
HXDLIN( 446)					if (sep10) {
HXLINE( 446)						s13 = s2;
HXDLIN( 446)						s23 = s1;
HXDLIN( 446)						w11 = c2;
HXDLIN( 446)						w21 = c1;
HXDLIN( 446)						swapped1 = true;
            					}
HXDLIN( 446)					bool sep11;
HXDLIN( 446)					if ((s13->type == (int)1)) {
HXLINE( 446)						sep11 = (s23->type == (int)0);
            					}
            					else {
HXLINE( 446)						sep11 = false;
            					}
HXDLIN( 446)					if (sep11) {
HXLINE( 446)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Circle,circle1,"circle") = s23->circle;
HXDLIN( 446)						HX_VARI_NAME( Float,best2,"best") = ((Float)-1e+100);
HXDLIN( 446)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a01,"a0") = null();
HXDLIN( 446)						{
HXLINE( 446)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite10,"cx_ite") = s13->polygon->edges->head;
HXDLIN( 446)							while(hx::IsNotNull( cx_ite10 )){
HXLINE( 446)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a6,"a") = cx_ite10->elt;
HXDLIN( 446)								{
HXLINE( 446)									HX_VARI_NAME( Float,dist3,"dist") = ((((a6->gnormx * circle1->worldCOMx) + (a6->gnormy * circle1->worldCOMy)) - a6->gprojection) - circle1->radius);
HXDLIN( 446)									if ((dist3 > ((Float)1e100))) {
HXLINE( 446)										best2 = dist3;
HXDLIN( 446)										goto _hx_goto_33;
            									}
HXDLIN( 446)									if ((dist3 > (int)0)) {
HXLINE( 446)										if ((dist3 > best2)) {
HXLINE( 446)											best2 = dist3;
HXDLIN( 446)											a01 = a6;
            										}
            									}
            									else {
HXLINE( 446)										bool sep12;
HXDLIN( 446)										if ((best2 < (int)0)) {
HXLINE( 446)											sep12 = (dist3 > best2);
            										}
            										else {
HXLINE( 446)											sep12 = false;
            										}
HXDLIN( 446)										if (sep12) {
HXLINE( 446)											best2 = dist3;
HXDLIN( 446)											a01 = a6;
            										}
            									}
            								}
HXDLIN( 446)								cx_ite10 = cx_ite10->next;
            							}
            							_hx_goto_33:;
            						}
HXDLIN( 446)						if ((best2 < ((Float)1e100))) {
HXLINE( 446)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v02,"v0") = a01->gp0;
HXDLIN( 446)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v12,"v1") = a01->gp1;
HXDLIN( 446)							HX_VARI_NAME( Float,dt3,"dt") = ((circle1->worldCOMy * a01->gnormx) - (circle1->worldCOMx * a01->gnormy));
HXDLIN( 446)							if ((dt3 <= ((v02->y * a01->gnormx) - (v02->x * a01->gnormy)))) {
HXLINE( 446)								HX_VARI_NAME( Float,nx6,"nx") = ((Float)0.0);
HXDLIN( 446)								HX_VARI_NAME( Float,ny4,"ny") = ((Float)0.0);
HXDLIN( 446)								{
HXLINE( 446)									nx6 = (circle1->worldCOMx - v02->x);
HXDLIN( 446)									ny4 = (circle1->worldCOMy - v02->y);
            								}
HXDLIN( 446)								HX_VARI_NAME( Float,len4,"len") = ::Math_obj::sqrt(((nx6 * nx6) + (ny4 * ny4)));
HXDLIN( 446)								best2 = (len4 - circle1->radius);
HXDLIN( 446)								if ((best2 < ((Float)1e100))) {
HXLINE( 446)									if ((len4 == (int)0)) {
HXLINE( 446)										nx6 = (int)1;
HXDLIN( 446)										ny4 = (int)0;
            									}
            									else {
HXLINE( 446)										HX_VARI_NAME( Float,t23,"t") = ((Float)((Float)1.0) / (Float)len4);
HXDLIN( 446)										nx6 = (nx6 * t23);
HXDLIN( 446)										ny4 = (ny4 * t23);
            									}
HXDLIN( 446)									{
HXLINE( 446)										w11->x = (v02->x + (nx6 * (int)0));
HXDLIN( 446)										w11->y = (v02->y + (ny4 * (int)0));
            									}
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,t24,"t") = -(circle1->radius);
HXDLIN( 446)										w21->x = (circle1->worldCOMx + (nx6 * t24));
HXDLIN( 446)										w21->y = (circle1->worldCOMy + (ny4 * t24));
            									}
HXDLIN( 446)									{
HXLINE( 446)										axis->x = nx6;
HXDLIN( 446)										axis->y = ny4;
            									}
            								}
            							}
            							else {
HXLINE( 446)								if ((dt3 >= ((v12->y * a01->gnormx) - (v12->x * a01->gnormy)))) {
HXLINE( 446)									HX_VARI_NAME( Float,nx7,"nx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,ny5,"ny") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										nx7 = (circle1->worldCOMx - v12->x);
HXDLIN( 446)										ny5 = (circle1->worldCOMy - v12->y);
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,len5,"len") = ::Math_obj::sqrt(((nx7 * nx7) + (ny5 * ny5)));
HXDLIN( 446)									best2 = (len5 - circle1->radius);
HXDLIN( 446)									if ((best2 < ((Float)1e100))) {
HXLINE( 446)										if ((len5 == (int)0)) {
HXLINE( 446)											nx7 = (int)1;
HXDLIN( 446)											ny5 = (int)0;
            										}
            										else {
HXLINE( 446)											HX_VARI_NAME( Float,t25,"t") = ((Float)((Float)1.0) / (Float)len5);
HXDLIN( 446)											nx7 = (nx7 * t25);
HXDLIN( 446)											ny5 = (ny5 * t25);
            										}
HXDLIN( 446)										{
HXLINE( 446)											w11->x = (v12->x + (nx7 * (int)0));
HXDLIN( 446)											w11->y = (v12->y + (ny5 * (int)0));
            										}
HXDLIN( 446)										{
HXLINE( 446)											HX_VARI_NAME( Float,t26,"t") = -(circle1->radius);
HXDLIN( 446)											w21->x = (circle1->worldCOMx + (nx7 * t26));
HXDLIN( 446)											w21->y = (circle1->worldCOMy + (ny5 * t26));
            										}
HXDLIN( 446)										{
HXLINE( 446)											axis->x = nx7;
HXDLIN( 446)											axis->y = ny5;
            										}
            									}
            								}
            								else {
HXLINE( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,t27,"t") = -(circle1->radius);
HXDLIN( 446)										w21->x = (circle1->worldCOMx + (a01->gnormx * t27));
HXDLIN( 446)										w21->y = (circle1->worldCOMy + (a01->gnormy * t27));
            									}
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,t28,"t") = -(best2);
HXDLIN( 446)										w11->x = (w21->x + (a01->gnormx * t28));
HXDLIN( 446)										w11->y = (w21->y + (a01->gnormy * t28));
            									}
HXDLIN( 446)									{
HXLINE( 446)										axis->x = a01->gnormx;
HXDLIN( 446)										axis->y = a01->gnormy;
            									}
            								}
            							}
            						}
HXDLIN( 446)						if (swapped1) {
HXLINE( 446)							axis->x = -(axis->x);
HXDLIN( 446)							axis->y = -(axis->y);
            						}
HXDLIN( 446)						sep8 = best2;
            					}
            					else {
HXLINE( 446)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p12,"p1") = s13->polygon;
HXDLIN( 446)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Polygon,p21,"p2") = s23->polygon;
HXDLIN( 446)						HX_VARI_NAME( Float,best3,"best") = ((Float)-1e+100);
HXDLIN( 446)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a11,"a1") = null();
HXDLIN( 446)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a21,"a2") = null();
HXDLIN( 446)						HX_VARI_NAME( int,besti1,"besti") = (int)0;
HXDLIN( 446)						{
HXLINE( 446)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite11,"cx_ite") = p12->edges->head;
HXDLIN( 446)							while(hx::IsNotNull( cx_ite11 )){
HXLINE( 446)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a7,"a") = cx_ite11->elt;
HXDLIN( 446)								{
HXLINE( 446)									HX_VARI_NAME( Float,min3,"min") = ((Float)1e100);
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite12,"cx_ite") = p21->gverts->next;
HXDLIN( 446)										while(hx::IsNotNull( cx_ite12 )){
HXLINE( 446)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v5,"v") = cx_ite12;
HXDLIN( 446)											{
HXLINE( 446)												HX_VARI_NAME( Float,k3,"k") = ((a7->gnormx * v5->x) + (a7->gnormy * v5->y));
HXDLIN( 446)												if ((k3 < min3)) {
HXLINE( 446)													min3 = k3;
            												}
            											}
HXDLIN( 446)											cx_ite12 = cx_ite12->next;
            										}
            									}
HXDLIN( 446)									min3 = (min3 - a7->gprojection);
HXDLIN( 446)									if ((min3 > ((Float)1e100))) {
HXLINE( 446)										best3 = min3;
HXDLIN( 446)										goto _hx_goto_34;
            									}
HXDLIN( 446)									if ((min3 > (int)0)) {
HXLINE( 446)										if ((min3 > best3)) {
HXLINE( 446)											best3 = min3;
HXDLIN( 446)											a11 = a7;
HXDLIN( 446)											besti1 = (int)1;
            										}
            									}
            									else {
HXLINE( 446)										bool sep13;
HXDLIN( 446)										if ((best3 < (int)0)) {
HXLINE( 446)											sep13 = (min3 > best3);
            										}
            										else {
HXLINE( 446)											sep13 = false;
            										}
HXDLIN( 446)										if (sep13) {
HXLINE( 446)											best3 = min3;
HXDLIN( 446)											a11 = a7;
HXDLIN( 446)											besti1 = (int)1;
            										}
            									}
            								}
HXDLIN( 446)								cx_ite11 = cx_ite11->next;
            							}
            							_hx_goto_34:;
            						}
HXDLIN( 446)						if ((best3 < ((Float)1e100))) {
HXLINE( 446)							{
HXLINE( 446)								HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite13,"cx_ite") = p21->edges->head;
HXDLIN( 446)								while(hx::IsNotNull( cx_ite13 )){
HXLINE( 446)									HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a8,"a") = cx_ite13->elt;
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,min4,"min") = ((Float)1e100);
HXDLIN( 446)										{
HXLINE( 446)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite14,"cx_ite") = p12->gverts->next;
HXDLIN( 446)											while(hx::IsNotNull( cx_ite14 )){
HXLINE( 446)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v6,"v") = cx_ite14;
HXDLIN( 446)												{
HXLINE( 446)													HX_VARI_NAME( Float,k4,"k") = ((a8->gnormx * v6->x) + (a8->gnormy * v6->y));
HXDLIN( 446)													if ((k4 < min4)) {
HXLINE( 446)														min4 = k4;
            													}
            												}
HXDLIN( 446)												cx_ite14 = cx_ite14->next;
            											}
            										}
HXDLIN( 446)										min4 = (min4 - a8->gprojection);
HXDLIN( 446)										if ((min4 > ((Float)1e100))) {
HXLINE( 446)											best3 = min4;
HXDLIN( 446)											goto _hx_goto_36;
            										}
HXDLIN( 446)										if ((min4 > (int)0)) {
HXLINE( 446)											if ((min4 > best3)) {
HXLINE( 446)												best3 = min4;
HXDLIN( 446)												a21 = a8;
HXDLIN( 446)												besti1 = (int)2;
            											}
            										}
            										else {
HXLINE( 446)											bool sep14;
HXDLIN( 446)											if ((best3 < (int)0)) {
HXLINE( 446)												sep14 = (min4 > best3);
            											}
            											else {
HXLINE( 446)												sep14 = false;
            											}
HXDLIN( 446)											if (sep14) {
HXLINE( 446)												best3 = min4;
HXDLIN( 446)												a21 = a8;
HXDLIN( 446)												besti1 = (int)2;
            											}
            										}
            									}
HXDLIN( 446)									cx_ite13 = cx_ite13->next;
            								}
            								_hx_goto_36:;
            							}
HXDLIN( 446)							if ((best3 < ((Float)1e100))) {
HXLINE( 446)								HX_VAR_NAME(  ::zpp_nape::shape::ZPP_Polygon,q21,"q2");
HXDLIN( 446)								HX_VAR_NAME(  ::zpp_nape::shape::ZPP_Edge,ax1,"ax");
HXDLIN( 446)								if ((besti1 == (int)1)) {
HXLINE( 446)									q21 = p21;
HXDLIN( 446)									ax1 = a11;
            								}
            								else {
HXLINE( 446)									q21 = p12;
HXDLIN( 446)									ax1 = a21;
HXDLIN( 446)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,tmp1,"tmp") = w11;
HXDLIN( 446)									w11 = w21;
HXDLIN( 446)									w21 = tmp1;
HXDLIN( 446)									swapped1 = !(swapped1);
            								}
HXDLIN( 446)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,ay1,"ay") = null();
HXDLIN( 446)								HX_VARI_NAME( Float,min5,"min") = ((Float)1e100);
HXDLIN( 446)								{
HXLINE( 446)									HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite15,"cx_ite") = q21->edges->head;
HXDLIN( 446)									while(hx::IsNotNull( cx_ite15 )){
HXLINE( 446)										HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a9,"a") = cx_ite15->elt;
HXDLIN( 446)										{
HXLINE( 446)											HX_VARI_NAME( Float,k5,"k") = ((ax1->gnormx * a9->gnormx) + (ax1->gnormy * a9->gnormy));
HXDLIN( 446)											if ((k5 < min5)) {
HXLINE( 446)												min5 = k5;
HXDLIN( 446)												ay1 = a9;
            											}
            										}
HXDLIN( 446)										cx_ite15 = cx_ite15->next;
            									}
            								}
HXDLIN( 446)								if (swapped1) {
HXLINE( 446)									axis->x = -(ax1->gnormx);
HXDLIN( 446)									axis->y = -(ax1->gnormy);
            								}
            								else {
HXLINE( 446)									axis->x = ax1->gnormx;
HXDLIN( 446)									axis->y = ax1->gnormy;
            								}
HXDLIN( 446)								if ((best3 >= (int)0)) {
HXLINE( 446)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v03,"v0") = ax1->gp0;
HXDLIN( 446)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v13,"v1") = ax1->gp1;
HXDLIN( 446)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,q01,"q0") = ay1->gp0;
HXDLIN( 446)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,q11,"q1") = ay1->gp1;
HXDLIN( 446)									HX_VARI_NAME( Float,vx1,"vx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,vy1,"vy") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,qx1,"qx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,qy1,"qy") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										vx1 = (v13->x - v03->x);
HXDLIN( 446)										vy1 = (v13->y - v03->y);
            									}
HXDLIN( 446)									{
HXLINE( 446)										qx1 = (q11->x - q01->x);
HXDLIN( 446)										qy1 = (q11->y - q01->y);
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,vdot1,"vdot") = ((Float)(int)1 / (Float)((vx1 * vx1) + (vy1 * vy1)));
HXDLIN( 446)									HX_VARI_NAME( Float,qdot1,"qdot") = ((Float)(int)1 / (Float)((qx1 * qx1) + (qy1 * qy1)));
HXDLIN( 446)									HX_VARI_NAME( Float,t110,"t1") = (-(((vx1 * (v03->x - q01->x)) + (vy1 * (v03->y - q01->y)))) * vdot1);
HXDLIN( 446)									HX_VARI_NAME( Float,t29,"t2") = (-(((vx1 * (v03->x - q11->x)) + (vy1 * (v03->y - q11->y)))) * vdot1);
HXDLIN( 446)									HX_VARI_NAME( Float,s14,"s1") = (-(((qx1 * (q01->x - v03->x)) + (qy1 * (q01->y - v03->y)))) * qdot1);
HXDLIN( 446)									HX_VARI_NAME( Float,s24,"s2") = (-(((qx1 * (q01->x - v13->x)) + (qy1 * (q01->y - v13->y)))) * qdot1);
HXDLIN( 446)									if ((t110 < (int)0)) {
HXLINE( 446)										t110 = (int)0;
            									}
            									else {
HXLINE( 446)										if ((t110 > (int)1)) {
HXLINE( 446)											t110 = (int)1;
            										}
            									}
HXDLIN( 446)									if ((t29 < (int)0)) {
HXLINE( 446)										t29 = (int)0;
            									}
            									else {
HXLINE( 446)										if ((t29 > (int)1)) {
HXLINE( 446)											t29 = (int)1;
            										}
            									}
HXDLIN( 446)									if ((s14 < (int)0)) {
HXLINE( 446)										s14 = (int)0;
            									}
            									else {
HXLINE( 446)										if ((s14 > (int)1)) {
HXLINE( 446)											s14 = (int)1;
            										}
            									}
HXDLIN( 446)									if ((s24 < (int)0)) {
HXLINE( 446)										s24 = (int)0;
            									}
            									else {
HXLINE( 446)										if ((s24 > (int)1)) {
HXLINE( 446)											s24 = (int)1;
            										}
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,f1x1,"f1x") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,f1y1,"f1y") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,t30,"t") = t110;
HXDLIN( 446)										f1x1 = (v03->x + (vx1 * t30));
HXDLIN( 446)										f1y1 = (v03->y + (vy1 * t30));
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,f2x1,"f2x") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,f2y1,"f2y") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,t31,"t") = t29;
HXDLIN( 446)										f2x1 = (v03->x + (vx1 * t31));
HXDLIN( 446)										f2y1 = (v03->y + (vy1 * t31));
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,g1x1,"g1x") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,g1y1,"g1y") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,t32,"t") = s14;
HXDLIN( 446)										g1x1 = (q01->x + (qx1 * t32));
HXDLIN( 446)										g1y1 = (q01->y + (qy1 * t32));
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,g2x1,"g2x") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,g2y1,"g2y") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										HX_VARI_NAME( Float,t33,"t") = s24;
HXDLIN( 446)										g2x1 = (q01->x + (qx1 * t33));
HXDLIN( 446)										g2y1 = (q01->y + (qy1 * t33));
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,dx4,"dx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,dy4,"dy") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										dx4 = (f1x1 - q01->x);
HXDLIN( 446)										dy4 = (f1y1 - q01->y);
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,d12,"d1") = ((dx4 * dx4) + (dy4 * dy4));
HXDLIN( 446)									HX_VARI_NAME( Float,dx5,"dx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,dy5,"dy") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										dx5 = (f2x1 - q11->x);
HXDLIN( 446)										dy5 = (f2y1 - q11->y);
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,d23,"d2") = ((dx5 * dx5) + (dy5 * dy5));
HXDLIN( 446)									HX_VARI_NAME( Float,dx6,"dx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,dy6,"dy") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										dx6 = (g1x1 - v03->x);
HXDLIN( 446)										dy6 = (g1y1 - v03->y);
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,e12,"e1") = ((dx6 * dx6) + (dy6 * dy6));
HXDLIN( 446)									HX_VARI_NAME( Float,dx7,"dx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,dy7,"dy") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										dx7 = (g2x1 - v13->x);
HXDLIN( 446)										dy7 = (g2y1 - v13->y);
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,e21,"e2") = ((dx7 * dx7) + (dy7 * dy7));
HXDLIN( 446)									HX_VARI_NAME( Float,minfx1,"minfx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,minfy1,"minfy") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,minq1,"minq") = null();
HXDLIN( 446)									if ((d12 < d23)) {
HXLINE( 446)										{
HXLINE( 446)											minfx1 = f1x1;
HXDLIN( 446)											minfy1 = f1y1;
            										}
HXDLIN( 446)										minq1 = q01;
            									}
            									else {
HXLINE( 446)										{
HXLINE( 446)											minfx1 = f2x1;
HXDLIN( 446)											minfy1 = f2y1;
            										}
HXDLIN( 446)										minq1 = q11;
HXDLIN( 446)										d12 = d23;
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,mingx1,"mingx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,mingy1,"mingy") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,minv1,"minv") = null();
HXDLIN( 446)									if ((e12 < e21)) {
HXLINE( 446)										{
HXLINE( 446)											mingx1 = g1x1;
HXDLIN( 446)											mingy1 = g1y1;
            										}
HXDLIN( 446)										minv1 = v03;
            									}
            									else {
HXLINE( 446)										{
HXLINE( 446)											mingx1 = g2x1;
HXDLIN( 446)											mingy1 = g2y1;
            										}
HXDLIN( 446)										minv1 = v13;
HXDLIN( 446)										e12 = e21;
            									}
HXDLIN( 446)									if ((d12 < e12)) {
HXLINE( 446)										{
HXLINE( 446)											w11->x = minfx1;
HXDLIN( 446)											w11->y = minfy1;
            										}
HXDLIN( 446)										{
HXLINE( 446)											w21->x = minq1->x;
HXDLIN( 446)											w21->y = minq1->y;
            										}
HXDLIN( 446)										best3 = ::Math_obj::sqrt(d12);
            									}
            									else {
HXLINE( 446)										{
HXLINE( 446)											w21->x = mingx1;
HXDLIN( 446)											w21->y = mingy1;
            										}
HXDLIN( 446)										{
HXLINE( 446)											w11->x = minv1->x;
HXDLIN( 446)											w11->y = minv1->y;
            										}
HXDLIN( 446)										best3 = ::Math_obj::sqrt(e12);
            									}
HXDLIN( 446)									if ((best3 != (int)0)) {
HXLINE( 446)										{
HXLINE( 446)											axis->x = (w21->x - w11->x);
HXDLIN( 446)											axis->y = (w21->y - w11->y);
            										}
HXDLIN( 446)										{
HXLINE( 446)											HX_VARI_NAME( Float,t34,"t") = ((Float)((Float)1.0) / (Float)best3);
HXDLIN( 446)											axis->x = (axis->x * t34);
HXDLIN( 446)											axis->y = (axis->y * t34);
            										}
HXDLIN( 446)										if (swapped1) {
HXLINE( 446)											axis->x = -(axis->x);
HXDLIN( 446)											axis->y = -(axis->y);
            										}
            									}
HXDLIN( 446)									sep8 = best3;
            								}
            								else {
HXLINE( 446)									HX_VARI_NAME( Float,c0x1,"c0x") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,c0y1,"c0y") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										c0x1 = ay1->gp0->x;
HXDLIN( 446)										c0y1 = ay1->gp0->y;
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,c1x1,"c1x") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,c1y1,"c1y") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										c1x1 = ay1->gp1->x;
HXDLIN( 446)										c1y1 = ay1->gp1->y;
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,dvx1,"dvx") = ((Float)0.0);
HXDLIN( 446)									HX_VARI_NAME( Float,dvy1,"dvy") = ((Float)0.0);
HXDLIN( 446)									{
HXLINE( 446)										dvx1 = (c1x1 - c0x1);
HXDLIN( 446)										dvy1 = (c1y1 - c0y1);
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,d01,"d0") = ((ax1->gnormy * c0x1) - (ax1->gnormx * c0y1));
HXDLIN( 446)									HX_VARI_NAME( Float,d13,"d1") = ((ax1->gnormy * c1x1) - (ax1->gnormx * c1y1));
HXDLIN( 446)									HX_VARI_NAME( Float,den1,"den") = ((Float)(int)1 / (Float)(d13 - d01));
HXDLIN( 446)									HX_VARI_NAME( Float,t35,"t") = ((-(ax1->tp1) - d01) * den1);
HXDLIN( 446)									if ((t35 > ::nape::Config_obj::epsilon)) {
HXLINE( 446)										c0x1 = (c0x1 + (dvx1 * t35));
HXDLIN( 446)										c0y1 = (c0y1 + (dvy1 * t35));
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,t36,"t") = ((-(ax1->tp0) - d13) * den1);
HXDLIN( 446)									if ((t36 < -(::nape::Config_obj::epsilon))) {
HXLINE( 446)										c1x1 = (c1x1 + (dvx1 * t36));
HXDLIN( 446)										c1y1 = (c1y1 + (dvy1 * t36));
            									}
HXDLIN( 446)									HX_VARI_NAME( Float,c0d1,"c0d") = (((c0x1 * ax1->gnormx) + (c0y1 * ax1->gnormy)) - ax1->gprojection);
HXDLIN( 446)									HX_VARI_NAME( Float,c1d1,"c1d") = (((c1x1 * ax1->gnormx) + (c1y1 * ax1->gnormy)) - ax1->gprojection);
HXDLIN( 446)									if ((c0d1 < c1d1)) {
HXLINE( 446)										{
HXLINE( 446)											w21->x = c0x1;
HXDLIN( 446)											w21->y = c0y1;
            										}
HXDLIN( 446)										{
HXLINE( 446)											HX_VARI_NAME( Float,t37,"t") = -(c0d1);
HXDLIN( 446)											w11->x = (w21->x + (ax1->gnormx * t37));
HXDLIN( 446)											w11->y = (w21->y + (ax1->gnormy * t37));
            										}
HXDLIN( 446)										sep8 = c0d1;
            									}
            									else {
HXLINE( 446)										{
HXLINE( 446)											w21->x = c1x1;
HXDLIN( 446)											w21->y = c1y1;
            										}
HXDLIN( 446)										{
HXLINE( 446)											HX_VARI_NAME( Float,t38,"t") = -(c1d1);
HXDLIN( 446)											w11->x = (w21->x + (ax1->gnormx * t38));
HXDLIN( 446)											w11->y = (w21->y + (ax1->gnormy * t38));
            										}
HXDLIN( 446)										sep8 = c1d1;
            									}
            								}
            							}
            							else {
HXLINE( 446)								sep8 = ((Float)1e100);
            							}
            						}
            						else {
HXLINE( 446)							sep8 = ((Float)1e100);
            						}
            					}
            				}
HXDLIN( 446)				HX_VARI_NAME( Float,sep15,"sep") = (sep8 + negRadius);
HXLINE( 448)				if ((sep15 < ::nape::Config_obj::distanceThresholdCCD)) {
HXLINE( 449)					HX_VARI_NAME( Float,d1x1,"d1x") = ((Float)0.0);
HXLINE( 450)					HX_VARI_NAME( Float,d1y1,"d1y") = ((Float)0.0);
HXLINE( 451)					{
HXLINE( 452)						d1x1 = (c1->x - b1->posx);
HXLINE( 453)						d1y1 = (c1->y - b1->posy);
            					}
HXLINE( 455)					HX_VARI_NAME( Float,proj1,"proj") = (((deltax * axis->x) + (deltay * axis->y)) - (b1->sweep_angvel * ((axis->y * d1x1) - (axis->x * d1y1))));
HXLINE( 456)					if ((proj1 > (int)0)) {
HXLINE( 457)						toi->slipped = true;
            					}
HXLINE( 459)					bool _hx_tmp1;
HXDLIN( 459)					if (!((proj1 <= (int)0))) {
HXLINE( 459)						_hx_tmp1 = (sep15 < (::nape::Config_obj::distanceThresholdCCD * ((Float)0.5)));
            					}
            					else {
HXLINE( 459)						_hx_tmp1 = true;
            					}
HXDLIN( 459)					if (_hx_tmp1) {
HXLINE( 460)						goto _hx_goto_22;
            					}
            				}
HXLINE( 463)				curTOI = (int)-1;
HXLINE( 464)				goto _hx_goto_22;
            			}
HXLINE( 466)			curIter = (curIter + (int)1);
HXDLIN( 466)			if ((curIter >= (int)40)) {
HXLINE( 467)				if ((sep7 > negRadius)) {
HXLINE( 468)					toi->failed = true;
            				}
HXLINE( 470)				goto _hx_goto_22;
            			}
            		}
            		_hx_goto_22:;
HXLINE( 473)		toi->toi = curTOI;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_SweepDistance_obj,staticSweep,(void))

Float ZPP_SweepDistance_obj::distanceBody( ::zpp_nape::phys::ZPP_Body b1, ::zpp_nape::phys::ZPP_Body b2, ::zpp_nape::geom::ZPP_Vec2 w1, ::zpp_nape::geom::ZPP_Vec2 w2){
            	HX_GC_STACKFRAME(&_hx_pos_9bdbed0391edf141_475_distanceBody)
            	HX_STACK_ARG(b1,"b1")
            	HX_STACK_ARG(b2,"b2")
            	HX_STACK_ARG(w1,"w1")
            	HX_STACK_ARG(w2,"w2")
HXLINE( 476)		HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,t1);
HXLINE( 477)		{
HXLINE( 478)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 479)				t1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 485)				t1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 486)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = t1->next;
HXLINE( 487)				t1->next = null();
            			}
HXLINE( 492)			t1->weak = false;
            		}
HXLINE( 494)		HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,t2);
HXLINE( 495)		{
HXLINE( 496)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 497)				t2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 503)				t2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 504)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = t2->next;
HXLINE( 505)				t2->next = null();
            			}
HXLINE( 510)			t2->weak = false;
            		}
HXLINE( 512)		HX_VAR(  ::zpp_nape::geom::ZPP_Vec2,ax);
HXLINE( 513)		{
HXLINE( 514)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 515)				ax =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 521)				ax = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 522)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ax->next;
HXLINE( 523)				ax->next = null();
            			}
HXLINE( 528)			ax->weak = false;
            		}
HXLINE( 530)		HX_VARI( Float,min) = ((Float)1e100);
HXLINE( 531)		{
HXLINE( 532)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = b1->shapes->head;
HXLINE( 533)			while(hx::IsNotNull( cx_ite )){
HXLINE( 534)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s1) = cx_ite->elt;
HXLINE( 536)				{
HXLINE( 537)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite1,"cx_ite") = b2->shapes->head;
HXLINE( 538)					while(hx::IsNotNull( cx_ite1 )){
HXLINE( 539)						HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s2) = cx_ite1->elt;
HXLINE( 540)						{
HXLINE( 541)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s11,"s1") = s1;
HXDLIN( 541)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s21,"s2") = s2;
HXDLIN( 541)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w11,"w1") = t1;
HXDLIN( 541)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,w21,"w2") = t2;
HXDLIN( 541)							HX_VAR( Float,dist);
HXDLIN( 541)							bool dist1;
HXDLIN( 541)							if ((s1->type == (int)0)) {
HXLINE( 541)								dist1 = (s2->type == (int)0);
            							}
            							else {
HXLINE( 541)								dist1 = false;
            							}
HXDLIN( 541)							if (dist1) {
HXLINE( 541)								HX_VARI(  ::zpp_nape::shape::ZPP_Circle,c1) = s1->circle;
HXDLIN( 541)								HX_VARI(  ::zpp_nape::shape::ZPP_Circle,c2) = s2->circle;
HXDLIN( 541)								HX_VAR_NAME( Float,dist2,"dist");
HXDLIN( 541)								{
HXLINE( 541)									HX_VARI( Float,nx) = ((Float)0.0);
HXDLIN( 541)									HX_VARI( Float,ny) = ((Float)0.0);
HXDLIN( 541)									{
HXLINE( 541)										nx = (c2->worldCOMx - c1->worldCOMx);
HXDLIN( 541)										ny = (c2->worldCOMy - c1->worldCOMy);
            									}
HXDLIN( 541)									HX_VARI( Float,len) = ::Math_obj::sqrt(((nx * nx) + (ny * ny)));
HXDLIN( 541)									dist2 = (len - (c1->radius + c2->radius));
HXDLIN( 541)									if ((dist2 < min)) {
HXLINE( 541)										if ((len == (int)0)) {
HXLINE( 541)											nx = (int)1;
HXDLIN( 541)											ny = (int)0;
            										}
            										else {
HXLINE( 541)											HX_VARI( Float,t) = ((Float)((Float)1.0) / (Float)len);
HXDLIN( 541)											nx = (nx * t);
HXDLIN( 541)											ny = (ny * t);
            										}
HXDLIN( 541)										{
HXLINE( 541)											HX_VARI_NAME( Float,t3,"t") = c1->radius;
HXDLIN( 541)											w11->x = (c1->worldCOMx + (nx * t3));
HXDLIN( 541)											w11->y = (c1->worldCOMy + (ny * t3));
            										}
HXDLIN( 541)										{
HXLINE( 541)											HX_VARI_NAME( Float,t4,"t") = -(c2->radius);
HXDLIN( 541)											w21->x = (c2->worldCOMx + (nx * t4));
HXDLIN( 541)											w21->y = (c2->worldCOMy + (ny * t4));
            										}
HXDLIN( 541)										{
HXLINE( 541)											ax->x = nx;
HXDLIN( 541)											ax->y = ny;
            										}
            									}
            								}
HXDLIN( 541)								dist = dist2;
            							}
            							else {
HXLINE( 541)								HX_VARI( bool,swapped) = false;
HXDLIN( 541)								bool dist3;
HXDLIN( 541)								if ((s1->type == (int)0)) {
HXLINE( 541)									dist3 = (s2->type == (int)1);
            								}
            								else {
HXLINE( 541)									dist3 = false;
            								}
HXDLIN( 541)								if (dist3) {
HXLINE( 541)									s11 = s2;
HXDLIN( 541)									s21 = s1;
HXDLIN( 541)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,tmp2) = w11;
HXDLIN( 541)									w11 = w21;
HXDLIN( 541)									w21 = tmp2;
HXDLIN( 541)									swapped = true;
            								}
HXDLIN( 541)								bool dist4;
HXDLIN( 541)								if ((s11->type == (int)1)) {
HXLINE( 541)									dist4 = (s21->type == (int)0);
            								}
            								else {
HXLINE( 541)									dist4 = false;
            								}
HXDLIN( 541)								if (dist4) {
HXLINE( 541)									HX_VARI(  ::zpp_nape::shape::ZPP_Circle,circle) = s21->circle;
HXDLIN( 541)									HX_VARI( Float,best) = ((Float)-1e+100);
HXDLIN( 541)									HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a0) = null();
HXDLIN( 541)									{
HXLINE( 541)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite2,"cx_ite") = s11->polygon->edges->head;
HXDLIN( 541)										while(hx::IsNotNull( cx_ite2 )){
HXLINE( 541)											HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite2->elt;
HXDLIN( 541)											{
HXLINE( 541)												HX_VARI_NAME( Float,dist5,"dist") = ((((a->gnormx * circle->worldCOMx) + (a->gnormy * circle->worldCOMy)) - a->gprojection) - circle->radius);
HXDLIN( 541)												if ((dist5 > min)) {
HXLINE( 541)													best = dist5;
HXDLIN( 541)													goto _hx_goto_42;
            												}
HXDLIN( 541)												if ((dist5 > (int)0)) {
HXLINE( 541)													if ((dist5 > best)) {
HXLINE( 541)														best = dist5;
HXDLIN( 541)														a0 = a;
            													}
            												}
            												else {
HXLINE( 541)													bool dist6;
HXDLIN( 541)													if ((best < (int)0)) {
HXLINE( 541)														dist6 = (dist5 > best);
            													}
            													else {
HXLINE( 541)														dist6 = false;
            													}
HXDLIN( 541)													if (dist6) {
HXLINE( 541)														best = dist5;
HXDLIN( 541)														a0 = a;
            													}
            												}
            											}
HXDLIN( 541)											cx_ite2 = cx_ite2->next;
            										}
            										_hx_goto_42:;
            									}
HXDLIN( 541)									if ((best < min)) {
HXLINE( 541)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v0) = a0->gp0;
HXDLIN( 541)										HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v1) = a0->gp1;
HXDLIN( 541)										HX_VARI( Float,dt) = ((circle->worldCOMy * a0->gnormx) - (circle->worldCOMx * a0->gnormy));
HXDLIN( 541)										if ((dt <= ((v0->y * a0->gnormx) - (v0->x * a0->gnormy)))) {
HXLINE( 541)											HX_VARI_NAME( Float,nx1,"nx") = ((Float)0.0);
HXDLIN( 541)											HX_VARI_NAME( Float,ny1,"ny") = ((Float)0.0);
HXDLIN( 541)											{
HXLINE( 541)												nx1 = (circle->worldCOMx - v0->x);
HXDLIN( 541)												ny1 = (circle->worldCOMy - v0->y);
            											}
HXDLIN( 541)											HX_VARI_NAME( Float,len1,"len") = ::Math_obj::sqrt(((nx1 * nx1) + (ny1 * ny1)));
HXDLIN( 541)											best = (len1 - circle->radius);
HXDLIN( 541)											if ((best < min)) {
HXLINE( 541)												if ((len1 == (int)0)) {
HXLINE( 541)													nx1 = (int)1;
HXDLIN( 541)													ny1 = (int)0;
            												}
            												else {
HXLINE( 541)													HX_VARI_NAME( Float,t5,"t") = ((Float)((Float)1.0) / (Float)len1);
HXDLIN( 541)													nx1 = (nx1 * t5);
HXDLIN( 541)													ny1 = (ny1 * t5);
            												}
HXDLIN( 541)												{
HXLINE( 541)													w11->x = (v0->x + (nx1 * (int)0));
HXDLIN( 541)													w11->y = (v0->y + (ny1 * (int)0));
            												}
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,t6,"t") = -(circle->radius);
HXDLIN( 541)													w21->x = (circle->worldCOMx + (nx1 * t6));
HXDLIN( 541)													w21->y = (circle->worldCOMy + (ny1 * t6));
            												}
HXDLIN( 541)												{
HXLINE( 541)													ax->x = nx1;
HXDLIN( 541)													ax->y = ny1;
            												}
            											}
            										}
            										else {
HXLINE( 541)											if ((dt >= ((v1->y * a0->gnormx) - (v1->x * a0->gnormy)))) {
HXLINE( 541)												HX_VARI_NAME( Float,nx2,"nx") = ((Float)0.0);
HXDLIN( 541)												HX_VARI_NAME( Float,ny2,"ny") = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													nx2 = (circle->worldCOMx - v1->x);
HXDLIN( 541)													ny2 = (circle->worldCOMy - v1->y);
            												}
HXDLIN( 541)												HX_VARI_NAME( Float,len2,"len") = ::Math_obj::sqrt(((nx2 * nx2) + (ny2 * ny2)));
HXDLIN( 541)												best = (len2 - circle->radius);
HXDLIN( 541)												if ((best < min)) {
HXLINE( 541)													if ((len2 == (int)0)) {
HXLINE( 541)														nx2 = (int)1;
HXDLIN( 541)														ny2 = (int)0;
            													}
            													else {
HXLINE( 541)														HX_VARI_NAME( Float,t7,"t") = ((Float)((Float)1.0) / (Float)len2);
HXDLIN( 541)														nx2 = (nx2 * t7);
HXDLIN( 541)														ny2 = (ny2 * t7);
            													}
HXDLIN( 541)													{
HXLINE( 541)														w11->x = (v1->x + (nx2 * (int)0));
HXDLIN( 541)														w11->y = (v1->y + (ny2 * (int)0));
            													}
HXDLIN( 541)													{
HXLINE( 541)														HX_VARI_NAME( Float,t8,"t") = -(circle->radius);
HXDLIN( 541)														w21->x = (circle->worldCOMx + (nx2 * t8));
HXDLIN( 541)														w21->y = (circle->worldCOMy + (ny2 * t8));
            													}
HXDLIN( 541)													{
HXLINE( 541)														ax->x = nx2;
HXDLIN( 541)														ax->y = ny2;
            													}
            												}
            											}
            											else {
HXLINE( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,t9,"t") = -(circle->radius);
HXDLIN( 541)													w21->x = (circle->worldCOMx + (a0->gnormx * t9));
HXDLIN( 541)													w21->y = (circle->worldCOMy + (a0->gnormy * t9));
            												}
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,t10,"t") = -(best);
HXDLIN( 541)													w11->x = (w21->x + (a0->gnormx * t10));
HXDLIN( 541)													w11->y = (w21->y + (a0->gnormy * t10));
            												}
HXDLIN( 541)												{
HXLINE( 541)													ax->x = a0->gnormx;
HXDLIN( 541)													ax->y = a0->gnormy;
            												}
            											}
            										}
            									}
HXDLIN( 541)									if (swapped) {
HXLINE( 541)										ax->x = -(ax->x);
HXDLIN( 541)										ax->y = -(ax->y);
            									}
HXDLIN( 541)									dist = best;
            								}
            								else {
HXLINE( 541)									HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,p1) = s11->polygon;
HXDLIN( 541)									HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,p2) = s21->polygon;
HXDLIN( 541)									HX_VARI_NAME( Float,best1,"best") = ((Float)-1e+100);
HXDLIN( 541)									HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a1) = null();
HXDLIN( 541)									HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a2) = null();
HXDLIN( 541)									HX_VARI( int,besti) = (int)0;
HXDLIN( 541)									{
HXLINE( 541)										HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite3,"cx_ite") = p1->edges->head;
HXDLIN( 541)										while(hx::IsNotNull( cx_ite3 )){
HXLINE( 541)											HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a3,"a") = cx_ite3->elt;
HXDLIN( 541)											{
HXLINE( 541)												HX_VARI_NAME( Float,min1,"min") = ((Float)1e100);
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = p2->gverts->next;
HXDLIN( 541)													while(hx::IsNotNull( cx_ite4 )){
HXLINE( 541)														HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite4;
HXDLIN( 541)														{
HXLINE( 541)															HX_VARI( Float,k) = ((a3->gnormx * v->x) + (a3->gnormy * v->y));
HXDLIN( 541)															if ((k < min1)) {
HXLINE( 541)																min1 = k;
            															}
            														}
HXDLIN( 541)														cx_ite4 = cx_ite4->next;
            													}
            												}
HXDLIN( 541)												min1 = (min1 - a3->gprojection);
HXDLIN( 541)												if ((min1 > min)) {
HXLINE( 541)													best1 = min1;
HXDLIN( 541)													goto _hx_goto_43;
            												}
HXDLIN( 541)												if ((min1 > (int)0)) {
HXLINE( 541)													if ((min1 > best1)) {
HXLINE( 541)														best1 = min1;
HXDLIN( 541)														a1 = a3;
HXDLIN( 541)														besti = (int)1;
            													}
            												}
            												else {
HXLINE( 541)													bool dist7;
HXDLIN( 541)													if ((best1 < (int)0)) {
HXLINE( 541)														dist7 = (min1 > best1);
            													}
            													else {
HXLINE( 541)														dist7 = false;
            													}
HXDLIN( 541)													if (dist7) {
HXLINE( 541)														best1 = min1;
HXDLIN( 541)														a1 = a3;
HXDLIN( 541)														besti = (int)1;
            													}
            												}
            											}
HXDLIN( 541)											cx_ite3 = cx_ite3->next;
            										}
            										_hx_goto_43:;
            									}
HXDLIN( 541)									if ((best1 < min)) {
HXLINE( 541)										{
HXLINE( 541)											HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite5,"cx_ite") = p2->edges->head;
HXDLIN( 541)											while(hx::IsNotNull( cx_ite5 )){
HXLINE( 541)												HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a4,"a") = cx_ite5->elt;
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,min2,"min") = ((Float)1e100);
HXDLIN( 541)													{
HXLINE( 541)														HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite6,"cx_ite") = p1->gverts->next;
HXDLIN( 541)														while(hx::IsNotNull( cx_ite6 )){
HXLINE( 541)															HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v2,"v") = cx_ite6;
HXDLIN( 541)															{
HXLINE( 541)																HX_VARI_NAME( Float,k1,"k") = ((a4->gnormx * v2->x) + (a4->gnormy * v2->y));
HXDLIN( 541)																if ((k1 < min2)) {
HXLINE( 541)																	min2 = k1;
            																}
            															}
HXDLIN( 541)															cx_ite6 = cx_ite6->next;
            														}
            													}
HXDLIN( 541)													min2 = (min2 - a4->gprojection);
HXDLIN( 541)													if ((min2 > min)) {
HXLINE( 541)														best1 = min2;
HXDLIN( 541)														goto _hx_goto_45;
            													}
HXDLIN( 541)													if ((min2 > (int)0)) {
HXLINE( 541)														if ((min2 > best1)) {
HXLINE( 541)															best1 = min2;
HXDLIN( 541)															a2 = a4;
HXDLIN( 541)															besti = (int)2;
            														}
            													}
            													else {
HXLINE( 541)														bool dist8;
HXDLIN( 541)														if ((best1 < (int)0)) {
HXLINE( 541)															dist8 = (min2 > best1);
            														}
            														else {
HXLINE( 541)															dist8 = false;
            														}
HXDLIN( 541)														if (dist8) {
HXLINE( 541)															best1 = min2;
HXDLIN( 541)															a2 = a4;
HXDLIN( 541)															besti = (int)2;
            														}
            													}
            												}
HXDLIN( 541)												cx_ite5 = cx_ite5->next;
            											}
            											_hx_goto_45:;
            										}
HXDLIN( 541)										if ((best1 < min)) {
HXLINE( 541)											HX_VAR(  ::zpp_nape::shape::ZPP_Polygon,q2);
HXDLIN( 541)											HX_VAR_NAME(  ::zpp_nape::shape::ZPP_Edge,ax1,"ax");
HXDLIN( 541)											if ((besti == (int)1)) {
HXLINE( 541)												q2 = p2;
HXDLIN( 541)												ax1 = a1;
            											}
            											else {
HXLINE( 541)												q2 = p1;
HXDLIN( 541)												ax1 = a2;
HXDLIN( 541)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,tmp) = w11;
HXDLIN( 541)												w11 = w21;
HXDLIN( 541)												w21 = tmp;
HXDLIN( 541)												swapped = !(swapped);
            											}
HXDLIN( 541)											HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ay) = null();
HXDLIN( 541)											HX_VARI_NAME( Float,min3,"min") = ((Float)1e100);
HXDLIN( 541)											{
HXLINE( 541)												HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite7,"cx_ite") = q2->edges->head;
HXDLIN( 541)												while(hx::IsNotNull( cx_ite7 )){
HXLINE( 541)													HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a5,"a") = cx_ite7->elt;
HXDLIN( 541)													{
HXLINE( 541)														HX_VARI_NAME( Float,k2,"k") = ((ax1->gnormx * a5->gnormx) + (ax1->gnormy * a5->gnormy));
HXDLIN( 541)														if ((k2 < min3)) {
HXLINE( 541)															min3 = k2;
HXDLIN( 541)															ay = a5;
            														}
            													}
HXDLIN( 541)													cx_ite7 = cx_ite7->next;
            												}
            											}
HXDLIN( 541)											if (swapped) {
HXLINE( 541)												ax->x = -(ax1->gnormx);
HXDLIN( 541)												ax->y = -(ax1->gnormy);
            											}
            											else {
HXLINE( 541)												ax->x = ax1->gnormx;
HXDLIN( 541)												ax->y = ax1->gnormy;
            											}
HXDLIN( 541)											if ((best1 >= (int)0)) {
HXLINE( 541)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v01,"v0") = ax1->gp0;
HXDLIN( 541)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v11,"v1") = ax1->gp1;
HXDLIN( 541)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q0) = ay->gp0;
HXDLIN( 541)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q1) = ay->gp1;
HXDLIN( 541)												HX_VARI( Float,vx) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,vy) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,qx) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,qy) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													vx = (v11->x - v01->x);
HXDLIN( 541)													vy = (v11->y - v01->y);
            												}
HXDLIN( 541)												{
HXLINE( 541)													qx = (q1->x - q0->x);
HXDLIN( 541)													qy = (q1->y - q0->y);
            												}
HXDLIN( 541)												HX_VARI( Float,vdot) = ((Float)(int)1 / (Float)((vx * vx) + (vy * vy)));
HXDLIN( 541)												HX_VARI( Float,qdot) = ((Float)(int)1 / (Float)((qx * qx) + (qy * qy)));
HXDLIN( 541)												HX_VARI_NAME( Float,t11,"t1") = (-(((vx * (v01->x - q0->x)) + (vy * (v01->y - q0->y)))) * vdot);
HXDLIN( 541)												HX_VARI_NAME( Float,t21,"t2") = (-(((vx * (v01->x - q1->x)) + (vy * (v01->y - q1->y)))) * vdot);
HXDLIN( 541)												HX_VARI_NAME( Float,s12,"s1") = (-(((qx * (q0->x - v01->x)) + (qy * (q0->y - v01->y)))) * qdot);
HXDLIN( 541)												HX_VARI_NAME( Float,s22,"s2") = (-(((qx * (q0->x - v11->x)) + (qy * (q0->y - v11->y)))) * qdot);
HXDLIN( 541)												if ((t11 < (int)0)) {
HXLINE( 541)													t11 = (int)0;
            												}
            												else {
HXLINE( 541)													if ((t11 > (int)1)) {
HXLINE( 541)														t11 = (int)1;
            													}
            												}
HXDLIN( 541)												if ((t21 < (int)0)) {
HXLINE( 541)													t21 = (int)0;
            												}
            												else {
HXLINE( 541)													if ((t21 > (int)1)) {
HXLINE( 541)														t21 = (int)1;
            													}
            												}
HXDLIN( 541)												if ((s12 < (int)0)) {
HXLINE( 541)													s12 = (int)0;
            												}
            												else {
HXLINE( 541)													if ((s12 > (int)1)) {
HXLINE( 541)														s12 = (int)1;
            													}
            												}
HXDLIN( 541)												if ((s22 < (int)0)) {
HXLINE( 541)													s22 = (int)0;
            												}
            												else {
HXLINE( 541)													if ((s22 > (int)1)) {
HXLINE( 541)														s22 = (int)1;
            													}
            												}
HXDLIN( 541)												HX_VARI( Float,f1x) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,f1y) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,t12,"t") = t11;
HXDLIN( 541)													f1x = (v01->x + (vx * t12));
HXDLIN( 541)													f1y = (v01->y + (vy * t12));
            												}
HXDLIN( 541)												HX_VARI( Float,f2x) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,f2y) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,t13,"t") = t21;
HXDLIN( 541)													f2x = (v01->x + (vx * t13));
HXDLIN( 541)													f2y = (v01->y + (vy * t13));
            												}
HXDLIN( 541)												HX_VARI( Float,g1x) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,g1y) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,t14,"t") = s12;
HXDLIN( 541)													g1x = (q0->x + (qx * t14));
HXDLIN( 541)													g1y = (q0->y + (qy * t14));
            												}
HXDLIN( 541)												HX_VARI( Float,g2x) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,g2y) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													HX_VARI_NAME( Float,t15,"t") = s22;
HXDLIN( 541)													g2x = (q0->x + (qx * t15));
HXDLIN( 541)													g2y = (q0->y + (qy * t15));
            												}
HXDLIN( 541)												HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													dx = (f1x - q0->x);
HXDLIN( 541)													dy = (f1y - q0->y);
            												}
HXDLIN( 541)												HX_VARI( Float,d1) = ((dx * dx) + (dy * dy));
HXDLIN( 541)												HX_VARI_NAME( Float,dx1,"dx") = ((Float)0.0);
HXDLIN( 541)												HX_VARI_NAME( Float,dy1,"dy") = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													dx1 = (f2x - q1->x);
HXDLIN( 541)													dy1 = (f2y - q1->y);
            												}
HXDLIN( 541)												HX_VARI( Float,d2) = ((dx1 * dx1) + (dy1 * dy1));
HXDLIN( 541)												HX_VARI_NAME( Float,dx2,"dx") = ((Float)0.0);
HXDLIN( 541)												HX_VARI_NAME( Float,dy2,"dy") = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													dx2 = (g1x - v01->x);
HXDLIN( 541)													dy2 = (g1y - v01->y);
            												}
HXDLIN( 541)												HX_VARI( Float,e1) = ((dx2 * dx2) + (dy2 * dy2));
HXDLIN( 541)												HX_VARI_NAME( Float,dx3,"dx") = ((Float)0.0);
HXDLIN( 541)												HX_VARI_NAME( Float,dy3,"dy") = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													dx3 = (g2x - v11->x);
HXDLIN( 541)													dy3 = (g2y - v11->y);
            												}
HXDLIN( 541)												HX_VARI( Float,e2) = ((dx3 * dx3) + (dy3 * dy3));
HXDLIN( 541)												HX_VARI( Float,minfx) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,minfy) = ((Float)0.0);
HXDLIN( 541)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minq) = null();
HXDLIN( 541)												if ((d1 < d2)) {
HXLINE( 541)													{
HXLINE( 541)														minfx = f1x;
HXDLIN( 541)														minfy = f1y;
            													}
HXDLIN( 541)													minq = q0;
            												}
            												else {
HXLINE( 541)													{
HXLINE( 541)														minfx = f2x;
HXDLIN( 541)														minfy = f2y;
            													}
HXDLIN( 541)													minq = q1;
HXDLIN( 541)													d1 = d2;
            												}
HXDLIN( 541)												HX_VARI( Float,mingx) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,mingy) = ((Float)0.0);
HXDLIN( 541)												HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minv) = null();
HXDLIN( 541)												if ((e1 < e2)) {
HXLINE( 541)													{
HXLINE( 541)														mingx = g1x;
HXDLIN( 541)														mingy = g1y;
            													}
HXDLIN( 541)													minv = v01;
            												}
            												else {
HXLINE( 541)													{
HXLINE( 541)														mingx = g2x;
HXDLIN( 541)														mingy = g2y;
            													}
HXDLIN( 541)													minv = v11;
HXDLIN( 541)													e1 = e2;
            												}
HXDLIN( 541)												if ((d1 < e1)) {
HXLINE( 541)													{
HXLINE( 541)														w11->x = minfx;
HXDLIN( 541)														w11->y = minfy;
            													}
HXDLIN( 541)													{
HXLINE( 541)														w21->x = minq->x;
HXDLIN( 541)														w21->y = minq->y;
            													}
HXDLIN( 541)													best1 = ::Math_obj::sqrt(d1);
            												}
            												else {
HXLINE( 541)													{
HXLINE( 541)														w21->x = mingx;
HXDLIN( 541)														w21->y = mingy;
            													}
HXDLIN( 541)													{
HXLINE( 541)														w11->x = minv->x;
HXDLIN( 541)														w11->y = minv->y;
            													}
HXDLIN( 541)													best1 = ::Math_obj::sqrt(e1);
            												}
HXDLIN( 541)												if ((best1 != (int)0)) {
HXLINE( 541)													{
HXLINE( 541)														ax->x = (w21->x - w11->x);
HXDLIN( 541)														ax->y = (w21->y - w11->y);
            													}
HXDLIN( 541)													{
HXLINE( 541)														HX_VARI_NAME( Float,t16,"t") = ((Float)((Float)1.0) / (Float)best1);
HXDLIN( 541)														 ::zpp_nape::geom::ZPP_Vec2 ax2 = ax;
HXDLIN( 541)														ax2->x = (ax2->x * t16);
HXDLIN( 541)														 ::zpp_nape::geom::ZPP_Vec2 ax3 = ax;
HXDLIN( 541)														ax3->y = (ax3->y * t16);
            													}
HXDLIN( 541)													if (swapped) {
HXLINE( 541)														ax->x = -(ax->x);
HXDLIN( 541)														ax->y = -(ax->y);
            													}
            												}
HXDLIN( 541)												dist = best1;
            											}
            											else {
HXLINE( 541)												HX_VARI( Float,c0x) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,c0y) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													c0x = ay->gp0->x;
HXDLIN( 541)													c0y = ay->gp0->y;
            												}
HXDLIN( 541)												HX_VARI( Float,c1x) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,c1y) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													c1x = ay->gp1->x;
HXDLIN( 541)													c1y = ay->gp1->y;
            												}
HXDLIN( 541)												HX_VARI( Float,dvx) = ((Float)0.0);
HXDLIN( 541)												HX_VARI( Float,dvy) = ((Float)0.0);
HXDLIN( 541)												{
HXLINE( 541)													dvx = (c1x - c0x);
HXDLIN( 541)													dvy = (c1y - c0y);
            												}
HXDLIN( 541)												HX_VARI( Float,d0) = ((ax1->gnormy * c0x) - (ax1->gnormx * c0y));
HXDLIN( 541)												HX_VARI_NAME( Float,d11,"d1") = ((ax1->gnormy * c1x) - (ax1->gnormx * c1y));
HXDLIN( 541)												HX_VARI( Float,den) = ((Float)(int)1 / (Float)(d11 - d0));
HXDLIN( 541)												HX_VARI_NAME( Float,t17,"t") = ((-(ax1->tp1) - d0) * den);
HXDLIN( 541)												if ((t17 > ::nape::Config_obj::epsilon)) {
HXLINE( 541)													c0x = (c0x + (dvx * t17));
HXDLIN( 541)													c0y = (c0y + (dvy * t17));
            												}
HXDLIN( 541)												HX_VARI_NAME( Float,t18,"t") = ((-(ax1->tp0) - d11) * den);
HXDLIN( 541)												if ((t18 < -(::nape::Config_obj::epsilon))) {
HXLINE( 541)													c1x = (c1x + (dvx * t18));
HXDLIN( 541)													c1y = (c1y + (dvy * t18));
            												}
HXDLIN( 541)												HX_VARI( Float,c0d) = (((c0x * ax1->gnormx) + (c0y * ax1->gnormy)) - ax1->gprojection);
HXDLIN( 541)												HX_VARI( Float,c1d) = (((c1x * ax1->gnormx) + (c1y * ax1->gnormy)) - ax1->gprojection);
HXDLIN( 541)												if ((c0d < c1d)) {
HXLINE( 541)													{
HXLINE( 541)														w21->x = c0x;
HXDLIN( 541)														w21->y = c0y;
            													}
HXDLIN( 541)													{
HXLINE( 541)														HX_VARI_NAME( Float,t19,"t") = -(c0d);
HXDLIN( 541)														w11->x = (w21->x + (ax1->gnormx * t19));
HXDLIN( 541)														w11->y = (w21->y + (ax1->gnormy * t19));
            													}
HXDLIN( 541)													dist = c0d;
            												}
            												else {
HXLINE( 541)													{
HXLINE( 541)														w21->x = c1x;
HXDLIN( 541)														w21->y = c1y;
            													}
HXDLIN( 541)													{
HXLINE( 541)														HX_VARI_NAME( Float,t20,"t") = -(c1d);
HXDLIN( 541)														w11->x = (w21->x + (ax1->gnormx * t20));
HXDLIN( 541)														w11->y = (w21->y + (ax1->gnormy * t20));
            													}
HXDLIN( 541)													dist = c1d;
            												}
            											}
            										}
            										else {
HXLINE( 541)											dist = min;
            										}
            									}
            									else {
HXLINE( 541)										dist = min;
            									}
            								}
            							}
HXLINE( 542)							if ((dist < min)) {
HXLINE( 543)								min = dist;
HXLINE( 544)								{
HXLINE( 545)									w1->x = t1->x;
HXLINE( 546)									w1->y = t1->y;
            								}
HXLINE( 564)								{
HXLINE( 565)									w2->x = t2->x;
HXLINE( 566)									w2->y = t2->y;
            								}
            							}
            						}
HXLINE( 586)						cx_ite1 = cx_ite1->next;
            					}
            				}
HXLINE( 590)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE( 593)		{
HXLINE( 594)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,o) = t1;
HXLINE( 603)			{
HXLINE( 603)				if (hx::IsNotNull( o->outer )) {
HXLINE( 603)					o->outer->zpp_inner = null();
HXDLIN( 603)					o->outer = null();
            				}
HXDLIN( 603)				o->_isimmutable = null();
HXDLIN( 603)				o->_validate = null();
HXDLIN( 603)				o->_invalidate = null();
            			}
HXLINE( 604)			o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 605)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
            		}
HXLINE( 610)		{
HXLINE( 611)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,o1,"o") = t2;
HXLINE( 620)			{
HXLINE( 620)				if (hx::IsNotNull( o1->outer )) {
HXLINE( 620)					o1->outer->zpp_inner = null();
HXDLIN( 620)					o1->outer = null();
            				}
HXDLIN( 620)				o1->_isimmutable = null();
HXDLIN( 620)				o1->_validate = null();
HXDLIN( 620)				o1->_invalidate = null();
            			}
HXLINE( 621)			o1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 622)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o1;
            		}
HXLINE( 627)		{
HXLINE( 628)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,o2,"o") = ax;
HXLINE( 637)			{
HXLINE( 637)				if (hx::IsNotNull( o2->outer )) {
HXLINE( 637)					o2->outer->zpp_inner = null();
HXDLIN( 637)					o2->outer = null();
            				}
HXDLIN( 637)				o2->_isimmutable = null();
HXDLIN( 637)				o2->_validate = null();
HXDLIN( 637)				o2->_invalidate = null();
            			}
HXLINE( 638)			o2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXLINE( 639)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o2;
            		}
HXLINE( 644)		return min;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_SweepDistance_obj,distanceBody,return )

Float ZPP_SweepDistance_obj::distance( ::zpp_nape::shape::ZPP_Shape s1, ::zpp_nape::shape::ZPP_Shape s2, ::zpp_nape::geom::ZPP_Vec2 w1, ::zpp_nape::geom::ZPP_Vec2 w2, ::zpp_nape::geom::ZPP_Vec2 axis,hx::Null< Float >  __o_upperBound){
Float upperBound = __o_upperBound.Default(((Float)1e100));
            	HX_STACKFRAME(&_hx_pos_9bdbed0391edf141_648_distance)
            	HX_STACK_ARG(s1,"s1")
            	HX_STACK_ARG(s2,"s2")
            	HX_STACK_ARG(w1,"w1")
            	HX_STACK_ARG(w2,"w2")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(upperBound,"upperBound")
HXLINE( 648)		bool _hx_tmp;
HXDLIN( 648)		if ((s1->type == (int)0)) {
HXLINE( 648)			_hx_tmp = (s2->type == (int)0);
            		}
            		else {
HXLINE( 648)			_hx_tmp = false;
            		}
HXDLIN( 648)		if (_hx_tmp) {
HXLINE( 649)			HX_VARI(  ::zpp_nape::shape::ZPP_Circle,c1) = s1->circle;
HXLINE( 650)			HX_VARI(  ::zpp_nape::shape::ZPP_Circle,c2) = s2->circle;
HXLINE( 651)			HX_VAR( Float,dist);
HXLINE( 652)			{
HXLINE( 653)				HX_VARI( Float,nx) = ((Float)0.0);
HXLINE( 654)				HX_VARI( Float,ny) = ((Float)0.0);
HXLINE( 655)				{
HXLINE( 656)					nx = (c2->worldCOMx - c1->worldCOMx);
HXLINE( 657)					ny = (c2->worldCOMy - c1->worldCOMy);
            				}
HXLINE( 659)				HX_VARI( Float,len) = ::Math_obj::sqrt(((nx * nx) + (ny * ny)));
HXLINE( 660)				dist = (len - (c1->radius + c2->radius));
HXLINE( 661)				if ((dist < upperBound)) {
HXLINE( 662)					if ((len == (int)0)) {
HXLINE( 663)						nx = (int)1;
HXLINE( 664)						ny = (int)0;
            					}
            					else {
HXLINE( 683)						HX_VARI( Float,t) = ((Float)((Float)1.0) / (Float)len);
HXLINE( 692)						nx = (nx * t);
HXLINE( 693)						ny = (ny * t);
            					}
HXLINE( 695)					{
HXLINE( 696)						HX_VARI_NAME( Float,t1,"t") = c1->radius;
HXLINE( 705)						w1->x = (c1->worldCOMx + (nx * t1));
HXLINE( 706)						w1->y = (c1->worldCOMy + (ny * t1));
            					}
HXLINE( 708)					{
HXLINE( 709)						HX_VARI_NAME( Float,t2,"t") = -(c2->radius);
HXLINE( 718)						w2->x = (c2->worldCOMx + (nx * t2));
HXLINE( 719)						w2->y = (c2->worldCOMy + (ny * t2));
            					}
HXLINE( 721)					{
HXLINE( 722)						axis->x = nx;
HXLINE( 723)						axis->y = ny;
            					}
            				}
            			}
HXLINE( 743)			return dist;
            		}
            		else {
HXLINE( 746)			HX_VARI( bool,swapped) = false;
HXLINE( 747)			bool _hx_tmp1;
HXDLIN( 747)			if ((s1->type == (int)0)) {
HXLINE( 747)				_hx_tmp1 = (s2->type == (int)1);
            			}
            			else {
HXLINE( 747)				_hx_tmp1 = false;
            			}
HXDLIN( 747)			if (_hx_tmp1) {
HXLINE( 748)				HX_VARI(  ::zpp_nape::shape::ZPP_Shape,tmp) = s1;
HXLINE( 749)				s1 = s2;
HXLINE( 750)				s2 = tmp;
HXLINE( 751)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,tmp2) = w1;
HXLINE( 752)				w1 = w2;
HXLINE( 753)				w2 = tmp2;
HXLINE( 754)				swapped = true;
            			}
HXLINE( 756)			bool _hx_tmp2;
HXDLIN( 756)			if ((s1->type == (int)1)) {
HXLINE( 756)				_hx_tmp2 = (s2->type == (int)0);
            			}
            			else {
HXLINE( 756)				_hx_tmp2 = false;
            			}
HXDLIN( 756)			if (_hx_tmp2) {
HXLINE( 758)				HX_VARI(  ::zpp_nape::shape::ZPP_Circle,circle) = s2->circle;
HXLINE( 759)				HX_VARI( Float,best) = ((Float)-1e+100);
HXLINE( 760)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a0) = null();
HXLINE( 761)				{
HXLINE( 762)					HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite) = s1->polygon->edges->head;
HXLINE( 763)					while(hx::IsNotNull( cx_ite )){
HXLINE( 764)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a) = cx_ite->elt;
HXLINE( 765)						{
HXLINE( 766)							HX_VARI_NAME( Float,dist1,"dist") = ((((a->gnormx * circle->worldCOMx) + (a->gnormy * circle->worldCOMy)) - a->gprojection) - circle->radius);
HXLINE( 767)							if ((dist1 > upperBound)) {
HXLINE( 768)								best = dist1;
HXLINE( 769)								goto _hx_goto_49;
            							}
HXLINE( 771)							if ((dist1 > (int)0)) {
HXLINE( 772)								if ((dist1 > best)) {
HXLINE( 773)									best = dist1;
HXLINE( 774)									a0 = a;
            								}
            							}
            							else {
HXLINE( 777)								bool _hx_tmp3;
HXDLIN( 777)								if ((best < (int)0)) {
HXLINE( 777)									_hx_tmp3 = (dist1 > best);
            								}
            								else {
HXLINE( 777)									_hx_tmp3 = false;
            								}
HXDLIN( 777)								if (_hx_tmp3) {
HXLINE( 778)									best = dist1;
HXLINE( 779)									a0 = a;
            								}
            							}
            						}
HXLINE( 782)						cx_ite = cx_ite->next;
            					}
            					_hx_goto_49:;
            				}
HXLINE( 785)				if ((best < upperBound)) {
HXLINE( 786)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v0) = a0->gp0;
HXLINE( 787)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v1) = a0->gp1;
HXLINE( 788)					HX_VARI( Float,dt) = ((circle->worldCOMy * a0->gnormx) - (circle->worldCOMx * a0->gnormy));
HXLINE( 789)					if ((dt <= ((v0->y * a0->gnormx) - (v0->x * a0->gnormy)))) {
HXLINE( 791)						HX_VARI_NAME( Float,nx1,"nx") = ((Float)0.0);
HXLINE( 792)						HX_VARI_NAME( Float,ny1,"ny") = ((Float)0.0);
HXLINE( 793)						{
HXLINE( 794)							nx1 = (circle->worldCOMx - v0->x);
HXLINE( 795)							ny1 = (circle->worldCOMy - v0->y);
            						}
HXLINE( 797)						HX_VARI_NAME( Float,len1,"len") = ::Math_obj::sqrt(((nx1 * nx1) + (ny1 * ny1)));
HXLINE( 798)						best = (len1 - circle->radius);
HXLINE( 799)						if ((best < upperBound)) {
HXLINE( 800)							if ((len1 == (int)0)) {
HXLINE( 801)								nx1 = (int)1;
HXLINE( 802)								ny1 = (int)0;
            							}
            							else {
HXLINE( 821)								HX_VARI_NAME( Float,t3,"t") = ((Float)((Float)1.0) / (Float)len1);
HXLINE( 830)								nx1 = (nx1 * t3);
HXLINE( 831)								ny1 = (ny1 * t3);
            							}
HXLINE( 833)							{
HXLINE( 843)								w1->x = (v0->x + (nx1 * (int)0));
HXLINE( 844)								w1->y = (v0->y + (ny1 * (int)0));
            							}
HXLINE( 846)							{
HXLINE( 847)								HX_VARI_NAME( Float,t4,"t") = -(circle->radius);
HXLINE( 856)								w2->x = (circle->worldCOMx + (nx1 * t4));
HXLINE( 857)								w2->y = (circle->worldCOMy + (ny1 * t4));
            							}
HXLINE( 859)							{
HXLINE( 860)								axis->x = nx1;
HXLINE( 861)								axis->y = ny1;
            							}
            						}
            					}
            					else {
HXLINE( 882)						if ((dt >= ((v1->y * a0->gnormx) - (v1->x * a0->gnormy)))) {
HXLINE( 884)							HX_VARI_NAME( Float,nx2,"nx") = ((Float)0.0);
HXLINE( 885)							HX_VARI_NAME( Float,ny2,"ny") = ((Float)0.0);
HXLINE( 886)							{
HXLINE( 887)								nx2 = (circle->worldCOMx - v1->x);
HXLINE( 888)								ny2 = (circle->worldCOMy - v1->y);
            							}
HXLINE( 890)							HX_VARI_NAME( Float,len2,"len") = ::Math_obj::sqrt(((nx2 * nx2) + (ny2 * ny2)));
HXLINE( 891)							best = (len2 - circle->radius);
HXLINE( 892)							if ((best < upperBound)) {
HXLINE( 893)								if ((len2 == (int)0)) {
HXLINE( 894)									nx2 = (int)1;
HXLINE( 895)									ny2 = (int)0;
            								}
            								else {
HXLINE( 914)									HX_VARI_NAME( Float,t5,"t") = ((Float)((Float)1.0) / (Float)len2);
HXLINE( 923)									nx2 = (nx2 * t5);
HXLINE( 924)									ny2 = (ny2 * t5);
            								}
HXLINE( 926)								{
HXLINE( 936)									w1->x = (v1->x + (nx2 * (int)0));
HXLINE( 937)									w1->y = (v1->y + (ny2 * (int)0));
            								}
HXLINE( 939)								{
HXLINE( 940)									HX_VARI_NAME( Float,t6,"t") = -(circle->radius);
HXLINE( 949)									w2->x = (circle->worldCOMx + (nx2 * t6));
HXLINE( 950)									w2->y = (circle->worldCOMy + (ny2 * t6));
            								}
HXLINE( 952)								{
HXLINE( 953)									axis->x = nx2;
HXLINE( 954)									axis->y = ny2;
            								}
            							}
            						}
            						else {
HXLINE( 976)							{
HXLINE( 977)								HX_VARI_NAME( Float,t7,"t") = -(circle->radius);
HXLINE( 986)								w2->x = (circle->worldCOMx + (a0->gnormx * t7));
HXLINE( 987)								w2->y = (circle->worldCOMy + (a0->gnormy * t7));
            							}
HXLINE( 989)							{
HXLINE( 990)								HX_VARI_NAME( Float,t8,"t") = -(best);
HXLINE( 999)								w1->x = (w2->x + (a0->gnormx * t8));
HXLINE(1000)								w1->y = (w2->y + (a0->gnormy * t8));
            							}
HXLINE(1002)							{
HXLINE(1003)								axis->x = a0->gnormx;
HXLINE(1004)								axis->y = a0->gnormy;
            							}
            						}
            					}
            				}
HXLINE(1024)				if (swapped) {
HXLINE(1025)					axis->x = -(axis->x);
HXLINE(1026)					axis->y = -(axis->y);
            				}
HXLINE(1028)				return best;
            			}
            			else {
HXLINE(1031)				HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,p1) = s1->polygon;
HXLINE(1032)				HX_VARI(  ::zpp_nape::shape::ZPP_Polygon,p2) = s2->polygon;
HXLINE(1033)				HX_VARI_NAME( Float,best1,"best") = ((Float)-1e+100);
HXLINE(1034)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a1) = null();
HXLINE(1035)				HX_VARI(  ::zpp_nape::shape::ZPP_Edge,a2) = null();
HXLINE(1036)				HX_VARI( int,besti) = (int)0;
HXLINE(1037)				{
HXLINE(1038)					HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite1,"cx_ite") = p1->edges->head;
HXLINE(1039)					while(hx::IsNotNull( cx_ite1 )){
HXLINE(1040)						HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a3,"a") = cx_ite1->elt;
HXLINE(1041)						{
HXLINE(1042)							HX_VARI( Float,min) = ((Float)1e100);
HXLINE(1043)							{
HXLINE(1044)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite2,"cx_ite") = p2->gverts->next;
HXLINE(1045)								while(hx::IsNotNull( cx_ite2 )){
HXLINE(1046)									HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,v) = cx_ite2;
HXLINE(1047)									{
HXLINE(1048)										HX_VARI( Float,k) = ((a3->gnormx * v->x) + (a3->gnormy * v->y));
HXLINE(1049)										if ((k < min)) {
HXLINE(1049)											min = k;
            										}
            									}
HXLINE(1051)									cx_ite2 = cx_ite2->next;
            								}
            							}
HXLINE(1054)							min = (min - a3->gprojection);
HXLINE(1055)							if ((min > upperBound)) {
HXLINE(1056)								best1 = min;
HXLINE(1057)								goto _hx_goto_50;
            							}
HXLINE(1059)							if ((min > (int)0)) {
HXLINE(1060)								if ((min > best1)) {
HXLINE(1061)									best1 = min;
HXLINE(1062)									a1 = a3;
HXLINE(1063)									besti = (int)1;
            								}
            							}
            							else {
HXLINE(1066)								bool _hx_tmp4;
HXDLIN(1066)								if ((best1 < (int)0)) {
HXLINE(1066)									_hx_tmp4 = (min > best1);
            								}
            								else {
HXLINE(1066)									_hx_tmp4 = false;
            								}
HXDLIN(1066)								if (_hx_tmp4) {
HXLINE(1067)									best1 = min;
HXLINE(1068)									a1 = a3;
HXLINE(1069)									besti = (int)1;
            								}
            							}
            						}
HXLINE(1072)						cx_ite1 = cx_ite1->next;
            					}
            					_hx_goto_50:;
            				}
HXLINE(1075)				if ((best1 < upperBound)) {
HXLINE(1076)					{
HXLINE(1077)						HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite3,"cx_ite") = p2->edges->head;
HXLINE(1078)						while(hx::IsNotNull( cx_ite3 )){
HXLINE(1079)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a4,"a") = cx_ite3->elt;
HXLINE(1080)							{
HXLINE(1081)								HX_VARI_NAME( Float,min1,"min") = ((Float)1e100);
HXLINE(1082)								{
HXLINE(1083)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,cx_ite4,"cx_ite") = p1->gverts->next;
HXLINE(1084)									while(hx::IsNotNull( cx_ite4 )){
HXLINE(1085)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v2,"v") = cx_ite4;
HXLINE(1086)										{
HXLINE(1087)											HX_VARI_NAME( Float,k1,"k") = ((a4->gnormx * v2->x) + (a4->gnormy * v2->y));
HXLINE(1088)											if ((k1 < min1)) {
HXLINE(1088)												min1 = k1;
            											}
            										}
HXLINE(1090)										cx_ite4 = cx_ite4->next;
            									}
            								}
HXLINE(1093)								min1 = (min1 - a4->gprojection);
HXLINE(1094)								if ((min1 > upperBound)) {
HXLINE(1095)									best1 = min1;
HXLINE(1096)									goto _hx_goto_52;
            								}
HXLINE(1098)								if ((min1 > (int)0)) {
HXLINE(1099)									if ((min1 > best1)) {
HXLINE(1100)										best1 = min1;
HXLINE(1101)										a2 = a4;
HXLINE(1102)										besti = (int)2;
            									}
            								}
            								else {
HXLINE(1105)									bool _hx_tmp5;
HXDLIN(1105)									if ((best1 < (int)0)) {
HXLINE(1105)										_hx_tmp5 = (min1 > best1);
            									}
            									else {
HXLINE(1105)										_hx_tmp5 = false;
            									}
HXDLIN(1105)									if (_hx_tmp5) {
HXLINE(1106)										best1 = min1;
HXLINE(1107)										a2 = a4;
HXLINE(1108)										besti = (int)2;
            									}
            								}
            							}
HXLINE(1111)							cx_ite3 = cx_ite3->next;
            						}
            						_hx_goto_52:;
            					}
HXLINE(1114)					if ((best1 < upperBound)) {
HXLINE(1115)						HX_VAR(  ::zpp_nape::shape::ZPP_Polygon,q2);
HXLINE(1116)						HX_VAR(  ::zpp_nape::shape::ZPP_Edge,ax);
HXLINE(1117)						if ((besti == (int)1)) {
HXLINE(1119)							q2 = p2;
HXLINE(1120)							ax = a1;
            						}
            						else {
HXLINE(1124)							q2 = p1;
HXLINE(1125)							ax = a2;
HXLINE(1126)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,tmp1,"tmp") = w1;
HXLINE(1127)							w1 = w2;
HXLINE(1128)							w2 = tmp1;
HXLINE(1129)							swapped = !(swapped);
            						}
HXLINE(1131)						HX_VARI(  ::zpp_nape::shape::ZPP_Edge,ay) = null();
HXLINE(1132)						HX_VARI_NAME( Float,min2,"min") = ((Float)1e100);
HXLINE(1133)						{
HXLINE(1134)							HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,cx_ite5,"cx_ite") = q2->edges->head;
HXLINE(1135)							while(hx::IsNotNull( cx_ite5 )){
HXLINE(1136)								HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,a5,"a") = cx_ite5->elt;
HXLINE(1137)								{
HXLINE(1138)									HX_VARI_NAME( Float,k2,"k") = ((ax->gnormx * a5->gnormx) + (ax->gnormy * a5->gnormy));
HXLINE(1139)									if ((k2 < min2)) {
HXLINE(1140)										min2 = k2;
HXLINE(1141)										ay = a5;
            									}
            								}
HXLINE(1144)								cx_ite5 = cx_ite5->next;
            							}
            						}
HXLINE(1147)						if (swapped) {
HXLINE(1148)							axis->x = -(ax->gnormx);
HXLINE(1149)							axis->y = -(ax->gnormy);
            						}
            						else {
HXLINE(1168)							axis->x = ax->gnormx;
HXLINE(1169)							axis->y = ax->gnormy;
            						}
HXLINE(1187)						if ((best1 >= (int)0)) {
HXLINE(1188)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v01,"v0") = ax->gp0;
HXLINE(1189)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,v11,"v1") = ax->gp1;
HXLINE(1190)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q0) = ay->gp0;
HXLINE(1191)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,q1) = ay->gp1;
HXLINE(1192)							HX_VARI( Float,vx) = ((Float)0.0);
HXLINE(1193)							HX_VARI( Float,vy) = ((Float)0.0);
HXLINE(1194)							HX_VARI( Float,qx) = ((Float)0.0);
HXLINE(1195)							HX_VARI( Float,qy) = ((Float)0.0);
HXLINE(1196)							{
HXLINE(1197)								vx = (v11->x - v01->x);
HXLINE(1198)								vy = (v11->y - v01->y);
            							}
HXLINE(1200)							{
HXLINE(1201)								qx = (q1->x - q0->x);
HXLINE(1202)								qy = (q1->y - q0->y);
            							}
HXLINE(1204)							HX_VARI( Float,vdot) = ((Float)(int)1 / (Float)((vx * vx) + (vy * vy)));
HXLINE(1205)							HX_VARI( Float,qdot) = ((Float)(int)1 / (Float)((qx * qx) + (qy * qy)));
HXLINE(1206)							HX_VARI_NAME( Float,t11,"t1") = (-(((vx * (v01->x - q0->x)) + (vy * (v01->y - q0->y)))) * vdot);
HXLINE(1207)							HX_VARI_NAME( Float,t21,"t2") = (-(((vx * (v01->x - q1->x)) + (vy * (v01->y - q1->y)))) * vdot);
HXLINE(1208)							HX_VARI_NAME( Float,s11,"s1") = (-(((qx * (q0->x - v01->x)) + (qy * (q0->y - v01->y)))) * qdot);
HXLINE(1209)							HX_VARI_NAME( Float,s21,"s2") = (-(((qx * (q0->x - v11->x)) + (qy * (q0->y - v11->y)))) * qdot);
HXLINE(1210)							if ((t11 < (int)0)) {
HXLINE(1210)								t11 = (int)0;
            							}
            							else {
HXLINE(1211)								if ((t11 > (int)1)) {
HXLINE(1211)									t11 = (int)1;
            								}
            							}
HXLINE(1212)							if ((t21 < (int)0)) {
HXLINE(1212)								t21 = (int)0;
            							}
            							else {
HXLINE(1213)								if ((t21 > (int)1)) {
HXLINE(1213)									t21 = (int)1;
            								}
            							}
HXLINE(1214)							if ((s11 < (int)0)) {
HXLINE(1214)								s11 = (int)0;
            							}
            							else {
HXLINE(1215)								if ((s11 > (int)1)) {
HXLINE(1215)									s11 = (int)1;
            								}
            							}
HXLINE(1216)							if ((s21 < (int)0)) {
HXLINE(1216)								s21 = (int)0;
            							}
            							else {
HXLINE(1217)								if ((s21 > (int)1)) {
HXLINE(1217)									s21 = (int)1;
            								}
            							}
HXLINE(1218)							HX_VARI( Float,f1x) = ((Float)0.0);
HXLINE(1219)							HX_VARI( Float,f1y) = ((Float)0.0);
HXLINE(1220)							{
HXLINE(1221)								HX_VARI_NAME( Float,t9,"t") = t11;
HXLINE(1230)								f1x = (v01->x + (vx * t9));
HXLINE(1231)								f1y = (v01->y + (vy * t9));
            							}
HXLINE(1233)							HX_VARI( Float,f2x) = ((Float)0.0);
HXLINE(1234)							HX_VARI( Float,f2y) = ((Float)0.0);
HXLINE(1235)							{
HXLINE(1236)								HX_VARI_NAME( Float,t10,"t") = t21;
HXLINE(1245)								f2x = (v01->x + (vx * t10));
HXLINE(1246)								f2y = (v01->y + (vy * t10));
            							}
HXLINE(1248)							HX_VARI( Float,g1x) = ((Float)0.0);
HXLINE(1249)							HX_VARI( Float,g1y) = ((Float)0.0);
HXLINE(1250)							{
HXLINE(1251)								HX_VARI_NAME( Float,t12,"t") = s11;
HXLINE(1260)								g1x = (q0->x + (qx * t12));
HXLINE(1261)								g1y = (q0->y + (qy * t12));
            							}
HXLINE(1263)							HX_VARI( Float,g2x) = ((Float)0.0);
HXLINE(1264)							HX_VARI( Float,g2y) = ((Float)0.0);
HXLINE(1265)							{
HXLINE(1266)								HX_VARI_NAME( Float,t13,"t") = s21;
HXLINE(1275)								g2x = (q0->x + (qx * t13));
HXLINE(1276)								g2y = (q0->y + (qy * t13));
            							}
HXLINE(1278)							HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN(1278)							HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN(1278)							{
HXLINE(1278)								dx = (f1x - q0->x);
HXDLIN(1278)								dy = (f1y - q0->y);
            							}
HXDLIN(1278)							HX_VARI( Float,d1) = ((dx * dx) + (dy * dy));
HXLINE(1279)							HX_VARI_NAME( Float,dx1,"dx") = ((Float)0.0);
HXDLIN(1279)							HX_VARI_NAME( Float,dy1,"dy") = ((Float)0.0);
HXDLIN(1279)							{
HXLINE(1279)								dx1 = (f2x - q1->x);
HXDLIN(1279)								dy1 = (f2y - q1->y);
            							}
HXDLIN(1279)							HX_VARI( Float,d2) = ((dx1 * dx1) + (dy1 * dy1));
HXLINE(1280)							HX_VARI_NAME( Float,dx2,"dx") = ((Float)0.0);
HXDLIN(1280)							HX_VARI_NAME( Float,dy2,"dy") = ((Float)0.0);
HXDLIN(1280)							{
HXLINE(1280)								dx2 = (g1x - v01->x);
HXDLIN(1280)								dy2 = (g1y - v01->y);
            							}
HXDLIN(1280)							HX_VARI( Float,e1) = ((dx2 * dx2) + (dy2 * dy2));
HXLINE(1281)							HX_VARI_NAME( Float,dx3,"dx") = ((Float)0.0);
HXDLIN(1281)							HX_VARI_NAME( Float,dy3,"dy") = ((Float)0.0);
HXDLIN(1281)							{
HXLINE(1281)								dx3 = (g2x - v11->x);
HXDLIN(1281)								dy3 = (g2y - v11->y);
            							}
HXDLIN(1281)							HX_VARI( Float,e2) = ((dx3 * dx3) + (dy3 * dy3));
HXLINE(1282)							HX_VARI( Float,minfx) = ((Float)0.0);
HXLINE(1283)							HX_VARI( Float,minfy) = ((Float)0.0);
HXLINE(1284)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minq) = null();
HXLINE(1285)							if ((d1 < d2)) {
HXLINE(1286)								{
HXLINE(1287)									minfx = f1x;
HXLINE(1288)									minfy = f1y;
            								}
HXLINE(1306)								minq = q0;
            							}
            							else {
HXLINE(1309)								{
HXLINE(1310)									minfx = f2x;
HXLINE(1311)									minfy = f2y;
            								}
HXLINE(1329)								minq = q1;
HXLINE(1330)								d1 = d2;
            							}
HXLINE(1332)							HX_VARI( Float,mingx) = ((Float)0.0);
HXLINE(1333)							HX_VARI( Float,mingy) = ((Float)0.0);
HXLINE(1334)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,minv) = null();
HXLINE(1335)							if ((e1 < e2)) {
HXLINE(1336)								{
HXLINE(1337)									mingx = g1x;
HXLINE(1338)									mingy = g1y;
            								}
HXLINE(1356)								minv = v01;
            							}
            							else {
HXLINE(1359)								{
HXLINE(1360)									mingx = g2x;
HXLINE(1361)									mingy = g2y;
            								}
HXLINE(1379)								minv = v11;
HXLINE(1380)								e1 = e2;
            							}
HXLINE(1382)							if ((d1 < e1)) {
HXLINE(1383)								{
HXLINE(1384)									w1->x = minfx;
HXLINE(1385)									w1->y = minfy;
            								}
HXLINE(1403)								{
HXLINE(1404)									w2->x = minq->x;
HXLINE(1405)									w2->y = minq->y;
            								}
HXLINE(1423)								best1 = ::Math_obj::sqrt(d1);
            							}
            							else {
HXLINE(1426)								{
HXLINE(1427)									w2->x = mingx;
HXLINE(1428)									w2->y = mingy;
            								}
HXLINE(1446)								{
HXLINE(1447)									w1->x = minv->x;
HXLINE(1448)									w1->y = minv->y;
            								}
HXLINE(1466)								best1 = ::Math_obj::sqrt(e1);
            							}
HXLINE(1468)							if ((best1 != (int)0)) {
HXLINE(1469)								{
HXLINE(1470)									axis->x = (w2->x - w1->x);
HXLINE(1471)									axis->y = (w2->y - w1->y);
            								}
HXLINE(1473)								{
HXLINE(1474)									HX_VARI_NAME( Float,t14,"t") = ((Float)((Float)1.0) / (Float)best1);
HXLINE(1483)									axis->x = (axis->x * t14);
HXLINE(1484)									axis->y = (axis->y * t14);
            								}
HXLINE(1486)								if (swapped) {
HXLINE(1487)									axis->x = -(axis->x);
HXLINE(1488)									axis->y = -(axis->y);
            								}
            							}
HXLINE(1491)							return best1;
            						}
            						else {
HXLINE(1494)							HX_VARI( Float,c0x) = ((Float)0.0);
HXLINE(1495)							HX_VARI( Float,c0y) = ((Float)0.0);
HXLINE(1496)							{
HXLINE(1497)								c0x = ay->gp0->x;
HXLINE(1498)								c0y = ay->gp0->y;
            							}
HXLINE(1516)							HX_VARI( Float,c1x) = ((Float)0.0);
HXLINE(1517)							HX_VARI( Float,c1y) = ((Float)0.0);
HXLINE(1518)							{
HXLINE(1519)								c1x = ay->gp1->x;
HXLINE(1520)								c1y = ay->gp1->y;
            							}
HXLINE(1538)							HX_VARI( Float,dvx) = ((Float)0.0);
HXLINE(1539)							HX_VARI( Float,dvy) = ((Float)0.0);
HXLINE(1540)							{
HXLINE(1541)								dvx = (c1x - c0x);
HXLINE(1542)								dvy = (c1y - c0y);
            							}
HXLINE(1544)							HX_VARI( Float,d0) = ((ax->gnormy * c0x) - (ax->gnormx * c0y));
HXLINE(1545)							HX_VARI_NAME( Float,d11,"d1") = ((ax->gnormy * c1x) - (ax->gnormx * c1y));
HXLINE(1546)							HX_VARI( Float,den) = ((Float)(int)1 / (Float)(d11 - d0));
HXLINE(1547)							HX_VARI_NAME( Float,t15,"t") = ((-(ax->tp1) - d0) * den);
HXLINE(1548)							if ((t15 > ::nape::Config_obj::epsilon)) {
HXLINE(1558)								c0x = (c0x + (dvx * t15));
HXLINE(1559)								c0y = (c0y + (dvy * t15));
            							}
HXLINE(1561)							HX_VARI_NAME( Float,t16,"t") = ((-(ax->tp0) - d11) * den);
HXLINE(1562)							if ((t16 < -(::nape::Config_obj::epsilon))) {
HXLINE(1572)								c1x = (c1x + (dvx * t16));
HXLINE(1573)								c1y = (c1y + (dvy * t16));
            							}
HXLINE(1575)							HX_VARI( Float,c0d) = (((c0x * ax->gnormx) + (c0y * ax->gnormy)) - ax->gprojection);
HXLINE(1576)							HX_VARI( Float,c1d) = (((c1x * ax->gnormx) + (c1y * ax->gnormy)) - ax->gprojection);
HXLINE(1577)							if ((c0d < c1d)) {
HXLINE(1578)								{
HXLINE(1579)									w2->x = c0x;
HXLINE(1580)									w2->y = c0y;
            								}
HXLINE(1598)								{
HXLINE(1599)									HX_VARI_NAME( Float,t17,"t") = -(c0d);
HXLINE(1608)									w1->x = (w2->x + (ax->gnormx * t17));
HXLINE(1609)									w1->y = (w2->y + (ax->gnormy * t17));
            								}
HXLINE(1611)								return c0d;
            							}
            							else {
HXLINE(1614)								{
HXLINE(1615)									w2->x = c1x;
HXLINE(1616)									w2->y = c1y;
            								}
HXLINE(1634)								{
HXLINE(1635)									HX_VARI_NAME( Float,t18,"t") = -(c1d);
HXLINE(1644)									w1->x = (w2->x + (ax->gnormx * t18));
HXLINE(1645)									w1->y = (w2->y + (ax->gnormy * t18));
            								}
HXLINE(1647)								return c1d;
            							}
            						}
            					}
            					else {
HXLINE(1651)						return upperBound;
            					}
            				}
            				else {
HXLINE(1653)					return upperBound;
            				}
            			}
            		}
HXLINE( 648)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ZPP_SweepDistance_obj,distance,return )


ZPP_SweepDistance_obj::ZPP_SweepDistance_obj()
{
}

bool ZPP_SweepDistance_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"staticSweep") ) { outValue = staticSweep_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"dynamicSweep") ) { outValue = dynamicSweep_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distanceBody") ) { outValue = distanceBody_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_SweepDistance_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ZPP_SweepDistance_obj_sStaticStorageInfo = 0;
#endif

static void ZPP_SweepDistance_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_SweepDistance_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_SweepDistance_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_SweepDistance_obj::__mClass,"__mClass");
};

#endif

hx::Class ZPP_SweepDistance_obj::__mClass;

static ::String ZPP_SweepDistance_obj_sStaticFields[] = {
	HX_HCSTRING("dynamicSweep","\xed","\x59","\xb4","\x3c"),
	HX_HCSTRING("staticSweep","\x5e","\xf2","\xd6","\x9a"),
	HX_HCSTRING("distanceBody","\x77","\x78","\xf0","\xf3"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	::String(null())
};

void ZPP_SweepDistance_obj::__register()
{
	hx::Object *dummy = new ZPP_SweepDistance_obj;
	ZPP_SweepDistance_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_SweepDistance","\x4b","\xa8","\xcb","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_SweepDistance_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ZPP_SweepDistance_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_SweepDistance_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_SweepDistance_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_SweepDistance_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_SweepDistance_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_SweepDistance_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace zpp_nape
} // end namespace geom
