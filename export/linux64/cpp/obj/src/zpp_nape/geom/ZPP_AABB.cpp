// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_174_new,"zpp_nape.geom.ZPP_AABB","new",0x3f8704a8,"zpp_nape.geom.ZPP_AABB.new","zpp_nape/geom/AABB.hx",174,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_181_validate,"zpp_nape.geom.ZPP_AABB","validate",0x2546174e,"zpp_nape.geom.ZPP_AABB.validate","zpp_nape/geom/AABB.hx",181,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_188_invalidate,"zpp_nape.geom.ZPP_AABB","invalidate",0x39b57e33,"zpp_nape.geom.ZPP_AABB.invalidate","zpp_nape/geom/AABB.hx",188,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_193_wrapper,"zpp_nape.geom.ZPP_AABB","wrapper",0xad1bcd9b,"zpp_nape.geom.ZPP_AABB.wrapper","zpp_nape/geom/AABB.hx",193,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_244_alloc,"zpp_nape.geom.ZPP_AABB","alloc",0xfb327abd,"zpp_nape.geom.ZPP_AABB.alloc","zpp_nape/geom/AABB.hx",244,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_247_free,"zpp_nape.geom.ZPP_AABB","free",0x515d2764,"zpp_nape.geom.ZPP_AABB.free","zpp_nape/geom/AABB.hx",247,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_322_copy,"zpp_nape.geom.ZPP_AABB","copy",0x4f5f466d,"zpp_nape.geom.ZPP_AABB.copy","zpp_nape/geom/AABB.hx",322,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_327_width,"zpp_nape.geom.ZPP_AABB","width",0xa4018c4e,"zpp_nape.geom.ZPP_AABB.width","zpp_nape/geom/AABB.hx",327,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_332_height,"zpp_nape.geom.ZPP_AABB","height",0x93a8b09f,"zpp_nape.geom.ZPP_AABB.height","zpp_nape/geom/AABB.hx",332,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_337_perimeter,"zpp_nape.geom.ZPP_AABB","perimeter",0x95f07b65,"zpp_nape.geom.ZPP_AABB.perimeter","zpp_nape/geom/AABB.hx",337,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_342_getmin,"zpp_nape.geom.ZPP_AABB","getmin",0x34973b74,"zpp_nape.geom.ZPP_AABB.getmin","zpp_nape/geom/AABB.hx",342,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_356_dom_min,"zpp_nape.geom.ZPP_AABB","dom_min",0x4181fa5d,"zpp_nape.geom.ZPP_AABB.dom_min","zpp_nape/geom/AABB.hx",356,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_380_mod_min,"zpp_nape.geom.ZPP_AABB","mod_min",0x8927ee9d,"zpp_nape.geom.ZPP_AABB.mod_min","zpp_nape/geom/AABB.hx",380,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_407_getmax,"zpp_nape.geom.ZPP_AABB","getmax",0x34973486,"zpp_nape.geom.ZPP_AABB.getmax","zpp_nape/geom/AABB.hx",407,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_421_dom_max,"zpp_nape.geom.ZPP_AABB","dom_max",0x4181f36f,"zpp_nape.geom.ZPP_AABB.dom_max","zpp_nape/geom/AABB.hx",421,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_445_mod_max,"zpp_nape.geom.ZPP_AABB","mod_max",0x8927e7af,"zpp_nape.geom.ZPP_AABB.mod_max","zpp_nape/geom/AABB.hx",445,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_472_intersectX,"zpp_nape.geom.ZPP_AABB","intersectX",0x96772751,"zpp_nape.geom.ZPP_AABB.intersectX","zpp_nape/geom/AABB.hx",472,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_477_intersectY,"zpp_nape.geom.ZPP_AABB","intersectY",0x96772752,"zpp_nape.geom.ZPP_AABB.intersectY","zpp_nape/geom/AABB.hx",477,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_482_intersect,"zpp_nape.geom.ZPP_AABB","intersect",0x78109b27,"zpp_nape.geom.ZPP_AABB.intersect","zpp_nape/geom/AABB.hx",482,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_486_combine,"zpp_nape.geom.ZPP_AABB","combine",0x19e522c7,"zpp_nape.geom.ZPP_AABB.combine","zpp_nape/geom/AABB.hx",486,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_495_contains,"zpp_nape.geom.ZPP_AABB","contains",0x4cdda0d7,"zpp_nape.geom.ZPP_AABB.contains","zpp_nape/geom/AABB.hx",495,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_500_containsPoint,"zpp_nape.geom.ZPP_AABB","containsPoint",0x5c3617f9,"zpp_nape.geom.ZPP_AABB.containsPoint","zpp_nape/geom/AABB.hx",500,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_504_setCombine,"zpp_nape.geom.ZPP_AABB","setCombine",0x7f98b3b5,"zpp_nape.geom.ZPP_AABB.setCombine","zpp_nape/geom/AABB.hx",504,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_512_setExpand,"zpp_nape.geom.ZPP_AABB","setExpand",0x59b5fde4,"zpp_nape.geom.ZPP_AABB.setExpand","zpp_nape/geom/AABB.hx",512,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_520_setExpandPoint,"zpp_nape.geom.ZPP_AABB","setExpandPoint",0x23904bcc,"zpp_nape.geom.ZPP_AABB.setExpandPoint","zpp_nape/geom/AABB.hx",520,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_527_toString,"zpp_nape.geom.ZPP_AABB","toString",0x58d11764,"zpp_nape.geom.ZPP_AABB.toString","zpp_nape/geom/AABB.hx",527,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_258_get,"zpp_nape.geom.ZPP_AABB","get",0x3f81b4de,"zpp_nape.geom.ZPP_AABB.get","zpp_nape/geom/AABB.hx",258,0xbecf4f8d)
HX_DEFINE_STACK_FRAME(_hx_pos_204469051f5e8886_218_boot,"zpp_nape.geom.ZPP_AABB","boot",0x4eb60eea,"zpp_nape.geom.ZPP_AABB.boot","zpp_nape/geom/AABB.hx",218,0xbecf4f8d)
namespace zpp_nape{
namespace geom{

void ZPP_AABB_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_174_new)
            	HX_STACK_THIS(this)
HXLINE( 406)		this->wrap_max = null();
HXLINE( 405)		this->maxy = ((Float)0.0);
HXLINE( 404)		this->maxx = ((Float)0.0);
HXLINE( 341)		this->wrap_min = null();
HXLINE( 340)		this->miny = ((Float)0.0);
HXLINE( 339)		this->minx = ((Float)0.0);
HXLINE( 217)		this->next = null();
HXLINE( 192)		this->outer = null();
HXLINE( 177)		this->_immutable = false;
HXLINE( 176)		this->_validate = null();
HXLINE( 175)		this->_invalidate = null();
            	}

Dynamic ZPP_AABB_obj::__CreateEmpty() { return new ZPP_AABB_obj; }

void *ZPP_AABB_obj::_hx_vtable = 0;

Dynamic ZPP_AABB_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_AABB_obj > _hx_result = new ZPP_AABB_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_AABB_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e1d5e92;
}

void ZPP_AABB_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_181_validate)
            	HX_STACK_THIS(this)
HXLINE( 181)		if (hx::IsNotNull( this->_validate )) {
HXLINE( 182)			this->_validate();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,validate,(void))

void ZPP_AABB_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_188_invalidate)
            	HX_STACK_THIS(this)
HXLINE( 188)		if (hx::IsNotNull( this->_invalidate )) {
HXLINE( 189)			this->_invalidate(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,invalidate,(void))

 ::nape::geom::AABB ZPP_AABB_obj::wrapper(){
            	HX_GC_STACKFRAME(&_hx_pos_204469051f5e8886_193_wrapper)
            	HX_STACK_THIS(this)
HXLINE( 194)		if (hx::IsNull( this->outer )) {
HXLINE( 195)			this->outer =  ::nape::geom::AABB_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 196)			{
HXLINE( 197)				HX_VARI(  ::zpp_nape::geom::ZPP_AABB,o) = this->outer->zpp_inner;
HXLINE( 206)				{
HXLINE( 206)					if (hx::IsNotNull( o->outer )) {
HXLINE( 206)						o->outer->zpp_inner = null();
HXDLIN( 206)						o->outer = null();
            					}
HXDLIN( 206)					o->wrap_min = (o->wrap_max = null());
HXDLIN( 206)					o->_invalidate = null();
HXDLIN( 206)					o->_validate = null();
            				}
HXLINE( 207)				o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE( 208)				::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
            			}
HXLINE( 213)			this->outer->zpp_inner = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 215)		return this->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,wrapper,return )

void ZPP_AABB_obj::alloc(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_244_alloc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,alloc,(void))

void ZPP_AABB_obj::free(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_247_free)
            	HX_STACK_THIS(this)
HXLINE( 248)		if (hx::IsNotNull( this->outer )) {
HXLINE( 249)			this->outer->zpp_inner = null();
HXLINE( 250)			this->outer = null();
            		}
HXLINE( 252)		this->wrap_min = (this->wrap_max = null());
HXLINE( 253)		this->_invalidate = null();
HXLINE( 254)		this->_validate = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,free,(void))

 ::zpp_nape::geom::ZPP_AABB ZPP_AABB_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_204469051f5e8886_322_copy)
            	HX_STACK_THIS(this)
HXLINE( 322)		HX_VAR(  ::zpp_nape::geom::ZPP_AABB,ret);
HXDLIN( 322)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 322)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 322)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 322)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 322)			ret->next = null();
            		}
HXDLIN( 322)		{
HXLINE( 322)			ret->minx = this->minx;
HXDLIN( 322)			ret->miny = this->miny;
            		}
HXDLIN( 322)		{
HXLINE( 322)			ret->maxx = this->maxx;
HXDLIN( 322)			ret->maxy = this->maxy;
            		}
HXDLIN( 322)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,copy,return )

Float ZPP_AABB_obj::width(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_327_width)
            	HX_STACK_THIS(this)
HXLINE( 327)		return (this->maxx - this->minx);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,width,return )

Float ZPP_AABB_obj::height(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_332_height)
            	HX_STACK_THIS(this)
HXLINE( 332)		return (this->maxy - this->miny);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,height,return )

Float ZPP_AABB_obj::perimeter(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_337_perimeter)
            	HX_STACK_THIS(this)
HXLINE( 337)		return (((this->maxx - this->minx) + (this->maxy - this->miny)) * (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,perimeter,return )

 ::nape::geom::Vec2 ZPP_AABB_obj::getmin(){
            	HX_GC_STACKFRAME(&_hx_pos_204469051f5e8886_342_getmin)
            	HX_STACK_THIS(this)
HXLINE( 343)		if (hx::IsNull( this->wrap_min )) {
HXLINE( 344)			HX_VARI( Float,x) = this->minx;
HXDLIN( 344)			HX_VARI( Float,y) = this->miny;
HXDLIN( 344)			HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 344)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 344)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 344)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 344)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 344)				ret->zpp_pool = null();
            			}
HXDLIN( 344)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 344)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 344)				{
HXLINE( 344)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 344)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 344)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 344)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 344)						ret1->next = null();
            					}
HXDLIN( 344)					ret1->weak = false;
            				}
HXDLIN( 344)				ret1->_immutable = false;
HXDLIN( 344)				{
HXLINE( 344)					ret1->x = x;
HXDLIN( 344)					ret1->y = y;
            				}
HXDLIN( 344)				ret->zpp_inner = ret1;
HXDLIN( 344)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE( 344)				bool _hx_tmp;
HXDLIN( 344)				{
HXLINE( 344)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 344)					if (hx::IsNotNull( _this->_validate )) {
HXLINE( 344)						_this->_validate();
            					}
            				}
HXDLIN( 344)				if ((ret->zpp_inner->x == x)) {
HXLINE( 344)					{
HXLINE( 344)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 344)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 344)							_this1->_validate();
            						}
            					}
HXDLIN( 344)					_hx_tmp = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE( 344)					_hx_tmp = false;
            				}
HXDLIN( 344)				if (!(_hx_tmp)) {
HXLINE( 344)					{
HXLINE( 344)						ret->zpp_inner->x = x;
HXDLIN( 344)						ret->zpp_inner->y = y;
            					}
HXDLIN( 344)					{
HXLINE( 344)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 344)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 344)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN( 344)			ret->zpp_inner->weak = false;
HXDLIN( 344)			this->wrap_min = ret;
HXLINE( 345)			this->wrap_min->zpp_inner->_inuse = true;
HXLINE( 346)			if (this->_immutable) {
HXLINE( 347)				this->wrap_min->zpp_inner->_immutable = true;
            			}
            			else {
HXLINE( 350)				this->wrap_min->zpp_inner->_invalidate = this->mod_min_dyn();
            			}
HXLINE( 352)			this->wrap_min->zpp_inner->_validate = this->dom_min_dyn();
            		}
HXLINE( 354)		return this->wrap_min;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,getmin,return )

void ZPP_AABB_obj::dom_min(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_356_dom_min)
            	HX_STACK_THIS(this)
HXLINE( 357)		if (hx::IsNotNull( this->_validate )) {
HXLINE( 357)			this->_validate();
            		}
HXLINE( 358)		{
HXLINE( 359)			this->wrap_min->zpp_inner->x = this->minx;
HXLINE( 360)			this->wrap_min->zpp_inner->y = this->miny;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,dom_min,(void))

void ZPP_AABB_obj::mod_min( ::zpp_nape::geom::ZPP_Vec2 min){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_380_mod_min)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(min,"min")
HXLINE( 380)		bool _hx_tmp;
HXDLIN( 380)		if ((min->x == this->minx)) {
HXLINE( 380)			_hx_tmp = (min->y != this->miny);
            		}
            		else {
HXLINE( 380)			_hx_tmp = true;
            		}
HXDLIN( 380)		if (_hx_tmp) {
HXLINE( 381)			{
HXLINE( 382)				this->minx = min->x;
HXLINE( 383)				this->miny = min->y;
            			}
HXLINE( 401)			if (hx::IsNotNull( this->_invalidate )) {
HXLINE( 401)				this->_invalidate(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,mod_min,(void))

 ::nape::geom::Vec2 ZPP_AABB_obj::getmax(){
            	HX_GC_STACKFRAME(&_hx_pos_204469051f5e8886_407_getmax)
            	HX_STACK_THIS(this)
HXLINE( 408)		if (hx::IsNull( this->wrap_max )) {
HXLINE( 409)			HX_VARI( Float,x) = this->maxx;
HXDLIN( 409)			HX_VARI( Float,y) = this->maxy;
HXDLIN( 409)			HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 409)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 409)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 409)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 409)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 409)				ret->zpp_pool = null();
            			}
HXDLIN( 409)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 409)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 409)				{
HXLINE( 409)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 409)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 409)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 409)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 409)						ret1->next = null();
            					}
HXDLIN( 409)					ret1->weak = false;
            				}
HXDLIN( 409)				ret1->_immutable = false;
HXDLIN( 409)				{
HXLINE( 409)					ret1->x = x;
HXDLIN( 409)					ret1->y = y;
            				}
HXDLIN( 409)				ret->zpp_inner = ret1;
HXDLIN( 409)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE( 409)				bool _hx_tmp;
HXDLIN( 409)				{
HXLINE( 409)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 409)					if (hx::IsNotNull( _this->_validate )) {
HXLINE( 409)						_this->_validate();
            					}
            				}
HXDLIN( 409)				if ((ret->zpp_inner->x == x)) {
HXLINE( 409)					{
HXLINE( 409)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 409)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 409)							_this1->_validate();
            						}
            					}
HXDLIN( 409)					_hx_tmp = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE( 409)					_hx_tmp = false;
            				}
HXDLIN( 409)				if (!(_hx_tmp)) {
HXLINE( 409)					{
HXLINE( 409)						ret->zpp_inner->x = x;
HXDLIN( 409)						ret->zpp_inner->y = y;
            					}
HXDLIN( 409)					{
HXLINE( 409)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 409)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 409)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN( 409)			ret->zpp_inner->weak = false;
HXDLIN( 409)			this->wrap_max = ret;
HXLINE( 410)			this->wrap_max->zpp_inner->_inuse = true;
HXLINE( 411)			if (this->_immutable) {
HXLINE( 412)				this->wrap_max->zpp_inner->_immutable = true;
            			}
            			else {
HXLINE( 415)				this->wrap_max->zpp_inner->_invalidate = this->mod_max_dyn();
            			}
HXLINE( 417)			this->wrap_max->zpp_inner->_validate = this->dom_max_dyn();
            		}
HXLINE( 419)		return this->wrap_max;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,getmax,return )

void ZPP_AABB_obj::dom_max(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_421_dom_max)
            	HX_STACK_THIS(this)
HXLINE( 422)		if (hx::IsNotNull( this->_validate )) {
HXLINE( 422)			this->_validate();
            		}
HXLINE( 423)		{
HXLINE( 424)			this->wrap_max->zpp_inner->x = this->maxx;
HXLINE( 425)			this->wrap_max->zpp_inner->y = this->maxy;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,dom_max,(void))

void ZPP_AABB_obj::mod_max( ::zpp_nape::geom::ZPP_Vec2 max){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_445_mod_max)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(max,"max")
HXLINE( 445)		bool _hx_tmp;
HXDLIN( 445)		if ((max->x == this->maxx)) {
HXLINE( 445)			_hx_tmp = (max->y != this->maxy);
            		}
            		else {
HXLINE( 445)			_hx_tmp = true;
            		}
HXDLIN( 445)		if (_hx_tmp) {
HXLINE( 446)			{
HXLINE( 447)				this->maxx = max->x;
HXLINE( 448)				this->maxy = max->y;
            			}
HXLINE( 466)			if (hx::IsNotNull( this->_invalidate )) {
HXLINE( 466)				this->_invalidate(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,mod_max,(void))

bool ZPP_AABB_obj::intersectX( ::zpp_nape::geom::ZPP_AABB x){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_472_intersectX)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 472)		bool _hx_tmp;
HXDLIN( 472)		if (!((x->minx > this->maxx))) {
HXLINE( 472)			_hx_tmp = (this->minx > x->maxx);
            		}
            		else {
HXLINE( 472)			_hx_tmp = true;
            		}
HXDLIN( 472)		return !(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,intersectX,return )

bool ZPP_AABB_obj::intersectY( ::zpp_nape::geom::ZPP_AABB x){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_477_intersectY)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 477)		bool _hx_tmp;
HXDLIN( 477)		if (!((x->miny > this->maxy))) {
HXLINE( 477)			_hx_tmp = (this->miny > x->maxy);
            		}
            		else {
HXLINE( 477)			_hx_tmp = true;
            		}
HXDLIN( 477)		return !(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,intersectY,return )

bool ZPP_AABB_obj::intersect( ::zpp_nape::geom::ZPP_AABB x){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_482_intersect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 482)		bool _hx_tmp;
HXDLIN( 482)		bool _hx_tmp1;
HXDLIN( 482)		if ((x->miny <= this->maxy)) {
HXLINE( 482)			_hx_tmp1 = (this->miny <= x->maxy);
            		}
            		else {
HXLINE( 482)			_hx_tmp1 = false;
            		}
HXDLIN( 482)		if (_hx_tmp1) {
HXLINE( 482)			_hx_tmp = (x->minx <= this->maxx);
            		}
            		else {
HXLINE( 482)			_hx_tmp = false;
            		}
HXDLIN( 482)		if (_hx_tmp) {
HXLINE( 482)			return (this->minx <= x->maxx);
            		}
            		else {
HXLINE( 482)			return false;
            		}
HXDLIN( 482)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,intersect,return )

void ZPP_AABB_obj::combine( ::zpp_nape::geom::ZPP_AABB x){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_486_combine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 487)		if ((x->minx < this->minx)) {
HXLINE( 487)			this->minx = x->minx;
            		}
HXLINE( 488)		if ((x->maxx > this->maxx)) {
HXLINE( 488)			this->maxx = x->maxx;
            		}
HXLINE( 489)		if ((x->miny < this->miny)) {
HXLINE( 489)			this->miny = x->miny;
            		}
HXLINE( 490)		if ((x->maxy > this->maxy)) {
HXLINE( 490)			this->maxy = x->maxy;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,combine,(void))

bool ZPP_AABB_obj::contains( ::zpp_nape::geom::ZPP_AABB x){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_495_contains)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 495)		bool _hx_tmp;
HXDLIN( 495)		bool _hx_tmp1;
HXDLIN( 495)		if ((x->minx >= this->minx)) {
HXLINE( 495)			_hx_tmp1 = (x->miny >= this->miny);
            		}
            		else {
HXLINE( 495)			_hx_tmp1 = false;
            		}
HXDLIN( 495)		if (_hx_tmp1) {
HXLINE( 495)			_hx_tmp = (x->maxx <= this->maxx);
            		}
            		else {
HXLINE( 495)			_hx_tmp = false;
            		}
HXDLIN( 495)		if (_hx_tmp) {
HXLINE( 495)			return (x->maxy <= this->maxy);
            		}
            		else {
HXLINE( 495)			return false;
            		}
HXDLIN( 495)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,contains,return )

bool ZPP_AABB_obj::containsPoint( ::zpp_nape::geom::ZPP_Vec2 v){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_500_containsPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 500)		bool _hx_tmp;
HXDLIN( 500)		bool _hx_tmp1;
HXDLIN( 500)		if ((v->x >= this->minx)) {
HXLINE( 500)			_hx_tmp1 = (v->x <= this->maxx);
            		}
            		else {
HXLINE( 500)			_hx_tmp1 = false;
            		}
HXDLIN( 500)		if (_hx_tmp1) {
HXLINE( 500)			_hx_tmp = (v->y >= this->miny);
            		}
            		else {
HXLINE( 500)			_hx_tmp = false;
            		}
HXDLIN( 500)		if (_hx_tmp) {
HXLINE( 500)			return (v->y <= this->maxy);
            		}
            		else {
HXLINE( 500)			return false;
            		}
HXDLIN( 500)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_AABB_obj,containsPoint,return )

void ZPP_AABB_obj::setCombine( ::zpp_nape::geom::ZPP_AABB a, ::zpp_nape::geom::ZPP_AABB b){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_504_setCombine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 505)		Float _hx_tmp;
HXDLIN( 505)		if ((a->minx < b->minx)) {
HXLINE( 505)			_hx_tmp = a->minx;
            		}
            		else {
HXLINE( 505)			_hx_tmp = b->minx;
            		}
HXDLIN( 505)		this->minx = _hx_tmp;
HXLINE( 506)		Float _hx_tmp1;
HXDLIN( 506)		if ((a->miny < b->miny)) {
HXLINE( 506)			_hx_tmp1 = a->miny;
            		}
            		else {
HXLINE( 506)			_hx_tmp1 = b->miny;
            		}
HXDLIN( 506)		this->miny = _hx_tmp1;
HXLINE( 507)		Float _hx_tmp2;
HXDLIN( 507)		if ((a->maxx > b->maxx)) {
HXLINE( 507)			_hx_tmp2 = a->maxx;
            		}
            		else {
HXLINE( 507)			_hx_tmp2 = b->maxx;
            		}
HXDLIN( 507)		this->maxx = _hx_tmp2;
HXLINE( 508)		Float _hx_tmp3;
HXDLIN( 508)		if ((a->maxy > b->maxy)) {
HXLINE( 508)			_hx_tmp3 = a->maxy;
            		}
            		else {
HXLINE( 508)			_hx_tmp3 = b->maxy;
            		}
HXDLIN( 508)		this->maxy = _hx_tmp3;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_AABB_obj,setCombine,(void))

void ZPP_AABB_obj::setExpand( ::zpp_nape::geom::ZPP_AABB a,Float fatten){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_512_setExpand)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(fatten,"fatten")
HXLINE( 513)		this->minx = (a->minx - fatten);
HXLINE( 514)		this->miny = (a->miny - fatten);
HXLINE( 515)		this->maxx = (a->maxx + fatten);
HXLINE( 516)		this->maxy = (a->maxy + fatten);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_AABB_obj,setExpand,(void))

void ZPP_AABB_obj::setExpandPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_520_setExpandPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 521)		if ((x < this->minx)) {
HXLINE( 521)			this->minx = x;
            		}
HXLINE( 522)		if ((x > this->maxx)) {
HXLINE( 522)			this->maxx = x;
            		}
HXLINE( 523)		if ((y < this->miny)) {
HXLINE( 523)			this->miny = y;
            		}
HXLINE( 524)		if ((y > this->maxy)) {
HXLINE( 524)			this->maxy = y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_AABB_obj,setExpandPoint,(void))

::String ZPP_AABB_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_527_toString)
            	HX_STACK_THIS(this)
HXLINE( 527)		return ((((((((HX_("{ x: ",f9,6e,cb,e7) + this->minx) + HX_(" y: ",3f,d7,82,15)) + this->miny) + HX_(" w: ",bd,52,81,15)) + (this->maxx - this->minx)) + HX_(" h: ",ee,f0,75,15)) + (this->maxy - this->miny)) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_AABB_obj,toString,return )

 ::zpp_nape::geom::ZPP_AABB ZPP_AABB_obj::zpp_pool;

 ::zpp_nape::geom::ZPP_AABB ZPP_AABB_obj::get(Float minx,Float miny,Float maxx,Float maxy){
            	HX_GC_STACKFRAME(&_hx_pos_204469051f5e8886_258_get)
            	HX_STACK_ARG(minx,"minx")
            	HX_STACK_ARG(miny,"miny")
            	HX_STACK_ARG(maxx,"maxx")
            	HX_STACK_ARG(maxy,"maxy")
HXLINE( 259)		HX_VAR(  ::zpp_nape::geom::ZPP_AABB,ret);
HXLINE( 261)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 262)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 268)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXLINE( 269)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXLINE( 270)			ret->next = null();
            		}
HXLINE( 277)		{
HXLINE( 278)			ret->minx = minx;
HXLINE( 279)			ret->miny = miny;
            		}
HXLINE( 297)		{
HXLINE( 298)			ret->maxx = maxx;
HXLINE( 299)			ret->maxy = maxy;
            		}
HXLINE( 317)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_AABB_obj,get,return )


hx::ObjectPtr< ZPP_AABB_obj > ZPP_AABB_obj::__new() {
	hx::ObjectPtr< ZPP_AABB_obj > __this = new ZPP_AABB_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ZPP_AABB_obj > ZPP_AABB_obj::__alloc(hx::Ctx *_hx_ctx) {
	ZPP_AABB_obj *__this = (ZPP_AABB_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ZPP_AABB_obj), true, "zpp_nape.geom.ZPP_AABB"));
	*(void **)__this = ZPP_AABB_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ZPP_AABB_obj::ZPP_AABB_obj()
{
}

void ZPP_AABB_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_AABB);
	HX_MARK_MEMBER_NAME(_invalidate,"_invalidate");
	HX_MARK_MEMBER_NAME(_validate,"_validate");
	HX_MARK_MEMBER_NAME(_immutable,"_immutable");
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(minx,"minx");
	HX_MARK_MEMBER_NAME(miny,"miny");
	HX_MARK_MEMBER_NAME(wrap_min,"wrap_min");
	HX_MARK_MEMBER_NAME(maxx,"maxx");
	HX_MARK_MEMBER_NAME(maxy,"maxy");
	HX_MARK_MEMBER_NAME(wrap_max,"wrap_max");
	HX_MARK_END_CLASS();
}

void ZPP_AABB_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_invalidate,"_invalidate");
	HX_VISIT_MEMBER_NAME(_validate,"_validate");
	HX_VISIT_MEMBER_NAME(_immutable,"_immutable");
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(minx,"minx");
	HX_VISIT_MEMBER_NAME(miny,"miny");
	HX_VISIT_MEMBER_NAME(wrap_min,"wrap_min");
	HX_VISIT_MEMBER_NAME(maxx,"maxx");
	HX_VISIT_MEMBER_NAME(maxy,"maxy");
	HX_VISIT_MEMBER_NAME(wrap_max,"wrap_max");
}

hx::Val ZPP_AABB_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"minx") ) { return hx::Val( minx); }
		if (HX_FIELD_EQ(inName,"miny") ) { return hx::Val( miny); }
		if (HX_FIELD_EQ(inName,"maxx") ) { return hx::Val( maxx); }
		if (HX_FIELD_EQ(inName,"maxy") ) { return hx::Val( maxy); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return hx::Val( outer); }
		if (HX_FIELD_EQ(inName,"alloc") ) { return hx::Val( alloc_dyn()); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height_dyn()); }
		if (HX_FIELD_EQ(inName,"getmin") ) { return hx::Val( getmin_dyn()); }
		if (HX_FIELD_EQ(inName,"getmax") ) { return hx::Val( getmax_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"wrapper") ) { return hx::Val( wrapper_dyn()); }
		if (HX_FIELD_EQ(inName,"dom_min") ) { return hx::Val( dom_min_dyn()); }
		if (HX_FIELD_EQ(inName,"mod_min") ) { return hx::Val( mod_min_dyn()); }
		if (HX_FIELD_EQ(inName,"dom_max") ) { return hx::Val( dom_max_dyn()); }
		if (HX_FIELD_EQ(inName,"mod_max") ) { return hx::Val( mod_max_dyn()); }
		if (HX_FIELD_EQ(inName,"combine") ) { return hx::Val( combine_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn()); }
		if (HX_FIELD_EQ(inName,"wrap_min") ) { return hx::Val( wrap_min); }
		if (HX_FIELD_EQ(inName,"wrap_max") ) { return hx::Val( wrap_max); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_validate") ) { return hx::Val( _validate); }
		if (HX_FIELD_EQ(inName,"perimeter") ) { return hx::Val( perimeter_dyn()); }
		if (HX_FIELD_EQ(inName,"intersect") ) { return hx::Val( intersect_dyn()); }
		if (HX_FIELD_EQ(inName,"setExpand") ) { return hx::Val( setExpand_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_immutable") ) { return hx::Val( _immutable); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn()); }
		if (HX_FIELD_EQ(inName,"intersectX") ) { return hx::Val( intersectX_dyn()); }
		if (HX_FIELD_EQ(inName,"intersectY") ) { return hx::Val( intersectY_dyn()); }
		if (HX_FIELD_EQ(inName,"setCombine") ) { return hx::Val( setCombine_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_invalidate") ) { return hx::Val( _invalidate); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setExpandPoint") ) { return hx::Val( setExpandPoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ZPP_AABB_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { outValue = zpp_pool; return true; }
	}
	return false;
}

hx::Val ZPP_AABB_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minx") ) { minx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"miny") ) { miny=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxx") ) { maxx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxy") ) { maxy=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast<  ::nape::geom::AABB >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wrap_min") ) { wrap_min=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_max") ) { wrap_max=inValue.Cast<  ::nape::geom::Vec2 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_validate") ) { _validate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_immutable") ) { _immutable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_invalidate") ) { _invalidate=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ZPP_AABB_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"zpp_pool") ) { zpp_pool=ioValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return true; }
	}
	return false;
}

void ZPP_AABB_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_immutable","\x03","\xa4","\x69","\xc2"));
	outFields->push(HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"));
	outFields->push(HX_HCSTRING("next","\xf3","\x84","\x02","\x49"));
	outFields->push(HX_HCSTRING("minx","\xa6","\x4e","\x5c","\x48"));
	outFields->push(HX_HCSTRING("miny","\xa7","\x4e","\x5c","\x48"));
	outFields->push(HX_HCSTRING("wrap_min","\x5d","\x3d","\x9f","\x9f"));
	outFields->push(HX_HCSTRING("maxx","\x54","\x45","\x56","\x48"));
	outFields->push(HX_HCSTRING("maxy","\x55","\x45","\x56","\x48"));
	outFields->push(HX_HCSTRING("wrap_max","\x6f","\x36","\x9f","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ZPP_AABB_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_AABB_obj,_invalidate),HX_HCSTRING("_invalidate","\x9a","\xe6","\xb3","\x59")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_AABB_obj,_validate),HX_HCSTRING("_validate","\xf5","\xc7","\x79","\x4c")},
	{hx::fsBool,(int)offsetof(ZPP_AABB_obj,_immutable),HX_HCSTRING("_immutable","\x03","\xa4","\x69","\xc2")},
	{hx::fsObject /*::nape::geom::AABB*/ ,(int)offsetof(ZPP_AABB_obj,outer),HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37")},
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(int)offsetof(ZPP_AABB_obj,next),HX_HCSTRING("next","\xf3","\x84","\x02","\x49")},
	{hx::fsFloat,(int)offsetof(ZPP_AABB_obj,minx),HX_HCSTRING("minx","\xa6","\x4e","\x5c","\x48")},
	{hx::fsFloat,(int)offsetof(ZPP_AABB_obj,miny),HX_HCSTRING("miny","\xa7","\x4e","\x5c","\x48")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_AABB_obj,wrap_min),HX_HCSTRING("wrap_min","\x5d","\x3d","\x9f","\x9f")},
	{hx::fsFloat,(int)offsetof(ZPP_AABB_obj,maxx),HX_HCSTRING("maxx","\x54","\x45","\x56","\x48")},
	{hx::fsFloat,(int)offsetof(ZPP_AABB_obj,maxy),HX_HCSTRING("maxy","\x55","\x45","\x56","\x48")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_AABB_obj,wrap_max),HX_HCSTRING("wrap_max","\x6f","\x36","\x9f","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ZPP_AABB_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(void *) &ZPP_AABB_obj::zpp_pool,HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ZPP_AABB_obj_sMemberFields[] = {
	HX_HCSTRING("_invalidate","\x9a","\xe6","\xb3","\x59"),
	HX_HCSTRING("_validate","\xf5","\xc7","\x79","\x4c"),
	HX_HCSTRING("_immutable","\x03","\xa4","\x69","\xc2"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("outer","\x7b","\xb8","\x28","\x37"),
	HX_HCSTRING("wrapper","\x53","\xd5","\x64","\x0d"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("perimeter","\x1d","\xe1","\x54","\x60"),
	HX_HCSTRING("minx","\xa6","\x4e","\x5c","\x48"),
	HX_HCSTRING("miny","\xa7","\x4e","\x5c","\x48"),
	HX_HCSTRING("wrap_min","\x5d","\x3d","\x9f","\x9f"),
	HX_HCSTRING("getmin","\xbc","\x92","\x3a","\xa3"),
	HX_HCSTRING("dom_min","\x15","\x02","\xcb","\xa1"),
	HX_HCSTRING("mod_min","\x55","\xf6","\x70","\xe9"),
	HX_HCSTRING("maxx","\x54","\x45","\x56","\x48"),
	HX_HCSTRING("maxy","\x55","\x45","\x56","\x48"),
	HX_HCSTRING("wrap_max","\x6f","\x36","\x9f","\x9f"),
	HX_HCSTRING("getmax","\xce","\x8b","\x3a","\xa3"),
	HX_HCSTRING("dom_max","\x27","\xfb","\xca","\xa1"),
	HX_HCSTRING("mod_max","\x67","\xef","\x70","\xe9"),
	HX_HCSTRING("intersectX","\x99","\xc2","\xeb","\xe3"),
	HX_HCSTRING("intersectY","\x9a","\xc2","\xeb","\xe3"),
	HX_HCSTRING("intersect","\xdf","\x00","\x75","\x42"),
	HX_HCSTRING("combine","\x7f","\x2a","\x2e","\x7a"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("containsPoint","\xb1","\xb9","\xeb","\x92"),
	HX_HCSTRING("setCombine","\xfd","\x4e","\x0d","\xcd"),
	HX_HCSTRING("setExpand","\x9c","\x63","\x1a","\x24"),
	HX_HCSTRING("setExpandPoint","\x14","\x2b","\xc8","\xcb"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ZPP_AABB_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_AABB_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_AABB_obj::zpp_pool,"zpp_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_AABB_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_AABB_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_AABB_obj::zpp_pool,"zpp_pool");
};

#endif

hx::Class ZPP_AABB_obj::__mClass;

static ::String ZPP_AABB_obj_sStaticFields[] = {
	HX_HCSTRING("zpp_pool","\x81","\x5d","\xd4","\x38"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	::String(null())
};

void ZPP_AABB_obj::__register()
{
	hx::Object *dummy = new ZPP_AABB_obj;
	ZPP_AABB_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_AABB","\xb6","\xd0","\xb5","\xfe");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_AABB_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_AABB_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_AABB_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_AABB_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ZPP_AABB_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ZPP_AABB_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_AABB_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_AABB_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_AABB_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_AABB_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_204469051f5e8886_218_boot)
HXLINE( 218)		zpp_pool = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
