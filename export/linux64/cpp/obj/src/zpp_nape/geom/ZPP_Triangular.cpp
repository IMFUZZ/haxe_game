// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionPair
#include <zpp_nape/geom/ZPP_PartitionPair.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionedPoly
#include <zpp_nape/geom/ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Triangular
#include <zpp_nape/geom/ZPP_Triangular.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPList_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPNode_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionPair
#include <zpp_nape/util/ZPP_Set_ZPP_PartitionPair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_616_lt,"zpp_nape.geom.ZPP_Triangular","lt",0xe312b489,"zpp_nape.geom.ZPP_Triangular.lt","zpp_nape/geom/Triangular.hx",616,0x53295a96)
HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_619_right_turn,"zpp_nape.geom.ZPP_Triangular","right_turn",0xa0f83d01,"zpp_nape.geom.ZPP_Triangular.right_turn","zpp_nape/geom/Triangular.hx",619,0x53295a96)
HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_636_delaunay,"zpp_nape.geom.ZPP_Triangular","delaunay",0xf1cbbb88,"zpp_nape.geom.ZPP_Triangular.delaunay","zpp_nape/geom/Triangular.hx",636,0x53295a96)
HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_688_optimise,"zpp_nape.geom.ZPP_Triangular","optimise",0xf924d385,"zpp_nape.geom.ZPP_Triangular.optimise","zpp_nape/geom/Triangular.hx",688,0x53295a96)
HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_887_triangulate,"zpp_nape.geom.ZPP_Triangular","triangulate",0xd8dac70b,"zpp_nape.geom.ZPP_Triangular.triangulate","zpp_nape/geom/Triangular.hx",887,0x53295a96)
HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_634_boot,"zpp_nape.geom.ZPP_Triangular","boot",0xcdf01c73,"zpp_nape.geom.ZPP_Triangular.boot","zpp_nape/geom/Triangular.hx",634,0x53295a96)
HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_635_boot,"zpp_nape.geom.ZPP_Triangular","boot",0xcdf01c73,"zpp_nape.geom.ZPP_Triangular.boot","zpp_nape/geom/Triangular.hx",635,0x53295a96)
HX_DEFINE_STACK_FRAME(_hx_pos_dd9319c57122016f_687_boot,"zpp_nape.geom.ZPP_Triangular","boot",0xcdf01c73,"zpp_nape.geom.ZPP_Triangular.boot","zpp_nape/geom/Triangular.hx",687,0x53295a96)
namespace zpp_nape{
namespace geom{

void ZPP_Triangular_obj::__construct() { }

Dynamic ZPP_Triangular_obj::__CreateEmpty() { return new ZPP_Triangular_obj; }

void *ZPP_Triangular_obj::_hx_vtable = 0;

Dynamic ZPP_Triangular_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Triangular_obj > _hx_result = new ZPP_Triangular_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Triangular_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x70639b45;
}

bool ZPP_Triangular_obj::lt( ::zpp_nape::geom::ZPP_PartitionVertex p, ::zpp_nape::geom::ZPP_PartitionVertex q){
            	HX_STACKFRAME(&_hx_pos_dd9319c57122016f_616_lt)
            	HX_STACK_ARG(p,"p")
            	HX_STACK_ARG(q,"q")
HXLINE( 616)		if (!((p->y < q->y))) {
HXLINE( 616)			if ((p->y == q->y)) {
HXLINE( 616)				return (p->x < q->x);
            			}
            			else {
HXLINE( 616)				return false;
            			}
            		}
            		else {
HXLINE( 616)			return true;
            		}
HXDLIN( 616)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Triangular_obj,lt,return )

Float ZPP_Triangular_obj::right_turn( ::zpp_nape::geom::ZPP_PartitionVertex a, ::zpp_nape::geom::ZPP_PartitionVertex b, ::zpp_nape::geom::ZPP_PartitionVertex c){
            	HX_STACKFRAME(&_hx_pos_dd9319c57122016f_619_right_turn)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
HXLINE( 620)		HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 621)		HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 622)		{
HXLINE( 623)			ux = (c->x - b->x);
HXLINE( 624)			uy = (c->y - b->y);
            		}
HXLINE( 626)		HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 627)		HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 628)		{
HXLINE( 629)			vx = (b->x - a->x);
HXLINE( 630)			vy = (b->y - a->y);
            		}
HXLINE( 632)		return ((vy * ux) - (vx * uy));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ZPP_Triangular_obj,right_turn,return )

 ::zpp_nape::util::ZNPList_ZPP_PartitionVertex ZPP_Triangular_obj::queue;

 ::zpp_nape::util::ZNPList_ZPP_PartitionVertex ZPP_Triangular_obj::stack;

bool ZPP_Triangular_obj::delaunay( ::zpp_nape::geom::ZPP_PartitionVertex A, ::zpp_nape::geom::ZPP_PartitionVertex B, ::zpp_nape::geom::ZPP_PartitionVertex C, ::zpp_nape::geom::ZPP_PartitionVertex D){
            	HX_STACKFRAME(&_hx_pos_dd9319c57122016f_636_delaunay)
            	HX_STACK_ARG(A,"A")
            	HX_STACK_ARG(B,"B")
            	HX_STACK_ARG(C,"C")
            	HX_STACK_ARG(D,"D")
HXLINE( 637)		HX_VARI( Float,ux) = ((Float)0.0);
HXLINE( 638)		HX_VARI( Float,uy) = ((Float)0.0);
HXLINE( 639)		HX_VARI( Float,vx) = ((Float)0.0);
HXLINE( 640)		HX_VARI( Float,vy) = ((Float)0.0);
HXLINE( 641)		bool _hx_tmp;
HXDLIN( 641)		bool _hx_tmp1;
HXDLIN( 641)		bool _hx_tmp2;
HXLINE( 642)		{
HXLINE( 643)			ux = (C->x - B->x);
HXLINE( 644)			uy = (C->y - B->y);
            		}
HXLINE( 646)		{
HXLINE( 647)			vx = (B->x - A->x);
HXLINE( 648)			vy = (B->y - A->y);
            		}
HXLINE( 641)		if (!((((vy * ux) - (vx * uy)) >= (int)0))) {
HXLINE( 652)			{
HXLINE( 653)				ux = (D->x - C->x);
HXLINE( 654)				uy = (D->y - C->y);
            			}
HXLINE( 656)			{
HXLINE( 657)				vx = (C->x - B->x);
HXLINE( 658)				vy = (C->y - B->y);
            			}
HXLINE( 641)			_hx_tmp2 = (((vy * ux) - (vx * uy)) >= (int)0);
            		}
            		else {
HXLINE( 641)			_hx_tmp2 = true;
            		}
HXDLIN( 641)		if (!(_hx_tmp2)) {
HXLINE( 662)			{
HXLINE( 663)				ux = (A->x - D->x);
HXLINE( 664)				uy = (A->y - D->y);
            			}
HXLINE( 666)			{
HXLINE( 667)				vx = (D->x - C->x);
HXLINE( 668)				vy = (D->y - C->y);
            			}
HXLINE( 641)			_hx_tmp1 = (((vy * ux) - (vx * uy)) >= (int)0);
            		}
            		else {
HXLINE( 641)			_hx_tmp1 = true;
            		}
HXDLIN( 641)		if (!(_hx_tmp1)) {
HXLINE( 672)			{
HXLINE( 673)				ux = (B->x - A->x);
HXLINE( 674)				uy = (B->y - A->y);
            			}
HXLINE( 676)			{
HXLINE( 677)				vx = (A->x - D->x);
HXLINE( 678)				vy = (A->y - D->y);
            			}
HXLINE( 641)			_hx_tmp = (((vy * ux) - (vx * uy)) >= (int)0);
            		}
            		else {
HXLINE( 641)			_hx_tmp = true;
            		}
HXDLIN( 641)		if (_hx_tmp) {
HXLINE( 682)			return true;
            		}
HXLINE( 684)		return (((((((B->x * ((C->y * D->mag) - (C->mag * D->y))) - (C->x * ((B->y * D->mag) - (B->mag * D->y)))) + (D->x * ((B->y * C->mag) - (B->mag * C->y)))) - (((A->x * ((C->y * D->mag) - (C->mag * D->y))) - (C->x * ((A->y * D->mag) - (A->mag * D->y)))) + (D->x * ((A->y * C->mag) - (A->mag * C->y))))) + (((A->x * ((B->y * D->mag) - (B->mag * D->y))) - (B->x * ((A->y * D->mag) - (A->mag * D->y)))) + (D->x * ((A->y * B->mag) - (A->mag * B->y))))) - (((A->x * ((B->y * C->mag) - (B->mag * C->y))) - (B->x * ((A->y * C->mag) - (A->mag * C->y)))) + (C->x * ((A->y * B->mag) - (A->mag * B->y))))) > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ZPP_Triangular_obj,delaunay,return )

 ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair ZPP_Triangular_obj::edgeSet;

void ZPP_Triangular_obj::optimise( ::zpp_nape::geom::ZPP_PartitionedPoly P){
            	HX_GC_STACKFRAME(&_hx_pos_dd9319c57122016f_688_optimise)
            	HX_STACK_ARG(P,"P")
HXLINE( 689)		{
HXLINE( 690)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,F) = P->vertices;
HXLINE( 691)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,L) = P->vertices;
HXLINE( 692)			if (hx::IsNotNull( F )) {
HXLINE( 693)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,nite) = F;
HXLINE( 694)				while(true){
HXLINE( 695)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,p) = nite;
HXLINE( 697)					{
HXLINE( 698)						p->sort();
HXLINE( 699)						p->mag = ((p->x * p->x) + (p->y * p->y));
            					}
HXLINE( 702)					nite = nite->next;
HXLINE( 694)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 694)						goto _hx_goto_3;
            					}
            				}
            				_hx_goto_3:;
            			}
            		}
HXLINE( 707)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Triangular_obj::edgeSet )) {
HXLINE( 709)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE( 710)				::zpp_nape::geom::ZPP_Triangular_obj::edgeSet =  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 716)				::zpp_nape::geom::ZPP_Triangular_obj::edgeSet = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool;
HXLINE( 717)				::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = ::zpp_nape::geom::ZPP_Triangular_obj::edgeSet->next;
HXLINE( 718)				::zpp_nape::geom::ZPP_Triangular_obj::edgeSet->next = null();
            			}
HXLINE( 725)			::zpp_nape::geom::ZPP_Triangular_obj::edgeSet->lt = ::zpp_nape::geom::ZPP_PartitionPair_obj::edge_lt_dyn();
HXLINE( 726)			::zpp_nape::geom::ZPP_Triangular_obj::edgeSet->swapped = ::zpp_nape::geom::ZPP_PartitionPair_obj::edge_swap_dyn();
            		}
HXLINE( 728)		HX_VAR(  ::zpp_nape::geom::ZPP_PartitionPair,edgeStack);
HXLINE( 730)		if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE( 731)			edgeStack =  ::zpp_nape::geom::ZPP_PartitionPair_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 737)			edgeStack = ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool;
HXLINE( 738)			::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool = edgeStack->next;
HXLINE( 739)			edgeStack->next = null();
            		}
HXLINE( 746)		{
HXLINE( 747)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,F1,"F") = P->vertices;
HXLINE( 748)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,L1,"L") = P->vertices;
HXLINE( 749)			if (hx::IsNotNull( F1 )) {
HXLINE( 750)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,nite1,"nite") = F1;
HXLINE( 751)				while(true){
HXLINE( 752)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,p1,"p") = nite1;
HXLINE( 754)					{
HXLINE( 755)						HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,q0) = p1->next;
HXLINE( 756)						p1->diagonals->reverse();
HXLINE( 757)						{
HXLINE( 758)							HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,cx_ite) = p1->diagonals->head;
HXLINE( 759)							while(hx::IsNotNull( cx_ite )){
HXLINE( 760)								HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,q) = cx_ite->elt;
HXLINE( 761)								{
HXLINE( 762)									if ((q->id < p1->id)) {
HXLINE( 763)										q0 = q;
HXLINE( 765)										cx_ite = cx_ite->next;
HXLINE( 766)										continue;
            									}
HXLINE( 769)									HX_VAR(  ::zpp_nape::geom::ZPP_PartitionVertex,q1);
HXDLIN( 769)									if (hx::IsNull( cx_ite->next )) {
HXLINE( 769)										q1 = p1->prev;
            									}
            									else {
HXLINE( 769)										q1 = cx_ite->next->elt;
            									}
HXLINE( 770)									if (!(::zpp_nape::geom::ZPP_Triangular_obj::delaunay(p1,q0,q,q1))) {
HXLINE( 771)										HX_VAR(  ::zpp_nape::geom::ZPP_PartitionPair,ret);
HXDLIN( 771)										if (hx::IsNull( ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool )) {
HXLINE( 771)											ret =  ::zpp_nape::geom::ZPP_PartitionPair_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE( 771)											ret = ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool;
HXDLIN( 771)											::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool = ret->next;
HXDLIN( 771)											ret->next = null();
            										}
HXDLIN( 771)										ret->a = p1;
HXDLIN( 771)										ret->b = q;
HXDLIN( 771)										if ((p1->id < q->id)) {
HXLINE( 771)											ret->id = p1->id;
HXDLIN( 771)											ret->di = q->id;
            										}
            										else {
HXLINE( 771)											ret->id = q->id;
HXDLIN( 771)											ret->di = p1->id;
            										}
HXDLIN( 771)										HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,edge) = ret;
HXLINE( 772)										edgeStack->add(edge);
HXLINE( 773)										edge->node = ::zpp_nape::geom::ZPP_Triangular_obj::edgeSet->insert(edge);
            									}
HXLINE( 775)									q0 = q;
            								}
HXLINE( 777)								cx_ite = cx_ite->next;
            							}
            						}
            					}
HXLINE( 782)					nite1 = nite1->next;
HXLINE( 751)					if (!(hx::IsNotEq( nite1,L1 ))) {
HXLINE( 751)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
            		}
HXLINE( 787)		while(hx::IsNotNull( edgeStack->next )){
HXLINE( 788)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionPair,edge1,"edge") = edgeStack->pop_unsafe();
HXLINE( 789)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,A) = edge1->a;
HXLINE( 790)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,C) = edge1->b;
HXLINE( 791)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,B) = A->next;
HXLINE( 792)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,D) = null();
HXLINE( 793)			{
HXLINE( 794)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,cx_ite1,"cx_ite") = A->diagonals->head;
HXLINE( 795)				while(hx::IsNotNull( cx_ite1 )){
HXLINE( 796)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,p2,"p") = cx_ite1->elt;
HXLINE( 797)					{
HXLINE( 798)						if (hx::IsEq( p2,C )) {
HXLINE( 799)							cx_ite1 = cx_ite1->next;
HXLINE( 800)							if (hx::IsNull( cx_ite1 )) {
HXLINE( 800)								D = A->prev;
            							}
            							else {
HXLINE( 800)								D = cx_ite1->elt;
            							}
HXLINE( 801)							goto _hx_goto_7;
            						}
HXLINE( 803)						B = p2;
            					}
HXLINE( 805)					cx_ite1 = cx_ite1->next;
            				}
            				_hx_goto_7:;
            			}
HXLINE( 808)			A->diagonals->remove(C);
HXLINE( 809)			C->diagonals->remove(A);
HXLINE( 811)			if (hx::IsEq( C,B->next )) {
HXLINE( 812)				B->diagonals->add(D);
            			}
            			else {
HXLINE( 816)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,cx_ite2,"cx_ite") = B->diagonals->head;
HXLINE( 817)				while(hx::IsNotNull( cx_ite2 )){
HXLINE( 820)					if (hx::IsEq( cx_ite2->elt,C )) {
HXLINE( 821)						B->diagonals->insert(cx_ite2,D);
HXLINE( 822)						goto _hx_goto_8;
            					}
HXLINE( 825)					cx_ite2 = cx_ite2->next;
            				}
            				_hx_goto_8:;
            			}
HXLINE( 831)			if (hx::IsEq( A,D->next )) {
HXLINE( 832)				D->diagonals->add(B);
            			}
            			else {
HXLINE( 836)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,cx_ite3,"cx_ite") = D->diagonals->head;
HXLINE( 837)				while(hx::IsNotNull( cx_ite3 )){
HXLINE( 840)					if (hx::IsEq( cx_ite3->elt,A )) {
HXLINE( 841)						D->diagonals->insert(cx_ite3,B);
HXLINE( 842)						goto _hx_goto_9;
            					}
HXLINE( 845)					cx_ite3 = cx_ite3->next;
            				}
            				_hx_goto_9:;
            			}
HXLINE( 850)			::zpp_nape::geom::ZPP_Triangular_obj::edgeSet->remove_node(edge1->node);
HXLINE( 851)			{
HXLINE( 861)				{
HXLINE( 861)					edge1->a = (edge1->b = null());
HXDLIN( 861)					edge1->node = null();
            				}
HXLINE( 862)				edge1->next = ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool;
HXLINE( 863)				::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool = edge1;
            			}
            		}
HXLINE( 869)		{
HXLINE( 870)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionPair,o) = edgeStack;
HXLINE( 879)			{
HXLINE( 879)				o->a = (o->b = null());
HXDLIN( 879)				o->node = null();
            			}
HXLINE( 880)			o->next = ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool;
HXLINE( 881)			::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool = o;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Triangular_obj,optimise,(void))

 ::zpp_nape::geom::ZPP_PartitionedPoly ZPP_Triangular_obj::triangulate( ::zpp_nape::geom::ZPP_PartitionedPoly P){
            	HX_GC_STACKFRAME(&_hx_pos_dd9319c57122016f_887_triangulate)
            	HX_STACK_ARG(P,"P")
HXLINE( 888)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,min) = P->vertices;
HXLINE( 889)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,max) = P->vertices;
HXLINE( 890)		{
HXLINE( 891)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,F) = P->vertices->next;
HXLINE( 892)			HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,L) = P->vertices;
HXLINE( 893)			if (hx::IsNotNull( F )) {
HXLINE( 894)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,nite) = F;
HXLINE( 895)				while(true){
HXLINE( 896)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,p) = nite;
HXLINE( 898)					{
HXLINE( 899)						bool _hx_tmp;
HXDLIN( 899)						if (!((p->y < min->y))) {
HXLINE( 899)							if ((p->y == min->y)) {
HXLINE( 899)								_hx_tmp = (p->x < min->x);
            							}
            							else {
HXLINE( 899)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 899)							_hx_tmp = true;
            						}
HXDLIN( 899)						if (_hx_tmp) {
HXLINE( 899)							min = p;
            						}
HXLINE( 900)						bool _hx_tmp1;
HXDLIN( 900)						if (!((max->y < p->y))) {
HXLINE( 900)							if ((max->y == p->y)) {
HXLINE( 900)								_hx_tmp1 = (max->x < p->x);
            							}
            							else {
HXLINE( 900)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE( 900)							_hx_tmp1 = true;
            						}
HXDLIN( 900)						if (_hx_tmp1) {
HXLINE( 900)							max = p;
            						}
            					}
HXLINE( 903)					nite = nite->next;
HXLINE( 895)					if (!(hx::IsNotEq( nite,L ))) {
HXLINE( 895)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
            			}
            		}
HXLINE( 908)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Triangular_obj::queue )) {
HXLINE( 908)			::zpp_nape::geom::ZPP_Triangular_obj::queue =  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
HXLINE( 909)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,rp) = max->prev;
HXLINE( 910)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,lp) = max->next;
HXLINE( 911)		::zpp_nape::geom::ZPP_Triangular_obj::queue->add(max);
HXLINE( 912)		while(true){
HXLINE( 912)			bool _hx_tmp2;
HXDLIN( 912)			if (hx::IsEq( rp,min )) {
HXLINE( 912)				_hx_tmp2 = hx::IsNotEq( lp,min );
            			}
            			else {
HXLINE( 912)				_hx_tmp2 = true;
            			}
HXDLIN( 912)			if (!(_hx_tmp2)) {
HXLINE( 912)				goto _hx_goto_12;
            			}
HXLINE( 913)			bool _hx_tmp3;
HXDLIN( 913)			if (hx::IsNotEq( rp,min )) {
HXLINE( 913)				if (hx::IsNotEq( lp,min )) {
HXLINE( 913)					if (!((rp->y < lp->y))) {
HXLINE( 913)						if ((rp->y == lp->y)) {
HXLINE( 913)							_hx_tmp3 = (rp->x < lp->x);
            						}
            						else {
HXLINE( 913)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE( 913)						_hx_tmp3 = true;
            					}
            				}
            				else {
HXLINE( 913)					_hx_tmp3 = false;
            				}
            			}
            			else {
HXLINE( 913)				_hx_tmp3 = true;
            			}
HXDLIN( 913)			if (_hx_tmp3) {
HXLINE( 914)				::zpp_nape::geom::ZPP_Triangular_obj::queue->add(lp);
HXLINE( 915)				lp->rightchain = false;
HXLINE( 916)				lp = lp->next;
            			}
            			else {
HXLINE( 919)				::zpp_nape::geom::ZPP_Triangular_obj::queue->add(rp);
HXLINE( 920)				rp->rightchain = true;
HXLINE( 921)				rp = rp->prev;
            			}
            		}
            		_hx_goto_12:;
HXLINE( 924)		::zpp_nape::geom::ZPP_Triangular_obj::queue->add(min);
HXLINE( 925)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Triangular_obj::stack )) {
HXLINE( 925)			::zpp_nape::geom::ZPP_Triangular_obj::stack =  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex_obj::__alloc( HX_CTX );
            		}
HXLINE( 926)		 ::zpp_nape::util::ZNPList_ZPP_PartitionVertex _hx_tmp4 = ::zpp_nape::geom::ZPP_Triangular_obj::stack;
HXDLIN( 926)		_hx_tmp4->add(::zpp_nape::geom::ZPP_Triangular_obj::queue->pop_unsafe());
HXLINE( 927)		HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,pre) = ::zpp_nape::geom::ZPP_Triangular_obj::queue->pop_unsafe();
HXLINE( 928)		::zpp_nape::geom::ZPP_Triangular_obj::stack->add(pre);
HXLINE( 929)		while(true){
HXLINE( 930)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,p1,"p") = ::zpp_nape::geom::ZPP_Triangular_obj::queue->pop_unsafe();
HXLINE( 931)			if (hx::IsNull( ::zpp_nape::geom::ZPP_Triangular_obj::queue->head )) {
HXLINE( 931)				goto _hx_goto_13;
            			}
HXLINE( 932)			if ((p1->rightchain != ::zpp_nape::geom::ZPP_Triangular_obj::stack->head->elt->rightchain)) {
HXLINE( 933)				while(true){
HXLINE( 934)					HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,s) = ::zpp_nape::geom::ZPP_Triangular_obj::stack->pop_unsafe();
HXLINE( 935)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Triangular_obj::stack->head )) {
HXLINE( 935)						goto _hx_goto_14;
            					}
HXLINE( 936)					P->add_diagonal(s,p1);
            				}
            				_hx_goto_14:;
HXLINE( 938)				::zpp_nape::geom::ZPP_Triangular_obj::stack->add(pre);
            			}
            			else {
HXLINE( 941)				HX_VARI(  ::zpp_nape::geom::ZPP_PartitionVertex,q) = ::zpp_nape::geom::ZPP_Triangular_obj::stack->pop_unsafe();
HXLINE( 942)				while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Triangular_obj::stack->head )){
HXLINE( 943)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,s1,"s") = ::zpp_nape::geom::ZPP_Triangular_obj::stack->head->elt;
HXLINE( 944)					HX_VARI( Float,ux) = ((Float)0.0);
HXDLIN( 944)					HX_VARI( Float,uy) = ((Float)0.0);
HXDLIN( 944)					{
HXLINE( 944)						ux = (p1->x - q->x);
HXDLIN( 944)						uy = (p1->y - q->y);
            					}
HXDLIN( 944)					HX_VARI( Float,vx) = ((Float)0.0);
HXDLIN( 944)					HX_VARI( Float,vy) = ((Float)0.0);
HXDLIN( 944)					{
HXLINE( 944)						vx = (q->x - s1->x);
HXDLIN( 944)						vy = (q->y - s1->y);
            					}
HXDLIN( 944)					HX_VARI( Float,right) = ((vy * ux) - (vx * uy));
HXLINE( 945)					bool _hx_tmp5;
HXDLIN( 945)					bool _hx_tmp6;
HXDLIN( 945)					if (p1->rightchain) {
HXLINE( 945)						_hx_tmp6 = (right >= (int)0);
            					}
            					else {
HXLINE( 945)						_hx_tmp6 = false;
            					}
HXDLIN( 945)					if (!(_hx_tmp6)) {
HXLINE( 945)						if (!(p1->rightchain)) {
HXLINE( 945)							_hx_tmp5 = (right <= (int)0);
            						}
            						else {
HXLINE( 945)							_hx_tmp5 = false;
            						}
            					}
            					else {
HXLINE( 945)						_hx_tmp5 = true;
            					}
HXDLIN( 945)					if (_hx_tmp5) {
HXLINE( 945)						goto _hx_goto_15;
            					}
HXLINE( 946)					P->add_diagonal(s1,p1);
HXLINE( 947)					q = s1;
HXLINE( 948)					::zpp_nape::geom::ZPP_Triangular_obj::stack->pop();
            				}
            				_hx_goto_15:;
HXLINE( 950)				::zpp_nape::geom::ZPP_Triangular_obj::stack->add(q);
            			}
HXLINE( 952)			::zpp_nape::geom::ZPP_Triangular_obj::stack->add(p1);
HXLINE( 953)			pre = p1;
            		}
            		_hx_goto_13:;
HXLINE( 955)		if (hx::IsNotNull( ::zpp_nape::geom::ZPP_Triangular_obj::stack->head )) {
HXLINE( 956)			::zpp_nape::geom::ZPP_Triangular_obj::stack->pop();
HXLINE( 957)			while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Triangular_obj::stack->head )){
HXLINE( 958)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,s2,"s") = ::zpp_nape::geom::ZPP_Triangular_obj::stack->pop_unsafe();
HXLINE( 959)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Triangular_obj::stack->head )) {
HXLINE( 959)					goto _hx_goto_16;
            				}
HXLINE( 960)				P->add_diagonal(max,s2);
            			}
            			_hx_goto_16:;
            		}
HXLINE( 963)		return P;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Triangular_obj,triangulate,return )


ZPP_Triangular_obj::ZPP_Triangular_obj()
{
}

bool ZPP_Triangular_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { outValue = lt_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { outValue = queue; return true; }
		if (HX_FIELD_EQ(inName,"stack") ) { outValue = stack; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"edgeSet") ) { outValue = edgeSet; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"delaunay") ) { outValue = delaunay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"optimise") ) { outValue = optimise_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"right_turn") ) { outValue = right_turn_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"triangulate") ) { outValue = triangulate_dyn(); return true; }
	}
	return false;
}

bool ZPP_Triangular_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { queue=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex >(); return true; }
		if (HX_FIELD_EQ(inName,"stack") ) { stack=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_PartitionVertex >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"edgeSet") ) { edgeSet=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Triangular_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_Triangular_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_PartitionVertex*/ ,(void *) &ZPP_Triangular_obj::queue,HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_PartitionVertex*/ ,(void *) &ZPP_Triangular_obj::stack,HX_HCSTRING("stack","\x48","\x67","\x0b","\x84")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_PartitionPair*/ ,(void *) &ZPP_Triangular_obj::edgeSet,HX_HCSTRING("edgeSet","\x65","\x8f","\xef","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ZPP_Triangular_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Triangular_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Triangular_obj::queue,"queue");
	HX_MARK_MEMBER_NAME(ZPP_Triangular_obj::stack,"stack");
	HX_MARK_MEMBER_NAME(ZPP_Triangular_obj::edgeSet,"edgeSet");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Triangular_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Triangular_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Triangular_obj::queue,"queue");
	HX_VISIT_MEMBER_NAME(ZPP_Triangular_obj::stack,"stack");
	HX_VISIT_MEMBER_NAME(ZPP_Triangular_obj::edgeSet,"edgeSet");
};

#endif

hx::Class ZPP_Triangular_obj::__mClass;

static ::String ZPP_Triangular_obj_sStaticFields[] = {
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("right_turn","\x00","\x7e","\xae","\x6f"),
	HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"),
	HX_HCSTRING("stack","\x48","\x67","\x0b","\x84"),
	HX_HCSTRING("delaunay","\xc7","\x6e","\xbf","\x15"),
	HX_HCSTRING("edgeSet","\x65","\x8f","\xef","\xf4"),
	HX_HCSTRING("optimise","\xc4","\x86","\x18","\x1d"),
	HX_HCSTRING("triangulate","\x2c","\x65","\x9d","\xe9"),
	::String(null())
};

void ZPP_Triangular_obj::__register()
{
	hx::Object *dummy = new ZPP_Triangular_obj;
	ZPP_Triangular_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_Triangular","\xcd","\xaf","\xe8","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Triangular_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Triangular_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Triangular_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Triangular_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Triangular_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Triangular_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Triangular_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Triangular_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Triangular_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_dd9319c57122016f_634_boot)
HXLINE( 634)		queue = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_dd9319c57122016f_635_boot)
HXLINE( 635)		stack = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_dd9319c57122016f_687_boot)
HXLINE( 687)		edgeSet = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
