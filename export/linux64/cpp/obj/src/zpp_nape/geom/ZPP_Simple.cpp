// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Simple
#include <zpp_nape/geom/ZPP_Simple.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleEvent
#include <zpp_nape/geom/ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleSeg
#include <zpp_nape/geom/ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleSweep
#include <zpp_nape/geom/ZPP_SimpleSweep.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleVert
#include <zpp_nape/geom/ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_FastHash2_Hashable2_Boolfalse
#include <zpp_nape/util/FastHash2_Hashable2_Boolfalse.h>
#endif
#ifndef INCLUDED_zpp_nape_util_Hashable2_Boolfalse
#include <zpp_nape/util/Hashable2_Boolfalse.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_GeomVert
#include <zpp_nape/util/ZNPList_ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SimpleEvent
#include <zpp_nape/util/ZNPList_ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SimpleVert
#include <zpp_nape/util/ZNPList_ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimpleEvent
#include <zpp_nape/util/ZNPNode_ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimpleVert
#include <zpp_nape/util/ZNPNode_ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleEvent
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleSeg
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleVert
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleVert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_793_decompose,"zpp_nape.geom.ZPP_Simple","decompose",0xd7fa4fab,"zpp_nape.geom.ZPP_Simple.decompose","zpp_nape/geom/Simple.hx",793,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_1791_clip_polygon,"zpp_nape.geom.ZPP_Simple","clip_polygon",0x0724c711,"zpp_nape.geom.ZPP_Simple.clip_polygon","zpp_nape/geom/Simple.hx",1791,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_2050_isSimple,"zpp_nape.geom.ZPP_Simple","isSimple",0x2a953102,"zpp_nape.geom.ZPP_Simple.isSimple","zpp_nape/geom/Simple.hx",2050,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_788_boot,"zpp_nape.geom.ZPP_Simple","boot",0x94087a78,"zpp_nape.geom.ZPP_Simple.boot","zpp_nape/geom/Simple.hx",788,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_789_boot,"zpp_nape.geom.ZPP_Simple","boot",0x94087a78,"zpp_nape.geom.ZPP_Simple.boot","zpp_nape/geom/Simple.hx",789,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_790_boot,"zpp_nape.geom.ZPP_Simple","boot",0x94087a78,"zpp_nape.geom.ZPP_Simple.boot","zpp_nape/geom/Simple.hx",790,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_791_boot,"zpp_nape.geom.ZPP_Simple","boot",0x94087a78,"zpp_nape.geom.ZPP_Simple.boot","zpp_nape/geom/Simple.hx",791,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_792_boot,"zpp_nape.geom.ZPP_Simple","boot",0x94087a78,"zpp_nape.geom.ZPP_Simple.boot","zpp_nape/geom/Simple.hx",792,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_2048_boot,"zpp_nape.geom.ZPP_Simple","boot",0x94087a78,"zpp_nape.geom.ZPP_Simple.boot","zpp_nape/geom/Simple.hx",2048,0x62f156db)
HX_DEFINE_STACK_FRAME(_hx_pos_952c19739c86dba5_2049_boot,"zpp_nape.geom.ZPP_Simple","boot",0x94087a78,"zpp_nape.geom.ZPP_Simple.boot","zpp_nape/geom/Simple.hx",2049,0x62f156db)
namespace zpp_nape{
namespace geom{

void ZPP_Simple_obj::__construct() { }

Dynamic ZPP_Simple_obj::__CreateEmpty() { return new ZPP_Simple_obj; }

void *ZPP_Simple_obj::_hx_vtable = 0;

Dynamic ZPP_Simple_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ZPP_Simple_obj > _hx_result = new ZPP_Simple_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ZPP_Simple_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0328df60;
}

 ::zpp_nape::geom::ZPP_SimpleSweep ZPP_Simple_obj::sweep;

 ::zpp_nape::util::FastHash2_Hashable2_Boolfalse ZPP_Simple_obj::inthash;

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert ZPP_Simple_obj::vertices;

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Simple_obj::queue;

 ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent ZPP_Simple_obj::ints;

 ::zpp_nape::util::ZNPList_ZPP_GeomVert ZPP_Simple_obj::decompose( ::zpp_nape::geom::ZPP_GeomVert poly, ::zpp_nape::util::ZNPList_ZPP_GeomVert rets){
            	HX_GC_STACKFRAME(&_hx_pos_952c19739c86dba5_793_decompose)
            	HX_STACK_ARG(poly,"poly")
            	HX_STACK_ARG(rets,"rets")
HXLINE( 794)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Simple_obj::sweep )) {
HXLINE( 795)			::zpp_nape::geom::ZPP_Simple_obj::sweep =  ::zpp_nape::geom::ZPP_SimpleSweep_obj::__alloc( HX_CTX );
HXLINE( 796)			::zpp_nape::geom::ZPP_Simple_obj::inthash =  ::zpp_nape::util::FastHash2_Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            		}
HXLINE( 798)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Simple_obj::vertices )) {
HXLINE( 800)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE( 801)				::zpp_nape::geom::ZPP_Simple_obj::vertices =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 807)				::zpp_nape::geom::ZPP_Simple_obj::vertices = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool;
HXLINE( 808)				::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = ::zpp_nape::geom::ZPP_Simple_obj::vertices->next;
HXLINE( 809)				::zpp_nape::geom::ZPP_Simple_obj::vertices->next = null();
            			}
HXLINE( 816)			::zpp_nape::geom::ZPP_Simple_obj::vertices->lt = ::zpp_nape::geom::ZPP_SimpleVert_obj::less_xy_dyn();
HXLINE( 817)			::zpp_nape::geom::ZPP_Simple_obj::vertices->swapped = ::zpp_nape::geom::ZPP_SimpleVert_obj::swap_nodes_dyn();
            		}
HXLINE( 819)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Simple_obj::queue )) {
HXLINE( 821)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE( 822)				::zpp_nape::geom::ZPP_Simple_obj::queue =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 828)				::zpp_nape::geom::ZPP_Simple_obj::queue = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE( 829)				::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = ::zpp_nape::geom::ZPP_Simple_obj::queue->next;
HXLINE( 830)				::zpp_nape::geom::ZPP_Simple_obj::queue->next = null();
            			}
HXLINE( 837)			::zpp_nape::geom::ZPP_Simple_obj::queue->lt = ::zpp_nape::geom::ZPP_SimpleEvent_obj::less_xy_dyn();
HXLINE( 838)			::zpp_nape::geom::ZPP_Simple_obj::queue->swapped = ::zpp_nape::geom::ZPP_SimpleEvent_obj::swap_nodes_dyn();
            		}
HXLINE( 840)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,fst) = null();
HXLINE( 841)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,pre) = null();
HXLINE( 845)		if (hx::IsNotNull( poly )) {
HXLINE( 846)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,nite) = poly;
HXLINE( 847)			while(true){
HXLINE( 848)				HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,v) = nite;
HXLINE( 850)				{
HXLINE( 851)					Float x = v->x;
HXDLIN( 851)					Float y = v->y;
HXDLIN( 851)					HX_VAR(  ::zpp_nape::geom::ZPP_SimpleVert,ret);
HXDLIN( 851)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE( 851)						ret =  ::zpp_nape::geom::ZPP_SimpleVert_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 851)						ret = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXDLIN( 851)						::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = ret->next;
HXDLIN( 851)						ret->next = null();
            					}
HXDLIN( 851)					{
HXLINE( 851)						ret->x = x;
HXDLIN( 851)						ret->y = y;
            					}
HXDLIN( 851)					HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,vert) = ret;
HXLINE( 853)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur) = ::zpp_nape::geom::ZPP_Simple_obj::vertices->parent;
HXLINE( 854)					while(hx::IsNotNull( cur )){
HXLINE( 855)						if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::vertices->lt(vert,cur->data)) )) {
HXLINE( 855)							cur = cur->prev;
            						}
            						else {
HXLINE( 856)							if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::vertices->lt(cur->data,vert)) )) {
HXLINE( 856)								cur = cur->next;
            							}
            							else {
HXLINE( 857)								goto _hx_goto_1;
            							}
            						}
            					}
            					_hx_goto_1:;
HXLINE( 852)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,vx) = cur;
HXLINE( 861)					if (hx::IsNotNull( vx )) {
HXLINE( 862)						{
HXLINE( 863)							HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,o) = vert;
HXLINE( 872)							{
HXLINE( 872)								o->links->clear();
HXDLIN( 872)								o->node = null();
HXDLIN( 872)								o->forced = false;
            							}
HXLINE( 873)							o->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE( 874)							::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o;
            						}
HXLINE( 879)						vert = vx->data;
            					}
            					else {
HXLINE( 881)						vert->node = ::zpp_nape::geom::ZPP_Simple_obj::vertices->insert(vert);
            					}
HXLINE( 882)					if (hx::IsNotNull( pre )) {
HXLINE( 883)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret1,"ret");
HXDLIN( 883)						if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE( 883)							ret1 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 883)							ret1 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN( 883)							::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret1->next;
HXDLIN( 883)							ret1->next = null();
            						}
HXDLIN( 883)						ret1->vertex = pre;
HXDLIN( 883)						HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,e1) = ret1;
HXLINE( 884)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret2,"ret");
HXDLIN( 884)						if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE( 884)							ret2 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 884)							ret2 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN( 884)							::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret2->next;
HXDLIN( 884)							ret2->next = null();
            						}
HXDLIN( 884)						ret2->vertex = vert;
HXDLIN( 884)						HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,e2) = ret2;
HXLINE( 885)						HX_VAR(  ::zpp_nape::geom::ZPP_SimpleSeg,seg);
HXLINE( 886)						if (::zpp_nape::geom::ZPP_SimpleEvent_obj::less_xy(e1,e2)) {
HXLINE( 887)							e1->type = (int)1;
HXLINE( 888)							e2->type = (int)2;
HXLINE( 889)							seg = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(pre,vert);
            						}
            						else {
HXLINE( 892)							e1->type = (int)2;
HXLINE( 893)							e2->type = (int)1;
HXLINE( 894)							seg = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(vert,pre);
            						}
HXLINE( 896)						e1->segment = (e2->segment = seg);
HXLINE( 897)						::zpp_nape::geom::ZPP_Simple_obj::queue->insert(e1);
HXLINE( 898)						::zpp_nape::geom::ZPP_Simple_obj::queue->insert(e2);
HXLINE( 899)						pre->links->insert(vert);
HXLINE( 900)						vert->links->insert(pre);
            					}
HXLINE( 902)					pre = vert;
HXLINE( 903)					if (hx::IsNull( fst )) {
HXLINE( 903)						fst = vert;
            					}
            				}
HXLINE( 906)				nite = nite->next;
HXLINE( 847)				if (!(hx::IsNotEq( nite,poly ))) {
HXLINE( 847)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 911)		{
HXLINE( 912)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret3,"ret");
HXDLIN( 912)			if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE( 912)				ret3 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 912)				ret3 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN( 912)				::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret3->next;
HXDLIN( 912)				ret3->next = null();
            			}
HXDLIN( 912)			ret3->vertex = pre;
HXDLIN( 912)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,e11,"e1") = ret3;
HXLINE( 913)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret4,"ret");
HXDLIN( 913)			if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE( 913)				ret4 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 913)				ret4 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN( 913)				::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret4->next;
HXDLIN( 913)				ret4->next = null();
            			}
HXDLIN( 913)			ret4->vertex = fst;
HXDLIN( 913)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,e21,"e2") = ret4;
HXLINE( 914)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleSeg,seg1,"seg");
HXLINE( 915)			if (::zpp_nape::geom::ZPP_SimpleEvent_obj::less_xy(e11,e21)) {
HXLINE( 916)				e11->type = (int)1;
HXLINE( 917)				e21->type = (int)2;
HXLINE( 918)				seg1 = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(pre,fst);
            			}
            			else {
HXLINE( 921)				e11->type = (int)2;
HXLINE( 922)				e21->type = (int)1;
HXLINE( 923)				seg1 = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(fst,pre);
            			}
HXLINE( 925)			e11->segment = (e21->segment = seg1);
HXLINE( 926)			::zpp_nape::geom::ZPP_Simple_obj::queue->insert(e11);
HXLINE( 927)			::zpp_nape::geom::ZPP_Simple_obj::queue->insert(e21);
HXLINE( 928)			pre->links->insert(fst);
HXLINE( 929)			fst->links->insert(pre);
            		}
HXLINE( 931)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Simple_obj::ints )) {
HXLINE( 933)			if (hx::IsNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE( 934)				::zpp_nape::geom::ZPP_Simple_obj::ints =  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 940)				::zpp_nape::geom::ZPP_Simple_obj::ints = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool;
HXLINE( 941)				::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = ::zpp_nape::geom::ZPP_Simple_obj::ints->next;
HXLINE( 942)				::zpp_nape::geom::ZPP_Simple_obj::ints->next = null();
            			}
HXLINE( 949)			::zpp_nape::geom::ZPP_Simple_obj::ints->lt = ::zpp_nape::geom::ZPP_SimpleEvent_obj::less_xy_dyn();
            		}
HXLINE( 951)		while(!(::zpp_nape::geom::ZPP_Simple_obj::queue->empty())){
HXLINE( 952)			HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,e) = ::zpp_nape::geom::ZPP_Simple_obj::queue->pop_front();
HXLINE( 953)			::zpp_nape::geom::ZPP_Simple_obj::sweep->sweepx = e->vertex->x;
HXLINE( 954)			if ((e->type == (int)1)) {
HXLINE( 955)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,s) = e->segment;
HXLINE( 956)				::zpp_nape::geom::ZPP_Simple_obj::sweep->add(s);
HXLINE( 958)				bool _hx_tmp;
HXDLIN( 958)				bool _hx_tmp1;
HXDLIN( 958)				if (hx::IsNotNull( s->next )) {
HXLINE( 958)					_hx_tmp1 = hx::IsNotNull( s );
            				}
            				else {
HXLINE( 958)					_hx_tmp1 = false;
            				}
HXDLIN( 958)				if (_hx_tmp1) {
HXLINE( 958)					bool _hx_tmp2;
HXDLIN( 958)					if ((s->next->id < s->id)) {
HXLINE( 958)						_hx_tmp2 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(s->next->id,s->id);
            					}
            					else {
HXLINE( 958)						_hx_tmp2 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(s->id,s->next->id);
            					}
HXDLIN( 958)					_hx_tmp = !(_hx_tmp2);
            				}
            				else {
HXLINE( 958)					_hx_tmp = false;
            				}
HXDLIN( 958)				if (_hx_tmp) {
HXLINE( 959)					HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,intx) = ::zpp_nape::geom::ZPP_Simple_obj::sweep->intersection(s->next,s);
HXLINE( 960)					if (hx::IsNotNull( intx )) {
HXLINE( 961)						if ((intx->vertex->x >= ::zpp_nape::geom::ZPP_Simple_obj::sweep->sweepx)) {
HXLINE( 963)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur1,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::queue->parent;
HXLINE( 964)							while(hx::IsNotNull( cur1 )){
HXLINE( 965)								if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(intx,cur1->data)) )) {
HXLINE( 965)									cur1 = cur1->prev;
            								}
            								else {
HXLINE( 966)									if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(cur1->data,intx)) )) {
HXLINE( 966)										cur1 = cur1->next;
            									}
            									else {
HXLINE( 967)										goto _hx_goto_3;
            									}
            								}
            							}
            							_hx_goto_3:;
HXLINE( 971)							if (hx::IsNull( cur1 )) {
HXLINE( 973)								HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur2,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::ints->parent;
HXLINE( 974)								while(hx::IsNotNull( cur2 )){
HXLINE( 975)									if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(intx,cur2->data)) )) {
HXLINE( 975)										cur2 = cur2->prev;
            									}
            									else {
HXLINE( 976)										if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(cur2->data,intx)) )) {
HXLINE( 976)											cur2 = cur2->next;
            										}
            										else {
HXLINE( 977)											goto _hx_goto_4;
            										}
            									}
            								}
            								_hx_goto_4:;
HXLINE( 972)								HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,vx1,"vx") = cur2;
HXLINE( 981)								if (hx::IsNotNull( vx1 )) {
HXLINE( 982)									{
HXLINE( 983)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o1,"o") = intx->vertex;
HXLINE( 992)										{
HXLINE( 992)											o1->links->clear();
HXDLIN( 992)											o1->node = null();
HXDLIN( 992)											o1->forced = false;
            										}
HXLINE( 993)										o1->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE( 994)										::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o1;
            									}
HXLINE( 999)									intx->vertex = vx1->data->vertex;
HXLINE(1000)									vx1->data = intx;
HXLINE(1001)									::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx);
            								}
            								else {
HXLINE(1004)									::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx);
HXLINE(1005)									::zpp_nape::geom::ZPP_Simple_obj::ints->insert(intx);
            								}
HXLINE(1007)								if ((s->next->id < s->id)) {
HXLINE(1007)									int id = s->next->id;
HXDLIN(1007)									int di = s->id;
HXDLIN(1007)									HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret5,"ret");
HXDLIN(1007)									if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1007)										ret5 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1007)										ret5 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1007)										::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret5->next;
HXDLIN(1007)										ret5->next = null();
            									}
HXDLIN(1007)									ret5->id = id;
HXDLIN(1007)									ret5->di = di;
HXDLIN(1007)									HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret6,"ret") = ret5;
HXDLIN(1007)									ret6->value = true;
HXDLIN(1007)									::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret6);
            								}
            								else {
HXLINE(1008)									int di1 = s->next->id;
HXDLIN(1008)									HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret7,"ret");
HXDLIN(1008)									if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1008)										ret7 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1008)										ret7 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1008)										::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret7->next;
HXDLIN(1008)										ret7->next = null();
            									}
HXDLIN(1008)									ret7->id = s->id;
HXDLIN(1008)									ret7->di = di1;
HXDLIN(1008)									HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret8,"ret") = ret7;
HXDLIN(1008)									ret8->value = true;
HXDLIN(1008)									::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret8);
            								}
            							}
            							else {
HXLINE(1015)								{
HXLINE(1016)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o2,"o") = intx->vertex;
HXLINE(1025)									{
HXLINE(1025)										o2->links->clear();
HXDLIN(1025)										o2->node = null();
HXDLIN(1025)										o2->forced = false;
            									}
HXLINE(1026)									o2->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1027)									::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o2;
            								}
HXLINE(1032)								{
HXLINE(1042)									{
HXLINE(1042)										intx->vertex = null();
HXDLIN(1042)										intx->segment = (intx->segment2 = null());
HXDLIN(1042)										intx->node = null();
            									}
HXLINE(1043)									intx->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1044)									::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx;
            								}
            							}
            						}
            						else {
HXLINE(1052)							{
HXLINE(1053)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o3,"o") = intx->vertex;
HXLINE(1062)								{
HXLINE(1062)									o3->links->clear();
HXDLIN(1062)									o3->node = null();
HXDLIN(1062)									o3->forced = false;
            								}
HXLINE(1063)								o3->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1064)								::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o3;
            							}
HXLINE(1069)							{
HXLINE(1079)								{
HXLINE(1079)									intx->vertex = null();
HXDLIN(1079)									intx->segment = (intx->segment2 = null());
HXDLIN(1079)									intx->node = null();
            								}
HXLINE(1080)								intx->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1081)								::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx;
            							}
            						}
            					}
            				}
HXLINE(1091)				bool _hx_tmp3;
HXDLIN(1091)				bool _hx_tmp4;
HXDLIN(1091)				if (hx::IsNotNull( s )) {
HXLINE(1091)					_hx_tmp4 = hx::IsNotNull( s->prev );
            				}
            				else {
HXLINE(1091)					_hx_tmp4 = false;
            				}
HXDLIN(1091)				if (_hx_tmp4) {
HXLINE(1091)					bool _hx_tmp5;
HXDLIN(1091)					if ((s->id < s->prev->id)) {
HXLINE(1091)						_hx_tmp5 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(s->id,s->prev->id);
            					}
            					else {
HXLINE(1091)						_hx_tmp5 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(s->prev->id,s->id);
            					}
HXDLIN(1091)					_hx_tmp3 = !(_hx_tmp5);
            				}
            				else {
HXLINE(1091)					_hx_tmp3 = false;
            				}
HXDLIN(1091)				if (_hx_tmp3) {
HXLINE(1092)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,intx1,"intx") = ::zpp_nape::geom::ZPP_Simple_obj::sweep->intersection(s,s->prev);
HXLINE(1093)					if (hx::IsNotNull( intx1 )) {
HXLINE(1094)						if ((intx1->vertex->x >= ::zpp_nape::geom::ZPP_Simple_obj::sweep->sweepx)) {
HXLINE(1096)							HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur3,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::queue->parent;
HXLINE(1097)							while(hx::IsNotNull( cur3 )){
HXLINE(1098)								if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(intx1,cur3->data)) )) {
HXLINE(1098)									cur3 = cur3->prev;
            								}
            								else {
HXLINE(1099)									if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(cur3->data,intx1)) )) {
HXLINE(1099)										cur3 = cur3->next;
            									}
            									else {
HXLINE(1100)										goto _hx_goto_5;
            									}
            								}
            							}
            							_hx_goto_5:;
HXLINE(1104)							if (hx::IsNull( cur3 )) {
HXLINE(1106)								HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur4,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::ints->parent;
HXLINE(1107)								while(hx::IsNotNull( cur4 )){
HXLINE(1108)									if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(intx1,cur4->data)) )) {
HXLINE(1108)										cur4 = cur4->prev;
            									}
            									else {
HXLINE(1109)										if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(cur4->data,intx1)) )) {
HXLINE(1109)											cur4 = cur4->next;
            										}
            										else {
HXLINE(1110)											goto _hx_goto_6;
            										}
            									}
            								}
            								_hx_goto_6:;
HXLINE(1105)								HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,vx2,"vx") = cur4;
HXLINE(1114)								if (hx::IsNotNull( vx2 )) {
HXLINE(1115)									{
HXLINE(1116)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o4,"o") = intx1->vertex;
HXLINE(1125)										{
HXLINE(1125)											o4->links->clear();
HXDLIN(1125)											o4->node = null();
HXDLIN(1125)											o4->forced = false;
            										}
HXLINE(1126)										o4->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1127)										::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o4;
            									}
HXLINE(1132)									intx1->vertex = vx2->data->vertex;
HXLINE(1133)									vx2->data = intx1;
HXLINE(1134)									::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx1);
            								}
            								else {
HXLINE(1137)									::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx1);
HXLINE(1138)									::zpp_nape::geom::ZPP_Simple_obj::ints->insert(intx1);
            								}
HXLINE(1140)								if ((s->id < s->prev->id)) {
HXLINE(1140)									int di2 = s->prev->id;
HXDLIN(1140)									HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret9,"ret");
HXDLIN(1140)									if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1140)										ret9 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1140)										ret9 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1140)										::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret9->next;
HXDLIN(1140)										ret9->next = null();
            									}
HXDLIN(1140)									ret9->id = s->id;
HXDLIN(1140)									ret9->di = di2;
HXDLIN(1140)									HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret10,"ret") = ret9;
HXDLIN(1140)									ret10->value = true;
HXDLIN(1140)									::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret10);
            								}
            								else {
HXLINE(1141)									int di3 = s->id;
HXDLIN(1141)									HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret11,"ret");
HXDLIN(1141)									if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1141)										ret11 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE(1141)										ret11 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1141)										::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret11->next;
HXDLIN(1141)										ret11->next = null();
            									}
HXDLIN(1141)									ret11->id = s->prev->id;
HXDLIN(1141)									ret11->di = di3;
HXDLIN(1141)									HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret12,"ret") = ret11;
HXDLIN(1141)									ret12->value = true;
HXDLIN(1141)									::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret12);
            								}
            							}
            							else {
HXLINE(1148)								{
HXLINE(1149)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o5,"o") = intx1->vertex;
HXLINE(1158)									{
HXLINE(1158)										o5->links->clear();
HXDLIN(1158)										o5->node = null();
HXDLIN(1158)										o5->forced = false;
            									}
HXLINE(1159)									o5->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1160)									::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o5;
            								}
HXLINE(1165)								{
HXLINE(1175)									{
HXLINE(1175)										intx1->vertex = null();
HXDLIN(1175)										intx1->segment = (intx1->segment2 = null());
HXDLIN(1175)										intx1->node = null();
            									}
HXLINE(1176)									intx1->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1177)									::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx1;
            								}
            							}
            						}
            						else {
HXLINE(1185)							{
HXLINE(1186)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o6,"o") = intx1->vertex;
HXLINE(1195)								{
HXLINE(1195)									o6->links->clear();
HXDLIN(1195)									o6->node = null();
HXDLIN(1195)									o6->forced = false;
            								}
HXLINE(1196)								o6->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1197)								::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o6;
            							}
HXLINE(1202)							{
HXLINE(1212)								{
HXLINE(1212)									intx1->vertex = null();
HXDLIN(1212)									intx1->segment = (intx1->segment2 = null());
HXDLIN(1212)									intx1->node = null();
            								}
HXLINE(1213)								intx1->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1214)								::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx1;
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE(1224)				if ((e->type == (int)2)) {
HXLINE(1225)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleSeg,s1,"s") = e->segment;
HXLINE(1226)					if (hx::IsNotNull( s1->node )) {
HXLINE(1227)						HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,nxt) = s1->next;
HXLINE(1228)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleSeg,pre1,"pre") = s1->prev;
HXLINE(1229)						::zpp_nape::geom::ZPP_Simple_obj::sweep->remove(s1);
HXLINE(1230)						{
HXLINE(1240)							{
HXLINE(1240)								s1->left = (s1->right = null());
HXDLIN(1240)								s1->prev = null();
HXDLIN(1240)								s1->node = null();
HXDLIN(1240)								s1->vertices->clear();
            							}
HXLINE(1241)							s1->next = ::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(1242)							::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool = s1;
            						}
HXLINE(1248)						bool _hx_tmp6;
HXDLIN(1248)						bool _hx_tmp7;
HXDLIN(1248)						if (hx::IsNotNull( nxt )) {
HXLINE(1248)							_hx_tmp7 = hx::IsNotNull( pre1 );
            						}
            						else {
HXLINE(1248)							_hx_tmp7 = false;
            						}
HXDLIN(1248)						if (_hx_tmp7) {
HXLINE(1248)							bool _hx_tmp8;
HXDLIN(1248)							if ((nxt->id < pre1->id)) {
HXLINE(1248)								_hx_tmp8 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(nxt->id,pre1->id);
            							}
            							else {
HXLINE(1248)								_hx_tmp8 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(pre1->id,nxt->id);
            							}
HXDLIN(1248)							_hx_tmp6 = !(_hx_tmp8);
            						}
            						else {
HXLINE(1248)							_hx_tmp6 = false;
            						}
HXDLIN(1248)						if (_hx_tmp6) {
HXLINE(1249)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,intx2,"intx") = ::zpp_nape::geom::ZPP_Simple_obj::sweep->intersection(nxt,pre1);
HXLINE(1250)							if (hx::IsNotNull( intx2 )) {
HXLINE(1251)								if ((intx2->vertex->x >= ::zpp_nape::geom::ZPP_Simple_obj::sweep->sweepx)) {
HXLINE(1253)									HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur5,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::queue->parent;
HXLINE(1254)									while(hx::IsNotNull( cur5 )){
HXLINE(1255)										if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(intx2,cur5->data)) )) {
HXLINE(1255)											cur5 = cur5->prev;
            										}
            										else {
HXLINE(1256)											if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(cur5->data,intx2)) )) {
HXLINE(1256)												cur5 = cur5->next;
            											}
            											else {
HXLINE(1257)												goto _hx_goto_7;
            											}
            										}
            									}
            									_hx_goto_7:;
HXLINE(1261)									if (hx::IsNull( cur5 )) {
HXLINE(1263)										HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur6,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::ints->parent;
HXLINE(1264)										while(hx::IsNotNull( cur6 )){
HXLINE(1265)											if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(intx2,cur6->data)) )) {
HXLINE(1265)												cur6 = cur6->prev;
            											}
            											else {
HXLINE(1266)												if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(cur6->data,intx2)) )) {
HXLINE(1266)													cur6 = cur6->next;
            												}
            												else {
HXLINE(1267)													goto _hx_goto_8;
            												}
            											}
            										}
            										_hx_goto_8:;
HXLINE(1262)										HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,vx3,"vx") = cur6;
HXLINE(1271)										if (hx::IsNotNull( vx3 )) {
HXLINE(1272)											{
HXLINE(1273)												HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o7,"o") = intx2->vertex;
HXLINE(1282)												{
HXLINE(1282)													o7->links->clear();
HXDLIN(1282)													o7->node = null();
HXDLIN(1282)													o7->forced = false;
            												}
HXLINE(1283)												o7->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1284)												::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o7;
            											}
HXLINE(1289)											intx2->vertex = vx3->data->vertex;
HXLINE(1290)											vx3->data = intx2;
HXLINE(1291)											::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx2);
            										}
            										else {
HXLINE(1294)											::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx2);
HXLINE(1295)											::zpp_nape::geom::ZPP_Simple_obj::ints->insert(intx2);
            										}
HXLINE(1297)										if ((nxt->id < pre1->id)) {
HXLINE(1297)											int di4 = pre1->id;
HXDLIN(1297)											HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret13,"ret");
HXDLIN(1297)											if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1297)												ret13 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(1297)												ret13 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1297)												::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret13->next;
HXDLIN(1297)												ret13->next = null();
            											}
HXDLIN(1297)											ret13->id = nxt->id;
HXDLIN(1297)											ret13->di = di4;
HXDLIN(1297)											HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret14,"ret") = ret13;
HXDLIN(1297)											ret14->value = true;
HXDLIN(1297)											::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret14);
            										}
            										else {
HXLINE(1298)											int di5 = nxt->id;
HXDLIN(1298)											HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret15,"ret");
HXDLIN(1298)											if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1298)												ret15 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            											}
            											else {
HXLINE(1298)												ret15 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1298)												::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret15->next;
HXDLIN(1298)												ret15->next = null();
            											}
HXDLIN(1298)											ret15->id = pre1->id;
HXDLIN(1298)											ret15->di = di5;
HXDLIN(1298)											HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret16,"ret") = ret15;
HXDLIN(1298)											ret16->value = true;
HXDLIN(1298)											::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret16);
            										}
            									}
            									else {
HXLINE(1305)										{
HXLINE(1306)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o8,"o") = intx2->vertex;
HXLINE(1315)											{
HXLINE(1315)												o8->links->clear();
HXDLIN(1315)												o8->node = null();
HXDLIN(1315)												o8->forced = false;
            											}
HXLINE(1316)											o8->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1317)											::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o8;
            										}
HXLINE(1322)										{
HXLINE(1332)											{
HXLINE(1332)												intx2->vertex = null();
HXDLIN(1332)												intx2->segment = (intx2->segment2 = null());
HXDLIN(1332)												intx2->node = null();
            											}
HXLINE(1333)											intx2->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1334)											::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx2;
            										}
            									}
            								}
            								else {
HXLINE(1342)									{
HXLINE(1343)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o9,"o") = intx2->vertex;
HXLINE(1352)										{
HXLINE(1352)											o9->links->clear();
HXDLIN(1352)											o9->node = null();
HXDLIN(1352)											o9->forced = false;
            										}
HXLINE(1353)										o9->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1354)										::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o9;
            									}
HXLINE(1359)									{
HXLINE(1369)										{
HXLINE(1369)											intx2->vertex = null();
HXDLIN(1369)											intx2->segment = (intx2->segment2 = null());
HXDLIN(1369)											intx2->node = null();
            										}
HXLINE(1370)										intx2->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1371)										::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx2;
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE(1383)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,intx3,"intx") = e->vertex;
HXLINE(1384)					HX_VARI( bool,pnull) = hx::IsNull( intx3->node );
HXLINE(1385)					HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,a) = e->segment;
HXLINE(1386)					HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,b) = e->segment2;
HXLINE(1395)					if (hx::IsNotEq( b->next,a )) {
HXLINE(1396)						HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,t) = a;
HXLINE(1397)						a = b;
HXLINE(1398)						b = t;
            					}
HXLINE(1401)					HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur7,"cur") = a->vertices->parent;
HXLINE(1402)					while(hx::IsNotNull( cur7 )){
HXLINE(1403)						if (( (bool)(a->vertices->lt(intx3,cur7->data)) )) {
HXLINE(1403)							cur7 = cur7->prev;
            						}
            						else {
HXLINE(1404)							if (( (bool)(a->vertices->lt(cur7->data,intx3)) )) {
HXLINE(1404)								cur7 = cur7->next;
            							}
            							else {
HXLINE(1405)								goto _hx_goto_9;
            							}
            						}
            					}
            					_hx_goto_9:;
HXLINE(1400)					HX_VARI( bool,anew) = hx::IsNull( cur7 );
HXLINE(1410)					HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,cur8,"cur") = b->vertices->parent;
HXLINE(1411)					while(hx::IsNotNull( cur8 )){
HXLINE(1412)						if (( (bool)(b->vertices->lt(intx3,cur8->data)) )) {
HXLINE(1412)							cur8 = cur8->prev;
            						}
            						else {
HXLINE(1413)							if (( (bool)(b->vertices->lt(cur8->data,intx3)) )) {
HXLINE(1413)								cur8 = cur8->next;
            							}
            							else {
HXLINE(1414)								goto _hx_goto_10;
            							}
            						}
            					}
            					_hx_goto_10:;
HXLINE(1418)					if (anew) {
HXLINE(1419)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,aint) = a->vertices->insert(intx3);
HXLINE(1420)						HX_VAR(  ::zpp_nape::geom::ZPP_SimpleVert,naleft);
HXDLIN(1420)						if (hx::IsEq( intx3,a->left )) {
HXLINE(1420)							naleft = intx3;
            						}
            						else {
HXLINE(1420)							naleft = a->vertices->predecessor_node(aint)->data;
            						}
HXLINE(1421)						HX_VAR(  ::zpp_nape::geom::ZPP_SimpleVert,naright);
HXDLIN(1421)						if (hx::IsEq( intx3,a->right )) {
HXLINE(1421)							naright = intx3;
            						}
            						else {
HXLINE(1421)							naright = a->vertices->successor_node(aint)->data;
            						}
HXLINE(1422)						naleft->links->remove(naright);
HXLINE(1423)						if (hx::IsNotEq( intx3,naleft )) {
HXLINE(1423)							naleft->links->insert(intx3);
            						}
HXLINE(1424)						naright->links->remove(naleft);
HXLINE(1425)						if (hx::IsNotEq( intx3,naright )) {
HXLINE(1425)							naright->links->insert(intx3);
            						}
HXLINE(1426)						if (hx::IsNotEq( intx3,naleft )) {
HXLINE(1426)							intx3->links->insert(naleft);
            						}
HXLINE(1427)						if (hx::IsNotEq( intx3,naright )) {
HXLINE(1427)							intx3->links->insert(naright);
            						}
            					}
HXLINE(1429)					if (hx::IsNull( cur8 )) {
HXLINE(1430)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,bint) = b->vertices->insert(intx3);
HXLINE(1431)						HX_VAR(  ::zpp_nape::geom::ZPP_SimpleVert,nbleft);
HXDLIN(1431)						if (hx::IsEq( intx3,b->left )) {
HXLINE(1431)							nbleft = intx3;
            						}
            						else {
HXLINE(1431)							nbleft = b->vertices->predecessor_node(bint)->data;
            						}
HXLINE(1432)						HX_VAR(  ::zpp_nape::geom::ZPP_SimpleVert,nbright);
HXDLIN(1432)						if (hx::IsEq( intx3,b->right )) {
HXLINE(1432)							nbright = intx3;
            						}
            						else {
HXLINE(1432)							nbright = b->vertices->successor_node(bint)->data;
            						}
HXLINE(1433)						nbleft->links->remove(nbright);
HXLINE(1434)						if (hx::IsNotEq( intx3,nbleft )) {
HXLINE(1434)							nbleft->links->insert(intx3);
            						}
HXLINE(1435)						nbright->links->remove(nbleft);
HXLINE(1436)						if (hx::IsNotEq( intx3,nbright )) {
HXLINE(1436)							nbright->links->insert(intx3);
            						}
HXLINE(1437)						if (hx::IsNotEq( intx3,nbleft )) {
HXLINE(1437)							intx3->links->insert(nbleft);
            						}
HXLINE(1438)						if (hx::IsNotEq( intx3,nbright )) {
HXLINE(1438)							intx3->links->insert(nbright);
            						}
            					}
HXLINE(1440)					if (pnull) {
HXLINE(1440)						intx3->node = ::zpp_nape::geom::ZPP_Simple_obj::vertices->insert(intx3);
            					}
HXLINE(1441)					intx3->forced = true;
HXLINE(1442)					if (pnull) {
HXLINE(1443)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,an) = a->node;
HXLINE(1444)						HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,bn) = b->node;
HXLINE(1445)						an->data = b;
HXLINE(1446)						bn->data = a;
HXLINE(1447)						a->node = bn;
HXLINE(1448)						b->node = an;
HXLINE(1449)						b->next = a->next;
HXLINE(1450)						a->next = b;
HXLINE(1451)						a->prev = b->prev;
HXLINE(1452)						b->prev = a;
HXLINE(1453)						if (hx::IsNotNull( a->prev )) {
HXLINE(1453)							a->prev->next = a;
            						}
HXLINE(1454)						if (hx::IsNotNull( b->next )) {
HXLINE(1454)							b->next->prev = b;
            						}
            					}
HXLINE(1457)					bool _hx_tmp9;
HXDLIN(1457)					bool _hx_tmp10;
HXDLIN(1457)					if (hx::IsNotNull( b->next )) {
HXLINE(1457)						_hx_tmp10 = hx::IsNotNull( b );
            					}
            					else {
HXLINE(1457)						_hx_tmp10 = false;
            					}
HXDLIN(1457)					if (_hx_tmp10) {
HXLINE(1457)						bool _hx_tmp11;
HXDLIN(1457)						if ((b->next->id < b->id)) {
HXLINE(1457)							_hx_tmp11 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(b->next->id,b->id);
            						}
            						else {
HXLINE(1457)							_hx_tmp11 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(b->id,b->next->id);
            						}
HXDLIN(1457)						_hx_tmp9 = !(_hx_tmp11);
            					}
            					else {
HXLINE(1457)						_hx_tmp9 = false;
            					}
HXDLIN(1457)					if (_hx_tmp9) {
HXLINE(1458)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,intx4,"intx") = ::zpp_nape::geom::ZPP_Simple_obj::sweep->intersection(b->next,b);
HXLINE(1459)						if (hx::IsNotNull( intx4 )) {
HXLINE(1460)							if ((intx4->vertex->x >= ::zpp_nape::geom::ZPP_Simple_obj::sweep->sweepx)) {
HXLINE(1462)								HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur9,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::queue->parent;
HXLINE(1463)								while(hx::IsNotNull( cur9 )){
HXLINE(1464)									if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(intx4,cur9->data)) )) {
HXLINE(1464)										cur9 = cur9->prev;
            									}
            									else {
HXLINE(1465)										if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(cur9->data,intx4)) )) {
HXLINE(1465)											cur9 = cur9->next;
            										}
            										else {
HXLINE(1466)											goto _hx_goto_11;
            										}
            									}
            								}
            								_hx_goto_11:;
HXLINE(1470)								if (hx::IsNull( cur9 )) {
HXLINE(1472)									HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur10,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::ints->parent;
HXLINE(1473)									while(hx::IsNotNull( cur10 )){
HXLINE(1474)										if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(intx4,cur10->data)) )) {
HXLINE(1474)											cur10 = cur10->prev;
            										}
            										else {
HXLINE(1475)											if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(cur10->data,intx4)) )) {
HXLINE(1475)												cur10 = cur10->next;
            											}
            											else {
HXLINE(1476)												goto _hx_goto_12;
            											}
            										}
            									}
            									_hx_goto_12:;
HXLINE(1471)									HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,vx4,"vx") = cur10;
HXLINE(1480)									if (hx::IsNotNull( vx4 )) {
HXLINE(1481)										{
HXLINE(1482)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o10,"o") = intx4->vertex;
HXLINE(1491)											{
HXLINE(1491)												o10->links->clear();
HXDLIN(1491)												o10->node = null();
HXDLIN(1491)												o10->forced = false;
            											}
HXLINE(1492)											o10->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1493)											::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o10;
            										}
HXLINE(1498)										intx4->vertex = vx4->data->vertex;
HXLINE(1499)										vx4->data = intx4;
HXLINE(1500)										::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx4);
            									}
            									else {
HXLINE(1503)										::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx4);
HXLINE(1504)										::zpp_nape::geom::ZPP_Simple_obj::ints->insert(intx4);
            									}
HXLINE(1506)									if ((b->next->id < b->id)) {
HXLINE(1506)										int id1 = b->next->id;
HXDLIN(1506)										int di6 = b->id;
HXDLIN(1506)										HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret17,"ret");
HXDLIN(1506)										if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1506)											ret17 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(1506)											ret17 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1506)											::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret17->next;
HXDLIN(1506)											ret17->next = null();
            										}
HXDLIN(1506)										ret17->id = id1;
HXDLIN(1506)										ret17->di = di6;
HXDLIN(1506)										HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret18,"ret") = ret17;
HXDLIN(1506)										ret18->value = true;
HXDLIN(1506)										::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret18);
            									}
            									else {
HXLINE(1507)										int di7 = b->next->id;
HXDLIN(1507)										HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret19,"ret");
HXDLIN(1507)										if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1507)											ret19 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(1507)											ret19 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1507)											::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret19->next;
HXDLIN(1507)											ret19->next = null();
            										}
HXDLIN(1507)										ret19->id = b->id;
HXDLIN(1507)										ret19->di = di7;
HXDLIN(1507)										HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret20,"ret") = ret19;
HXDLIN(1507)										ret20->value = true;
HXDLIN(1507)										::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret20);
            									}
            								}
            								else {
HXLINE(1514)									{
HXLINE(1515)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o11,"o") = intx4->vertex;
HXLINE(1524)										{
HXLINE(1524)											o11->links->clear();
HXDLIN(1524)											o11->node = null();
HXDLIN(1524)											o11->forced = false;
            										}
HXLINE(1525)										o11->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1526)										::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o11;
            									}
HXLINE(1531)									{
HXLINE(1541)										{
HXLINE(1541)											intx4->vertex = null();
HXDLIN(1541)											intx4->segment = (intx4->segment2 = null());
HXDLIN(1541)											intx4->node = null();
            										}
HXLINE(1542)										intx4->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1543)										::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx4;
            									}
            								}
            							}
            							else {
HXLINE(1551)								{
HXLINE(1552)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o12,"o") = intx4->vertex;
HXLINE(1561)									{
HXLINE(1561)										o12->links->clear();
HXDLIN(1561)										o12->node = null();
HXDLIN(1561)										o12->forced = false;
            									}
HXLINE(1562)									o12->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1563)									::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o12;
            								}
HXLINE(1568)								{
HXLINE(1578)									{
HXLINE(1578)										intx4->vertex = null();
HXDLIN(1578)										intx4->segment = (intx4->segment2 = null());
HXDLIN(1578)										intx4->node = null();
            									}
HXLINE(1579)									intx4->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1580)									::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx4;
            								}
            							}
            						}
            					}
HXLINE(1590)					bool _hx_tmp12;
HXDLIN(1590)					bool _hx_tmp13;
HXDLIN(1590)					if (hx::IsNotNull( a )) {
HXLINE(1590)						_hx_tmp13 = hx::IsNotNull( a->prev );
            					}
            					else {
HXLINE(1590)						_hx_tmp13 = false;
            					}
HXDLIN(1590)					if (_hx_tmp13) {
HXLINE(1590)						bool _hx_tmp14;
HXDLIN(1590)						if ((a->id < a->prev->id)) {
HXLINE(1590)							_hx_tmp14 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(a->id,a->prev->id);
            						}
            						else {
HXLINE(1590)							_hx_tmp14 = ::zpp_nape::geom::ZPP_Simple_obj::inthash->has(a->prev->id,a->id);
            						}
HXDLIN(1590)						_hx_tmp12 = !(_hx_tmp14);
            					}
            					else {
HXLINE(1590)						_hx_tmp12 = false;
            					}
HXDLIN(1590)					if (_hx_tmp12) {
HXLINE(1591)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,intx5,"intx") = ::zpp_nape::geom::ZPP_Simple_obj::sweep->intersection(a,a->prev);
HXLINE(1592)						if (hx::IsNotNull( intx5 )) {
HXLINE(1593)							if ((intx5->vertex->x >= ::zpp_nape::geom::ZPP_Simple_obj::sweep->sweepx)) {
HXLINE(1595)								HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur11,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::queue->parent;
HXLINE(1596)								while(hx::IsNotNull( cur11 )){
HXLINE(1597)									if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(intx5,cur11->data)) )) {
HXLINE(1597)										cur11 = cur11->prev;
            									}
            									else {
HXLINE(1598)										if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::queue->lt(cur11->data,intx5)) )) {
HXLINE(1598)											cur11 = cur11->next;
            										}
            										else {
HXLINE(1599)											goto _hx_goto_13;
            										}
            									}
            								}
            								_hx_goto_13:;
HXLINE(1603)								if (hx::IsNull( cur11 )) {
HXLINE(1605)									HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,cur12,"cur") = ::zpp_nape::geom::ZPP_Simple_obj::ints->parent;
HXLINE(1606)									while(hx::IsNotNull( cur12 )){
HXLINE(1607)										if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(intx5,cur12->data)) )) {
HXLINE(1607)											cur12 = cur12->prev;
            										}
            										else {
HXLINE(1608)											if (( (bool)(::zpp_nape::geom::ZPP_Simple_obj::ints->lt(cur12->data,intx5)) )) {
HXLINE(1608)												cur12 = cur12->next;
            											}
            											else {
HXLINE(1609)												goto _hx_goto_14;
            											}
            										}
            									}
            									_hx_goto_14:;
HXLINE(1604)									HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,vx5,"vx") = cur12;
HXLINE(1613)									if (hx::IsNotNull( vx5 )) {
HXLINE(1614)										{
HXLINE(1615)											HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o13,"o") = intx5->vertex;
HXLINE(1624)											{
HXLINE(1624)												o13->links->clear();
HXDLIN(1624)												o13->node = null();
HXDLIN(1624)												o13->forced = false;
            											}
HXLINE(1625)											o13->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1626)											::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o13;
            										}
HXLINE(1631)										intx5->vertex = vx5->data->vertex;
HXLINE(1632)										vx5->data = intx5;
HXLINE(1633)										::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx5);
            									}
            									else {
HXLINE(1636)										::zpp_nape::geom::ZPP_Simple_obj::queue->insert(intx5);
HXLINE(1637)										::zpp_nape::geom::ZPP_Simple_obj::ints->insert(intx5);
            									}
HXLINE(1639)									if ((a->id < a->prev->id)) {
HXLINE(1639)										int di8 = a->prev->id;
HXDLIN(1639)										HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret21,"ret");
HXDLIN(1639)										if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1639)											ret21 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(1639)											ret21 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1639)											::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret21->next;
HXDLIN(1639)											ret21->next = null();
            										}
HXDLIN(1639)										ret21->id = a->id;
HXDLIN(1639)										ret21->di = di8;
HXDLIN(1639)										HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret22,"ret") = ret21;
HXDLIN(1639)										ret22->value = true;
HXDLIN(1639)										::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret22);
            									}
            									else {
HXLINE(1640)										int di9 = a->id;
HXDLIN(1640)										HX_VAR_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret23,"ret");
HXDLIN(1640)										if (hx::IsNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )) {
HXLINE(1640)											ret23 =  ::zpp_nape::util::Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            										}
            										else {
HXLINE(1640)											ret23 = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXDLIN(1640)											::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = ret23->next;
HXDLIN(1640)											ret23->next = null();
            										}
HXDLIN(1640)										ret23->id = a->prev->id;
HXDLIN(1640)										ret23->di = di9;
HXDLIN(1640)										HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,ret24,"ret") = ret23;
HXDLIN(1640)										ret24->value = true;
HXDLIN(1640)										::zpp_nape::geom::ZPP_Simple_obj::inthash->add(ret24);
            									}
            								}
            								else {
HXLINE(1647)									{
HXLINE(1648)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o14,"o") = intx5->vertex;
HXLINE(1657)										{
HXLINE(1657)											o14->links->clear();
HXDLIN(1657)											o14->node = null();
HXDLIN(1657)											o14->forced = false;
            										}
HXLINE(1658)										o14->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1659)										::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o14;
            									}
HXLINE(1664)									{
HXLINE(1674)										{
HXLINE(1674)											intx5->vertex = null();
HXDLIN(1674)											intx5->segment = (intx5->segment2 = null());
HXDLIN(1674)											intx5->node = null();
            										}
HXLINE(1675)										intx5->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1676)										::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx5;
            									}
            								}
            							}
            							else {
HXLINE(1684)								{
HXLINE(1685)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o15,"o") = intx5->vertex;
HXLINE(1694)									{
HXLINE(1694)										o15->links->clear();
HXDLIN(1694)										o15->node = null();
HXDLIN(1694)										o15->forced = false;
            									}
HXLINE(1695)									o15->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1696)									::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o15;
            								}
HXLINE(1701)								{
HXLINE(1711)									{
HXLINE(1711)										intx5->vertex = null();
HXDLIN(1711)										intx5->segment = (intx5->segment2 = null());
HXDLIN(1711)										intx5->node = null();
            									}
HXLINE(1712)									intx5->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1713)									::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = intx5;
            								}
            							}
            						}
            					}
HXLINE(1722)					::zpp_nape::geom::ZPP_Simple_obj::ints->remove(e);
            				}
            			}
HXLINE(1724)			{
HXLINE(1734)				{
HXLINE(1734)					e->vertex = null();
HXDLIN(1734)					e->segment = (e->segment2 = null());
HXDLIN(1734)					e->node = null();
            				}
HXLINE(1735)				e->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(1736)				::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = e;
            			}
            		}
HXLINE(1759)		{
HXLINE(1759)			HX_VARI( int,_g1) = (int)0;
HXDLIN(1759)			HX_VARI( int,_g) = ::zpp_nape::geom::ZPP_Simple_obj::inthash->table->length;
HXDLIN(1759)			while((_g1 < _g)){
HXLINE(1759)				_g1 = (_g1 + (int)1);
HXDLIN(1759)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE(1760)				HX_VARI(  ::zpp_nape::util::Hashable2_Boolfalse,n) = ::zpp_nape::geom::ZPP_Simple_obj::inthash->table->__get(i).StaticCast<  ::zpp_nape::util::Hashable2_Boolfalse >();
HXLINE(1761)				if (hx::IsNull( n )) {
HXLINE(1761)					continue;
            				}
HXLINE(1762)				while(hx::IsNotNull( n )){
HXLINE(1763)					HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,t1,"t") = n->hnext;
HXLINE(1764)					n->hnext = null();
HXLINE(1765)					{
HXLINE(1766)						HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,o16,"o") = n;
HXLINE(1776)						o16->next = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool;
HXLINE(1777)						::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = o16;
            					}
HXLINE(1782)					n = t1;
            				}
HXLINE(1784)				::zpp_nape::geom::ZPP_Simple_obj::inthash->table[i] = null();
            			}
            		}
HXLINE(1787)		if (hx::IsNull( rets )) {
HXLINE(1787)			rets =  ::zpp_nape::util::ZNPList_ZPP_GeomVert_obj::__alloc( HX_CTX );
            		}
HXLINE(1788)		while(!(::zpp_nape::geom::ZPP_Simple_obj::vertices->empty())){
HXLINE(1788)			::zpp_nape::geom::ZPP_Simple_obj::clip_polygon(::zpp_nape::geom::ZPP_Simple_obj::vertices,rets);
            		}
HXLINE(1789)		return rets;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Simple_obj,decompose,return )

void ZPP_Simple_obj::clip_polygon( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert vertices, ::zpp_nape::util::ZNPList_ZPP_GeomVert rets){
            	HX_GC_STACKFRAME(&_hx_pos_952c19739c86dba5_1791_clip_polygon)
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(rets,"rets")
HXLINE(1792)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,ret) = null();
HXLINE(1793)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,cur) = vertices->first();
HXLINE(1802)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,fst) = cur;
HXLINE(1803)		HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,pren) = cur->links->parent;
HXLINE(1804)		HX_VAR(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,nxtn);
HXDLIN(1804)		if (hx::IsNull( pren->prev )) {
HXLINE(1804)			nxtn = pren->next;
            		}
            		else {
HXLINE(1804)			nxtn = pren->prev;
            		}
HXLINE(1805)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,pre) = pren->data;
HXLINE(1806)		HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,nxt) = nxtn->data;
HXLINE(1808)		HX_VARI( Float,ux) = ((Float)0.0);
HXLINE(1809)		HX_VARI( Float,uy) = ((Float)0.0);
HXLINE(1810)		{
HXLINE(1811)			ux = (cur->x - pre->x);
HXLINE(1812)			uy = (cur->y - pre->y);
            		}
HXLINE(1814)		HX_VARI( Float,vx) = ((Float)0.0);
HXLINE(1815)		HX_VARI( Float,vy) = ((Float)0.0);
HXLINE(1816)		{
HXLINE(1817)			vx = (nxt->x - cur->x);
HXLINE(1818)			vy = (nxt->y - cur->y);
            		}
HXLINE(1807)		if ((((vy * ux) - (vx * uy)) < (int)0)) {
HXLINE(1821)			nxt = pre;
            		}
HXLINE(1823)		HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret1,"ret");
HXDLIN(1823)		{
HXLINE(1823)			if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1823)				ret1 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE(1823)				ret1 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1823)				::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret1->next;
HXDLIN(1823)				ret1->next = null();
            			}
HXDLIN(1823)			ret1->forced = false;
            		}
HXDLIN(1823)		{
HXLINE(1823)			ret1->x = cur->x;
HXDLIN(1823)			ret1->y = cur->y;
            		}
HXDLIN(1823)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,obj) = ret1;
HXLINE(1824)		if (hx::IsNull( ret )) {
HXLINE(1824)			ret = (obj->prev = (obj->next = obj));
            		}
            		else {
HXLINE(1826)			obj->prev = ret;
HXLINE(1827)			obj->next = ret->next;
HXLINE(1828)			ret->next->prev = obj;
HXLINE(1829)			ret->next = obj;
            		}
HXLINE(1831)		ret = obj;
HXLINE(1833)		obj->forced = cur->forced;
HXLINE(1834)		while(true){
HXLINE(1835)			cur->links->remove(nxt);
HXLINE(1836)			nxt->links->remove(cur);
HXLINE(1837)			if (hx::IsEq( nxt,fst )) {
HXLINE(1838)				if (cur->links->empty()) {
HXLINE(1839)					vertices->remove(cur);
HXLINE(1840)					{
HXLINE(1841)						HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,o) = cur;
HXLINE(1850)						{
HXLINE(1850)							o->links->clear();
HXDLIN(1850)							o->node = null();
HXDLIN(1850)							o->forced = false;
            						}
HXLINE(1851)						o->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1852)						::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o;
            					}
            				}
HXLINE(1858)				goto _hx_goto_19;
            			}
HXLINE(1861)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_GeomVert,ret2,"ret");
HXDLIN(1861)			{
HXLINE(1861)				if (hx::IsNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )) {
HXLINE(1861)					ret2 =  ::zpp_nape::geom::ZPP_GeomVert_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1861)					ret2 = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool;
HXDLIN(1861)					::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = ret2->next;
HXDLIN(1861)					ret2->next = null();
            				}
HXDLIN(1861)				ret2->forced = false;
            			}
HXDLIN(1861)			{
HXLINE(1861)				ret2->x = nxt->x;
HXDLIN(1861)				ret2->y = nxt->y;
            			}
HXDLIN(1861)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,obj1,"obj") = ret2;
HXLINE(1862)			if (hx::IsNull( ret )) {
HXLINE(1862)				ret = (obj1->prev = (obj1->next = obj1));
            			}
            			else {
HXLINE(1864)				obj1->prev = ret;
HXLINE(1865)				obj1->next = ret->next;
HXLINE(1866)				ret->next->prev = obj1;
HXLINE(1867)				ret->next = obj1;
            			}
HXLINE(1869)			ret = obj1;
HXLINE(1871)			obj1->forced = nxt->forced;
HXLINE(1880)			if (nxt->links->singular()) {
HXLINE(1881)				if (cur->links->empty()) {
HXLINE(1882)					vertices->remove(cur);
HXLINE(1883)					{
HXLINE(1884)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o1,"o") = cur;
HXLINE(1893)						{
HXLINE(1893)							o1->links->clear();
HXDLIN(1893)							o1->node = null();
HXDLIN(1893)							o1->forced = false;
            						}
HXLINE(1894)						o1->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(1895)						::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o1;
            					}
            				}
HXLINE(1901)				cur = nxt;
HXLINE(1902)				nxt = nxt->links->parent->data;
            			}
            			else {
HXLINE(1905)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,min) = null();
HXLINE(1906)				HX_VARI( Float,minl) = ((Float)0.0);
HXLINE(1916)				if (!(nxt->links->empty())) {
HXLINE(1917)					HX_VARI(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,set_ite) = nxt->links->parent;
HXLINE(1918)					while(hx::IsNotNull( set_ite->prev )){
HXLINE(1918)						set_ite = set_ite->prev;
            					}
HXLINE(1919)					while(hx::IsNotNull( set_ite )){
HXLINE(1920)						HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,p) = set_ite->data;
HXLINE(1922)						if (hx::IsNull( min )) {
HXLINE(1923)							min = p;
HXLINE(1925)							HX_VARI_NAME( Float,ux1,"ux") = ((Float)0.0);
HXLINE(1926)							HX_VARI_NAME( Float,uy1,"uy") = ((Float)0.0);
HXLINE(1927)							{
HXLINE(1928)								ux1 = (nxt->x - cur->x);
HXLINE(1929)								uy1 = (nxt->y - cur->y);
            							}
HXLINE(1931)							HX_VARI_NAME( Float,vx1,"vx") = ((Float)0.0);
HXLINE(1932)							HX_VARI_NAME( Float,vy1,"vy") = ((Float)0.0);
HXLINE(1933)							{
HXLINE(1934)								vx1 = (p->x - nxt->x);
HXLINE(1935)								vy1 = (p->y - nxt->y);
            							}
HXLINE(1937)							minl = ((vy1 * ux1) - (vx1 * uy1));
            						}
            						else {
HXLINE(1942)							HX_VARI_NAME( Float,ux2,"ux") = ((Float)0.0);
HXLINE(1943)							HX_VARI_NAME( Float,uy2,"uy") = ((Float)0.0);
HXLINE(1944)							{
HXLINE(1945)								ux2 = (nxt->x - cur->x);
HXLINE(1946)								uy2 = (nxt->y - cur->y);
            							}
HXLINE(1948)							HX_VARI_NAME( Float,vx2,"vx") = ((Float)0.0);
HXLINE(1949)							HX_VARI_NAME( Float,vy2,"vy") = ((Float)0.0);
HXLINE(1950)							{
HXLINE(1951)								vx2 = (p->x - nxt->x);
HXLINE(1952)								vy2 = (p->y - nxt->y);
            							}
HXLINE(1941)							HX_VARI( Float,nleft) = ((vy2 * ux2) - (vx2 * uy2));
HXLINE(1956)							bool _hx_tmp;
HXDLIN(1956)							if ((nleft > (int)0)) {
HXLINE(1956)								_hx_tmp = (minl <= (int)0);
            							}
            							else {
HXLINE(1956)								_hx_tmp = false;
            							}
HXDLIN(1956)							if (_hx_tmp) {
HXLINE(1957)								min = p;
HXLINE(1958)								minl = nleft;
            							}
            							else {
HXLINE(1960)								if (((minl * nleft) >= (int)0)) {
HXLINE(1962)									HX_VARI_NAME( Float,ux3,"ux") = ((Float)0.0);
HXLINE(1963)									HX_VARI_NAME( Float,uy3,"uy") = ((Float)0.0);
HXLINE(1964)									{
HXLINE(1965)										ux3 = (nxt->x - p->x);
HXLINE(1966)										uy3 = (nxt->y - p->y);
            									}
HXLINE(1968)									HX_VARI_NAME( Float,vx3,"vx") = ((Float)0.0);
HXLINE(1969)									HX_VARI_NAME( Float,vy3,"vy") = ((Float)0.0);
HXLINE(1970)									{
HXLINE(1971)										vx3 = (min->x - nxt->x);
HXLINE(1972)										vy3 = (min->y - nxt->y);
            									}
HXLINE(1976)									if ((((vy3 * ux3) - (vx3 * uy3)) > (int)0)) {
HXLINE(1977)										min = p;
HXLINE(1978)										minl = nleft;
            									}
            								}
            							}
            						}
HXLINE(1983)						if (hx::IsNotNull( set_ite->next )) {
HXLINE(1984)							set_ite = set_ite->next;
HXLINE(1985)							while(hx::IsNotNull( set_ite->prev )){
HXLINE(1985)								set_ite = set_ite->prev;
            							}
            						}
            						else {
HXLINE(1988)							while(true){
HXLINE(1988)								bool _hx_tmp1;
HXDLIN(1988)								if (hx::IsNotNull( set_ite->parent )) {
HXLINE(1988)									_hx_tmp1 = hx::IsEq( set_ite,set_ite->parent->next );
            								}
            								else {
HXLINE(1988)									_hx_tmp1 = false;
            								}
HXDLIN(1988)								if (!(_hx_tmp1)) {
HXLINE(1988)									goto _hx_goto_23;
            								}
HXDLIN(1988)								set_ite = set_ite->parent;
            							}
            							_hx_goto_23:;
HXLINE(1989)							set_ite = set_ite->parent;
            						}
            					}
            				}
HXLINE(1994)				if (cur->links->empty()) {
HXLINE(1995)					vertices->remove(cur);
HXLINE(1996)					{
HXLINE(1997)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o2,"o") = cur;
HXLINE(2006)						{
HXLINE(2006)							o2->links->clear();
HXDLIN(2006)							o2->node = null();
HXDLIN(2006)							o2->forced = false;
            						}
HXLINE(2007)						o2->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(2008)						::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o2;
            					}
            				}
HXLINE(2014)				cur = nxt;
HXLINE(2015)				nxt = min;
            			}
            		}
            		_hx_goto_19:;
HXLINE(2026)		{
HXLINE(2027)			vertices->remove(fst);
HXLINE(2028)			{
HXLINE(2038)				{
HXLINE(2038)					fst->links->clear();
HXDLIN(2038)					fst->node = null();
HXDLIN(2038)					fst->forced = false;
            				}
HXLINE(2039)				fst->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(2040)				::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = fst;
            			}
            		}
HXLINE(2046)		rets->add(ret);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ZPP_Simple_obj,clip_polygon,(void))

 ::zpp_nape::util::ZNPList_ZPP_SimpleVert ZPP_Simple_obj::list_vertices;

 ::zpp_nape::util::ZNPList_ZPP_SimpleEvent ZPP_Simple_obj::list_queue;

bool ZPP_Simple_obj::isSimple( ::zpp_nape::geom::ZPP_GeomVert poly){
            	HX_GC_STACKFRAME(&_hx_pos_952c19739c86dba5_2050_isSimple)
            	HX_STACK_ARG(poly,"poly")
HXLINE(2051)		if (hx::IsNull( ::zpp_nape::geom::ZPP_Simple_obj::sweep )) {
HXLINE(2052)			::zpp_nape::geom::ZPP_Simple_obj::sweep =  ::zpp_nape::geom::ZPP_SimpleSweep_obj::__alloc( HX_CTX );
HXLINE(2053)			::zpp_nape::geom::ZPP_Simple_obj::inthash =  ::zpp_nape::util::FastHash2_Hashable2_Boolfalse_obj::__alloc( HX_CTX );
            		}
HXLINE(2055)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_SimpleVert,vertices) = ::zpp_nape::geom::ZPP_Simple_obj::list_vertices;
HXLINE(2056)		if (hx::IsNull( vertices )) {
HXLINE(2056)			vertices = (::zpp_nape::geom::ZPP_Simple_obj::list_vertices =  ::zpp_nape::util::ZNPList_ZPP_SimpleVert_obj::__alloc( HX_CTX ));
            		}
HXLINE(2060)		if (hx::IsNotNull( poly )) {
HXLINE(2061)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,nite) = poly;
HXLINE(2062)			while(true){
HXLINE(2063)				HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,v) = nite;
HXLINE(2066)				Float x = v->x;
HXDLIN(2066)				Float y = v->y;
HXDLIN(2066)				HX_VAR(  ::zpp_nape::geom::ZPP_SimpleVert,ret);
HXDLIN(2066)				if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool )) {
HXLINE(2066)					ret =  ::zpp_nape::geom::ZPP_SimpleVert_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(2066)					ret = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXDLIN(2066)					::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = ret->next;
HXDLIN(2066)					ret->next = null();
            				}
HXDLIN(2066)				{
HXLINE(2066)					ret->x = x;
HXDLIN(2066)					ret->y = y;
            				}
HXDLIN(2066)				vertices->add(ret);
HXLINE(2069)				nite = nite->next;
HXLINE(2062)				if (!(hx::IsNotEq( nite,poly ))) {
HXLINE(2062)					goto _hx_goto_25;
            				}
            			}
            			_hx_goto_25:;
            		}
HXLINE(2074)		HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_SimpleEvent,queue) = ::zpp_nape::geom::ZPP_Simple_obj::list_queue;
HXLINE(2075)		if (hx::IsNull( queue )) {
HXLINE(2075)			queue = (::zpp_nape::geom::ZPP_Simple_obj::list_queue =  ::zpp_nape::util::ZNPList_ZPP_SimpleEvent_obj::__alloc( HX_CTX ));
            		}
HXLINE(2076)		{
HXLINE(2077)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert,cx_ite) = vertices->head;
HXLINE(2078)			HX_VARI(  ::zpp_nape::geom::ZPP_SimpleVert,u) = cx_ite->elt;
HXLINE(2079)			cx_ite = cx_ite->next;
HXLINE(2080)			while(hx::IsNotNull( cx_ite )){
HXLINE(2081)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,v1,"v") = cx_ite->elt;
HXLINE(2082)				{
HXLINE(2083)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret1,"ret");
HXDLIN(2083)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(2083)						ret1 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2083)						ret1 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(2083)						::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret1->next;
HXDLIN(2083)						ret1->next = null();
            					}
HXDLIN(2083)					ret1->vertex = u;
HXDLIN(2083)					HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,e1) = queue->add(ret1);
HXLINE(2084)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret2,"ret");
HXDLIN(2084)					if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(2084)						ret2 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(2084)						ret2 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(2084)						::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret2->next;
HXDLIN(2084)						ret2->next = null();
            					}
HXDLIN(2084)					ret2->vertex = v1;
HXDLIN(2084)					HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,e2) = queue->add(ret2);
HXLINE(2085)					 ::zpp_nape::geom::ZPP_SimpleSeg _hx_tmp;
HXDLIN(2085)					if (::zpp_nape::geom::ZPP_SimpleEvent_obj::less_xy(e1,e2)) {
HXLINE(2086)						e1->type = (int)1;
HXLINE(2087)						e2->type = (int)2;
HXLINE(2085)						_hx_tmp = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(u,v1);
            					}
            					else {
HXLINE(2091)						e1->type = (int)2;
HXLINE(2092)						e2->type = (int)1;
HXLINE(2085)						_hx_tmp = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(v1,u);
            					}
HXDLIN(2085)					e1->segment = (e2->segment = _hx_tmp);
            				}
HXLINE(2096)				u = v1;
HXLINE(2097)				cx_ite = cx_ite->next;
            			}
HXLINE(2099)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,v2,"v") = vertices->head->elt;
HXLINE(2100)			{
HXLINE(2101)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret3,"ret");
HXDLIN(2101)				if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(2101)					ret3 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(2101)					ret3 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(2101)					::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret3->next;
HXDLIN(2101)					ret3->next = null();
            				}
HXDLIN(2101)				ret3->vertex = u;
HXDLIN(2101)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,e11,"e1") = queue->add(ret3);
HXLINE(2102)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,ret4,"ret");
HXDLIN(2102)				if (hx::IsNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )) {
HXLINE(2102)					ret4 =  ::zpp_nape::geom::ZPP_SimpleEvent_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(2102)					ret4 = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXDLIN(2102)					::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = ret4->next;
HXDLIN(2102)					ret4->next = null();
            				}
HXDLIN(2102)				ret4->vertex = v2;
HXDLIN(2102)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,e21,"e2") = queue->add(ret4);
HXLINE(2103)				 ::zpp_nape::geom::ZPP_SimpleSeg _hx_tmp1;
HXDLIN(2103)				if (::zpp_nape::geom::ZPP_SimpleEvent_obj::less_xy(e11,e21)) {
HXLINE(2104)					e11->type = (int)1;
HXLINE(2105)					e21->type = (int)2;
HXLINE(2103)					_hx_tmp1 = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(u,v2);
            				}
            				else {
HXLINE(2109)					e11->type = (int)2;
HXLINE(2110)					e21->type = (int)1;
HXLINE(2103)					_hx_tmp1 = ::zpp_nape::geom::ZPP_SimpleSeg_obj::get(v2,u);
            				}
HXDLIN(2103)				e11->segment = (e21->segment = _hx_tmp1);
            			}
            		}
HXLINE(2115)		{
HXLINE(2116)			HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_SimpleEvent,xxlist) = queue;
HXLINE(2117)			bool _hx_tmp2;
HXDLIN(2117)			if (hx::IsNotNull( xxlist->head )) {
HXLINE(2117)				_hx_tmp2 = hx::IsNotNull( xxlist->head->next );
            			}
            			else {
HXLINE(2117)				_hx_tmp2 = false;
            			}
HXDLIN(2117)			if (_hx_tmp2) {
HXLINE(2118)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,head) = xxlist->head;
HXLINE(2119)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,tail) = null();
HXLINE(2120)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,left) = null();
HXLINE(2121)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,right) = null();
HXLINE(2122)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,nxt) = null();
HXLINE(2123)				HX_VARI( int,listSize) = (int)1;
HXLINE(2124)				HX_VAR( int,numMerges);
HXDLIN(2124)				HX_VAR( int,leftSize);
HXDLIN(2124)				HX_VAR( int,rightSize);
HXLINE(2125)				while(true){
HXLINE(2126)					numMerges = (int)0;
HXLINE(2127)					left = head;
HXLINE(2128)					head = null();
HXDLIN(2128)					tail = head;
HXLINE(2129)					while(hx::IsNotNull( left )){
HXLINE(2130)						numMerges = (numMerges + (int)1);
HXLINE(2131)						right = left;
HXLINE(2132)						leftSize = (int)0;
HXLINE(2133)						rightSize = listSize;
HXLINE(2134)						while(true){
HXLINE(2134)							bool _hx_tmp3;
HXDLIN(2134)							if (hx::IsNotNull( right )) {
HXLINE(2134)								_hx_tmp3 = (leftSize < listSize);
            							}
            							else {
HXLINE(2134)								_hx_tmp3 = false;
            							}
HXDLIN(2134)							if (!(_hx_tmp3)) {
HXLINE(2134)								goto _hx_goto_29;
            							}
HXLINE(2135)							leftSize = (leftSize + (int)1);
HXLINE(2136)							right = right->next;
            						}
            						_hx_goto_29:;
HXLINE(2138)						while(true){
HXLINE(2138)							bool _hx_tmp4;
HXDLIN(2138)							if ((leftSize <= (int)0)) {
HXLINE(2138)								if ((rightSize > (int)0)) {
HXLINE(2138)									_hx_tmp4 = hx::IsNotNull( right );
            								}
            								else {
HXLINE(2138)									_hx_tmp4 = false;
            								}
            							}
            							else {
HXLINE(2138)								_hx_tmp4 = true;
            							}
HXDLIN(2138)							if (!(_hx_tmp4)) {
HXLINE(2138)								goto _hx_goto_30;
            							}
HXLINE(2139)							if ((leftSize == (int)0)) {
HXLINE(2140)								nxt = right;
HXLINE(2141)								right = right->next;
HXLINE(2142)								rightSize = (rightSize - (int)1);
            							}
            							else {
HXLINE(2144)								bool _hx_tmp5;
HXDLIN(2144)								if ((rightSize != (int)0)) {
HXLINE(2144)									_hx_tmp5 = hx::IsNull( right );
            								}
            								else {
HXLINE(2144)									_hx_tmp5 = true;
            								}
HXDLIN(2144)								if (_hx_tmp5) {
HXLINE(2145)									nxt = left;
HXLINE(2146)									left = left->next;
HXLINE(2147)									leftSize = (leftSize - (int)1);
            								}
            								else {
HXLINE(2149)									if (::zpp_nape::geom::ZPP_SimpleEvent_obj::less_xy(left->elt,right->elt)) {
HXLINE(2150)										nxt = left;
HXLINE(2151)										left = left->next;
HXLINE(2152)										leftSize = (leftSize - (int)1);
            									}
            									else {
HXLINE(2155)										nxt = right;
HXLINE(2156)										right = right->next;
HXLINE(2157)										rightSize = (rightSize - (int)1);
            									}
            								}
            							}
HXLINE(2159)							if (hx::IsNotNull( tail )) {
HXLINE(2159)								tail->next = nxt;
            							}
            							else {
HXLINE(2160)								head = nxt;
            							}
HXLINE(2161)							tail = nxt;
            						}
            						_hx_goto_30:;
HXLINE(2163)						left = right;
            					}
HXLINE(2165)					tail->next = null();
HXLINE(2166)					listSize = ((int)listSize << (int)(int)1);
HXLINE(2125)					if (!((numMerges > (int)1))) {
HXLINE(2125)						goto _hx_goto_27;
            					}
            				}
            				_hx_goto_27:;
HXLINE(2169)				{
HXLINE(2169)					xxlist->head = head;
HXDLIN(2169)					xxlist->modified = true;
HXDLIN(2169)					xxlist->pushmod = true;
            				}
            			}
            		}
HXLINE(2172)		HX_VARI_NAME( bool,ret5,"ret") = true;
HXLINE(2173)		while(hx::IsNotNull( queue->head )){
HXLINE(2174)			HX_VARI(  ::zpp_nape::geom::ZPP_SimpleEvent,e) = queue->pop_unsafe();
HXLINE(2175)			HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,seg) = e->segment;
HXLINE(2176)			if ((e->type == (int)1)) {
HXLINE(2177)				::zpp_nape::geom::ZPP_Simple_obj::sweep->add(seg);
HXLINE(2178)				bool _hx_tmp6;
HXDLIN(2178)				if (!(::zpp_nape::geom::ZPP_Simple_obj::sweep->intersect(seg,seg->next))) {
HXLINE(2178)					_hx_tmp6 = ::zpp_nape::geom::ZPP_Simple_obj::sweep->intersect(seg,seg->prev);
            				}
            				else {
HXLINE(2178)					_hx_tmp6 = true;
            				}
HXDLIN(2178)				if (_hx_tmp6) {
HXLINE(2179)					ret5 = false;
HXLINE(2180)					goto _hx_goto_31;
            				}
            			}
            			else {
HXLINE(2183)				if ((e->type == (int)2)) {
HXLINE(2184)					if (::zpp_nape::geom::ZPP_Simple_obj::sweep->intersect(seg->prev,seg->next)) {
HXLINE(2185)						ret5 = false;
HXLINE(2186)						goto _hx_goto_31;
            					}
HXLINE(2188)					::zpp_nape::geom::ZPP_Simple_obj::sweep->remove(seg);
HXLINE(2189)					{
HXLINE(2199)						{
HXLINE(2199)							seg->left = (seg->right = null());
HXDLIN(2199)							seg->prev = null();
HXDLIN(2199)							seg->node = null();
HXDLIN(2199)							seg->vertices->clear();
            						}
HXLINE(2200)						seg->next = ::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(2201)						::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool = seg;
            					}
            				}
            			}
HXLINE(2207)			{
HXLINE(2217)				{
HXLINE(2217)					e->vertex = null();
HXDLIN(2217)					e->segment = (e->segment2 = null());
HXDLIN(2217)					e->node = null();
            				}
HXLINE(2218)				e->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(2219)				::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = e;
            			}
            		}
            		_hx_goto_31:;
HXLINE(2225)		while(hx::IsNotNull( queue->head )){
HXLINE(2226)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,e3,"e") = queue->pop_unsafe();
HXLINE(2227)			if ((e3->type == (int)2)) {
HXLINE(2228)				HX_VARI(  ::zpp_nape::geom::ZPP_SimpleSeg,o) = e3->segment;
HXLINE(2237)				{
HXLINE(2237)					o->left = (o->right = null());
HXDLIN(2237)					o->prev = null();
HXDLIN(2237)					o->node = null();
HXDLIN(2237)					o->vertices->clear();
            				}
HXLINE(2238)				o->next = ::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool;
HXLINE(2239)				::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool = o;
            			}
HXLINE(2244)			{
HXLINE(2254)				{
HXLINE(2254)					e3->vertex = null();
HXDLIN(2254)					e3->segment = (e3->segment2 = null());
HXDLIN(2254)					e3->node = null();
            				}
HXLINE(2255)				e3->next = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool;
HXLINE(2256)				::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = e3;
            			}
            		}
HXLINE(2262)		::zpp_nape::geom::ZPP_Simple_obj::sweep->clear();
HXLINE(2263)		while(hx::IsNotNull( vertices->head )){
HXLINE(2264)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,o1,"o") = vertices->pop_unsafe();
HXLINE(2273)			{
HXLINE(2273)				o1->links->clear();
HXDLIN(2273)				o1->node = null();
HXDLIN(2273)				o1->forced = false;
            			}
HXLINE(2274)			o1->next = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool;
HXLINE(2275)			::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = o1;
            		}
HXLINE(2280)		return ret5;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ZPP_Simple_obj,isSimple,return )


ZPP_Simple_obj::ZPP_Simple_obj()
{
}

bool ZPP_Simple_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ints") ) { outValue = ints; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sweep") ) { outValue = sweep; return true; }
		if (HX_FIELD_EQ(inName,"queue") ) { outValue = queue; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inthash") ) { outValue = inthash; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { outValue = vertices; return true; }
		if (HX_FIELD_EQ(inName,"isSimple") ) { outValue = isSimple_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"decompose") ) { outValue = decompose_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"list_queue") ) { outValue = list_queue; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"clip_polygon") ) { outValue = clip_polygon_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"list_vertices") ) { outValue = list_vertices; return true; }
	}
	return false;
}

bool ZPP_Simple_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ints") ) { ints=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sweep") ) { sweep=ioValue.Cast<  ::zpp_nape::geom::ZPP_SimpleSweep >(); return true; }
		if (HX_FIELD_EQ(inName,"queue") ) { queue=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inthash") ) { inthash=ioValue.Cast<  ::zpp_nape::util::FastHash2_Hashable2_Boolfalse >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=ioValue.Cast<  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"list_queue") ) { list_queue=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_SimpleEvent >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"list_vertices") ) { list_vertices=ioValue.Cast<  ::zpp_nape::util::ZNPList_ZPP_SimpleVert >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ZPP_Simple_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ZPP_Simple_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_SimpleSweep*/ ,(void *) &ZPP_Simple_obj::sweep,HX_HCSTRING("sweep","\xec","\x15","\x0a","\x86")},
	{hx::fsObject /*::zpp_nape::util::FastHash2_Hashable2_Boolfalse*/ ,(void *) &ZPP_Simple_obj::inthash,HX_HCSTRING("inthash","\x3d","\xe0","\x12","\x19")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleVert*/ ,(void *) &ZPP_Simple_obj::vertices,HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent*/ ,(void *) &ZPP_Simple_obj::queue,HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d")},
	{hx::fsObject /*::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent*/ ,(void *) &ZPP_Simple_obj::ints,HX_HCSTRING("ints","\xa4","\x44","\xbb","\x45")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_SimpleVert*/ ,(void *) &ZPP_Simple_obj::list_vertices,HX_HCSTRING("list_vertices","\x3a","\x1f","\x0d","\x1c")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_SimpleEvent*/ ,(void *) &ZPP_Simple_obj::list_queue,HX_HCSTRING("list_queue","\xb0","\x8b","\xa3","\x87")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ZPP_Simple_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::sweep,"sweep");
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::inthash,"inthash");
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::vertices,"vertices");
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::queue,"queue");
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::ints,"ints");
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::list_vertices,"list_vertices");
	HX_MARK_MEMBER_NAME(ZPP_Simple_obj::list_queue,"list_queue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ZPP_Simple_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::sweep,"sweep");
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::inthash,"inthash");
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::vertices,"vertices");
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::queue,"queue");
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::ints,"ints");
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::list_vertices,"list_vertices");
	HX_VISIT_MEMBER_NAME(ZPP_Simple_obj::list_queue,"list_queue");
};

#endif

hx::Class ZPP_Simple_obj::__mClass;

static ::String ZPP_Simple_obj_sStaticFields[] = {
	HX_HCSTRING("sweep","\xec","\x15","\x0a","\x86"),
	HX_HCSTRING("inthash","\x3d","\xe0","\x12","\x19"),
	HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"),
	HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"),
	HX_HCSTRING("ints","\xa4","\x44","\xbb","\x45"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("clip_polygon","\xcb","\x1a","\x4f","\x3f"),
	HX_HCSTRING("list_vertices","\x3a","\x1f","\x0d","\x1c"),
	HX_HCSTRING("list_queue","\xb0","\x8b","\xa3","\x87"),
	HX_HCSTRING("isSimple","\xbc","\x9f","\xe8","\x10"),
	::String(null())
};

void ZPP_Simple_obj::__register()
{
	hx::Object *dummy = new ZPP_Simple_obj;
	ZPP_Simple_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("zpp_nape.geom.ZPP_Simple","\xe8","\x0f","\x57","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ZPP_Simple_obj::__GetStatic;
	__mClass->mSetStaticField = &ZPP_Simple_obj::__SetStatic;
	__mClass->mMarkFunc = ZPP_Simple_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ZPP_Simple_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ZPP_Simple_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ZPP_Simple_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZPP_Simple_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZPP_Simple_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ZPP_Simple_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_952c19739c86dba5_788_boot)
HXLINE( 788)		sweep = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_952c19739c86dba5_789_boot)
HXLINE( 789)		inthash = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_952c19739c86dba5_790_boot)
HXLINE( 790)		vertices = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_952c19739c86dba5_791_boot)
HXLINE( 791)		queue = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_952c19739c86dba5_792_boot)
HXLINE( 792)		ints = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_952c19739c86dba5_2048_boot)
HXLINE(2048)		list_vertices = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_952c19739c86dba5_2049_boot)
HXLINE(2049)		list_queue = null();
            	}
}

} // end namespace zpp_nape
} // end namespace geom
