// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_gametime_Clock
#include <gametime/Clock.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_world_Darkness
#include <world/Darkness.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89f313d76ef05b85_10_new,"world.Darkness","new",0xd9c0ab3b,"world.Darkness.new","world/Darkness.hx",10,0xba1d4234)
HX_DEFINE_STACK_FRAME(_hx_pos_89f313d76ef05b85_27_update,"world.Darkness","update",0x025ea60e,"world.Darkness.update","world/Darkness.hx",27,0xba1d4234)
HX_DEFINE_STACK_FRAME(_hx_pos_89f313d76ef05b85_33_addLightSource,"world.Darkness","addLightSource",0x74872eb5,"world.Darkness.addLightSource","world/Darkness.hx",33,0xba1d4234)
HX_DEFINE_STACK_FRAME(_hx_pos_89f313d76ef05b85_36_updateLightSources,"world.Darkness","updateLightSources",0x9ad3dc30,"world.Darkness.updateLightSources","world/Darkness.hx",36,0xba1d4234)
HX_DEFINE_STACK_FRAME(_hx_pos_89f313d76ef05b85_49_stampLightSources,"world.Darkness","stampLightSources",0x89fa45c0,"world.Darkness.stampLightSources","world/Darkness.hx",49,0xba1d4234)
namespace world{

void Darkness_obj::__construct( ::Dynamic __o_a_x, ::Dynamic __o_a_y){
 ::Dynamic a_x = __o_a_x.Default(0);
 ::Dynamic a_y = __o_a_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_89f313d76ef05b85_10_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_x,"a_x")
            	HX_STACK_ARG(a_y,"a_y")
HXLINE(  15)		this->_nightColor = (int)-16776961;
HXLINE(  14)		this->_dayColor = (int)-1;
HXLINE(  13)		this->_dayCycleCos = ((Float)0);
HXLINE(  12)		this->_lightSources = ::Array_obj< ::Dynamic>::__new();
HXLINE(  19)		super::__construct(a_x,a_y,null());
HXLINE(  20)		::Array< ::Dynamic> _hx_tmp = this->_lightSources;
HXDLIN(  20)		_hx_tmp->push( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("assets/images/light.png",06,cc,d3,54)));
HXLINE(  21)		this->makeGraphic(::flixel::FlxG_obj::camera->width,::flixel::FlxG_obj::camera->height,(int)-16777216,null(),null());
HXLINE(  22)		this->set_blend(::openfl::_legacy::display::BlendMode_obj::MULTIPLY_dyn());
HXLINE(  23)		this->scrollFactor->set_x((int)0);
HXLINE(  24)		this->scrollFactor->set_y((int)0);
            	}

Dynamic Darkness_obj::__CreateEmpty() { return new Darkness_obj; }

void *Darkness_obj::_hx_vtable = 0;

Dynamic Darkness_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Darkness_obj > _hx_result = new Darkness_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Darkness_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x647577db;
	}
}

void Darkness_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_89f313d76ef05b85_27_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  28)		this->super::update(elapsed);
HXLINE(  29)		this->updateLightSources(elapsed);
            	}


void Darkness_obj::addLightSource( ::flixel::FlxSprite a_lightSource){
            	HX_STACKFRAME(&_hx_pos_89f313d76ef05b85_33_addLightSource)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_lightSource,"a_lightSource")
HXLINE(  33)		this->_lightSources->push(a_lightSource);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Darkness_obj,addLightSource,(void))

void Darkness_obj::updateLightSources(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_89f313d76ef05b85_36_updateLightSources)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  37)		HX_VARI(  ::gametime::Clock,_this) = ::Shared_obj::clock;
HXDLIN(  37)		Float _hx_tmp;
HXDLIN(  37)		if ((_this->time > (int)0)) {
HXLINE(  37)			_hx_tmp = ((Float)_this->_timeCounter / (Float)_this->time);
            		}
            		else {
HXLINE(  37)			_hx_tmp = (int)0;
            		}
HXDLIN(  37)		if ((hx::Mod(::Std_obj::_hx_int((_hx_tmp * (int)100)),(int)2) == (int)0)) {
HXLINE(  38)			HX_VARI_NAME(  ::gametime::Clock,_this1,"_this") = ::Shared_obj::clock;
HXDLIN(  38)			Float _hx_tmp1;
HXDLIN(  38)			if ((_this1->time > (int)0)) {
HXLINE(  38)				_hx_tmp1 = ((Float)_this1->_timeCounter / (Float)_this1->time);
            			}
            			else {
HXLINE(  38)				_hx_tmp1 = (int)0;
            			}
HXDLIN(  38)			this->_dayCycleCos = ::Math_obj::abs(::Math_obj::cos((_hx_tmp1 * ::Math_obj::PI)));
HXLINE(  39)			this->_dayColor = ::flixel::util::_FlxColor::FlxColor_Impl__obj::getDarkened((int)-1,::Math_obj::pow(this->_dayCycleCos,(int)3));
HXLINE(  40)			this->_nightColor = ::flixel::util::_FlxColor::FlxColor_Impl__obj::getDarkened((int)-16776961,((int)1 - ::Math_obj::pow(this->_dayCycleCos,(int)3)));
            		}
HXLINE(  42)		HX_VARI( int,lhs) = this->_nightColor;
HXDLIN(  42)		HX_VARI( int,rhs) = this->_dayColor;
HXDLIN(  42)		HX_VARI( int,Red) = (((int)((int)lhs >> (int)(int)16) & (int)(int)255) + ((int)((int)rhs >> (int)(int)16) & (int)(int)255));
HXDLIN(  42)		HX_VARI( int,Green) = (((int)((int)lhs >> (int)(int)8) & (int)(int)255) + ((int)((int)rhs >> (int)(int)8) & (int)(int)255));
HXDLIN(  42)		HX_VARI( int,Blue) = (((int)lhs & (int)(int)255) + ((int)rhs & (int)(int)255));
HXDLIN(  42)		HX_VARI( int,color) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  42)		{
HXLINE(  42)			color = ((int)color & (int)(int)-16711681);
HXDLIN(  42)			int color1;
HXDLIN(  42)			if ((Red > (int)255)) {
HXLINE(  42)				color1 = (int)255;
            			}
            			else {
HXLINE(  42)				if ((Red < (int)0)) {
HXLINE(  42)					color1 = (int)0;
            				}
            				else {
HXLINE(  42)					color1 = Red;
            				}
            			}
HXDLIN(  42)			color = ((int)color | (int)((int)color1 << (int)(int)16));
            		}
HXDLIN(  42)		{
HXLINE(  42)			color = ((int)color & (int)(int)-65281);
HXDLIN(  42)			int color2;
HXDLIN(  42)			if ((Green > (int)255)) {
HXLINE(  42)				color2 = (int)255;
            			}
            			else {
HXLINE(  42)				if ((Green < (int)0)) {
HXLINE(  42)					color2 = (int)0;
            				}
            				else {
HXLINE(  42)					color2 = Green;
            				}
            			}
HXDLIN(  42)			color = ((int)color | (int)((int)color2 << (int)(int)8));
            		}
HXDLIN(  42)		{
HXLINE(  42)			color = ((int)color & (int)(int)-256);
HXDLIN(  42)			int color3;
HXDLIN(  42)			if ((Blue > (int)255)) {
HXLINE(  42)				color3 = (int)255;
            			}
            			else {
HXLINE(  42)				if ((Blue < (int)0)) {
HXLINE(  42)					color3 = (int)0;
            				}
            				else {
HXLINE(  42)					color3 = Blue;
            				}
            			}
HXDLIN(  42)			color = ((int)color | (int)color3);
            		}
HXDLIN(  42)		{
HXLINE(  42)			color = ((int)color & (int)(int)16777215);
HXDLIN(  42)			color = ((int)color | (int)(int)-16777216);
            		}
HXDLIN(  42)		::flixel::util::FlxSpriteUtil_obj::fill(hx::ObjectPtr<OBJ_>(this),color);
HXLINE(  43)		if ((this->_dayCycleCos > ((Float)0.75))) {
HXLINE(  44)			this->stampLightSources(elapsed);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Darkness_obj,updateLightSources,(void))

void Darkness_obj::stampLightSources(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_89f313d76ef05b85_49_stampLightSources)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  49)		HX_VARI( int,_g) = (int)0;
HXDLIN(  49)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->_lightSources;
HXDLIN(  49)		while((_g < _g1->length)){
HXLINE(  49)			HX_VARI(  ::flixel::FlxSprite,_light) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  49)			_g = (_g + (int)1);
HXLINE(  50)			_light->update(elapsed);
HXLINE(  51)			int _hx_tmp = ::Std_obj::_hx_int((_light->x - ::flixel::FlxG_obj::camera->scroll->x));
HXDLIN(  51)			this->stamp(_light,_hx_tmp,::Std_obj::_hx_int((_light->y - ::flixel::FlxG_obj::camera->scroll->y)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Darkness_obj,stampLightSources,(void))


hx::ObjectPtr< Darkness_obj > Darkness_obj::__new( ::Dynamic __o_a_x, ::Dynamic __o_a_y) {
	hx::ObjectPtr< Darkness_obj > __this = new Darkness_obj();
	__this->__construct(__o_a_x,__o_a_y);
	return __this;
}

hx::ObjectPtr< Darkness_obj > Darkness_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_a_x, ::Dynamic __o_a_y) {
	Darkness_obj *__this = (Darkness_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Darkness_obj), true, "world.Darkness"));
	*(void **)__this = Darkness_obj::_hx_vtable;
	__this->__construct(__o_a_x,__o_a_y);
	return __this;
}

Darkness_obj::Darkness_obj()
{
}

void Darkness_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Darkness);
	HX_MARK_MEMBER_NAME(_lightSources,"_lightSources");
	HX_MARK_MEMBER_NAME(_dayCycleCos,"_dayCycleCos");
	HX_MARK_MEMBER_NAME(_dayColor,"_dayColor");
	HX_MARK_MEMBER_NAME(_nightColor,"_nightColor");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Darkness_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_lightSources,"_lightSources");
	HX_VISIT_MEMBER_NAME(_dayCycleCos,"_dayCycleCos");
	HX_VISIT_MEMBER_NAME(_dayColor,"_dayColor");
	HX_VISIT_MEMBER_NAME(_nightColor,"_nightColor");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Darkness_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_dayColor") ) { return hx::Val( _dayColor); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_nightColor") ) { return hx::Val( _nightColor); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_dayCycleCos") ) { return hx::Val( _dayCycleCos); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_lightSources") ) { return hx::Val( _lightSources); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addLightSource") ) { return hx::Val( addLightSource_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stampLightSources") ) { return hx::Val( stampLightSources_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateLightSources") ) { return hx::Val( updateLightSources_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Darkness_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_dayColor") ) { _dayColor=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_nightColor") ) { _nightColor=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_dayCycleCos") ) { _dayCycleCos=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_lightSources") ) { _lightSources=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Darkness_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_lightSources","\xe1","\x9f","\xe9","\xfb"));
	outFields->push(HX_HCSTRING("_dayCycleCos","\xbe","\xc3","\xa7","\xf4"));
	outFields->push(HX_HCSTRING("_dayColor","\xc6","\x14","\xa5","\x9f"));
	outFields->push(HX_HCSTRING("_nightColor","\x8a","\x45","\x81","\x1e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Darkness_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Darkness_obj,_lightSources),HX_HCSTRING("_lightSources","\xe1","\x9f","\xe9","\xfb")},
	{hx::fsFloat,(int)offsetof(Darkness_obj,_dayCycleCos),HX_HCSTRING("_dayCycleCos","\xbe","\xc3","\xa7","\xf4")},
	{hx::fsInt,(int)offsetof(Darkness_obj,_dayColor),HX_HCSTRING("_dayColor","\xc6","\x14","\xa5","\x9f")},
	{hx::fsInt,(int)offsetof(Darkness_obj,_nightColor),HX_HCSTRING("_nightColor","\x8a","\x45","\x81","\x1e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Darkness_obj_sStaticStorageInfo = 0;
#endif

static ::String Darkness_obj_sMemberFields[] = {
	HX_HCSTRING("_lightSources","\xe1","\x9f","\xe9","\xfb"),
	HX_HCSTRING("_dayCycleCos","\xbe","\xc3","\xa7","\xf4"),
	HX_HCSTRING("_dayColor","\xc6","\x14","\xa5","\x9f"),
	HX_HCSTRING("_nightColor","\x8a","\x45","\x81","\x1e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("addLightSource","\xb0","\x01","\x57","\x2c"),
	HX_HCSTRING("updateLightSources","\xab","\x48","\x88","\x91"),
	HX_HCSTRING("stampLightSources","\xa5","\x41","\x42","\xd2"),
	::String(null()) };

static void Darkness_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Darkness_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Darkness_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Darkness_obj::__mClass,"__mClass");
};

#endif

hx::Class Darkness_obj::__mClass;

void Darkness_obj::__register()
{
	hx::Object *dummy = new Darkness_obj;
	Darkness_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("world.Darkness","\xc9","\xf1","\x2d","\xd3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Darkness_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Darkness_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Darkness_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Darkness_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Darkness_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Darkness_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace world
