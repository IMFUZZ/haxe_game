// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbType
#include <nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPoly
#include <nape/geom/GeomPoly.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2Iterator
#include <nape/geom/Vec2Iterator.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2List
#include <nape/geom/Vec2List.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_EdgeList
#include <nape/shape/EdgeList.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ValidationResult
#include <nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomPoly
#include <zpp_nape/geom/ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Vec2
#include <zpp_nape/util/ZNPList_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Vec2
#include <zpp_nape/util/ZNPNode_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Vec2List
#include <zpp_nape/util/ZPP_Vec2List.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_179_new,"nape.shape.Polygon","new",0x3561fe79,"nape.shape.Polygon.new","nape/shape/Polygon.hx",179,0x3fc17059)
HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_279_get_localVerts,"nape.shape.Polygon","get_localVerts",0x9d615807,"nape.shape.Polygon.get_localVerts","nape/shape/Polygon.hx",279,0x3fc17059)
HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_293_get_worldVerts,"nape.shape.Polygon","get_worldVerts",0xd11a65c0,"nape.shape.Polygon.get_worldVerts","nape/shape/Polygon.hx",293,0x3fc17059)
HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_304_get_edges,"nape.shape.Polygon","get_edges",0x0c0710c6,"nape.shape.Polygon.get_edges","nape/shape/Polygon.hx",304,0x3fc17059)
HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_313_validity,"nape.shape.Polygon","validity",0x26a0f9f9,"nape.shape.Polygon.validity","nape/shape/Polygon.hx",313,0x3fc17059)
HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_213_rect,"nape.shape.Polygon","rect",0x830174eb,"nape.shape.Polygon.rect","nape/shape/Polygon.hx",213,0x3fc17059)
HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_235_box,"nape.shape.Polygon","box",0x3558ec24,"nape.shape.Polygon.box","nape/shape/Polygon.hx",235,0x3fc17059)
HX_DEFINE_STACK_FRAME(_hx_pos_4527d7a939562085_257_regular,"nape.shape.Polygon","regular",0x2a4a00f5,"nape.shape.Polygon.regular","nape/shape/Polygon.hx",257,0x3fc17059)
namespace nape{
namespace shape{

void Polygon_obj::__construct( ::Dynamic localVerts, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_4527d7a939562085_179_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(localVerts,"localVerts")
            	HX_STACK_ARG(material,"material")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 183)		this->zpp_inner_zn = null();
HXLINE( 338)		super::__construct();
HXLINE( 343)		this->zpp_inner_zn =  ::zpp_nape::shape::ZPP_Polygon_obj::__alloc( HX_CTX );
HXLINE( 344)		this->zpp_inner_zn->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 345)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 346)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 347)		this->zpp_inner_i = this->zpp_inner;
HXLINE( 348)		this->zpp_inner_i->outer_i = hx::ObjectPtr<OBJ_>(this);
HXLINE( 350)		if (::Std_obj::is(localVerts,hx::ArrayBase::__mClass)) {
HXLINE( 351)			HX_VARI( ::cpp::VirtualArray,lv) = ( (::cpp::VirtualArray)(localVerts) );
HXLINE( 352)			{
HXLINE( 352)				HX_VARI( int,_g) = (int)0;
HXDLIN( 352)				while((_g < lv->get_length())){
HXLINE( 352)					HX_VARI(  ::Dynamic,vite) = lv->__get(_g);
HXDLIN( 352)					_g = (_g + (int)1);
HXLINE( 359)					HX_VARI(  ::nape::geom::Vec2,x) = ( ( ::nape::geom::Vec2)(vite) );
HXLINE( 365)					if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 365)						this->zpp_inner_zn->getlverts();
            					}
HXDLIN( 365)					 ::nape::geom::Vec2List _hx_tmp = this->zpp_inner_zn->wrap_lverts;
HXDLIN( 365)					{
HXLINE( 365)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = x->zpp_inner;
HXDLIN( 365)						if (hx::IsNotNull( _this->_validate )) {
HXLINE( 365)							_this->_validate();
            						}
            					}
HXDLIN( 365)					HX_VARI_NAME( Float,x1,"x") = x->zpp_inner->x;
HXDLIN( 365)					{
HXLINE( 365)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = x->zpp_inner;
HXDLIN( 365)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 365)							_this1->_validate();
            						}
            					}
HXDLIN( 365)					HX_VARI( Float,y) = x->zpp_inner->y;
HXDLIN( 365)					HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 365)					if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 365)						ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            					}
            					else {
HXLINE( 365)						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 365)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 365)						ret->zpp_pool = null();
            					}
HXDLIN( 365)					if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 365)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 365)						{
HXLINE( 365)							if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 365)								ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 365)								ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 365)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 365)								ret1->next = null();
            							}
HXDLIN( 365)							ret1->weak = false;
            						}
HXDLIN( 365)						ret1->_immutable = false;
HXDLIN( 365)						{
HXLINE( 365)							ret1->x = x1;
HXDLIN( 365)							ret1->y = y;
            						}
HXDLIN( 365)						ret->zpp_inner = ret1;
HXDLIN( 365)						ret->zpp_inner->outer = ret;
            					}
            					else {
HXLINE( 365)						bool _hx_tmp1;
HXDLIN( 365)						{
HXLINE( 365)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 365)							if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 365)								_this2->_validate();
            							}
            						}
HXDLIN( 365)						if ((ret->zpp_inner->x == x1)) {
HXLINE( 365)							{
HXLINE( 365)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN( 365)								if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 365)									_this3->_validate();
            								}
            							}
HXDLIN( 365)							_hx_tmp1 = (ret->zpp_inner->y == y);
            						}
            						else {
HXLINE( 365)							_hx_tmp1 = false;
            						}
HXDLIN( 365)						if (!(_hx_tmp1)) {
HXLINE( 365)							{
HXLINE( 365)								ret->zpp_inner->x = x1;
HXDLIN( 365)								ret->zpp_inner->y = y;
            							}
HXDLIN( 365)							{
HXLINE( 365)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret->zpp_inner;
HXDLIN( 365)								if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 365)									_this4->_invalidate(_this4);
            								}
            							}
            						}
            					}
HXDLIN( 365)					ret->zpp_inner->weak = false;
HXDLIN( 365)					_hx_tmp->push(ret);
            				}
            			}
            		}
            		else {
HXLINE( 384)			if (::Std_obj::is(localVerts,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE( 386)				HX_VARI_NAME(  ::nape::geom::Vec2Iterator,_g1,"_g") = ( ( ::nape::geom::Vec2List)(localVerts) )->iterator();
HXDLIN( 386)				while(true){
HXLINE( 386)					_g1->zpp_inner->zpp_inner->valmod();
HXDLIN( 386)					HX_VARI( int,length) = _g1->zpp_inner->zpp_gl();
HXDLIN( 386)					_g1->zpp_critical = true;
HXDLIN( 386)					bool _hx_tmp2;
HXDLIN( 386)					if ((_g1->zpp_i < length)) {
HXLINE( 386)						_hx_tmp2 = true;
            					}
            					else {
HXLINE( 386)						{
HXLINE( 386)							_g1->zpp_next = ::nape::geom::Vec2Iterator_obj::zpp_pool;
HXDLIN( 386)							::nape::geom::Vec2Iterator_obj::zpp_pool = _g1;
HXDLIN( 386)							_g1->zpp_inner = null();
            						}
HXDLIN( 386)						_hx_tmp2 = false;
            					}
HXDLIN( 386)					if (!(_hx_tmp2)) {
HXLINE( 386)						goto _hx_goto_1;
            					}
HXDLIN( 386)					_g1->zpp_critical = false;
HXDLIN( 386)					HX_VARI_NAME(  ::nape::geom::Vec2,x2,"x") = _g1->zpp_inner->at(_g1->zpp_i++);
HXLINE( 395)					if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 395)						this->zpp_inner_zn->getlverts();
            					}
HXDLIN( 395)					 ::nape::geom::Vec2List _hx_tmp3 = this->zpp_inner_zn->wrap_lverts;
HXDLIN( 395)					{
HXLINE( 395)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = x2->zpp_inner;
HXDLIN( 395)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 395)							_this5->_validate();
            						}
            					}
HXDLIN( 395)					HX_VARI_NAME( Float,x3,"x") = x2->zpp_inner->x;
HXDLIN( 395)					{
HXLINE( 395)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = x2->zpp_inner;
HXDLIN( 395)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 395)							_this6->_validate();
            						}
            					}
HXDLIN( 395)					HX_VARI_NAME( Float,y1,"y") = x2->zpp_inner->y;
HXDLIN( 395)					HX_VAR_NAME(  ::nape::geom::Vec2,ret2,"ret");
HXDLIN( 395)					if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 395)						ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            					}
            					else {
HXLINE( 395)						ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 395)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 395)						ret2->zpp_pool = null();
            					}
HXDLIN( 395)					if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 395)						HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret3,"ret");
HXDLIN( 395)						{
HXLINE( 395)							if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 395)								ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            							}
            							else {
HXLINE( 395)								ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 395)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 395)								ret3->next = null();
            							}
HXDLIN( 395)							ret3->weak = false;
            						}
HXDLIN( 395)						ret3->_immutable = false;
HXDLIN( 395)						{
HXLINE( 395)							ret3->x = x3;
HXDLIN( 395)							ret3->y = y1;
            						}
HXDLIN( 395)						ret2->zpp_inner = ret3;
HXDLIN( 395)						ret2->zpp_inner->outer = ret2;
            					}
            					else {
HXLINE( 395)						bool _hx_tmp4;
HXDLIN( 395)						{
HXLINE( 395)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = ret2->zpp_inner;
HXDLIN( 395)							if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 395)								_this7->_validate();
            							}
            						}
HXDLIN( 395)						if ((ret2->zpp_inner->x == x3)) {
HXLINE( 395)							{
HXLINE( 395)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = ret2->zpp_inner;
HXDLIN( 395)								if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 395)									_this8->_validate();
            								}
            							}
HXDLIN( 395)							_hx_tmp4 = (ret2->zpp_inner->y == y1);
            						}
            						else {
HXLINE( 395)							_hx_tmp4 = false;
            						}
HXDLIN( 395)						if (!(_hx_tmp4)) {
HXLINE( 395)							{
HXLINE( 395)								ret2->zpp_inner->x = x3;
HXDLIN( 395)								ret2->zpp_inner->y = y1;
            							}
HXDLIN( 395)							{
HXLINE( 395)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = ret2->zpp_inner;
HXDLIN( 395)								if (hx::IsNotNull( _this9->_invalidate )) {
HXLINE( 395)									_this9->_invalidate(_this9);
            								}
            							}
            						}
            					}
HXDLIN( 395)					ret2->zpp_inner->weak = false;
HXDLIN( 395)					_hx_tmp3->push(ret2);
            				}
            				_hx_goto_1:;
            			}
            			else {
HXLINE( 398)				if (::Std_obj::is(localVerts,hx::ClassOf< ::nape::geom::GeomPoly >())) {
HXLINE( 405)					HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,verts) = ( ( ::nape::geom::GeomPoly)(localVerts) )->zpp_inner->vertices;
HXLINE( 406)					if (hx::IsNotNull( verts )) {
HXLINE( 407)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,vite1,"vite") = verts;
HXLINE( 408)						while(true){
HXLINE( 409)							HX_VARI_NAME( Float,x4,"x") = vite1->x;
HXDLIN( 409)							HX_VARI_NAME( Float,y2,"y") = vite1->y;
HXDLIN( 409)							HX_VAR_NAME(  ::nape::geom::Vec2,ret4,"ret");
HXDLIN( 409)							if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 409)								ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            							}
            							else {
HXLINE( 409)								ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 409)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 409)								ret4->zpp_pool = null();
            							}
HXDLIN( 409)							if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 409)								HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret5,"ret");
HXDLIN( 409)								{
HXLINE( 409)									if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 409)										ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 409)										ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 409)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 409)										ret5->next = null();
            									}
HXDLIN( 409)									ret5->weak = false;
            								}
HXDLIN( 409)								ret5->_immutable = false;
HXDLIN( 409)								{
HXLINE( 409)									ret5->x = x4;
HXDLIN( 409)									ret5->y = y2;
            								}
HXDLIN( 409)								ret4->zpp_inner = ret5;
HXDLIN( 409)								ret4->zpp_inner->outer = ret4;
            							}
            							else {
HXLINE( 409)								bool _hx_tmp5;
HXDLIN( 409)								{
HXLINE( 409)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = ret4->zpp_inner;
HXDLIN( 409)									if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 409)										_this10->_validate();
            									}
            								}
HXDLIN( 409)								if ((ret4->zpp_inner->x == x4)) {
HXLINE( 409)									{
HXLINE( 409)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = ret4->zpp_inner;
HXDLIN( 409)										if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 409)											_this11->_validate();
            										}
            									}
HXDLIN( 409)									_hx_tmp5 = (ret4->zpp_inner->y == y2);
            								}
            								else {
HXLINE( 409)									_hx_tmp5 = false;
            								}
HXDLIN( 409)								if (!(_hx_tmp5)) {
HXLINE( 409)									{
HXLINE( 409)										ret4->zpp_inner->x = x4;
HXDLIN( 409)										ret4->zpp_inner->y = y2;
            									}
HXDLIN( 409)									{
HXLINE( 409)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this12,"_this") = ret4->zpp_inner;
HXDLIN( 409)										if (hx::IsNotNull( _this12->_invalidate )) {
HXLINE( 409)											_this12->_invalidate(_this12);
            										}
            									}
            								}
            							}
HXDLIN( 409)							ret4->zpp_inner->weak = false;
HXDLIN( 409)							HX_VARI_NAME(  ::nape::geom::Vec2,x5,"x") = ret4;
HXLINE( 410)							vite1 = vite1->next;
HXLINE( 411)							if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 411)								this->zpp_inner_zn->getlverts();
            							}
HXDLIN( 411)							 ::nape::geom::Vec2List _hx_tmp6 = this->zpp_inner_zn->wrap_lverts;
HXDLIN( 411)							{
HXLINE( 411)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = x5->zpp_inner;
HXDLIN( 411)								if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 411)									_this13->_validate();
            								}
            							}
HXDLIN( 411)							HX_VARI_NAME( Float,x6,"x") = x5->zpp_inner->x;
HXDLIN( 411)							{
HXLINE( 411)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this14,"_this") = x5->zpp_inner;
HXDLIN( 411)								if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 411)									_this14->_validate();
            								}
            							}
HXDLIN( 411)							HX_VARI_NAME( Float,y3,"y") = x5->zpp_inner->y;
HXDLIN( 411)							HX_VAR_NAME(  ::nape::geom::Vec2,ret6,"ret");
HXDLIN( 411)							if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 411)								ret6 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            							}
            							else {
HXLINE( 411)								ret6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 411)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret6->zpp_pool;
HXDLIN( 411)								ret6->zpp_pool = null();
            							}
HXDLIN( 411)							if (hx::IsNull( ret6->zpp_inner )) {
HXLINE( 411)								HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret7,"ret");
HXDLIN( 411)								{
HXLINE( 411)									if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 411)										ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            									}
            									else {
HXLINE( 411)										ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 411)										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN( 411)										ret7->next = null();
            									}
HXDLIN( 411)									ret7->weak = false;
            								}
HXDLIN( 411)								ret7->_immutable = false;
HXDLIN( 411)								{
HXLINE( 411)									ret7->x = x6;
HXDLIN( 411)									ret7->y = y3;
            								}
HXDLIN( 411)								ret6->zpp_inner = ret7;
HXDLIN( 411)								ret6->zpp_inner->outer = ret6;
            							}
            							else {
HXLINE( 411)								bool _hx_tmp7;
HXDLIN( 411)								{
HXLINE( 411)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this15,"_this") = ret6->zpp_inner;
HXDLIN( 411)									if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 411)										_this15->_validate();
            									}
            								}
HXDLIN( 411)								if ((ret6->zpp_inner->x == x6)) {
HXLINE( 411)									{
HXLINE( 411)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this16,"_this") = ret6->zpp_inner;
HXDLIN( 411)										if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 411)											_this16->_validate();
            										}
            									}
HXDLIN( 411)									_hx_tmp7 = (ret6->zpp_inner->y == y3);
            								}
            								else {
HXLINE( 411)									_hx_tmp7 = false;
            								}
HXDLIN( 411)								if (!(_hx_tmp7)) {
HXLINE( 411)									{
HXLINE( 411)										ret6->zpp_inner->x = x6;
HXDLIN( 411)										ret6->zpp_inner->y = y3;
            									}
HXDLIN( 411)									{
HXLINE( 411)										HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this17,"_this") = ret6->zpp_inner;
HXDLIN( 411)										if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE( 411)											_this17->_invalidate(_this17);
            										}
            									}
            								}
            							}
HXDLIN( 411)							ret6->zpp_inner->weak = false;
HXDLIN( 411)							_hx_tmp6->push(ret6);
HXLINE( 412)							{
HXLINE( 412)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = x5->zpp_inner;
HXDLIN( 412)								x5->zpp_inner->outer = null();
HXDLIN( 412)								x5->zpp_inner = null();
HXDLIN( 412)								{
HXLINE( 412)									x5->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 412)									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = x5;
            								}
HXDLIN( 412)								{
HXLINE( 412)									{
HXLINE( 412)										if (hx::IsNotNull( inner->outer )) {
HXLINE( 412)											inner->outer->zpp_inner = null();
HXDLIN( 412)											inner->outer = null();
            										}
HXDLIN( 412)										inner->_isimmutable = null();
HXDLIN( 412)										inner->_validate = null();
HXDLIN( 412)										inner->_invalidate = null();
            									}
HXDLIN( 412)									inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 412)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            								}
            							}
HXLINE( 408)							if (hx::IsEq( vite1,verts )) {
HXLINE( 408)								goto _hx_goto_2;
            							}
            						}
            						_hx_goto_2:;
            					}
            				}
            			}
            		}
HXLINE( 424)		if (::Std_obj::is(localVerts,hx::ArrayBase::__mClass)) {
HXLINE( 425)			HX_VARI_NAME( ::Array< ::Dynamic>,lv1,"lv") = ( (::Array< ::Dynamic>)(localVerts) );
HXLINE( 426)			HX_VARI( int,i) = (int)0;
HXLINE( 427)			while((i < lv1->length)){
HXLINE( 428)				HX_VARI(  ::nape::geom::Vec2,cur) = lv1->__get(i).StaticCast<  ::nape::geom::Vec2 >();
HXLINE( 429)				bool _hx_tmp8;
HXDLIN( 429)				if (cur->zpp_inner->weak) {
HXLINE( 433)					{
HXLINE( 433)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = cur->zpp_inner;
HXDLIN( 433)						cur->zpp_inner->outer = null();
HXDLIN( 433)						cur->zpp_inner = null();
HXDLIN( 433)						{
HXLINE( 433)							cur->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 433)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = cur;
            						}
HXDLIN( 433)						{
HXLINE( 433)							{
HXLINE( 433)								if (hx::IsNotNull( inner1->outer )) {
HXLINE( 433)									inner1->outer->zpp_inner = null();
HXDLIN( 433)									inner1->outer = null();
            								}
HXDLIN( 433)								inner1->_isimmutable = null();
HXDLIN( 433)								inner1->_validate = null();
HXDLIN( 433)								inner1->_invalidate = null();
            							}
HXDLIN( 433)							inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 433)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            						}
            					}
HXLINE( 429)					_hx_tmp8 = true;
            				}
            				else {
HXLINE( 429)					_hx_tmp8 = false;
            				}
HXDLIN( 429)				if (_hx_tmp8) {
HXLINE( 440)					lv1->removeRange(i,(int)1);
HXLINE( 441)					continue;
            				}
HXLINE( 443)				i = (i + (int)1);
            			}
            		}
            		else {
HXLINE( 471)			if (::Std_obj::is(localVerts,hx::ClassOf< ::nape::geom::Vec2List >())) {
HXLINE( 472)				HX_VARI_NAME(  ::nape::geom::Vec2List,lv2,"lv") = ( ( ::nape::geom::Vec2List)(localVerts) );
HXLINE( 473)				if (hx::IsNotNull( lv2->zpp_inner->_validate )) {
HXLINE( 473)					lv2->zpp_inner->_validate();
            				}
HXLINE( 474)				HX_VARI(  ::zpp_nape::util::ZNPList_ZPP_Vec2,ins) = lv2->zpp_inner->inner;
HXLINE( 475)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,pre) = null();
HXLINE( 476)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,cur1,"cur") = ins->head;
HXLINE( 477)				while(hx::IsNotNull( cur1 )){
HXLINE( 478)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,x7,"x") = cur1->elt;
HXLINE( 479)					if (x7->outer->zpp_inner->weak) {
HXLINE( 482)						cur1 = ins->erase(pre);
HXLINE( 483)						if (x7->outer->zpp_inner->weak) {
HXLINE( 487)							HX_VARI_NAME(  ::nape::geom::Vec2,_this18,"_this") = x7->outer;
HXDLIN( 487)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = _this18->zpp_inner;
HXDLIN( 487)							_this18->zpp_inner->outer = null();
HXDLIN( 487)							_this18->zpp_inner = null();
HXDLIN( 487)							{
HXLINE( 487)								_this18->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 487)								::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this18;
            							}
HXDLIN( 487)							{
HXLINE( 487)								{
HXLINE( 487)									if (hx::IsNotNull( inner2->outer )) {
HXLINE( 487)										inner2->outer->zpp_inner = null();
HXDLIN( 487)										inner2->outer = null();
            									}
HXDLIN( 487)									inner2->_isimmutable = null();
HXDLIN( 487)									inner2->_validate = null();
HXDLIN( 487)									inner2->_invalidate = null();
            								}
HXDLIN( 487)								inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 487)								::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            							}
            						}
            					}
            					else {
HXLINE( 496)						pre = cur1;
HXLINE( 497)						cur1 = cur1->next;
            					}
            				}
            			}
            		}
HXLINE( 502)		if (hx::IsNull( material )) {
HXLINE( 503)			if (hx::IsNull( ::zpp_nape::phys::ZPP_Material_obj::zpp_pool )) {
HXLINE( 504)				this->zpp_inner->material =  ::zpp_nape::phys::ZPP_Material_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 510)				this->zpp_inner->material = ::zpp_nape::phys::ZPP_Material_obj::zpp_pool;
HXLINE( 511)				::zpp_nape::phys::ZPP_Material_obj::zpp_pool = this->zpp_inner->material->next;
HXLINE( 512)				this->zpp_inner->material->next = null();
            			}
            		}
            		else {
HXLINE( 519)			{
HXLINE( 519)				this->zpp_inner->immutable_midstep(HX_("Shape::material",a8,cd,a4,b9));
HXDLIN( 519)				this->zpp_inner->setMaterial(material->zpp_inner);
            			}
HXDLIN( 519)			this->zpp_inner->material->wrapper();
            		}
HXLINE( 520)		if (hx::IsNull( filter )) {
HXLINE( 521)			if (hx::IsNull( ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool )) {
HXLINE( 522)				this->zpp_inner->filter =  ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 528)				this->zpp_inner->filter = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool;
HXLINE( 529)				::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = this->zpp_inner->filter->next;
HXLINE( 530)				this->zpp_inner->filter->next = null();
            			}
            		}
            		else {
HXLINE( 537)			{
HXLINE( 537)				this->zpp_inner->immutable_midstep(HX_("Shape::filter",79,9e,c6,67));
HXDLIN( 537)				this->zpp_inner->setFilter(filter->zpp_inner);
            			}
HXDLIN( 537)			this->zpp_inner->filter->wrapper();
            		}
HXLINE( 538)		this->zpp_inner_i->insert_cbtype(::zpp_nape::callbacks::ZPP_CbType_obj::ANY_SHAPE->zpp_inner);
            	}

Dynamic Polygon_obj::__CreateEmpty() { return new Polygon_obj; }

void *Polygon_obj::_hx_vtable = 0;

Dynamic Polygon_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Polygon_obj > _hx_result = new Polygon_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Polygon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x643c1bb3) {
		if (inClassId<=(int)0x13534801) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x13534801;
		} else {
			return inClassId==(int)0x643c1bb3;
		}
	} else {
		return inClassId==(int)0x7e0877dc;
	}
}

 ::nape::geom::Vec2List Polygon_obj::get_localVerts(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_279_get_localVerts)
            	HX_STACK_THIS(this)
HXLINE( 280)		if (hx::IsNull( this->zpp_inner_zn->wrap_lverts )) {
HXLINE( 280)			this->zpp_inner_zn->getlverts();
            		}
HXLINE( 281)		return this->zpp_inner_zn->wrap_lverts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,get_localVerts,return )

 ::nape::geom::Vec2List Polygon_obj::get_worldVerts(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_293_get_worldVerts)
            	HX_STACK_THIS(this)
HXLINE( 294)		if (hx::IsNull( this->zpp_inner_zn->wrap_gverts )) {
HXLINE( 294)			this->zpp_inner_zn->getgverts();
            		}
HXLINE( 295)		return this->zpp_inner_zn->wrap_gverts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,get_worldVerts,return )

 ::nape::shape::EdgeList Polygon_obj::get_edges(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_304_get_edges)
            	HX_STACK_THIS(this)
HXLINE( 305)		if (hx::IsNull( this->zpp_inner_zn->wrap_edges )) {
HXLINE( 305)			this->zpp_inner_zn->getedges();
            		}
HXLINE( 306)		return this->zpp_inner_zn->wrap_edges;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,get_edges,return )

 ::nape::shape::ValidationResult Polygon_obj::validity(){
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_313_validity)
            	HX_STACK_THIS(this)
HXLINE( 313)		return this->zpp_inner_zn->valid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,validity,return )

::Array< ::Dynamic> Polygon_obj::rect(Float x,Float y,Float width,Float height,hx::Null< bool >  __o_weak){
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4527d7a939562085_213_rect)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(weak,"weak")
HXLINE( 213)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 213)			ret->zpp_pool = null();
            		}
HXDLIN( 213)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 213)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 213)					ret1->next = null();
            				}
HXDLIN( 213)				ret1->weak = false;
            			}
HXDLIN( 213)			ret1->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret1->x = x;
HXDLIN( 213)				ret1->y = y;
            			}
HXDLIN( 213)			ret->zpp_inner = ret1;
HXDLIN( 213)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp;
HXDLIN( 213)			{
HXLINE( 213)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 213)					_this->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret->zpp_inner->x == x)) {
HXLINE( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 213)						_this1->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 213)				_hx_tmp = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp)) {
HXLINE( 213)				{
HXLINE( 213)					ret->zpp_inner->x = x;
HXDLIN( 213)					ret->zpp_inner->y = y;
            				}
HXDLIN( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 213)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret->zpp_inner->weak = weak;
HXDLIN( 213)		HX_VARI_NAME( Float,x1,"x") = (x + width);
HXDLIN( 213)		HX_VAR_NAME(  ::nape::geom::Vec2,ret2,"ret");
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 213)			ret2->zpp_pool = null();
            		}
HXDLIN( 213)		if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 213)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret3,"ret");
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 213)					ret3->next = null();
            				}
HXDLIN( 213)				ret3->weak = false;
            			}
HXDLIN( 213)			ret3->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret3->x = x1;
HXDLIN( 213)				ret3->y = y;
            			}
HXDLIN( 213)			ret2->zpp_inner = ret3;
HXDLIN( 213)			ret2->zpp_inner->outer = ret2;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp1;
HXDLIN( 213)			{
HXLINE( 213)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret2->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 213)					_this3->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret2->zpp_inner->x == x1)) {
HXLINE( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret2->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 213)						_this4->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp1 = (ret2->zpp_inner->y == y);
            			}
            			else {
HXLINE( 213)				_hx_tmp1 = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp1)) {
HXLINE( 213)				{
HXLINE( 213)					ret2->zpp_inner->x = x1;
HXDLIN( 213)					ret2->zpp_inner->y = y;
            				}
HXDLIN( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret2->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 213)						_this5->_invalidate(_this5);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret2->zpp_inner->weak = weak;
HXDLIN( 213)		HX_VARI_NAME( Float,x2,"x") = (x + width);
HXDLIN( 213)		HX_VARI_NAME( Float,y1,"y") = (y + height);
HXDLIN( 213)		HX_VAR_NAME(  ::nape::geom::Vec2,ret4,"ret");
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 213)			ret4->zpp_pool = null();
            		}
HXDLIN( 213)		if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 213)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret5,"ret");
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 213)					ret5->next = null();
            				}
HXDLIN( 213)				ret5->weak = false;
            			}
HXDLIN( 213)			ret5->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret5->x = x2;
HXDLIN( 213)				ret5->y = y1;
            			}
HXDLIN( 213)			ret4->zpp_inner = ret5;
HXDLIN( 213)			ret4->zpp_inner->outer = ret4;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp2;
HXDLIN( 213)			{
HXLINE( 213)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret4->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 213)					_this6->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret4->zpp_inner->x == x2)) {
HXLINE( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = ret4->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 213)						_this7->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp2 = (ret4->zpp_inner->y == y1);
            			}
            			else {
HXLINE( 213)				_hx_tmp2 = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp2)) {
HXLINE( 213)				{
HXLINE( 213)					ret4->zpp_inner->x = x2;
HXDLIN( 213)					ret4->zpp_inner->y = y1;
            				}
HXDLIN( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = ret4->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 213)						_this8->_invalidate(_this8);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret4->zpp_inner->weak = weak;
HXDLIN( 213)		HX_VARI_NAME( Float,y2,"y") = (y + height);
HXDLIN( 213)		HX_VAR_NAME(  ::nape::geom::Vec2,ret6,"ret");
HXDLIN( 213)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 213)			ret6 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 213)			ret6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 213)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret6->zpp_pool;
HXDLIN( 213)			ret6->zpp_pool = null();
            		}
HXDLIN( 213)		if (hx::IsNull( ret6->zpp_inner )) {
HXLINE( 213)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret7,"ret");
HXDLIN( 213)			{
HXLINE( 213)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 213)					ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 213)					ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 213)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN( 213)					ret7->next = null();
            				}
HXDLIN( 213)				ret7->weak = false;
            			}
HXDLIN( 213)			ret7->_immutable = false;
HXDLIN( 213)			{
HXLINE( 213)				ret7->x = x;
HXDLIN( 213)				ret7->y = y2;
            			}
HXDLIN( 213)			ret6->zpp_inner = ret7;
HXDLIN( 213)			ret6->zpp_inner->outer = ret6;
            		}
            		else {
HXLINE( 213)			bool _hx_tmp3;
HXDLIN( 213)			{
HXLINE( 213)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = ret6->zpp_inner;
HXDLIN( 213)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 213)					_this9->_validate();
            				}
            			}
HXDLIN( 213)			if ((ret6->zpp_inner->x == x)) {
HXLINE( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = ret6->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 213)						_this10->_validate();
            					}
            				}
HXDLIN( 213)				_hx_tmp3 = (ret6->zpp_inner->y == y2);
            			}
            			else {
HXLINE( 213)				_hx_tmp3 = false;
            			}
HXDLIN( 213)			if (!(_hx_tmp3)) {
HXLINE( 213)				{
HXLINE( 213)					ret6->zpp_inner->x = x;
HXDLIN( 213)					ret6->zpp_inner->y = y2;
            				}
HXDLIN( 213)				{
HXLINE( 213)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = ret6->zpp_inner;
HXDLIN( 213)					if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 213)						_this11->_invalidate(_this11);
            					}
            				}
            			}
            		}
HXDLIN( 213)		ret6->zpp_inner->weak = weak;
HXDLIN( 213)		return ::Array_obj< ::Dynamic>::__new(4)->init(0,ret)->init(1,ret2)->init(2,ret4)->init(3,ret6);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Polygon_obj,rect,return )

::Array< ::Dynamic> Polygon_obj::box(Float width,Float height,hx::Null< bool >  __o_weak){
bool weak = __o_weak.Default(false);
            	HX_STACKFRAME(&_hx_pos_4527d7a939562085_235_box)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(weak,"weak")
HXLINE( 235)		return ::nape::shape::Polygon_obj::rect(((Float)-(width) / (Float)(int)2),((Float)-(height) / (Float)(int)2),width,height,weak);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Polygon_obj,box,return )

::Array< ::Dynamic> Polygon_obj::regular(Float xRadius,Float yRadius,int edgeCount,hx::Null< Float >  __o_angleOffset,hx::Null< bool >  __o_weak){
Float angleOffset = __o_angleOffset.Default(((Float)0.0));
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4527d7a939562085_257_regular)
            	HX_STACK_ARG(xRadius,"xRadius")
            	HX_STACK_ARG(yRadius,"yRadius")
            	HX_STACK_ARG(edgeCount,"edgeCount")
            	HX_STACK_ARG(angleOffset,"angleOffset")
            	HX_STACK_ARG(weak,"weak")
HXLINE( 261)		HX_VARI( ::Array< ::Dynamic>,ret) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 262)		HX_VARI( Float,dangle) = ((Float)(::Math_obj::PI * (int)2) / (Float)edgeCount);
HXLINE( 263)		{
HXLINE( 263)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 263)			while((_g1 < edgeCount)){
HXLINE( 263)				_g1 = (_g1 + (int)1);
HXLINE( 264)				HX_VARI( Float,ang) = (((_g1 - (int)1) * dangle) + angleOffset);
HXLINE( 265)				HX_VARI( Float,x) = (::Math_obj::cos(ang) * xRadius);
HXDLIN( 265)				HX_VARI( Float,y) = (::Math_obj::sin(ang) * yRadius);
HXDLIN( 265)				HX_VAR_NAME(  ::nape::geom::Vec2,ret1,"ret");
HXDLIN( 265)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 265)					ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 265)					ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 265)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN( 265)					ret1->zpp_pool = null();
            				}
HXDLIN( 265)				if (hx::IsNull( ret1->zpp_inner )) {
HXLINE( 265)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret2,"ret");
HXDLIN( 265)					{
HXLINE( 265)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 265)							ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 265)							ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 265)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN( 265)							ret2->next = null();
            						}
HXDLIN( 265)						ret2->weak = false;
            					}
HXDLIN( 265)					ret2->_immutable = false;
HXDLIN( 265)					{
HXLINE( 265)						ret2->x = x;
HXDLIN( 265)						ret2->y = y;
            					}
HXDLIN( 265)					ret1->zpp_inner = ret2;
HXDLIN( 265)					ret1->zpp_inner->outer = ret1;
            				}
            				else {
HXLINE( 265)					bool _hx_tmp;
HXDLIN( 265)					{
HXLINE( 265)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret1->zpp_inner;
HXDLIN( 265)						if (hx::IsNotNull( _this->_validate )) {
HXLINE( 265)							_this->_validate();
            						}
            					}
HXDLIN( 265)					if ((ret1->zpp_inner->x == x)) {
HXLINE( 265)						{
HXLINE( 265)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret1->zpp_inner;
HXDLIN( 265)							if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 265)								_this1->_validate();
            							}
            						}
HXDLIN( 265)						_hx_tmp = (ret1->zpp_inner->y == y);
            					}
            					else {
HXLINE( 265)						_hx_tmp = false;
            					}
HXDLIN( 265)					if (!(_hx_tmp)) {
HXLINE( 265)						{
HXLINE( 265)							ret1->zpp_inner->x = x;
HXDLIN( 265)							ret1->zpp_inner->y = y;
            						}
HXDLIN( 265)						{
HXLINE( 265)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret1->zpp_inner;
HXDLIN( 265)							if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 265)								_this2->_invalidate(_this2);
            							}
            						}
            					}
            				}
HXDLIN( 265)				ret1->zpp_inner->weak = weak;
HXLINE( 266)				ret->push(ret1);
            			}
            		}
HXLINE( 268)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Polygon_obj,regular,return )


hx::ObjectPtr< Polygon_obj > Polygon_obj::__new( ::Dynamic localVerts, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter) {
	hx::ObjectPtr< Polygon_obj > __this = new Polygon_obj();
	__this->__construct(localVerts,material,filter);
	return __this;
}

hx::ObjectPtr< Polygon_obj > Polygon_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic localVerts, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter) {
	Polygon_obj *__this = (Polygon_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Polygon_obj), true, "nape.shape.Polygon"));
	*(void **)__this = Polygon_obj::_hx_vtable;
	__this->__construct(localVerts,material,filter);
	return __this;
}

Polygon_obj::Polygon_obj()
{
}

void Polygon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Polygon);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::shape::Shape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Polygon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::shape::Shape_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Polygon_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"edges") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_edges()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validity") ) { return hx::Val( validity_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_edges") ) { return hx::Val( get_edges_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"localVerts") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_localVerts()); }
		if (HX_FIELD_EQ(inName,"worldVerts") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_worldVerts()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_localVerts") ) { return hx::Val( get_localVerts_dyn()); }
		if (HX_FIELD_EQ(inName,"get_worldVerts") ) { return hx::Val( get_worldVerts_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Polygon_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { outValue = box_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { outValue = rect_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"regular") ) { outValue = regular_dyn(); return true; }
	}
	return false;
}

hx::Val Polygon_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::shape::ZPP_Polygon >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Polygon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"));
	outFields->push(HX_HCSTRING("localVerts","\x37","\x89","\x55","\x6c"));
	outFields->push(HX_HCSTRING("worldVerts","\xf0","\x96","\x0e","\xa0"));
	outFields->push(HX_HCSTRING("edges","\x96","\x6d","\xe0","\x69"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Polygon_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::shape::ZPP_Polygon*/ ,(int)offsetof(Polygon_obj,zpp_inner_zn),HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Polygon_obj_sStaticStorageInfo = 0;
#endif

static ::String Polygon_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"),
	HX_HCSTRING("get_localVerts","\x80","\x11","\x4b","\xe2"),
	HX_HCSTRING("get_worldVerts","\x39","\x1f","\x04","\x16"),
	HX_HCSTRING("get_edges","\xed","\xc9","\x89","\xad"),
	HX_HCSTRING("validity","\xb2","\xe2","\xe9","\x04"),
	::String(null()) };

static void Polygon_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Polygon_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Polygon_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Polygon_obj::__mClass,"__mClass");
};

#endif

hx::Class Polygon_obj::__mClass;

static ::String Polygon_obj_sStaticFields[] = {
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("box","\x0b","\xbe","\x4a","\x00"),
	HX_HCSTRING("regular","\x5c","\x52","\x88","\x82"),
	::String(null())
};

void Polygon_obj::__register()
{
	hx::Object *dummy = new Polygon_obj;
	Polygon_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.shape.Polygon","\x07","\x4e","\x19","\xcd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Polygon_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Polygon_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Polygon_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Polygon_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Polygon_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Polygon_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Polygon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Polygon_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace shape
