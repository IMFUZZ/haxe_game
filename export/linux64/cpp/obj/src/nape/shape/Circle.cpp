// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_CbType
#include <nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5de3f03f52931936_177_new,"nape.shape.Circle","new",0x5e7f0595,"nape.shape.Circle.new","nape/shape/Circle.hx",177,0xc2732479)
HX_DEFINE_STACK_FRAME(_hx_pos_5de3f03f52931936_318_get_radius,"nape.shape.Circle","get_radius",0x77c54b86,"nape.shape.Circle.get_radius","nape/shape/Circle.hx",318,0xc2732479)
HX_DEFINE_STACK_FRAME(_hx_pos_5de3f03f52931936_320_set_radius,"nape.shape.Circle","set_radius",0x7b42e9fa,"nape.shape.Circle.set_radius","nape/shape/Circle.hx",320,0xc2732479)
namespace nape{
namespace shape{

void Circle_obj::__construct(Float radius, ::nape::geom::Vec2 localCOM, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_5de3f03f52931936_177_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(localCOM,"localCOM")
            	HX_STACK_ARG(material,"material")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 181)		this->zpp_inner_zn = null();
HXLINE( 203)		super::__construct();
HXLINE( 205)		this->zpp_inner_zn =  ::zpp_nape::shape::ZPP_Circle_obj::__alloc( HX_CTX );
HXLINE( 206)		this->zpp_inner_zn->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 207)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 208)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 209)		this->zpp_inner_i = this->zpp_inner;
HXLINE( 210)		this->zpp_inner_i->outer_i = hx::ObjectPtr<OBJ_>(this);
HXLINE( 211)		{
HXLINE( 211)			this->zpp_inner->immutable_midstep(HX_("Circle::radius",42,29,7d,17));
HXDLIN( 211)			if ((radius != this->zpp_inner_zn->radius)) {
HXLINE( 211)				this->zpp_inner_zn->radius = radius;
HXDLIN( 211)				this->zpp_inner_zn->invalidate_radius();
            			}
            		}
HXLINE( 212)		if (hx::IsNull( localCOM )) {
HXLINE( 213)			this->zpp_inner->localCOMx = (int)0;
HXLINE( 214)			this->zpp_inner->localCOMy = (int)0;
            		}
            		else {
HXLINE( 238)			{
HXLINE( 239)				{
HXLINE( 239)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = localCOM->zpp_inner;
HXDLIN( 239)					if (hx::IsNotNull( _this->_validate )) {
HXLINE( 239)						_this->_validate();
            					}
            				}
HXDLIN( 239)				this->zpp_inner->localCOMx = localCOM->zpp_inner->x;
HXLINE( 240)				{
HXLINE( 240)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = localCOM->zpp_inner;
HXDLIN( 240)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 240)						_this1->_validate();
            					}
            				}
HXDLIN( 240)				this->zpp_inner->localCOMy = localCOM->zpp_inner->y;
            			}
HXLINE( 258)			if (localCOM->zpp_inner->weak) {
HXLINE( 262)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = localCOM->zpp_inner;
HXDLIN( 262)				localCOM->zpp_inner->outer = null();
HXDLIN( 262)				localCOM->zpp_inner = null();
HXDLIN( 262)				{
HXLINE( 262)					localCOM->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 262)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = localCOM;
            				}
HXDLIN( 262)				{
HXLINE( 262)					{
HXLINE( 262)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 262)							inner->outer->zpp_inner = null();
HXDLIN( 262)							inner->outer = null();
            						}
HXDLIN( 262)						inner->_isimmutable = null();
HXDLIN( 262)						inner->_validate = null();
HXDLIN( 262)						inner->_invalidate = null();
            					}
HXDLIN( 262)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 262)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 270)		if (hx::IsNull( material )) {
HXLINE( 271)			if (hx::IsNull( ::zpp_nape::phys::ZPP_Material_obj::zpp_pool )) {
HXLINE( 272)				this->zpp_inner->material =  ::zpp_nape::phys::ZPP_Material_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 278)				this->zpp_inner->material = ::zpp_nape::phys::ZPP_Material_obj::zpp_pool;
HXLINE( 279)				::zpp_nape::phys::ZPP_Material_obj::zpp_pool = this->zpp_inner->material->next;
HXLINE( 280)				this->zpp_inner->material->next = null();
            			}
            		}
            		else {
HXLINE( 287)			{
HXLINE( 287)				this->zpp_inner->immutable_midstep(HX_("Shape::material",a8,cd,a4,b9));
HXDLIN( 287)				this->zpp_inner->setMaterial(material->zpp_inner);
            			}
HXDLIN( 287)			this->zpp_inner->material->wrapper();
            		}
HXLINE( 288)		if (hx::IsNull( filter )) {
HXLINE( 289)			if (hx::IsNull( ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool )) {
HXLINE( 290)				this->zpp_inner->filter =  ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 296)				this->zpp_inner->filter = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool;
HXLINE( 297)				::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = this->zpp_inner->filter->next;
HXLINE( 298)				this->zpp_inner->filter->next = null();
            			}
            		}
            		else {
HXLINE( 305)			{
HXLINE( 305)				this->zpp_inner->immutable_midstep(HX_("Shape::filter",79,9e,c6,67));
HXDLIN( 305)				this->zpp_inner->setFilter(filter->zpp_inner);
            			}
HXDLIN( 305)			this->zpp_inner->filter->wrapper();
            		}
HXLINE( 306)		this->zpp_inner_i->insert_cbtype(::zpp_nape::callbacks::ZPP_CbType_obj::ANY_SHAPE->zpp_inner);
            	}

Dynamic Circle_obj::__CreateEmpty() { return new Circle_obj; }

void *Circle_obj::_hx_vtable = 0;

Dynamic Circle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Circle_obj > _hx_result = new Circle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Circle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x643c1bb3) {
		if (inClassId<=(int)0x05b27a69) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x05b27a69;
		} else {
			return inClassId==(int)0x643c1bb3;
		}
	} else {
		return inClassId==(int)0x7e0877dc;
	}
}

Float Circle_obj::get_radius(){
            	HX_STACKFRAME(&_hx_pos_5de3f03f52931936_318_get_radius)
            	HX_STACK_THIS(this)
HXLINE( 318)		return this->zpp_inner_zn->radius;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Circle_obj,get_radius,return )

Float Circle_obj::set_radius(Float radius){
            	HX_STACKFRAME(&_hx_pos_5de3f03f52931936_320_set_radius)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(radius,"radius")
HXLINE( 321)		{
HXLINE( 322)			this->zpp_inner->immutable_midstep(HX_("Circle::radius",42,29,7d,17));
HXLINE( 326)			if ((radius != this->zpp_inner_zn->radius)) {
HXLINE( 332)				this->zpp_inner_zn->radius = radius;
HXLINE( 333)				this->zpp_inner_zn->invalidate_radius();
            			}
            		}
HXLINE( 336)		return this->zpp_inner_zn->radius;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Circle_obj,set_radius,return )


hx::ObjectPtr< Circle_obj > Circle_obj::__new(Float radius, ::nape::geom::Vec2 localCOM, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter) {
	hx::ObjectPtr< Circle_obj > __this = new Circle_obj();
	__this->__construct(radius,localCOM,material,filter);
	return __this;
}

hx::ObjectPtr< Circle_obj > Circle_obj::__alloc(hx::Ctx *_hx_ctx,Float radius, ::nape::geom::Vec2 localCOM, ::nape::phys::Material material, ::nape::dynamics::InteractionFilter filter) {
	Circle_obj *__this = (Circle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Circle_obj), true, "nape.shape.Circle"));
	*(void **)__this = Circle_obj::_hx_vtable;
	__this->__construct(radius,localCOM,material,filter);
	return __this;
}

Circle_obj::Circle_obj()
{
}

void Circle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Circle);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::shape::Shape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Circle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::shape::Shape_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Circle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_radius()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_radius") ) { return hx::Val( get_radius_dyn()); }
		if (HX_FIELD_EQ(inName,"set_radius") ) { return hx::Val( set_radius_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Circle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_radius(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::shape::ZPP_Circle >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Circle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"));
	outFields->push(HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Circle_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::shape::ZPP_Circle*/ ,(int)offsetof(Circle_obj,zpp_inner_zn),HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Circle_obj_sStaticStorageInfo = 0;
#endif

static ::String Circle_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"),
	HX_HCSTRING("get_radius","\x1b","\x40","\x7e","\xa1"),
	HX_HCSTRING("set_radius","\x8f","\xde","\xfb","\xa4"),
	::String(null()) };

static void Circle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Circle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Circle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Circle_obj::__mClass,"__mClass");
};

#endif

hx::Class Circle_obj::__mClass;

void Circle_obj::__register()
{
	hx::Object *dummy = new Circle_obj;
	Circle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.shape.Circle","\x23","\x97","\xa5","\xe0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Circle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Circle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Circle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Circle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Circle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Circle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace shape
