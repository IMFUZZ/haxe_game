// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_shape_ValidationResult
#include <nape/shape/ValidationResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f37425f8bc62450_181_new,"nape.shape.ValidationResult","new",0x77e8ee3b,"nape.shape.ValidationResult.new","nape/shape/ValidationResult.hx",181,0xd4dffc13)
HX_DEFINE_STACK_FRAME(_hx_pos_6f37425f8bc62450_192_toString,"nape.shape.ValidationResult","toString",0x0e5898f1,"nape.shape.ValidationResult.toString","nape/shape/ValidationResult.hx",192,0xd4dffc13)
HX_DEFINE_STACK_FRAME(_hx_pos_6f37425f8bc62450_203_get_VALID,"nape.shape.ValidationResult","get_VALID",0x49f57d4e,"nape.shape.ValidationResult.get_VALID","nape/shape/ValidationResult.hx",203,0xd4dffc13)
HX_DEFINE_STACK_FRAME(_hx_pos_6f37425f8bc62450_216_get_DEGENERATE,"nape.shape.ValidationResult","get_DEGENERATE",0x3caf6604,"nape.shape.ValidationResult.get_DEGENERATE","nape/shape/ValidationResult.hx",216,0xd4dffc13)
HX_DEFINE_STACK_FRAME(_hx_pos_6f37425f8bc62450_229_get_CONCAVE,"nape.shape.ValidationResult","get_CONCAVE",0x76050f61,"nape.shape.ValidationResult.get_CONCAVE","nape/shape/ValidationResult.hx",229,0xd4dffc13)
HX_DEFINE_STACK_FRAME(_hx_pos_6f37425f8bc62450_242_get_SELF_INTERSECTING,"nape.shape.ValidationResult","get_SELF_INTERSECTING",0xf13da4a8,"nape.shape.ValidationResult.get_SELF_INTERSECTING","nape/shape/ValidationResult.hx",242,0xd4dffc13)
namespace nape{
namespace shape{

void ValidationResult_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6f37425f8bc62450_181_new)
            	HX_STACK_THIS(this)
            	}

Dynamic ValidationResult_obj::__CreateEmpty() { return new ValidationResult_obj; }

void *ValidationResult_obj::_hx_vtable = 0;

Dynamic ValidationResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ValidationResult_obj > _hx_result = new ValidationResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ValidationResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6330ab8f;
}

::String ValidationResult_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_6f37425f8bc62450_192_toString)
            	HX_STACK_THIS(this)
HXLINE( 192)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 192)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 192)			return HX_("VALID",dc,ac,a6,af);
            		}
            		else {
HXLINE( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE )) {
HXLINE( 193)				return HX_("DEGENERATE",b6,13,01,22);
            			}
            			else {
HXLINE( 194)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE )) {
HXLINE( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 194)				if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE )) {
HXLINE( 194)					return HX_("CONCAVE",6f,be,0b,8e);
            				}
            				else {
HXLINE( 195)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING )) {
HXLINE( 195)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 195)						::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXDLIN( 195)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN( 195)					if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING )) {
HXLINE( 195)						return HX_("SELF_INTERSECTING",36,f1,3e,a4);
            					}
            					else {
HXLINE( 196)						return HX_("",00,00,00,00);
            					}
            				}
            			}
            		}
HXLINE( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ValidationResult_obj,toString,return )

 ::nape::shape::ValidationResult ValidationResult_obj::get_VALID(){
            	HX_GC_STACKFRAME(&_hx_pos_6f37425f8bc62450_203_get_VALID)
HXLINE( 204)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID )) {
HXLINE( 205)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 206)			::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXLINE( 207)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 209)		return ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_VALID;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ValidationResult_obj,get_VALID,return )

 ::nape::shape::ValidationResult ValidationResult_obj::get_DEGENERATE(){
            	HX_GC_STACKFRAME(&_hx_pos_6f37425f8bc62450_216_get_DEGENERATE)
HXLINE( 217)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE )) {
HXLINE( 218)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 219)			::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXLINE( 220)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 222)		return ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_DEGENERATE;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ValidationResult_obj,get_DEGENERATE,return )

 ::nape::shape::ValidationResult ValidationResult_obj::get_CONCAVE(){
            	HX_GC_STACKFRAME(&_hx_pos_6f37425f8bc62450_229_get_CONCAVE)
HXLINE( 230)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE )) {
HXLINE( 231)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 232)			::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXLINE( 233)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 235)		return ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_CONCAVE;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ValidationResult_obj,get_CONCAVE,return )

 ::nape::shape::ValidationResult ValidationResult_obj::get_SELF_INTERSECTING(){
            	HX_GC_STACKFRAME(&_hx_pos_6f37425f8bc62450_242_get_SELF_INTERSECTING)
HXLINE( 243)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING )) {
HXLINE( 244)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 245)			::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING =  ::nape::shape::ValidationResult_obj::__alloc( HX_CTX );
HXLINE( 246)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 248)		return ::zpp_nape::util::ZPP_Flags_obj::ValidationResult_SELF_INTERSECTING;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ValidationResult_obj,get_SELF_INTERSECTING,return )


hx::ObjectPtr< ValidationResult_obj > ValidationResult_obj::__new() {
	hx::ObjectPtr< ValidationResult_obj > __this = new ValidationResult_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ValidationResult_obj > ValidationResult_obj::__alloc(hx::Ctx *_hx_ctx) {
	ValidationResult_obj *__this = (ValidationResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ValidationResult_obj), false, "nape.shape.ValidationResult"));
	*(void **)__this = ValidationResult_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ValidationResult_obj::ValidationResult_obj()
{
}

hx::Val ValidationResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ValidationResult_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"VALID") ) { if (inCallProp == hx::paccAlways) { outValue = get_VALID(); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"CONCAVE") ) { if (inCallProp == hx::paccAlways) { outValue = get_CONCAVE(); return true; } }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_VALID") ) { outValue = get_VALID_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"DEGENERATE") ) { if (inCallProp == hx::paccAlways) { outValue = get_DEGENERATE(); return true; } }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_CONCAVE") ) { outValue = get_CONCAVE_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_DEGENERATE") ) { outValue = get_DEGENERATE_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"SELF_INTERSECTING") ) { if (inCallProp == hx::paccAlways) { outValue = get_SELF_INTERSECTING(); return true; } }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_SELF_INTERSECTING") ) { outValue = get_SELF_INTERSECTING_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ValidationResult_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ValidationResult_obj_sStaticStorageInfo = 0;
#endif

static ::String ValidationResult_obj_sMemberFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ValidationResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ValidationResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ValidationResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ValidationResult_obj::__mClass,"__mClass");
};

#endif

hx::Class ValidationResult_obj::__mClass;

static ::String ValidationResult_obj_sStaticFields[] = {
	HX_HCSTRING("get_VALID","\x33","\x09","\x50","\xf3"),
	HX_HCSTRING("get_DEGENERATE","\xff","\x9b","\xf6","\x97"),
	HX_HCSTRING("get_CONCAVE","\x86","\x1e","\x06","\x14"),
	HX_HCSTRING("get_SELF_INTERSECTING","\x0d","\xf4","\xec","\x22"),
	::String(null())
};

void ValidationResult_obj::__register()
{
	hx::Object *dummy = new ValidationResult_obj;
	ValidationResult_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.shape.ValidationResult","\xc9","\xb4","\x38","\x81");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ValidationResult_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ValidationResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ValidationResult_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ValidationResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ValidationResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ValidationResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ValidationResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ValidationResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace shape
