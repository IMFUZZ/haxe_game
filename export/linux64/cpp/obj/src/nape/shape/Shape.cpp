// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_FluidProperties
#include <nape/phys/FluidProperties.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeType
#include <nape/shape/ShapeType.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Geom
#include <zpp_nape/geom/ZPP_Geom.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_177_new,"nape.shape.Shape","new",0x749b3160,"nape.shape.Shape.new","nape/shape/Shape.hx",177,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_188_get_type,"nape.shape.Shape","get_type",0x151cad43,"nape.shape.Shape.get_type","nape/shape/Shape.hx",188,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_198_isCircle,"nape.shape.Shape","isCircle",0xf6d00c9a,"nape.shape.Shape.isCircle","nape/shape/Shape.hx",198,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_208_isPolygon,"nape.shape.Shape","isPolygon",0x1c15a0b0,"nape.shape.Shape.isPolygon","nape/shape/Shape.hx",208,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_240_get_body,"nape.shape.Shape","get_body",0x092f352b,"nape.shape.Shape.get_body","nape/shape/Shape.hx",240,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_242_set_body,"nape.shape.Shape","set_body",0xb78c8e9f,"nape.shape.Shape.set_body","nape/shape/Shape.hx",242,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_258_get_castCircle,"nape.shape.Shape","get_castCircle",0xcfe1e578,"nape.shape.Shape.get_castCircle","nape/shape/Shape.hx",258,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_266_get_castPolygon,"nape.shape.Shape","get_castPolygon",0x32a18a12,"nape.shape.Shape.get_castPolygon","nape/shape/Shape.hx",266,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_279_get_worldCOM,"nape.shape.Shape","get_worldCOM",0xdbe1f818,"nape.shape.Shape.get_worldCOM","nape/shape/Shape.hx",279,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_300_get_localCOM,"nape.shape.Shape","get_localCOM",0x173dfa9f,"nape.shape.Shape.get_localCOM","nape/shape/Shape.hx",300,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_307_set_localCOM,"nape.shape.Shape","set_localCOM",0x2c371e13,"nape.shape.Shape.set_localCOM","nape/shape/Shape.hx",307,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_328_get_area,"nape.shape.Shape","get_area",0x08884616,"nape.shape.Shape.get_area","nape/shape/Shape.hx",328,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_337_get_inertia,"nape.shape.Shape","get_inertia",0x0ec57211,"nape.shape.Shape.get_inertia","nape/shape/Shape.hx",337,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_346_get_angDrag,"nape.shape.Shape","get_angDrag",0xca7d8905,"nape.shape.Shape.get_angDrag","nape/shape/Shape.hx",346,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_358_get_material,"nape.shape.Shape","get_material",0x28038fb0,"nape.shape.Shape.get_material","nape/shape/Shape.hx",358,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_360_set_material,"nape.shape.Shape","set_material",0x3cfcb324,"nape.shape.Shape.set_material","nape/shape/Shape.hx",360,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_378_get_filter,"nape.shape.Shape","get_filter",0x45934e81,"nape.shape.Shape.get_filter","nape/shape/Shape.hx",378,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_380_set_filter,"nape.shape.Shape","set_filter",0x4910ecf5,"nape.shape.Shape.set_filter","nape/shape/Shape.hx",380,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_400_get_fluidProperties,"nape.shape.Shape","get_fluidProperties",0xa4643ab4,"nape.shape.Shape.get_fluidProperties","nape/shape/Shape.hx",400,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_405_set_fluidProperties,"nape.shape.Shape","set_fluidProperties",0xe1012dc0,"nape.shape.Shape.set_fluidProperties","nape/shape/Shape.hx",405,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_429_get_fluidEnabled,"nape.shape.Shape","get_fluidEnabled",0x76ed7320,"nape.shape.Shape.get_fluidEnabled","nape/shape/Shape.hx",429,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_431_set_fluidEnabled,"nape.shape.Shape","set_fluidEnabled",0xcd2f6094,"nape.shape.Shape.set_fluidEnabled","nape/shape/Shape.hx",431,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_454_get_sensorEnabled,"nape.shape.Shape","get_sensorEnabled",0x622941be,"nape.shape.Shape.get_sensorEnabled","nape/shape/Shape.hx",454,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_456_set_sensorEnabled,"nape.shape.Shape","set_sensorEnabled",0x859719ca,"nape.shape.Shape.set_sensorEnabled","nape/shape/Shape.hx",456,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_476_get_bounds,"nape.shape.Shape","get_bounds",0x267bb53e,"nape.shape.Shape.get_bounds","nape/shape/Shape.hx",476,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_489_translate,"nape.shape.Shape","translate",0x4f05f84e,"nape.shape.Shape.translate","nape/shape/Shape.hx",489,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_529_scale,"nape.shape.Shape","scale",0x16706f8a,"nape.shape.Shape.scale","nape/shape/Shape.hx",529,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_559_rotate,"nape.shape.Shape","rotate",0x1aeb855b,"nape.shape.Shape.rotate","nape/shape/Shape.hx",559,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_586_transform,"nape.shape.Shape","transform",0x4b194e6c,"nape.shape.Shape.transform","nape/shape/Shape.hx",586,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_618_contains,"nape.shape.Shape","contains",0x74d4591f,"nape.shape.Shape.contains","nape/shape/Shape.hx",618,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_657_copy,"nape.shape.Shape","copy",0x8bf23ab5,"nape.shape.Shape.copy","nape/shape/Shape.hx",657,0x036d22d2)
HX_DEFINE_STACK_FRAME(_hx_pos_89f9be17cd3263cd_662_toString,"nape.shape.Shape","toString",0x80c7cfac,"nape.shape.Shape.toString","nape/shape/Shape.hx",662,0x036d22d2)
namespace nape{
namespace shape{

void Shape_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_177_new)
            	HX_STACK_THIS(this)
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 223)		super::__construct();
            	}

Dynamic Shape_obj::__CreateEmpty() { return new Shape_obj; }

void *Shape_obj::_hx_vtable = 0;

Dynamic Shape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shape_obj > _hx_result = new Shape_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Shape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x643c1bb3) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x643c1bb3;
	} else {
		return inClassId==(int)0x7e0877dc;
	}
}

 ::nape::shape::ShapeType Shape_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_188_get_type)
            	HX_STACK_THIS(this)
HXLINE( 188)		return ::zpp_nape::shape::ZPP_Shape_obj::types->__get(this->zpp_inner->type).StaticCast<  ::nape::shape::ShapeType >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_type,return )

bool Shape_obj::isCircle(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_198_isCircle)
            	HX_STACK_THIS(this)
HXLINE( 198)		return (this->zpp_inner->type == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,isCircle,return )

bool Shape_obj::isPolygon(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_208_isPolygon)
            	HX_STACK_THIS(this)
HXLINE( 208)		return (this->zpp_inner->type == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,isPolygon,return )

 ::nape::phys::Body Shape_obj::get_body(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_240_get_body)
            	HX_STACK_THIS(this)
HXLINE( 240)		if (hx::IsNotNull( this->zpp_inner->body )) {
HXLINE( 240)			return this->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 240)			return null();
            		}
HXDLIN( 240)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_body,return )

 ::nape::phys::Body Shape_obj::set_body( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_242_set_body)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 243)		{
HXLINE( 244)			this->zpp_inner->immutable_midstep(HX_("Shape::body",23,17,ec,18));
HXLINE( 245)			 ::nape::phys::Body _hx_tmp;
HXDLIN( 245)			if (hx::IsNotNull( this->zpp_inner->body )) {
HXLINE( 245)				_hx_tmp = this->zpp_inner->body->outer;
            			}
            			else {
HXLINE( 245)				_hx_tmp = null();
            			}
HXDLIN( 245)			if (hx::IsNotEq( _hx_tmp,body )) {
HXLINE( 246)				if (hx::IsNotNull( this->zpp_inner->body )) {
HXLINE( 246)					 ::nape::phys::Body _this;
HXDLIN( 246)					if (hx::IsNotNull( this->zpp_inner->body )) {
HXLINE( 246)						_this = this->zpp_inner->body->outer;
            					}
            					else {
HXLINE( 246)						_this = null();
            					}
HXDLIN( 246)					_this->zpp_inner->wrap_shapes->remove(hx::ObjectPtr<OBJ_>(this));
            				}
HXLINE( 247)				if (hx::IsNotNull( body )) {
HXLINE( 247)					HX_VARI_NAME(  ::nape::shape::ShapeList,_this1,"_this") = body->zpp_inner->wrap_shapes;
HXDLIN( 247)					if (_this1->zpp_inner->reverse_flag) {
HXLINE( 247)						_this1->push(hx::ObjectPtr<OBJ_>(this));
            					}
            					else {
HXLINE( 247)						_this1->unshift(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 250)		if (hx::IsNotNull( this->zpp_inner->body )) {
HXLINE( 250)			return this->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 250)			return null();
            		}
HXDLIN( 250)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_body,return )

 ::nape::shape::Circle Shape_obj::get_castCircle(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_258_get_castCircle)
            	HX_STACK_THIS(this)
HXLINE( 258)		if ((this->zpp_inner->type == (int)0)) {
HXLINE( 258)			return this->zpp_inner->circle->outer_zn;
            		}
            		else {
HXLINE( 258)			return null();
            		}
HXDLIN( 258)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_castCircle,return )

 ::nape::shape::Polygon Shape_obj::get_castPolygon(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_266_get_castPolygon)
            	HX_STACK_THIS(this)
HXLINE( 266)		if ((this->zpp_inner->type == (int)1)) {
HXLINE( 266)			return this->zpp_inner->polygon->outer_zn;
            		}
            		else {
HXLINE( 266)			return null();
            		}
HXDLIN( 266)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_castPolygon,return )

 ::nape::geom::Vec2 Shape_obj::get_worldCOM(){
            	HX_GC_STACKFRAME(&_hx_pos_89f9be17cd3263cd_279_get_worldCOM)
            	HX_STACK_THIS(this)
HXLINE( 280)		if (hx::IsNull( this->zpp_inner->wrap_worldCOM )) {
HXLINE( 281)			HX_VARI( Float,x) = this->zpp_inner->worldCOMx;
HXDLIN( 281)			HX_VARI( Float,y) = this->zpp_inner->worldCOMy;
HXDLIN( 281)			HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 281)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 281)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 281)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 281)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 281)				ret->zpp_pool = null();
            			}
HXDLIN( 281)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 281)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 281)				{
HXLINE( 281)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 281)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 281)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 281)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 281)						ret1->next = null();
            					}
HXDLIN( 281)					ret1->weak = false;
            				}
HXDLIN( 281)				ret1->_immutable = false;
HXDLIN( 281)				{
HXLINE( 281)					ret1->x = x;
HXDLIN( 281)					ret1->y = y;
            				}
HXDLIN( 281)				ret->zpp_inner = ret1;
HXDLIN( 281)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE( 281)				bool _hx_tmp;
HXDLIN( 281)				{
HXLINE( 281)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 281)					if (hx::IsNotNull( _this->_validate )) {
HXLINE( 281)						_this->_validate();
            					}
            				}
HXDLIN( 281)				if ((ret->zpp_inner->x == x)) {
HXLINE( 281)					{
HXLINE( 281)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 281)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 281)							_this1->_validate();
            						}
            					}
HXDLIN( 281)					_hx_tmp = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE( 281)					_hx_tmp = false;
            				}
HXDLIN( 281)				if (!(_hx_tmp)) {
HXLINE( 281)					{
HXLINE( 281)						ret->zpp_inner->x = x;
HXDLIN( 281)						ret->zpp_inner->y = y;
            					}
HXDLIN( 281)					{
HXLINE( 281)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 281)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 281)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN( 281)			ret->zpp_inner->weak = false;
HXDLIN( 281)			this->zpp_inner->wrap_worldCOM = ret;
HXLINE( 282)			this->zpp_inner->wrap_worldCOM->zpp_inner->_inuse = true;
HXLINE( 283)			this->zpp_inner->wrap_worldCOM->zpp_inner->_immutable = true;
HXLINE( 284)			this->zpp_inner->wrap_worldCOM->zpp_inner->_validate = this->zpp_inner->getworldCOM_dyn();
            		}
HXLINE( 286)		return this->zpp_inner->wrap_worldCOM;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_worldCOM,return )

 ::nape::geom::Vec2 Shape_obj::get_localCOM(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_300_get_localCOM)
            	HX_STACK_THIS(this)
HXLINE( 301)		if (hx::IsNull( this->zpp_inner->wrap_localCOM )) {
HXLINE( 302)			if ((this->zpp_inner->type == (int)0)) {
HXLINE( 302)				this->zpp_inner->circle->setupLocalCOM();
            			}
            			else {
HXLINE( 303)				this->zpp_inner->polygon->setupLocalCOM();
            			}
            		}
HXLINE( 305)		return this->zpp_inner->wrap_localCOM;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_localCOM,return )

 ::nape::geom::Vec2 Shape_obj::set_localCOM( ::nape::geom::Vec2 localCOM){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_307_set_localCOM)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(localCOM,"localCOM")
HXLINE( 308)		{
HXLINE( 309)			this->zpp_inner->immutable_midstep(HX_("Body::localCOM",98,27,7e,42));
HXLINE( 319)			{
HXLINE( 319)				if (hx::IsNull( this->zpp_inner->wrap_localCOM )) {
HXLINE( 319)					if ((this->zpp_inner->type == (int)0)) {
HXLINE( 319)						this->zpp_inner->circle->setupLocalCOM();
            					}
            					else {
HXLINE( 319)						this->zpp_inner->polygon->setupLocalCOM();
            					}
            				}
HXDLIN( 319)				HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_localCOM;
HXDLIN( 319)				{
HXLINE( 319)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = localCOM->zpp_inner;
HXDLIN( 319)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 319)						_this1->_validate();
            					}
            				}
HXDLIN( 319)				HX_VARI( Float,x) = localCOM->zpp_inner->x;
HXDLIN( 319)				{
HXLINE( 319)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = localCOM->zpp_inner;
HXDLIN( 319)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 319)						_this2->_validate();
            					}
            				}
HXDLIN( 319)				HX_VARI( Float,y) = localCOM->zpp_inner->y;
HXDLIN( 319)				bool _hx_tmp;
HXDLIN( 319)				{
HXLINE( 319)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 319)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 319)						_this3->_validate();
            					}
            				}
HXDLIN( 319)				if ((_this->zpp_inner->x == x)) {
HXLINE( 319)					{
HXLINE( 319)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 319)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 319)							_this4->_validate();
            						}
            					}
HXDLIN( 319)					_hx_tmp = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 319)					_hx_tmp = false;
            				}
HXDLIN( 319)				if (!(_hx_tmp)) {
HXLINE( 319)					{
HXLINE( 319)						_this->zpp_inner->x = x;
HXDLIN( 319)						_this->zpp_inner->y = y;
            					}
HXDLIN( 319)					{
HXLINE( 319)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 319)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 319)							_this5->_invalidate(_this5);
            						}
            					}
            				}
HXDLIN( 319)				if (localCOM->zpp_inner->weak) {
HXLINE( 319)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = localCOM->zpp_inner;
HXDLIN( 319)					localCOM->zpp_inner->outer = null();
HXDLIN( 319)					localCOM->zpp_inner = null();
HXDLIN( 319)					{
HXLINE( 319)						localCOM->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 319)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = localCOM;
            					}
HXDLIN( 319)					{
HXLINE( 319)						{
HXLINE( 319)							if (hx::IsNotNull( inner->outer )) {
HXLINE( 319)								inner->outer->zpp_inner = null();
HXDLIN( 319)								inner->outer = null();
            							}
HXDLIN( 319)							inner->_isimmutable = null();
HXDLIN( 319)							inner->_validate = null();
HXDLIN( 319)							inner->_invalidate = null();
            						}
HXDLIN( 319)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 319)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
            			}
            		}
HXLINE( 321)		if (hx::IsNull( this->zpp_inner->wrap_localCOM )) {
HXLINE( 321)			if ((this->zpp_inner->type == (int)0)) {
HXLINE( 321)				this->zpp_inner->circle->setupLocalCOM();
            			}
            			else {
HXLINE( 321)				this->zpp_inner->polygon->setupLocalCOM();
            			}
            		}
HXDLIN( 321)		return this->zpp_inner->wrap_localCOM;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_localCOM,return )

Float Shape_obj::get_area(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_328_get_area)
            	HX_STACK_THIS(this)
HXLINE( 329)		this->zpp_inner->validate_area_inertia();
HXLINE( 330)		return this->zpp_inner->area;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_area,return )

Float Shape_obj::get_inertia(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_337_get_inertia)
            	HX_STACK_THIS(this)
HXLINE( 338)		this->zpp_inner->validate_area_inertia();
HXLINE( 339)		return this->zpp_inner->inertia;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_inertia,return )

Float Shape_obj::get_angDrag(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_346_get_angDrag)
            	HX_STACK_THIS(this)
HXLINE( 347)		this->zpp_inner->validate_angDrag();
HXLINE( 348)		return this->zpp_inner->angDrag;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_angDrag,return )

 ::nape::phys::Material Shape_obj::get_material(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_358_get_material)
            	HX_STACK_THIS(this)
HXLINE( 358)		return this->zpp_inner->material->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_material,return )

 ::nape::phys::Material Shape_obj::set_material( ::nape::phys::Material material){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_360_set_material)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(material,"material")
HXLINE( 361)		{
HXLINE( 362)			this->zpp_inner->immutable_midstep(HX_("Shape::material",a8,cd,a4,b9));
HXLINE( 366)			this->zpp_inner->setMaterial(material->zpp_inner);
            		}
HXLINE( 368)		return this->zpp_inner->material->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_material,return )

 ::nape::dynamics::InteractionFilter Shape_obj::get_filter(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_378_get_filter)
            	HX_STACK_THIS(this)
HXLINE( 378)		return this->zpp_inner->filter->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_filter,return )

 ::nape::dynamics::InteractionFilter Shape_obj::set_filter( ::nape::dynamics::InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_380_set_filter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 381)		{
HXLINE( 382)			this->zpp_inner->immutable_midstep(HX_("Shape::filter",79,9e,c6,67));
HXLINE( 386)			this->zpp_inner->setFilter(filter->zpp_inner);
            		}
HXLINE( 388)		return this->zpp_inner->filter->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_filter,return )

 ::nape::phys::FluidProperties Shape_obj::get_fluidProperties(){
            	HX_GC_STACKFRAME(&_hx_pos_89f9be17cd3263cd_400_get_fluidProperties)
            	HX_STACK_THIS(this)
HXLINE( 401)		this->zpp_inner->immutable_midstep(HX_("Shape::fluidProperties",bc,2b,f3,66));
HXLINE( 402)		if (hx::IsNull( this->zpp_inner->fluidProperties )) {
HXLINE( 402)			 ::zpp_nape::shape::ZPP_Shape _hx_tmp = this->zpp_inner;
HXDLIN( 402)			_hx_tmp->setFluid( ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,null(),null())->zpp_inner);
            		}
HXLINE( 403)		return this->zpp_inner->fluidProperties->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_fluidProperties,return )

 ::nape::phys::FluidProperties Shape_obj::set_fluidProperties( ::nape::phys::FluidProperties fluidProperties){
            	HX_GC_STACKFRAME(&_hx_pos_89f9be17cd3263cd_405_set_fluidProperties)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fluidProperties,"fluidProperties")
HXLINE( 410)		this->zpp_inner->setFluid(fluidProperties->zpp_inner);
HXLINE( 412)		this->zpp_inner->immutable_midstep(HX_("Shape::fluidProperties",bc,2b,f3,66));
HXDLIN( 412)		if (hx::IsNull( this->zpp_inner->fluidProperties )) {
HXLINE( 412)			 ::zpp_nape::shape::ZPP_Shape _hx_tmp = this->zpp_inner;
HXDLIN( 412)			_hx_tmp->setFluid( ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,null(),null())->zpp_inner);
            		}
HXDLIN( 412)		return this->zpp_inner->fluidProperties->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_fluidProperties,return )

bool Shape_obj::get_fluidEnabled(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_429_get_fluidEnabled)
            	HX_STACK_THIS(this)
HXLINE( 429)		return this->zpp_inner->fluidEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_fluidEnabled,return )

bool Shape_obj::set_fluidEnabled(bool fluidEnabled){
            	HX_GC_STACKFRAME(&_hx_pos_89f9be17cd3263cd_431_set_fluidEnabled)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fluidEnabled,"fluidEnabled")
HXLINE( 432)		{
HXLINE( 433)			this->zpp_inner->immutable_midstep(HX_("Shape::fluidEnabled",18,0d,d1,29));
HXLINE( 434)			this->zpp_inner->fluidEnabled = fluidEnabled;
HXLINE( 435)			bool _hx_tmp;
HXDLIN( 435)			if (fluidEnabled) {
HXLINE( 435)				_hx_tmp = hx::IsNull( this->zpp_inner->fluidProperties );
            			}
            			else {
HXLINE( 435)				_hx_tmp = false;
            			}
HXDLIN( 435)			if (_hx_tmp) {
HXLINE( 435)				 ::nape::phys::FluidProperties fluidProperties =  ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 435)				this->zpp_inner->setFluid(fluidProperties->zpp_inner);
HXDLIN( 435)				{
HXLINE( 435)					this->zpp_inner->immutable_midstep(HX_("Shape::fluidProperties",bc,2b,f3,66));
HXDLIN( 435)					if (hx::IsNull( this->zpp_inner->fluidProperties )) {
HXLINE( 435)						 ::zpp_nape::shape::ZPP_Shape _hx_tmp1 = this->zpp_inner;
HXDLIN( 435)						_hx_tmp1->setFluid( ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,null(),null())->zpp_inner);
            					}
HXDLIN( 435)					this->zpp_inner->fluidProperties->wrapper();
            				}
            			}
HXLINE( 436)			this->zpp_inner->wake();
            		}
HXLINE( 438)		return this->zpp_inner->fluidEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_fluidEnabled,return )

bool Shape_obj::get_sensorEnabled(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_454_get_sensorEnabled)
            	HX_STACK_THIS(this)
HXLINE( 454)		return this->zpp_inner->sensorEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_sensorEnabled,return )

bool Shape_obj::set_sensorEnabled(bool sensorEnabled){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_456_set_sensorEnabled)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sensorEnabled,"sensorEnabled")
HXLINE( 457)		{
HXLINE( 458)			this->zpp_inner->immutable_midstep(HX_("Shape::sensorEnabled",c6,60,6c,36));
HXLINE( 459)			this->zpp_inner->sensorEnabled = sensorEnabled;
HXLINE( 460)			this->zpp_inner->wake();
            		}
HXLINE( 462)		return this->zpp_inner->sensorEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,set_sensorEnabled,return )

 ::nape::geom::AABB Shape_obj::get_bounds(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_476_get_bounds)
            	HX_STACK_THIS(this)
HXLINE( 476)		return this->zpp_inner->aabb->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,get_bounds,return )

 ::nape::shape::Shape Shape_obj::translate( ::nape::geom::Vec2 translation){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_489_translate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(translation,"translation")
HXLINE( 490)		this->zpp_inner->immutable_midstep(HX_("Shape::translate()",6e,4f,c5,dc));
HXLINE( 500)		if ((translation->lsq() > (int)0)) {
HXLINE( 501)			if ((this->zpp_inner->type == (int)0)) {
HXLINE( 501)				 ::zpp_nape::shape::ZPP_Circle _hx_tmp = this->zpp_inner->circle;
HXDLIN( 501)				{
HXLINE( 501)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = translation->zpp_inner;
HXDLIN( 501)					if (hx::IsNotNull( _this->_validate )) {
HXLINE( 501)						_this->_validate();
            					}
            				}
HXDLIN( 501)				Float _hx_tmp1 = translation->zpp_inner->x;
HXDLIN( 501)				{
HXLINE( 501)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = translation->zpp_inner;
HXDLIN( 501)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 501)						_this1->_validate();
            					}
            				}
HXDLIN( 501)				_hx_tmp->_hx___translate(_hx_tmp1,translation->zpp_inner->y);
            			}
            			else {
HXLINE( 502)				 ::zpp_nape::shape::ZPP_Polygon _hx_tmp2 = this->zpp_inner->polygon;
HXDLIN( 502)				{
HXLINE( 502)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = translation->zpp_inner;
HXDLIN( 502)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 502)						_this2->_validate();
            					}
            				}
HXDLIN( 502)				Float _hx_tmp3 = translation->zpp_inner->x;
HXDLIN( 502)				{
HXLINE( 502)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = translation->zpp_inner;
HXDLIN( 502)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 502)						_this3->_validate();
            					}
            				}
HXDLIN( 502)				_hx_tmp2->_hx___translate(_hx_tmp3,translation->zpp_inner->y);
            			}
            		}
HXLINE( 504)		if (translation->zpp_inner->weak) {
HXLINE( 508)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = translation->zpp_inner;
HXDLIN( 508)			translation->zpp_inner->outer = null();
HXDLIN( 508)			translation->zpp_inner = null();
HXDLIN( 508)			{
HXLINE( 508)				translation->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 508)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = translation;
            			}
HXDLIN( 508)			{
HXLINE( 508)				{
HXLINE( 508)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 508)						inner->outer->zpp_inner = null();
HXDLIN( 508)						inner->outer = null();
            					}
HXDLIN( 508)					inner->_isimmutable = null();
HXDLIN( 508)					inner->_validate = null();
HXDLIN( 508)					inner->_invalidate = null();
            				}
HXDLIN( 508)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 508)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 515)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,translate,return )

 ::nape::shape::Shape Shape_obj::scale(Float scalex,Float scaley){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_529_scale)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scalex,"scalex")
            	HX_STACK_ARG(scaley,"scaley")
HXLINE( 530)		this->zpp_inner->immutable_midstep(HX_("Shape::scale()",2a,92,c4,c1));
HXLINE( 536)		if ((this->zpp_inner->type == (int)0)) {
HXLINE( 537)			HX_VARI( Float,d) = ((scalex * scalex) - (scaley * scaley));
HXLINE( 538)			if (((d * d) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon))) {
HXLINE( 539)				this->zpp_inner->circle->_hx___scale(scalex,scaley);
            			}
            		}
            		else {
HXLINE( 547)			this->zpp_inner->polygon->_hx___scale(scalex,scaley);
            		}
HXLINE( 548)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shape_obj,scale,return )

 ::nape::shape::Shape Shape_obj::rotate(Float angle){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_559_rotate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(angle,"angle")
HXLINE( 560)		this->zpp_inner->immutable_midstep(HX_("Shape::rotate()",1d,67,82,d1));
HXLINE( 566)		if ((hx::Mod(angle,((int)2 * ::Math_obj::PI)) != ((Float)0.0))) {
HXLINE( 567)			HX_VARI( Float,cos) = ::Math_obj::cos(angle);
HXLINE( 568)			HX_VARI( Float,sin) = ::Math_obj::sin(angle);
HXLINE( 569)			if ((this->zpp_inner->type == (int)0)) {
HXLINE( 569)				this->zpp_inner->circle->_hx___rotate(sin,cos);
            			}
            			else {
HXLINE( 570)				this->zpp_inner->polygon->_hx___rotate(sin,cos);
            			}
            		}
HXLINE( 572)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,rotate,return )

 ::nape::shape::Shape Shape_obj::transform( ::nape::geom::Mat23 matrix){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_586_transform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 587)		this->zpp_inner->immutable_midstep(HX_("Shape::transform()",0c,e9,f0,84));
HXLINE( 593)		if ((this->zpp_inner->type == (int)0)) {
HXLINE( 594)			if (matrix->equiorthogonal()) {
HXLINE( 595)				this->zpp_inner->circle->_hx___transform(matrix);
            			}
            		}
            		else {
HXLINE( 603)			this->zpp_inner->polygon->_hx___transform(matrix);
            		}
HXLINE( 604)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,transform,return )

bool Shape_obj::contains( ::nape::geom::Vec2 point){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_618_contains)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 630)		::zpp_nape::geom::ZPP_Geom_obj::validateShape(this->zpp_inner);
HXLINE( 631)		{
HXLINE( 631)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = point->zpp_inner;
HXDLIN( 631)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 631)				_this->_validate();
            			}
            		}
HXLINE( 632)		HX_VARI( bool,ret) = ::zpp_nape::geom::ZPP_Collide_obj::shapeContains(this->zpp_inner,point->zpp_inner);
HXLINE( 633)		if (point->zpp_inner->weak) {
HXLINE( 637)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN( 637)			point->zpp_inner->outer = null();
HXDLIN( 637)			point->zpp_inner = null();
HXDLIN( 637)			{
HXLINE( 637)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 637)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN( 637)			{
HXLINE( 637)				{
HXLINE( 637)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 637)						inner->outer->zpp_inner = null();
HXDLIN( 637)						inner->outer = null();
            					}
HXDLIN( 637)					inner->_isimmutable = null();
HXDLIN( 637)					inner->_validate = null();
HXDLIN( 637)					inner->_invalidate = null();
            				}
HXDLIN( 637)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 637)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 644)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shape_obj,contains,return )

 ::nape::shape::Shape Shape_obj::copy(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_657_copy)
            	HX_STACK_THIS(this)
HXLINE( 657)		return this->zpp_inner->copy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shape_obj,copy,return )

::String Shape_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_89f9be17cd3263cd_662_toString)
            	HX_STACK_THIS(this)
HXLINE( 663)		HX_VAR( ::String,ret);
HXDLIN( 663)		if ((this->zpp_inner->type == (int)0)) {
HXLINE( 663)			ret = HX_("Circle",30,e6,a1,8a);
            		}
            		else {
HXLINE( 663)			ret = HX_("Polygon",5a,2a,e2,df);
            		}
HXLINE( 664)		return ((ret + HX_("#",23,00,00,00)) + this->zpp_inner_i->id);
            	}



hx::ObjectPtr< Shape_obj > Shape_obj::__new() {
	hx::ObjectPtr< Shape_obj > __this = new Shape_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Shape_obj > Shape_obj::__alloc(hx::Ctx *_hx_ctx) {
	Shape_obj *__this = (Shape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Shape_obj), true, "nape.shape.Shape"));
	*(void **)__this = Shape_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Shape_obj::Shape_obj()
{
}

void Shape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shape);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	 ::nape::phys::Interactor_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Shape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
	 ::nape::phys::Interactor_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Shape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		if (HX_FIELD_EQ(inName,"body") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body()); }
		if (HX_FIELD_EQ(inName,"area") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_area()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_filter()); }
		if (HX_FIELD_EQ(inName,"bounds") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bounds()); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inertia") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_inertia()); }
		if (HX_FIELD_EQ(inName,"angDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_angDrag()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"isCircle") ) { return hx::Val( isCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body") ) { return hx::Val( get_body_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body") ) { return hx::Val( set_body_dyn()); }
		if (HX_FIELD_EQ(inName,"worldCOM") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_worldCOM()); }
		if (HX_FIELD_EQ(inName,"localCOM") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_localCOM()); }
		if (HX_FIELD_EQ(inName,"get_area") ) { return hx::Val( get_area_dyn()); }
		if (HX_FIELD_EQ(inName,"material") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_material()); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"isPolygon") ) { return hx::Val( isPolygon_dyn()); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn()); }
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"castCircle") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_castCircle()); }
		if (HX_FIELD_EQ(inName,"get_filter") ) { return hx::Val( get_filter_dyn()); }
		if (HX_FIELD_EQ(inName,"set_filter") ) { return hx::Val( set_filter_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bounds") ) { return hx::Val( get_bounds_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"castPolygon") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_castPolygon()); }
		if (HX_FIELD_EQ(inName,"get_inertia") ) { return hx::Val( get_inertia_dyn()); }
		if (HX_FIELD_EQ(inName,"get_angDrag") ) { return hx::Val( get_angDrag_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_worldCOM") ) { return hx::Val( get_worldCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_localCOM") ) { return hx::Val( get_localCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"set_localCOM") ) { return hx::Val( set_localCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_material") ) { return hx::Val( get_material_dyn()); }
		if (HX_FIELD_EQ(inName,"set_material") ) { return hx::Val( set_material_dyn()); }
		if (HX_FIELD_EQ(inName,"fluidEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_fluidEnabled()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sensorEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sensorEnabled()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_castCircle") ) { return hx::Val( get_castCircle_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_castPolygon") ) { return hx::Val( get_castPolygon_dyn()); }
		if (HX_FIELD_EQ(inName,"fluidProperties") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_fluidProperties()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_fluidEnabled") ) { return hx::Val( get_fluidEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"set_fluidEnabled") ) { return hx::Val( set_fluidEnabled_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_sensorEnabled") ) { return hx::Val( get_sensorEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sensorEnabled") ) { return hx::Val( set_sensorEnabled_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_fluidProperties") ) { return hx::Val( get_fluidProperties_dyn()); }
		if (HX_FIELD_EQ(inName,"set_fluidProperties") ) { return hx::Val( set_fluidProperties_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filter(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"localCOM") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_localCOM(inValue) ); }
		if (HX_FIELD_EQ(inName,"material") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_material(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::shape::ZPP_Shape >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fluidEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fluidEnabled(inValue) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sensorEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sensorEnabled(inValue) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fluidProperties") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fluidProperties(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"));
	outFields->push(HX_HCSTRING("castCircle","\x2f","\x1e","\x4a","\x5e"));
	outFields->push(HX_HCSTRING("castPolygon","\x7b","\xf1","\x6a","\x3f"));
	outFields->push(HX_HCSTRING("worldCOM","\x0f","\xc5","\x83","\xa4"));
	outFields->push(HX_HCSTRING("localCOM","\x96","\xc7","\xdf","\xdf"));
	outFields->push(HX_HCSTRING("area","\x8d","\x8b","\x74","\x40"));
	outFields->push(HX_HCSTRING("inertia","\xfa","\xb0","\xba","\x7c"));
	outFields->push(HX_HCSTRING("angDrag","\xee","\xc7","\x72","\x38"));
	outFields->push(HX_HCSTRING("material","\xa7","\x5c","\xa5","\xf0"));
	outFields->push(HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"));
	outFields->push(HX_HCSTRING("fluidProperties","\x9d","\x0a","\x80","\x04"));
	outFields->push(HX_HCSTRING("fluidEnabled","\x97","\x87","\x5e","\x9a"));
	outFields->push(HX_HCSTRING("sensorEnabled","\x67","\x15","\xaa","\x41"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shape_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::shape::ZPP_Shape*/ ,(int)offsetof(Shape_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shape_obj_sStaticStorageInfo = 0;
#endif

static ::String Shape_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("isCircle","\x9a","\x0d","\x77","\xae"),
	HX_HCSTRING("isPolygon","\xb0","\x7f","\x8f","\x16"),
	HX_HCSTRING("get_body","\x2b","\x36","\xd6","\xc0"),
	HX_HCSTRING("set_body","\x9f","\x8f","\x33","\x6f"),
	HX_HCSTRING("get_castCircle","\x78","\xa6","\x3f","\xd4"),
	HX_HCSTRING("get_castPolygon","\x12","\xa9","\x4c","\x00"),
	HX_HCSTRING("get_worldCOM","\x18","\x79","\x9d","\x59"),
	HX_HCSTRING("get_localCOM","\x9f","\x7b","\xf9","\x94"),
	HX_HCSTRING("set_localCOM","\x13","\x9f","\xf2","\xa9"),
	HX_HCSTRING("get_area","\x16","\x47","\x2f","\xc0"),
	HX_HCSTRING("get_inertia","\x11","\x11","\xb5","\x02"),
	HX_HCSTRING("get_angDrag","\x05","\x28","\x6d","\xbe"),
	HX_HCSTRING("get_material","\xb0","\x10","\xbf","\xa5"),
	HX_HCSTRING("set_material","\x24","\x34","\xb8","\xba"),
	HX_HCSTRING("get_filter","\x81","\x8f","\xbc","\x75"),
	HX_HCSTRING("set_filter","\xf5","\x2d","\x3a","\x79"),
	HX_HCSTRING("get_fluidProperties","\xb4","\xd9","\x8a","\x8f"),
	HX_HCSTRING("set_fluidProperties","\xc0","\xcc","\x27","\xcc"),
	HX_HCSTRING("get_fluidEnabled","\x20","\x74","\xfd","\x9e"),
	HX_HCSTRING("set_fluidEnabled","\x94","\x61","\x3f","\xf5"),
	HX_HCSTRING("get_sensorEnabled","\xbe","\x20","\x1a","\x48"),
	HX_HCSTRING("set_sensorEnabled","\xca","\xf8","\x87","\x6b"),
	HX_HCSTRING("get_bounds","\x3e","\xf6","\xa4","\x56"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Shape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shape_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shape_obj::__mClass,"__mClass");
};

#endif

hx::Class Shape_obj::__mClass;

void Shape_obj::__register()
{
	hx::Object *dummy = new Shape_obj;
	Shape_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.shape.Shape","\x6e","\x41","\x97","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace shape
