// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_DistanceJoint
#include <nape/constraint/DistanceJoint.h>
#endif
#ifndef INCLUDED_nape_geom_MatMN
#include <nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_DistanceJoint
#include <zpp_nape/constraint/ZPP_DistanceJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <zpp_nape/geom/ZPP_MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_184_new,"nape.constraint.DistanceJoint","new",0xd657a01c,"nape.constraint.DistanceJoint.new","nape/constraint/DistanceJoint.hx",184,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_198_get_body1,"nape.constraint.DistanceJoint","get_body1",0x19a57462,"nape.constraint.DistanceJoint.get_body1","nape/constraint/DistanceJoint.hx",198,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_200_set_body1,"nape.constraint.DistanceJoint","set_body1",0xfcf6606e,"nape.constraint.DistanceJoint.set_body1","nape/constraint/DistanceJoint.hx",200,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_236_get_body2,"nape.constraint.DistanceJoint","get_body2",0x19a57463,"nape.constraint.DistanceJoint.get_body2","nape/constraint/DistanceJoint.hx",236,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_238_set_body2,"nape.constraint.DistanceJoint","set_body2",0xfcf6606f,"nape.constraint.DistanceJoint.set_body2","nape/constraint/DistanceJoint.hx",238,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_272_get_anchor1,"nape.constraint.DistanceJoint","get_anchor1",0xb6d037ef,"nape.constraint.DistanceJoint.get_anchor1","nape/constraint/DistanceJoint.hx",272,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_276_set_anchor1,"nape.constraint.DistanceJoint","set_anchor1",0xc13d3efb,"nape.constraint.DistanceJoint.set_anchor1","nape/constraint/DistanceJoint.hx",276,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_297_get_anchor2,"nape.constraint.DistanceJoint","get_anchor2",0xb6d037f0,"nape.constraint.DistanceJoint.get_anchor2","nape/constraint/DistanceJoint.hx",297,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_301_set_anchor2,"nape.constraint.DistanceJoint","set_anchor2",0xc13d3efc,"nape.constraint.DistanceJoint.set_anchor2","nape/constraint/DistanceJoint.hx",301,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_323_get_jointMin,"nape.constraint.DistanceJoint","get_jointMin",0x497a0735,"nape.constraint.DistanceJoint.get_jointMin","nape/constraint/DistanceJoint.hx",323,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_325_set_jointMin,"nape.constraint.DistanceJoint","set_jointMin",0x5e732aa9,"nape.constraint.DistanceJoint.set_jointMin","nape/constraint/DistanceJoint.hx",325,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_351_get_jointMax,"nape.constraint.DistanceJoint","get_jointMax",0x497a0047,"nape.constraint.DistanceJoint.get_jointMax","nape/constraint/DistanceJoint.hx",351,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_353_set_jointMax,"nape.constraint.DistanceJoint","set_jointMax",0x5e7323bb,"nape.constraint.DistanceJoint.set_jointMax","nape/constraint/DistanceJoint.hx",353,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_388_isSlack,"nape.constraint.DistanceJoint","isSlack",0xe033b3c2,"nape.constraint.DistanceJoint.isSlack","nape/constraint/DistanceJoint.hx",388,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_428_impulse,"nape.constraint.DistanceJoint","impulse",0x32a9ae71,"nape.constraint.DistanceJoint.impulse","nape/constraint/DistanceJoint.hx",428,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_445_bodyImpulse,"nape.constraint.DistanceJoint","bodyImpulse",0x8dd661ef,"nape.constraint.DistanceJoint.bodyImpulse","nape/constraint/DistanceJoint.hx",445,0x7df58474)
HX_DEFINE_STACK_FRAME(_hx_pos_5800e8f0187168fd_455_visitBodies,"nape.constraint.DistanceJoint","visitBodies",0x1292df67,"nape.constraint.DistanceJoint.visitBodies","nape/constraint/DistanceJoint.hx",455,0x7df58474)
namespace nape{
namespace constraint{

void DistanceJoint_obj::__construct( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2,Float jointMin,Float jointMax){
            	HX_GC_STACKFRAME(&_hx_pos_5800e8f0187168fd_184_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
            	HX_STACK_ARG(body2,"body2")
            	HX_STACK_ARG(anchor1,"anchor1")
            	HX_STACK_ARG(anchor2,"anchor2")
            	HX_STACK_ARG(jointMin,"jointMin")
            	HX_STACK_ARG(jointMax,"jointMax")
HXLINE( 188)		this->zpp_inner_zn = null();
HXLINE( 404)		this->zpp_inner_zn =  ::zpp_nape::constraint::ZPP_DistanceJoint_obj::__alloc( HX_CTX );
HXLINE( 405)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 406)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 407)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 414)		super::__construct();
HXLINE( 416)		{
HXLINE( 416)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 416)			if (hx::IsNull( body1 )) {
HXLINE( 416)				inbody1 = null();
            			}
            			else {
HXLINE( 416)				inbody1 = body1->zpp_inner;
            			}
HXDLIN( 416)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 416)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 416)					bool _hx_tmp;
HXDLIN( 416)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 416)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 416)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 416)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 416)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 416)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 416)						_hx_tmp = false;
            					}
HXDLIN( 416)					if (_hx_tmp) {
HXLINE( 416)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 416)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 416)					bool _hx_tmp2;
HXDLIN( 416)					if (this->zpp_inner->active) {
HXLINE( 416)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 416)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 416)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 416)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 416)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 416)						_hx_tmp2 = false;
            					}
HXDLIN( 416)					if (_hx_tmp2) {
HXLINE( 416)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXDLIN( 416)				this->zpp_inner_zn->b1 = inbody1;
HXDLIN( 416)				bool _hx_tmp4;
HXDLIN( 416)				bool _hx_tmp5;
HXDLIN( 416)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 416)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 416)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 416)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 416)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 416)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 416)					_hx_tmp5 = false;
            				}
HXDLIN( 416)				if (_hx_tmp5) {
HXLINE( 416)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 416)					_hx_tmp4 = false;
            				}
HXDLIN( 416)				if (_hx_tmp4) {
HXLINE( 416)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 416)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 416)				bool _hx_tmp7;
HXDLIN( 416)				if (this->zpp_inner->active) {
HXLINE( 416)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 416)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 416)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 416)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 416)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 416)					_hx_tmp7 = false;
            				}
HXDLIN( 416)				if (_hx_tmp7) {
HXLINE( 416)					this->zpp_inner->wake();
HXDLIN( 416)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 416)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 417)		{
HXLINE( 417)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 417)			if (hx::IsNull( body2 )) {
HXLINE( 417)				inbody2 = null();
            			}
            			else {
HXLINE( 417)				inbody2 = body2->zpp_inner;
            			}
HXDLIN( 417)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 417)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 417)					bool _hx_tmp9;
HXDLIN( 417)					 ::nape::space::Space _hx_tmp10;
HXDLIN( 417)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 417)						_hx_tmp10 = null();
            					}
            					else {
HXLINE( 417)						_hx_tmp10 = this->zpp_inner->space->outer;
            					}
HXDLIN( 417)					if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 417)						_hx_tmp9 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 417)						_hx_tmp9 = false;
            					}
HXDLIN( 417)					if (_hx_tmp9) {
HXLINE( 417)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 417)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 417)					bool _hx_tmp11;
HXDLIN( 417)					if (this->zpp_inner->active) {
HXLINE( 417)						 ::nape::space::Space _hx_tmp12;
HXDLIN( 417)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 417)							_hx_tmp12 = null();
            						}
            						else {
HXLINE( 417)							_hx_tmp12 = this->zpp_inner->space->outer;
            						}
HXDLIN( 417)						_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            					}
            					else {
HXLINE( 417)						_hx_tmp11 = false;
            					}
HXDLIN( 417)					if (_hx_tmp11) {
HXLINE( 417)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXDLIN( 417)				this->zpp_inner_zn->b2 = inbody2;
HXDLIN( 417)				bool _hx_tmp13;
HXDLIN( 417)				bool _hx_tmp14;
HXDLIN( 417)				 ::nape::space::Space _hx_tmp15;
HXDLIN( 417)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 417)					_hx_tmp15 = null();
            				}
            				else {
HXLINE( 417)					_hx_tmp15 = this->zpp_inner->space->outer;
            				}
HXDLIN( 417)				if (hx::IsNotNull( _hx_tmp15 )) {
HXLINE( 417)					_hx_tmp14 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 417)					_hx_tmp14 = false;
            				}
HXDLIN( 417)				if (_hx_tmp14) {
HXLINE( 417)					_hx_tmp13 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 417)					_hx_tmp13 = false;
            				}
HXDLIN( 417)				if (_hx_tmp13) {
HXLINE( 417)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 417)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 417)				bool _hx_tmp16;
HXDLIN( 417)				if (this->zpp_inner->active) {
HXLINE( 417)					 ::nape::space::Space _hx_tmp17;
HXDLIN( 417)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 417)						_hx_tmp17 = null();
            					}
            					else {
HXLINE( 417)						_hx_tmp17 = this->zpp_inner->space->outer;
            					}
HXDLIN( 417)					_hx_tmp16 = hx::IsNotNull( _hx_tmp17 );
            				}
            				else {
HXLINE( 417)					_hx_tmp16 = false;
            				}
HXDLIN( 417)				if (_hx_tmp16) {
HXLINE( 417)					this->zpp_inner->wake();
HXDLIN( 417)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 417)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 418)		{
HXLINE( 418)			{
HXLINE( 418)				if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 418)					this->zpp_inner_zn->setup_a1();
            				}
HXDLIN( 418)				HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a1;
HXDLIN( 418)				{
HXLINE( 418)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor1->zpp_inner;
HXDLIN( 418)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 418)						_this1->_validate();
            					}
            				}
HXDLIN( 418)				HX_VARI( Float,x) = anchor1->zpp_inner->x;
HXDLIN( 418)				{
HXLINE( 418)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor1->zpp_inner;
HXDLIN( 418)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 418)						_this2->_validate();
            					}
            				}
HXDLIN( 418)				HX_VARI( Float,y) = anchor1->zpp_inner->y;
HXDLIN( 418)				bool _hx_tmp18;
HXDLIN( 418)				{
HXLINE( 418)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 418)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 418)						_this3->_validate();
            					}
            				}
HXDLIN( 418)				if ((_this->zpp_inner->x == x)) {
HXLINE( 418)					{
HXLINE( 418)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 418)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 418)							_this4->_validate();
            						}
            					}
HXDLIN( 418)					_hx_tmp18 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 418)					_hx_tmp18 = false;
            				}
HXDLIN( 418)				if (!(_hx_tmp18)) {
HXLINE( 418)					{
HXLINE( 418)						_this->zpp_inner->x = x;
HXDLIN( 418)						_this->zpp_inner->y = y;
            					}
HXDLIN( 418)					{
HXLINE( 418)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 418)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 418)							_this5->_invalidate(_this5);
            						}
            					}
            				}
HXDLIN( 418)				if (anchor1->zpp_inner->weak) {
HXLINE( 418)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor1->zpp_inner;
HXDLIN( 418)					anchor1->zpp_inner->outer = null();
HXDLIN( 418)					anchor1->zpp_inner = null();
HXDLIN( 418)					{
HXLINE( 418)						anchor1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 418)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor1;
            					}
HXDLIN( 418)					{
HXLINE( 418)						{
HXLINE( 418)							if (hx::IsNotNull( inner->outer )) {
HXLINE( 418)								inner->outer->zpp_inner = null();
HXDLIN( 418)								inner->outer = null();
            							}
HXDLIN( 418)							inner->_isimmutable = null();
HXDLIN( 418)							inner->_validate = null();
HXDLIN( 418)							inner->_invalidate = null();
            						}
HXDLIN( 418)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 418)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
            			}
HXDLIN( 418)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 418)				this->zpp_inner_zn->setup_a1();
            			}
            		}
HXLINE( 419)		{
HXLINE( 419)			{
HXLINE( 419)				if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 419)					this->zpp_inner_zn->setup_a2();
            				}
HXDLIN( 419)				HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = this->zpp_inner_zn->wrap_a2;
HXDLIN( 419)				{
HXLINE( 419)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = anchor2->zpp_inner;
HXDLIN( 419)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 419)						_this7->_validate();
            					}
            				}
HXDLIN( 419)				HX_VARI_NAME( Float,x1,"x") = anchor2->zpp_inner->x;
HXDLIN( 419)				{
HXLINE( 419)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = anchor2->zpp_inner;
HXDLIN( 419)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 419)						_this8->_validate();
            					}
            				}
HXDLIN( 419)				HX_VARI_NAME( Float,y1,"y") = anchor2->zpp_inner->y;
HXDLIN( 419)				bool _hx_tmp19;
HXDLIN( 419)				{
HXLINE( 419)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _this6->zpp_inner;
HXDLIN( 419)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 419)						_this9->_validate();
            					}
            				}
HXDLIN( 419)				if ((_this6->zpp_inner->x == x1)) {
HXLINE( 419)					{
HXLINE( 419)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = _this6->zpp_inner;
HXDLIN( 419)						if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 419)							_this10->_validate();
            						}
            					}
HXDLIN( 419)					_hx_tmp19 = (_this6->zpp_inner->y == y1);
            				}
            				else {
HXLINE( 419)					_hx_tmp19 = false;
            				}
HXDLIN( 419)				if (!(_hx_tmp19)) {
HXLINE( 419)					{
HXLINE( 419)						_this6->zpp_inner->x = x1;
HXDLIN( 419)						_this6->zpp_inner->y = y1;
            					}
HXDLIN( 419)					{
HXLINE( 419)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = _this6->zpp_inner;
HXDLIN( 419)						if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 419)							_this11->_invalidate(_this11);
            						}
            					}
            				}
HXDLIN( 419)				if (anchor2->zpp_inner->weak) {
HXLINE( 419)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = anchor2->zpp_inner;
HXDLIN( 419)					anchor2->zpp_inner->outer = null();
HXDLIN( 419)					anchor2->zpp_inner = null();
HXDLIN( 419)					{
HXLINE( 419)						anchor2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 419)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor2;
            					}
HXDLIN( 419)					{
HXLINE( 419)						{
HXLINE( 419)							if (hx::IsNotNull( inner1->outer )) {
HXLINE( 419)								inner1->outer->zpp_inner = null();
HXDLIN( 419)								inner1->outer = null();
            							}
HXDLIN( 419)							inner1->_isimmutable = null();
HXDLIN( 419)							inner1->_validate = null();
HXDLIN( 419)							inner1->_invalidate = null();
            						}
HXDLIN( 419)						inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 419)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            					}
            				}
            			}
HXDLIN( 419)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 419)				this->zpp_inner_zn->setup_a2();
            			}
            		}
HXLINE( 420)		if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 420)			this->zpp_inner_zn->jointMin = jointMin;
HXDLIN( 420)			this->zpp_inner->wake();
            		}
HXLINE( 421)		if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 421)			this->zpp_inner_zn->jointMax = jointMax;
HXDLIN( 421)			this->zpp_inner->wake();
            		}
            	}

Dynamic DistanceJoint_obj::__CreateEmpty() { return new DistanceJoint_obj; }

void *DistanceJoint_obj::_hx_vtable = 0;

Dynamic DistanceJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DistanceJoint_obj > _hx_result = new DistanceJoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool DistanceJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00e9fd26) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00e9fd26;
	} else {
		return inClassId==(int)0x7bb9b490;
	}
}

 ::nape::phys::Body DistanceJoint_obj::get_body1(){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_198_get_body1)
            	HX_STACK_THIS(this)
HXLINE( 198)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 198)			return null();
            		}
            		else {
HXLINE( 198)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 198)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DistanceJoint_obj,get_body1,return )

 ::nape::phys::Body DistanceJoint_obj::set_body1( ::nape::phys::Body body1){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_200_set_body1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
HXLINE( 201)		{
HXLINE( 203)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 203)			if (hx::IsNull( body1 )) {
HXLINE( 203)				inbody1 = null();
            			}
            			else {
HXLINE( 203)				inbody1 = body1->zpp_inner;
            			}
HXLINE( 204)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 205)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 206)					bool _hx_tmp;
HXDLIN( 206)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 206)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 206)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 206)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 206)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 206)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 206)						_hx_tmp = false;
            					}
HXDLIN( 206)					if (_hx_tmp) {
HXLINE( 208)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 208)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 211)					bool _hx_tmp2;
HXDLIN( 211)					if (this->zpp_inner->active) {
HXLINE( 211)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 211)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 211)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 211)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 211)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 211)						_hx_tmp2 = false;
            					}
HXDLIN( 211)					if (_hx_tmp2) {
HXLINE( 211)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXLINE( 213)				this->zpp_inner_zn->b1 = inbody1;
HXLINE( 214)				bool _hx_tmp4;
HXDLIN( 214)				bool _hx_tmp5;
HXDLIN( 214)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 214)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 214)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 214)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 214)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 214)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 214)					_hx_tmp5 = false;
            				}
HXDLIN( 214)				if (_hx_tmp5) {
HXLINE( 214)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 214)					_hx_tmp4 = false;
            				}
HXDLIN( 214)				if (_hx_tmp4) {
HXLINE( 216)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 216)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 219)				bool _hx_tmp7;
HXDLIN( 219)				if (this->zpp_inner->active) {
HXLINE( 219)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 219)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 219)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 219)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 219)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 219)					_hx_tmp7 = false;
            				}
HXDLIN( 219)				if (_hx_tmp7) {
HXLINE( 220)					this->zpp_inner->wake();
HXLINE( 221)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 221)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 225)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 225)			return null();
            		}
            		else {
HXLINE( 225)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 225)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DistanceJoint_obj,set_body1,return )

 ::nape::phys::Body DistanceJoint_obj::get_body2(){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_236_get_body2)
            	HX_STACK_THIS(this)
HXLINE( 236)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 236)			return null();
            		}
            		else {
HXLINE( 236)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 236)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DistanceJoint_obj,get_body2,return )

 ::nape::phys::Body DistanceJoint_obj::set_body2( ::nape::phys::Body body2){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_238_set_body2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body2,"body2")
HXLINE( 239)		{
HXLINE( 241)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 241)			if (hx::IsNull( body2 )) {
HXLINE( 241)				inbody2 = null();
            			}
            			else {
HXLINE( 241)				inbody2 = body2->zpp_inner;
            			}
HXLINE( 242)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 243)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 244)					bool _hx_tmp;
HXDLIN( 244)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 244)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 244)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 244)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 244)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 244)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 244)						_hx_tmp = false;
            					}
HXDLIN( 244)					if (_hx_tmp) {
HXLINE( 246)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 246)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 249)					bool _hx_tmp2;
HXDLIN( 249)					if (this->zpp_inner->active) {
HXLINE( 249)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 249)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 249)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 249)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 249)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 249)						_hx_tmp2 = false;
            					}
HXDLIN( 249)					if (_hx_tmp2) {
HXLINE( 249)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXLINE( 251)				this->zpp_inner_zn->b2 = inbody2;
HXLINE( 252)				bool _hx_tmp4;
HXDLIN( 252)				bool _hx_tmp5;
HXDLIN( 252)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 252)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 252)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 252)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 252)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 252)					_hx_tmp5 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 252)					_hx_tmp5 = false;
            				}
HXDLIN( 252)				if (_hx_tmp5) {
HXLINE( 252)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 252)					_hx_tmp4 = false;
            				}
HXDLIN( 252)				if (_hx_tmp4) {
HXLINE( 254)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 254)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 257)				bool _hx_tmp7;
HXDLIN( 257)				if (this->zpp_inner->active) {
HXLINE( 257)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 257)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 257)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 257)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 257)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 257)					_hx_tmp7 = false;
            				}
HXDLIN( 257)				if (_hx_tmp7) {
HXLINE( 258)					this->zpp_inner->wake();
HXLINE( 259)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 259)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 263)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 263)			return null();
            		}
            		else {
HXLINE( 263)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 263)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DistanceJoint_obj,set_body2,return )

 ::nape::geom::Vec2 DistanceJoint_obj::get_anchor1(){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_272_get_anchor1)
            	HX_STACK_THIS(this)
HXLINE( 273)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 273)			this->zpp_inner_zn->setup_a1();
            		}
HXLINE( 274)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DistanceJoint_obj,get_anchor1,return )

 ::nape::geom::Vec2 DistanceJoint_obj::set_anchor1( ::nape::geom::Vec2 anchor1){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_276_set_anchor1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor1,"anchor1")
HXLINE( 286)		{
HXLINE( 286)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 286)				this->zpp_inner_zn->setup_a1();
            			}
HXDLIN( 286)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a1;
HXDLIN( 286)			{
HXLINE( 286)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor1->zpp_inner;
HXDLIN( 286)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 286)					_this1->_validate();
            				}
            			}
HXDLIN( 286)			HX_VARI( Float,x) = anchor1->zpp_inner->x;
HXDLIN( 286)			{
HXLINE( 286)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor1->zpp_inner;
HXDLIN( 286)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 286)					_this2->_validate();
            				}
            			}
HXDLIN( 286)			HX_VARI( Float,y) = anchor1->zpp_inner->y;
HXDLIN( 286)			bool _hx_tmp;
HXDLIN( 286)			{
HXLINE( 286)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 286)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 286)					_this3->_validate();
            				}
            			}
HXDLIN( 286)			if ((_this->zpp_inner->x == x)) {
HXLINE( 286)				{
HXLINE( 286)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 286)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 286)						_this4->_validate();
            					}
            				}
HXDLIN( 286)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 286)				_hx_tmp = false;
            			}
HXDLIN( 286)			if (!(_hx_tmp)) {
HXLINE( 286)				{
HXLINE( 286)					_this->zpp_inner->x = x;
HXDLIN( 286)					_this->zpp_inner->y = y;
            				}
HXDLIN( 286)				{
HXLINE( 286)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 286)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 286)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 286)			if (anchor1->zpp_inner->weak) {
HXLINE( 286)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor1->zpp_inner;
HXDLIN( 286)				anchor1->zpp_inner->outer = null();
HXDLIN( 286)				anchor1->zpp_inner = null();
HXDLIN( 286)				{
HXLINE( 286)					anchor1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 286)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor1;
            				}
HXDLIN( 286)				{
HXLINE( 286)					{
HXLINE( 286)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 286)							inner->outer->zpp_inner = null();
HXDLIN( 286)							inner->outer = null();
            						}
HXDLIN( 286)						inner->_isimmutable = null();
HXDLIN( 286)						inner->_validate = null();
HXDLIN( 286)						inner->_invalidate = null();
            					}
HXDLIN( 286)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 286)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 288)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 288)			this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 288)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DistanceJoint_obj,set_anchor1,return )

 ::nape::geom::Vec2 DistanceJoint_obj::get_anchor2(){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_297_get_anchor2)
            	HX_STACK_THIS(this)
HXLINE( 298)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 298)			this->zpp_inner_zn->setup_a2();
            		}
HXLINE( 299)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DistanceJoint_obj,get_anchor2,return )

 ::nape::geom::Vec2 DistanceJoint_obj::set_anchor2( ::nape::geom::Vec2 anchor2){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_301_set_anchor2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor2,"anchor2")
HXLINE( 311)		{
HXLINE( 311)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 311)				this->zpp_inner_zn->setup_a2();
            			}
HXDLIN( 311)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a2;
HXDLIN( 311)			{
HXLINE( 311)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor2->zpp_inner;
HXDLIN( 311)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 311)					_this1->_validate();
            				}
            			}
HXDLIN( 311)			HX_VARI( Float,x) = anchor2->zpp_inner->x;
HXDLIN( 311)			{
HXLINE( 311)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor2->zpp_inner;
HXDLIN( 311)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 311)					_this2->_validate();
            				}
            			}
HXDLIN( 311)			HX_VARI( Float,y) = anchor2->zpp_inner->y;
HXDLIN( 311)			bool _hx_tmp;
HXDLIN( 311)			{
HXLINE( 311)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 311)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 311)					_this3->_validate();
            				}
            			}
HXDLIN( 311)			if ((_this->zpp_inner->x == x)) {
HXLINE( 311)				{
HXLINE( 311)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 311)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 311)						_this4->_validate();
            					}
            				}
HXDLIN( 311)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 311)				_hx_tmp = false;
            			}
HXDLIN( 311)			if (!(_hx_tmp)) {
HXLINE( 311)				{
HXLINE( 311)					_this->zpp_inner->x = x;
HXDLIN( 311)					_this->zpp_inner->y = y;
            				}
HXDLIN( 311)				{
HXLINE( 311)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 311)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 311)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 311)			if (anchor2->zpp_inner->weak) {
HXLINE( 311)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor2->zpp_inner;
HXDLIN( 311)				anchor2->zpp_inner->outer = null();
HXDLIN( 311)				anchor2->zpp_inner = null();
HXDLIN( 311)				{
HXLINE( 311)					anchor2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 311)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor2;
            				}
HXDLIN( 311)				{
HXLINE( 311)					{
HXLINE( 311)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 311)							inner->outer->zpp_inner = null();
HXDLIN( 311)							inner->outer = null();
            						}
HXDLIN( 311)						inner->_isimmutable = null();
HXDLIN( 311)						inner->_validate = null();
HXDLIN( 311)						inner->_invalidate = null();
            					}
HXDLIN( 311)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 311)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 313)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 313)			this->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 313)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DistanceJoint_obj,set_anchor2,return )

Float DistanceJoint_obj::get_jointMin(){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_323_get_jointMin)
            	HX_STACK_THIS(this)
HXLINE( 323)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DistanceJoint_obj,get_jointMin,return )

Float DistanceJoint_obj::set_jointMin(Float jointMin){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_325_set_jointMin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(jointMin,"jointMin")
HXLINE( 336)		if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 337)			this->zpp_inner_zn->jointMin = jointMin;
HXLINE( 338)			this->zpp_inner->wake();
            		}
HXLINE( 341)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DistanceJoint_obj,set_jointMin,return )

Float DistanceJoint_obj::get_jointMax(){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_351_get_jointMax)
            	HX_STACK_THIS(this)
HXLINE( 351)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DistanceJoint_obj,get_jointMax,return )

Float DistanceJoint_obj::set_jointMax(Float jointMax){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_353_set_jointMax)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(jointMax,"jointMax")
HXLINE( 364)		if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 365)			this->zpp_inner_zn->jointMax = jointMax;
HXLINE( 366)			this->zpp_inner->wake();
            		}
HXLINE( 369)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DistanceJoint_obj,set_jointMax,return )

bool DistanceJoint_obj::isSlack(){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_388_isSlack)
            	HX_STACK_THIS(this)
HXLINE( 388)		return this->zpp_inner_zn->slack;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DistanceJoint_obj,isSlack,return )

 ::nape::geom::MatMN DistanceJoint_obj::impulse(){
            	HX_GC_STACKFRAME(&_hx_pos_5800e8f0187168fd_428_impulse)
            	HX_STACK_THIS(this)
HXLINE( 429)		HX_VARI(  ::nape::geom::MatMN,ret) =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,(int)1,(int)1);
HXLINE( 430)		ret->zpp_inner->x[((int)0 * ret->zpp_inner->n)] = this->zpp_inner_zn->jAcc;
HXLINE( 431)		return ret;
            	}


 ::nape::geom::Vec3 DistanceJoint_obj::bodyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_445_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 445)		if (!(this->zpp_inner->active)) {
HXLINE( 446)			return ::nape::geom::Vec3_obj::get(null(),null(),null());
            		}
            		else {
HXLINE( 449)			return this->zpp_inner_zn->bodyImpulse(body->zpp_inner);
            		}
HXLINE( 445)		return null();
            	}


void DistanceJoint_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_5800e8f0187168fd_455_visitBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 456)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 456)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 456)			_hx_tmp = null();
            		}
            		else {
HXLINE( 456)			_hx_tmp = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 456)		if (hx::IsNotNull( _hx_tmp )) {
HXLINE( 457)			 ::nape::phys::Body _hx_tmp1;
HXDLIN( 457)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 457)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 457)				_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 457)			lambda(_hx_tmp1);
            		}
HXLINE( 459)		bool _hx_tmp2;
HXDLIN( 459)		 ::nape::phys::Body _hx_tmp3;
HXDLIN( 459)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 459)			_hx_tmp3 = null();
            		}
            		else {
HXLINE( 459)			_hx_tmp3 = this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 459)		if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 459)			 ::nape::phys::Body _hx_tmp4;
HXDLIN( 459)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 459)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 459)				_hx_tmp4 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 459)			 ::nape::phys::Body _hx_tmp5;
HXDLIN( 459)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 459)				_hx_tmp5 = null();
            			}
            			else {
HXLINE( 459)				_hx_tmp5 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 459)			_hx_tmp2 = hx::IsNotEq( _hx_tmp4,_hx_tmp5 );
            		}
            		else {
HXLINE( 459)			_hx_tmp2 = false;
            		}
HXDLIN( 459)		if (_hx_tmp2) {
HXLINE( 460)			 ::nape::phys::Body _hx_tmp6;
HXDLIN( 460)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 460)				_hx_tmp6 = null();
            			}
            			else {
HXLINE( 460)				_hx_tmp6 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 460)			lambda(_hx_tmp6);
            		}
            	}



hx::ObjectPtr< DistanceJoint_obj > DistanceJoint_obj::__new( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2,Float jointMin,Float jointMax) {
	hx::ObjectPtr< DistanceJoint_obj > __this = new DistanceJoint_obj();
	__this->__construct(body1,body2,anchor1,anchor2,jointMin,jointMax);
	return __this;
}

hx::ObjectPtr< DistanceJoint_obj > DistanceJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2,Float jointMin,Float jointMax) {
	DistanceJoint_obj *__this = (DistanceJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DistanceJoint_obj), true, "nape.constraint.DistanceJoint"));
	*(void **)__this = DistanceJoint_obj::_hx_vtable;
	__this->__construct(body1,body2,anchor1,anchor2,jointMin,jointMax);
	return __this;
}

DistanceJoint_obj::DistanceJoint_obj()
{
}

void DistanceJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DistanceJoint);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DistanceJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DistanceJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body1()); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body2()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor1()); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor2()); }
		if (HX_FIELD_EQ(inName,"isSlack") ) { return hx::Val( isSlack_dyn()); }
		if (HX_FIELD_EQ(inName,"impulse") ) { return hx::Val( impulse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_jointMin()); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_jointMax()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_body1") ) { return hx::Val( get_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body1") ) { return hx::Val( set_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body2") ) { return hx::Val( get_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body2") ) { return hx::Val( set_body2_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_anchor1") ) { return hx::Val( get_anchor1_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor1") ) { return hx::Val( set_anchor1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_anchor2") ) { return hx::Val( get_anchor2_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor2") ) { return hx::Val( set_anchor2_dyn()); }
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn); }
		if (HX_FIELD_EQ(inName,"get_jointMin") ) { return hx::Val( get_jointMin_dyn()); }
		if (HX_FIELD_EQ(inName,"set_jointMin") ) { return hx::Val( set_jointMin_dyn()); }
		if (HX_FIELD_EQ(inName,"get_jointMax") ) { return hx::Val( get_jointMax_dyn()); }
		if (HX_FIELD_EQ(inName,"set_jointMax") ) { return hx::Val( set_jointMax_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DistanceJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body1(inValue) ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body2(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor1(inValue) ); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor2(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMin(inValue) ); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMax(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::constraint::ZPP_DistanceJoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DistanceJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"));
	outFields->push(HX_HCSTRING("body1","\x4f","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("body2","\x50","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("anchor1","\x1c","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("anchor2","\x1d","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("jointMin","\x68","\xfa","\x25","\x55"));
	outFields->push(HX_HCSTRING("jointMax","\x7a","\xf3","\x25","\x55"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DistanceJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::constraint::ZPP_DistanceJoint*/ ,(int)offsetof(DistanceJoint_obj,zpp_inner_zn),HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DistanceJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String DistanceJoint_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"),
	HX_HCSTRING("get_body1","\xa6","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body1","\xb2","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_body2","\xa7","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body2","\xb3","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_anchor1","\x33","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor1","\x3f","\x53","\x09","\x93"),
	HX_HCSTRING("get_anchor2","\x34","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor2","\x40","\x53","\x09","\x93"),
	HX_HCSTRING("get_jointMin","\x71","\xae","\x3f","\x0a"),
	HX_HCSTRING("set_jointMin","\xe5","\xd1","\x38","\x1f"),
	HX_HCSTRING("get_jointMax","\x83","\xa7","\x3f","\x0a"),
	HX_HCSTRING("set_jointMax","\xf7","\xca","\x38","\x1f"),
	HX_HCSTRING("isSlack","\x06","\x56","\x47","\x1b"),
	HX_HCSTRING("impulse","\xb5","\x50","\xbd","\x6d"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("visitBodies","\xab","\xf3","\x5e","\xe4"),
	::String(null()) };

static void DistanceJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DistanceJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DistanceJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DistanceJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class DistanceJoint_obj::__mClass;

void DistanceJoint_obj::__register()
{
	hx::Object *dummy = new DistanceJoint_obj;
	DistanceJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.constraint.DistanceJoint","\x2a","\xa2","\xce","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DistanceJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DistanceJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DistanceJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DistanceJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DistanceJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DistanceJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace constraint
