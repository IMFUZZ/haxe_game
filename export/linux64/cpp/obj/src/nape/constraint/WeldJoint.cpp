// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_WeldJoint
#include <nape/constraint/WeldJoint.h>
#endif
#ifndef INCLUDED_nape_geom_MatMN
#include <nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_WeldJoint
#include <zpp_nape/constraint/ZPP_WeldJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <zpp_nape/geom/ZPP_MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_192_new,"nape.constraint.WeldJoint","new",0x17781cab,"nape.constraint.WeldJoint.new","nape/constraint/WeldJoint.hx",192,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_206_get_body1,"nape.constraint.WeldJoint","get_body1",0x92c84631,"nape.constraint.WeldJoint.get_body1","nape/constraint/WeldJoint.hx",206,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_208_set_body1,"nape.constraint.WeldJoint","set_body1",0x7619323d,"nape.constraint.WeldJoint.set_body1","nape/constraint/WeldJoint.hx",208,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_244_get_body2,"nape.constraint.WeldJoint","get_body2",0x92c84632,"nape.constraint.WeldJoint.get_body2","nape/constraint/WeldJoint.hx",244,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_246_set_body2,"nape.constraint.WeldJoint","set_body2",0x7619323e,"nape.constraint.WeldJoint.set_body2","nape/constraint/WeldJoint.hx",246,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_280_get_anchor1,"nape.constraint.WeldJoint","get_anchor1",0xdba65b7e,"nape.constraint.WeldJoint.get_anchor1","nape/constraint/WeldJoint.hx",280,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_284_set_anchor1,"nape.constraint.WeldJoint","set_anchor1",0xe613628a,"nape.constraint.WeldJoint.set_anchor1","nape/constraint/WeldJoint.hx",284,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_305_get_anchor2,"nape.constraint.WeldJoint","get_anchor2",0xdba65b7f,"nape.constraint.WeldJoint.get_anchor2","nape/constraint/WeldJoint.hx",305,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_309_set_anchor2,"nape.constraint.WeldJoint","set_anchor2",0xe613628b,"nape.constraint.WeldJoint.set_anchor2","nape/constraint/WeldJoint.hx",309,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_331_get_phase,"nape.constraint.WeldJoint","get_phase",0x9dc19b1d,"nape.constraint.WeldJoint.get_phase","nape/constraint/WeldJoint.hx",331,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_333_set_phase,"nape.constraint.WeldJoint","set_phase",0x81128729,"nape.constraint.WeldJoint.set_phase","nape/constraint/WeldJoint.hx",333,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_384_impulse,"nape.constraint.WeldJoint","impulse",0x8a051e80,"nape.constraint.WeldJoint.impulse","nape/constraint/WeldJoint.hx",384,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_403_bodyImpulse,"nape.constraint.WeldJoint","bodyImpulse",0xb2ac857e,"nape.constraint.WeldJoint.bodyImpulse","nape/constraint/WeldJoint.hx",403,0x63bebec5)
HX_DEFINE_STACK_FRAME(_hx_pos_5a015f38ddeef422_413_visitBodies,"nape.constraint.WeldJoint","visitBodies",0x376902f6,"nape.constraint.WeldJoint.visitBodies","nape/constraint/WeldJoint.hx",413,0x63bebec5)
namespace nape{
namespace constraint{

void WeldJoint_obj::__construct( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2,hx::Null< Float >  __o_phase){
Float phase = __o_phase.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_5a015f38ddeef422_192_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
            	HX_STACK_ARG(body2,"body2")
            	HX_STACK_ARG(anchor1,"anchor1")
            	HX_STACK_ARG(anchor2,"anchor2")
            	HX_STACK_ARG(phase,"phase")
HXLINE( 196)		this->zpp_inner_zn = null();
HXLINE( 361)		this->zpp_inner_zn =  ::zpp_nape::constraint::ZPP_WeldJoint_obj::__alloc( HX_CTX );
HXLINE( 362)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 363)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 364)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 371)		super::__construct();
HXLINE( 373)		{
HXLINE( 373)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 373)			if (hx::IsNull( body1 )) {
HXLINE( 373)				inbody1 = null();
            			}
            			else {
HXLINE( 373)				inbody1 = body1->zpp_inner;
            			}
HXDLIN( 373)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 373)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 373)					bool _hx_tmp;
HXDLIN( 373)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 373)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 373)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 373)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 373)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 373)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 373)						_hx_tmp = false;
            					}
HXDLIN( 373)					if (_hx_tmp) {
HXLINE( 373)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 373)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 373)					bool _hx_tmp2;
HXDLIN( 373)					if (this->zpp_inner->active) {
HXLINE( 373)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 373)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 373)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 373)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 373)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 373)						_hx_tmp2 = false;
            					}
HXDLIN( 373)					if (_hx_tmp2) {
HXLINE( 373)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXDLIN( 373)				this->zpp_inner_zn->b1 = inbody1;
HXDLIN( 373)				bool _hx_tmp4;
HXDLIN( 373)				bool _hx_tmp5;
HXDLIN( 373)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 373)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 373)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 373)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 373)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 373)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 373)					_hx_tmp5 = false;
            				}
HXDLIN( 373)				if (_hx_tmp5) {
HXLINE( 373)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 373)					_hx_tmp4 = false;
            				}
HXDLIN( 373)				if (_hx_tmp4) {
HXLINE( 373)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 373)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 373)				bool _hx_tmp7;
HXDLIN( 373)				if (this->zpp_inner->active) {
HXLINE( 373)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 373)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 373)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 373)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 373)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 373)					_hx_tmp7 = false;
            				}
HXDLIN( 373)				if (_hx_tmp7) {
HXLINE( 373)					this->zpp_inner->wake();
HXDLIN( 373)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 373)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 374)		{
HXLINE( 374)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 374)			if (hx::IsNull( body2 )) {
HXLINE( 374)				inbody2 = null();
            			}
            			else {
HXLINE( 374)				inbody2 = body2->zpp_inner;
            			}
HXDLIN( 374)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 374)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 374)					bool _hx_tmp9;
HXDLIN( 374)					 ::nape::space::Space _hx_tmp10;
HXDLIN( 374)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 374)						_hx_tmp10 = null();
            					}
            					else {
HXLINE( 374)						_hx_tmp10 = this->zpp_inner->space->outer;
            					}
HXDLIN( 374)					if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 374)						_hx_tmp9 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 374)						_hx_tmp9 = false;
            					}
HXDLIN( 374)					if (_hx_tmp9) {
HXLINE( 374)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 374)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 374)					bool _hx_tmp11;
HXDLIN( 374)					if (this->zpp_inner->active) {
HXLINE( 374)						 ::nape::space::Space _hx_tmp12;
HXDLIN( 374)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 374)							_hx_tmp12 = null();
            						}
            						else {
HXLINE( 374)							_hx_tmp12 = this->zpp_inner->space->outer;
            						}
HXDLIN( 374)						_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            					}
            					else {
HXLINE( 374)						_hx_tmp11 = false;
            					}
HXDLIN( 374)					if (_hx_tmp11) {
HXLINE( 374)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXDLIN( 374)				this->zpp_inner_zn->b2 = inbody2;
HXDLIN( 374)				bool _hx_tmp13;
HXDLIN( 374)				bool _hx_tmp14;
HXDLIN( 374)				 ::nape::space::Space _hx_tmp15;
HXDLIN( 374)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 374)					_hx_tmp15 = null();
            				}
            				else {
HXLINE( 374)					_hx_tmp15 = this->zpp_inner->space->outer;
            				}
HXDLIN( 374)				if (hx::IsNotNull( _hx_tmp15 )) {
HXLINE( 374)					_hx_tmp14 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 374)					_hx_tmp14 = false;
            				}
HXDLIN( 374)				if (_hx_tmp14) {
HXLINE( 374)					_hx_tmp13 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 374)					_hx_tmp13 = false;
            				}
HXDLIN( 374)				if (_hx_tmp13) {
HXLINE( 374)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 374)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 374)				bool _hx_tmp16;
HXDLIN( 374)				if (this->zpp_inner->active) {
HXLINE( 374)					 ::nape::space::Space _hx_tmp17;
HXDLIN( 374)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 374)						_hx_tmp17 = null();
            					}
            					else {
HXLINE( 374)						_hx_tmp17 = this->zpp_inner->space->outer;
            					}
HXDLIN( 374)					_hx_tmp16 = hx::IsNotNull( _hx_tmp17 );
            				}
            				else {
HXLINE( 374)					_hx_tmp16 = false;
            				}
HXDLIN( 374)				if (_hx_tmp16) {
HXLINE( 374)					this->zpp_inner->wake();
HXDLIN( 374)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 374)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 375)		{
HXLINE( 375)			{
HXLINE( 375)				if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 375)					this->zpp_inner_zn->setup_a1();
            				}
HXDLIN( 375)				HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a1;
HXDLIN( 375)				{
HXLINE( 375)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor1->zpp_inner;
HXDLIN( 375)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 375)						_this1->_validate();
            					}
            				}
HXDLIN( 375)				HX_VARI( Float,x) = anchor1->zpp_inner->x;
HXDLIN( 375)				{
HXLINE( 375)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor1->zpp_inner;
HXDLIN( 375)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 375)						_this2->_validate();
            					}
            				}
HXDLIN( 375)				HX_VARI( Float,y) = anchor1->zpp_inner->y;
HXDLIN( 375)				bool _hx_tmp18;
HXDLIN( 375)				{
HXLINE( 375)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 375)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 375)						_this3->_validate();
            					}
            				}
HXDLIN( 375)				if ((_this->zpp_inner->x == x)) {
HXLINE( 375)					{
HXLINE( 375)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 375)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 375)							_this4->_validate();
            						}
            					}
HXDLIN( 375)					_hx_tmp18 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 375)					_hx_tmp18 = false;
            				}
HXDLIN( 375)				if (!(_hx_tmp18)) {
HXLINE( 375)					{
HXLINE( 375)						_this->zpp_inner->x = x;
HXDLIN( 375)						_this->zpp_inner->y = y;
            					}
HXDLIN( 375)					{
HXLINE( 375)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 375)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 375)							_this5->_invalidate(_this5);
            						}
            					}
            				}
HXDLIN( 375)				if (anchor1->zpp_inner->weak) {
HXLINE( 375)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor1->zpp_inner;
HXDLIN( 375)					anchor1->zpp_inner->outer = null();
HXDLIN( 375)					anchor1->zpp_inner = null();
HXDLIN( 375)					{
HXLINE( 375)						anchor1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 375)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor1;
            					}
HXDLIN( 375)					{
HXLINE( 375)						{
HXLINE( 375)							if (hx::IsNotNull( inner->outer )) {
HXLINE( 375)								inner->outer->zpp_inner = null();
HXDLIN( 375)								inner->outer = null();
            							}
HXDLIN( 375)							inner->_isimmutable = null();
HXDLIN( 375)							inner->_validate = null();
HXDLIN( 375)							inner->_invalidate = null();
            						}
HXDLIN( 375)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 375)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
            			}
HXDLIN( 375)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 375)				this->zpp_inner_zn->setup_a1();
            			}
            		}
HXLINE( 376)		{
HXLINE( 376)			{
HXLINE( 376)				if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 376)					this->zpp_inner_zn->setup_a2();
            				}
HXDLIN( 376)				HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = this->zpp_inner_zn->wrap_a2;
HXDLIN( 376)				{
HXLINE( 376)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = anchor2->zpp_inner;
HXDLIN( 376)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 376)						_this7->_validate();
            					}
            				}
HXDLIN( 376)				HX_VARI_NAME( Float,x1,"x") = anchor2->zpp_inner->x;
HXDLIN( 376)				{
HXLINE( 376)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = anchor2->zpp_inner;
HXDLIN( 376)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 376)						_this8->_validate();
            					}
            				}
HXDLIN( 376)				HX_VARI_NAME( Float,y1,"y") = anchor2->zpp_inner->y;
HXDLIN( 376)				bool _hx_tmp19;
HXDLIN( 376)				{
HXLINE( 376)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _this6->zpp_inner;
HXDLIN( 376)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 376)						_this9->_validate();
            					}
            				}
HXDLIN( 376)				if ((_this6->zpp_inner->x == x1)) {
HXLINE( 376)					{
HXLINE( 376)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = _this6->zpp_inner;
HXDLIN( 376)						if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 376)							_this10->_validate();
            						}
            					}
HXDLIN( 376)					_hx_tmp19 = (_this6->zpp_inner->y == y1);
            				}
            				else {
HXLINE( 376)					_hx_tmp19 = false;
            				}
HXDLIN( 376)				if (!(_hx_tmp19)) {
HXLINE( 376)					{
HXLINE( 376)						_this6->zpp_inner->x = x1;
HXDLIN( 376)						_this6->zpp_inner->y = y1;
            					}
HXDLIN( 376)					{
HXLINE( 376)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = _this6->zpp_inner;
HXDLIN( 376)						if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 376)							_this11->_invalidate(_this11);
            						}
            					}
            				}
HXDLIN( 376)				if (anchor2->zpp_inner->weak) {
HXLINE( 376)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = anchor2->zpp_inner;
HXDLIN( 376)					anchor2->zpp_inner->outer = null();
HXDLIN( 376)					anchor2->zpp_inner = null();
HXDLIN( 376)					{
HXLINE( 376)						anchor2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 376)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor2;
            					}
HXDLIN( 376)					{
HXLINE( 376)						{
HXLINE( 376)							if (hx::IsNotNull( inner1->outer )) {
HXLINE( 376)								inner1->outer->zpp_inner = null();
HXDLIN( 376)								inner1->outer = null();
            							}
HXDLIN( 376)							inner1->_isimmutable = null();
HXDLIN( 376)							inner1->_validate = null();
HXDLIN( 376)							inner1->_invalidate = null();
            						}
HXDLIN( 376)						inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 376)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            					}
            				}
            			}
HXDLIN( 376)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 376)				this->zpp_inner_zn->setup_a2();
            			}
            		}
HXLINE( 377)		if ((this->zpp_inner_zn->phase != phase)) {
HXLINE( 377)			this->zpp_inner_zn->phase = phase;
HXDLIN( 377)			this->zpp_inner->wake();
            		}
            	}

Dynamic WeldJoint_obj::__CreateEmpty() { return new WeldJoint_obj; }

void *WeldJoint_obj::_hx_vtable = 0;

Dynamic WeldJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WeldJoint_obj > _hx_result = new WeldJoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool WeldJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00e9fd26) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00e9fd26;
	} else {
		return inClassId==(int)0x2c161cbb;
	}
}

 ::nape::phys::Body WeldJoint_obj::get_body1(){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_206_get_body1)
            	HX_STACK_THIS(this)
HXLINE( 206)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 206)			return null();
            		}
            		else {
HXLINE( 206)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 206)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeldJoint_obj,get_body1,return )

 ::nape::phys::Body WeldJoint_obj::set_body1( ::nape::phys::Body body1){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_208_set_body1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
HXLINE( 209)		{
HXLINE( 211)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 211)			if (hx::IsNull( body1 )) {
HXLINE( 211)				inbody1 = null();
            			}
            			else {
HXLINE( 211)				inbody1 = body1->zpp_inner;
            			}
HXLINE( 212)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 213)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 214)					bool _hx_tmp;
HXDLIN( 214)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 214)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 214)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 214)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 214)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 214)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 214)						_hx_tmp = false;
            					}
HXDLIN( 214)					if (_hx_tmp) {
HXLINE( 216)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 216)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 219)					bool _hx_tmp2;
HXDLIN( 219)					if (this->zpp_inner->active) {
HXLINE( 219)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 219)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 219)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 219)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 219)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 219)						_hx_tmp2 = false;
            					}
HXDLIN( 219)					if (_hx_tmp2) {
HXLINE( 219)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXLINE( 221)				this->zpp_inner_zn->b1 = inbody1;
HXLINE( 222)				bool _hx_tmp4;
HXDLIN( 222)				bool _hx_tmp5;
HXDLIN( 222)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 222)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 222)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 222)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 222)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 222)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 222)					_hx_tmp5 = false;
            				}
HXDLIN( 222)				if (_hx_tmp5) {
HXLINE( 222)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 222)					_hx_tmp4 = false;
            				}
HXDLIN( 222)				if (_hx_tmp4) {
HXLINE( 224)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 224)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 227)				bool _hx_tmp7;
HXDLIN( 227)				if (this->zpp_inner->active) {
HXLINE( 227)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 227)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 227)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 227)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 227)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 227)					_hx_tmp7 = false;
            				}
HXDLIN( 227)				if (_hx_tmp7) {
HXLINE( 228)					this->zpp_inner->wake();
HXLINE( 229)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 229)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 233)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 233)			return null();
            		}
            		else {
HXLINE( 233)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 233)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WeldJoint_obj,set_body1,return )

 ::nape::phys::Body WeldJoint_obj::get_body2(){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_244_get_body2)
            	HX_STACK_THIS(this)
HXLINE( 244)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 244)			return null();
            		}
            		else {
HXLINE( 244)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 244)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeldJoint_obj,get_body2,return )

 ::nape::phys::Body WeldJoint_obj::set_body2( ::nape::phys::Body body2){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_246_set_body2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body2,"body2")
HXLINE( 247)		{
HXLINE( 249)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 249)			if (hx::IsNull( body2 )) {
HXLINE( 249)				inbody2 = null();
            			}
            			else {
HXLINE( 249)				inbody2 = body2->zpp_inner;
            			}
HXLINE( 250)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 251)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 252)					bool _hx_tmp;
HXDLIN( 252)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 252)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 252)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 252)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 252)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 252)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 252)						_hx_tmp = false;
            					}
HXDLIN( 252)					if (_hx_tmp) {
HXLINE( 254)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 254)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 257)					bool _hx_tmp2;
HXDLIN( 257)					if (this->zpp_inner->active) {
HXLINE( 257)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 257)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 257)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 257)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 257)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 257)						_hx_tmp2 = false;
            					}
HXDLIN( 257)					if (_hx_tmp2) {
HXLINE( 257)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXLINE( 259)				this->zpp_inner_zn->b2 = inbody2;
HXLINE( 260)				bool _hx_tmp4;
HXDLIN( 260)				bool _hx_tmp5;
HXDLIN( 260)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 260)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 260)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 260)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 260)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 260)					_hx_tmp5 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 260)					_hx_tmp5 = false;
            				}
HXDLIN( 260)				if (_hx_tmp5) {
HXLINE( 260)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 260)					_hx_tmp4 = false;
            				}
HXDLIN( 260)				if (_hx_tmp4) {
HXLINE( 262)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 262)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 265)				bool _hx_tmp7;
HXDLIN( 265)				if (this->zpp_inner->active) {
HXLINE( 265)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 265)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 265)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 265)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 265)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 265)					_hx_tmp7 = false;
            				}
HXDLIN( 265)				if (_hx_tmp7) {
HXLINE( 266)					this->zpp_inner->wake();
HXLINE( 267)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 267)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 271)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 271)			return null();
            		}
            		else {
HXLINE( 271)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 271)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WeldJoint_obj,set_body2,return )

 ::nape::geom::Vec2 WeldJoint_obj::get_anchor1(){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_280_get_anchor1)
            	HX_STACK_THIS(this)
HXLINE( 281)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 281)			this->zpp_inner_zn->setup_a1();
            		}
HXLINE( 282)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeldJoint_obj,get_anchor1,return )

 ::nape::geom::Vec2 WeldJoint_obj::set_anchor1( ::nape::geom::Vec2 anchor1){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_284_set_anchor1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor1,"anchor1")
HXLINE( 294)		{
HXLINE( 294)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 294)				this->zpp_inner_zn->setup_a1();
            			}
HXDLIN( 294)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a1;
HXDLIN( 294)			{
HXLINE( 294)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor1->zpp_inner;
HXDLIN( 294)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 294)					_this1->_validate();
            				}
            			}
HXDLIN( 294)			HX_VARI( Float,x) = anchor1->zpp_inner->x;
HXDLIN( 294)			{
HXLINE( 294)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor1->zpp_inner;
HXDLIN( 294)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 294)					_this2->_validate();
            				}
            			}
HXDLIN( 294)			HX_VARI( Float,y) = anchor1->zpp_inner->y;
HXDLIN( 294)			bool _hx_tmp;
HXDLIN( 294)			{
HXLINE( 294)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 294)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 294)					_this3->_validate();
            				}
            			}
HXDLIN( 294)			if ((_this->zpp_inner->x == x)) {
HXLINE( 294)				{
HXLINE( 294)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 294)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 294)						_this4->_validate();
            					}
            				}
HXDLIN( 294)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 294)				_hx_tmp = false;
            			}
HXDLIN( 294)			if (!(_hx_tmp)) {
HXLINE( 294)				{
HXLINE( 294)					_this->zpp_inner->x = x;
HXDLIN( 294)					_this->zpp_inner->y = y;
            				}
HXDLIN( 294)				{
HXLINE( 294)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 294)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 294)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 294)			if (anchor1->zpp_inner->weak) {
HXLINE( 294)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor1->zpp_inner;
HXDLIN( 294)				anchor1->zpp_inner->outer = null();
HXDLIN( 294)				anchor1->zpp_inner = null();
HXDLIN( 294)				{
HXLINE( 294)					anchor1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 294)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor1;
            				}
HXDLIN( 294)				{
HXLINE( 294)					{
HXLINE( 294)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 294)							inner->outer->zpp_inner = null();
HXDLIN( 294)							inner->outer = null();
            						}
HXDLIN( 294)						inner->_isimmutable = null();
HXDLIN( 294)						inner->_validate = null();
HXDLIN( 294)						inner->_invalidate = null();
            					}
HXDLIN( 294)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 294)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 296)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 296)			this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 296)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WeldJoint_obj,set_anchor1,return )

 ::nape::geom::Vec2 WeldJoint_obj::get_anchor2(){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_305_get_anchor2)
            	HX_STACK_THIS(this)
HXLINE( 306)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 306)			this->zpp_inner_zn->setup_a2();
            		}
HXLINE( 307)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeldJoint_obj,get_anchor2,return )

 ::nape::geom::Vec2 WeldJoint_obj::set_anchor2( ::nape::geom::Vec2 anchor2){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_309_set_anchor2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor2,"anchor2")
HXLINE( 319)		{
HXLINE( 319)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 319)				this->zpp_inner_zn->setup_a2();
            			}
HXDLIN( 319)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a2;
HXDLIN( 319)			{
HXLINE( 319)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor2->zpp_inner;
HXDLIN( 319)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 319)					_this1->_validate();
            				}
            			}
HXDLIN( 319)			HX_VARI( Float,x) = anchor2->zpp_inner->x;
HXDLIN( 319)			{
HXLINE( 319)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor2->zpp_inner;
HXDLIN( 319)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 319)					_this2->_validate();
            				}
            			}
HXDLIN( 319)			HX_VARI( Float,y) = anchor2->zpp_inner->y;
HXDLIN( 319)			bool _hx_tmp;
HXDLIN( 319)			{
HXLINE( 319)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 319)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 319)					_this3->_validate();
            				}
            			}
HXDLIN( 319)			if ((_this->zpp_inner->x == x)) {
HXLINE( 319)				{
HXLINE( 319)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 319)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 319)						_this4->_validate();
            					}
            				}
HXDLIN( 319)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 319)				_hx_tmp = false;
            			}
HXDLIN( 319)			if (!(_hx_tmp)) {
HXLINE( 319)				{
HXLINE( 319)					_this->zpp_inner->x = x;
HXDLIN( 319)					_this->zpp_inner->y = y;
            				}
HXDLIN( 319)				{
HXLINE( 319)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 319)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 319)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 319)			if (anchor2->zpp_inner->weak) {
HXLINE( 319)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor2->zpp_inner;
HXDLIN( 319)				anchor2->zpp_inner->outer = null();
HXDLIN( 319)				anchor2->zpp_inner = null();
HXDLIN( 319)				{
HXLINE( 319)					anchor2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 319)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor2;
            				}
HXDLIN( 319)				{
HXLINE( 319)					{
HXLINE( 319)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 319)							inner->outer->zpp_inner = null();
HXDLIN( 319)							inner->outer = null();
            						}
HXDLIN( 319)						inner->_isimmutable = null();
HXDLIN( 319)						inner->_validate = null();
HXDLIN( 319)						inner->_invalidate = null();
            					}
HXDLIN( 319)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 319)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 321)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 321)			this->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 321)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WeldJoint_obj,set_anchor2,return )

Float WeldJoint_obj::get_phase(){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_331_get_phase)
            	HX_STACK_THIS(this)
HXLINE( 331)		return this->zpp_inner_zn->phase;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeldJoint_obj,get_phase,return )

Float WeldJoint_obj::set_phase(Float phase){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_333_set_phase)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(phase,"phase")
HXLINE( 341)		if ((this->zpp_inner_zn->phase != phase)) {
HXLINE( 342)			this->zpp_inner_zn->phase = phase;
HXLINE( 343)			this->zpp_inner->wake();
            		}
HXLINE( 346)		return this->zpp_inner_zn->phase;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WeldJoint_obj,set_phase,return )

 ::nape::geom::MatMN WeldJoint_obj::impulse(){
            	HX_GC_STACKFRAME(&_hx_pos_5a015f38ddeef422_384_impulse)
            	HX_STACK_THIS(this)
HXLINE( 385)		HX_VARI(  ::nape::geom::MatMN,ret) =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,(int)3,(int)1);
HXLINE( 386)		ret->zpp_inner->x[((int)0 * ret->zpp_inner->n)] = this->zpp_inner_zn->jAccx;
HXLINE( 387)		ret->zpp_inner->x[ret->zpp_inner->n] = this->zpp_inner_zn->jAccy;
HXLINE( 388)		ret->zpp_inner->x[ret->zpp_inner->n] = this->zpp_inner_zn->jAccz;
HXLINE( 389)		return ret;
            	}


 ::nape::geom::Vec3 WeldJoint_obj::bodyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_403_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 403)		if (!(this->zpp_inner->active)) {
HXLINE( 404)			return ::nape::geom::Vec3_obj::get(null(),null(),null());
            		}
            		else {
HXLINE( 407)			return this->zpp_inner_zn->bodyImpulse(body->zpp_inner);
            		}
HXLINE( 403)		return null();
            	}


void WeldJoint_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_5a015f38ddeef422_413_visitBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 414)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 414)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 414)			_hx_tmp = null();
            		}
            		else {
HXLINE( 414)			_hx_tmp = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 414)		if (hx::IsNotNull( _hx_tmp )) {
HXLINE( 415)			 ::nape::phys::Body _hx_tmp1;
HXDLIN( 415)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 415)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 415)				_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 415)			lambda(_hx_tmp1);
            		}
HXLINE( 417)		bool _hx_tmp2;
HXDLIN( 417)		 ::nape::phys::Body _hx_tmp3;
HXDLIN( 417)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 417)			_hx_tmp3 = null();
            		}
            		else {
HXLINE( 417)			_hx_tmp3 = this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 417)		if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 417)			 ::nape::phys::Body _hx_tmp4;
HXDLIN( 417)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 417)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 417)				_hx_tmp4 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 417)			 ::nape::phys::Body _hx_tmp5;
HXDLIN( 417)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 417)				_hx_tmp5 = null();
            			}
            			else {
HXLINE( 417)				_hx_tmp5 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 417)			_hx_tmp2 = hx::IsNotEq( _hx_tmp4,_hx_tmp5 );
            		}
            		else {
HXLINE( 417)			_hx_tmp2 = false;
            		}
HXDLIN( 417)		if (_hx_tmp2) {
HXLINE( 418)			 ::nape::phys::Body _hx_tmp6;
HXDLIN( 418)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 418)				_hx_tmp6 = null();
            			}
            			else {
HXLINE( 418)				_hx_tmp6 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 418)			lambda(_hx_tmp6);
            		}
            	}



hx::ObjectPtr< WeldJoint_obj > WeldJoint_obj::__new( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2,hx::Null< Float >  __o_phase) {
	hx::ObjectPtr< WeldJoint_obj > __this = new WeldJoint_obj();
	__this->__construct(body1,body2,anchor1,anchor2,__o_phase);
	return __this;
}

hx::ObjectPtr< WeldJoint_obj > WeldJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2,hx::Null< Float >  __o_phase) {
	WeldJoint_obj *__this = (WeldJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WeldJoint_obj), true, "nape.constraint.WeldJoint"));
	*(void **)__this = WeldJoint_obj::_hx_vtable;
	__this->__construct(body1,body2,anchor1,anchor2,__o_phase);
	return __this;
}

WeldJoint_obj::WeldJoint_obj()
{
}

void WeldJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WeldJoint);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WeldJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val WeldJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body1()); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body2()); }
		if (HX_FIELD_EQ(inName,"phase") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_phase()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor1()); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor2()); }
		if (HX_FIELD_EQ(inName,"impulse") ) { return hx::Val( impulse_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_body1") ) { return hx::Val( get_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body1") ) { return hx::Val( set_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body2") ) { return hx::Val( get_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body2") ) { return hx::Val( set_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"get_phase") ) { return hx::Val( get_phase_dyn()); }
		if (HX_FIELD_EQ(inName,"set_phase") ) { return hx::Val( set_phase_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_anchor1") ) { return hx::Val( get_anchor1_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor1") ) { return hx::Val( set_anchor1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_anchor2") ) { return hx::Val( get_anchor2_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor2") ) { return hx::Val( set_anchor2_dyn()); }
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val WeldJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body1(inValue) ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body2(inValue) ); }
		if (HX_FIELD_EQ(inName,"phase") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_phase(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor1(inValue) ); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor2(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::constraint::ZPP_WeldJoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WeldJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"));
	outFields->push(HX_HCSTRING("body1","\x4f","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("body2","\x50","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("anchor1","\x1c","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("anchor2","\x1d","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("phase","\x3b","\x28","\xe9","\xc1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo WeldJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::constraint::ZPP_WeldJoint*/ ,(int)offsetof(WeldJoint_obj,zpp_inner_zn),HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *WeldJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String WeldJoint_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"),
	HX_HCSTRING("get_body1","\xa6","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body1","\xb2","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_body2","\xa7","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body2","\xb3","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_anchor1","\x33","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor1","\x3f","\x53","\x09","\x93"),
	HX_HCSTRING("get_anchor2","\x34","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor2","\x40","\x53","\x09","\x93"),
	HX_HCSTRING("get_phase","\x92","\x84","\x92","\x05"),
	HX_HCSTRING("set_phase","\x9e","\x70","\xe3","\xe8"),
	HX_HCSTRING("impulse","\xb5","\x50","\xbd","\x6d"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("visitBodies","\xab","\xf3","\x5e","\xe4"),
	::String(null()) };

static void WeldJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WeldJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WeldJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WeldJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class WeldJoint_obj::__mClass;

void WeldJoint_obj::__register()
{
	hx::Object *dummy = new WeldJoint_obj;
	WeldJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.constraint.WeldJoint","\x39","\xeb","\x13","\x77");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WeldJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WeldJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WeldJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WeldJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WeldJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WeldJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace constraint
