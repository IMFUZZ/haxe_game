// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_AngleJoint
#include <nape/constraint/AngleJoint.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_geom_MatMN
#include <nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_AngleJoint
#include <zpp_nape/constraint/ZPP_AngleJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <zpp_nape/geom/ZPP_MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_182_new,"nape.constraint.AngleJoint","new",0xf891cef4,"nape.constraint.AngleJoint.new","nape/constraint/AngleJoint.hx",182,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_196_get_body1,"nape.constraint.AngleJoint","get_body1",0x94d2553a,"nape.constraint.AngleJoint.get_body1","nape/constraint/AngleJoint.hx",196,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_198_set_body1,"nape.constraint.AngleJoint","set_body1",0x78234146,"nape.constraint.AngleJoint.set_body1","nape/constraint/AngleJoint.hx",198,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_234_get_body2,"nape.constraint.AngleJoint","get_body2",0x94d2553b,"nape.constraint.AngleJoint.get_body2","nape/constraint/AngleJoint.hx",234,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_236_set_body2,"nape.constraint.AngleJoint","set_body2",0x78234147,"nape.constraint.AngleJoint.set_body2","nape/constraint/AngleJoint.hx",236,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_273_get_jointMin,"nape.constraint.AngleJoint","get_jointMin",0xb05f3d5d,"nape.constraint.AngleJoint.get_jointMin","nape/constraint/AngleJoint.hx",273,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_275_set_jointMin,"nape.constraint.AngleJoint","set_jointMin",0xc55860d1,"nape.constraint.AngleJoint.set_jointMin","nape/constraint/AngleJoint.hx",275,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_300_get_jointMax,"nape.constraint.AngleJoint","get_jointMax",0xb05f366f,"nape.constraint.AngleJoint.get_jointMax","nape/constraint/AngleJoint.hx",300,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_302_set_jointMax,"nape.constraint.AngleJoint","set_jointMax",0xc55859e3,"nape.constraint.AngleJoint.set_jointMax","nape/constraint/AngleJoint.hx",302,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_325_get_ratio,"nape.constraint.AngleJoint","get_ratio",0xc206b6f6,"nape.constraint.AngleJoint.get_ratio","nape/constraint/AngleJoint.hx",325,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_327_set_ratio,"nape.constraint.AngleJoint","set_ratio",0xa557a302,"nape.constraint.AngleJoint.set_ratio","nape/constraint/AngleJoint.hx",327,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_359_isSlack,"nape.constraint.AngleJoint","isSlack",0x74aa2e9a,"nape.constraint.AngleJoint.isSlack","nape/constraint/AngleJoint.hx",359,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_397_impulse,"nape.constraint.AngleJoint","impulse",0xc7202949,"nape.constraint.AngleJoint.impulse","nape/constraint/AngleJoint.hx",397,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_416_bodyImpulse,"nape.constraint.AngleJoint","bodyImpulse",0xd69f28c7,"nape.constraint.AngleJoint.bodyImpulse","nape/constraint/AngleJoint.hx",416,0x60e8d95c)
HX_DEFINE_STACK_FRAME(_hx_pos_68a1f92d70c3c933_426_visitBodies,"nape.constraint.AngleJoint","visitBodies",0x5b5ba63f,"nape.constraint.AngleJoint.visitBodies","nape/constraint/AngleJoint.hx",426,0x60e8d95c)
namespace nape{
namespace constraint{

void AngleJoint_obj::__construct( ::nape::phys::Body body1, ::nape::phys::Body body2,Float jointMin,Float jointMax,hx::Null< Float >  __o_ratio){
Float ratio = __o_ratio.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_68a1f92d70c3c933_182_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
            	HX_STACK_ARG(body2,"body2")
            	HX_STACK_ARG(jointMin,"jointMin")
            	HX_STACK_ARG(jointMax,"jointMax")
            	HX_STACK_ARG(ratio,"ratio")
HXLINE( 186)		this->zpp_inner_zn = null();
HXLINE( 374)		this->zpp_inner_zn =  ::zpp_nape::constraint::ZPP_AngleJoint_obj::__alloc( HX_CTX );
HXLINE( 375)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 376)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 377)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 384)		super::__construct();
HXLINE( 386)		{
HXLINE( 386)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 386)			if (hx::IsNull( body1 )) {
HXLINE( 386)				inbody1 = null();
            			}
            			else {
HXLINE( 386)				inbody1 = body1->zpp_inner;
            			}
HXDLIN( 386)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 386)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 386)					bool _hx_tmp;
HXDLIN( 386)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 386)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 386)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 386)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 386)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 386)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 386)						_hx_tmp = false;
            					}
HXDLIN( 386)					if (_hx_tmp) {
HXLINE( 386)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 386)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 386)					bool _hx_tmp2;
HXDLIN( 386)					if (this->zpp_inner->active) {
HXLINE( 386)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 386)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 386)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 386)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 386)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 386)						_hx_tmp2 = false;
            					}
HXDLIN( 386)					if (_hx_tmp2) {
HXLINE( 386)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXDLIN( 386)				this->zpp_inner_zn->b1 = inbody1;
HXDLIN( 386)				bool _hx_tmp4;
HXDLIN( 386)				bool _hx_tmp5;
HXDLIN( 386)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 386)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 386)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 386)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 386)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 386)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 386)					_hx_tmp5 = false;
            				}
HXDLIN( 386)				if (_hx_tmp5) {
HXLINE( 386)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 386)					_hx_tmp4 = false;
            				}
HXDLIN( 386)				if (_hx_tmp4) {
HXLINE( 386)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 386)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 386)				bool _hx_tmp7;
HXDLIN( 386)				if (this->zpp_inner->active) {
HXLINE( 386)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 386)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 386)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 386)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 386)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 386)					_hx_tmp7 = false;
            				}
HXDLIN( 386)				if (_hx_tmp7) {
HXLINE( 386)					this->zpp_inner->wake();
HXDLIN( 386)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 386)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 387)		{
HXLINE( 387)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 387)			if (hx::IsNull( body2 )) {
HXLINE( 387)				inbody2 = null();
            			}
            			else {
HXLINE( 387)				inbody2 = body2->zpp_inner;
            			}
HXDLIN( 387)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 387)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 387)					bool _hx_tmp9;
HXDLIN( 387)					 ::nape::space::Space _hx_tmp10;
HXDLIN( 387)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 387)						_hx_tmp10 = null();
            					}
            					else {
HXLINE( 387)						_hx_tmp10 = this->zpp_inner->space->outer;
            					}
HXDLIN( 387)					if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 387)						_hx_tmp9 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 387)						_hx_tmp9 = false;
            					}
HXDLIN( 387)					if (_hx_tmp9) {
HXLINE( 387)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 387)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 387)					bool _hx_tmp11;
HXDLIN( 387)					if (this->zpp_inner->active) {
HXLINE( 387)						 ::nape::space::Space _hx_tmp12;
HXDLIN( 387)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 387)							_hx_tmp12 = null();
            						}
            						else {
HXLINE( 387)							_hx_tmp12 = this->zpp_inner->space->outer;
            						}
HXDLIN( 387)						_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            					}
            					else {
HXLINE( 387)						_hx_tmp11 = false;
            					}
HXDLIN( 387)					if (_hx_tmp11) {
HXLINE( 387)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXDLIN( 387)				this->zpp_inner_zn->b2 = inbody2;
HXDLIN( 387)				bool _hx_tmp13;
HXDLIN( 387)				bool _hx_tmp14;
HXDLIN( 387)				 ::nape::space::Space _hx_tmp15;
HXDLIN( 387)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 387)					_hx_tmp15 = null();
            				}
            				else {
HXLINE( 387)					_hx_tmp15 = this->zpp_inner->space->outer;
            				}
HXDLIN( 387)				if (hx::IsNotNull( _hx_tmp15 )) {
HXLINE( 387)					_hx_tmp14 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 387)					_hx_tmp14 = false;
            				}
HXDLIN( 387)				if (_hx_tmp14) {
HXLINE( 387)					_hx_tmp13 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 387)					_hx_tmp13 = false;
            				}
HXDLIN( 387)				if (_hx_tmp13) {
HXLINE( 387)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 387)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 387)				bool _hx_tmp16;
HXDLIN( 387)				if (this->zpp_inner->active) {
HXLINE( 387)					 ::nape::space::Space _hx_tmp17;
HXDLIN( 387)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 387)						_hx_tmp17 = null();
            					}
            					else {
HXLINE( 387)						_hx_tmp17 = this->zpp_inner->space->outer;
            					}
HXDLIN( 387)					_hx_tmp16 = hx::IsNotNull( _hx_tmp17 );
            				}
            				else {
HXLINE( 387)					_hx_tmp16 = false;
            				}
HXDLIN( 387)				if (_hx_tmp16) {
HXLINE( 387)					this->zpp_inner->wake();
HXDLIN( 387)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 387)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 388)		if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 388)			this->zpp_inner_zn->jointMin = jointMin;
HXDLIN( 388)			this->zpp_inner->wake();
            		}
HXLINE( 389)		if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 389)			this->zpp_inner_zn->jointMax = jointMax;
HXDLIN( 389)			this->zpp_inner->wake();
            		}
HXLINE( 390)		if ((this->zpp_inner_zn->ratio != ratio)) {
HXLINE( 390)			this->zpp_inner_zn->ratio = ratio;
HXDLIN( 390)			this->zpp_inner->wake();
            		}
            	}

Dynamic AngleJoint_obj::__CreateEmpty() { return new AngleJoint_obj; }

void *AngleJoint_obj::_hx_vtable = 0;

Dynamic AngleJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AngleJoint_obj > _hx_result = new AngleJoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool AngleJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00e9fd26) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00e9fd26;
	} else {
		return inClassId==(int)0x4b26b3a4;
	}
}

 ::nape::phys::Body AngleJoint_obj::get_body1(){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_196_get_body1)
            	HX_STACK_THIS(this)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 196)			return null();
            		}
            		else {
HXLINE( 196)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 196)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AngleJoint_obj,get_body1,return )

 ::nape::phys::Body AngleJoint_obj::set_body1( ::nape::phys::Body body1){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_198_set_body1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
HXLINE( 199)		{
HXLINE( 201)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 201)			if (hx::IsNull( body1 )) {
HXLINE( 201)				inbody1 = null();
            			}
            			else {
HXLINE( 201)				inbody1 = body1->zpp_inner;
            			}
HXLINE( 202)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 203)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 204)					bool _hx_tmp;
HXDLIN( 204)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 204)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 204)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 204)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 204)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 204)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 204)						_hx_tmp = false;
            					}
HXDLIN( 204)					if (_hx_tmp) {
HXLINE( 206)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 206)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 209)					bool _hx_tmp2;
HXDLIN( 209)					if (this->zpp_inner->active) {
HXLINE( 209)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 209)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 209)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 209)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 209)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 209)						_hx_tmp2 = false;
            					}
HXDLIN( 209)					if (_hx_tmp2) {
HXLINE( 209)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXLINE( 211)				this->zpp_inner_zn->b1 = inbody1;
HXLINE( 212)				bool _hx_tmp4;
HXDLIN( 212)				bool _hx_tmp5;
HXDLIN( 212)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 212)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 212)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 212)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 212)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 212)					_hx_tmp5 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 212)					_hx_tmp5 = false;
            				}
HXDLIN( 212)				if (_hx_tmp5) {
HXLINE( 212)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 212)					_hx_tmp4 = false;
            				}
HXDLIN( 212)				if (_hx_tmp4) {
HXLINE( 214)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 214)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 217)				bool _hx_tmp7;
HXDLIN( 217)				if (this->zpp_inner->active) {
HXLINE( 217)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 217)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 217)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 217)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 217)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 217)					_hx_tmp7 = false;
            				}
HXDLIN( 217)				if (_hx_tmp7) {
HXLINE( 218)					this->zpp_inner->wake();
HXLINE( 219)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 219)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 223)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 223)			return null();
            		}
            		else {
HXLINE( 223)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 223)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AngleJoint_obj,set_body1,return )

 ::nape::phys::Body AngleJoint_obj::get_body2(){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_234_get_body2)
            	HX_STACK_THIS(this)
HXLINE( 234)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 234)			return null();
            		}
            		else {
HXLINE( 234)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 234)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AngleJoint_obj,get_body2,return )

 ::nape::phys::Body AngleJoint_obj::set_body2( ::nape::phys::Body body2){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_236_set_body2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body2,"body2")
HXLINE( 237)		{
HXLINE( 239)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 239)			if (hx::IsNull( body2 )) {
HXLINE( 239)				inbody2 = null();
            			}
            			else {
HXLINE( 239)				inbody2 = body2->zpp_inner;
            			}
HXLINE( 240)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 241)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 242)					bool _hx_tmp;
HXDLIN( 242)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 242)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 242)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 242)						_hx_tmp1 = this->zpp_inner->space->outer;
            					}
HXDLIN( 242)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 242)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 242)						_hx_tmp = false;
            					}
HXDLIN( 242)					if (_hx_tmp) {
HXLINE( 244)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 244)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 247)					bool _hx_tmp2;
HXDLIN( 247)					if (this->zpp_inner->active) {
HXLINE( 247)						 ::nape::space::Space _hx_tmp3;
HXDLIN( 247)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 247)							_hx_tmp3 = null();
            						}
            						else {
HXLINE( 247)							_hx_tmp3 = this->zpp_inner->space->outer;
            						}
HXDLIN( 247)						_hx_tmp2 = hx::IsNotNull( _hx_tmp3 );
            					}
            					else {
HXLINE( 247)						_hx_tmp2 = false;
            					}
HXDLIN( 247)					if (_hx_tmp2) {
HXLINE( 247)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXLINE( 249)				this->zpp_inner_zn->b2 = inbody2;
HXLINE( 250)				bool _hx_tmp4;
HXDLIN( 250)				bool _hx_tmp5;
HXDLIN( 250)				 ::nape::space::Space _hx_tmp6;
HXDLIN( 250)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 250)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 250)					_hx_tmp6 = this->zpp_inner->space->outer;
            				}
HXDLIN( 250)				if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 250)					_hx_tmp5 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 250)					_hx_tmp5 = false;
            				}
HXDLIN( 250)				if (_hx_tmp5) {
HXLINE( 250)					_hx_tmp4 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 250)					_hx_tmp4 = false;
            				}
HXDLIN( 250)				if (_hx_tmp4) {
HXLINE( 252)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 252)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 255)				bool _hx_tmp7;
HXDLIN( 255)				if (this->zpp_inner->active) {
HXLINE( 255)					 ::nape::space::Space _hx_tmp8;
HXDLIN( 255)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 255)						_hx_tmp8 = null();
            					}
            					else {
HXLINE( 255)						_hx_tmp8 = this->zpp_inner->space->outer;
            					}
HXDLIN( 255)					_hx_tmp7 = hx::IsNotNull( _hx_tmp8 );
            				}
            				else {
HXLINE( 255)					_hx_tmp7 = false;
            				}
HXDLIN( 255)				if (_hx_tmp7) {
HXLINE( 256)					this->zpp_inner->wake();
HXLINE( 257)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 257)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 261)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 261)			return null();
            		}
            		else {
HXLINE( 261)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 261)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AngleJoint_obj,set_body2,return )

Float AngleJoint_obj::get_jointMin(){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_273_get_jointMin)
            	HX_STACK_THIS(this)
HXLINE( 273)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AngleJoint_obj,get_jointMin,return )

Float AngleJoint_obj::set_jointMin(Float jointMin){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_275_set_jointMin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(jointMin,"jointMin")
HXLINE( 283)		if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 284)			this->zpp_inner_zn->jointMin = jointMin;
HXLINE( 285)			this->zpp_inner->wake();
            		}
HXLINE( 288)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AngleJoint_obj,set_jointMin,return )

Float AngleJoint_obj::get_jointMax(){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_300_get_jointMax)
            	HX_STACK_THIS(this)
HXLINE( 300)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AngleJoint_obj,get_jointMax,return )

Float AngleJoint_obj::set_jointMax(Float jointMax){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_302_set_jointMax)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(jointMax,"jointMax")
HXLINE( 310)		if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 311)			this->zpp_inner_zn->jointMax = jointMax;
HXLINE( 312)			this->zpp_inner->wake();
            		}
HXLINE( 315)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AngleJoint_obj,set_jointMax,return )

Float AngleJoint_obj::get_ratio(){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_325_get_ratio)
            	HX_STACK_THIS(this)
HXLINE( 325)		return this->zpp_inner_zn->ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AngleJoint_obj,get_ratio,return )

Float AngleJoint_obj::set_ratio(Float ratio){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_327_set_ratio)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ratio,"ratio")
HXLINE( 335)		if ((this->zpp_inner_zn->ratio != ratio)) {
HXLINE( 336)			this->zpp_inner_zn->ratio = ratio;
HXLINE( 337)			this->zpp_inner->wake();
            		}
HXLINE( 340)		return this->zpp_inner_zn->ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AngleJoint_obj,set_ratio,return )

bool AngleJoint_obj::isSlack(){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_359_isSlack)
            	HX_STACK_THIS(this)
HXLINE( 359)		HX_VARI(  ::zpp_nape::constraint::ZPP_AngleJoint,_this) = this->zpp_inner_zn;
HXDLIN( 359)		HX_VAR( bool,slack);
HXDLIN( 359)		{
HXLINE( 359)			HX_VARI( Float,C) = ((_this->ratio * _this->b2->rot) - _this->b1->rot);
HXDLIN( 359)			if (_this->equal) {
HXLINE( 359)				slack = false;
HXDLIN( 359)				_this->scale = ((Float)1.0);
            			}
            			else {
HXLINE( 359)				if ((C < _this->jointMin)) {
HXLINE( 359)					_this->scale = ((Float)-1.0);
HXDLIN( 359)					slack = false;
            				}
            				else {
HXLINE( 359)					if ((C > _this->jointMax)) {
HXLINE( 359)						C = (C - _this->jointMax);
HXDLIN( 359)						_this->scale = ((Float)1.0);
HXDLIN( 359)						slack = false;
            					}
            					else {
HXLINE( 359)						_this->scale = ((Float)0.0);
HXDLIN( 359)						C = (int)0;
HXDLIN( 359)						slack = true;
            					}
            				}
            			}
            		}
HXDLIN( 359)		return slack;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AngleJoint_obj,isSlack,return )

 ::nape::geom::MatMN AngleJoint_obj::impulse(){
            	HX_GC_STACKFRAME(&_hx_pos_68a1f92d70c3c933_397_impulse)
            	HX_STACK_THIS(this)
HXLINE( 398)		HX_VARI(  ::nape::geom::MatMN,ret) =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,(int)1,(int)1);
HXLINE( 399)		ret->zpp_inner->x[((int)0 * ret->zpp_inner->n)] = this->zpp_inner_zn->jAcc;
HXLINE( 400)		return ret;
            	}


 ::nape::geom::Vec3 AngleJoint_obj::bodyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_416_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 416)		if (!(this->zpp_inner->active)) {
HXLINE( 417)			return ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
            		}
            		else {
HXLINE( 420)			return this->zpp_inner_zn->bodyImpulse(body->zpp_inner);
            		}
HXLINE( 416)		return null();
            	}


void AngleJoint_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_68a1f92d70c3c933_426_visitBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 432)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 432)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 432)			_hx_tmp = null();
            		}
            		else {
HXLINE( 432)			_hx_tmp = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 432)		if (hx::IsNotNull( _hx_tmp )) {
HXLINE( 433)			 ::nape::phys::Body _hx_tmp1;
HXDLIN( 433)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 433)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 433)				_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 433)			lambda(_hx_tmp1);
            		}
HXLINE( 435)		bool _hx_tmp2;
HXDLIN( 435)		 ::nape::phys::Body _hx_tmp3;
HXDLIN( 435)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 435)			_hx_tmp3 = null();
            		}
            		else {
HXLINE( 435)			_hx_tmp3 = this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 435)		if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 435)			 ::nape::phys::Body _hx_tmp4;
HXDLIN( 435)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 435)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 435)				_hx_tmp4 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 435)			 ::nape::phys::Body _hx_tmp5;
HXDLIN( 435)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 435)				_hx_tmp5 = null();
            			}
            			else {
HXLINE( 435)				_hx_tmp5 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 435)			_hx_tmp2 = hx::IsNotEq( _hx_tmp4,_hx_tmp5 );
            		}
            		else {
HXLINE( 435)			_hx_tmp2 = false;
            		}
HXDLIN( 435)		if (_hx_tmp2) {
HXLINE( 436)			 ::nape::phys::Body _hx_tmp6;
HXDLIN( 436)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 436)				_hx_tmp6 = null();
            			}
            			else {
HXLINE( 436)				_hx_tmp6 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 436)			lambda(_hx_tmp6);
            		}
            	}



hx::ObjectPtr< AngleJoint_obj > AngleJoint_obj::__new( ::nape::phys::Body body1, ::nape::phys::Body body2,Float jointMin,Float jointMax,hx::Null< Float >  __o_ratio) {
	hx::ObjectPtr< AngleJoint_obj > __this = new AngleJoint_obj();
	__this->__construct(body1,body2,jointMin,jointMax,__o_ratio);
	return __this;
}

hx::ObjectPtr< AngleJoint_obj > AngleJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::phys::Body body1, ::nape::phys::Body body2,Float jointMin,Float jointMax,hx::Null< Float >  __o_ratio) {
	AngleJoint_obj *__this = (AngleJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AngleJoint_obj), true, "nape.constraint.AngleJoint"));
	*(void **)__this = AngleJoint_obj::_hx_vtable;
	__this->__construct(body1,body2,jointMin,jointMax,__o_ratio);
	return __this;
}

AngleJoint_obj::AngleJoint_obj()
{
}

void AngleJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AngleJoint);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AngleJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AngleJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body1()); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body2()); }
		if (HX_FIELD_EQ(inName,"ratio") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_ratio()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isSlack") ) { return hx::Val( isSlack_dyn()); }
		if (HX_FIELD_EQ(inName,"impulse") ) { return hx::Val( impulse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_jointMin()); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_jointMax()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_body1") ) { return hx::Val( get_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body1") ) { return hx::Val( set_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body2") ) { return hx::Val( get_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body2") ) { return hx::Val( set_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"get_ratio") ) { return hx::Val( get_ratio_dyn()); }
		if (HX_FIELD_EQ(inName,"set_ratio") ) { return hx::Val( set_ratio_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn); }
		if (HX_FIELD_EQ(inName,"get_jointMin") ) { return hx::Val( get_jointMin_dyn()); }
		if (HX_FIELD_EQ(inName,"set_jointMin") ) { return hx::Val( set_jointMin_dyn()); }
		if (HX_FIELD_EQ(inName,"get_jointMax") ) { return hx::Val( get_jointMax_dyn()); }
		if (HX_FIELD_EQ(inName,"set_jointMax") ) { return hx::Val( set_jointMax_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AngleJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body1(inValue) ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body2(inValue) ); }
		if (HX_FIELD_EQ(inName,"ratio") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ratio(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMin(inValue) ); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMax(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::constraint::ZPP_AngleJoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AngleJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"));
	outFields->push(HX_HCSTRING("body1","\x4f","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("body2","\x50","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("jointMin","\x68","\xfa","\x25","\x55"));
	outFields->push(HX_HCSTRING("jointMax","\x7a","\xf3","\x25","\x55"));
	outFields->push(HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AngleJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::constraint::ZPP_AngleJoint*/ ,(int)offsetof(AngleJoint_obj,zpp_inner_zn),HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AngleJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String AngleJoint_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"),
	HX_HCSTRING("get_body1","\xa6","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body1","\xb2","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_body2","\xa7","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body2","\xb3","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_jointMin","\x71","\xae","\x3f","\x0a"),
	HX_HCSTRING("set_jointMin","\xe5","\xd1","\x38","\x1f"),
	HX_HCSTRING("get_jointMax","\x83","\xa7","\x3f","\x0a"),
	HX_HCSTRING("set_jointMax","\xf7","\xca","\x38","\x1f"),
	HX_HCSTRING("get_ratio","\x62","\x91","\xcd","\x27"),
	HX_HCSTRING("set_ratio","\x6e","\x7d","\x1e","\x0b"),
	HX_HCSTRING("isSlack","\x06","\x56","\x47","\x1b"),
	HX_HCSTRING("impulse","\xb5","\x50","\xbd","\x6d"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("visitBodies","\xab","\xf3","\x5e","\xe4"),
	::String(null()) };

static void AngleJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AngleJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AngleJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AngleJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class AngleJoint_obj::__mClass;

void AngleJoint_obj::__register()
{
	hx::Object *dummy = new AngleJoint_obj;
	AngleJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.constraint.AngleJoint","\x02","\x85","\xe2","\x4e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AngleJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AngleJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AngleJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AngleJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AngleJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AngleJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace constraint
