// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_PulleyJoint
#include <nape/constraint/PulleyJoint.h>
#endif
#ifndef INCLUDED_nape_geom_MatMN
#include <nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_PulleyJoint
#include <zpp_nape/constraint/ZPP_PulleyJoint.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <zpp_nape/geom/ZPP_MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_187_new,"nape.constraint.PulleyJoint","new",0x06ee1c18,"nape.constraint.PulleyJoint.new","nape/constraint/PulleyJoint.hx",187,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_201_get_body1,"nape.constraint.PulleyJoint","get_body1",0x9deb155e,"nape.constraint.PulleyJoint.get_body1","nape/constraint/PulleyJoint.hx",201,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_203_set_body1,"nape.constraint.PulleyJoint","set_body1",0x813c016a,"nape.constraint.PulleyJoint.set_body1","nape/constraint/PulleyJoint.hx",203,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_239_get_body2,"nape.constraint.PulleyJoint","get_body2",0x9deb155f,"nape.constraint.PulleyJoint.get_body2","nape/constraint/PulleyJoint.hx",239,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_241_set_body2,"nape.constraint.PulleyJoint","set_body2",0x813c016b,"nape.constraint.PulleyJoint.set_body2","nape/constraint/PulleyJoint.hx",241,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_277_get_body3,"nape.constraint.PulleyJoint","get_body3",0x9deb1560,"nape.constraint.PulleyJoint.get_body3","nape/constraint/PulleyJoint.hx",277,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_279_set_body3,"nape.constraint.PulleyJoint","set_body3",0x813c016c,"nape.constraint.PulleyJoint.set_body3","nape/constraint/PulleyJoint.hx",279,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_315_get_body4,"nape.constraint.PulleyJoint","get_body4",0x9deb1561,"nape.constraint.PulleyJoint.get_body4","nape/constraint/PulleyJoint.hx",315,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_317_set_body4,"nape.constraint.PulleyJoint","set_body4",0x813c016d,"nape.constraint.PulleyJoint.set_body4","nape/constraint/PulleyJoint.hx",317,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_351_get_anchor1,"nape.constraint.PulleyJoint","get_anchor1",0x107d0feb,"nape.constraint.PulleyJoint.get_anchor1","nape/constraint/PulleyJoint.hx",351,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_355_set_anchor1,"nape.constraint.PulleyJoint","set_anchor1",0x1aea16f7,"nape.constraint.PulleyJoint.set_anchor1","nape/constraint/PulleyJoint.hx",355,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_376_get_anchor2,"nape.constraint.PulleyJoint","get_anchor2",0x107d0fec,"nape.constraint.PulleyJoint.get_anchor2","nape/constraint/PulleyJoint.hx",376,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_380_set_anchor2,"nape.constraint.PulleyJoint","set_anchor2",0x1aea16f8,"nape.constraint.PulleyJoint.set_anchor2","nape/constraint/PulleyJoint.hx",380,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_401_get_anchor3,"nape.constraint.PulleyJoint","get_anchor3",0x107d0fed,"nape.constraint.PulleyJoint.get_anchor3","nape/constraint/PulleyJoint.hx",401,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_405_set_anchor3,"nape.constraint.PulleyJoint","set_anchor3",0x1aea16f9,"nape.constraint.PulleyJoint.set_anchor3","nape/constraint/PulleyJoint.hx",405,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_426_get_anchor4,"nape.constraint.PulleyJoint","get_anchor4",0x107d0fee,"nape.constraint.PulleyJoint.get_anchor4","nape/constraint/PulleyJoint.hx",426,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_430_set_anchor4,"nape.constraint.PulleyJoint","set_anchor4",0x1aea16fa,"nape.constraint.PulleyJoint.set_anchor4","nape/constraint/PulleyJoint.hx",430,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_452_get_jointMin,"nape.constraint.PulleyJoint","get_jointMin",0x670a2bb9,"nape.constraint.PulleyJoint.get_jointMin","nape/constraint/PulleyJoint.hx",452,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_454_set_jointMin,"nape.constraint.PulleyJoint","set_jointMin",0x7c034f2d,"nape.constraint.PulleyJoint.set_jointMin","nape/constraint/PulleyJoint.hx",454,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_480_get_jointMax,"nape.constraint.PulleyJoint","get_jointMax",0x670a24cb,"nape.constraint.PulleyJoint.get_jointMax","nape/constraint/PulleyJoint.hx",480,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_482_set_jointMax,"nape.constraint.PulleyJoint","set_jointMax",0x7c03483f,"nape.constraint.PulleyJoint.set_jointMax","nape/constraint/PulleyJoint.hx",482,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_508_get_ratio,"nape.constraint.PulleyJoint","get_ratio",0xcb1f771a,"nape.constraint.PulleyJoint.get_ratio","nape/constraint/PulleyJoint.hx",508,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_510_set_ratio,"nape.constraint.PulleyJoint","set_ratio",0xae706326,"nape.constraint.PulleyJoint.set_ratio","nape/constraint/PulleyJoint.hx",510,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_542_isSlack,"nape.constraint.PulleyJoint","isSlack",0x761dddbe,"nape.constraint.PulleyJoint.isSlack","nape/constraint/PulleyJoint.hx",542,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_592_impulse,"nape.constraint.PulleyJoint","impulse",0xc893d86d,"nape.constraint.PulleyJoint.impulse","nape/constraint/PulleyJoint.hx",592,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_609_bodyImpulse,"nape.constraint.PulleyJoint","bodyImpulse",0xe78339eb,"nape.constraint.PulleyJoint.bodyImpulse","nape/constraint/PulleyJoint.hx",609,0x2d6ef3f8)
HX_DEFINE_STACK_FRAME(_hx_pos_7d77866d564ee991_619_visitBodies,"nape.constraint.PulleyJoint","visitBodies",0x6c3fb763,"nape.constraint.PulleyJoint.visitBodies","nape/constraint/PulleyJoint.hx",619,0x2d6ef3f8)
namespace nape{
namespace constraint{

void PulleyJoint_obj::__construct( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::phys::Body body3, ::nape::phys::Body body4, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2, ::nape::geom::Vec2 anchor3, ::nape::geom::Vec2 anchor4,Float jointMin,Float jointMax,hx::Null< Float >  __o_ratio){
Float ratio = __o_ratio.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_7d77866d564ee991_187_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
            	HX_STACK_ARG(body2,"body2")
            	HX_STACK_ARG(body3,"body3")
            	HX_STACK_ARG(body4,"body4")
            	HX_STACK_ARG(anchor1,"anchor1")
            	HX_STACK_ARG(anchor2,"anchor2")
            	HX_STACK_ARG(anchor3,"anchor3")
            	HX_STACK_ARG(anchor4,"anchor4")
            	HX_STACK_ARG(jointMin,"jointMin")
            	HX_STACK_ARG(jointMax,"jointMax")
            	HX_STACK_ARG(ratio,"ratio")
HXLINE( 191)		this->zpp_inner_zn = null();
HXLINE( 563)		this->zpp_inner_zn =  ::zpp_nape::constraint::ZPP_PulleyJoint_obj::__alloc( HX_CTX );
HXLINE( 564)		this->zpp_inner = this->zpp_inner_zn;
HXLINE( 565)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 566)		this->zpp_inner_zn->outer_zn = hx::ObjectPtr<OBJ_>(this);
HXLINE( 573)		super::__construct();
HXLINE( 575)		{
HXLINE( 575)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 575)			if (hx::IsNull( body1 )) {
HXLINE( 575)				inbody1 = null();
            			}
            			else {
HXLINE( 575)				inbody1 = body1->zpp_inner;
            			}
HXDLIN( 575)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 575)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 575)					bool _hx_tmp;
HXDLIN( 575)					bool _hx_tmp1;
HXDLIN( 575)					bool _hx_tmp2;
HXDLIN( 575)					 ::nape::space::Space _hx_tmp3;
HXDLIN( 575)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 575)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 575)						_hx_tmp3 = this->zpp_inner->space->outer;
            					}
HXDLIN( 575)					if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 575)						_hx_tmp2 = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 575)						_hx_tmp2 = false;
            					}
HXDLIN( 575)					if (_hx_tmp2) {
HXLINE( 575)						_hx_tmp1 = hx::IsNotEq( this->zpp_inner_zn->b3,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 575)						_hx_tmp1 = false;
            					}
HXDLIN( 575)					if (_hx_tmp1) {
HXLINE( 575)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b4,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 575)						_hx_tmp = false;
            					}
HXDLIN( 575)					if (_hx_tmp) {
HXLINE( 575)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 575)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 575)					bool _hx_tmp4;
HXDLIN( 575)					if (this->zpp_inner->active) {
HXLINE( 575)						 ::nape::space::Space _hx_tmp5;
HXDLIN( 575)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 575)							_hx_tmp5 = null();
            						}
            						else {
HXLINE( 575)							_hx_tmp5 = this->zpp_inner->space->outer;
            						}
HXDLIN( 575)						_hx_tmp4 = hx::IsNotNull( _hx_tmp5 );
            					}
            					else {
HXLINE( 575)						_hx_tmp4 = false;
            					}
HXDLIN( 575)					if (_hx_tmp4) {
HXLINE( 575)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXDLIN( 575)				this->zpp_inner_zn->b1 = inbody1;
HXDLIN( 575)				bool _hx_tmp6;
HXDLIN( 575)				bool _hx_tmp7;
HXDLIN( 575)				bool _hx_tmp8;
HXDLIN( 575)				bool _hx_tmp9;
HXDLIN( 575)				 ::nape::space::Space _hx_tmp10;
HXDLIN( 575)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 575)					_hx_tmp10 = null();
            				}
            				else {
HXLINE( 575)					_hx_tmp10 = this->zpp_inner->space->outer;
            				}
HXDLIN( 575)				if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 575)					_hx_tmp9 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 575)					_hx_tmp9 = false;
            				}
HXDLIN( 575)				if (_hx_tmp9) {
HXLINE( 575)					_hx_tmp8 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 575)					_hx_tmp8 = false;
            				}
HXDLIN( 575)				if (_hx_tmp8) {
HXLINE( 575)					_hx_tmp7 = hx::IsNotEq( this->zpp_inner_zn->b3,inbody1 );
            				}
            				else {
HXLINE( 575)					_hx_tmp7 = false;
            				}
HXDLIN( 575)				if (_hx_tmp7) {
HXLINE( 575)					_hx_tmp6 = hx::IsNotEq( this->zpp_inner_zn->b4,inbody1 );
            				}
            				else {
HXLINE( 575)					_hx_tmp6 = false;
            				}
HXDLIN( 575)				if (_hx_tmp6) {
HXLINE( 575)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 575)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 575)				bool _hx_tmp11;
HXDLIN( 575)				if (this->zpp_inner->active) {
HXLINE( 575)					 ::nape::space::Space _hx_tmp12;
HXDLIN( 575)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 575)						_hx_tmp12 = null();
            					}
            					else {
HXLINE( 575)						_hx_tmp12 = this->zpp_inner->space->outer;
            					}
HXDLIN( 575)					_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            				}
            				else {
HXLINE( 575)					_hx_tmp11 = false;
            				}
HXDLIN( 575)				if (_hx_tmp11) {
HXLINE( 575)					this->zpp_inner->wake();
HXDLIN( 575)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 575)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 576)		{
HXLINE( 576)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 576)			if (hx::IsNull( body2 )) {
HXLINE( 576)				inbody2 = null();
            			}
            			else {
HXLINE( 576)				inbody2 = body2->zpp_inner;
            			}
HXDLIN( 576)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 576)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 576)					bool _hx_tmp13;
HXDLIN( 576)					bool _hx_tmp14;
HXDLIN( 576)					bool _hx_tmp15;
HXDLIN( 576)					 ::nape::space::Space _hx_tmp16;
HXDLIN( 576)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 576)						_hx_tmp16 = null();
            					}
            					else {
HXLINE( 576)						_hx_tmp16 = this->zpp_inner->space->outer;
            					}
HXDLIN( 576)					if (hx::IsNotNull( _hx_tmp16 )) {
HXLINE( 576)						_hx_tmp15 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 576)						_hx_tmp15 = false;
            					}
HXDLIN( 576)					if (_hx_tmp15) {
HXLINE( 576)						_hx_tmp14 = hx::IsNotEq( this->zpp_inner_zn->b3,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 576)						_hx_tmp14 = false;
            					}
HXDLIN( 576)					if (_hx_tmp14) {
HXLINE( 576)						_hx_tmp13 = hx::IsNotEq( this->zpp_inner_zn->b4,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 576)						_hx_tmp13 = false;
            					}
HXDLIN( 576)					if (_hx_tmp13) {
HXLINE( 576)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 576)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 576)					bool _hx_tmp17;
HXDLIN( 576)					if (this->zpp_inner->active) {
HXLINE( 576)						 ::nape::space::Space _hx_tmp18;
HXDLIN( 576)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 576)							_hx_tmp18 = null();
            						}
            						else {
HXLINE( 576)							_hx_tmp18 = this->zpp_inner->space->outer;
            						}
HXDLIN( 576)						_hx_tmp17 = hx::IsNotNull( _hx_tmp18 );
            					}
            					else {
HXLINE( 576)						_hx_tmp17 = false;
            					}
HXDLIN( 576)					if (_hx_tmp17) {
HXLINE( 576)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXDLIN( 576)				this->zpp_inner_zn->b2 = inbody2;
HXDLIN( 576)				bool _hx_tmp19;
HXDLIN( 576)				bool _hx_tmp20;
HXDLIN( 576)				bool _hx_tmp21;
HXDLIN( 576)				bool _hx_tmp22;
HXDLIN( 576)				 ::nape::space::Space _hx_tmp23;
HXDLIN( 576)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 576)					_hx_tmp23 = null();
            				}
            				else {
HXLINE( 576)					_hx_tmp23 = this->zpp_inner->space->outer;
            				}
HXDLIN( 576)				if (hx::IsNotNull( _hx_tmp23 )) {
HXLINE( 576)					_hx_tmp22 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 576)					_hx_tmp22 = false;
            				}
HXDLIN( 576)				if (_hx_tmp22) {
HXLINE( 576)					_hx_tmp21 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 576)					_hx_tmp21 = false;
            				}
HXDLIN( 576)				if (_hx_tmp21) {
HXLINE( 576)					_hx_tmp20 = hx::IsNotEq( this->zpp_inner_zn->b3,inbody2 );
            				}
            				else {
HXLINE( 576)					_hx_tmp20 = false;
            				}
HXDLIN( 576)				if (_hx_tmp20) {
HXLINE( 576)					_hx_tmp19 = hx::IsNotEq( this->zpp_inner_zn->b4,inbody2 );
            				}
            				else {
HXLINE( 576)					_hx_tmp19 = false;
            				}
HXDLIN( 576)				if (_hx_tmp19) {
HXLINE( 576)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 576)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 576)				bool _hx_tmp24;
HXDLIN( 576)				if (this->zpp_inner->active) {
HXLINE( 576)					 ::nape::space::Space _hx_tmp25;
HXDLIN( 576)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 576)						_hx_tmp25 = null();
            					}
            					else {
HXLINE( 576)						_hx_tmp25 = this->zpp_inner->space->outer;
            					}
HXDLIN( 576)					_hx_tmp24 = hx::IsNotNull( _hx_tmp25 );
            				}
            				else {
HXLINE( 576)					_hx_tmp24 = false;
            				}
HXDLIN( 576)				if (_hx_tmp24) {
HXLINE( 576)					this->zpp_inner->wake();
HXDLIN( 576)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 576)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 577)		{
HXLINE( 577)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody3);
HXDLIN( 577)			if (hx::IsNull( body3 )) {
HXLINE( 577)				inbody3 = null();
            			}
            			else {
HXLINE( 577)				inbody3 = body3->zpp_inner;
            			}
HXDLIN( 577)			if (hx::IsNotEq( inbody3,this->zpp_inner_zn->b3 )) {
HXLINE( 577)				if (hx::IsNotNull( this->zpp_inner_zn->b3 )) {
HXLINE( 577)					bool _hx_tmp26;
HXDLIN( 577)					bool _hx_tmp27;
HXDLIN( 577)					bool _hx_tmp28;
HXDLIN( 577)					 ::nape::space::Space _hx_tmp29;
HXDLIN( 577)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 577)						_hx_tmp29 = null();
            					}
            					else {
HXLINE( 577)						_hx_tmp29 = this->zpp_inner->space->outer;
            					}
HXDLIN( 577)					if (hx::IsNotNull( _hx_tmp29 )) {
HXLINE( 577)						_hx_tmp28 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b3 );
            					}
            					else {
HXLINE( 577)						_hx_tmp28 = false;
            					}
HXDLIN( 577)					if (_hx_tmp28) {
HXLINE( 577)						_hx_tmp27 = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b3 );
            					}
            					else {
HXLINE( 577)						_hx_tmp27 = false;
            					}
HXDLIN( 577)					if (_hx_tmp27) {
HXLINE( 577)						_hx_tmp26 = hx::IsNotEq( this->zpp_inner_zn->b4,this->zpp_inner_zn->b3 );
            					}
            					else {
HXLINE( 577)						_hx_tmp26 = false;
            					}
HXDLIN( 577)					if (_hx_tmp26) {
HXLINE( 577)						if (hx::IsNotNull( this->zpp_inner_zn->b3 )) {
HXLINE( 577)							this->zpp_inner_zn->b3->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 577)					bool _hx_tmp30;
HXDLIN( 577)					if (this->zpp_inner->active) {
HXLINE( 577)						 ::nape::space::Space _hx_tmp31;
HXDLIN( 577)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 577)							_hx_tmp31 = null();
            						}
            						else {
HXLINE( 577)							_hx_tmp31 = this->zpp_inner->space->outer;
            						}
HXDLIN( 577)						_hx_tmp30 = hx::IsNotNull( _hx_tmp31 );
            					}
            					else {
HXLINE( 577)						_hx_tmp30 = false;
            					}
HXDLIN( 577)					if (_hx_tmp30) {
HXLINE( 577)						this->zpp_inner_zn->b3->wake();
            					}
            				}
HXDLIN( 577)				this->zpp_inner_zn->b3 = inbody3;
HXDLIN( 577)				bool _hx_tmp32;
HXDLIN( 577)				bool _hx_tmp33;
HXDLIN( 577)				bool _hx_tmp34;
HXDLIN( 577)				bool _hx_tmp35;
HXDLIN( 577)				 ::nape::space::Space _hx_tmp36;
HXDLIN( 577)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 577)					_hx_tmp36 = null();
            				}
            				else {
HXLINE( 577)					_hx_tmp36 = this->zpp_inner->space->outer;
            				}
HXDLIN( 577)				if (hx::IsNotNull( _hx_tmp36 )) {
HXLINE( 577)					_hx_tmp35 = hx::IsNotNull( inbody3 );
            				}
            				else {
HXLINE( 577)					_hx_tmp35 = false;
            				}
HXDLIN( 577)				if (_hx_tmp35) {
HXLINE( 577)					_hx_tmp34 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody3 );
            				}
            				else {
HXLINE( 577)					_hx_tmp34 = false;
            				}
HXDLIN( 577)				if (_hx_tmp34) {
HXLINE( 577)					_hx_tmp33 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody3 );
            				}
            				else {
HXLINE( 577)					_hx_tmp33 = false;
            				}
HXDLIN( 577)				if (_hx_tmp33) {
HXLINE( 577)					_hx_tmp32 = hx::IsNotEq( this->zpp_inner_zn->b4,inbody3 );
            				}
            				else {
HXLINE( 577)					_hx_tmp32 = false;
            				}
HXDLIN( 577)				if (_hx_tmp32) {
HXLINE( 577)					if (hx::IsNotNull( inbody3 )) {
HXLINE( 577)						inbody3->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 577)				bool _hx_tmp37;
HXDLIN( 577)				if (this->zpp_inner->active) {
HXLINE( 577)					 ::nape::space::Space _hx_tmp38;
HXDLIN( 577)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 577)						_hx_tmp38 = null();
            					}
            					else {
HXLINE( 577)						_hx_tmp38 = this->zpp_inner->space->outer;
            					}
HXDLIN( 577)					_hx_tmp37 = hx::IsNotNull( _hx_tmp38 );
            				}
            				else {
HXLINE( 577)					_hx_tmp37 = false;
            				}
HXDLIN( 577)				if (_hx_tmp37) {
HXLINE( 577)					this->zpp_inner->wake();
HXDLIN( 577)					if (hx::IsNotNull( inbody3 )) {
HXLINE( 577)						inbody3->wake();
            					}
            				}
            			}
            		}
HXLINE( 578)		{
HXLINE( 578)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody4);
HXDLIN( 578)			if (hx::IsNull( body4 )) {
HXLINE( 578)				inbody4 = null();
            			}
            			else {
HXLINE( 578)				inbody4 = body4->zpp_inner;
            			}
HXDLIN( 578)			if (hx::IsNotEq( inbody4,this->zpp_inner_zn->b4 )) {
HXLINE( 578)				if (hx::IsNotNull( this->zpp_inner_zn->b4 )) {
HXLINE( 578)					bool _hx_tmp39;
HXDLIN( 578)					bool _hx_tmp40;
HXDLIN( 578)					bool _hx_tmp41;
HXDLIN( 578)					 ::nape::space::Space _hx_tmp42;
HXDLIN( 578)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 578)						_hx_tmp42 = null();
            					}
            					else {
HXLINE( 578)						_hx_tmp42 = this->zpp_inner->space->outer;
            					}
HXDLIN( 578)					if (hx::IsNotNull( _hx_tmp42 )) {
HXLINE( 578)						_hx_tmp41 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b4 );
            					}
            					else {
HXLINE( 578)						_hx_tmp41 = false;
            					}
HXDLIN( 578)					if (_hx_tmp41) {
HXLINE( 578)						_hx_tmp40 = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b4 );
            					}
            					else {
HXLINE( 578)						_hx_tmp40 = false;
            					}
HXDLIN( 578)					if (_hx_tmp40) {
HXLINE( 578)						_hx_tmp39 = hx::IsNotEq( this->zpp_inner_zn->b3,this->zpp_inner_zn->b4 );
            					}
            					else {
HXLINE( 578)						_hx_tmp39 = false;
            					}
HXDLIN( 578)					if (_hx_tmp39) {
HXLINE( 578)						if (hx::IsNotNull( this->zpp_inner_zn->b4 )) {
HXLINE( 578)							this->zpp_inner_zn->b4->constraints->remove(this->zpp_inner);
            						}
            					}
HXDLIN( 578)					bool _hx_tmp43;
HXDLIN( 578)					if (this->zpp_inner->active) {
HXLINE( 578)						 ::nape::space::Space _hx_tmp44;
HXDLIN( 578)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 578)							_hx_tmp44 = null();
            						}
            						else {
HXLINE( 578)							_hx_tmp44 = this->zpp_inner->space->outer;
            						}
HXDLIN( 578)						_hx_tmp43 = hx::IsNotNull( _hx_tmp44 );
            					}
            					else {
HXLINE( 578)						_hx_tmp43 = false;
            					}
HXDLIN( 578)					if (_hx_tmp43) {
HXLINE( 578)						this->zpp_inner_zn->b4->wake();
            					}
            				}
HXDLIN( 578)				this->zpp_inner_zn->b4 = inbody4;
HXDLIN( 578)				bool _hx_tmp45;
HXDLIN( 578)				bool _hx_tmp46;
HXDLIN( 578)				bool _hx_tmp47;
HXDLIN( 578)				bool _hx_tmp48;
HXDLIN( 578)				 ::nape::space::Space _hx_tmp49;
HXDLIN( 578)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 578)					_hx_tmp49 = null();
            				}
            				else {
HXLINE( 578)					_hx_tmp49 = this->zpp_inner->space->outer;
            				}
HXDLIN( 578)				if (hx::IsNotNull( _hx_tmp49 )) {
HXLINE( 578)					_hx_tmp48 = hx::IsNotNull( inbody4 );
            				}
            				else {
HXLINE( 578)					_hx_tmp48 = false;
            				}
HXDLIN( 578)				if (_hx_tmp48) {
HXLINE( 578)					_hx_tmp47 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody4 );
            				}
            				else {
HXLINE( 578)					_hx_tmp47 = false;
            				}
HXDLIN( 578)				if (_hx_tmp47) {
HXLINE( 578)					_hx_tmp46 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody4 );
            				}
            				else {
HXLINE( 578)					_hx_tmp46 = false;
            				}
HXDLIN( 578)				if (_hx_tmp46) {
HXLINE( 578)					_hx_tmp45 = hx::IsNotEq( this->zpp_inner_zn->b3,inbody4 );
            				}
            				else {
HXLINE( 578)					_hx_tmp45 = false;
            				}
HXDLIN( 578)				if (_hx_tmp45) {
HXLINE( 578)					if (hx::IsNotNull( inbody4 )) {
HXLINE( 578)						inbody4->constraints->add(this->zpp_inner);
            					}
            				}
HXDLIN( 578)				bool _hx_tmp50;
HXDLIN( 578)				if (this->zpp_inner->active) {
HXLINE( 578)					 ::nape::space::Space _hx_tmp51;
HXDLIN( 578)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 578)						_hx_tmp51 = null();
            					}
            					else {
HXLINE( 578)						_hx_tmp51 = this->zpp_inner->space->outer;
            					}
HXDLIN( 578)					_hx_tmp50 = hx::IsNotNull( _hx_tmp51 );
            				}
            				else {
HXLINE( 578)					_hx_tmp50 = false;
            				}
HXDLIN( 578)				if (_hx_tmp50) {
HXLINE( 578)					this->zpp_inner->wake();
HXDLIN( 578)					if (hx::IsNotNull( inbody4 )) {
HXLINE( 578)						inbody4->wake();
            					}
            				}
            			}
            		}
HXLINE( 579)		{
HXLINE( 579)			{
HXLINE( 579)				if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 579)					this->zpp_inner_zn->setup_a1();
            				}
HXDLIN( 579)				HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a1;
HXDLIN( 579)				{
HXLINE( 579)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor1->zpp_inner;
HXDLIN( 579)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 579)						_this1->_validate();
            					}
            				}
HXDLIN( 579)				HX_VARI( Float,x) = anchor1->zpp_inner->x;
HXDLIN( 579)				{
HXLINE( 579)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor1->zpp_inner;
HXDLIN( 579)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 579)						_this2->_validate();
            					}
            				}
HXDLIN( 579)				HX_VARI( Float,y) = anchor1->zpp_inner->y;
HXDLIN( 579)				bool _hx_tmp52;
HXDLIN( 579)				{
HXLINE( 579)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 579)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 579)						_this3->_validate();
            					}
            				}
HXDLIN( 579)				if ((_this->zpp_inner->x == x)) {
HXLINE( 579)					{
HXLINE( 579)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 579)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 579)							_this4->_validate();
            						}
            					}
HXDLIN( 579)					_hx_tmp52 = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 579)					_hx_tmp52 = false;
            				}
HXDLIN( 579)				if (!(_hx_tmp52)) {
HXLINE( 579)					{
HXLINE( 579)						_this->zpp_inner->x = x;
HXDLIN( 579)						_this->zpp_inner->y = y;
            					}
HXDLIN( 579)					{
HXLINE( 579)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 579)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 579)							_this5->_invalidate(_this5);
            						}
            					}
            				}
HXDLIN( 579)				if (anchor1->zpp_inner->weak) {
HXLINE( 579)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor1->zpp_inner;
HXDLIN( 579)					anchor1->zpp_inner->outer = null();
HXDLIN( 579)					anchor1->zpp_inner = null();
HXDLIN( 579)					{
HXLINE( 579)						anchor1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 579)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor1;
            					}
HXDLIN( 579)					{
HXLINE( 579)						{
HXLINE( 579)							if (hx::IsNotNull( inner->outer )) {
HXLINE( 579)								inner->outer->zpp_inner = null();
HXDLIN( 579)								inner->outer = null();
            							}
HXDLIN( 579)							inner->_isimmutable = null();
HXDLIN( 579)							inner->_validate = null();
HXDLIN( 579)							inner->_invalidate = null();
            						}
HXDLIN( 579)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 579)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
            			}
HXDLIN( 579)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 579)				this->zpp_inner_zn->setup_a1();
            			}
            		}
HXLINE( 580)		{
HXLINE( 580)			{
HXLINE( 580)				if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 580)					this->zpp_inner_zn->setup_a2();
            				}
HXDLIN( 580)				HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = this->zpp_inner_zn->wrap_a2;
HXDLIN( 580)				{
HXLINE( 580)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = anchor2->zpp_inner;
HXDLIN( 580)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 580)						_this7->_validate();
            					}
            				}
HXDLIN( 580)				HX_VARI_NAME( Float,x1,"x") = anchor2->zpp_inner->x;
HXDLIN( 580)				{
HXLINE( 580)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = anchor2->zpp_inner;
HXDLIN( 580)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 580)						_this8->_validate();
            					}
            				}
HXDLIN( 580)				HX_VARI_NAME( Float,y1,"y") = anchor2->zpp_inner->y;
HXDLIN( 580)				bool _hx_tmp53;
HXDLIN( 580)				{
HXLINE( 580)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _this6->zpp_inner;
HXDLIN( 580)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 580)						_this9->_validate();
            					}
            				}
HXDLIN( 580)				if ((_this6->zpp_inner->x == x1)) {
HXLINE( 580)					{
HXLINE( 580)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = _this6->zpp_inner;
HXDLIN( 580)						if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 580)							_this10->_validate();
            						}
            					}
HXDLIN( 580)					_hx_tmp53 = (_this6->zpp_inner->y == y1);
            				}
            				else {
HXLINE( 580)					_hx_tmp53 = false;
            				}
HXDLIN( 580)				if (!(_hx_tmp53)) {
HXLINE( 580)					{
HXLINE( 580)						_this6->zpp_inner->x = x1;
HXDLIN( 580)						_this6->zpp_inner->y = y1;
            					}
HXDLIN( 580)					{
HXLINE( 580)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = _this6->zpp_inner;
HXDLIN( 580)						if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 580)							_this11->_invalidate(_this11);
            						}
            					}
            				}
HXDLIN( 580)				if (anchor2->zpp_inner->weak) {
HXLINE( 580)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = anchor2->zpp_inner;
HXDLIN( 580)					anchor2->zpp_inner->outer = null();
HXDLIN( 580)					anchor2->zpp_inner = null();
HXDLIN( 580)					{
HXLINE( 580)						anchor2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 580)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor2;
            					}
HXDLIN( 580)					{
HXLINE( 580)						{
HXLINE( 580)							if (hx::IsNotNull( inner1->outer )) {
HXLINE( 580)								inner1->outer->zpp_inner = null();
HXDLIN( 580)								inner1->outer = null();
            							}
HXDLIN( 580)							inner1->_isimmutable = null();
HXDLIN( 580)							inner1->_validate = null();
HXDLIN( 580)							inner1->_invalidate = null();
            						}
HXDLIN( 580)						inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 580)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            					}
            				}
            			}
HXDLIN( 580)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 580)				this->zpp_inner_zn->setup_a2();
            			}
            		}
HXLINE( 581)		{
HXLINE( 581)			{
HXLINE( 581)				if (hx::IsNull( this->zpp_inner_zn->wrap_a3 )) {
HXLINE( 581)					this->zpp_inner_zn->setup_a3();
            				}
HXDLIN( 581)				HX_VARI_NAME(  ::nape::geom::Vec2,_this12,"_this") = this->zpp_inner_zn->wrap_a3;
HXDLIN( 581)				{
HXLINE( 581)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = anchor3->zpp_inner;
HXDLIN( 581)					if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 581)						_this13->_validate();
            					}
            				}
HXDLIN( 581)				HX_VARI_NAME( Float,x2,"x") = anchor3->zpp_inner->x;
HXDLIN( 581)				{
HXLINE( 581)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this14,"_this") = anchor3->zpp_inner;
HXDLIN( 581)					if (hx::IsNotNull( _this14->_validate )) {
HXLINE( 581)						_this14->_validate();
            					}
            				}
HXDLIN( 581)				HX_VARI_NAME( Float,y2,"y") = anchor3->zpp_inner->y;
HXDLIN( 581)				bool _hx_tmp54;
HXDLIN( 581)				{
HXLINE( 581)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this15,"_this") = _this12->zpp_inner;
HXDLIN( 581)					if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 581)						_this15->_validate();
            					}
            				}
HXDLIN( 581)				if ((_this12->zpp_inner->x == x2)) {
HXLINE( 581)					{
HXLINE( 581)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this16,"_this") = _this12->zpp_inner;
HXDLIN( 581)						if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 581)							_this16->_validate();
            						}
            					}
HXDLIN( 581)					_hx_tmp54 = (_this12->zpp_inner->y == y2);
            				}
            				else {
HXLINE( 581)					_hx_tmp54 = false;
            				}
HXDLIN( 581)				if (!(_hx_tmp54)) {
HXLINE( 581)					{
HXLINE( 581)						_this12->zpp_inner->x = x2;
HXDLIN( 581)						_this12->zpp_inner->y = y2;
            					}
HXDLIN( 581)					{
HXLINE( 581)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this17,"_this") = _this12->zpp_inner;
HXDLIN( 581)						if (hx::IsNotNull( _this17->_invalidate )) {
HXLINE( 581)							_this17->_invalidate(_this17);
            						}
            					}
            				}
HXDLIN( 581)				if (anchor3->zpp_inner->weak) {
HXLINE( 581)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = anchor3->zpp_inner;
HXDLIN( 581)					anchor3->zpp_inner->outer = null();
HXDLIN( 581)					anchor3->zpp_inner = null();
HXDLIN( 581)					{
HXLINE( 581)						anchor3->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 581)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor3;
            					}
HXDLIN( 581)					{
HXLINE( 581)						{
HXLINE( 581)							if (hx::IsNotNull( inner2->outer )) {
HXLINE( 581)								inner2->outer->zpp_inner = null();
HXDLIN( 581)								inner2->outer = null();
            							}
HXDLIN( 581)							inner2->_isimmutable = null();
HXDLIN( 581)							inner2->_validate = null();
HXDLIN( 581)							inner2->_invalidate = null();
            						}
HXDLIN( 581)						inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 581)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            					}
            				}
            			}
HXDLIN( 581)			if (hx::IsNull( this->zpp_inner_zn->wrap_a3 )) {
HXLINE( 581)				this->zpp_inner_zn->setup_a3();
            			}
            		}
HXLINE( 582)		{
HXLINE( 582)			{
HXLINE( 582)				if (hx::IsNull( this->zpp_inner_zn->wrap_a4 )) {
HXLINE( 582)					this->zpp_inner_zn->setup_a4();
            				}
HXDLIN( 582)				HX_VARI_NAME(  ::nape::geom::Vec2,_this18,"_this") = this->zpp_inner_zn->wrap_a4;
HXDLIN( 582)				{
HXLINE( 582)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this19,"_this") = anchor4->zpp_inner;
HXDLIN( 582)					if (hx::IsNotNull( _this19->_validate )) {
HXLINE( 582)						_this19->_validate();
            					}
            				}
HXDLIN( 582)				HX_VARI_NAME( Float,x3,"x") = anchor4->zpp_inner->x;
HXDLIN( 582)				{
HXLINE( 582)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this20,"_this") = anchor4->zpp_inner;
HXDLIN( 582)					if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 582)						_this20->_validate();
            					}
            				}
HXDLIN( 582)				HX_VARI_NAME( Float,y3,"y") = anchor4->zpp_inner->y;
HXDLIN( 582)				bool _hx_tmp55;
HXDLIN( 582)				{
HXLINE( 582)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this21,"_this") = _this18->zpp_inner;
HXDLIN( 582)					if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 582)						_this21->_validate();
            					}
            				}
HXDLIN( 582)				if ((_this18->zpp_inner->x == x3)) {
HXLINE( 582)					{
HXLINE( 582)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this22,"_this") = _this18->zpp_inner;
HXDLIN( 582)						if (hx::IsNotNull( _this22->_validate )) {
HXLINE( 582)							_this22->_validate();
            						}
            					}
HXDLIN( 582)					_hx_tmp55 = (_this18->zpp_inner->y == y3);
            				}
            				else {
HXLINE( 582)					_hx_tmp55 = false;
            				}
HXDLIN( 582)				if (!(_hx_tmp55)) {
HXLINE( 582)					{
HXLINE( 582)						_this18->zpp_inner->x = x3;
HXDLIN( 582)						_this18->zpp_inner->y = y3;
            					}
HXDLIN( 582)					{
HXLINE( 582)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this23,"_this") = _this18->zpp_inner;
HXDLIN( 582)						if (hx::IsNotNull( _this23->_invalidate )) {
HXLINE( 582)							_this23->_invalidate(_this23);
            						}
            					}
            				}
HXDLIN( 582)				if (anchor4->zpp_inner->weak) {
HXLINE( 582)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner3,"inner") = anchor4->zpp_inner;
HXDLIN( 582)					anchor4->zpp_inner->outer = null();
HXDLIN( 582)					anchor4->zpp_inner = null();
HXDLIN( 582)					{
HXLINE( 582)						anchor4->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 582)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor4;
            					}
HXDLIN( 582)					{
HXLINE( 582)						{
HXLINE( 582)							if (hx::IsNotNull( inner3->outer )) {
HXLINE( 582)								inner3->outer->zpp_inner = null();
HXDLIN( 582)								inner3->outer = null();
            							}
HXDLIN( 582)							inner3->_isimmutable = null();
HXDLIN( 582)							inner3->_validate = null();
HXDLIN( 582)							inner3->_invalidate = null();
            						}
HXDLIN( 582)						inner3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 582)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner3;
            					}
            				}
            			}
HXDLIN( 582)			if (hx::IsNull( this->zpp_inner_zn->wrap_a4 )) {
HXLINE( 582)				this->zpp_inner_zn->setup_a4();
            			}
            		}
HXLINE( 583)		if ((this->zpp_inner_zn->ratio != ratio)) {
HXLINE( 583)			this->zpp_inner_zn->ratio = ratio;
HXDLIN( 583)			this->zpp_inner->wake();
            		}
HXLINE( 584)		if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 584)			this->zpp_inner_zn->jointMin = jointMin;
HXDLIN( 584)			this->zpp_inner->wake();
            		}
HXLINE( 585)		if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 585)			this->zpp_inner_zn->jointMax = jointMax;
HXDLIN( 585)			this->zpp_inner->wake();
            		}
            	}

Dynamic PulleyJoint_obj::__CreateEmpty() { return new PulleyJoint_obj; }

void *PulleyJoint_obj::_hx_vtable = 0;

Dynamic PulleyJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PulleyJoint_obj > _hx_result = new PulleyJoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool PulleyJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x00e9fd26) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x00e9fd26;
	} else {
		return inClassId==(int)0x05b69860;
	}
}

 ::nape::phys::Body PulleyJoint_obj::get_body1(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_201_get_body1)
            	HX_STACK_THIS(this)
HXLINE( 201)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 201)			return null();
            		}
            		else {
HXLINE( 201)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 201)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_body1,return )

 ::nape::phys::Body PulleyJoint_obj::set_body1( ::nape::phys::Body body1){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_203_set_body1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body1,"body1")
HXLINE( 204)		{
HXLINE( 206)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody1);
HXDLIN( 206)			if (hx::IsNull( body1 )) {
HXLINE( 206)				inbody1 = null();
            			}
            			else {
HXLINE( 206)				inbody1 = body1->zpp_inner;
            			}
HXLINE( 207)			if (hx::IsNotEq( inbody1,this->zpp_inner_zn->b1 )) {
HXLINE( 208)				if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 209)					bool _hx_tmp;
HXDLIN( 209)					bool _hx_tmp1;
HXDLIN( 209)					bool _hx_tmp2;
HXDLIN( 209)					 ::nape::space::Space _hx_tmp3;
HXDLIN( 209)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 209)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 209)						_hx_tmp3 = this->zpp_inner->space->outer;
            					}
HXDLIN( 209)					if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 209)						_hx_tmp2 = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 209)						_hx_tmp2 = false;
            					}
HXDLIN( 209)					if (_hx_tmp2) {
HXLINE( 209)						_hx_tmp1 = hx::IsNotEq( this->zpp_inner_zn->b3,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 209)						_hx_tmp1 = false;
            					}
HXDLIN( 209)					if (_hx_tmp1) {
HXLINE( 209)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b4,this->zpp_inner_zn->b1 );
            					}
            					else {
HXLINE( 209)						_hx_tmp = false;
            					}
HXDLIN( 209)					if (_hx_tmp) {
HXLINE( 211)						if (hx::IsNotNull( this->zpp_inner_zn->b1 )) {
HXLINE( 211)							this->zpp_inner_zn->b1->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 214)					bool _hx_tmp4;
HXDLIN( 214)					if (this->zpp_inner->active) {
HXLINE( 214)						 ::nape::space::Space _hx_tmp5;
HXDLIN( 214)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 214)							_hx_tmp5 = null();
            						}
            						else {
HXLINE( 214)							_hx_tmp5 = this->zpp_inner->space->outer;
            						}
HXDLIN( 214)						_hx_tmp4 = hx::IsNotNull( _hx_tmp5 );
            					}
            					else {
HXLINE( 214)						_hx_tmp4 = false;
            					}
HXDLIN( 214)					if (_hx_tmp4) {
HXLINE( 214)						this->zpp_inner_zn->b1->wake();
            					}
            				}
HXLINE( 216)				this->zpp_inner_zn->b1 = inbody1;
HXLINE( 217)				bool _hx_tmp6;
HXDLIN( 217)				bool _hx_tmp7;
HXDLIN( 217)				bool _hx_tmp8;
HXDLIN( 217)				bool _hx_tmp9;
HXDLIN( 217)				 ::nape::space::Space _hx_tmp10;
HXDLIN( 217)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 217)					_hx_tmp10 = null();
            				}
            				else {
HXLINE( 217)					_hx_tmp10 = this->zpp_inner->space->outer;
            				}
HXDLIN( 217)				if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 217)					_hx_tmp9 = hx::IsNotNull( inbody1 );
            				}
            				else {
HXLINE( 217)					_hx_tmp9 = false;
            				}
HXDLIN( 217)				if (_hx_tmp9) {
HXLINE( 217)					_hx_tmp8 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody1 );
            				}
            				else {
HXLINE( 217)					_hx_tmp8 = false;
            				}
HXDLIN( 217)				if (_hx_tmp8) {
HXLINE( 217)					_hx_tmp7 = hx::IsNotEq( this->zpp_inner_zn->b3,inbody1 );
            				}
            				else {
HXLINE( 217)					_hx_tmp7 = false;
            				}
HXDLIN( 217)				if (_hx_tmp7) {
HXLINE( 217)					_hx_tmp6 = hx::IsNotEq( this->zpp_inner_zn->b4,inbody1 );
            				}
            				else {
HXLINE( 217)					_hx_tmp6 = false;
            				}
HXDLIN( 217)				if (_hx_tmp6) {
HXLINE( 219)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 219)						inbody1->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 222)				bool _hx_tmp11;
HXDLIN( 222)				if (this->zpp_inner->active) {
HXLINE( 222)					 ::nape::space::Space _hx_tmp12;
HXDLIN( 222)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 222)						_hx_tmp12 = null();
            					}
            					else {
HXLINE( 222)						_hx_tmp12 = this->zpp_inner->space->outer;
            					}
HXDLIN( 222)					_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            				}
            				else {
HXLINE( 222)					_hx_tmp11 = false;
            				}
HXDLIN( 222)				if (_hx_tmp11) {
HXLINE( 223)					this->zpp_inner->wake();
HXLINE( 224)					if (hx::IsNotNull( inbody1 )) {
HXLINE( 224)						inbody1->wake();
            					}
            				}
            			}
            		}
HXLINE( 228)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 228)			return null();
            		}
            		else {
HXLINE( 228)			return this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 228)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_body1,return )

 ::nape::phys::Body PulleyJoint_obj::get_body2(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_239_get_body2)
            	HX_STACK_THIS(this)
HXLINE( 239)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 239)			return null();
            		}
            		else {
HXLINE( 239)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 239)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_body2,return )

 ::nape::phys::Body PulleyJoint_obj::set_body2( ::nape::phys::Body body2){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_241_set_body2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body2,"body2")
HXLINE( 242)		{
HXLINE( 244)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody2);
HXDLIN( 244)			if (hx::IsNull( body2 )) {
HXLINE( 244)				inbody2 = null();
            			}
            			else {
HXLINE( 244)				inbody2 = body2->zpp_inner;
            			}
HXLINE( 245)			if (hx::IsNotEq( inbody2,this->zpp_inner_zn->b2 )) {
HXLINE( 246)				if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 247)					bool _hx_tmp;
HXDLIN( 247)					bool _hx_tmp1;
HXDLIN( 247)					bool _hx_tmp2;
HXDLIN( 247)					 ::nape::space::Space _hx_tmp3;
HXDLIN( 247)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 247)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 247)						_hx_tmp3 = this->zpp_inner->space->outer;
            					}
HXDLIN( 247)					if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 247)						_hx_tmp2 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 247)						_hx_tmp2 = false;
            					}
HXDLIN( 247)					if (_hx_tmp2) {
HXLINE( 247)						_hx_tmp1 = hx::IsNotEq( this->zpp_inner_zn->b3,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 247)						_hx_tmp1 = false;
            					}
HXDLIN( 247)					if (_hx_tmp1) {
HXLINE( 247)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b4,this->zpp_inner_zn->b2 );
            					}
            					else {
HXLINE( 247)						_hx_tmp = false;
            					}
HXDLIN( 247)					if (_hx_tmp) {
HXLINE( 249)						if (hx::IsNotNull( this->zpp_inner_zn->b2 )) {
HXLINE( 249)							this->zpp_inner_zn->b2->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 252)					bool _hx_tmp4;
HXDLIN( 252)					if (this->zpp_inner->active) {
HXLINE( 252)						 ::nape::space::Space _hx_tmp5;
HXDLIN( 252)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 252)							_hx_tmp5 = null();
            						}
            						else {
HXLINE( 252)							_hx_tmp5 = this->zpp_inner->space->outer;
            						}
HXDLIN( 252)						_hx_tmp4 = hx::IsNotNull( _hx_tmp5 );
            					}
            					else {
HXLINE( 252)						_hx_tmp4 = false;
            					}
HXDLIN( 252)					if (_hx_tmp4) {
HXLINE( 252)						this->zpp_inner_zn->b2->wake();
            					}
            				}
HXLINE( 254)				this->zpp_inner_zn->b2 = inbody2;
HXLINE( 255)				bool _hx_tmp6;
HXDLIN( 255)				bool _hx_tmp7;
HXDLIN( 255)				bool _hx_tmp8;
HXDLIN( 255)				bool _hx_tmp9;
HXDLIN( 255)				 ::nape::space::Space _hx_tmp10;
HXDLIN( 255)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 255)					_hx_tmp10 = null();
            				}
            				else {
HXLINE( 255)					_hx_tmp10 = this->zpp_inner->space->outer;
            				}
HXDLIN( 255)				if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 255)					_hx_tmp9 = hx::IsNotNull( inbody2 );
            				}
            				else {
HXLINE( 255)					_hx_tmp9 = false;
            				}
HXDLIN( 255)				if (_hx_tmp9) {
HXLINE( 255)					_hx_tmp8 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody2 );
            				}
            				else {
HXLINE( 255)					_hx_tmp8 = false;
            				}
HXDLIN( 255)				if (_hx_tmp8) {
HXLINE( 255)					_hx_tmp7 = hx::IsNotEq( this->zpp_inner_zn->b3,inbody2 );
            				}
            				else {
HXLINE( 255)					_hx_tmp7 = false;
            				}
HXDLIN( 255)				if (_hx_tmp7) {
HXLINE( 255)					_hx_tmp6 = hx::IsNotEq( this->zpp_inner_zn->b4,inbody2 );
            				}
            				else {
HXLINE( 255)					_hx_tmp6 = false;
            				}
HXDLIN( 255)				if (_hx_tmp6) {
HXLINE( 257)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 257)						inbody2->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 260)				bool _hx_tmp11;
HXDLIN( 260)				if (this->zpp_inner->active) {
HXLINE( 260)					 ::nape::space::Space _hx_tmp12;
HXDLIN( 260)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 260)						_hx_tmp12 = null();
            					}
            					else {
HXLINE( 260)						_hx_tmp12 = this->zpp_inner->space->outer;
            					}
HXDLIN( 260)					_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            				}
            				else {
HXLINE( 260)					_hx_tmp11 = false;
            				}
HXDLIN( 260)				if (_hx_tmp11) {
HXLINE( 261)					this->zpp_inner->wake();
HXLINE( 262)					if (hx::IsNotNull( inbody2 )) {
HXLINE( 262)						inbody2->wake();
            					}
            				}
            			}
            		}
HXLINE( 266)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 266)			return null();
            		}
            		else {
HXLINE( 266)			return this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 266)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_body2,return )

 ::nape::phys::Body PulleyJoint_obj::get_body3(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_277_get_body3)
            	HX_STACK_THIS(this)
HXLINE( 277)		if (hx::IsNull( this->zpp_inner_zn->b3 )) {
HXLINE( 277)			return null();
            		}
            		else {
HXLINE( 277)			return this->zpp_inner_zn->b3->outer;
            		}
HXDLIN( 277)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_body3,return )

 ::nape::phys::Body PulleyJoint_obj::set_body3( ::nape::phys::Body body3){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_279_set_body3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body3,"body3")
HXLINE( 280)		{
HXLINE( 282)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody3);
HXDLIN( 282)			if (hx::IsNull( body3 )) {
HXLINE( 282)				inbody3 = null();
            			}
            			else {
HXLINE( 282)				inbody3 = body3->zpp_inner;
            			}
HXLINE( 283)			if (hx::IsNotEq( inbody3,this->zpp_inner_zn->b3 )) {
HXLINE( 284)				if (hx::IsNotNull( this->zpp_inner_zn->b3 )) {
HXLINE( 285)					bool _hx_tmp;
HXDLIN( 285)					bool _hx_tmp1;
HXDLIN( 285)					bool _hx_tmp2;
HXDLIN( 285)					 ::nape::space::Space _hx_tmp3;
HXDLIN( 285)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 285)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 285)						_hx_tmp3 = this->zpp_inner->space->outer;
            					}
HXDLIN( 285)					if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 285)						_hx_tmp2 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b3 );
            					}
            					else {
HXLINE( 285)						_hx_tmp2 = false;
            					}
HXDLIN( 285)					if (_hx_tmp2) {
HXLINE( 285)						_hx_tmp1 = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b3 );
            					}
            					else {
HXLINE( 285)						_hx_tmp1 = false;
            					}
HXDLIN( 285)					if (_hx_tmp1) {
HXLINE( 285)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b4,this->zpp_inner_zn->b3 );
            					}
            					else {
HXLINE( 285)						_hx_tmp = false;
            					}
HXDLIN( 285)					if (_hx_tmp) {
HXLINE( 287)						if (hx::IsNotNull( this->zpp_inner_zn->b3 )) {
HXLINE( 287)							this->zpp_inner_zn->b3->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 290)					bool _hx_tmp4;
HXDLIN( 290)					if (this->zpp_inner->active) {
HXLINE( 290)						 ::nape::space::Space _hx_tmp5;
HXDLIN( 290)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 290)							_hx_tmp5 = null();
            						}
            						else {
HXLINE( 290)							_hx_tmp5 = this->zpp_inner->space->outer;
            						}
HXDLIN( 290)						_hx_tmp4 = hx::IsNotNull( _hx_tmp5 );
            					}
            					else {
HXLINE( 290)						_hx_tmp4 = false;
            					}
HXDLIN( 290)					if (_hx_tmp4) {
HXLINE( 290)						this->zpp_inner_zn->b3->wake();
            					}
            				}
HXLINE( 292)				this->zpp_inner_zn->b3 = inbody3;
HXLINE( 293)				bool _hx_tmp6;
HXDLIN( 293)				bool _hx_tmp7;
HXDLIN( 293)				bool _hx_tmp8;
HXDLIN( 293)				bool _hx_tmp9;
HXDLIN( 293)				 ::nape::space::Space _hx_tmp10;
HXDLIN( 293)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 293)					_hx_tmp10 = null();
            				}
            				else {
HXLINE( 293)					_hx_tmp10 = this->zpp_inner->space->outer;
            				}
HXDLIN( 293)				if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 293)					_hx_tmp9 = hx::IsNotNull( inbody3 );
            				}
            				else {
HXLINE( 293)					_hx_tmp9 = false;
            				}
HXDLIN( 293)				if (_hx_tmp9) {
HXLINE( 293)					_hx_tmp8 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody3 );
            				}
            				else {
HXLINE( 293)					_hx_tmp8 = false;
            				}
HXDLIN( 293)				if (_hx_tmp8) {
HXLINE( 293)					_hx_tmp7 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody3 );
            				}
            				else {
HXLINE( 293)					_hx_tmp7 = false;
            				}
HXDLIN( 293)				if (_hx_tmp7) {
HXLINE( 293)					_hx_tmp6 = hx::IsNotEq( this->zpp_inner_zn->b4,inbody3 );
            				}
            				else {
HXLINE( 293)					_hx_tmp6 = false;
            				}
HXDLIN( 293)				if (_hx_tmp6) {
HXLINE( 295)					if (hx::IsNotNull( inbody3 )) {
HXLINE( 295)						inbody3->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 298)				bool _hx_tmp11;
HXDLIN( 298)				if (this->zpp_inner->active) {
HXLINE( 298)					 ::nape::space::Space _hx_tmp12;
HXDLIN( 298)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 298)						_hx_tmp12 = null();
            					}
            					else {
HXLINE( 298)						_hx_tmp12 = this->zpp_inner->space->outer;
            					}
HXDLIN( 298)					_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            				}
            				else {
HXLINE( 298)					_hx_tmp11 = false;
            				}
HXDLIN( 298)				if (_hx_tmp11) {
HXLINE( 299)					this->zpp_inner->wake();
HXLINE( 300)					if (hx::IsNotNull( inbody3 )) {
HXLINE( 300)						inbody3->wake();
            					}
            				}
            			}
            		}
HXLINE( 304)		if (hx::IsNull( this->zpp_inner_zn->b3 )) {
HXLINE( 304)			return null();
            		}
            		else {
HXLINE( 304)			return this->zpp_inner_zn->b3->outer;
            		}
HXDLIN( 304)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_body3,return )

 ::nape::phys::Body PulleyJoint_obj::get_body4(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_315_get_body4)
            	HX_STACK_THIS(this)
HXLINE( 315)		if (hx::IsNull( this->zpp_inner_zn->b4 )) {
HXLINE( 315)			return null();
            		}
            		else {
HXLINE( 315)			return this->zpp_inner_zn->b4->outer;
            		}
HXDLIN( 315)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_body4,return )

 ::nape::phys::Body PulleyJoint_obj::set_body4( ::nape::phys::Body body4){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_317_set_body4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body4,"body4")
HXLINE( 318)		{
HXLINE( 320)			HX_VAR(  ::zpp_nape::phys::ZPP_Body,inbody4);
HXDLIN( 320)			if (hx::IsNull( body4 )) {
HXLINE( 320)				inbody4 = null();
            			}
            			else {
HXLINE( 320)				inbody4 = body4->zpp_inner;
            			}
HXLINE( 321)			if (hx::IsNotEq( inbody4,this->zpp_inner_zn->b4 )) {
HXLINE( 322)				if (hx::IsNotNull( this->zpp_inner_zn->b4 )) {
HXLINE( 323)					bool _hx_tmp;
HXDLIN( 323)					bool _hx_tmp1;
HXDLIN( 323)					bool _hx_tmp2;
HXDLIN( 323)					 ::nape::space::Space _hx_tmp3;
HXDLIN( 323)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 323)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 323)						_hx_tmp3 = this->zpp_inner->space->outer;
            					}
HXDLIN( 323)					if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 323)						_hx_tmp2 = hx::IsNotEq( this->zpp_inner_zn->b1,this->zpp_inner_zn->b4 );
            					}
            					else {
HXLINE( 323)						_hx_tmp2 = false;
            					}
HXDLIN( 323)					if (_hx_tmp2) {
HXLINE( 323)						_hx_tmp1 = hx::IsNotEq( this->zpp_inner_zn->b2,this->zpp_inner_zn->b4 );
            					}
            					else {
HXLINE( 323)						_hx_tmp1 = false;
            					}
HXDLIN( 323)					if (_hx_tmp1) {
HXLINE( 323)						_hx_tmp = hx::IsNotEq( this->zpp_inner_zn->b3,this->zpp_inner_zn->b4 );
            					}
            					else {
HXLINE( 323)						_hx_tmp = false;
            					}
HXDLIN( 323)					if (_hx_tmp) {
HXLINE( 325)						if (hx::IsNotNull( this->zpp_inner_zn->b4 )) {
HXLINE( 325)							this->zpp_inner_zn->b4->constraints->remove(this->zpp_inner);
            						}
            					}
HXLINE( 328)					bool _hx_tmp4;
HXDLIN( 328)					if (this->zpp_inner->active) {
HXLINE( 328)						 ::nape::space::Space _hx_tmp5;
HXDLIN( 328)						if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 328)							_hx_tmp5 = null();
            						}
            						else {
HXLINE( 328)							_hx_tmp5 = this->zpp_inner->space->outer;
            						}
HXDLIN( 328)						_hx_tmp4 = hx::IsNotNull( _hx_tmp5 );
            					}
            					else {
HXLINE( 328)						_hx_tmp4 = false;
            					}
HXDLIN( 328)					if (_hx_tmp4) {
HXLINE( 328)						this->zpp_inner_zn->b4->wake();
            					}
            				}
HXLINE( 330)				this->zpp_inner_zn->b4 = inbody4;
HXLINE( 331)				bool _hx_tmp6;
HXDLIN( 331)				bool _hx_tmp7;
HXDLIN( 331)				bool _hx_tmp8;
HXDLIN( 331)				bool _hx_tmp9;
HXDLIN( 331)				 ::nape::space::Space _hx_tmp10;
HXDLIN( 331)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 331)					_hx_tmp10 = null();
            				}
            				else {
HXLINE( 331)					_hx_tmp10 = this->zpp_inner->space->outer;
            				}
HXDLIN( 331)				if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 331)					_hx_tmp9 = hx::IsNotNull( inbody4 );
            				}
            				else {
HXLINE( 331)					_hx_tmp9 = false;
            				}
HXDLIN( 331)				if (_hx_tmp9) {
HXLINE( 331)					_hx_tmp8 = hx::IsNotEq( this->zpp_inner_zn->b1,inbody4 );
            				}
            				else {
HXLINE( 331)					_hx_tmp8 = false;
            				}
HXDLIN( 331)				if (_hx_tmp8) {
HXLINE( 331)					_hx_tmp7 = hx::IsNotEq( this->zpp_inner_zn->b2,inbody4 );
            				}
            				else {
HXLINE( 331)					_hx_tmp7 = false;
            				}
HXDLIN( 331)				if (_hx_tmp7) {
HXLINE( 331)					_hx_tmp6 = hx::IsNotEq( this->zpp_inner_zn->b3,inbody4 );
            				}
            				else {
HXLINE( 331)					_hx_tmp6 = false;
            				}
HXDLIN( 331)				if (_hx_tmp6) {
HXLINE( 333)					if (hx::IsNotNull( inbody4 )) {
HXLINE( 333)						inbody4->constraints->add(this->zpp_inner);
            					}
            				}
HXLINE( 336)				bool _hx_tmp11;
HXDLIN( 336)				if (this->zpp_inner->active) {
HXLINE( 336)					 ::nape::space::Space _hx_tmp12;
HXDLIN( 336)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 336)						_hx_tmp12 = null();
            					}
            					else {
HXLINE( 336)						_hx_tmp12 = this->zpp_inner->space->outer;
            					}
HXDLIN( 336)					_hx_tmp11 = hx::IsNotNull( _hx_tmp12 );
            				}
            				else {
HXLINE( 336)					_hx_tmp11 = false;
            				}
HXDLIN( 336)				if (_hx_tmp11) {
HXLINE( 337)					this->zpp_inner->wake();
HXLINE( 338)					if (hx::IsNotNull( inbody4 )) {
HXLINE( 338)						inbody4->wake();
            					}
            				}
            			}
            		}
HXLINE( 342)		if (hx::IsNull( this->zpp_inner_zn->b4 )) {
HXLINE( 342)			return null();
            		}
            		else {
HXLINE( 342)			return this->zpp_inner_zn->b4->outer;
            		}
HXDLIN( 342)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_body4,return )

 ::nape::geom::Vec2 PulleyJoint_obj::get_anchor1(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_351_get_anchor1)
            	HX_STACK_THIS(this)
HXLINE( 352)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 352)			this->zpp_inner_zn->setup_a1();
            		}
HXLINE( 353)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_anchor1,return )

 ::nape::geom::Vec2 PulleyJoint_obj::set_anchor1( ::nape::geom::Vec2 anchor1){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_355_set_anchor1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor1,"anchor1")
HXLINE( 365)		{
HXLINE( 365)			if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 365)				this->zpp_inner_zn->setup_a1();
            			}
HXDLIN( 365)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a1;
HXDLIN( 365)			{
HXLINE( 365)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor1->zpp_inner;
HXDLIN( 365)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 365)					_this1->_validate();
            				}
            			}
HXDLIN( 365)			HX_VARI( Float,x) = anchor1->zpp_inner->x;
HXDLIN( 365)			{
HXLINE( 365)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor1->zpp_inner;
HXDLIN( 365)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 365)					_this2->_validate();
            				}
            			}
HXDLIN( 365)			HX_VARI( Float,y) = anchor1->zpp_inner->y;
HXDLIN( 365)			bool _hx_tmp;
HXDLIN( 365)			{
HXLINE( 365)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 365)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 365)					_this3->_validate();
            				}
            			}
HXDLIN( 365)			if ((_this->zpp_inner->x == x)) {
HXLINE( 365)				{
HXLINE( 365)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 365)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 365)						_this4->_validate();
            					}
            				}
HXDLIN( 365)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 365)				_hx_tmp = false;
            			}
HXDLIN( 365)			if (!(_hx_tmp)) {
HXLINE( 365)				{
HXLINE( 365)					_this->zpp_inner->x = x;
HXDLIN( 365)					_this->zpp_inner->y = y;
            				}
HXDLIN( 365)				{
HXLINE( 365)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 365)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 365)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 365)			if (anchor1->zpp_inner->weak) {
HXLINE( 365)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor1->zpp_inner;
HXDLIN( 365)				anchor1->zpp_inner->outer = null();
HXDLIN( 365)				anchor1->zpp_inner = null();
HXDLIN( 365)				{
HXLINE( 365)					anchor1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 365)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor1;
            				}
HXDLIN( 365)				{
HXLINE( 365)					{
HXLINE( 365)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 365)							inner->outer->zpp_inner = null();
HXDLIN( 365)							inner->outer = null();
            						}
HXDLIN( 365)						inner->_isimmutable = null();
HXDLIN( 365)						inner->_validate = null();
HXDLIN( 365)						inner->_invalidate = null();
            					}
HXDLIN( 365)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 365)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 367)		if (hx::IsNull( this->zpp_inner_zn->wrap_a1 )) {
HXLINE( 367)			this->zpp_inner_zn->setup_a1();
            		}
HXDLIN( 367)		return this->zpp_inner_zn->wrap_a1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_anchor1,return )

 ::nape::geom::Vec2 PulleyJoint_obj::get_anchor2(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_376_get_anchor2)
            	HX_STACK_THIS(this)
HXLINE( 377)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 377)			this->zpp_inner_zn->setup_a2();
            		}
HXLINE( 378)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_anchor2,return )

 ::nape::geom::Vec2 PulleyJoint_obj::set_anchor2( ::nape::geom::Vec2 anchor2){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_380_set_anchor2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor2,"anchor2")
HXLINE( 390)		{
HXLINE( 390)			if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 390)				this->zpp_inner_zn->setup_a2();
            			}
HXDLIN( 390)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a2;
HXDLIN( 390)			{
HXLINE( 390)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor2->zpp_inner;
HXDLIN( 390)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 390)					_this1->_validate();
            				}
            			}
HXDLIN( 390)			HX_VARI( Float,x) = anchor2->zpp_inner->x;
HXDLIN( 390)			{
HXLINE( 390)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor2->zpp_inner;
HXDLIN( 390)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 390)					_this2->_validate();
            				}
            			}
HXDLIN( 390)			HX_VARI( Float,y) = anchor2->zpp_inner->y;
HXDLIN( 390)			bool _hx_tmp;
HXDLIN( 390)			{
HXLINE( 390)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 390)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 390)					_this3->_validate();
            				}
            			}
HXDLIN( 390)			if ((_this->zpp_inner->x == x)) {
HXLINE( 390)				{
HXLINE( 390)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 390)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 390)						_this4->_validate();
            					}
            				}
HXDLIN( 390)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 390)				_hx_tmp = false;
            			}
HXDLIN( 390)			if (!(_hx_tmp)) {
HXLINE( 390)				{
HXLINE( 390)					_this->zpp_inner->x = x;
HXDLIN( 390)					_this->zpp_inner->y = y;
            				}
HXDLIN( 390)				{
HXLINE( 390)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 390)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 390)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 390)			if (anchor2->zpp_inner->weak) {
HXLINE( 390)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor2->zpp_inner;
HXDLIN( 390)				anchor2->zpp_inner->outer = null();
HXDLIN( 390)				anchor2->zpp_inner = null();
HXDLIN( 390)				{
HXLINE( 390)					anchor2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 390)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor2;
            				}
HXDLIN( 390)				{
HXLINE( 390)					{
HXLINE( 390)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 390)							inner->outer->zpp_inner = null();
HXDLIN( 390)							inner->outer = null();
            						}
HXDLIN( 390)						inner->_isimmutable = null();
HXDLIN( 390)						inner->_validate = null();
HXDLIN( 390)						inner->_invalidate = null();
            					}
HXDLIN( 390)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 390)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 392)		if (hx::IsNull( this->zpp_inner_zn->wrap_a2 )) {
HXLINE( 392)			this->zpp_inner_zn->setup_a2();
            		}
HXDLIN( 392)		return this->zpp_inner_zn->wrap_a2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_anchor2,return )

 ::nape::geom::Vec2 PulleyJoint_obj::get_anchor3(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_401_get_anchor3)
            	HX_STACK_THIS(this)
HXLINE( 402)		if (hx::IsNull( this->zpp_inner_zn->wrap_a3 )) {
HXLINE( 402)			this->zpp_inner_zn->setup_a3();
            		}
HXLINE( 403)		return this->zpp_inner_zn->wrap_a3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_anchor3,return )

 ::nape::geom::Vec2 PulleyJoint_obj::set_anchor3( ::nape::geom::Vec2 anchor3){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_405_set_anchor3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor3,"anchor3")
HXLINE( 415)		{
HXLINE( 415)			if (hx::IsNull( this->zpp_inner_zn->wrap_a3 )) {
HXLINE( 415)				this->zpp_inner_zn->setup_a3();
            			}
HXDLIN( 415)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a3;
HXDLIN( 415)			{
HXLINE( 415)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor3->zpp_inner;
HXDLIN( 415)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 415)					_this1->_validate();
            				}
            			}
HXDLIN( 415)			HX_VARI( Float,x) = anchor3->zpp_inner->x;
HXDLIN( 415)			{
HXLINE( 415)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor3->zpp_inner;
HXDLIN( 415)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 415)					_this2->_validate();
            				}
            			}
HXDLIN( 415)			HX_VARI( Float,y) = anchor3->zpp_inner->y;
HXDLIN( 415)			bool _hx_tmp;
HXDLIN( 415)			{
HXLINE( 415)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 415)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 415)					_this3->_validate();
            				}
            			}
HXDLIN( 415)			if ((_this->zpp_inner->x == x)) {
HXLINE( 415)				{
HXLINE( 415)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 415)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 415)						_this4->_validate();
            					}
            				}
HXDLIN( 415)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 415)				_hx_tmp = false;
            			}
HXDLIN( 415)			if (!(_hx_tmp)) {
HXLINE( 415)				{
HXLINE( 415)					_this->zpp_inner->x = x;
HXDLIN( 415)					_this->zpp_inner->y = y;
            				}
HXDLIN( 415)				{
HXLINE( 415)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 415)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 415)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 415)			if (anchor3->zpp_inner->weak) {
HXLINE( 415)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor3->zpp_inner;
HXDLIN( 415)				anchor3->zpp_inner->outer = null();
HXDLIN( 415)				anchor3->zpp_inner = null();
HXDLIN( 415)				{
HXLINE( 415)					anchor3->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 415)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor3;
            				}
HXDLIN( 415)				{
HXLINE( 415)					{
HXLINE( 415)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 415)							inner->outer->zpp_inner = null();
HXDLIN( 415)							inner->outer = null();
            						}
HXDLIN( 415)						inner->_isimmutable = null();
HXDLIN( 415)						inner->_validate = null();
HXDLIN( 415)						inner->_invalidate = null();
            					}
HXDLIN( 415)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 415)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 417)		if (hx::IsNull( this->zpp_inner_zn->wrap_a3 )) {
HXLINE( 417)			this->zpp_inner_zn->setup_a3();
            		}
HXDLIN( 417)		return this->zpp_inner_zn->wrap_a3;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_anchor3,return )

 ::nape::geom::Vec2 PulleyJoint_obj::get_anchor4(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_426_get_anchor4)
            	HX_STACK_THIS(this)
HXLINE( 427)		if (hx::IsNull( this->zpp_inner_zn->wrap_a4 )) {
HXLINE( 427)			this->zpp_inner_zn->setup_a4();
            		}
HXLINE( 428)		return this->zpp_inner_zn->wrap_a4;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_anchor4,return )

 ::nape::geom::Vec2 PulleyJoint_obj::set_anchor4( ::nape::geom::Vec2 anchor4){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_430_set_anchor4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anchor4,"anchor4")
HXLINE( 440)		{
HXLINE( 440)			if (hx::IsNull( this->zpp_inner_zn->wrap_a4 )) {
HXLINE( 440)				this->zpp_inner_zn->setup_a4();
            			}
HXDLIN( 440)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner_zn->wrap_a4;
HXDLIN( 440)			{
HXLINE( 440)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = anchor4->zpp_inner;
HXDLIN( 440)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 440)					_this1->_validate();
            				}
            			}
HXDLIN( 440)			HX_VARI( Float,x) = anchor4->zpp_inner->x;
HXDLIN( 440)			{
HXLINE( 440)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = anchor4->zpp_inner;
HXDLIN( 440)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 440)					_this2->_validate();
            				}
            			}
HXDLIN( 440)			HX_VARI( Float,y) = anchor4->zpp_inner->y;
HXDLIN( 440)			bool _hx_tmp;
HXDLIN( 440)			{
HXLINE( 440)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 440)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 440)					_this3->_validate();
            				}
            			}
HXDLIN( 440)			if ((_this->zpp_inner->x == x)) {
HXLINE( 440)				{
HXLINE( 440)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 440)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 440)						_this4->_validate();
            					}
            				}
HXDLIN( 440)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 440)				_hx_tmp = false;
            			}
HXDLIN( 440)			if (!(_hx_tmp)) {
HXLINE( 440)				{
HXLINE( 440)					_this->zpp_inner->x = x;
HXDLIN( 440)					_this->zpp_inner->y = y;
            				}
HXDLIN( 440)				{
HXLINE( 440)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 440)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 440)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 440)			if (anchor4->zpp_inner->weak) {
HXLINE( 440)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = anchor4->zpp_inner;
HXDLIN( 440)				anchor4->zpp_inner->outer = null();
HXDLIN( 440)				anchor4->zpp_inner = null();
HXDLIN( 440)				{
HXLINE( 440)					anchor4->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 440)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = anchor4;
            				}
HXDLIN( 440)				{
HXLINE( 440)					{
HXLINE( 440)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 440)							inner->outer->zpp_inner = null();
HXDLIN( 440)							inner->outer = null();
            						}
HXDLIN( 440)						inner->_isimmutable = null();
HXDLIN( 440)						inner->_validate = null();
HXDLIN( 440)						inner->_invalidate = null();
            					}
HXDLIN( 440)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 440)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 442)		if (hx::IsNull( this->zpp_inner_zn->wrap_a4 )) {
HXLINE( 442)			this->zpp_inner_zn->setup_a4();
            		}
HXDLIN( 442)		return this->zpp_inner_zn->wrap_a4;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_anchor4,return )

Float PulleyJoint_obj::get_jointMin(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_452_get_jointMin)
            	HX_STACK_THIS(this)
HXLINE( 452)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_jointMin,return )

Float PulleyJoint_obj::set_jointMin(Float jointMin){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_454_set_jointMin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(jointMin,"jointMin")
HXLINE( 465)		if ((this->zpp_inner_zn->jointMin != jointMin)) {
HXLINE( 466)			this->zpp_inner_zn->jointMin = jointMin;
HXLINE( 467)			this->zpp_inner->wake();
            		}
HXLINE( 470)		return this->zpp_inner_zn->jointMin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_jointMin,return )

Float PulleyJoint_obj::get_jointMax(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_480_get_jointMax)
            	HX_STACK_THIS(this)
HXLINE( 480)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_jointMax,return )

Float PulleyJoint_obj::set_jointMax(Float jointMax){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_482_set_jointMax)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(jointMax,"jointMax")
HXLINE( 493)		if ((this->zpp_inner_zn->jointMax != jointMax)) {
HXLINE( 494)			this->zpp_inner_zn->jointMax = jointMax;
HXLINE( 495)			this->zpp_inner->wake();
            		}
HXLINE( 498)		return this->zpp_inner_zn->jointMax;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_jointMax,return )

Float PulleyJoint_obj::get_ratio(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_508_get_ratio)
            	HX_STACK_THIS(this)
HXLINE( 508)		return this->zpp_inner_zn->ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,get_ratio,return )

Float PulleyJoint_obj::set_ratio(Float ratio){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_510_set_ratio)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ratio,"ratio")
HXLINE( 518)		if ((this->zpp_inner_zn->ratio != ratio)) {
HXLINE( 519)			this->zpp_inner_zn->ratio = ratio;
HXLINE( 520)			this->zpp_inner->wake();
            		}
HXLINE( 523)		return this->zpp_inner_zn->ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PulleyJoint_obj,set_ratio,return )

bool PulleyJoint_obj::isSlack(){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_542_isSlack)
            	HX_STACK_THIS(this)
HXLINE( 542)		return this->zpp_inner_zn->slack;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PulleyJoint_obj,isSlack,return )

 ::nape::geom::MatMN PulleyJoint_obj::impulse(){
            	HX_GC_STACKFRAME(&_hx_pos_7d77866d564ee991_592_impulse)
            	HX_STACK_THIS(this)
HXLINE( 593)		HX_VARI(  ::nape::geom::MatMN,ret) =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,(int)1,(int)1);
HXLINE( 594)		ret->zpp_inner->x[((int)0 * ret->zpp_inner->n)] = this->zpp_inner_zn->jAcc;
HXLINE( 595)		return ret;
            	}


 ::nape::geom::Vec3 PulleyJoint_obj::bodyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_609_bodyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 609)		if (!(this->zpp_inner->active)) {
HXLINE( 610)			return ::nape::geom::Vec3_obj::get(null(),null(),null());
            		}
            		else {
HXLINE( 613)			return this->zpp_inner_zn->bodyImpulse(body->zpp_inner);
            		}
HXLINE( 609)		return null();
            	}


void PulleyJoint_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_7d77866d564ee991_619_visitBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 620)		 ::nape::phys::Body _hx_tmp;
HXDLIN( 620)		if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 620)			_hx_tmp = null();
            		}
            		else {
HXLINE( 620)			_hx_tmp = this->zpp_inner_zn->b1->outer;
            		}
HXDLIN( 620)		if (hx::IsNotNull( _hx_tmp )) {
HXLINE( 621)			 ::nape::phys::Body _hx_tmp1;
HXDLIN( 621)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 621)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 621)				_hx_tmp1 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 621)			lambda(_hx_tmp1);
            		}
HXLINE( 623)		bool _hx_tmp2;
HXDLIN( 623)		 ::nape::phys::Body _hx_tmp3;
HXDLIN( 623)		if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 623)			_hx_tmp3 = null();
            		}
            		else {
HXLINE( 623)			_hx_tmp3 = this->zpp_inner_zn->b2->outer;
            		}
HXDLIN( 623)		if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 623)			 ::nape::phys::Body _hx_tmp4;
HXDLIN( 623)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 623)				_hx_tmp4 = null();
            			}
            			else {
HXLINE( 623)				_hx_tmp4 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 623)			 ::nape::phys::Body _hx_tmp5;
HXDLIN( 623)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 623)				_hx_tmp5 = null();
            			}
            			else {
HXLINE( 623)				_hx_tmp5 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 623)			_hx_tmp2 = hx::IsNotEq( _hx_tmp4,_hx_tmp5 );
            		}
            		else {
HXLINE( 623)			_hx_tmp2 = false;
            		}
HXDLIN( 623)		if (_hx_tmp2) {
HXLINE( 624)			 ::nape::phys::Body _hx_tmp6;
HXDLIN( 624)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 624)				_hx_tmp6 = null();
            			}
            			else {
HXLINE( 624)				_hx_tmp6 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 624)			lambda(_hx_tmp6);
            		}
HXLINE( 626)		bool _hx_tmp7;
HXDLIN( 626)		bool _hx_tmp8;
HXDLIN( 626)		 ::nape::phys::Body _hx_tmp9;
HXDLIN( 626)		if (hx::IsNull( this->zpp_inner_zn->b3 )) {
HXLINE( 626)			_hx_tmp9 = null();
            		}
            		else {
HXLINE( 626)			_hx_tmp9 = this->zpp_inner_zn->b3->outer;
            		}
HXDLIN( 626)		if (hx::IsNotNull( _hx_tmp9 )) {
HXLINE( 626)			 ::nape::phys::Body _hx_tmp10;
HXDLIN( 626)			if (hx::IsNull( this->zpp_inner_zn->b3 )) {
HXLINE( 626)				_hx_tmp10 = null();
            			}
            			else {
HXLINE( 626)				_hx_tmp10 = this->zpp_inner_zn->b3->outer;
            			}
HXDLIN( 626)			 ::nape::phys::Body _hx_tmp11;
HXDLIN( 626)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 626)				_hx_tmp11 = null();
            			}
            			else {
HXLINE( 626)				_hx_tmp11 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 626)			_hx_tmp8 = hx::IsNotEq( _hx_tmp10,_hx_tmp11 );
            		}
            		else {
HXLINE( 626)			_hx_tmp8 = false;
            		}
HXDLIN( 626)		if (_hx_tmp8) {
HXLINE( 626)			 ::nape::phys::Body _hx_tmp12;
HXDLIN( 626)			if (hx::IsNull( this->zpp_inner_zn->b3 )) {
HXLINE( 626)				_hx_tmp12 = null();
            			}
            			else {
HXLINE( 626)				_hx_tmp12 = this->zpp_inner_zn->b3->outer;
            			}
HXDLIN( 626)			 ::nape::phys::Body _hx_tmp13;
HXDLIN( 626)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 626)				_hx_tmp13 = null();
            			}
            			else {
HXLINE( 626)				_hx_tmp13 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 626)			_hx_tmp7 = hx::IsNotEq( _hx_tmp12,_hx_tmp13 );
            		}
            		else {
HXLINE( 626)			_hx_tmp7 = false;
            		}
HXDLIN( 626)		if (_hx_tmp7) {
HXLINE( 627)			 ::nape::phys::Body _hx_tmp14;
HXDLIN( 627)			if (hx::IsNull( this->zpp_inner_zn->b3 )) {
HXLINE( 627)				_hx_tmp14 = null();
            			}
            			else {
HXLINE( 627)				_hx_tmp14 = this->zpp_inner_zn->b3->outer;
            			}
HXDLIN( 627)			lambda(_hx_tmp14);
            		}
HXLINE( 629)		bool _hx_tmp15;
HXDLIN( 629)		bool _hx_tmp16;
HXDLIN( 629)		bool _hx_tmp17;
HXDLIN( 629)		 ::nape::phys::Body _hx_tmp18;
HXDLIN( 629)		if (hx::IsNull( this->zpp_inner_zn->b4 )) {
HXLINE( 629)			_hx_tmp18 = null();
            		}
            		else {
HXLINE( 629)			_hx_tmp18 = this->zpp_inner_zn->b4->outer;
            		}
HXDLIN( 629)		if (hx::IsNotNull( _hx_tmp18 )) {
HXLINE( 629)			 ::nape::phys::Body _hx_tmp19;
HXDLIN( 629)			if (hx::IsNull( this->zpp_inner_zn->b4 )) {
HXLINE( 629)				_hx_tmp19 = null();
            			}
            			else {
HXLINE( 629)				_hx_tmp19 = this->zpp_inner_zn->b4->outer;
            			}
HXDLIN( 629)			 ::nape::phys::Body _hx_tmp20;
HXDLIN( 629)			if (hx::IsNull( this->zpp_inner_zn->b1 )) {
HXLINE( 629)				_hx_tmp20 = null();
            			}
            			else {
HXLINE( 629)				_hx_tmp20 = this->zpp_inner_zn->b1->outer;
            			}
HXDLIN( 629)			_hx_tmp17 = hx::IsNotEq( _hx_tmp19,_hx_tmp20 );
            		}
            		else {
HXLINE( 629)			_hx_tmp17 = false;
            		}
HXDLIN( 629)		if (_hx_tmp17) {
HXLINE( 629)			 ::nape::phys::Body _hx_tmp21;
HXDLIN( 629)			if (hx::IsNull( this->zpp_inner_zn->b4 )) {
HXLINE( 629)				_hx_tmp21 = null();
            			}
            			else {
HXLINE( 629)				_hx_tmp21 = this->zpp_inner_zn->b4->outer;
            			}
HXDLIN( 629)			 ::nape::phys::Body _hx_tmp22;
HXDLIN( 629)			if (hx::IsNull( this->zpp_inner_zn->b2 )) {
HXLINE( 629)				_hx_tmp22 = null();
            			}
            			else {
HXLINE( 629)				_hx_tmp22 = this->zpp_inner_zn->b2->outer;
            			}
HXDLIN( 629)			_hx_tmp16 = hx::IsNotEq( _hx_tmp21,_hx_tmp22 );
            		}
            		else {
HXLINE( 629)			_hx_tmp16 = false;
            		}
HXDLIN( 629)		if (_hx_tmp16) {
HXLINE( 629)			 ::nape::phys::Body _hx_tmp23;
HXDLIN( 629)			if (hx::IsNull( this->zpp_inner_zn->b4 )) {
HXLINE( 629)				_hx_tmp23 = null();
            			}
            			else {
HXLINE( 629)				_hx_tmp23 = this->zpp_inner_zn->b4->outer;
            			}
HXDLIN( 629)			 ::nape::phys::Body _hx_tmp24;
HXDLIN( 629)			if (hx::IsNull( this->zpp_inner_zn->b3 )) {
HXLINE( 629)				_hx_tmp24 = null();
            			}
            			else {
HXLINE( 629)				_hx_tmp24 = this->zpp_inner_zn->b3->outer;
            			}
HXDLIN( 629)			_hx_tmp15 = hx::IsNotEq( _hx_tmp23,_hx_tmp24 );
            		}
            		else {
HXLINE( 629)			_hx_tmp15 = false;
            		}
HXDLIN( 629)		if (_hx_tmp15) {
HXLINE( 630)			 ::nape::phys::Body _hx_tmp25;
HXDLIN( 630)			if (hx::IsNull( this->zpp_inner_zn->b4 )) {
HXLINE( 630)				_hx_tmp25 = null();
            			}
            			else {
HXLINE( 630)				_hx_tmp25 = this->zpp_inner_zn->b4->outer;
            			}
HXDLIN( 630)			lambda(_hx_tmp25);
            		}
            	}



hx::ObjectPtr< PulleyJoint_obj > PulleyJoint_obj::__new( ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::phys::Body body3, ::nape::phys::Body body4, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2, ::nape::geom::Vec2 anchor3, ::nape::geom::Vec2 anchor4,Float jointMin,Float jointMax,hx::Null< Float >  __o_ratio) {
	hx::ObjectPtr< PulleyJoint_obj > __this = new PulleyJoint_obj();
	__this->__construct(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,__o_ratio);
	return __this;
}

hx::ObjectPtr< PulleyJoint_obj > PulleyJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::phys::Body body1, ::nape::phys::Body body2, ::nape::phys::Body body3, ::nape::phys::Body body4, ::nape::geom::Vec2 anchor1, ::nape::geom::Vec2 anchor2, ::nape::geom::Vec2 anchor3, ::nape::geom::Vec2 anchor4,Float jointMin,Float jointMax,hx::Null< Float >  __o_ratio) {
	PulleyJoint_obj *__this = (PulleyJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PulleyJoint_obj), true, "nape.constraint.PulleyJoint"));
	*(void **)__this = PulleyJoint_obj::_hx_vtable;
	__this->__construct(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,__o_ratio);
	return __this;
}

PulleyJoint_obj::PulleyJoint_obj()
{
}

void PulleyJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PulleyJoint);
	HX_MARK_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PulleyJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner_zn,"zpp_inner_zn");
	 ::nape::constraint::Constraint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PulleyJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body1()); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body2()); }
		if (HX_FIELD_EQ(inName,"body3") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body3()); }
		if (HX_FIELD_EQ(inName,"body4") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body4()); }
		if (HX_FIELD_EQ(inName,"ratio") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_ratio()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor1()); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor2()); }
		if (HX_FIELD_EQ(inName,"anchor3") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor3()); }
		if (HX_FIELD_EQ(inName,"anchor4") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_anchor4()); }
		if (HX_FIELD_EQ(inName,"isSlack") ) { return hx::Val( isSlack_dyn()); }
		if (HX_FIELD_EQ(inName,"impulse") ) { return hx::Val( impulse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_jointMin()); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_jointMax()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_body1") ) { return hx::Val( get_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body1") ) { return hx::Val( set_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body2") ) { return hx::Val( get_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body2") ) { return hx::Val( set_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body3") ) { return hx::Val( get_body3_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body3") ) { return hx::Val( set_body3_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body4") ) { return hx::Val( get_body4_dyn()); }
		if (HX_FIELD_EQ(inName,"set_body4") ) { return hx::Val( set_body4_dyn()); }
		if (HX_FIELD_EQ(inName,"get_ratio") ) { return hx::Val( get_ratio_dyn()); }
		if (HX_FIELD_EQ(inName,"set_ratio") ) { return hx::Val( set_ratio_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_anchor1") ) { return hx::Val( get_anchor1_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor1") ) { return hx::Val( set_anchor1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_anchor2") ) { return hx::Val( get_anchor2_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor2") ) { return hx::Val( set_anchor2_dyn()); }
		if (HX_FIELD_EQ(inName,"get_anchor3") ) { return hx::Val( get_anchor3_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor3") ) { return hx::Val( set_anchor3_dyn()); }
		if (HX_FIELD_EQ(inName,"get_anchor4") ) { return hx::Val( get_anchor4_dyn()); }
		if (HX_FIELD_EQ(inName,"set_anchor4") ) { return hx::Val( set_anchor4_dyn()); }
		if (HX_FIELD_EQ(inName,"bodyImpulse") ) { return hx::Val( bodyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { return hx::Val( zpp_inner_zn); }
		if (HX_FIELD_EQ(inName,"get_jointMin") ) { return hx::Val( get_jointMin_dyn()); }
		if (HX_FIELD_EQ(inName,"set_jointMin") ) { return hx::Val( set_jointMin_dyn()); }
		if (HX_FIELD_EQ(inName,"get_jointMax") ) { return hx::Val( get_jointMax_dyn()); }
		if (HX_FIELD_EQ(inName,"set_jointMax") ) { return hx::Val( set_jointMax_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PulleyJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body1(inValue) ); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body2(inValue) ); }
		if (HX_FIELD_EQ(inName,"body3") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body3(inValue) ); }
		if (HX_FIELD_EQ(inName,"body4") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_body4(inValue) ); }
		if (HX_FIELD_EQ(inName,"ratio") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ratio(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"anchor1") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor1(inValue) ); }
		if (HX_FIELD_EQ(inName,"anchor2") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor2(inValue) ); }
		if (HX_FIELD_EQ(inName,"anchor3") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor3(inValue) ); }
		if (HX_FIELD_EQ(inName,"anchor4") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_anchor4(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"jointMin") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMin(inValue) ); }
		if (HX_FIELD_EQ(inName,"jointMax") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_jointMax(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"zpp_inner_zn") ) { zpp_inner_zn=inValue.Cast<  ::zpp_nape::constraint::ZPP_PulleyJoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PulleyJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"));
	outFields->push(HX_HCSTRING("body1","\x4f","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("body2","\x50","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("body3","\x51","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("body4","\x52","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("anchor1","\x1c","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("anchor2","\x1d","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("anchor3","\x1e","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("anchor4","\x1f","\xec","\xa1","\x02"));
	outFields->push(HX_HCSTRING("jointMin","\x68","\xfa","\x25","\x55"));
	outFields->push(HX_HCSTRING("jointMax","\x7a","\xf3","\x25","\x55"));
	outFields->push(HX_HCSTRING("ratio","\x0b","\x35","\x24","\xe4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PulleyJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::constraint::ZPP_PulleyJoint*/ ,(int)offsetof(PulleyJoint_obj,zpp_inner_zn),HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PulleyJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String PulleyJoint_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner_zn","\x22","\x84","\xfa","\xe0"),
	HX_HCSTRING("get_body1","\xa6","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body1","\xb2","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_body2","\xa7","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body2","\xb3","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_body3","\xa8","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body3","\xb4","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_body4","\xa9","\x2f","\x99","\xfa"),
	HX_HCSTRING("set_body4","\xb5","\x1b","\xea","\xdd"),
	HX_HCSTRING("get_anchor1","\x33","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor1","\x3f","\x53","\x09","\x93"),
	HX_HCSTRING("get_anchor2","\x34","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor2","\x40","\x53","\x09","\x93"),
	HX_HCSTRING("get_anchor3","\x35","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor3","\x41","\x53","\x09","\x93"),
	HX_HCSTRING("get_anchor4","\x36","\x4c","\x9c","\x88"),
	HX_HCSTRING("set_anchor4","\x42","\x53","\x09","\x93"),
	HX_HCSTRING("get_jointMin","\x71","\xae","\x3f","\x0a"),
	HX_HCSTRING("set_jointMin","\xe5","\xd1","\x38","\x1f"),
	HX_HCSTRING("get_jointMax","\x83","\xa7","\x3f","\x0a"),
	HX_HCSTRING("set_jointMax","\xf7","\xca","\x38","\x1f"),
	HX_HCSTRING("get_ratio","\x62","\x91","\xcd","\x27"),
	HX_HCSTRING("set_ratio","\x6e","\x7d","\x1e","\x0b"),
	HX_HCSTRING("isSlack","\x06","\x56","\x47","\x1b"),
	HX_HCSTRING("impulse","\xb5","\x50","\xbd","\x6d"),
	HX_HCSTRING("bodyImpulse","\x33","\x76","\xa2","\x5f"),
	HX_HCSTRING("visitBodies","\xab","\xf3","\x5e","\xe4"),
	::String(null()) };

static void PulleyJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PulleyJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PulleyJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PulleyJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class PulleyJoint_obj::__mClass;

void PulleyJoint_obj::__register()
{
	hx::Object *dummy = new PulleyJoint_obj;
	PulleyJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.constraint.PulleyJoint","\x26","\x70","\x00","\x26");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PulleyJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PulleyJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PulleyJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PulleyJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PulleyJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PulleyJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace constraint
