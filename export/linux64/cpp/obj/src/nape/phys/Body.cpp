// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbType
#include <nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionType
#include <nape/callbacks/InteractionType.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintIterator
#include <nape/constraint/ConstraintIterator.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_Arbiter
#include <nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterIterator
#include <nape/dynamics/ArbiterIterator.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_dynamics_CollisionArbiter
#include <nape/dynamics/CollisionArbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_FluidArbiter
#include <nape/dynamics/FluidArbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_FluidProperties
#include <nape/phys/FluidProperties.h>
#endif
#ifndef INCLUDED_nape_phys_GravMassMode
#include <nape/phys/GravMassMode.h>
#endif
#ifndef INCLUDED_nape_phys_InertiaMode
#include <nape/phys/InertiaMode.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_MassMode
#include <nape/phys/MassMode.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbType
#include <zpp_nape/callbacks/ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <zpp_nape/geom/ZPP_Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ArbiterList
#include <zpp_nape/util/ZPP_ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <zpp_nape/util/ZPP_ConstraintList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_177_new,"nape.phys.Body","new",0x6578e0ca,"nape.phys.Body.new","nape/phys/Body.hx",177,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_198_get_type,"nape.phys.Body","get_type",0xb918dd99,"nape.phys.Body.get_type","nape/phys/Body.hx",198,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_200_set_type,"nape.phys.Body","set_type",0x6776370d,"nape.phys.Body.set_type","nape/phys/Body.hx",200,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_260_get_isBullet,"nape.phys.Body","get_isBullet",0x76a2742b,"nape.phys.Body.get_isBullet","nape/phys/Body.hx",260,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_262_set_isBullet,"nape.phys.Body","set_isBullet",0x8b9b979f,"nape.phys.Body.set_isBullet","nape/phys/Body.hx",262,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_279_get_disableCCD,"nape.phys.Body","get_disableCCD",0xefa9a4db,"nape.phys.Body.get_disableCCD","nape/phys/Body.hx",279,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_281_set_disableCCD,"nape.phys.Body","set_disableCCD",0x0fc98d4f,"nape.phys.Body.set_disableCCD","nape/phys/Body.hx",281,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_295_integrate,"nape.phys.Body","integrate",0xca94aa5b,"nape.phys.Body.integrate","nape/phys/Body.hx",295,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_320_isStatic,"nape.phys.Body","isStatic",0x4abaa78e,"nape.phys.Body.isStatic","nape/phys/Body.hx",320,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_329_isDynamic,"nape.phys.Body","isDynamic",0x1848589f,"nape.phys.Body.isDynamic","nape/phys/Body.hx",329,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_338_isKinematic,"nape.phys.Body","isKinematic",0xc32aba25,"nape.phys.Body.isKinematic","nape/phys/Body.hx",338,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_350_get_shapes,"nape.phys.Body","get_shapes",0x9d317ad1,"nape.phys.Body.get_shapes","nape/phys/Body.hx",350,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_364_get_compound,"nape.phys.Body","get_compound",0xcb7809ca,"nape.phys.Body.get_compound","nape/phys/Body.hx",364,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_366_set_compound,"nape.phys.Body","set_compound",0xe0712d3e,"nape.phys.Body.set_compound","nape/phys/Body.hx",366,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_386_get_space,"nape.phys.Body","get_space",0xa3442507,"nape.phys.Body.get_space","nape/phys/Body.hx",386,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_388_set_space,"nape.phys.Body","set_space",0x86951113,"nape.phys.Body.set_space","nape/phys/Body.hx",388,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_412_get_arbiters,"nape.phys.Body","get_arbiters",0x6b5a72c9,"nape.phys.Body.get_arbiters","nape/phys/Body.hx",412,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_432_get_isSleeping,"nape.phys.Body","get_isSleeping",0xc4504654,"nape.phys.Body.get_isSleeping","nape/phys/Body.hx",432,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_443_get_constraints,"nape.phys.Body","get_constraints",0xcac71077,"nape.phys.Body.get_constraints","nape/phys/Body.hx",443,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_546_copy,"nape.phys.Body","copy",0x5d0e080b,"nape.phys.Body.copy","nape/phys/Body.hx",546,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_564_get_position,"nape.phys.Body","get_position",0x14a2e708,"nape.phys.Body.get_position","nape/phys/Body.hx",564,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_568_set_position,"nape.phys.Body","set_position",0x299c0a7c,"nape.phys.Body.set_position","nape/phys/Body.hx",568,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_593_get_velocity,"nape.phys.Body","get_velocity",0x68a6487c,"nape.phys.Body.get_velocity","nape/phys/Body.hx",593,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_597_set_velocity,"nape.phys.Body","set_velocity",0x7d9f6bf0,"nape.phys.Body.set_velocity","nape/phys/Body.hx",597,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_628_setVelocityFromTarget,"nape.phys.Body","setVelocityFromTarget",0x4d9f6804,"nape.phys.Body.setVelocityFromTarget","nape/phys/Body.hx",628,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_668_get_kinematicVel,"nape.phys.Body","get_kinematicVel",0x61163437,"nape.phys.Body.get_kinematicVel","nape/phys/Body.hx",668,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_672_set_kinematicVel,"nape.phys.Body","set_kinematicVel",0xb75821ab,"nape.phys.Body.set_kinematicVel","nape/phys/Body.hx",672,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_700_get_surfaceVel,"nape.phys.Body","get_surfaceVel",0x19286a4f,"nape.phys.Body.get_surfaceVel","nape/phys/Body.hx",700,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_704_set_surfaceVel,"nape.phys.Body","set_surfaceVel",0x394852c3,"nape.phys.Body.set_surfaceVel","nape/phys/Body.hx",704,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_729_get_force,"nape.phys.Body","get_force",0x26724a2c,"nape.phys.Body.get_force","nape/phys/Body.hx",729,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_733_set_force,"nape.phys.Body","set_force",0x09c33638,"nape.phys.Body.set_force","nape/phys/Body.hx",733,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_755_get_constraintVelocity,"nape.phys.Body","get_constraintVelocity",0x30b476b9,"nape.phys.Body.get_constraintVelocity","nape/phys/Body.hx",755,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_774_get_rotation,"nape.phys.Body","get_rotation",0x522e839d,"nape.phys.Body.get_rotation","nape/phys/Body.hx",774,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_776_set_rotation,"nape.phys.Body","set_rotation",0x6727a711,"nape.phys.Body.set_rotation","nape/phys/Body.hx",776,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_806_get_angularVel,"nape.phys.Body","get_angularVel",0x11a0c0ba,"nape.phys.Body.get_angularVel","nape/phys/Body.hx",806,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_808_set_angularVel,"nape.phys.Body","set_angularVel",0x31c0a92e,"nape.phys.Body.set_angularVel","nape/phys/Body.hx",808,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_841_get_kinAngVel,"nape.phys.Body","get_kinAngVel",0x4002dd94,"nape.phys.Body.get_kinAngVel","nape/phys/Body.hx",841,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_843_set_kinAngVel,"nape.phys.Body","set_kinAngVel",0x8508bfa0,"nape.phys.Body.set_kinAngVel","nape/phys/Body.hx",843,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_870_get_torque,"nape.phys.Body","get_torque",0x16985769,"nape.phys.Body.get_torque","nape/phys/Body.hx",870,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_872_set_torque,"nape.phys.Body","set_torque",0x1a15f5dd,"nape.phys.Body.set_torque","nape/phys/Body.hx",872,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_905_get_bounds,"nape.phys.Body","get_bounds",0xe6252714,"nape.phys.Body.get_bounds","nape/phys/Body.hx",905,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_919_get_allowMovement,"nape.phys.Body","get_allowMovement",0x7d735819,"nape.phys.Body.get_allowMovement","nape/phys/Body.hx",919,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_921_set_allowMovement,"nape.phys.Body","set_allowMovement",0xa0e13025,"nape.phys.Body.set_allowMovement","nape/phys/Body.hx",921,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_943_get_allowRotation,"nape.phys.Body","get_allowRotation",0x85c21028,"nape.phys.Body.get_allowRotation","nape/phys/Body.hx",943,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_945_set_allowRotation,"nape.phys.Body","set_allowRotation",0xa92fe834,"nape.phys.Body.set_allowRotation","nape/phys/Body.hx",945,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_967_get_massMode,"nape.phys.Body","get_massMode",0xcb1e10d6,"nape.phys.Body.get_massMode","nape/phys/Body.hx",967,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_969_set_massMode,"nape.phys.Body","set_massMode",0xe017344a,"nape.phys.Body.set_massMode","nape/phys/Body.hx",969,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_992_get_constraintMass,"nape.phys.Body","get_constraintMass",0xb4d73790,"nape.phys.Body.get_constraintMass","nape/phys/Body.hx",992,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1010_get_mass,"nape.phys.Body","get_mass",0xb4662bd3,"nape.phys.Body.get_mass","nape/phys/Body.hx",1010,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1020_set_mass,"nape.phys.Body","set_mass",0x62c38547,"nape.phys.Body.set_mass","nape/phys/Body.hx",1020,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1047_get_gravMassMode,"nape.phys.Body","get_gravMassMode",0x470a9856,"nape.phys.Body.get_gravMassMode","nape/phys/Body.hx",1047,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1049_set_gravMassMode,"nape.phys.Body","set_gravMassMode",0x9d4c85ca,"nape.phys.Body.set_gravMassMode","nape/phys/Body.hx",1049,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1072_get_gravMass,"nape.phys.Body","get_gravMass",0xbe98f353,"nape.phys.Body.get_gravMass","nape/phys/Body.hx",1072,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1084_set_gravMass,"nape.phys.Body","set_gravMass",0xd39216c7,"nape.phys.Body.set_gravMass","nape/phys/Body.hx",1084,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1109_get_gravMassScale,"nape.phys.Body","get_gravMassScale",0x4eb15e37,"nape.phys.Body.get_gravMassScale","nape/phys/Body.hx",1109,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1118_set_gravMassScale,"nape.phys.Body","set_gravMassScale",0x721f3643,"nape.phys.Body.set_gravMassScale","nape/phys/Body.hx",1118,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1143_get_inertiaMode,"nape.phys.Body","get_inertiaMode",0xc04c747e,"nape.phys.Body.get_inertiaMode","nape/phys/Body.hx",1143,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1145_set_inertiaMode,"nape.phys.Body","set_inertiaMode",0xbc17f18a,"nape.phys.Body.set_inertiaMode","nape/phys/Body.hx",1145,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1168_get_constraintInertia,"nape.phys.Body","get_constraintInertia",0xe1d4c3de,"nape.phys.Body.get_constraintInertia","nape/phys/Body.hx",1168,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1179_get_inertia,"nape.phys.Body","get_inertia",0x035f9b7b,"nape.phys.Body.get_inertia","nape/phys/Body.hx",1179,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1189_set_inertia,"nape.phys.Body","set_inertia",0x0dcca287,"nape.phys.Body.set_inertia","nape/phys/Body.hx",1189,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1224_connectedBodies,"nape.phys.Body","connectedBodies",0x5a493693,"nape.phys.Body.connectedBodies","nape/phys/Body.hx",1224,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1241_interactingBodies,"nape.phys.Body","interactingBodies",0x9771f576,"nape.phys.Body.interactingBodies","nape/phys/Body.hx",1241,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1263_crushFactor,"nape.phys.Body","crushFactor",0x8f2ff294,"nape.phys.Body.crushFactor","nape/phys/Body.hx",1263,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1300_localPointToWorld,"nape.phys.Body","localPointToWorld",0x529ec05c,"nape.phys.Body.localPointToWorld","nape/phys/Body.hx",1300,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1340_worldPointToLocal,"nape.phys.Body","worldPointToLocal",0x87d1fedc,"nape.phys.Body.worldPointToLocal","nape/phys/Body.hx",1340,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1387_localVectorToWorld,"nape.phys.Body","localVectorToWorld",0x7d44febf,"nape.phys.Body.localVectorToWorld","nape/phys/Body.hx",1387,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1428_worldVectorToLocal,"nape.phys.Body","worldVectorToLocal",0xef542091,"nape.phys.Body.worldVectorToLocal","nape/phys/Body.hx",1428,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1478_applyImpulse,"nape.phys.Body","applyImpulse",0x41b92f3d,"nape.phys.Body.applyImpulse","nape/phys/Body.hx",1478,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1587_applyAngularImpulse,"nape.phys.Body","applyAngularImpulse",0x699fcc6b,"nape.phys.Body.applyAngularImpulse","nape/phys/Body.hx",1587,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1613_translateShapes,"nape.phys.Body","translateShapes",0x68f49b8a,"nape.phys.Body.translateShapes","nape/phys/Body.hx",1613,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1661_rotateShapes,"nape.phys.Body","rotateShapes",0x7006dd43,"nape.phys.Body.rotateShapes","nape/phys/Body.hx",1661,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1689_scaleShapes,"nape.phys.Body","scaleShapes",0x09d82ac6,"nape.phys.Body.scaleShapes","nape/phys/Body.hx",1689,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1718_transformShapes,"nape.phys.Body","transformShapes",0x4ab05c28,"nape.phys.Body.transformShapes","nape/phys/Body.hx",1718,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1749_align,"nape.phys.Body","align",0xe66ad5af,"nape.phys.Body.align","nape/phys/Body.hx",1749,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1792_rotate,"nape.phys.Body","rotate",0x4495d431,"nape.phys.Body.rotate","nape/phys/Body.hx",1792,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1834_setShapeMaterials,"nape.phys.Body","setShapeMaterials",0x701983b7,"nape.phys.Body.setShapeMaterials","nape/phys/Body.hx",1834,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1858_setShapeFilters,"nape.phys.Body","setShapeFilters",0x8194d6c6,"nape.phys.Body.setShapeFilters","nape/phys/Body.hx",1858,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1882_setShapeFluidProperties,"nape.phys.Body","setShapeFluidProperties",0x85eac2a8,"nape.phys.Body.setShapeFluidProperties","nape/phys/Body.hx",1882,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1907_get_localCOM,"nape.phys.Body","get_localCOM",0x29880df5,"nape.phys.Body.get_localCOM","nape/phys/Body.hx",1907,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1929_get_worldCOM,"nape.phys.Body","get_worldCOM",0xee2c0b6e,"nape.phys.Body.get_worldCOM","nape/phys/Body.hx",1929,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_1954_normalImpulse,"nape.phys.Body","normalImpulse",0x6f782238,"nape.phys.Body.normalImpulse","nape/phys/Body.hx",1954,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2018_tangentImpulse,"nape.phys.Body","tangentImpulse",0x28568246,"nape.phys.Body.tangentImpulse","nape/phys/Body.hx",2018,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2082_totalContactsImpulse,"nape.phys.Body","totalContactsImpulse",0xcd704014,"nape.phys.Body.totalContactsImpulse","nape/phys/Body.hx",2082,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2146_rollingImpulse,"nape.phys.Body","rollingImpulse",0x8df60986,"nape.phys.Body.rollingImpulse","nape/phys/Body.hx",2146,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2172_buoyancyImpulse,"nape.phys.Body","buoyancyImpulse",0x9134aedf,"nape.phys.Body.buoyancyImpulse","nape/phys/Body.hx",2172,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2234_dragImpulse,"nape.phys.Body","dragImpulse",0x2488fd8b,"nape.phys.Body.dragImpulse","nape/phys/Body.hx",2234,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2296_totalFluidImpulse,"nape.phys.Body","totalFluidImpulse",0x5f513f99,"nape.phys.Body.totalFluidImpulse","nape/phys/Body.hx",2296,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2353_constraintsImpulse,"nape.phys.Body","constraintsImpulse",0x3e34d8b5,"nape.phys.Body.constraintsImpulse","nape/phys/Body.hx",2353,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2419_totalImpulse,"nape.phys.Body","totalImpulse",0xab4a77a7,"nape.phys.Body.totalImpulse","nape/phys/Body.hx",2419,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2504_contains,"nape.phys.Body","contains",0x18d08975,"nape.phys.Body.contains","nape/phys/Body.hx",2504,0xcb2bb586)
HX_DEFINE_STACK_FRAME(_hx_pos_276b1c0c2f1cb053_2550_toString,"nape.phys.Body","toString",0x24c40002,"nape.phys.Body.toString","nape/phys/Body.hx",2550,0xcb2bb586)
namespace nape{
namespace phys{

void Body_obj::__construct( ::nape::phys::BodyType type, ::nape::geom::Vec2 position){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_177_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(position,"position")
HXLINE( 189)		this->debugDraw = true;
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 464)		super::__construct();
HXLINE( 466)		this->zpp_inner =  ::zpp_nape::phys::ZPP_Body_obj::__alloc( HX_CTX );
HXLINE( 467)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 468)		this->zpp_inner->outer_i = hx::ObjectPtr<OBJ_>(this);
HXLINE( 469)		this->zpp_inner_i = this->zpp_inner;
HXLINE( 470)		if (hx::IsNotNull( position )) {
HXLINE( 477)			{
HXLINE( 477)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = position->zpp_inner;
HXDLIN( 477)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 477)					_this->_validate();
            				}
            			}
HXDLIN( 477)			this->zpp_inner->posx = position->zpp_inner->x;
HXLINE( 478)			{
HXLINE( 478)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = position->zpp_inner;
HXDLIN( 478)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 478)					_this1->_validate();
            				}
            			}
HXDLIN( 478)			this->zpp_inner->posy = position->zpp_inner->y;
            		}
            		else {
HXLINE( 498)			this->zpp_inner->posx = (int)0;
HXLINE( 499)			this->zpp_inner->posy = (int)0;
            		}
HXLINE( 517)		{
HXLINE( 517)			HX_VAR_NAME(  ::nape::phys::BodyType,type1,"type");
HXDLIN( 517)			if (hx::IsNull( type )) {
HXLINE( 517)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 517)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 517)					::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 517)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 517)				type1 = ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC;
            			}
            			else {
HXLINE( 517)				type1 = type;
            			}
HXDLIN( 517)			{
HXLINE( 517)				this->zpp_inner->immutable_midstep(HX_("Body::type",bc,a9,32,ec));
HXDLIN( 517)				if (hx::IsNotEq( ::zpp_nape::phys::ZPP_Body_obj::types->__get(this->zpp_inner->type).StaticCast<  ::nape::phys::BodyType >(),type1 )) {
HXLINE( 517)					HX_VAR( int,ntype);
HXDLIN( 517)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 517)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 517)						::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 517)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN( 517)					if (hx::IsEq( type1,::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 517)						ntype = (int)2;
            					}
            					else {
HXLINE( 517)						if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 517)							::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 517)							::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 517)							::zpp_nape::util::ZPP_Flags_obj::internal = false;
            						}
HXDLIN( 517)						if (hx::IsEq( type1,::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 517)							ntype = (int)3;
            						}
            						else {
HXLINE( 517)							ntype = (int)1;
            						}
            					}
HXDLIN( 517)					bool _hx_tmp;
HXDLIN( 517)					if ((ntype == (int)1)) {
HXLINE( 517)						_hx_tmp = hx::IsNotNull( this->zpp_inner->space );
            					}
            					else {
HXLINE( 517)						_hx_tmp = false;
            					}
HXDLIN( 517)					if (_hx_tmp) {
HXLINE( 517)						{
HXLINE( 517)							this->zpp_inner->velx = (int)0;
HXDLIN( 517)							this->zpp_inner->vely = (int)0;
            						}
HXDLIN( 517)						this->zpp_inner->angvel = (int)0;
            					}
HXDLIN( 517)					this->zpp_inner->invalidate_type();
HXDLIN( 517)					if (hx::IsNotNull( this->zpp_inner->space )) {
HXLINE( 517)						this->zpp_inner->space->transmitType(this->zpp_inner,ntype);
            					}
            					else {
HXLINE( 517)						this->zpp_inner->type = ntype;
            					}
            				}
            			}
            		}
HXLINE( 518)		if (hx::IsNotNull( position )) {
HXLINE( 518)			if (position->zpp_inner->weak) {
HXLINE( 522)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = position->zpp_inner;
HXDLIN( 522)				position->zpp_inner->outer = null();
HXDLIN( 522)				position->zpp_inner = null();
HXDLIN( 522)				{
HXLINE( 522)					position->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 522)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = position;
            				}
HXDLIN( 522)				{
HXLINE( 522)					{
HXLINE( 522)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 522)							inner->outer->zpp_inner = null();
HXDLIN( 522)							inner->outer = null();
            						}
HXDLIN( 522)						inner->_isimmutable = null();
HXDLIN( 522)						inner->_validate = null();
HXDLIN( 522)						inner->_invalidate = null();
            					}
HXDLIN( 522)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 522)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 529)		this->zpp_inner_i->insert_cbtype(::zpp_nape::callbacks::ZPP_CbType_obj::ANY_BODY->zpp_inner);
            	}

Dynamic Body_obj::__CreateEmpty() { return new Body_obj; }

void *Body_obj::_hx_vtable = 0;

Dynamic Body_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Body_obj > _hx_result = new Body_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Body_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1e1af07c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1e1af07c;
	} else {
		return inClassId==(int)0x643c1bb3;
	}
}

 ::nape::phys::BodyType Body_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_198_get_type)
            	HX_STACK_THIS(this)
HXLINE( 198)		return ::zpp_nape::phys::ZPP_Body_obj::types->__get(this->zpp_inner->type).StaticCast<  ::nape::phys::BodyType >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_type,return )

 ::nape::phys::BodyType Body_obj::set_type( ::nape::phys::BodyType type){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_200_set_type)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 201)		{
HXLINE( 202)			this->zpp_inner->immutable_midstep(HX_("Body::type",bc,a9,32,ec));
HXLINE( 206)			if (hx::IsNotEq( ::zpp_nape::phys::ZPP_Body_obj::types->__get(this->zpp_inner->type).StaticCast<  ::nape::phys::BodyType >(),type )) {
HXLINE( 210)				HX_VAR( int,ntype);
HXDLIN( 210)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 210)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 210)					::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 210)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 210)				if (hx::IsEq( type,::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 210)					ntype = (int)2;
            				}
            				else {
HXLINE( 210)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 210)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 210)						::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 210)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN( 210)					if (hx::IsEq( type,::zpp_nape::util::ZPP_Flags_obj::BodyType_KINEMATIC )) {
HXLINE( 210)						ntype = (int)3;
            					}
            					else {
HXLINE( 210)						ntype = (int)1;
            					}
            				}
HXLINE( 211)				bool _hx_tmp;
HXDLIN( 211)				if ((ntype == (int)1)) {
HXLINE( 211)					_hx_tmp = hx::IsNotNull( this->zpp_inner->space );
            				}
            				else {
HXLINE( 211)					_hx_tmp = false;
            				}
HXDLIN( 211)				if (_hx_tmp) {
HXLINE( 212)					{
HXLINE( 213)						this->zpp_inner->velx = (int)0;
HXLINE( 214)						this->zpp_inner->vely = (int)0;
            					}
HXLINE( 232)					this->zpp_inner->angvel = (int)0;
            				}
HXLINE( 234)				this->zpp_inner->invalidate_type();
HXLINE( 235)				if (hx::IsNotNull( this->zpp_inner->space )) {
HXLINE( 235)					this->zpp_inner->space->transmitType(this->zpp_inner,ntype);
            				}
            				else {
HXLINE( 236)					this->zpp_inner->type = ntype;
            				}
            			}
            		}
HXLINE( 239)		return ::zpp_nape::phys::ZPP_Body_obj::types->__get(this->zpp_inner->type).StaticCast<  ::nape::phys::BodyType >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_type,return )

bool Body_obj::get_isBullet(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_260_get_isBullet)
            	HX_STACK_THIS(this)
HXLINE( 260)		return this->zpp_inner->bulletEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_isBullet,return )

bool Body_obj::set_isBullet(bool isBullet){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_262_set_isBullet)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(isBullet,"isBullet")
HXLINE( 264)		this->zpp_inner->bulletEnabled = isBullet;
HXLINE( 266)		return this->zpp_inner->bulletEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_isBullet,return )

bool Body_obj::get_disableCCD(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_279_get_disableCCD)
            	HX_STACK_THIS(this)
HXLINE( 279)		return this->zpp_inner->disableCCD;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_disableCCD,return )

bool Body_obj::set_disableCCD(bool disableCCD){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_281_set_disableCCD)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(disableCCD,"disableCCD")
HXLINE( 283)		this->zpp_inner->disableCCD = disableCCD;
HXLINE( 285)		return this->zpp_inner->disableCCD;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_disableCCD,return )

 ::nape::phys::Body Body_obj::integrate(Float deltaTime){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_295_integrate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
HXLINE( 299)		this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXLINE( 303)		if ((deltaTime == (int)0)) {
HXLINE( 303)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 304)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,cur) = this->zpp_inner;
HXLINE( 305)		cur->sweepTime = (int)0;
HXLINE( 306)		cur->sweep_angvel = cur->angvel;
HXLINE( 307)		{
HXLINE( 307)			HX_VARI( Float,delta) = (deltaTime - cur->sweepTime);
HXDLIN( 307)			if ((delta != (int)0)) {
HXLINE( 307)				cur->sweepTime = deltaTime;
HXDLIN( 307)				{
HXLINE( 307)					cur->posx = (cur->posx + (cur->velx * delta));
HXDLIN( 307)					cur->posy = (cur->posy + (cur->vely * delta));
            				}
HXDLIN( 307)				if ((cur->angvel != (int)0)) {
HXLINE( 307)					HX_VARI( Float,dr) = (cur->sweep_angvel * delta);
HXDLIN( 307)					cur->rot = (cur->rot + dr);
HXDLIN( 307)					if (((dr * dr) > ((Float)0.0001))) {
HXLINE( 307)						cur->axisx = ::Math_obj::sin(cur->rot);
HXDLIN( 307)						cur->axisy = ::Math_obj::cos(cur->rot);
            					}
            					else {
HXLINE( 307)						HX_VARI( Float,d2) = (dr * dr);
HXDLIN( 307)						HX_VARI( Float,p) = ((int)1 - (((Float)0.5) * d2));
HXDLIN( 307)						HX_VARI( Float,m) = ((int)1 - ((Float)(d2 * d2) / (Float)(int)8));
HXDLIN( 307)						HX_VARI( Float,nx) = (((p * cur->axisx) + (dr * cur->axisy)) * m);
HXDLIN( 307)						cur->axisy = (((p * cur->axisy) - (dr * cur->axisx)) * m);
HXDLIN( 307)						cur->axisx = nx;
            					}
            				}
            			}
            		}
HXLINE( 308)		{
HXLINE( 308)			{
HXLINE( 308)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = cur->shapes->head;
HXDLIN( 308)				while(hx::IsNotNull( cx_ite )){
HXLINE( 308)					HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXDLIN( 308)					{
HXLINE( 308)						if ((s->type == (int)1)) {
HXLINE( 308)							s->polygon->invalidate_gverts();
HXDLIN( 308)							s->polygon->invalidate_gaxi();
            						}
HXDLIN( 308)						s->invalidate_worldCOM();
            					}
HXDLIN( 308)					cx_ite = cx_ite->next;
            				}
            			}
HXDLIN( 308)			cur->zip_worldCOM = true;
            		}
HXLINE( 309)		{
HXLINE( 309)			cur->zip_axis = true;
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite1,"cx_ite") = cur->shapes->head;
HXDLIN( 309)				while(hx::IsNotNull( cx_ite1 )){
HXLINE( 309)					HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,s1,"s") = cx_ite1->elt;
HXDLIN( 309)					{
HXLINE( 309)						if ((s1->type == (int)1)) {
HXLINE( 309)							s1->polygon->invalidate_gverts();
HXDLIN( 309)							s1->polygon->invalidate_gaxi();
            						}
HXDLIN( 309)						s1->invalidate_worldCOM();
            					}
HXDLIN( 309)					cx_ite1 = cx_ite1->next;
            				}
            			}
HXDLIN( 309)			cur->zip_worldCOM = true;
            		}
HXLINE( 310)		cur->sweepTime = (int)0;
HXLINE( 311)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,integrate,return )

bool Body_obj::isStatic(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_320_isStatic)
            	HX_STACK_THIS(this)
HXLINE( 320)		return (this->zpp_inner->type == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,isStatic,return )

bool Body_obj::isDynamic(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_329_isDynamic)
            	HX_STACK_THIS(this)
HXLINE( 329)		return (this->zpp_inner->type == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,isDynamic,return )

bool Body_obj::isKinematic(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_338_isKinematic)
            	HX_STACK_THIS(this)
HXLINE( 338)		return (this->zpp_inner->type == (int)3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,isKinematic,return )

 ::nape::shape::ShapeList Body_obj::get_shapes(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_350_get_shapes)
            	HX_STACK_THIS(this)
HXLINE( 350)		return this->zpp_inner->wrap_shapes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_shapes,return )

 ::nape::phys::Compound Body_obj::get_compound(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_364_get_compound)
            	HX_STACK_THIS(this)
HXLINE( 364)		if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 364)			return null();
            		}
            		else {
HXLINE( 364)			return this->zpp_inner->compound->outer;
            		}
HXDLIN( 364)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_compound,return )

 ::nape::phys::Compound Body_obj::set_compound( ::nape::phys::Compound compound){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_366_set_compound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(compound,"compound")
HXLINE( 368)		 ::nape::phys::Compound _hx_tmp;
HXDLIN( 368)		if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 368)			_hx_tmp = null();
            		}
            		else {
HXLINE( 368)			_hx_tmp = this->zpp_inner->compound->outer;
            		}
HXDLIN( 368)		if (hx::IsNotEq( _hx_tmp,compound )) {
HXLINE( 369)			 ::nape::phys::Compound _hx_tmp1;
HXDLIN( 369)			if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 369)				_hx_tmp1 = null();
            			}
            			else {
HXLINE( 369)				_hx_tmp1 = this->zpp_inner->compound->outer;
            			}
HXDLIN( 369)			if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 369)				 ::nape::phys::Compound _this;
HXDLIN( 369)				if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 369)					_this = null();
            				}
            				else {
HXLINE( 369)					_this = this->zpp_inner->compound->outer;
            				}
HXDLIN( 369)				_this->zpp_inner->wrap_bodies->remove(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 370)			if (hx::IsNotNull( compound )) {
HXLINE( 370)				HX_VARI_NAME(  ::nape::phys::BodyList,_this1,"_this") = compound->zpp_inner->wrap_bodies;
HXDLIN( 370)				if (_this1->zpp_inner->reverse_flag) {
HXLINE( 370)					_this1->push(hx::ObjectPtr<OBJ_>(this));
            				}
            				else {
HXLINE( 370)					_this1->unshift(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE( 373)		if (hx::IsNull( this->zpp_inner->compound )) {
HXLINE( 373)			return null();
            		}
            		else {
HXLINE( 373)			return this->zpp_inner->compound->outer;
            		}
HXDLIN( 373)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_compound,return )

 ::nape::space::Space Body_obj::get_space(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_386_get_space)
            	HX_STACK_THIS(this)
HXLINE( 386)		if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 386)			return null();
            		}
            		else {
HXLINE( 386)			return this->zpp_inner->space->outer;
            		}
HXDLIN( 386)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_space,return )

 ::nape::space::Space Body_obj::set_space( ::nape::space::Space space){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_388_set_space)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(space,"space")
HXLINE( 389)		{
HXLINE( 393)			this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXLINE( 397)			 ::nape::space::Space _hx_tmp;
HXDLIN( 397)			if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 397)				_hx_tmp = null();
            			}
            			else {
HXLINE( 397)				_hx_tmp = this->zpp_inner->space->outer;
            			}
HXDLIN( 397)			if (hx::IsNotEq( _hx_tmp,space )) {
HXLINE( 398)				 ::nape::space::Space _hx_tmp1;
HXDLIN( 398)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 398)					_hx_tmp1 = null();
            				}
            				else {
HXLINE( 398)					_hx_tmp1 = this->zpp_inner->space->outer;
            				}
HXDLIN( 398)				if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 398)					this->zpp_inner->component->woken = false;
            				}
HXLINE( 399)				 ::nape::space::Space _hx_tmp2;
HXDLIN( 399)				if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 399)					_hx_tmp2 = null();
            				}
            				else {
HXLINE( 399)					_hx_tmp2 = this->zpp_inner->space->outer;
            				}
HXDLIN( 399)				if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE( 399)					 ::nape::space::Space _this;
HXDLIN( 399)					if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 399)						_this = null();
            					}
            					else {
HXLINE( 399)						_this = this->zpp_inner->space->outer;
            					}
HXDLIN( 399)					_this->zpp_inner->wrap_bodies->remove(hx::ObjectPtr<OBJ_>(this));
            				}
HXLINE( 400)				if (hx::IsNotNull( space )) {
HXLINE( 400)					HX_VARI_NAME(  ::nape::phys::BodyList,_this1,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN( 400)					if (_this1->zpp_inner->reverse_flag) {
HXLINE( 400)						_this1->push(hx::ObjectPtr<OBJ_>(this));
            					}
            					else {
HXLINE( 400)						_this1->unshift(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE( 403)		if (hx::IsNull( this->zpp_inner->space )) {
HXLINE( 403)			return null();
            		}
            		else {
HXLINE( 403)			return this->zpp_inner->space->outer;
            		}
HXDLIN( 403)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_space,return )

 ::nape::dynamics::ArbiterList Body_obj::get_arbiters(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_412_get_arbiters)
            	HX_STACK_THIS(this)
HXLINE( 413)		if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE( 413)			this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            		}
HXLINE( 414)		return this->zpp_inner->wrap_arbiters;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_arbiters,return )

bool Body_obj::get_isSleeping(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_432_get_isSleeping)
            	HX_STACK_THIS(this)
HXLINE( 432)		return this->zpp_inner->component->sleeping;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_isSleeping,return )

 ::nape::constraint::ConstraintList Body_obj::get_constraints(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_443_get_constraints)
            	HX_STACK_THIS(this)
HXLINE( 444)		if (hx::IsNull( this->zpp_inner->wrap_constraints )) {
HXLINE( 444)			this->zpp_inner->wrap_constraints = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->zpp_inner->constraints,true);
            		}
HXLINE( 445)		return this->zpp_inner->wrap_constraints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_constraints,return )

 ::nape::phys::Body Body_obj::copy(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_546_copy)
            	HX_STACK_THIS(this)
HXLINE( 546)		return this->zpp_inner->copy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,copy,return )

 ::nape::geom::Vec2 Body_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_564_get_position)
            	HX_STACK_THIS(this)
HXLINE( 565)		if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE( 565)			this->zpp_inner->setupPosition();
            		}
HXLINE( 566)		return this->zpp_inner->wrap_pos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_position,return )

 ::nape::geom::Vec2 Body_obj::set_position( ::nape::geom::Vec2 position){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_568_set_position)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
HXLINE( 578)		{
HXLINE( 578)			if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE( 578)				this->zpp_inner->setupPosition();
            			}
HXDLIN( 578)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_pos;
HXDLIN( 578)			{
HXLINE( 578)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = position->zpp_inner;
HXDLIN( 578)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 578)					_this1->_validate();
            				}
            			}
HXDLIN( 578)			HX_VARI( Float,x) = position->zpp_inner->x;
HXDLIN( 578)			{
HXLINE( 578)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = position->zpp_inner;
HXDLIN( 578)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 578)					_this2->_validate();
            				}
            			}
HXDLIN( 578)			HX_VARI( Float,y) = position->zpp_inner->y;
HXDLIN( 578)			bool _hx_tmp;
HXDLIN( 578)			{
HXLINE( 578)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 578)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 578)					_this3->_validate();
            				}
            			}
HXDLIN( 578)			if ((_this->zpp_inner->x == x)) {
HXLINE( 578)				{
HXLINE( 578)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 578)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 578)						_this4->_validate();
            					}
            				}
HXDLIN( 578)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 578)				_hx_tmp = false;
            			}
HXDLIN( 578)			if (!(_hx_tmp)) {
HXLINE( 578)				{
HXLINE( 578)					_this->zpp_inner->x = x;
HXDLIN( 578)					_this->zpp_inner->y = y;
            				}
HXDLIN( 578)				{
HXLINE( 578)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 578)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 578)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 578)			if (position->zpp_inner->weak) {
HXLINE( 578)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = position->zpp_inner;
HXDLIN( 578)				position->zpp_inner->outer = null();
HXDLIN( 578)				position->zpp_inner = null();
HXDLIN( 578)				{
HXLINE( 578)					position->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 578)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = position;
            				}
HXDLIN( 578)				{
HXLINE( 578)					{
HXLINE( 578)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 578)							inner->outer->zpp_inner = null();
HXDLIN( 578)							inner->outer = null();
            						}
HXDLIN( 578)						inner->_isimmutable = null();
HXDLIN( 578)						inner->_validate = null();
HXDLIN( 578)						inner->_invalidate = null();
            					}
HXDLIN( 578)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 578)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 580)		if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE( 580)			this->zpp_inner->setupPosition();
            		}
HXDLIN( 580)		return this->zpp_inner->wrap_pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_position,return )

 ::nape::geom::Vec2 Body_obj::get_velocity(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_593_get_velocity)
            	HX_STACK_THIS(this)
HXLINE( 594)		if (hx::IsNull( this->zpp_inner->wrap_vel )) {
HXLINE( 594)			this->zpp_inner->setupVelocity();
            		}
HXLINE( 595)		return this->zpp_inner->wrap_vel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_velocity,return )

 ::nape::geom::Vec2 Body_obj::set_velocity( ::nape::geom::Vec2 velocity){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_597_set_velocity)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(velocity,"velocity")
HXLINE( 607)		{
HXLINE( 607)			if (hx::IsNull( this->zpp_inner->wrap_vel )) {
HXLINE( 607)				this->zpp_inner->setupVelocity();
            			}
HXDLIN( 607)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_vel;
HXDLIN( 607)			{
HXLINE( 607)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = velocity->zpp_inner;
HXDLIN( 607)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 607)					_this1->_validate();
            				}
            			}
HXDLIN( 607)			HX_VARI( Float,x) = velocity->zpp_inner->x;
HXDLIN( 607)			{
HXLINE( 607)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = velocity->zpp_inner;
HXDLIN( 607)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 607)					_this2->_validate();
            				}
            			}
HXDLIN( 607)			HX_VARI( Float,y) = velocity->zpp_inner->y;
HXDLIN( 607)			bool _hx_tmp;
HXDLIN( 607)			{
HXLINE( 607)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 607)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 607)					_this3->_validate();
            				}
            			}
HXDLIN( 607)			if ((_this->zpp_inner->x == x)) {
HXLINE( 607)				{
HXLINE( 607)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 607)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 607)						_this4->_validate();
            					}
            				}
HXDLIN( 607)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 607)				_hx_tmp = false;
            			}
HXDLIN( 607)			if (!(_hx_tmp)) {
HXLINE( 607)				{
HXLINE( 607)					_this->zpp_inner->x = x;
HXDLIN( 607)					_this->zpp_inner->y = y;
            				}
HXDLIN( 607)				{
HXLINE( 607)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 607)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 607)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 607)			if (velocity->zpp_inner->weak) {
HXLINE( 607)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = velocity->zpp_inner;
HXDLIN( 607)				velocity->zpp_inner->outer = null();
HXDLIN( 607)				velocity->zpp_inner = null();
HXDLIN( 607)				{
HXLINE( 607)					velocity->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 607)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = velocity;
            				}
HXDLIN( 607)				{
HXLINE( 607)					{
HXLINE( 607)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 607)							inner->outer->zpp_inner = null();
HXDLIN( 607)							inner->outer = null();
            						}
HXDLIN( 607)						inner->_isimmutable = null();
HXDLIN( 607)						inner->_validate = null();
HXDLIN( 607)						inner->_invalidate = null();
            					}
HXDLIN( 607)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 607)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 609)		if (hx::IsNull( this->zpp_inner->wrap_vel )) {
HXLINE( 609)			this->zpp_inner->setupVelocity();
            		}
HXDLIN( 609)		return this->zpp_inner->wrap_vel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_velocity,return )

 ::nape::phys::Body Body_obj::setVelocityFromTarget( ::nape::geom::Vec2 targetPosition,Float targetRotation,Float deltaTime){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_628_setVelocityFromTarget)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(targetPosition,"targetPosition")
            	HX_STACK_ARG(targetRotation,"targetRotation")
            	HX_STACK_ARG(deltaTime,"deltaTime")
HXLINE( 638)		HX_VARI( Float,idt) = ((Float)(int)1 / (Float)deltaTime);
HXLINE( 639)		{
HXLINE( 639)			if (hx::IsNull( this->zpp_inner->wrap_vel )) {
HXLINE( 639)				this->zpp_inner->setupVelocity();
            			}
HXDLIN( 639)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_vel;
HXDLIN( 639)			if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE( 639)				this->zpp_inner->setupPosition();
            			}
HXDLIN( 639)			HX_VARI(  ::nape::geom::Vec2,vector) = targetPosition->sub(this->zpp_inner->wrap_pos,true)->muleq(idt);
HXDLIN( 639)			{
HXLINE( 639)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = vector->zpp_inner;
HXDLIN( 639)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 639)					_this1->_validate();
            				}
            			}
HXDLIN( 639)			HX_VARI( Float,x) = vector->zpp_inner->x;
HXDLIN( 639)			{
HXLINE( 639)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = vector->zpp_inner;
HXDLIN( 639)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 639)					_this2->_validate();
            				}
            			}
HXDLIN( 639)			HX_VARI( Float,y) = vector->zpp_inner->y;
HXDLIN( 639)			bool _hx_tmp;
HXDLIN( 639)			{
HXLINE( 639)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 639)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 639)					_this3->_validate();
            				}
            			}
HXDLIN( 639)			if ((_this->zpp_inner->x == x)) {
HXLINE( 639)				{
HXLINE( 639)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 639)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 639)						_this4->_validate();
            					}
            				}
HXDLIN( 639)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 639)				_hx_tmp = false;
            			}
HXDLIN( 639)			if (!(_hx_tmp)) {
HXLINE( 639)				{
HXLINE( 639)					_this->zpp_inner->x = x;
HXDLIN( 639)					_this->zpp_inner->y = y;
            				}
HXDLIN( 639)				{
HXLINE( 639)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 639)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 639)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 639)			if (vector->zpp_inner->weak) {
HXLINE( 639)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = vector->zpp_inner;
HXDLIN( 639)				vector->zpp_inner->outer = null();
HXDLIN( 639)				vector->zpp_inner = null();
HXDLIN( 639)				{
HXLINE( 639)					vector->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 639)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = vector;
            				}
HXDLIN( 639)				{
HXLINE( 639)					{
HXLINE( 639)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 639)							inner->outer->zpp_inner = null();
HXDLIN( 639)							inner->outer = null();
            						}
HXDLIN( 639)						inner->_isimmutable = null();
HXDLIN( 639)						inner->_validate = null();
HXDLIN( 639)						inner->_invalidate = null();
            					}
HXDLIN( 639)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 639)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 640)		{
HXLINE( 640)			HX_VARI( Float,angularVel) = ((targetRotation - this->zpp_inner->rot) * idt);
HXDLIN( 640)			if ((this->zpp_inner->angvel != angularVel)) {
HXLINE( 640)				this->zpp_inner->angvel = angularVel;
HXDLIN( 640)				this->zpp_inner->wake();
            			}
            		}
HXLINE( 641)		if (targetPosition->zpp_inner->weak) {
HXLINE( 645)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = targetPosition->zpp_inner;
HXDLIN( 645)			targetPosition->zpp_inner->outer = null();
HXDLIN( 645)			targetPosition->zpp_inner = null();
HXDLIN( 645)			{
HXLINE( 645)				targetPosition->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 645)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = targetPosition;
            			}
HXDLIN( 645)			{
HXLINE( 645)				{
HXLINE( 645)					if (hx::IsNotNull( inner1->outer )) {
HXLINE( 645)						inner1->outer->zpp_inner = null();
HXDLIN( 645)						inner1->outer = null();
            					}
HXDLIN( 645)					inner1->_isimmutable = null();
HXDLIN( 645)					inner1->_validate = null();
HXDLIN( 645)					inner1->_invalidate = null();
            				}
HXDLIN( 645)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 645)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE( 652)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Body_obj,setVelocityFromTarget,return )

 ::nape::geom::Vec2 Body_obj::get_kinematicVel(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_668_get_kinematicVel)
            	HX_STACK_THIS(this)
HXLINE( 669)		if (hx::IsNull( this->zpp_inner->wrap_kinvel )) {
HXLINE( 669)			this->zpp_inner->setupkinvel();
            		}
HXLINE( 670)		return this->zpp_inner->wrap_kinvel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_kinematicVel,return )

 ::nape::geom::Vec2 Body_obj::set_kinematicVel( ::nape::geom::Vec2 kinematicVel){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_672_set_kinematicVel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(kinematicVel,"kinematicVel")
HXLINE( 682)		{
HXLINE( 682)			if (hx::IsNull( this->zpp_inner->wrap_kinvel )) {
HXLINE( 682)				this->zpp_inner->setupkinvel();
            			}
HXDLIN( 682)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_kinvel;
HXDLIN( 682)			{
HXLINE( 682)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = kinematicVel->zpp_inner;
HXDLIN( 682)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 682)					_this1->_validate();
            				}
            			}
HXDLIN( 682)			HX_VARI( Float,x) = kinematicVel->zpp_inner->x;
HXDLIN( 682)			{
HXLINE( 682)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = kinematicVel->zpp_inner;
HXDLIN( 682)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 682)					_this2->_validate();
            				}
            			}
HXDLIN( 682)			HX_VARI( Float,y) = kinematicVel->zpp_inner->y;
HXDLIN( 682)			bool _hx_tmp;
HXDLIN( 682)			{
HXLINE( 682)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 682)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 682)					_this3->_validate();
            				}
            			}
HXDLIN( 682)			if ((_this->zpp_inner->x == x)) {
HXLINE( 682)				{
HXLINE( 682)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 682)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 682)						_this4->_validate();
            					}
            				}
HXDLIN( 682)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 682)				_hx_tmp = false;
            			}
HXDLIN( 682)			if (!(_hx_tmp)) {
HXLINE( 682)				{
HXLINE( 682)					_this->zpp_inner->x = x;
HXDLIN( 682)					_this->zpp_inner->y = y;
            				}
HXDLIN( 682)				{
HXLINE( 682)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 682)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 682)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 682)			if (kinematicVel->zpp_inner->weak) {
HXLINE( 682)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = kinematicVel->zpp_inner;
HXDLIN( 682)				kinematicVel->zpp_inner->outer = null();
HXDLIN( 682)				kinematicVel->zpp_inner = null();
HXDLIN( 682)				{
HXLINE( 682)					kinematicVel->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 682)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = kinematicVel;
            				}
HXDLIN( 682)				{
HXLINE( 682)					{
HXLINE( 682)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 682)							inner->outer->zpp_inner = null();
HXDLIN( 682)							inner->outer = null();
            						}
HXDLIN( 682)						inner->_isimmutable = null();
HXDLIN( 682)						inner->_validate = null();
HXDLIN( 682)						inner->_invalidate = null();
            					}
HXDLIN( 682)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 682)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 684)		if (hx::IsNull( this->zpp_inner->wrap_kinvel )) {
HXLINE( 684)			this->zpp_inner->setupkinvel();
            		}
HXDLIN( 684)		return this->zpp_inner->wrap_kinvel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_kinematicVel,return )

 ::nape::geom::Vec2 Body_obj::get_surfaceVel(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_700_get_surfaceVel)
            	HX_STACK_THIS(this)
HXLINE( 701)		if (hx::IsNull( this->zpp_inner->wrap_svel )) {
HXLINE( 701)			this->zpp_inner->setupsvel();
            		}
HXLINE( 702)		return this->zpp_inner->wrap_svel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_surfaceVel,return )

 ::nape::geom::Vec2 Body_obj::set_surfaceVel( ::nape::geom::Vec2 surfaceVel){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_704_set_surfaceVel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(surfaceVel,"surfaceVel")
HXLINE( 714)		{
HXLINE( 714)			if (hx::IsNull( this->zpp_inner->wrap_svel )) {
HXLINE( 714)				this->zpp_inner->setupsvel();
            			}
HXDLIN( 714)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_svel;
HXDLIN( 714)			{
HXLINE( 714)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = surfaceVel->zpp_inner;
HXDLIN( 714)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 714)					_this1->_validate();
            				}
            			}
HXDLIN( 714)			HX_VARI( Float,x) = surfaceVel->zpp_inner->x;
HXDLIN( 714)			{
HXLINE( 714)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = surfaceVel->zpp_inner;
HXDLIN( 714)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 714)					_this2->_validate();
            				}
            			}
HXDLIN( 714)			HX_VARI( Float,y) = surfaceVel->zpp_inner->y;
HXDLIN( 714)			bool _hx_tmp;
HXDLIN( 714)			{
HXLINE( 714)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 714)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 714)					_this3->_validate();
            				}
            			}
HXDLIN( 714)			if ((_this->zpp_inner->x == x)) {
HXLINE( 714)				{
HXLINE( 714)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 714)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 714)						_this4->_validate();
            					}
            				}
HXDLIN( 714)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 714)				_hx_tmp = false;
            			}
HXDLIN( 714)			if (!(_hx_tmp)) {
HXLINE( 714)				{
HXLINE( 714)					_this->zpp_inner->x = x;
HXDLIN( 714)					_this->zpp_inner->y = y;
            				}
HXDLIN( 714)				{
HXLINE( 714)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 714)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 714)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 714)			if (surfaceVel->zpp_inner->weak) {
HXLINE( 714)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = surfaceVel->zpp_inner;
HXDLIN( 714)				surfaceVel->zpp_inner->outer = null();
HXDLIN( 714)				surfaceVel->zpp_inner = null();
HXDLIN( 714)				{
HXLINE( 714)					surfaceVel->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 714)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = surfaceVel;
            				}
HXDLIN( 714)				{
HXLINE( 714)					{
HXLINE( 714)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 714)							inner->outer->zpp_inner = null();
HXDLIN( 714)							inner->outer = null();
            						}
HXDLIN( 714)						inner->_isimmutable = null();
HXDLIN( 714)						inner->_validate = null();
HXDLIN( 714)						inner->_invalidate = null();
            					}
HXDLIN( 714)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 714)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 716)		if (hx::IsNull( this->zpp_inner->wrap_svel )) {
HXLINE( 716)			this->zpp_inner->setupsvel();
            		}
HXDLIN( 716)		return this->zpp_inner->wrap_svel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_surfaceVel,return )

 ::nape::geom::Vec2 Body_obj::get_force(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_729_get_force)
            	HX_STACK_THIS(this)
HXLINE( 730)		if (hx::IsNull( this->zpp_inner->wrap_force )) {
HXLINE( 730)			this->zpp_inner->setupForce();
            		}
HXLINE( 731)		return this->zpp_inner->wrap_force;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_force,return )

 ::nape::geom::Vec2 Body_obj::set_force( ::nape::geom::Vec2 force){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_733_set_force)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(force,"force")
HXLINE( 743)		{
HXLINE( 743)			if (hx::IsNull( this->zpp_inner->wrap_force )) {
HXLINE( 743)				this->zpp_inner->setupForce();
            			}
HXDLIN( 743)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_force;
HXDLIN( 743)			{
HXLINE( 743)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = force->zpp_inner;
HXDLIN( 743)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 743)					_this1->_validate();
            				}
            			}
HXDLIN( 743)			HX_VARI( Float,x) = force->zpp_inner->x;
HXDLIN( 743)			{
HXLINE( 743)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = force->zpp_inner;
HXDLIN( 743)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 743)					_this2->_validate();
            				}
            			}
HXDLIN( 743)			HX_VARI( Float,y) = force->zpp_inner->y;
HXDLIN( 743)			bool _hx_tmp;
HXDLIN( 743)			{
HXLINE( 743)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 743)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 743)					_this3->_validate();
            				}
            			}
HXDLIN( 743)			if ((_this->zpp_inner->x == x)) {
HXLINE( 743)				{
HXLINE( 743)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 743)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 743)						_this4->_validate();
            					}
            				}
HXDLIN( 743)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 743)				_hx_tmp = false;
            			}
HXDLIN( 743)			if (!(_hx_tmp)) {
HXLINE( 743)				{
HXLINE( 743)					_this->zpp_inner->x = x;
HXDLIN( 743)					_this->zpp_inner->y = y;
            				}
HXDLIN( 743)				{
HXLINE( 743)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 743)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 743)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 743)			if (force->zpp_inner->weak) {
HXLINE( 743)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = force->zpp_inner;
HXDLIN( 743)				force->zpp_inner->outer = null();
HXDLIN( 743)				force->zpp_inner = null();
HXDLIN( 743)				{
HXLINE( 743)					force->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 743)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = force;
            				}
HXDLIN( 743)				{
HXLINE( 743)					{
HXLINE( 743)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 743)							inner->outer->zpp_inner = null();
HXDLIN( 743)							inner->outer = null();
            						}
HXDLIN( 743)						inner->_isimmutable = null();
HXDLIN( 743)						inner->_validate = null();
HXDLIN( 743)						inner->_invalidate = null();
            					}
HXDLIN( 743)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 743)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 745)		if (hx::IsNull( this->zpp_inner->wrap_force )) {
HXLINE( 745)			this->zpp_inner->setupForce();
            		}
HXDLIN( 745)		return this->zpp_inner->wrap_force;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_force,return )

 ::nape::geom::Vec3 Body_obj::get_constraintVelocity(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_755_get_constraintVelocity)
            	HX_STACK_THIS(this)
HXLINE( 756)		if (hx::IsNull( this->zpp_inner->wrapcvel )) {
HXLINE( 756)			this->zpp_inner->setup_cvel();
            		}
HXLINE( 757)		return this->zpp_inner->wrapcvel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_constraintVelocity,return )

Float Body_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_774_get_rotation)
            	HX_STACK_THIS(this)
HXLINE( 774)		return this->zpp_inner->rot;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_rotation,return )

Float Body_obj::set_rotation(Float rotation){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_776_set_rotation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rotation,"rotation")
HXLINE( 777)		{
HXLINE( 778)			this->zpp_inner->immutable_midstep(HX_("Body::rotation",40,9d,24,6b));
HXLINE( 785)			if ((this->zpp_inner->rot != rotation)) {
HXLINE( 789)				this->zpp_inner->rot = rotation;
HXLINE( 790)				{
HXLINE( 790)					HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->zpp_inner;
HXDLIN( 790)					_this->zip_axis = true;
HXDLIN( 790)					{
HXLINE( 790)						HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = _this->shapes->head;
HXDLIN( 790)						while(hx::IsNotNull( cx_ite )){
HXLINE( 790)							HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXDLIN( 790)							{
HXLINE( 790)								if ((s->type == (int)1)) {
HXLINE( 790)									s->polygon->invalidate_gverts();
HXDLIN( 790)									s->polygon->invalidate_gaxi();
            								}
HXDLIN( 790)								s->invalidate_worldCOM();
            							}
HXDLIN( 790)							cx_ite = cx_ite->next;
            						}
            					}
HXDLIN( 790)					_this->zip_worldCOM = true;
            				}
HXLINE( 791)				this->zpp_inner->wake();
            			}
            		}
HXLINE( 794)		return this->zpp_inner->rot;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_rotation,return )

Float Body_obj::get_angularVel(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_806_get_angularVel)
            	HX_STACK_THIS(this)
HXLINE( 806)		return this->zpp_inner->angvel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_angularVel,return )

Float Body_obj::set_angularVel(Float angularVel){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_808_set_angularVel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(angularVel,"angularVel")
HXLINE( 813)		if ((this->zpp_inner->angvel != angularVel)) {
HXLINE( 820)			this->zpp_inner->angvel = angularVel;
HXLINE( 821)			this->zpp_inner->wake();
            		}
HXLINE( 824)		return this->zpp_inner->angvel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_angularVel,return )

Float Body_obj::get_kinAngVel(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_841_get_kinAngVel)
            	HX_STACK_THIS(this)
HXLINE( 841)		return this->zpp_inner->kinangvel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_kinAngVel,return )

Float Body_obj::set_kinAngVel(Float kinAngVel){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_843_set_kinAngVel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(kinAngVel,"kinAngVel")
HXLINE( 848)		if ((this->zpp_inner->kinangvel != kinAngVel)) {
HXLINE( 852)			this->zpp_inner->kinangvel = kinAngVel;
HXLINE( 853)			this->zpp_inner->wake();
            		}
HXLINE( 856)		return this->zpp_inner->kinangvel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_kinAngVel,return )

Float Body_obj::get_torque(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_870_get_torque)
            	HX_STACK_THIS(this)
HXLINE( 870)		return this->zpp_inner->torque;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_torque,return )

Float Body_obj::set_torque(Float torque){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_872_set_torque)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(torque,"torque")
HXLINE( 883)		if ((this->zpp_inner->torque != torque)) {
HXLINE( 884)			this->zpp_inner->torque = torque;
HXLINE( 885)			this->zpp_inner->wake();
            		}
HXLINE( 888)		return this->zpp_inner->torque;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_torque,return )

 ::nape::geom::AABB Body_obj::get_bounds(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_905_get_bounds)
            	HX_STACK_THIS(this)
HXLINE( 905)		return this->zpp_inner->aabb->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_bounds,return )

bool Body_obj::get_allowMovement(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_919_get_allowMovement)
            	HX_STACK_THIS(this)
HXLINE( 919)		return !(this->zpp_inner->nomove);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_allowMovement,return )

bool Body_obj::set_allowMovement(bool allowMovement){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_921_set_allowMovement)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(allowMovement,"allowMovement")
HXLINE( 922)		{
HXLINE( 923)			 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->zpp_inner;
HXDLIN( 923)			_hx_tmp->immutable_midstep((HX_("Body::",02,8e,7d,8f) + ::Std_obj::string(allowMovement)));
HXLINE( 924)			if ((!(this->zpp_inner->nomove) != allowMovement)) {
HXLINE( 925)				this->zpp_inner->nomove = !(allowMovement);
HXLINE( 926)				this->zpp_inner->invalidate_mass();
            			}
            		}
HXLINE( 929)		return !(this->zpp_inner->nomove);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_allowMovement,return )

bool Body_obj::get_allowRotation(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_943_get_allowRotation)
            	HX_STACK_THIS(this)
HXLINE( 943)		return !(this->zpp_inner->norotate);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_allowRotation,return )

bool Body_obj::set_allowRotation(bool allowRotation){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_945_set_allowRotation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(allowRotation,"allowRotation")
HXLINE( 946)		{
HXLINE( 947)			 ::zpp_nape::phys::ZPP_Body _hx_tmp = this->zpp_inner;
HXDLIN( 947)			_hx_tmp->immutable_midstep((HX_("Body::",02,8e,7d,8f) + ::Std_obj::string(allowRotation)));
HXLINE( 948)			if ((!(this->zpp_inner->norotate) != allowRotation)) {
HXLINE( 949)				this->zpp_inner->norotate = !(allowRotation);
HXLINE( 950)				this->zpp_inner->invalidate_inertia();
            			}
            		}
HXLINE( 953)		return !(this->zpp_inner->norotate);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_allowRotation,return )

 ::nape::phys::MassMode Body_obj::get_massMode(){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_967_get_massMode)
            	HX_STACK_THIS(this)
HXLINE( 967)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT )) {
HXLINE( 967)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 967)			::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT =  ::nape::phys::MassMode_obj::__alloc( HX_CTX );
HXDLIN( 967)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 967)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::MassMode_FIXED )) {
HXLINE( 967)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 967)			::zpp_nape::util::ZPP_Flags_obj::MassMode_FIXED =  ::nape::phys::MassMode_obj::__alloc( HX_CTX );
HXDLIN( 967)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 967)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT)->init(1,::zpp_nape::util::ZPP_Flags_obj::MassMode_FIXED)->__get(this->zpp_inner->massMode).StaticCast<  ::nape::phys::MassMode >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_massMode,return )

 ::nape::phys::MassMode Body_obj::set_massMode( ::nape::phys::MassMode massMode){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_969_set_massMode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(massMode,"massMode")
HXLINE( 970)		{
HXLINE( 971)			this->zpp_inner->immutable_midstep(HX_("Body::massMode",79,2a,14,e4));
HXLINE( 978)			int _hx_tmp;
HXDLIN( 978)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT )) {
HXLINE( 978)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 978)				::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT =  ::nape::phys::MassMode_obj::__alloc( HX_CTX );
HXDLIN( 978)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 978)			if (hx::IsEq( massMode,::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT )) {
HXLINE( 978)				_hx_tmp = (int)0;
            			}
            			else {
HXLINE( 978)				_hx_tmp = (int)1;
            			}
HXDLIN( 978)			this->zpp_inner->massMode = _hx_tmp;
HXLINE( 979)			this->zpp_inner->invalidate_mass();
            		}
HXLINE( 981)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT )) {
HXLINE( 981)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 981)			::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT =  ::nape::phys::MassMode_obj::__alloc( HX_CTX );
HXDLIN( 981)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 981)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::MassMode_FIXED )) {
HXLINE( 981)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 981)			::zpp_nape::util::ZPP_Flags_obj::MassMode_FIXED =  ::nape::phys::MassMode_obj::__alloc( HX_CTX );
HXDLIN( 981)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 981)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::zpp_nape::util::ZPP_Flags_obj::MassMode_DEFAULT)->init(1,::zpp_nape::util::ZPP_Flags_obj::MassMode_FIXED)->__get(this->zpp_inner->massMode).StaticCast<  ::nape::phys::MassMode >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_massMode,return )

Float Body_obj::get_constraintMass(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_992_get_constraintMass)
            	HX_STACK_THIS(this)
HXLINE( 993)		if (!(this->zpp_inner->world)) {
HXLINE( 993)			this->zpp_inner->validate_mass();
            		}
HXLINE( 994)		return this->zpp_inner->smass;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_constraintMass,return )

Float Body_obj::get_mass(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1010_get_mass)
            	HX_STACK_THIS(this)
HXLINE(1014)		this->zpp_inner->validate_mass();
HXLINE(1018)		return this->zpp_inner->cmass;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_mass,return )

Float Body_obj::set_mass(Float mass){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1020_set_mass)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mass,"mass")
HXLINE(1021)		{
HXLINE(1022)			this->zpp_inner->immutable_midstep(HX_("Body::mass",f6,f7,7f,e7));
HXLINE(1031)			this->zpp_inner->massMode = (int)1;
HXLINE(1032)			this->zpp_inner->cmass = mass;
HXLINE(1033)			this->zpp_inner->invalidate_mass();
            		}
HXLINE(1035)		this->zpp_inner->validate_mass();
HXDLIN(1035)		return this->zpp_inner->cmass;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_mass,return )

 ::nape::phys::GravMassMode Body_obj::get_gravMassMode(){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1047_get_gravMassMode)
            	HX_STACK_THIS(this)
HXLINE(1047)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT )) {
HXLINE(1047)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1047)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1047)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1047)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED )) {
HXLINE(1047)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1047)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1047)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1047)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED )) {
HXLINE(1047)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1047)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1047)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1047)		return ::Array_obj< ::Dynamic>::__new(3)->init(0,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT)->init(1,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED)->init(2,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED)->__get(this->zpp_inner->massMode).StaticCast<  ::nape::phys::GravMassMode >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_gravMassMode,return )

 ::nape::phys::GravMassMode Body_obj::set_gravMassMode( ::nape::phys::GravMassMode gravMassMode){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1049_set_gravMassMode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gravMassMode,"gravMassMode")
HXLINE(1050)		{
HXLINE(1051)			this->zpp_inner->immutable_midstep(HX_("Body::gravMassMode",79,bf,d1,f1));
HXLINE(1058)			int _hx_tmp;
HXDLIN(1058)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED )) {
HXLINE(1058)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1058)				::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1058)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN(1058)			if (hx::IsEq( gravMassMode,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED )) {
HXLINE(1058)				_hx_tmp = (int)2;
            			}
            			else {
HXLINE(1058)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT )) {
HXLINE(1058)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1058)					::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1058)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN(1058)				if (hx::IsEq( gravMassMode,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT )) {
HXLINE(1058)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(1058)					_hx_tmp = (int)1;
            				}
            			}
HXDLIN(1058)			this->zpp_inner->gravMassMode = _hx_tmp;
HXLINE(1059)			this->zpp_inner->invalidate_gravMass();
            		}
HXLINE(1061)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT )) {
HXLINE(1061)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1061)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1061)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1061)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED )) {
HXLINE(1061)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1061)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1061)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1061)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED )) {
HXLINE(1061)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1061)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN(1061)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1061)		return ::Array_obj< ::Dynamic>::__new(3)->init(0,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT)->init(1,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED)->init(2,::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED)->__get(this->zpp_inner->massMode).StaticCast<  ::nape::phys::GravMassMode >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_gravMassMode,return )

Float Body_obj::get_gravMass(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1072_get_gravMass)
            	HX_STACK_THIS(this)
HXLINE(1076)		this->zpp_inner->validate_gravMass();
HXLINE(1082)		return this->zpp_inner->gravMass;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_gravMass,return )

Float Body_obj::set_gravMass(Float gravMass){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1084_set_gravMass)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gravMass,"gravMass")
HXLINE(1085)		{
HXLINE(1086)			this->zpp_inner->immutable_midstep(HX_("Body::gravMass",f6,0c,8f,d7));
HXLINE(1093)			this->zpp_inner->gravMassMode = (int)1;
HXLINE(1094)			this->zpp_inner->gravMass = gravMass;
HXLINE(1095)			this->zpp_inner->invalidate_gravMass();
            		}
HXLINE(1097)		this->zpp_inner->validate_gravMass();
HXDLIN(1097)		return this->zpp_inner->gravMass;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_gravMass,return )

Float Body_obj::get_gravMassScale(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1109_get_gravMassScale)
            	HX_STACK_THIS(this)
HXLINE(1110)		this->zpp_inner->validate_gravMassScale();
HXLINE(1116)		return this->zpp_inner->gravMassScale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_gravMassScale,return )

Float Body_obj::set_gravMassScale(Float gravMassScale){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1118_set_gravMassScale)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gravMassScale,"gravMassScale")
HXLINE(1119)		{
HXLINE(1120)			this->zpp_inner->immutable_midstep(HX_("Body::gravMassScale",b4,75,2c,12));
HXLINE(1127)			this->zpp_inner->gravMassMode = (int)2;
HXLINE(1128)			this->zpp_inner->gravMassScale = gravMassScale;
HXLINE(1129)			this->zpp_inner->invalidate_gravMassScale();
            		}
HXLINE(1131)		this->zpp_inner->validate_gravMassScale();
HXDLIN(1131)		return this->zpp_inner->gravMassScale;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_gravMassScale,return )

 ::nape::phys::InertiaMode Body_obj::get_inertiaMode(){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1143_get_inertiaMode)
            	HX_STACK_THIS(this)
HXLINE(1143)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InertiaMode_DEFAULT )) {
HXLINE(1143)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1143)			::zpp_nape::util::ZPP_Flags_obj::InertiaMode_DEFAULT =  ::nape::phys::InertiaMode_obj::__alloc( HX_CTX );
HXDLIN(1143)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1143)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED )) {
HXLINE(1143)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1143)			::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED =  ::nape::phys::InertiaMode_obj::__alloc( HX_CTX );
HXDLIN(1143)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1143)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::zpp_nape::util::ZPP_Flags_obj::InertiaMode_DEFAULT)->init(1,::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED)->__get(this->zpp_inner->inertiaMode).StaticCast<  ::nape::phys::InertiaMode >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_inertiaMode,return )

 ::nape::phys::InertiaMode Body_obj::set_inertiaMode( ::nape::phys::InertiaMode inertiaMode){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1145_set_inertiaMode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(inertiaMode,"inertiaMode")
HXLINE(1146)		{
HXLINE(1147)			this->zpp_inner->immutable_midstep(HX_("Body::inertiaMode",bb,c2,29,17));
HXLINE(1154)			int _hx_tmp;
HXDLIN(1154)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED )) {
HXLINE(1154)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1154)				::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED =  ::nape::phys::InertiaMode_obj::__alloc( HX_CTX );
HXDLIN(1154)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN(1154)			if (hx::IsEq( inertiaMode,::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED )) {
HXLINE(1154)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(1154)				_hx_tmp = (int)0;
            			}
HXDLIN(1154)			this->zpp_inner->inertiaMode = _hx_tmp;
HXLINE(1155)			this->zpp_inner->invalidate_inertia();
            		}
HXLINE(1157)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InertiaMode_DEFAULT )) {
HXLINE(1157)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1157)			::zpp_nape::util::ZPP_Flags_obj::InertiaMode_DEFAULT =  ::nape::phys::InertiaMode_obj::__alloc( HX_CTX );
HXDLIN(1157)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1157)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED )) {
HXLINE(1157)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1157)			::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED =  ::nape::phys::InertiaMode_obj::__alloc( HX_CTX );
HXDLIN(1157)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(1157)		return ::Array_obj< ::Dynamic>::__new(2)->init(0,::zpp_nape::util::ZPP_Flags_obj::InertiaMode_DEFAULT)->init(1,::zpp_nape::util::ZPP_Flags_obj::InertiaMode_FIXED)->__get(this->zpp_inner->inertiaMode).StaticCast<  ::nape::phys::InertiaMode >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_inertiaMode,return )

Float Body_obj::get_constraintInertia(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1168_get_constraintInertia)
            	HX_STACK_THIS(this)
HXLINE(1169)		if (!(this->zpp_inner->world)) {
HXLINE(1169)			this->zpp_inner->validate_inertia();
            		}
HXLINE(1170)		return this->zpp_inner->sinertia;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_constraintInertia,return )

Float Body_obj::get_inertia(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1179_get_inertia)
            	HX_STACK_THIS(this)
HXLINE(1183)		this->zpp_inner->validate_inertia();
HXLINE(1187)		return this->zpp_inner->cinertia;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_inertia,return )

Float Body_obj::set_inertia(Float inertia){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1189_set_inertia)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(inertia,"inertia")
HXLINE(1190)		{
HXLINE(1191)			this->zpp_inner->immutable_midstep(HX_("Body::inertia",38,c7,8f,f4));
HXLINE(1200)			this->zpp_inner->inertiaMode = (int)1;
HXLINE(1201)			this->zpp_inner->cinertia = inertia;
HXLINE(1202)			this->zpp_inner->invalidate_inertia();
            		}
HXLINE(1204)		this->zpp_inner->validate_inertia();
HXDLIN(1204)		return this->zpp_inner->cinertia;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,set_inertia,return )

 ::nape::phys::BodyList Body_obj::connectedBodies(hx::Null< int >  __o_depth, ::nape::phys::BodyList output){
int depth = __o_depth.Default(-1);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1224_connectedBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(output,"output")
HXLINE(1224)		return this->zpp_inner->connectedBodies(depth,output);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,connectedBodies,return )

 ::nape::phys::BodyList Body_obj::interactingBodies( ::nape::callbacks::InteractionType type,hx::Null< int >  __o_depth, ::nape::phys::BodyList output){
int depth = __o_depth.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1241_interactingBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(output,"output")
HXLINE(1242)		HX_VAR( int,arbiter_type);
HXDLIN(1242)		if (hx::IsNull( type )) {
HXLINE(1242)			arbiter_type = ((int)((int)::zpp_nape::dynamics::ZPP_Arbiter_obj::COL | (int)::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR) | (int)::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID);
            		}
            		else {
HXLINE(1245)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION )) {
HXLINE(1245)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1245)				::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN(1245)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN(1245)			if (hx::IsEq( type,::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION )) {
HXLINE(1242)				arbiter_type = ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL;
            			}
            			else {
HXLINE(1245)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR )) {
HXLINE(1245)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(1245)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN(1245)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN(1245)				if (hx::IsEq( type,::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR )) {
HXLINE(1242)					arbiter_type = ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR;
            				}
            				else {
HXLINE(1242)					arbiter_type = ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID;
            				}
            			}
            		}
HXLINE(1246)		return this->zpp_inner->interactingBodies(arbiter_type,depth,output);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Body_obj,interactingBodies,return )

Float Body_obj::crushFactor(){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1263_crushFactor)
            	HX_STACK_THIS(this)
HXLINE(1267)		HX_VARI( Float,msum) = ((Float)0.0);
HXLINE(1268)		HX_VARI( Float,x) = (int)0;
HXDLIN(1268)		HX_VARI( Float,y) = (int)0;
HXDLIN(1268)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1268)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1268)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1268)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1268)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1268)			ret->zpp_pool = null();
            		}
HXDLIN(1268)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1268)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1268)			{
HXLINE(1268)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1268)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1268)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1268)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1268)					ret1->next = null();
            				}
HXDLIN(1268)				ret1->weak = false;
            			}
HXDLIN(1268)			ret1->_immutable = false;
HXDLIN(1268)			{
HXLINE(1268)				ret1->x = x;
HXDLIN(1268)				ret1->y = y;
            			}
HXDLIN(1268)			ret->zpp_inner = ret1;
HXDLIN(1268)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1268)			bool _hx_tmp;
HXDLIN(1268)			{
HXLINE(1268)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN(1268)				if (hx::IsNotNull( _this->_validate )) {
HXLINE(1268)					_this->_validate();
            				}
            			}
HXDLIN(1268)			if ((ret->zpp_inner->x == x)) {
HXLINE(1268)				{
HXLINE(1268)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN(1268)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1268)						_this1->_validate();
            					}
            				}
HXDLIN(1268)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1268)				_hx_tmp = false;
            			}
HXDLIN(1268)			if (!(_hx_tmp)) {
HXLINE(1268)				{
HXLINE(1268)					ret->zpp_inner->x = x;
HXDLIN(1268)					ret->zpp_inner->y = y;
            				}
HXDLIN(1268)				{
HXLINE(1268)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN(1268)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE(1268)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN(1268)		ret->zpp_inner->weak = false;
HXDLIN(1268)		HX_VARI(  ::nape::geom::Vec2,jsum) = ret;
HXLINE(1269)		{
HXLINE(1269)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(1269)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(1269)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(1269)			while(true){
HXLINE(1269)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(1269)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(1269)				_g->zpp_critical = true;
HXDLIN(1269)				bool _hx_tmp1;
HXDLIN(1269)				if ((_g->zpp_i < length)) {
HXLINE(1269)					_hx_tmp1 = true;
            				}
            				else {
HXLINE(1269)					{
HXLINE(1269)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(1269)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(1269)						_g->zpp_inner = null();
            					}
HXDLIN(1269)					_hx_tmp1 = false;
            				}
HXDLIN(1269)				if (!(_hx_tmp1)) {
HXLINE(1269)					goto _hx_goto_66;
            				}
HXDLIN(1269)				_g->zpp_critical = false;
HXLINE(1270)				HX_VARI(  ::nape::geom::Vec3,imp3) = _g->zpp_inner->at(_g->zpp_i++)->totalImpulse(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1271)				HX_VARI(  ::nape::geom::Vec2,imp) = imp3->xy(null());
HXLINE(1272)				jsum->addeq(imp);
HXLINE(1273)				{
HXLINE(1273)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = imp->zpp_inner;
HXDLIN(1273)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1273)						_this3->_validate();
            					}
            				}
HXDLIN(1273)				HX_VARI_NAME( Float,msum1,"msum") = imp->zpp_inner->x;
HXDLIN(1273)				{
HXLINE(1273)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = imp->zpp_inner;
HXDLIN(1273)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1273)						_this4->_validate();
            					}
            				}
HXDLIN(1273)				HX_VARI_NAME( Float,msum2,"msum") = (msum1 * imp->zpp_inner->x);
HXDLIN(1273)				{
HXLINE(1273)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = imp->zpp_inner;
HXDLIN(1273)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1273)						_this5->_validate();
            					}
            				}
HXDLIN(1273)				HX_VARI_NAME( Float,msum3,"msum") = imp->zpp_inner->y;
HXDLIN(1273)				{
HXLINE(1273)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = imp->zpp_inner;
HXDLIN(1273)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1273)						_this6->_validate();
            					}
            				}
HXDLIN(1273)				msum = (msum + ::Math_obj::sqrt((msum2 + (msum3 * imp->zpp_inner->y))));
HXLINE(1274)				{
HXLINE(1274)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = imp->zpp_inner;
HXDLIN(1274)					imp->zpp_inner->outer = null();
HXDLIN(1274)					imp->zpp_inner = null();
HXDLIN(1274)					{
HXLINE(1274)						imp->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1274)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = imp;
            					}
HXDLIN(1274)					{
HXLINE(1274)						{
HXLINE(1274)							if (hx::IsNotNull( inner->outer )) {
HXLINE(1274)								inner->outer->zpp_inner = null();
HXDLIN(1274)								inner->outer = null();
            							}
HXDLIN(1274)							inner->_isimmutable = null();
HXDLIN(1274)							inner->_validate = null();
HXDLIN(1274)							inner->_invalidate = null();
            						}
HXDLIN(1274)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1274)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
HXLINE(1275)				imp3->dispose();
            			}
            			_hx_goto_66:;
            		}
HXLINE(1277)		{
HXLINE(1277)			if (hx::IsNull( this->zpp_inner->wrap_constraints )) {
HXLINE(1277)				this->zpp_inner->wrap_constraints = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->zpp_inner->constraints,true);
            			}
HXDLIN(1277)			HX_VARI_NAME(  ::nape::constraint::ConstraintList,_this7,"_this") = this->zpp_inner->wrap_constraints;
HXDLIN(1277)			_this7->zpp_inner->valmod();
HXDLIN(1277)			HX_VARI_NAME(  ::nape::constraint::ConstraintIterator,_g1,"_g") = ::nape::constraint::ConstraintIterator_obj::get(_this7);
HXDLIN(1277)			while(true){
HXLINE(1277)				_g1->zpp_inner->zpp_inner->valmod();
HXDLIN(1277)				HX_VARI_NAME(  ::nape::constraint::ConstraintList,_this8,"_this") = _g1->zpp_inner;
HXDLIN(1277)				_this8->zpp_inner->valmod();
HXDLIN(1277)				if (_this8->zpp_inner->zip_length) {
HXLINE(1277)					_this8->zpp_inner->zip_length = false;
HXDLIN(1277)					_this8->zpp_inner->user_length = _this8->zpp_inner->inner->length;
            				}
HXDLIN(1277)				_g1->zpp_critical = true;
HXDLIN(1277)				bool _hx_tmp2;
HXDLIN(1277)				if ((_g1->zpp_i < _this8->zpp_inner->user_length)) {
HXLINE(1277)					_hx_tmp2 = true;
            				}
            				else {
HXLINE(1277)					{
HXLINE(1277)						_g1->zpp_next = ::nape::constraint::ConstraintIterator_obj::zpp_pool;
HXDLIN(1277)						::nape::constraint::ConstraintIterator_obj::zpp_pool = _g1;
HXDLIN(1277)						_g1->zpp_inner = null();
            					}
HXDLIN(1277)					_hx_tmp2 = false;
            				}
HXDLIN(1277)				if (!(_hx_tmp2)) {
HXLINE(1277)					goto _hx_goto_67;
            				}
HXDLIN(1277)				_g1->zpp_critical = false;
HXLINE(1278)				HX_VARI_NAME(  ::nape::geom::Vec3,imp31,"imp3") = _g1->zpp_inner->at(_g1->zpp_i++)->bodyImpulse(hx::ObjectPtr<OBJ_>(this));
HXLINE(1279)				HX_VARI_NAME(  ::nape::geom::Vec2,imp1,"imp") = imp31->xy(null());
HXLINE(1280)				jsum->addeq(imp1);
HXLINE(1281)				{
HXLINE(1281)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = imp1->zpp_inner;
HXDLIN(1281)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE(1281)						_this9->_validate();
            					}
            				}
HXDLIN(1281)				HX_VARI_NAME( Float,msum4,"msum") = imp1->zpp_inner->x;
HXDLIN(1281)				{
HXLINE(1281)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = imp1->zpp_inner;
HXDLIN(1281)					if (hx::IsNotNull( _this10->_validate )) {
HXLINE(1281)						_this10->_validate();
            					}
            				}
HXDLIN(1281)				HX_VARI_NAME( Float,msum5,"msum") = (msum4 * imp1->zpp_inner->x);
HXDLIN(1281)				{
HXLINE(1281)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = imp1->zpp_inner;
HXDLIN(1281)					if (hx::IsNotNull( _this11->_validate )) {
HXLINE(1281)						_this11->_validate();
            					}
            				}
HXDLIN(1281)				HX_VARI_NAME( Float,msum6,"msum") = imp1->zpp_inner->y;
HXDLIN(1281)				{
HXLINE(1281)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this12,"_this") = imp1->zpp_inner;
HXDLIN(1281)					if (hx::IsNotNull( _this12->_validate )) {
HXLINE(1281)						_this12->_validate();
            					}
            				}
HXDLIN(1281)				msum = (msum + ::Math_obj::sqrt((msum5 + (msum6 * imp1->zpp_inner->y))));
HXLINE(1282)				{
HXLINE(1282)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = imp1->zpp_inner;
HXDLIN(1282)					imp1->zpp_inner->outer = null();
HXDLIN(1282)					imp1->zpp_inner = null();
HXDLIN(1282)					{
HXLINE(1282)						imp1->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1282)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = imp1;
            					}
HXDLIN(1282)					{
HXLINE(1282)						{
HXLINE(1282)							if (hx::IsNotNull( inner1->outer )) {
HXLINE(1282)								inner1->outer->zpp_inner = null();
HXDLIN(1282)								inner1->outer = null();
            							}
HXDLIN(1282)							inner1->_isimmutable = null();
HXDLIN(1282)							inner1->_validate = null();
HXDLIN(1282)							inner1->_invalidate = null();
            						}
HXDLIN(1282)						inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1282)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            					}
            				}
HXLINE(1283)				imp31->dispose();
            			}
            			_hx_goto_67:;
            		}
HXLINE(1285)		{
HXLINE(1285)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = jsum->zpp_inner;
HXDLIN(1285)			if (hx::IsNotNull( _this13->_validate )) {
HXLINE(1285)				_this13->_validate();
            			}
            		}
HXDLIN(1285)		HX_VARI_NAME( Float,ret2,"ret") = jsum->zpp_inner->x;
HXDLIN(1285)		{
HXLINE(1285)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this14,"_this") = jsum->zpp_inner;
HXDLIN(1285)			if (hx::IsNotNull( _this14->_validate )) {
HXLINE(1285)				_this14->_validate();
            			}
            		}
HXDLIN(1285)		HX_VARI_NAME( Float,ret3,"ret") = (ret2 * jsum->zpp_inner->x);
HXDLIN(1285)		{
HXLINE(1285)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this15,"_this") = jsum->zpp_inner;
HXDLIN(1285)			if (hx::IsNotNull( _this15->_validate )) {
HXLINE(1285)				_this15->_validate();
            			}
            		}
HXDLIN(1285)		HX_VARI_NAME( Float,ret4,"ret") = jsum->zpp_inner->y;
HXDLIN(1285)		{
HXLINE(1285)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this16,"_this") = jsum->zpp_inner;
HXDLIN(1285)			if (hx::IsNotNull( _this16->_validate )) {
HXLINE(1285)				_this16->_validate();
            			}
            		}
HXDLIN(1285)		HX_VARI_NAME( Float,ret5,"ret") = (msum - ::Math_obj::sqrt((ret3 + (ret4 * jsum->zpp_inner->y))));
HXDLIN(1285)		this->zpp_inner->validate_mass();
HXDLIN(1285)		 ::nape::space::Space ret6;
HXDLIN(1285)		if (hx::IsNull( this->zpp_inner->space )) {
HXLINE(1285)			ret6 = null();
            		}
            		else {
HXLINE(1285)			ret6 = this->zpp_inner->space->outer;
            		}
HXDLIN(1285)		HX_VARI_NAME( Float,ret7,"ret") = ((Float)ret5 / (Float)(this->zpp_inner->cmass * ret6->zpp_inner->pre_dt));
HXLINE(1286)		{
HXLINE(1286)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = jsum->zpp_inner;
HXDLIN(1286)			jsum->zpp_inner->outer = null();
HXDLIN(1286)			jsum->zpp_inner = null();
HXDLIN(1286)			{
HXLINE(1286)				jsum->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1286)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = jsum;
            			}
HXDLIN(1286)			{
HXLINE(1286)				{
HXLINE(1286)					if (hx::IsNotNull( inner2->outer )) {
HXLINE(1286)						inner2->outer->zpp_inner = null();
HXDLIN(1286)						inner2->outer = null();
            					}
HXDLIN(1286)					inner2->_isimmutable = null();
HXDLIN(1286)					inner2->_validate = null();
HXDLIN(1286)					inner2->_invalidate = null();
            				}
HXDLIN(1286)				inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1286)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            			}
            		}
HXLINE(1287)		return ret7;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,crushFactor,return )

 ::nape::geom::Vec2 Body_obj::localPointToWorld( ::nape::geom::Vec2 point,hx::Null< bool >  __o_weak){
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1300_localPointToWorld)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(weak,"weak")
HXLINE(1309)		{
HXLINE(1309)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->zpp_inner;
HXDLIN(1309)			if (_this->zip_axis) {
HXLINE(1309)				_this->zip_axis = false;
HXDLIN(1309)				{
HXLINE(1309)					_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1309)					_this->axisy = ::Math_obj::cos(_this->rot);
            				}
            			}
            		}
HXLINE(1310)		HX_VARI( Float,tempx) = ((Float)0.0);
HXLINE(1311)		HX_VARI( Float,tempy) = ((Float)0.0);
HXLINE(1312)		{
HXLINE(1313)			HX_VARI_NAME( Float,tempx1,"tempx") = this->zpp_inner->axisy;
HXDLIN(1313)			{
HXLINE(1313)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = point->zpp_inner;
HXDLIN(1313)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1313)					_this1->_validate();
            				}
            			}
HXDLIN(1313)			HX_VARI_NAME( Float,tempx2,"tempx") = (tempx1 * point->zpp_inner->x);
HXDLIN(1313)			HX_VARI_NAME( Float,tempx3,"tempx") = this->zpp_inner->axisx;
HXDLIN(1313)			{
HXLINE(1313)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = point->zpp_inner;
HXDLIN(1313)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1313)					_this2->_validate();
            				}
            			}
HXDLIN(1313)			tempx = (tempx2 - (tempx3 * point->zpp_inner->y));
HXLINE(1314)			{
HXLINE(1314)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = point->zpp_inner;
HXDLIN(1314)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1314)					_this3->_validate();
            				}
            			}
HXDLIN(1314)			HX_VARI_NAME( Float,tempy1,"tempy") = (point->zpp_inner->x * this->zpp_inner->axisx);
HXDLIN(1314)			{
HXLINE(1314)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = point->zpp_inner;
HXDLIN(1314)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1314)					_this4->_validate();
            				}
            			}
HXDLIN(1314)			tempy = (tempy1 + (point->zpp_inner->y * this->zpp_inner->axisy));
            		}
HXLINE(1316)		if (point->zpp_inner->weak) {
HXLINE(1320)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN(1320)			point->zpp_inner->outer = null();
HXDLIN(1320)			point->zpp_inner = null();
HXDLIN(1320)			{
HXLINE(1320)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1320)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN(1320)			{
HXLINE(1320)				{
HXLINE(1320)					if (hx::IsNotNull( inner->outer )) {
HXLINE(1320)						inner->outer->zpp_inner = null();
HXDLIN(1320)						inner->outer = null();
            					}
HXDLIN(1320)					inner->_isimmutable = null();
HXDLIN(1320)					inner->_validate = null();
HXDLIN(1320)					inner->_invalidate = null();
            				}
HXDLIN(1320)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1320)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(1327)		HX_VARI( Float,x) = (tempx + this->zpp_inner->posx);
HXDLIN(1327)		HX_VARI( Float,y) = (tempy + this->zpp_inner->posy);
HXDLIN(1327)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1327)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1327)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1327)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1327)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1327)			ret->zpp_pool = null();
            		}
HXDLIN(1327)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1327)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1327)			{
HXLINE(1327)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1327)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1327)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1327)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1327)					ret1->next = null();
            				}
HXDLIN(1327)				ret1->weak = false;
            			}
HXDLIN(1327)			ret1->_immutable = false;
HXDLIN(1327)			{
HXLINE(1327)				ret1->x = x;
HXDLIN(1327)				ret1->y = y;
            			}
HXDLIN(1327)			ret->zpp_inner = ret1;
HXDLIN(1327)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1327)			bool _hx_tmp;
HXDLIN(1327)			{
HXLINE(1327)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret->zpp_inner;
HXDLIN(1327)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1327)					_this5->_validate();
            				}
            			}
HXDLIN(1327)			if ((ret->zpp_inner->x == x)) {
HXLINE(1327)				{
HXLINE(1327)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret->zpp_inner;
HXDLIN(1327)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1327)						_this6->_validate();
            					}
            				}
HXDLIN(1327)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1327)				_hx_tmp = false;
            			}
HXDLIN(1327)			if (!(_hx_tmp)) {
HXLINE(1327)				{
HXLINE(1327)					ret->zpp_inner->x = x;
HXDLIN(1327)					ret->zpp_inner->y = y;
            				}
HXDLIN(1327)				{
HXLINE(1327)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = ret->zpp_inner;
HXDLIN(1327)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1327)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN(1327)		ret->zpp_inner->weak = weak;
HXDLIN(1327)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,localPointToWorld,return )

 ::nape::geom::Vec2 Body_obj::worldPointToLocal( ::nape::geom::Vec2 point,hx::Null< bool >  __o_weak){
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1340_worldPointToLocal)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(weak,"weak")
HXLINE(1349)		{
HXLINE(1349)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->zpp_inner;
HXDLIN(1349)			if (_this->zip_axis) {
HXLINE(1349)				_this->zip_axis = false;
HXDLIN(1349)				{
HXLINE(1349)					_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1349)					_this->axisy = ::Math_obj::cos(_this->rot);
            				}
            			}
            		}
HXLINE(1350)		HX_VARI( Float,tempx) = ((Float)0.0);
HXLINE(1351)		HX_VARI( Float,tempy) = ((Float)0.0);
HXLINE(1352)		HX_VARI( Float,pointx) = ((Float)0.0);
HXLINE(1353)		HX_VARI( Float,pointy) = ((Float)0.0);
HXLINE(1354)		{
HXLINE(1355)			{
HXLINE(1355)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = point->zpp_inner;
HXDLIN(1355)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1355)					_this1->_validate();
            				}
            			}
HXDLIN(1355)			pointx = (point->zpp_inner->x - this->zpp_inner->posx);
HXLINE(1356)			{
HXLINE(1356)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = point->zpp_inner;
HXDLIN(1356)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1356)					_this2->_validate();
            				}
            			}
HXDLIN(1356)			pointy = (point->zpp_inner->y - this->zpp_inner->posy);
            		}
HXLINE(1358)		{
HXLINE(1359)			tempx = ((pointx * this->zpp_inner->axisy) + (pointy * this->zpp_inner->axisx));
HXLINE(1360)			tempy = ((pointy * this->zpp_inner->axisy) - (pointx * this->zpp_inner->axisx));
            		}
HXLINE(1362)		if (point->zpp_inner->weak) {
HXLINE(1366)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN(1366)			point->zpp_inner->outer = null();
HXDLIN(1366)			point->zpp_inner = null();
HXDLIN(1366)			{
HXLINE(1366)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1366)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN(1366)			{
HXLINE(1366)				{
HXLINE(1366)					if (hx::IsNotNull( inner->outer )) {
HXLINE(1366)						inner->outer->zpp_inner = null();
HXDLIN(1366)						inner->outer = null();
            					}
HXDLIN(1366)					inner->_isimmutable = null();
HXDLIN(1366)					inner->_validate = null();
HXDLIN(1366)					inner->_invalidate = null();
            				}
HXDLIN(1366)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1366)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(1373)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1373)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1373)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1373)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1373)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1373)			ret->zpp_pool = null();
            		}
HXDLIN(1373)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1373)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1373)			{
HXLINE(1373)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1373)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1373)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1373)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1373)					ret1->next = null();
            				}
HXDLIN(1373)				ret1->weak = false;
            			}
HXDLIN(1373)			ret1->_immutable = false;
HXDLIN(1373)			{
HXLINE(1373)				ret1->x = tempx;
HXDLIN(1373)				ret1->y = tempy;
            			}
HXDLIN(1373)			ret->zpp_inner = ret1;
HXDLIN(1373)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1373)			bool _hx_tmp;
HXDLIN(1373)			{
HXLINE(1373)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN(1373)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1373)					_this3->_validate();
            				}
            			}
HXDLIN(1373)			if ((ret->zpp_inner->x == tempx)) {
HXLINE(1373)				{
HXLINE(1373)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret->zpp_inner;
HXDLIN(1373)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1373)						_this4->_validate();
            					}
            				}
HXDLIN(1373)				_hx_tmp = (ret->zpp_inner->y == tempy);
            			}
            			else {
HXLINE(1373)				_hx_tmp = false;
            			}
HXDLIN(1373)			if (!(_hx_tmp)) {
HXLINE(1373)				{
HXLINE(1373)					ret->zpp_inner->x = tempx;
HXDLIN(1373)					ret->zpp_inner->y = tempy;
            				}
HXDLIN(1373)				{
HXLINE(1373)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret->zpp_inner;
HXDLIN(1373)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE(1373)						_this5->_invalidate(_this5);
            					}
            				}
            			}
            		}
HXDLIN(1373)		ret->zpp_inner->weak = weak;
HXDLIN(1373)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,worldPointToLocal,return )

 ::nape::geom::Vec2 Body_obj::localVectorToWorld( ::nape::geom::Vec2 vector,hx::Null< bool >  __o_weak){
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1387_localVectorToWorld)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(weak,"weak")
HXLINE(1396)		{
HXLINE(1396)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->zpp_inner;
HXDLIN(1396)			if (_this->zip_axis) {
HXLINE(1396)				_this->zip_axis = false;
HXDLIN(1396)				{
HXLINE(1396)					_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1396)					_this->axisy = ::Math_obj::cos(_this->rot);
            				}
            			}
            		}
HXLINE(1397)		HX_VARI( Float,tempx) = ((Float)0.0);
HXLINE(1398)		HX_VARI( Float,tempy) = ((Float)0.0);
HXLINE(1399)		{
HXLINE(1400)			HX_VARI_NAME( Float,tempx1,"tempx") = this->zpp_inner->axisy;
HXDLIN(1400)			{
HXLINE(1400)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = vector->zpp_inner;
HXDLIN(1400)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1400)					_this1->_validate();
            				}
            			}
HXDLIN(1400)			HX_VARI_NAME( Float,tempx2,"tempx") = (tempx1 * vector->zpp_inner->x);
HXDLIN(1400)			HX_VARI_NAME( Float,tempx3,"tempx") = this->zpp_inner->axisx;
HXDLIN(1400)			{
HXLINE(1400)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = vector->zpp_inner;
HXDLIN(1400)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1400)					_this2->_validate();
            				}
            			}
HXDLIN(1400)			tempx = (tempx2 - (tempx3 * vector->zpp_inner->y));
HXLINE(1401)			{
HXLINE(1401)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = vector->zpp_inner;
HXDLIN(1401)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1401)					_this3->_validate();
            				}
            			}
HXDLIN(1401)			HX_VARI_NAME( Float,tempy1,"tempy") = (vector->zpp_inner->x * this->zpp_inner->axisx);
HXDLIN(1401)			{
HXLINE(1401)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = vector->zpp_inner;
HXDLIN(1401)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1401)					_this4->_validate();
            				}
            			}
HXDLIN(1401)			tempy = (tempy1 + (vector->zpp_inner->y * this->zpp_inner->axisy));
            		}
HXLINE(1403)		if (vector->zpp_inner->weak) {
HXLINE(1407)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = vector->zpp_inner;
HXDLIN(1407)			vector->zpp_inner->outer = null();
HXDLIN(1407)			vector->zpp_inner = null();
HXDLIN(1407)			{
HXLINE(1407)				vector->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1407)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = vector;
            			}
HXDLIN(1407)			{
HXLINE(1407)				{
HXLINE(1407)					if (hx::IsNotNull( inner->outer )) {
HXLINE(1407)						inner->outer->zpp_inner = null();
HXDLIN(1407)						inner->outer = null();
            					}
HXDLIN(1407)					inner->_isimmutable = null();
HXDLIN(1407)					inner->_validate = null();
HXDLIN(1407)					inner->_invalidate = null();
            				}
HXDLIN(1407)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1407)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(1414)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1414)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1414)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1414)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1414)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1414)			ret->zpp_pool = null();
            		}
HXDLIN(1414)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1414)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1414)			{
HXLINE(1414)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1414)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1414)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1414)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1414)					ret1->next = null();
            				}
HXDLIN(1414)				ret1->weak = false;
            			}
HXDLIN(1414)			ret1->_immutable = false;
HXDLIN(1414)			{
HXLINE(1414)				ret1->x = tempx;
HXDLIN(1414)				ret1->y = tempy;
            			}
HXDLIN(1414)			ret->zpp_inner = ret1;
HXDLIN(1414)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1414)			bool _hx_tmp;
HXDLIN(1414)			{
HXLINE(1414)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret->zpp_inner;
HXDLIN(1414)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1414)					_this5->_validate();
            				}
            			}
HXDLIN(1414)			if ((ret->zpp_inner->x == tempx)) {
HXLINE(1414)				{
HXLINE(1414)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret->zpp_inner;
HXDLIN(1414)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1414)						_this6->_validate();
            					}
            				}
HXDLIN(1414)				_hx_tmp = (ret->zpp_inner->y == tempy);
            			}
            			else {
HXLINE(1414)				_hx_tmp = false;
            			}
HXDLIN(1414)			if (!(_hx_tmp)) {
HXLINE(1414)				{
HXLINE(1414)					ret->zpp_inner->x = tempx;
HXDLIN(1414)					ret->zpp_inner->y = tempy;
            				}
HXDLIN(1414)				{
HXLINE(1414)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = ret->zpp_inner;
HXDLIN(1414)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1414)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN(1414)		ret->zpp_inner->weak = weak;
HXDLIN(1414)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,localVectorToWorld,return )

 ::nape::geom::Vec2 Body_obj::worldVectorToLocal( ::nape::geom::Vec2 vector,hx::Null< bool >  __o_weak){
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1428_worldVectorToLocal)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(weak,"weak")
HXLINE(1437)		{
HXLINE(1437)			HX_VARI(  ::zpp_nape::phys::ZPP_Body,_this) = this->zpp_inner;
HXDLIN(1437)			if (_this->zip_axis) {
HXLINE(1437)				_this->zip_axis = false;
HXDLIN(1437)				{
HXLINE(1437)					_this->axisx = ::Math_obj::sin(_this->rot);
HXDLIN(1437)					_this->axisy = ::Math_obj::cos(_this->rot);
            				}
            			}
            		}
HXLINE(1438)		HX_VARI( Float,tempx) = ((Float)0.0);
HXLINE(1439)		HX_VARI( Float,tempy) = ((Float)0.0);
HXLINE(1440)		{
HXLINE(1441)			{
HXLINE(1441)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = vector->zpp_inner;
HXDLIN(1441)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1441)					_this1->_validate();
            				}
            			}
HXDLIN(1441)			HX_VARI_NAME( Float,tempx1,"tempx") = (vector->zpp_inner->x * this->zpp_inner->axisy);
HXDLIN(1441)			{
HXLINE(1441)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = vector->zpp_inner;
HXDLIN(1441)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1441)					_this2->_validate();
            				}
            			}
HXDLIN(1441)			tempx = (tempx1 + (vector->zpp_inner->y * this->zpp_inner->axisx));
HXLINE(1442)			{
HXLINE(1442)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = vector->zpp_inner;
HXDLIN(1442)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1442)					_this3->_validate();
            				}
            			}
HXDLIN(1442)			HX_VARI_NAME( Float,tempy1,"tempy") = (vector->zpp_inner->y * this->zpp_inner->axisy);
HXDLIN(1442)			{
HXLINE(1442)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = vector->zpp_inner;
HXDLIN(1442)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1442)					_this4->_validate();
            				}
            			}
HXDLIN(1442)			tempy = (tempy1 - (vector->zpp_inner->x * this->zpp_inner->axisx));
            		}
HXLINE(1444)		if (vector->zpp_inner->weak) {
HXLINE(1448)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = vector->zpp_inner;
HXDLIN(1448)			vector->zpp_inner->outer = null();
HXDLIN(1448)			vector->zpp_inner = null();
HXDLIN(1448)			{
HXLINE(1448)				vector->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1448)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = vector;
            			}
HXDLIN(1448)			{
HXLINE(1448)				{
HXLINE(1448)					if (hx::IsNotNull( inner->outer )) {
HXLINE(1448)						inner->outer->zpp_inner = null();
HXDLIN(1448)						inner->outer = null();
            					}
HXDLIN(1448)					inner->_isimmutable = null();
HXDLIN(1448)					inner->_validate = null();
HXDLIN(1448)					inner->_invalidate = null();
            				}
HXDLIN(1448)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1448)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(1455)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1455)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1455)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1455)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1455)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1455)			ret->zpp_pool = null();
            		}
HXDLIN(1455)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1455)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1455)			{
HXLINE(1455)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1455)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1455)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1455)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1455)					ret1->next = null();
            				}
HXDLIN(1455)				ret1->weak = false;
            			}
HXDLIN(1455)			ret1->_immutable = false;
HXDLIN(1455)			{
HXLINE(1455)				ret1->x = tempx;
HXDLIN(1455)				ret1->y = tempy;
            			}
HXDLIN(1455)			ret->zpp_inner = ret1;
HXDLIN(1455)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1455)			bool _hx_tmp;
HXDLIN(1455)			{
HXLINE(1455)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret->zpp_inner;
HXDLIN(1455)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1455)					_this5->_validate();
            				}
            			}
HXDLIN(1455)			if ((ret->zpp_inner->x == tempx)) {
HXLINE(1455)				{
HXLINE(1455)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret->zpp_inner;
HXDLIN(1455)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(1455)						_this6->_validate();
            					}
            				}
HXDLIN(1455)				_hx_tmp = (ret->zpp_inner->y == tempy);
            			}
            			else {
HXLINE(1455)				_hx_tmp = false;
            			}
HXDLIN(1455)			if (!(_hx_tmp)) {
HXLINE(1455)				{
HXLINE(1455)					ret->zpp_inner->x = tempx;
HXDLIN(1455)					ret->zpp_inner->y = tempy;
            				}
HXDLIN(1455)				{
HXLINE(1455)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = ret->zpp_inner;
HXDLIN(1455)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(1455)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN(1455)		ret->zpp_inner->weak = weak;
HXDLIN(1455)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,worldVectorToLocal,return )

 ::nape::phys::Body Body_obj::applyImpulse( ::nape::geom::Vec2 impulse, ::nape::geom::Vec2 pos,hx::Null< bool >  __o_sleepable){
bool sleepable = __o_sleepable.Default(false);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1478_applyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(impulse,"impulse")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(sleepable,"sleepable")
HXLINE(1495)		bool _hx_tmp;
HXDLIN(1495)		if (sleepable) {
HXLINE(1495)			_hx_tmp = this->zpp_inner->component->sleeping;
            		}
            		else {
HXLINE(1495)			_hx_tmp = false;
            		}
HXDLIN(1495)		if (_hx_tmp) {
HXLINE(1496)			if (impulse->zpp_inner->weak) {
HXLINE(1500)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = impulse->zpp_inner;
HXDLIN(1500)				impulse->zpp_inner->outer = null();
HXDLIN(1500)				impulse->zpp_inner = null();
HXDLIN(1500)				{
HXLINE(1500)					impulse->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1500)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = impulse;
            				}
HXDLIN(1500)				{
HXLINE(1500)					{
HXLINE(1500)						if (hx::IsNotNull( inner->outer )) {
HXLINE(1500)							inner->outer->zpp_inner = null();
HXDLIN(1500)							inner->outer = null();
            						}
HXDLIN(1500)						inner->_isimmutable = null();
HXDLIN(1500)						inner->_validate = null();
HXDLIN(1500)						inner->_invalidate = null();
            					}
HXDLIN(1500)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1500)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
HXLINE(1507)			if (hx::IsNotNull( pos )) {
HXLINE(1508)				if (pos->zpp_inner->weak) {
HXLINE(1512)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = pos->zpp_inner;
HXDLIN(1512)					pos->zpp_inner->outer = null();
HXDLIN(1512)					pos->zpp_inner = null();
HXDLIN(1512)					{
HXLINE(1512)						pos->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1512)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = pos;
            					}
HXDLIN(1512)					{
HXLINE(1512)						{
HXLINE(1512)							if (hx::IsNotNull( inner1->outer )) {
HXLINE(1512)								inner1->outer->zpp_inner = null();
HXDLIN(1512)								inner1->outer = null();
            							}
HXDLIN(1512)							inner1->_isimmutable = null();
HXDLIN(1512)							inner1->_validate = null();
HXDLIN(1512)							inner1->_invalidate = null();
            						}
HXDLIN(1512)						inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1512)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            					}
            				}
            			}
HXLINE(1520)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1522)		this->zpp_inner->validate_mass();
HXLINE(1523)		{
HXLINE(1524)			HX_VARI( Float,t) = this->zpp_inner->imass;
HXLINE(1533)			 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->zpp_inner;
HXDLIN(1533)			Float _hx_tmp2 = _hx_tmp1->velx;
HXDLIN(1533)			{
HXLINE(1533)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = impulse->zpp_inner;
HXDLIN(1533)				if (hx::IsNotNull( _this->_validate )) {
HXLINE(1533)					_this->_validate();
            				}
            			}
HXDLIN(1533)			_hx_tmp1->velx = (_hx_tmp2 + (impulse->zpp_inner->x * t));
HXLINE(1534)			 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->zpp_inner;
HXDLIN(1534)			Float _hx_tmp4 = _hx_tmp3->vely;
HXDLIN(1534)			{
HXLINE(1534)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = impulse->zpp_inner;
HXDLIN(1534)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1534)					_this1->_validate();
            				}
            			}
HXDLIN(1534)			_hx_tmp3->vely = (_hx_tmp4 + (impulse->zpp_inner->y * t));
            		}
HXLINE(1536)		if (hx::IsNotNull( pos )) {
HXLINE(1537)			HX_VARI( Float,rx) = ((Float)0.0);
HXLINE(1538)			HX_VARI( Float,ry) = ((Float)0.0);
HXLINE(1539)			{
HXLINE(1540)				{
HXLINE(1540)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = pos->zpp_inner;
HXDLIN(1540)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1540)						_this2->_validate();
            					}
            				}
HXDLIN(1540)				rx = (pos->zpp_inner->x - this->zpp_inner->posx);
HXLINE(1541)				{
HXLINE(1541)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = pos->zpp_inner;
HXDLIN(1541)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1541)						_this3->_validate();
            					}
            				}
HXDLIN(1541)				ry = (pos->zpp_inner->y - this->zpp_inner->posy);
            			}
HXLINE(1543)			this->zpp_inner->validate_inertia();
HXLINE(1544)			 ::zpp_nape::phys::ZPP_Body _hx_tmp5 = this->zpp_inner;
HXDLIN(1544)			Float _hx_tmp6 = _hx_tmp5->angvel;
HXDLIN(1544)			{
HXLINE(1544)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = impulse->zpp_inner;
HXDLIN(1544)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1544)					_this4->_validate();
            				}
            			}
HXDLIN(1544)			Float _hx_tmp7 = (impulse->zpp_inner->y * rx);
HXDLIN(1544)			{
HXLINE(1544)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = impulse->zpp_inner;
HXDLIN(1544)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1544)					_this5->_validate();
            				}
            			}
HXDLIN(1544)			_hx_tmp5->angvel = (_hx_tmp6 + ((_hx_tmp7 - (impulse->zpp_inner->x * ry)) * this->zpp_inner->iinertia));
HXLINE(1545)			if (pos->zpp_inner->weak) {
HXLINE(1549)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = pos->zpp_inner;
HXDLIN(1549)				pos->zpp_inner->outer = null();
HXDLIN(1549)				pos->zpp_inner = null();
HXDLIN(1549)				{
HXLINE(1549)					pos->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1549)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = pos;
            				}
HXDLIN(1549)				{
HXLINE(1549)					{
HXLINE(1549)						if (hx::IsNotNull( inner2->outer )) {
HXLINE(1549)							inner2->outer->zpp_inner = null();
HXDLIN(1549)							inner2->outer = null();
            						}
HXDLIN(1549)						inner2->_isimmutable = null();
HXDLIN(1549)						inner2->_validate = null();
HXDLIN(1549)						inner2->_invalidate = null();
            					}
HXDLIN(1549)					inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1549)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            				}
            			}
            		}
HXLINE(1557)		if (!(sleepable)) {
HXLINE(1558)			if ((this->zpp_inner->type == (int)2)) {
HXLINE(1558)				this->zpp_inner->wake();
            			}
            		}
HXLINE(1560)		if (impulse->zpp_inner->weak) {
HXLINE(1564)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner3,"inner") = impulse->zpp_inner;
HXDLIN(1564)			impulse->zpp_inner->outer = null();
HXDLIN(1564)			impulse->zpp_inner = null();
HXDLIN(1564)			{
HXLINE(1564)				impulse->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1564)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = impulse;
            			}
HXDLIN(1564)			{
HXLINE(1564)				{
HXLINE(1564)					if (hx::IsNotNull( inner3->outer )) {
HXLINE(1564)						inner3->outer->zpp_inner = null();
HXDLIN(1564)						inner3->outer = null();
            					}
HXDLIN(1564)					inner3->_isimmutable = null();
HXDLIN(1564)					inner3->_validate = null();
HXDLIN(1564)					inner3->_invalidate = null();
            				}
HXDLIN(1564)				inner3->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1564)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner3;
            			}
            		}
HXLINE(1571)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Body_obj,applyImpulse,return )

 ::nape::phys::Body Body_obj::applyAngularImpulse(Float impulse,hx::Null< bool >  __o_sleepable){
bool sleepable = __o_sleepable.Default(false);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1587_applyAngularImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(impulse,"impulse")
            	HX_STACK_ARG(sleepable,"sleepable")
HXLINE(1591)		bool _hx_tmp;
HXDLIN(1591)		if (sleepable) {
HXLINE(1591)			_hx_tmp = this->zpp_inner->component->sleeping;
            		}
            		else {
HXLINE(1591)			_hx_tmp = false;
            		}
HXDLIN(1591)		if (_hx_tmp) {
HXLINE(1592)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1594)		this->zpp_inner->validate_inertia();
HXLINE(1595)		 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->zpp_inner;
HXDLIN(1595)		_hx_tmp1->angvel = (_hx_tmp1->angvel + (impulse * this->zpp_inner->iinertia));
HXLINE(1596)		if (!(sleepable)) {
HXLINE(1597)			if ((this->zpp_inner->type == (int)2)) {
HXLINE(1597)				this->zpp_inner->wake();
            			}
            		}
HXLINE(1599)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,applyAngularImpulse,return )

 ::nape::phys::Body Body_obj::translateShapes( ::nape::geom::Vec2 translation){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1613_translateShapes)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(translation,"translation")
HXLINE(1614)		this->zpp_inner->immutable_midstep(HX_("Body::translateShapes()",df,8e,13,25));
HXLINE(1626)		HX_VARI( bool,weak) = translation->zpp_inner->weak;
HXLINE(1627)		translation->zpp_inner->weak = false;
HXLINE(1628)		{
HXLINE(1629)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(1630)			while(hx::IsNotNull( cx_ite )){
HXLINE(1632)				cx_ite->elt->outer->translate(translation);
HXLINE(1633)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1636)		translation->zpp_inner->weak = weak;
HXLINE(1637)		if (translation->zpp_inner->weak) {
HXLINE(1641)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = translation->zpp_inner;
HXDLIN(1641)			translation->zpp_inner->outer = null();
HXDLIN(1641)			translation->zpp_inner = null();
HXDLIN(1641)			{
HXLINE(1641)				translation->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1641)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = translation;
            			}
HXDLIN(1641)			{
HXLINE(1641)				{
HXLINE(1641)					if (hx::IsNotNull( inner->outer )) {
HXLINE(1641)						inner->outer->zpp_inner = null();
HXDLIN(1641)						inner->outer = null();
            					}
HXDLIN(1641)					inner->_isimmutable = null();
HXDLIN(1641)					inner->_validate = null();
HXDLIN(1641)					inner->_invalidate = null();
            				}
HXDLIN(1641)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1641)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(1648)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,translateShapes,return )

 ::nape::phys::Body Body_obj::rotateShapes(Float angle){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1661_rotateShapes)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(angle,"angle")
HXLINE(1662)		this->zpp_inner->immutable_midstep(HX_("Body::rotateShapes()",b0,10,24,6f));
HXLINE(1666)		{
HXLINE(1667)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(1668)			while(hx::IsNotNull( cx_ite )){
HXLINE(1670)				cx_ite->elt->outer->rotate(angle);
HXLINE(1671)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1674)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,rotateShapes,return )

 ::nape::phys::Body Body_obj::scaleShapes(Float scaleX,Float scaleY){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1689_scaleShapes)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scaleX,"scaleX")
            	HX_STACK_ARG(scaleY,"scaleY")
HXLINE(1690)		this->zpp_inner->immutable_midstep(HX_("Body::scaleShapes()",1b,eb,17,58));
HXLINE(1694)		{
HXLINE(1695)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(1696)			while(hx::IsNotNull( cx_ite )){
HXLINE(1698)				cx_ite->elt->outer->scale(scaleX,scaleY);
HXLINE(1699)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1702)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,scaleShapes,return )

 ::nape::phys::Body Body_obj::transformShapes( ::nape::geom::Mat23 matrix){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1718_transformShapes)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE(1719)		this->zpp_inner->immutable_midstep(HX_("Body::transformShapes()",fd,32,b7,bd));
HXLINE(1723)		{
HXLINE(1724)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(1725)			while(hx::IsNotNull( cx_ite )){
HXLINE(1727)				cx_ite->elt->outer->transform(matrix);
HXLINE(1728)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1731)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,transformShapes,return )

 ::nape::phys::Body Body_obj::align(){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1749_align)
            	HX_STACK_THIS(this)
HXLINE(1750)		this->zpp_inner->immutable_midstep(HX_("Body::align()",44,8b,7d,21));
HXLINE(1757)		this->zpp_inner->validate_localCOM();
HXLINE(1758)		HX_VARI( Float,x) = -(this->zpp_inner->localCOMx);
HXDLIN(1758)		HX_VARI( Float,y) = -(this->zpp_inner->localCOMy);
HXDLIN(1758)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1758)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1758)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(1758)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1758)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1758)			ret->zpp_pool = null();
            		}
HXDLIN(1758)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1758)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1758)			{
HXLINE(1758)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1758)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(1758)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1758)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1758)					ret1->next = null();
            				}
HXDLIN(1758)				ret1->weak = false;
            			}
HXDLIN(1758)			ret1->_immutable = false;
HXDLIN(1758)			{
HXLINE(1758)				ret1->x = x;
HXDLIN(1758)				ret1->y = y;
            			}
HXDLIN(1758)			ret->zpp_inner = ret1;
HXDLIN(1758)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(1758)			bool _hx_tmp;
HXDLIN(1758)			{
HXLINE(1758)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN(1758)				if (hx::IsNotNull( _this->_validate )) {
HXLINE(1758)					_this->_validate();
            				}
            			}
HXDLIN(1758)			if ((ret->zpp_inner->x == x)) {
HXLINE(1758)				{
HXLINE(1758)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN(1758)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1758)						_this1->_validate();
            					}
            				}
HXDLIN(1758)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE(1758)				_hx_tmp = false;
            			}
HXDLIN(1758)			if (!(_hx_tmp)) {
HXLINE(1758)				{
HXLINE(1758)					ret->zpp_inner->x = x;
HXDLIN(1758)					ret->zpp_inner->y = y;
            				}
HXDLIN(1758)				{
HXLINE(1758)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN(1758)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE(1758)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN(1758)		ret->zpp_inner->weak = false;
HXDLIN(1758)		HX_VARI(  ::nape::geom::Vec2,dx) = ret;
HXLINE(1759)		this->translateShapes(dx);
HXLINE(1760)		HX_VARI(  ::nape::geom::Vec2,dx2) = this->localVectorToWorld(dx,null());
HXLINE(1761)		if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE(1761)			this->zpp_inner->setupPosition();
            		}
HXDLIN(1761)		this->zpp_inner->wrap_pos->subeq(dx2);
HXLINE(1762)		if ((this->zpp_inner->pre_posx < ::Math_obj::POSITIVE_INFINITY)) {
HXLINE(1772)			 ::zpp_nape::phys::ZPP_Body _hx_tmp1 = this->zpp_inner;
HXDLIN(1772)			Float _hx_tmp2 = _hx_tmp1->pre_posx;
HXDLIN(1772)			{
HXLINE(1772)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = dx2->zpp_inner;
HXDLIN(1772)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1772)					_this3->_validate();
            				}
            			}
HXDLIN(1772)			_hx_tmp1->pre_posx = (_hx_tmp2 - dx2->zpp_inner->x);
HXLINE(1773)			 ::zpp_nape::phys::ZPP_Body _hx_tmp3 = this->zpp_inner;
HXDLIN(1773)			Float _hx_tmp4 = _hx_tmp3->pre_posy;
HXDLIN(1773)			{
HXLINE(1773)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = dx2->zpp_inner;
HXDLIN(1773)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1773)					_this4->_validate();
            				}
            			}
HXDLIN(1773)			_hx_tmp3->pre_posy = (_hx_tmp4 - dx2->zpp_inner->y);
            		}
HXLINE(1775)		{
HXLINE(1775)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = dx->zpp_inner;
HXDLIN(1775)			dx->zpp_inner->outer = null();
HXDLIN(1775)			dx->zpp_inner = null();
HXDLIN(1775)			{
HXLINE(1775)				dx->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1775)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = dx;
            			}
HXDLIN(1775)			{
HXLINE(1775)				{
HXLINE(1775)					if (hx::IsNotNull( inner->outer )) {
HXLINE(1775)						inner->outer->zpp_inner = null();
HXDLIN(1775)						inner->outer = null();
            					}
HXDLIN(1775)					inner->_isimmutable = null();
HXDLIN(1775)					inner->_validate = null();
HXDLIN(1775)					inner->_invalidate = null();
            				}
HXDLIN(1775)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1775)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(1776)		{
HXLINE(1776)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = dx2->zpp_inner;
HXDLIN(1776)			dx2->zpp_inner->outer = null();
HXDLIN(1776)			dx2->zpp_inner = null();
HXDLIN(1776)			{
HXLINE(1776)				dx2->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1776)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = dx2;
            			}
HXDLIN(1776)			{
HXLINE(1776)				{
HXLINE(1776)					if (hx::IsNotNull( inner1->outer )) {
HXLINE(1776)						inner1->outer->zpp_inner = null();
HXDLIN(1776)						inner1->outer = null();
            					}
HXDLIN(1776)					inner1->_isimmutable = null();
HXDLIN(1776)					inner1->_validate = null();
HXDLIN(1776)					inner1->_invalidate = null();
            				}
HXDLIN(1776)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1776)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE(1777)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,align,return )

 ::nape::phys::Body Body_obj::rotate( ::nape::geom::Vec2 centre,Float angle){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1792_rotate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(centre,"centre")
            	HX_STACK_ARG(angle,"angle")
HXLINE(1804)		HX_VARI( bool,weak) = centre->zpp_inner->weak;
HXLINE(1805)		centre->zpp_inner->weak = false;
HXLINE(1806)		if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE(1806)			this->zpp_inner->setupPosition();
            		}
HXDLIN(1806)		HX_VARI(  ::nape::geom::Vec2,del) = this->zpp_inner->wrap_pos->sub(centre,null());
HXLINE(1807)		del->rotate(angle);
HXLINE(1808)		{
HXLINE(1808)			HX_VARI(  ::nape::geom::Vec2,position) = centre->add(del,true);
HXDLIN(1808)			{
HXLINE(1808)				if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE(1808)					this->zpp_inner->setupPosition();
            				}
HXDLIN(1808)				HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_pos;
HXDLIN(1808)				{
HXLINE(1808)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = position->zpp_inner;
HXDLIN(1808)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1808)						_this1->_validate();
            					}
            				}
HXDLIN(1808)				HX_VARI( Float,x) = position->zpp_inner->x;
HXDLIN(1808)				{
HXLINE(1808)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = position->zpp_inner;
HXDLIN(1808)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1808)						_this2->_validate();
            					}
            				}
HXDLIN(1808)				HX_VARI( Float,y) = position->zpp_inner->y;
HXDLIN(1808)				bool _hx_tmp;
HXDLIN(1808)				{
HXLINE(1808)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN(1808)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1808)						_this3->_validate();
            					}
            				}
HXDLIN(1808)				if ((_this->zpp_inner->x == x)) {
HXLINE(1808)					{
HXLINE(1808)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN(1808)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE(1808)							_this4->_validate();
            						}
            					}
HXDLIN(1808)					_hx_tmp = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE(1808)					_hx_tmp = false;
            				}
HXDLIN(1808)				if (!(_hx_tmp)) {
HXLINE(1808)					{
HXLINE(1808)						_this->zpp_inner->x = x;
HXDLIN(1808)						_this->zpp_inner->y = y;
            					}
HXDLIN(1808)					{
HXLINE(1808)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN(1808)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE(1808)							_this5->_invalidate(_this5);
            						}
            					}
            				}
HXDLIN(1808)				if (position->zpp_inner->weak) {
HXLINE(1808)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = position->zpp_inner;
HXDLIN(1808)					position->zpp_inner->outer = null();
HXDLIN(1808)					position->zpp_inner = null();
HXDLIN(1808)					{
HXLINE(1808)						position->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1808)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = position;
            					}
HXDLIN(1808)					{
HXLINE(1808)						{
HXLINE(1808)							if (hx::IsNotNull( inner->outer )) {
HXLINE(1808)								inner->outer->zpp_inner = null();
HXDLIN(1808)								inner->outer = null();
            							}
HXDLIN(1808)							inner->_isimmutable = null();
HXDLIN(1808)							inner->_validate = null();
HXDLIN(1808)							inner->_invalidate = null();
            						}
HXDLIN(1808)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1808)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
            			}
HXDLIN(1808)			if (hx::IsNull( this->zpp_inner->wrap_pos )) {
HXLINE(1808)				this->zpp_inner->setupPosition();
            			}
            		}
HXLINE(1809)		{
HXLINE(1809)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = del->zpp_inner;
HXDLIN(1809)			del->zpp_inner->outer = null();
HXDLIN(1809)			del->zpp_inner = null();
HXDLIN(1809)			{
HXLINE(1809)				del->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1809)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = del;
            			}
HXDLIN(1809)			{
HXLINE(1809)				{
HXLINE(1809)					if (hx::IsNotNull( inner1->outer )) {
HXLINE(1809)						inner1->outer->zpp_inner = null();
HXDLIN(1809)						inner1->outer = null();
            					}
HXDLIN(1809)					inner1->_isimmutable = null();
HXDLIN(1809)					inner1->_validate = null();
HXDLIN(1809)					inner1->_invalidate = null();
            				}
HXDLIN(1809)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1809)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE(1810)		{
HXLINE(1810)			HX_VARI(  ::nape::phys::Body,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1810)			{
HXLINE(1810)				HX_VARI( Float,rotation) = (_g->zpp_inner->rot + angle);
HXDLIN(1810)				{
HXLINE(1810)					_g->zpp_inner->immutable_midstep(HX_("Body::rotation",40,9d,24,6b));
HXDLIN(1810)					if ((_g->zpp_inner->rot != rotation)) {
HXLINE(1810)						_g->zpp_inner->rot = rotation;
HXDLIN(1810)						{
HXLINE(1810)							HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Body,_this6,"_this") = _g->zpp_inner;
HXDLIN(1810)							_this6->zip_axis = true;
HXDLIN(1810)							{
HXLINE(1810)								HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = _this6->shapes->head;
HXDLIN(1810)								while(hx::IsNotNull( cx_ite )){
HXLINE(1810)									HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s) = cx_ite->elt;
HXDLIN(1810)									{
HXLINE(1810)										if ((s->type == (int)1)) {
HXLINE(1810)											s->polygon->invalidate_gverts();
HXDLIN(1810)											s->polygon->invalidate_gaxi();
            										}
HXDLIN(1810)										s->invalidate_worldCOM();
            									}
HXDLIN(1810)									cx_ite = cx_ite->next;
            								}
            							}
HXDLIN(1810)							_this6->zip_worldCOM = true;
            						}
HXDLIN(1810)						_g->zpp_inner->wake();
            					}
            				}
            			}
            		}
HXLINE(1811)		centre->zpp_inner->weak = weak;
HXLINE(1812)		if (centre->zpp_inner->weak) {
HXLINE(1816)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner2,"inner") = centre->zpp_inner;
HXDLIN(1816)			centre->zpp_inner->outer = null();
HXDLIN(1816)			centre->zpp_inner = null();
HXDLIN(1816)			{
HXLINE(1816)				centre->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1816)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = centre;
            			}
HXDLIN(1816)			{
HXLINE(1816)				{
HXLINE(1816)					if (hx::IsNotNull( inner2->outer )) {
HXLINE(1816)						inner2->outer->zpp_inner = null();
HXDLIN(1816)						inner2->outer = null();
            					}
HXDLIN(1816)					inner2->_isimmutable = null();
HXDLIN(1816)					inner2->_validate = null();
HXDLIN(1816)					inner2->_invalidate = null();
            				}
HXDLIN(1816)				inner2->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1816)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner2;
            			}
            		}
HXLINE(1823)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,rotate,return )

 ::nape::phys::Body Body_obj::setShapeMaterials( ::nape::phys::Material material){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1834_setShapeMaterials)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(material,"material")
HXLINE(1835)		this->zpp_inner->immutable_midstep(HX_("Body::setShapeMaterials()",4c,b9,cd,69));
HXLINE(1839)		{
HXLINE(1840)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(1841)			while(hx::IsNotNull( cx_ite )){
HXLINE(1843)				{
HXLINE(1843)					HX_VARI(  ::nape::shape::Shape,_this) = cx_ite->elt->outer;
HXDLIN(1843)					{
HXLINE(1843)						_this->zpp_inner->immutable_midstep(HX_("Shape::material",a8,cd,a4,b9));
HXDLIN(1843)						_this->zpp_inner->setMaterial(material->zpp_inner);
            					}
HXDLIN(1843)					_this->zpp_inner->material->wrapper();
            				}
HXLINE(1844)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1847)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,setShapeMaterials,return )

 ::nape::phys::Body Body_obj::setShapeFilters( ::nape::dynamics::InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1858_setShapeFilters)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE(1859)		this->zpp_inner->immutable_midstep(HX_("Body::setShapeFilters()",1b,11,a6,d2));
HXLINE(1863)		{
HXLINE(1864)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(1865)			while(hx::IsNotNull( cx_ite )){
HXLINE(1867)				{
HXLINE(1867)					HX_VARI(  ::nape::shape::Shape,_this) = cx_ite->elt->outer;
HXDLIN(1867)					{
HXLINE(1867)						_this->zpp_inner->immutable_midstep(HX_("Shape::filter",79,9e,c6,67));
HXDLIN(1867)						_this->zpp_inner->setFilter(filter->zpp_inner);
            					}
HXDLIN(1867)					_this->zpp_inner->filter->wrapper();
            				}
HXLINE(1868)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1871)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,setShapeFilters,return )

 ::nape::phys::Body Body_obj::setShapeFluidProperties( ::nape::phys::FluidProperties fluidProperties){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1882_setShapeFluidProperties)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fluidProperties,"fluidProperties")
HXLINE(1883)		this->zpp_inner->immutable_midstep(HX_("Body::setShapeFluidProperties()",7d,2d,a4,e7));
HXLINE(1887)		{
HXLINE(1888)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(1889)			while(hx::IsNotNull( cx_ite )){
HXLINE(1891)				{
HXLINE(1891)					HX_VARI(  ::nape::shape::Shape,_this) = cx_ite->elt->outer;
HXDLIN(1891)					_this->zpp_inner->setFluid(fluidProperties->zpp_inner);
HXDLIN(1891)					{
HXLINE(1891)						_this->zpp_inner->immutable_midstep(HX_("Shape::fluidProperties",bc,2b,f3,66));
HXDLIN(1891)						if (hx::IsNull( _this->zpp_inner->fluidProperties )) {
HXLINE(1891)							HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Shape,_this1,"_this") = _this->zpp_inner;
HXDLIN(1891)							_this1->setFluid( ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,null(),null())->zpp_inner);
            						}
HXDLIN(1891)						_this->zpp_inner->fluidProperties->wrapper();
            					}
            				}
HXLINE(1892)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(1895)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,setShapeFluidProperties,return )

 ::nape::geom::Vec2 Body_obj::get_localCOM(){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1907_get_localCOM)
            	HX_STACK_THIS(this)
HXLINE(1911)		if (hx::IsNull( this->zpp_inner->wrap_localCOM )) {
HXLINE(1912)			HX_VARI( Float,x) = this->zpp_inner->localCOMx;
HXDLIN(1912)			HX_VARI( Float,y) = this->zpp_inner->localCOMy;
HXDLIN(1912)			HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1912)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1912)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(1912)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1912)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1912)				ret->zpp_pool = null();
            			}
HXDLIN(1912)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1912)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1912)				{
HXLINE(1912)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1912)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(1912)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1912)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1912)						ret1->next = null();
            					}
HXDLIN(1912)					ret1->weak = false;
            				}
HXDLIN(1912)				ret1->_immutable = false;
HXDLIN(1912)				{
HXLINE(1912)					ret1->x = x;
HXDLIN(1912)					ret1->y = y;
            				}
HXDLIN(1912)				ret->zpp_inner = ret1;
HXDLIN(1912)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(1912)				bool _hx_tmp;
HXDLIN(1912)				{
HXLINE(1912)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN(1912)					if (hx::IsNotNull( _this->_validate )) {
HXLINE(1912)						_this->_validate();
            					}
            				}
HXDLIN(1912)				if ((ret->zpp_inner->x == x)) {
HXLINE(1912)					{
HXLINE(1912)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN(1912)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1912)							_this1->_validate();
            						}
            					}
HXDLIN(1912)					_hx_tmp = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE(1912)					_hx_tmp = false;
            				}
HXDLIN(1912)				if (!(_hx_tmp)) {
HXLINE(1912)					{
HXLINE(1912)						ret->zpp_inner->x = x;
HXDLIN(1912)						ret->zpp_inner->y = y;
            					}
HXDLIN(1912)					{
HXLINE(1912)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN(1912)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE(1912)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN(1912)			ret->zpp_inner->weak = false;
HXDLIN(1912)			this->zpp_inner->wrap_localCOM = ret;
HXLINE(1913)			this->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
HXLINE(1914)			this->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
HXLINE(1915)			this->zpp_inner->wrap_localCOM->zpp_inner->_validate = this->zpp_inner->getlocalCOM_dyn();
            		}
HXLINE(1917)		return this->zpp_inner->wrap_localCOM;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_localCOM,return )

 ::nape::geom::Vec2 Body_obj::get_worldCOM(){
            	HX_GC_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1929_get_worldCOM)
            	HX_STACK_THIS(this)
HXLINE(1933)		if (hx::IsNull( this->zpp_inner->wrap_worldCOM )) {
HXLINE(1934)			HX_VARI( Float,x) = this->zpp_inner->worldCOMx;
HXDLIN(1934)			HX_VARI( Float,y) = this->zpp_inner->worldCOMy;
HXDLIN(1934)			HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(1934)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(1934)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE(1934)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(1934)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(1934)				ret->zpp_pool = null();
            			}
HXDLIN(1934)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE(1934)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(1934)				{
HXLINE(1934)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(1934)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE(1934)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(1934)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(1934)						ret1->next = null();
            					}
HXDLIN(1934)					ret1->weak = false;
            				}
HXDLIN(1934)				ret1->_immutable = false;
HXDLIN(1934)				{
HXLINE(1934)					ret1->x = x;
HXDLIN(1934)					ret1->y = y;
            				}
HXDLIN(1934)				ret->zpp_inner = ret1;
HXDLIN(1934)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE(1934)				bool _hx_tmp;
HXDLIN(1934)				{
HXLINE(1934)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN(1934)					if (hx::IsNotNull( _this->_validate )) {
HXLINE(1934)						_this->_validate();
            					}
            				}
HXDLIN(1934)				if ((ret->zpp_inner->x == x)) {
HXLINE(1934)					{
HXLINE(1934)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN(1934)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1934)							_this1->_validate();
            						}
            					}
HXDLIN(1934)					_hx_tmp = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE(1934)					_hx_tmp = false;
            				}
HXDLIN(1934)				if (!(_hx_tmp)) {
HXLINE(1934)					{
HXLINE(1934)						ret->zpp_inner->x = x;
HXDLIN(1934)						ret->zpp_inner->y = y;
            					}
HXDLIN(1934)					{
HXLINE(1934)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN(1934)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE(1934)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN(1934)			ret->zpp_inner->weak = false;
HXDLIN(1934)			this->zpp_inner->wrap_worldCOM = ret;
HXLINE(1935)			this->zpp_inner->wrap_worldCOM->zpp_inner->_inuse = true;
HXLINE(1936)			this->zpp_inner->wrap_worldCOM->zpp_inner->_immutable = true;
HXLINE(1937)			this->zpp_inner->wrap_worldCOM->zpp_inner->_validate = this->zpp_inner->getworldCOM_dyn();
            		}
HXLINE(1939)		return this->zpp_inner->wrap_worldCOM;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,get_worldCOM,return )

 ::nape::geom::Vec3 Body_obj::normalImpulse( ::nape::phys::Body body,hx::Null< bool >  __o_freshOnly){
bool freshOnly = __o_freshOnly.Default(false);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_1954_normalImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(freshOnly,"freshOnly")
HXLINE(1955)		HX_VARI( Float,retx) = (int)0;
HXLINE(1956)		HX_VARI( Float,rety) = (int)0;
HXLINE(1973)		HX_VARI( Float,retz) = (int)0;
HXLINE(1976)		{
HXLINE(1976)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(1976)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(1976)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(1976)			while(true){
HXLINE(1976)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(1976)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(1976)				_g->zpp_critical = true;
HXDLIN(1976)				bool _hx_tmp;
HXDLIN(1976)				if ((_g->zpp_i < length)) {
HXLINE(1976)					_hx_tmp = true;
            				}
            				else {
HXLINE(1976)					{
HXLINE(1976)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(1976)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(1976)						_g->zpp_inner = null();
            					}
HXDLIN(1976)					_hx_tmp = false;
            				}
HXDLIN(1976)				if (!(_hx_tmp)) {
HXLINE(1976)					goto _hx_goto_94;
            				}
HXDLIN(1976)				_g->zpp_critical = false;
HXLINE(1977)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(1978)				if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(1978)					continue;
            				}
HXLINE(1979)				bool _hx_tmp1;
HXDLIN(1979)				bool _hx_tmp2;
HXDLIN(1979)				if (hx::IsNotNull( body )) {
HXLINE(1979)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(1979)					_hx_tmp2 = false;
            				}
HXDLIN(1979)				if (_hx_tmp2) {
HXLINE(1979)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(1979)					_hx_tmp1 = false;
            				}
HXDLIN(1979)				if (_hx_tmp1) {
HXLINE(1979)					continue;
            				}
HXLINE(1980)				{
HXLINE(1981)					HX_VARI(  ::nape::dynamics::Arbiter,_this) = arb->wrapper();
HXDLIN(1981)					 ::nape::dynamics::CollisionArbiter imp;
HXDLIN(1981)					if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(1981)						imp = _this->zpp_inner->colarb->outer_zn;
            					}
            					else {
HXLINE(1981)						imp = null();
            					}
HXDLIN(1981)					HX_VARI_NAME(  ::nape::geom::Vec3,imp1,"imp") = imp->normalImpulse(hx::ObjectPtr<OBJ_>(this),freshOnly);
HXLINE(1982)					{
HXLINE(1984)						{
HXLINE(1994)							{
HXLINE(1994)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp1->zpp_inner;
HXDLIN(1994)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(1994)									_this1->_validate();
            								}
            							}
HXDLIN(1994)							retx = (retx + imp1->zpp_inner->x);
HXLINE(1995)							{
HXLINE(1995)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp1->zpp_inner;
HXDLIN(1995)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(1995)									_this2->_validate();
            								}
            							}
HXDLIN(1995)							rety = (rety + imp1->zpp_inner->y);
            						}
HXLINE(1997)						{
HXLINE(1997)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = imp1->zpp_inner;
HXDLIN(1997)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1997)								_this3->_validate();
            							}
            						}
HXDLIN(1997)						retz = (retz + imp1->zpp_inner->z);
            					}
HXLINE(1999)					imp1->dispose();
            				}
            			}
            			_hx_goto_94:;
            		}
HXLINE(2003)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,normalImpulse,return )

 ::nape::geom::Vec3 Body_obj::tangentImpulse( ::nape::phys::Body body,hx::Null< bool >  __o_freshOnly){
bool freshOnly = __o_freshOnly.Default(false);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2018_tangentImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(freshOnly,"freshOnly")
HXLINE(2019)		HX_VARI( Float,retx) = (int)0;
HXLINE(2020)		HX_VARI( Float,rety) = (int)0;
HXLINE(2037)		HX_VARI( Float,retz) = (int)0;
HXLINE(2040)		{
HXLINE(2040)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(2040)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(2040)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(2040)			while(true){
HXLINE(2040)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2040)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(2040)				_g->zpp_critical = true;
HXDLIN(2040)				bool _hx_tmp;
HXDLIN(2040)				if ((_g->zpp_i < length)) {
HXLINE(2040)					_hx_tmp = true;
            				}
            				else {
HXLINE(2040)					{
HXLINE(2040)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(2040)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(2040)						_g->zpp_inner = null();
            					}
HXDLIN(2040)					_hx_tmp = false;
            				}
HXDLIN(2040)				if (!(_hx_tmp)) {
HXLINE(2040)					goto _hx_goto_96;
            				}
HXDLIN(2040)				_g->zpp_critical = false;
HXLINE(2041)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(2042)				if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(2042)					continue;
            				}
HXLINE(2043)				bool _hx_tmp1;
HXDLIN(2043)				bool _hx_tmp2;
HXDLIN(2043)				if (hx::IsNotNull( body )) {
HXLINE(2043)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(2043)					_hx_tmp2 = false;
            				}
HXDLIN(2043)				if (_hx_tmp2) {
HXLINE(2043)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(2043)					_hx_tmp1 = false;
            				}
HXDLIN(2043)				if (_hx_tmp1) {
HXLINE(2043)					continue;
            				}
HXLINE(2044)				{
HXLINE(2045)					HX_VARI(  ::nape::dynamics::Arbiter,_this) = arb->wrapper();
HXDLIN(2045)					 ::nape::dynamics::CollisionArbiter imp;
HXDLIN(2045)					if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(2045)						imp = _this->zpp_inner->colarb->outer_zn;
            					}
            					else {
HXLINE(2045)						imp = null();
            					}
HXDLIN(2045)					HX_VARI_NAME(  ::nape::geom::Vec3,imp1,"imp") = imp->tangentImpulse(hx::ObjectPtr<OBJ_>(this),freshOnly);
HXLINE(2046)					{
HXLINE(2048)						{
HXLINE(2058)							{
HXLINE(2058)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp1->zpp_inner;
HXDLIN(2058)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2058)									_this1->_validate();
            								}
            							}
HXDLIN(2058)							retx = (retx + imp1->zpp_inner->x);
HXLINE(2059)							{
HXLINE(2059)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp1->zpp_inner;
HXDLIN(2059)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2059)									_this2->_validate();
            								}
            							}
HXDLIN(2059)							rety = (rety + imp1->zpp_inner->y);
            						}
HXLINE(2061)						{
HXLINE(2061)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = imp1->zpp_inner;
HXDLIN(2061)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE(2061)								_this3->_validate();
            							}
            						}
HXDLIN(2061)						retz = (retz + imp1->zpp_inner->z);
            					}
HXLINE(2063)					imp1->dispose();
            				}
            			}
            			_hx_goto_96:;
            		}
HXLINE(2067)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,tangentImpulse,return )

 ::nape::geom::Vec3 Body_obj::totalContactsImpulse( ::nape::phys::Body body,hx::Null< bool >  __o_freshOnly){
bool freshOnly = __o_freshOnly.Default(false);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2082_totalContactsImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(freshOnly,"freshOnly")
HXLINE(2083)		HX_VARI( Float,retx) = (int)0;
HXLINE(2084)		HX_VARI( Float,rety) = (int)0;
HXLINE(2101)		HX_VARI( Float,retz) = (int)0;
HXLINE(2104)		{
HXLINE(2104)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(2104)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(2104)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(2104)			while(true){
HXLINE(2104)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2104)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(2104)				_g->zpp_critical = true;
HXDLIN(2104)				bool _hx_tmp;
HXDLIN(2104)				if ((_g->zpp_i < length)) {
HXLINE(2104)					_hx_tmp = true;
            				}
            				else {
HXLINE(2104)					{
HXLINE(2104)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(2104)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(2104)						_g->zpp_inner = null();
            					}
HXDLIN(2104)					_hx_tmp = false;
            				}
HXDLIN(2104)				if (!(_hx_tmp)) {
HXLINE(2104)					goto _hx_goto_98;
            				}
HXDLIN(2104)				_g->zpp_critical = false;
HXLINE(2105)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(2106)				if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(2106)					continue;
            				}
HXLINE(2107)				bool _hx_tmp1;
HXDLIN(2107)				bool _hx_tmp2;
HXDLIN(2107)				if (hx::IsNotNull( body )) {
HXLINE(2107)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(2107)					_hx_tmp2 = false;
            				}
HXDLIN(2107)				if (_hx_tmp2) {
HXLINE(2107)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(2107)					_hx_tmp1 = false;
            				}
HXDLIN(2107)				if (_hx_tmp1) {
HXLINE(2107)					continue;
            				}
HXLINE(2108)				{
HXLINE(2109)					HX_VARI(  ::nape::dynamics::Arbiter,_this) = arb->wrapper();
HXDLIN(2109)					 ::nape::dynamics::CollisionArbiter imp;
HXDLIN(2109)					if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(2109)						imp = _this->zpp_inner->colarb->outer_zn;
            					}
            					else {
HXLINE(2109)						imp = null();
            					}
HXDLIN(2109)					HX_VARI_NAME(  ::nape::geom::Vec3,imp1,"imp") = imp->totalImpulse(hx::ObjectPtr<OBJ_>(this),freshOnly);
HXLINE(2110)					{
HXLINE(2112)						{
HXLINE(2122)							{
HXLINE(2122)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp1->zpp_inner;
HXDLIN(2122)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2122)									_this1->_validate();
            								}
            							}
HXDLIN(2122)							retx = (retx + imp1->zpp_inner->x);
HXLINE(2123)							{
HXLINE(2123)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp1->zpp_inner;
HXDLIN(2123)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2123)									_this2->_validate();
            								}
            							}
HXDLIN(2123)							rety = (rety + imp1->zpp_inner->y);
            						}
HXLINE(2125)						{
HXLINE(2125)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = imp1->zpp_inner;
HXDLIN(2125)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE(2125)								_this3->_validate();
            							}
            						}
HXDLIN(2125)						retz = (retz + imp1->zpp_inner->z);
            					}
HXLINE(2127)					imp1->dispose();
            				}
            			}
            			_hx_goto_98:;
            		}
HXLINE(2131)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,totalContactsImpulse,return )

Float Body_obj::rollingImpulse( ::nape::phys::Body body,hx::Null< bool >  __o_freshOnly){
bool freshOnly = __o_freshOnly.Default(false);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2146_rollingImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(freshOnly,"freshOnly")
HXLINE(2147)		HX_VARI( Float,ret) = ((Float)0.0);
HXLINE(2150)		{
HXLINE(2150)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(2150)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(2150)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(2150)			while(true){
HXLINE(2150)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2150)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(2150)				_g->zpp_critical = true;
HXDLIN(2150)				bool _hx_tmp;
HXDLIN(2150)				if ((_g->zpp_i < length)) {
HXLINE(2150)					_hx_tmp = true;
            				}
            				else {
HXLINE(2150)					{
HXLINE(2150)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(2150)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(2150)						_g->zpp_inner = null();
            					}
HXDLIN(2150)					_hx_tmp = false;
            				}
HXDLIN(2150)				if (!(_hx_tmp)) {
HXLINE(2150)					goto _hx_goto_100;
            				}
HXDLIN(2150)				_g->zpp_critical = false;
HXLINE(2151)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(2152)				if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(2152)					continue;
            				}
HXLINE(2153)				bool _hx_tmp1;
HXDLIN(2153)				bool _hx_tmp2;
HXDLIN(2153)				if (hx::IsNotNull( body )) {
HXLINE(2153)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(2153)					_hx_tmp2 = false;
            				}
HXDLIN(2153)				if (_hx_tmp2) {
HXLINE(2153)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(2153)					_hx_tmp1 = false;
            				}
HXDLIN(2153)				if (_hx_tmp1) {
HXLINE(2153)					continue;
            				}
HXLINE(2155)				HX_VARI(  ::nape::dynamics::Arbiter,_this) = arb->wrapper();
HXDLIN(2155)				 ::nape::dynamics::CollisionArbiter ret1;
HXDLIN(2155)				if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE(2155)					ret1 = _this->zpp_inner->colarb->outer_zn;
            				}
            				else {
HXLINE(2155)					ret1 = null();
            				}
HXDLIN(2155)				ret = (ret + ret1->rollingImpulse(hx::ObjectPtr<OBJ_>(this),freshOnly));
            			}
            			_hx_goto_100:;
            		}
HXLINE(2159)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,rollingImpulse,return )

 ::nape::geom::Vec3 Body_obj::buoyancyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2172_buoyancyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE(2173)		HX_VARI( Float,retx) = (int)0;
HXLINE(2174)		HX_VARI( Float,rety) = (int)0;
HXLINE(2191)		HX_VARI( Float,retz) = (int)0;
HXLINE(2194)		{
HXLINE(2194)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(2194)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(2194)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(2194)			while(true){
HXLINE(2194)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2194)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(2194)				_g->zpp_critical = true;
HXDLIN(2194)				bool _hx_tmp;
HXDLIN(2194)				if ((_g->zpp_i < length)) {
HXLINE(2194)					_hx_tmp = true;
            				}
            				else {
HXLINE(2194)					{
HXLINE(2194)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(2194)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(2194)						_g->zpp_inner = null();
            					}
HXDLIN(2194)					_hx_tmp = false;
            				}
HXDLIN(2194)				if (!(_hx_tmp)) {
HXLINE(2194)					goto _hx_goto_102;
            				}
HXDLIN(2194)				_g->zpp_critical = false;
HXLINE(2195)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(2196)				if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(2196)					continue;
            				}
HXLINE(2197)				bool _hx_tmp1;
HXDLIN(2197)				bool _hx_tmp2;
HXDLIN(2197)				if (hx::IsNotNull( body )) {
HXLINE(2197)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(2197)					_hx_tmp2 = false;
            				}
HXDLIN(2197)				if (_hx_tmp2) {
HXLINE(2197)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(2197)					_hx_tmp1 = false;
            				}
HXDLIN(2197)				if (_hx_tmp1) {
HXLINE(2197)					continue;
            				}
HXLINE(2198)				{
HXLINE(2199)					HX_VARI(  ::nape::dynamics::Arbiter,_this) = arb->wrapper();
HXDLIN(2199)					 ::nape::dynamics::FluidArbiter imp;
HXDLIN(2199)					if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(2199)						imp = _this->zpp_inner->fluidarb->outer_zn;
            					}
            					else {
HXLINE(2199)						imp = null();
            					}
HXDLIN(2199)					HX_VARI_NAME(  ::nape::geom::Vec3,imp1,"imp") = imp->buoyancyImpulse(hx::ObjectPtr<OBJ_>(this));
HXLINE(2200)					{
HXLINE(2202)						{
HXLINE(2212)							{
HXLINE(2212)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp1->zpp_inner;
HXDLIN(2212)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2212)									_this1->_validate();
            								}
            							}
HXDLIN(2212)							retx = (retx + imp1->zpp_inner->x);
HXLINE(2213)							{
HXLINE(2213)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp1->zpp_inner;
HXDLIN(2213)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2213)									_this2->_validate();
            								}
            							}
HXDLIN(2213)							rety = (rety + imp1->zpp_inner->y);
            						}
HXLINE(2215)						{
HXLINE(2215)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = imp1->zpp_inner;
HXDLIN(2215)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE(2215)								_this3->_validate();
            							}
            						}
HXDLIN(2215)						retz = (retz + imp1->zpp_inner->z);
            					}
HXLINE(2217)					imp1->dispose();
            				}
            			}
            			_hx_goto_102:;
            		}
HXLINE(2221)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,buoyancyImpulse,return )

 ::nape::geom::Vec3 Body_obj::dragImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2234_dragImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE(2235)		HX_VARI( Float,retx) = (int)0;
HXLINE(2236)		HX_VARI( Float,rety) = (int)0;
HXLINE(2253)		HX_VARI( Float,retz) = (int)0;
HXLINE(2256)		{
HXLINE(2256)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(2256)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(2256)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(2256)			while(true){
HXLINE(2256)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2256)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(2256)				_g->zpp_critical = true;
HXDLIN(2256)				bool _hx_tmp;
HXDLIN(2256)				if ((_g->zpp_i < length)) {
HXLINE(2256)					_hx_tmp = true;
            				}
            				else {
HXLINE(2256)					{
HXLINE(2256)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(2256)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(2256)						_g->zpp_inner = null();
            					}
HXDLIN(2256)					_hx_tmp = false;
            				}
HXDLIN(2256)				if (!(_hx_tmp)) {
HXLINE(2256)					goto _hx_goto_104;
            				}
HXDLIN(2256)				_g->zpp_critical = false;
HXLINE(2257)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(2258)				if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(2258)					continue;
            				}
HXLINE(2259)				bool _hx_tmp1;
HXDLIN(2259)				bool _hx_tmp2;
HXDLIN(2259)				if (hx::IsNotNull( body )) {
HXLINE(2259)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(2259)					_hx_tmp2 = false;
            				}
HXDLIN(2259)				if (_hx_tmp2) {
HXLINE(2259)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(2259)					_hx_tmp1 = false;
            				}
HXDLIN(2259)				if (_hx_tmp1) {
HXLINE(2259)					continue;
            				}
HXLINE(2260)				{
HXLINE(2261)					HX_VARI(  ::nape::dynamics::Arbiter,_this) = arb->wrapper();
HXDLIN(2261)					 ::nape::dynamics::FluidArbiter imp;
HXDLIN(2261)					if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(2261)						imp = _this->zpp_inner->fluidarb->outer_zn;
            					}
            					else {
HXLINE(2261)						imp = null();
            					}
HXDLIN(2261)					HX_VARI_NAME(  ::nape::geom::Vec3,imp1,"imp") = imp->dragImpulse(hx::ObjectPtr<OBJ_>(this));
HXLINE(2262)					{
HXLINE(2264)						{
HXLINE(2274)							{
HXLINE(2274)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp1->zpp_inner;
HXDLIN(2274)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2274)									_this1->_validate();
            								}
            							}
HXDLIN(2274)							retx = (retx + imp1->zpp_inner->x);
HXLINE(2275)							{
HXLINE(2275)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp1->zpp_inner;
HXDLIN(2275)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2275)									_this2->_validate();
            								}
            							}
HXDLIN(2275)							rety = (rety + imp1->zpp_inner->y);
            						}
HXLINE(2277)						{
HXLINE(2277)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = imp1->zpp_inner;
HXDLIN(2277)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE(2277)								_this3->_validate();
            							}
            						}
HXDLIN(2277)						retz = (retz + imp1->zpp_inner->z);
            					}
HXLINE(2279)					imp1->dispose();
            				}
            			}
            			_hx_goto_104:;
            		}
HXLINE(2283)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,dragImpulse,return )

 ::nape::geom::Vec3 Body_obj::totalFluidImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2296_totalFluidImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE(2297)		HX_VARI( Float,retx) = (int)0;
HXLINE(2298)		HX_VARI( Float,rety) = (int)0;
HXLINE(2315)		HX_VARI( Float,retz) = (int)0;
HXLINE(2318)		{
HXLINE(2318)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(2318)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(2318)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(2318)			while(true){
HXLINE(2318)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2318)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(2318)				_g->zpp_critical = true;
HXDLIN(2318)				bool _hx_tmp;
HXDLIN(2318)				if ((_g->zpp_i < length)) {
HXLINE(2318)					_hx_tmp = true;
            				}
            				else {
HXLINE(2318)					{
HXLINE(2318)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(2318)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(2318)						_g->zpp_inner = null();
            					}
HXDLIN(2318)					_hx_tmp = false;
            				}
HXDLIN(2318)				if (!(_hx_tmp)) {
HXLINE(2318)					goto _hx_goto_106;
            				}
HXDLIN(2318)				_g->zpp_critical = false;
HXLINE(2319)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(2320)				if ((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(2320)					continue;
            				}
HXLINE(2321)				bool _hx_tmp1;
HXDLIN(2321)				bool _hx_tmp2;
HXDLIN(2321)				if (hx::IsNotNull( body )) {
HXLINE(2321)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(2321)					_hx_tmp2 = false;
            				}
HXDLIN(2321)				if (_hx_tmp2) {
HXLINE(2321)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(2321)					_hx_tmp1 = false;
            				}
HXDLIN(2321)				if (_hx_tmp1) {
HXLINE(2321)					continue;
            				}
HXLINE(2322)				{
HXLINE(2323)					HX_VARI(  ::nape::dynamics::Arbiter,_this) = arb->wrapper();
HXDLIN(2323)					 ::nape::dynamics::FluidArbiter imp;
HXDLIN(2323)					if ((_this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE(2323)						imp = _this->zpp_inner->fluidarb->outer_zn;
            					}
            					else {
HXLINE(2323)						imp = null();
            					}
HXDLIN(2323)					HX_VARI_NAME(  ::nape::geom::Vec3,imp1,"imp") = imp->totalImpulse(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(2324)					{
HXLINE(2326)						{
HXLINE(2336)							{
HXLINE(2336)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp1->zpp_inner;
HXDLIN(2336)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2336)									_this1->_validate();
            								}
            							}
HXDLIN(2336)							retx = (retx + imp1->zpp_inner->x);
HXLINE(2337)							{
HXLINE(2337)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp1->zpp_inner;
HXDLIN(2337)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2337)									_this2->_validate();
            								}
            							}
HXDLIN(2337)							rety = (rety + imp1->zpp_inner->y);
            						}
HXLINE(2339)						{
HXLINE(2339)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = imp1->zpp_inner;
HXDLIN(2339)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE(2339)								_this3->_validate();
            							}
            						}
HXDLIN(2339)						retz = (retz + imp1->zpp_inner->z);
            					}
HXLINE(2341)					imp1->dispose();
            				}
            			}
            			_hx_goto_106:;
            		}
HXLINE(2345)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,totalFluidImpulse,return )

 ::nape::geom::Vec3 Body_obj::constraintsImpulse(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2353_constraintsImpulse)
            	HX_STACK_THIS(this)
HXLINE(2354)		HX_VARI( Float,retx) = (int)0;
HXLINE(2355)		HX_VARI( Float,rety) = (int)0;
HXLINE(2372)		HX_VARI( Float,retz) = (int)0;
HXLINE(2373)		{
HXLINE(2374)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cx_ite) = this->zpp_inner->constraints->head;
HXLINE(2375)			while(hx::IsNotNull( cx_ite )){
HXLINE(2377)				{
HXLINE(2378)					HX_VARI(  ::nape::geom::Vec3,imp) = cx_ite->elt->outer->bodyImpulse(hx::ObjectPtr<OBJ_>(this));
HXLINE(2379)					{
HXLINE(2381)						{
HXLINE(2391)							{
HXLINE(2391)								HX_VARI(  ::zpp_nape::geom::ZPP_Vec3,_this) = imp->zpp_inner;
HXDLIN(2391)								if (hx::IsNotNull( _this->_validate )) {
HXLINE(2391)									_this->_validate();
            								}
            							}
HXDLIN(2391)							retx = (retx + imp->zpp_inner->x);
HXLINE(2392)							{
HXLINE(2392)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp->zpp_inner;
HXDLIN(2392)								if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2392)									_this1->_validate();
            								}
            							}
HXDLIN(2392)							rety = (rety + imp->zpp_inner->y);
            						}
HXLINE(2394)						{
HXLINE(2394)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp->zpp_inner;
HXDLIN(2394)							if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2394)								_this2->_validate();
            							}
            						}
HXDLIN(2394)						retz = (retz + imp->zpp_inner->z);
            					}
HXLINE(2396)					imp->dispose();
            				}
HXLINE(2398)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(2401)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,constraintsImpulse,return )

 ::nape::geom::Vec3 Body_obj::totalImpulse( ::nape::phys::Body body,hx::Null< bool >  __o_freshOnly){
bool freshOnly = __o_freshOnly.Default(false);
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2419_totalImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(freshOnly,"freshOnly")
HXLINE(2420)		HX_VARI( Float,retx) = (int)0;
HXLINE(2421)		HX_VARI( Float,rety) = (int)0;
HXLINE(2438)		HX_VARI( Float,retz) = (int)0;
HXLINE(2440)		{
HXLINE(2440)			if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE(2440)				this->zpp_inner->wrap_arbiters = ::zpp_nape::util::ZPP_ArbiterList_obj::get(this->zpp_inner->arbiters,true);
            			}
HXDLIN(2440)			HX_VARI(  ::nape::dynamics::ArbiterIterator,_g) = this->zpp_inner->wrap_arbiters->iterator();
HXDLIN(2440)			while(true){
HXLINE(2440)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(2440)				HX_VARI( int,length) = _g->zpp_inner->zpp_gl();
HXDLIN(2440)				_g->zpp_critical = true;
HXDLIN(2440)				bool _hx_tmp;
HXDLIN(2440)				if ((_g->zpp_i < length)) {
HXLINE(2440)					_hx_tmp = true;
            				}
            				else {
HXLINE(2440)					{
HXLINE(2440)						_g->zpp_next = ::nape::dynamics::ArbiterIterator_obj::zpp_pool;
HXDLIN(2440)						::nape::dynamics::ArbiterIterator_obj::zpp_pool = _g;
HXDLIN(2440)						_g->zpp_inner = null();
            					}
HXDLIN(2440)					_hx_tmp = false;
            				}
HXDLIN(2440)				if (!(_hx_tmp)) {
HXLINE(2440)					goto _hx_goto_110;
            				}
HXDLIN(2440)				_g->zpp_critical = false;
HXLINE(2441)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Arbiter,arb) = _g->zpp_inner->at(_g->zpp_i++)->zpp_inner;
HXLINE(2442)				if ((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR)) {
HXLINE(2442)					continue;
            				}
HXLINE(2443)				bool _hx_tmp1;
HXDLIN(2443)				bool _hx_tmp2;
HXDLIN(2443)				if (hx::IsNotNull( body )) {
HXLINE(2443)					_hx_tmp2 = hx::IsNotEq( arb->b2,body->zpp_inner );
            				}
            				else {
HXLINE(2443)					_hx_tmp2 = false;
            				}
HXDLIN(2443)				if (_hx_tmp2) {
HXLINE(2443)					_hx_tmp1 = hx::IsNotEq( arb->b1,body->zpp_inner );
            				}
            				else {
HXLINE(2443)					_hx_tmp1 = false;
            				}
HXDLIN(2443)				if (_hx_tmp1) {
HXLINE(2443)					continue;
            				}
HXLINE(2444)				HX_VARI(  ::nape::geom::Vec3,imp) = arb->wrapper()->totalImpulse(hx::ObjectPtr<OBJ_>(this),freshOnly);
HXLINE(2445)				{
HXLINE(2447)					{
HXLINE(2457)						{
HXLINE(2457)							HX_VARI(  ::zpp_nape::geom::ZPP_Vec3,_this) = imp->zpp_inner;
HXDLIN(2457)							if (hx::IsNotNull( _this->_validate )) {
HXLINE(2457)								_this->_validate();
            							}
            						}
HXDLIN(2457)						retx = (retx + imp->zpp_inner->x);
HXLINE(2458)						{
HXLINE(2458)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = imp->zpp_inner;
HXDLIN(2458)							if (hx::IsNotNull( _this1->_validate )) {
HXLINE(2458)								_this1->_validate();
            							}
            						}
HXDLIN(2458)						rety = (rety + imp->zpp_inner->y);
            					}
HXLINE(2460)					{
HXLINE(2460)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = imp->zpp_inner;
HXDLIN(2460)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE(2460)							_this2->_validate();
            						}
            					}
HXDLIN(2460)					retz = (retz + imp->zpp_inner->z);
            				}
HXLINE(2462)				imp->dispose();
            			}
            			_hx_goto_110:;
            		}
HXLINE(2464)		{
HXLINE(2465)			HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cx_ite) = this->zpp_inner->constraints->head;
HXLINE(2466)			while(hx::IsNotNull( cx_ite )){
HXLINE(2467)				HX_VARI(  ::zpp_nape::constraint::ZPP_Constraint,con) = cx_ite->elt;
HXLINE(2469)				if (con->active) {
HXLINE(2470)					HX_VARI_NAME(  ::nape::geom::Vec3,imp1,"imp") = con->outer->bodyImpulse(hx::ObjectPtr<OBJ_>(this));
HXLINE(2471)					{
HXLINE(2473)						{
HXLINE(2483)							{
HXLINE(2483)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = imp1->zpp_inner;
HXDLIN(2483)								if (hx::IsNotNull( _this3->_validate )) {
HXLINE(2483)									_this3->_validate();
            								}
            							}
HXDLIN(2483)							retx = (retx + imp1->zpp_inner->x);
HXLINE(2484)							{
HXLINE(2484)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this4,"_this") = imp1->zpp_inner;
HXDLIN(2484)								if (hx::IsNotNull( _this4->_validate )) {
HXLINE(2484)									_this4->_validate();
            								}
            							}
HXDLIN(2484)							rety = (rety + imp1->zpp_inner->y);
            						}
HXLINE(2486)						{
HXLINE(2486)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this5,"_this") = imp1->zpp_inner;
HXDLIN(2486)							if (hx::IsNotNull( _this5->_validate )) {
HXLINE(2486)								_this5->_validate();
            							}
            						}
HXDLIN(2486)						retz = (retz + imp1->zpp_inner->z);
            					}
HXLINE(2488)					imp1->dispose();
            				}
HXLINE(2491)				cx_ite = cx_ite->next;
            			}
            		}
HXLINE(2494)		return ::nape::geom::Vec3_obj::get(retx,rety,retz);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Body_obj,totalImpulse,return )

bool Body_obj::contains( ::nape::geom::Vec2 point){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2504_contains)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE(2513)		HX_VARI( bool,wasWeak) = point->zpp_inner->weak;
HXLINE(2514)		point->zpp_inner->weak = false;
HXLINE(2515)		HX_VAR( bool,retvar);
HXLINE(2516)		{
HXLINE(2517)			retvar = false;
HXLINE(2518)			{
HXLINE(2519)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Shape,cx_ite) = this->zpp_inner->shapes->head;
HXLINE(2520)				while(hx::IsNotNull( cx_ite )){
HXLINE(2523)					if (cx_ite->elt->outer->contains(point)) {
HXLINE(2524)						retvar = true;
HXLINE(2525)						goto _hx_goto_113;
            					}
HXLINE(2528)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_113:;
            			}
            		}
HXLINE(2532)		point->zpp_inner->weak = wasWeak;
HXLINE(2533)		if (point->zpp_inner->weak) {
HXLINE(2537)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN(2537)			point->zpp_inner->outer = null();
HXDLIN(2537)			point->zpp_inner = null();
HXDLIN(2537)			{
HXLINE(2537)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(2537)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN(2537)			{
HXLINE(2537)				{
HXLINE(2537)					if (hx::IsNotNull( inner->outer )) {
HXLINE(2537)						inner->outer->zpp_inner = null();
HXDLIN(2537)						inner->outer = null();
            					}
HXDLIN(2537)					inner->_isimmutable = null();
HXDLIN(2537)					inner->_validate = null();
HXDLIN(2537)					inner->_invalidate = null();
            				}
HXDLIN(2537)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(2537)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE(2544)		return retvar;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,contains,return )

::String Body_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_276b1c0c2f1cb053_2550_toString)
            	HX_STACK_THIS(this)
HXLINE(2550)		::String _hx_tmp;
HXDLIN(2550)		if (this->zpp_inner->world) {
HXLINE(2550)			_hx_tmp = HX_("(space::world",b4,3f,cf,3b);
            		}
            		else {
HXLINE(2550)			::String _hx_tmp1;
HXDLIN(2550)			if ((this->zpp_inner->type == (int)2)) {
HXLINE(2550)				_hx_tmp1 = HX_("dynamic",7f,9f,15,36);
            			}
            			else {
HXLINE(2550)				if ((this->zpp_inner->type == (int)1)) {
HXLINE(2550)					_hx_tmp1 = HX_("static",ae,dc,fb,05);
            				}
            				else {
HXLINE(2550)					_hx_tmp1 = HX_("kinematic",05,79,ff,e3);
            				}
            			}
HXDLIN(2550)			_hx_tmp = (HX_("(",28,00,00,00) + _hx_tmp1);
            		}
HXDLIN(2550)		return ((_hx_tmp + HX_(")#",da,23,00,00)) + this->zpp_inner_i->id);
            	}



hx::ObjectPtr< Body_obj > Body_obj::__new( ::nape::phys::BodyType type, ::nape::geom::Vec2 position) {
	hx::ObjectPtr< Body_obj > __this = new Body_obj();
	__this->__construct(type,position);
	return __this;
}

hx::ObjectPtr< Body_obj > Body_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::phys::BodyType type, ::nape::geom::Vec2 position) {
	Body_obj *__this = (Body_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Body_obj), true, "nape.phys.Body"));
	*(void **)__this = Body_obj::_hx_vtable;
	__this->__construct(type,position);
	return __this;
}

Body_obj::Body_obj()
{
}

void Body_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Body);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_MEMBER_NAME(debugDraw,"debugDraw");
	 ::nape::phys::Interactor_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Body_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_VISIT_MEMBER_NAME(debugDraw,"debugDraw");
	 ::nape::phys::Interactor_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Body_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"mass") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mass()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_space()); }
		if (HX_FIELD_EQ(inName,"force") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_force()); }
		if (HX_FIELD_EQ(inName,"align") ) { return hx::Val( align_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_shapes()); }
		if (HX_FIELD_EQ(inName,"torque") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_torque()); }
		if (HX_FIELD_EQ(inName,"bounds") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bounds()); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inertia") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_inertia()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn()); }
		if (HX_FIELD_EQ(inName,"isBullet") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_isBullet()); }
		if (HX_FIELD_EQ(inName,"isStatic") ) { return hx::Val( isStatic_dyn()); }
		if (HX_FIELD_EQ(inName,"compound") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_compound()); }
		if (HX_FIELD_EQ(inName,"arbiters") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_arbiters()); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		if (HX_FIELD_EQ(inName,"velocity") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_velocity()); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_rotation()); }
		if (HX_FIELD_EQ(inName,"massMode") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_massMode()); }
		if (HX_FIELD_EQ(inName,"get_mass") ) { return hx::Val( get_mass_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mass") ) { return hx::Val( set_mass_dyn()); }
		if (HX_FIELD_EQ(inName,"gravMass") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gravMass()); }
		if (HX_FIELD_EQ(inName,"localCOM") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_localCOM()); }
		if (HX_FIELD_EQ(inName,"worldCOM") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_worldCOM()); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"debugDraw") ) { return hx::Val( debugDraw); }
		if (HX_FIELD_EQ(inName,"integrate") ) { return hx::Val( integrate_dyn()); }
		if (HX_FIELD_EQ(inName,"isDynamic") ) { return hx::Val( isDynamic_dyn()); }
		if (HX_FIELD_EQ(inName,"get_space") ) { return hx::Val( get_space_dyn()); }
		if (HX_FIELD_EQ(inName,"set_space") ) { return hx::Val( set_space_dyn()); }
		if (HX_FIELD_EQ(inName,"get_force") ) { return hx::Val( get_force_dyn()); }
		if (HX_FIELD_EQ(inName,"set_force") ) { return hx::Val( set_force_dyn()); }
		if (HX_FIELD_EQ(inName,"kinAngVel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_kinAngVel()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"disableCCD") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_disableCCD()); }
		if (HX_FIELD_EQ(inName,"get_shapes") ) { return hx::Val( get_shapes_dyn()); }
		if (HX_FIELD_EQ(inName,"isSleeping") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_isSleeping()); }
		if (HX_FIELD_EQ(inName,"surfaceVel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_surfaceVel()); }
		if (HX_FIELD_EQ(inName,"angularVel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_angularVel()); }
		if (HX_FIELD_EQ(inName,"get_torque") ) { return hx::Val( get_torque_dyn()); }
		if (HX_FIELD_EQ(inName,"set_torque") ) { return hx::Val( set_torque_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bounds") ) { return hx::Val( get_bounds_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isKinematic") ) { return hx::Val( isKinematic_dyn()); }
		if (HX_FIELD_EQ(inName,"constraints") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_constraints()); }
		if (HX_FIELD_EQ(inName,"inertiaMode") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_inertiaMode()); }
		if (HX_FIELD_EQ(inName,"get_inertia") ) { return hx::Val( get_inertia_dyn()); }
		if (HX_FIELD_EQ(inName,"set_inertia") ) { return hx::Val( set_inertia_dyn()); }
		if (HX_FIELD_EQ(inName,"crushFactor") ) { return hx::Val( crushFactor_dyn()); }
		if (HX_FIELD_EQ(inName,"scaleShapes") ) { return hx::Val( scaleShapes_dyn()); }
		if (HX_FIELD_EQ(inName,"dragImpulse") ) { return hx::Val( dragImpulse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_isBullet") ) { return hx::Val( get_isBullet_dyn()); }
		if (HX_FIELD_EQ(inName,"set_isBullet") ) { return hx::Val( set_isBullet_dyn()); }
		if (HX_FIELD_EQ(inName,"get_compound") ) { return hx::Val( get_compound_dyn()); }
		if (HX_FIELD_EQ(inName,"set_compound") ) { return hx::Val( set_compound_dyn()); }
		if (HX_FIELD_EQ(inName,"get_arbiters") ) { return hx::Val( get_arbiters_dyn()); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
		if (HX_FIELD_EQ(inName,"get_velocity") ) { return hx::Val( get_velocity_dyn()); }
		if (HX_FIELD_EQ(inName,"set_velocity") ) { return hx::Val( set_velocity_dyn()); }
		if (HX_FIELD_EQ(inName,"kinematicVel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_kinematicVel()); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn()); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn()); }
		if (HX_FIELD_EQ(inName,"get_massMode") ) { return hx::Val( get_massMode_dyn()); }
		if (HX_FIELD_EQ(inName,"set_massMode") ) { return hx::Val( set_massMode_dyn()); }
		if (HX_FIELD_EQ(inName,"gravMassMode") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gravMassMode()); }
		if (HX_FIELD_EQ(inName,"get_gravMass") ) { return hx::Val( get_gravMass_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gravMass") ) { return hx::Val( set_gravMass_dyn()); }
		if (HX_FIELD_EQ(inName,"applyImpulse") ) { return hx::Val( applyImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"rotateShapes") ) { return hx::Val( rotateShapes_dyn()); }
		if (HX_FIELD_EQ(inName,"get_localCOM") ) { return hx::Val( get_localCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_worldCOM") ) { return hx::Val( get_worldCOM_dyn()); }
		if (HX_FIELD_EQ(inName,"totalImpulse") ) { return hx::Val( totalImpulse_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_kinAngVel") ) { return hx::Val( get_kinAngVel_dyn()); }
		if (HX_FIELD_EQ(inName,"set_kinAngVel") ) { return hx::Val( set_kinAngVel_dyn()); }
		if (HX_FIELD_EQ(inName,"allowMovement") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_allowMovement()); }
		if (HX_FIELD_EQ(inName,"allowRotation") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_allowRotation()); }
		if (HX_FIELD_EQ(inName,"gravMassScale") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gravMassScale()); }
		if (HX_FIELD_EQ(inName,"normalImpulse") ) { return hx::Val( normalImpulse_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_disableCCD") ) { return hx::Val( get_disableCCD_dyn()); }
		if (HX_FIELD_EQ(inName,"set_disableCCD") ) { return hx::Val( set_disableCCD_dyn()); }
		if (HX_FIELD_EQ(inName,"get_isSleeping") ) { return hx::Val( get_isSleeping_dyn()); }
		if (HX_FIELD_EQ(inName,"get_surfaceVel") ) { return hx::Val( get_surfaceVel_dyn()); }
		if (HX_FIELD_EQ(inName,"set_surfaceVel") ) { return hx::Val( set_surfaceVel_dyn()); }
		if (HX_FIELD_EQ(inName,"get_angularVel") ) { return hx::Val( get_angularVel_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angularVel") ) { return hx::Val( set_angularVel_dyn()); }
		if (HX_FIELD_EQ(inName,"constraintMass") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_constraintMass()); }
		if (HX_FIELD_EQ(inName,"tangentImpulse") ) { return hx::Val( tangentImpulse_dyn()); }
		if (HX_FIELD_EQ(inName,"rollingImpulse") ) { return hx::Val( rollingImpulse_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_constraints") ) { return hx::Val( get_constraints_dyn()); }
		if (HX_FIELD_EQ(inName,"get_inertiaMode") ) { return hx::Val( get_inertiaMode_dyn()); }
		if (HX_FIELD_EQ(inName,"set_inertiaMode") ) { return hx::Val( set_inertiaMode_dyn()); }
		if (HX_FIELD_EQ(inName,"connectedBodies") ) { return hx::Val( connectedBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"translateShapes") ) { return hx::Val( translateShapes_dyn()); }
		if (HX_FIELD_EQ(inName,"transformShapes") ) { return hx::Val( transformShapes_dyn()); }
		if (HX_FIELD_EQ(inName,"setShapeFilters") ) { return hx::Val( setShapeFilters_dyn()); }
		if (HX_FIELD_EQ(inName,"buoyancyImpulse") ) { return hx::Val( buoyancyImpulse_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_kinematicVel") ) { return hx::Val( get_kinematicVel_dyn()); }
		if (HX_FIELD_EQ(inName,"set_kinematicVel") ) { return hx::Val( set_kinematicVel_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gravMassMode") ) { return hx::Val( get_gravMassMode_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gravMassMode") ) { return hx::Val( set_gravMassMode_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_allowMovement") ) { return hx::Val( get_allowMovement_dyn()); }
		if (HX_FIELD_EQ(inName,"set_allowMovement") ) { return hx::Val( set_allowMovement_dyn()); }
		if (HX_FIELD_EQ(inName,"get_allowRotation") ) { return hx::Val( get_allowRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"set_allowRotation") ) { return hx::Val( set_allowRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gravMassScale") ) { return hx::Val( get_gravMassScale_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gravMassScale") ) { return hx::Val( set_gravMassScale_dyn()); }
		if (HX_FIELD_EQ(inName,"constraintInertia") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_constraintInertia()); }
		if (HX_FIELD_EQ(inName,"interactingBodies") ) { return hx::Val( interactingBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"localPointToWorld") ) { return hx::Val( localPointToWorld_dyn()); }
		if (HX_FIELD_EQ(inName,"worldPointToLocal") ) { return hx::Val( worldPointToLocal_dyn()); }
		if (HX_FIELD_EQ(inName,"setShapeMaterials") ) { return hx::Val( setShapeMaterials_dyn()); }
		if (HX_FIELD_EQ(inName,"totalFluidImpulse") ) { return hx::Val( totalFluidImpulse_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"constraintVelocity") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_constraintVelocity()); }
		if (HX_FIELD_EQ(inName,"get_constraintMass") ) { return hx::Val( get_constraintMass_dyn()); }
		if (HX_FIELD_EQ(inName,"localVectorToWorld") ) { return hx::Val( localVectorToWorld_dyn()); }
		if (HX_FIELD_EQ(inName,"worldVectorToLocal") ) { return hx::Val( worldVectorToLocal_dyn()); }
		if (HX_FIELD_EQ(inName,"constraintsImpulse") ) { return hx::Val( constraintsImpulse_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"applyAngularImpulse") ) { return hx::Val( applyAngularImpulse_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalContactsImpulse") ) { return hx::Val( totalContactsImpulse_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setVelocityFromTarget") ) { return hx::Val( setVelocityFromTarget_dyn()); }
		if (HX_FIELD_EQ(inName,"get_constraintInertia") ) { return hx::Val( get_constraintInertia_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_constraintVelocity") ) { return hx::Val( get_constraintVelocity_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setShapeFluidProperties") ) { return hx::Val( setShapeFluidProperties_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Body_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue) ); }
		if (HX_FIELD_EQ(inName,"mass") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mass(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"space") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_space(inValue) ); }
		if (HX_FIELD_EQ(inName,"force") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_force(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"torque") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_torque(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inertia") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_inertia(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isBullet") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_isBullet(inValue) ); }
		if (HX_FIELD_EQ(inName,"compound") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_compound(inValue) ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
		if (HX_FIELD_EQ(inName,"velocity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_velocity(inValue) ); }
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue) ); }
		if (HX_FIELD_EQ(inName,"massMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_massMode(inValue) ); }
		if (HX_FIELD_EQ(inName,"gravMass") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gravMass(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::phys::ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugDraw") ) { debugDraw=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kinAngVel") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_kinAngVel(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"disableCCD") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_disableCCD(inValue) ); }
		if (HX_FIELD_EQ(inName,"surfaceVel") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_surfaceVel(inValue) ); }
		if (HX_FIELD_EQ(inName,"angularVel") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angularVel(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inertiaMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_inertiaMode(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"kinematicVel") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_kinematicVel(inValue) ); }
		if (HX_FIELD_EQ(inName,"gravMassMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gravMassMode(inValue) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"allowMovement") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_allowMovement(inValue) ); }
		if (HX_FIELD_EQ(inName,"allowRotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_allowRotation(inValue) ); }
		if (HX_FIELD_EQ(inName,"gravMassScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gravMassScale(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Body_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("debugDraw","\xf7","\xcf","\xbb","\x25"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("isBullet","\xcc","\x2d","\xfa","\x2c"));
	outFields->push(HX_HCSTRING("disableCCD","\xbc","\xc8","\x9b","\xb6"));
	outFields->push(HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"));
	outFields->push(HX_HCSTRING("compound","\x6b","\xc3","\xcf","\x81"));
	outFields->push(HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"));
	outFields->push(HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21"));
	outFields->push(HX_HCSTRING("isSleeping","\x35","\x6a","\x42","\x8b"));
	outFields->push(HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"));
	outFields->push(HX_HCSTRING("kinematicVel","\x58","\xd2","\xc1","\x63"));
	outFields->push(HX_HCSTRING("surfaceVel","\x30","\x8e","\x1a","\xe0"));
	outFields->push(HX_HCSTRING("force","\xeb","\xb1","\x94","\x04"));
	outFields->push(HX_HCSTRING("constraintVelocity","\x9a","\xe3","\x2e","\xa1"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("angularVel","\x9b","\xe4","\x92","\xd8"));
	outFields->push(HX_HCSTRING("kinAngVel","\xd3","\x90","\x6d","\x16"));
	outFields->push(HX_HCSTRING("torque","\xca","\xb6","\x90","\x96"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("allowMovement","\xd8","\x16","\xf2","\xd0"));
	outFields->push(HX_HCSTRING("allowRotation","\xe7","\xce","\x40","\xd9"));
	outFields->push(HX_HCSTRING("massMode","\x77","\xca","\x75","\x81"));
	outFields->push(HX_HCSTRING("constraintMass","\xf1","\x5f","\x3f","\x70"));
	outFields->push(HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("gravMassMode","\x77","\x36","\xb6","\x49"));
	outFields->push(HX_HCSTRING("gravMass","\xf4","\xac","\xf0","\x74"));
	outFields->push(HX_HCSTRING("gravMassScale","\xf6","\x1c","\x30","\xa2"));
	outFields->push(HX_HCSTRING("inertiaMode","\x7d","\xb5","\x39","\x0d"));
	outFields->push(HX_HCSTRING("constraintInertia","\x1d","\x4e","\x13","\xe8"));
	outFields->push(HX_HCSTRING("inertia","\xfa","\xb0","\xba","\x7c"));
	outFields->push(HX_HCSTRING("localCOM","\x96","\xc7","\xdf","\xdf"));
	outFields->push(HX_HCSTRING("worldCOM","\x0f","\xc5","\x83","\xa4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Body_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::phys::ZPP_Body*/ ,(int)offsetof(Body_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{hx::fsBool,(int)offsetof(Body_obj,debugDraw),HX_HCSTRING("debugDraw","\xf7","\xcf","\xbb","\x25")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Body_obj_sStaticStorageInfo = 0;
#endif

static ::String Body_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("debugDraw","\xf7","\xcf","\xbb","\x25"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_isBullet","\xd5","\xe1","\x13","\xe2"),
	HX_HCSTRING("set_isBullet","\x49","\x05","\x0d","\xf7"),
	HX_HCSTRING("get_disableCCD","\x05","\x51","\x91","\x2c"),
	HX_HCSTRING("set_disableCCD","\x79","\x39","\xb1","\x4c"),
	HX_HCSTRING("integrate","\x71","\x6e","\x60","\xec"),
	HX_HCSTRING("isStatic","\x38","\x78","\x65","\x5e"),
	HX_HCSTRING("isDynamic","\xb5","\x1c","\x14","\x3a"),
	HX_HCSTRING("isKinematic","\xbb","\x2f","\x80","\xc2"),
	HX_HCSTRING("get_shapes","\xfb","\x49","\xb1","\x0d"),
	HX_HCSTRING("get_compound","\x74","\x77","\xe9","\x36"),
	HX_HCSTRING("set_compound","\xe8","\x9a","\xe2","\x4b"),
	HX_HCSTRING("get_space","\x1d","\xe9","\x0f","\xc5"),
	HX_HCSTRING("set_space","\x29","\xd5","\x60","\xa8"),
	HX_HCSTRING("get_arbiters","\x73","\xe0","\xcb","\xd6"),
	HX_HCSTRING("get_isSleeping","\x7e","\xf2","\x37","\x01"),
	HX_HCSTRING("get_constraints","\x0d","\x09","\x96","\xd8"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get_velocity","\x26","\xb6","\x17","\xd4"),
	HX_HCSTRING("set_velocity","\x9a","\xd9","\x10","\xe9"),
	HX_HCSTRING("setVelocityFromTarget","\x1a","\xf5","\x8b","\xd2"),
	HX_HCSTRING("get_kinematicVel","\xe1","\xbe","\x60","\x68"),
	HX_HCSTRING("set_kinematicVel","\x55","\xac","\xa2","\xbe"),
	HX_HCSTRING("get_surfaceVel","\x79","\x16","\x10","\x56"),
	HX_HCSTRING("set_surfaceVel","\xed","\xfe","\x2f","\x76"),
	HX_HCSTRING("get_force","\x42","\x0e","\x3e","\x48"),
	HX_HCSTRING("set_force","\x4e","\xfa","\x8e","\x2b"),
	HX_HCSTRING("get_constraintVelocity","\xe3","\x5c","\xc3","\xfa"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_angularVel","\xe4","\x6c","\x88","\x4e"),
	HX_HCSTRING("set_angularVel","\x58","\x55","\xa8","\x6e"),
	HX_HCSTRING("get_kinAngVel","\xaa","\x64","\xd1","\xd7"),
	HX_HCSTRING("set_kinAngVel","\xb6","\x46","\xd7","\x1c"),
	HX_HCSTRING("get_torque","\x93","\x26","\x18","\x87"),
	HX_HCSTRING("set_torque","\x07","\xc5","\x95","\x8a"),
	HX_HCSTRING("get_bounds","\x3e","\xf6","\xa4","\x56"),
	HX_HCSTRING("get_allowMovement","\x2f","\x22","\x62","\xd7"),
	HX_HCSTRING("set_allowMovement","\x3b","\xfa","\xcf","\xfa"),
	HX_HCSTRING("get_allowRotation","\x3e","\xda","\xb0","\xdf"),
	HX_HCSTRING("set_allowRotation","\x4a","\xb2","\x1e","\x03"),
	HX_HCSTRING("get_massMode","\x80","\x7e","\x8f","\x36"),
	HX_HCSTRING("set_massMode","\xf4","\xa1","\x88","\x4b"),
	HX_HCSTRING("get_constraintMass","\xba","\x40","\xd9","\x0b"),
	HX_HCSTRING("get_mass","\x7d","\xfc","\x10","\xc8"),
	HX_HCSTRING("set_mass","\xf1","\x55","\x6e","\x76"),
	HX_HCSTRING("get_gravMassMode","\x00","\x23","\x55","\x4e"),
	HX_HCSTRING("set_gravMassMode","\x74","\x10","\x97","\xa4"),
	HX_HCSTRING("get_gravMass","\xfd","\x60","\x0a","\x2a"),
	HX_HCSTRING("set_gravMass","\x71","\x84","\x03","\x3f"),
	HX_HCSTRING("get_gravMassScale","\x4d","\x28","\xa0","\xa8"),
	HX_HCSTRING("set_gravMassScale","\x59","\x00","\x0e","\xcc"),
	HX_HCSTRING("get_inertiaMode","\x14","\x6d","\x1b","\xce"),
	HX_HCSTRING("set_inertiaMode","\x20","\xea","\xe6","\xc9"),
	HX_HCSTRING("get_constraintInertia","\xf4","\x50","\xc1","\x66"),
	HX_HCSTRING("get_inertia","\x11","\x11","\xb5","\x02"),
	HX_HCSTRING("set_inertia","\x1d","\x18","\x22","\x0d"),
	HX_HCSTRING("connectedBodies","\x29","\x2f","\x18","\x68"),
	HX_HCSTRING("interactingBodies","\x8c","\xbf","\x60","\xf1"),
	HX_HCSTRING("crushFactor","\x2a","\x68","\x85","\x8e"),
	HX_HCSTRING("localPointToWorld","\x72","\x8a","\x8d","\xac"),
	HX_HCSTRING("worldPointToLocal","\xf2","\xc8","\xc0","\xe1"),
	HX_HCSTRING("localVectorToWorld","\xe9","\x07","\x47","\xd4"),
	HX_HCSTRING("worldVectorToLocal","\xbb","\x29","\x56","\x46"),
	HX_HCSTRING("applyImpulse","\xe7","\x9c","\x2a","\xad"),
	HX_HCSTRING("applyAngularImpulse","\x01","\xc8","\x65","\x34"),
	HX_HCSTRING("translateShapes","\x20","\x94","\xc3","\x76"),
	HX_HCSTRING("rotateShapes","\xed","\x4a","\x78","\xdb"),
	HX_HCSTRING("scaleShapes","\x5c","\xa0","\x2d","\x09"),
	HX_HCSTRING("transformShapes","\xbe","\x54","\x7f","\x58"),
	HX_HCSTRING("align","\xc5","\x56","\x91","\x21"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("setShapeMaterials","\xcd","\x4d","\x08","\xca"),
	HX_HCSTRING("setShapeFilters","\x5c","\xcf","\x63","\x8f"),
	HX_HCSTRING("setShapeFluidProperties","\x3e","\x41","\xe5","\x88"),
	HX_HCSTRING("get_localCOM","\x9f","\x7b","\xf9","\x94"),
	HX_HCSTRING("get_worldCOM","\x18","\x79","\x9d","\x59"),
	HX_HCSTRING("normalImpulse","\x4e","\xa9","\x46","\x07"),
	HX_HCSTRING("tangentImpulse","\x70","\x2e","\x3e","\x65"),
	HX_HCSTRING("totalContactsImpulse","\xbe","\x67","\xe6","\x6f"),
	HX_HCSTRING("rollingImpulse","\xb0","\xb5","\xdd","\xca"),
	HX_HCSTRING("buoyancyImpulse","\x75","\xa7","\x03","\x9f"),
	HX_HCSTRING("dragImpulse","\x21","\x73","\xde","\x23"),
	HX_HCSTRING("totalFluidImpulse","\xaf","\x09","\x40","\xb9"),
	HX_HCSTRING("constraintsImpulse","\xdf","\xe1","\x36","\x95"),
	HX_HCSTRING("totalImpulse","\x51","\xe5","\xbb","\x16"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Body_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Body_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Body_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Body_obj::__mClass,"__mClass");
};

#endif

hx::Class Body_obj::__mClass;

void Body_obj::__register()
{
	hx::Object *dummy = new Body_obj;
	Body_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.phys.Body","\xd8","\x73","\x7a","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Body_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Body_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Body_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Body_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Body_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Body_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
