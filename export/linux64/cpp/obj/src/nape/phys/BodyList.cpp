// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyIterator
#include <nape/phys/BodyIterator.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_234_new,"nape.phys.BodyList","new",0x73df0c48,"nape.phys.BodyList.new","nape/phys/BodyList.hx",234,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_244_get_length,"nape.phys.BodyList","get_length",0xe96895c7,"nape.phys.BodyList.get_length","nape/phys/BodyList.hx",244,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_346_has,"nape.phys.BodyList","has",0x73da7b42,"nape.phys.BodyList.has","nape/phys/BodyList.hx",346,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_363_at,"nape.phys.BodyList","at",0xd8570e0b,"nape.phys.BodyList.at","nape/phys/BodyList.hx",363,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_416_push,"nape.phys.BodyList","push",0xf0aa40f2,"nape.phys.BodyList.push","nape/phys/BodyList.hx",416,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_447_unshift,"nape.phys.BodyList","unshift",0x46ef3371,"nape.phys.BodyList.unshift","nape/phys/BodyList.hx",447,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_478_pop,"nape.phys.BodyList","pop",0x73e09979,"nape.phys.BodyList.pop","nape/phys/BodyList.hx",478,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_519_shift,"nape.phys.BodyList","shift",0x55e2f26a,"nape.phys.BodyList.shift","nape/phys/BodyList.hx",519,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_564_add,"nape.phys.BodyList","add",0x73d52e09,"nape.phys.BodyList.add","nape/phys/BodyList.hx",564,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_576_remove,"nape.phys.BodyList","remove",0xb2cdc15c,"nape.phys.BodyList.remove","nape/phys/BodyList.hx",576,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_618_clear,"nape.phys.BodyList","clear",0x221b7775,"nape.phys.BodyList.clear","nape/phys/BodyList.hx",618,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_633_empty,"nape.phys.BodyList","empty",0x499a4075,"nape.phys.BodyList.empty","nape/phys/BodyList.hx",633,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_647_iterator,"nape.phys.BodyList","iterator",0x3944e506,"nape.phys.BodyList.iterator","nape/phys/BodyList.hx",647,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_662_copy,"nape.phys.BodyList","copy",0xe80deacd,"nape.phys.BodyList.copy","nape/phys/BodyList.hx",662,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_688_merge,"nape.phys.BodyList","merge",0xdf86a8a0,"nape.phys.BodyList.merge","nape/phys/BodyList.hx",688,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_702_toString,"nape.phys.BodyList","toString",0xde196bc4,"nape.phys.BodyList.toString","nape/phys/BodyList.hx",702,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_732_foreach,"nape.phys.BodyList","foreach",0xa8204d72,"nape.phys.BodyList.foreach","nape/phys/BodyList.hx",732,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_779_filter,"nape.phys.BodyList","filter",0x337a44d0,"nape.phys.BodyList.filter","nape/phys/BodyList.hx",779,0x9d0a53c8)
HX_DEFINE_STACK_FRAME(_hx_pos_5fe30e9415d85d40_304_fromArray,"nape.phys.BodyList","fromArray",0x29b571b7,"nape.phys.BodyList.fromArray","nape/phys/BodyList.hx",304,0x9d0a53c8)
namespace nape{
namespace phys{

void BodyList_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_5fe30e9415d85d40_234_new)
            	HX_STACK_THIS(this)
HXLINE( 238)		this->zpp_inner = null();
HXLINE( 696)		this->zpp_inner =  ::zpp_nape::util::ZPP_BodyList_obj::__alloc( HX_CTX );
HXLINE( 697)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic BodyList_obj::__CreateEmpty() { return new BodyList_obj; }

void *BodyList_obj::_hx_vtable = 0;

Dynamic BodyList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BodyList_obj > _hx_result = new BodyList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BodyList_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5d83315e;
}

int BodyList_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_244_get_length)
            	HX_STACK_THIS(this)
HXLINE( 245)		this->zpp_inner->valmod();
HXLINE( 246)		if (this->zpp_inner->zip_length) {
HXLINE( 247)			this->zpp_inner->zip_length = false;
HXLINE( 259)			this->zpp_inner->user_length = this->zpp_inner->inner->length;
            		}
HXLINE( 261)		return this->zpp_inner->user_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyList_obj,get_length,return )

bool BodyList_obj::has( ::nape::phys::Body obj){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_346_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 347)		this->zpp_inner->valmod();
HXLINE( 350)		return this->zpp_inner->inner->has(obj->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,has,return )

 ::nape::phys::Body BodyList_obj::at(int index){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_363_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 364)		this->zpp_inner->valmod();
HXLINE( 370)		if (this->zpp_inner->reverse_flag) {
HXLINE( 370)			this->zpp_inner->valmod();
HXDLIN( 370)			if (this->zpp_inner->zip_length) {
HXLINE( 370)				this->zpp_inner->zip_length = false;
HXDLIN( 370)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 370)			index = ((this->zpp_inner->user_length - (int)1) - index);
            		}
HXLINE( 372)		bool _hx_tmp;
HXDLIN( 372)		if ((index >= this->zpp_inner->at_index)) {
HXLINE( 372)			_hx_tmp = hx::IsNull( this->zpp_inner->at_ite );
            		}
            		else {
HXLINE( 372)			_hx_tmp = true;
            		}
HXDLIN( 372)		if (_hx_tmp) {
HXLINE( 373)			this->zpp_inner->at_index = index;
HXLINE( 374)			this->zpp_inner->at_ite = this->zpp_inner->inner->iterator_at(index);
            		}
            		else {
HXLINE( 377)			while((this->zpp_inner->at_index != index)){
HXLINE( 378)				this->zpp_inner->at_index++;
HXLINE( 379)				this->zpp_inner->at_ite = this->zpp_inner->at_ite->next;
            			}
            		}
HXLINE( 403)		return this->zpp_inner->at_ite->elt->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,at,return )

bool BodyList_obj::push( ::nape::phys::Body obj){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_416_push)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 421)		this->zpp_inner->valmod();
HXLINE( 424)		HX_VAR( bool,cont);
HXDLIN( 424)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 424)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 424)			cont = true;
            		}
HXLINE( 425)		if (cont) {
HXLINE( 426)			if (this->zpp_inner->reverse_flag) {
HXLINE( 426)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
            			else {
HXLINE( 428)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 428)					 ::zpp_nape::util::ZNPNode_ZPP_Body _hx_tmp;
HXDLIN( 428)					if (hx::IsNull( this->zpp_inner->inner->head )) {
HXLINE( 428)						_hx_tmp = null();
            					}
            					else {
HXLINE( 428)						 ::zpp_nape::util::ZNPList_ZPP_Body _hx_tmp1 = this->zpp_inner->inner;
HXDLIN( 428)						this->zpp_inner->valmod();
HXDLIN( 428)						if (this->zpp_inner->zip_length) {
HXLINE( 428)							this->zpp_inner->zip_length = false;
HXDLIN( 428)							this->zpp_inner->user_length = this->zpp_inner->inner->length;
            						}
HXDLIN( 428)						_hx_tmp = _hx_tmp1->iterator_at((this->zpp_inner->user_length - (int)1));
            					}
HXDLIN( 428)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 429)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
HXLINE( 431)			this->zpp_inner->invalidate();
HXLINE( 432)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 432)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 434)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,push,return )

bool BodyList_obj::unshift( ::nape::phys::Body obj){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_447_unshift)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 452)		this->zpp_inner->valmod();
HXLINE( 455)		HX_VAR( bool,cont);
HXDLIN( 455)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 455)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 455)			cont = true;
            		}
HXLINE( 456)		if (cont) {
HXLINE( 457)			if (this->zpp_inner->reverse_flag) {
HXLINE( 458)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 458)					 ::zpp_nape::util::ZNPNode_ZPP_Body _hx_tmp;
HXDLIN( 458)					if (hx::IsNull( this->zpp_inner->inner->head )) {
HXLINE( 458)						_hx_tmp = null();
            					}
            					else {
HXLINE( 458)						 ::zpp_nape::util::ZNPList_ZPP_Body _hx_tmp1 = this->zpp_inner->inner;
HXDLIN( 458)						this->zpp_inner->valmod();
HXDLIN( 458)						if (this->zpp_inner->zip_length) {
HXLINE( 458)							this->zpp_inner->zip_length = false;
HXDLIN( 458)							this->zpp_inner->user_length = this->zpp_inner->inner->length;
            						}
HXDLIN( 458)						_hx_tmp = _hx_tmp1->iterator_at((this->zpp_inner->user_length - (int)1));
            					}
HXDLIN( 458)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 459)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
            			else {
HXLINE( 461)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
HXLINE( 462)			this->zpp_inner->invalidate();
HXLINE( 463)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 463)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 465)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,unshift,return )

 ::nape::phys::Body BodyList_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_478_pop)
            	HX_STACK_THIS(this)
HXLINE( 486)		this->zpp_inner->valmod();
HXLINE( 489)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,ret) = null();
HXLINE( 490)		if (this->zpp_inner->reverse_flag) {
HXLINE( 491)			ret = this->zpp_inner->inner->head->elt;
HXLINE( 493)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 493)				this->zpp_inner->subber(ret->outer);
            			}
HXLINE( 494)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 494)				this->zpp_inner->inner->pop();
            			}
            		}
            		else {
HXLINE( 497)			bool _hx_tmp;
HXDLIN( 497)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 497)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 497)				_hx_tmp = false;
            			}
HXDLIN( 497)			if (_hx_tmp) {
HXLINE( 497)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 498)			HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Body,ite);
HXDLIN( 498)			this->zpp_inner->valmod();
HXDLIN( 498)			if (this->zpp_inner->zip_length) {
HXLINE( 498)				this->zpp_inner->zip_length = false;
HXDLIN( 498)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 498)			if ((this->zpp_inner->user_length == (int)1)) {
HXLINE( 498)				ite = null();
            			}
            			else {
HXLINE( 498)				HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Body,ite1,"ite") = this->zpp_inner->inner;
HXDLIN( 498)				this->zpp_inner->valmod();
HXDLIN( 498)				if (this->zpp_inner->zip_length) {
HXLINE( 498)					this->zpp_inner->zip_length = false;
HXDLIN( 498)					this->zpp_inner->user_length = this->zpp_inner->inner->length;
            				}
HXDLIN( 498)				ite = ite1->iterator_at((this->zpp_inner->user_length - (int)2));
            			}
HXLINE( 499)			if (hx::IsNull( ite )) {
HXLINE( 499)				ret = this->zpp_inner->inner->head->elt;
            			}
            			else {
HXLINE( 499)				ret = ite->next->elt;
            			}
HXLINE( 501)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 501)				this->zpp_inner->subber(ret->outer);
            			}
HXLINE( 502)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 502)				this->zpp_inner->inner->erase(ite);
            			}
            		}
HXLINE( 504)		this->zpp_inner->invalidate();
HXLINE( 506)		return ret->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyList_obj,pop,return )

 ::nape::phys::Body BodyList_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_519_shift)
            	HX_STACK_THIS(this)
HXLINE( 527)		this->zpp_inner->valmod();
HXLINE( 530)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,ret) = null();
HXLINE( 531)		if (this->zpp_inner->reverse_flag) {
HXLINE( 532)			bool _hx_tmp;
HXDLIN( 532)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 532)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 532)				_hx_tmp = false;
            			}
HXDLIN( 532)			if (_hx_tmp) {
HXLINE( 532)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 533)			HX_VAR(  ::zpp_nape::util::ZNPNode_ZPP_Body,ite);
HXDLIN( 533)			this->zpp_inner->valmod();
HXDLIN( 533)			if (this->zpp_inner->zip_length) {
HXLINE( 533)				this->zpp_inner->zip_length = false;
HXDLIN( 533)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 533)			if ((this->zpp_inner->user_length == (int)1)) {
HXLINE( 533)				ite = null();
            			}
            			else {
HXLINE( 533)				HX_VARI_NAME(  ::zpp_nape::util::ZNPList_ZPP_Body,ite1,"ite") = this->zpp_inner->inner;
HXDLIN( 533)				this->zpp_inner->valmod();
HXDLIN( 533)				if (this->zpp_inner->zip_length) {
HXLINE( 533)					this->zpp_inner->zip_length = false;
HXDLIN( 533)					this->zpp_inner->user_length = this->zpp_inner->inner->length;
            				}
HXDLIN( 533)				ite = ite1->iterator_at((this->zpp_inner->user_length - (int)2));
            			}
HXLINE( 534)			if (hx::IsNull( ite )) {
HXLINE( 534)				ret = this->zpp_inner->inner->head->elt;
            			}
            			else {
HXLINE( 534)				ret = ite->next->elt;
            			}
HXLINE( 536)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 536)				this->zpp_inner->subber(ret->outer);
            			}
HXLINE( 537)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 537)				this->zpp_inner->inner->erase(ite);
            			}
            		}
            		else {
HXLINE( 540)			ret = this->zpp_inner->inner->head->elt;
HXLINE( 542)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 542)				this->zpp_inner->subber(ret->outer);
            			}
HXLINE( 543)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 543)				this->zpp_inner->inner->pop();
            			}
            		}
HXLINE( 545)		this->zpp_inner->invalidate();
HXLINE( 547)		return ret->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyList_obj,shift,return )

bool BodyList_obj::add( ::nape::phys::Body obj){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_564_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 564)		if (this->zpp_inner->reverse_flag) {
HXLINE( 564)			return this->push(obj);
            		}
            		else {
HXLINE( 564)			return this->unshift(obj);
            		}
HXDLIN( 564)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,add,return )

bool BodyList_obj::remove( ::nape::phys::Body obj){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_576_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 581)		this->zpp_inner->valmod();
HXLINE( 584)		HX_VAR( bool,ret);
HXLINE( 585)		{
HXLINE( 586)			ret = false;
HXLINE( 587)			{
HXLINE( 588)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Body,cx_ite) = this->zpp_inner->inner->head;
HXLINE( 589)				while(hx::IsNotNull( cx_ite )){
HXLINE( 592)					if (hx::IsEq( cx_ite->elt,obj->zpp_inner )) {
HXLINE( 593)						ret = true;
HXLINE( 594)						goto _hx_goto_10;
            					}
HXLINE( 597)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_10:;
            			}
            		}
HXLINE( 601)		if (ret) {
HXLINE( 602)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 602)				this->zpp_inner->subber(obj);
            			}
HXLINE( 603)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 603)				this->zpp_inner->inner->remove(obj->zpp_inner);
            			}
HXLINE( 604)			this->zpp_inner->invalidate();
            		}
HXLINE( 606)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,remove,return )

void BodyList_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_618_clear)
            	HX_STACK_THIS(this)
HXLINE( 618)		if (this->zpp_inner->reverse_flag) {
HXLINE( 619)			while(hx::IsNotNull( this->zpp_inner->inner->head )){
HXLINE( 619)				this->pop();
            			}
            		}
            		else {
HXLINE( 622)			while(hx::IsNotNull( this->zpp_inner->inner->head )){
HXLINE( 622)				this->shift();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyList_obj,clear,(void))

bool BodyList_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_633_empty)
            	HX_STACK_THIS(this)
HXLINE( 633)		return hx::IsNull( this->zpp_inner->inner->head );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyList_obj,empty,return )

 ::nape::phys::BodyIterator BodyList_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_647_iterator)
            	HX_STACK_THIS(this)
HXLINE( 648)		this->zpp_inner->valmod();
HXLINE( 651)		return ::nape::phys::BodyIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyList_obj,iterator,return )

 ::nape::phys::BodyList BodyList_obj::copy(hx::Null< bool >  __o_deep){
bool deep = __o_deep.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5fe30e9415d85d40_662_copy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deep,"deep")
HXLINE( 663)		HX_VARI(  ::nape::phys::BodyList,ret) =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
HXLINE( 664)		{
HXLINE( 664)			this->zpp_inner->valmod();
HXDLIN( 664)			HX_VARI(  ::nape::phys::BodyIterator,_g) = ::nape::phys::BodyIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 664)			while(true){
HXLINE( 664)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 664)				HX_VARI(  ::nape::phys::BodyList,_this) = _g->zpp_inner;
HXDLIN( 664)				_this->zpp_inner->valmod();
HXDLIN( 664)				if (_this->zpp_inner->zip_length) {
HXLINE( 664)					_this->zpp_inner->zip_length = false;
HXDLIN( 664)					_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            				}
HXDLIN( 664)				_g->zpp_critical = true;
HXDLIN( 664)				bool _hx_tmp;
HXDLIN( 664)				if ((_g->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 664)					_hx_tmp = true;
            				}
            				else {
HXLINE( 664)					{
HXLINE( 664)						_g->zpp_next = ::nape::phys::BodyIterator_obj::zpp_pool;
HXDLIN( 664)						::nape::phys::BodyIterator_obj::zpp_pool = _g;
HXDLIN( 664)						_g->zpp_inner = null();
            					}
HXDLIN( 664)					_hx_tmp = false;
            				}
HXDLIN( 664)				if (!(_hx_tmp)) {
HXLINE( 664)					goto _hx_goto_17;
            				}
HXDLIN( 664)				_g->zpp_critical = false;
HXDLIN( 664)				HX_VARI(  ::nape::phys::Body,i) = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 664)				 ::nape::phys::Body _hx_tmp1;
HXDLIN( 664)				if (deep) {
HXLINE( 664)					_hx_tmp1 = null();
            				}
            				else {
HXLINE( 664)					_hx_tmp1 = i;
            				}
HXDLIN( 664)				ret->push(_hx_tmp1);
            			}
            			_hx_goto_17:;
            		}
HXLINE( 671)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,copy,return )

void BodyList_obj::merge( ::nape::phys::BodyList xs){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_688_merge)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xs,"xs")
HXLINE( 688)		xs->zpp_inner->valmod();
HXDLIN( 688)		HX_VARI(  ::nape::phys::BodyIterator,_g) = ::nape::phys::BodyIterator_obj::get(xs);
HXDLIN( 688)		while(true){
HXLINE( 688)			_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 688)			HX_VARI(  ::nape::phys::BodyList,_this) = _g->zpp_inner;
HXDLIN( 688)			_this->zpp_inner->valmod();
HXDLIN( 688)			if (_this->zpp_inner->zip_length) {
HXLINE( 688)				_this->zpp_inner->zip_length = false;
HXDLIN( 688)				_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            			}
HXDLIN( 688)			_g->zpp_critical = true;
HXDLIN( 688)			bool _hx_tmp;
HXDLIN( 688)			if ((_g->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 688)				_hx_tmp = true;
            			}
            			else {
HXLINE( 688)				{
HXLINE( 688)					_g->zpp_next = ::nape::phys::BodyIterator_obj::zpp_pool;
HXDLIN( 688)					::nape::phys::BodyIterator_obj::zpp_pool = _g;
HXDLIN( 688)					_g->zpp_inner = null();
            				}
HXDLIN( 688)				_hx_tmp = false;
            			}
HXDLIN( 688)			if (!(_hx_tmp)) {
HXLINE( 688)				goto _hx_goto_19;
            			}
HXDLIN( 688)			_g->zpp_critical = false;
HXDLIN( 688)			HX_VARI(  ::nape::phys::Body,x) = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 689)			if (!(this->has(x))) {
HXLINE( 689)				if (this->zpp_inner->reverse_flag) {
HXLINE( 689)					this->push(x);
            				}
            				else {
HXLINE( 689)					this->unshift(x);
            				}
            			}
            		}
            		_hx_goto_19:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,merge,(void))

::String BodyList_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_702_toString)
            	HX_STACK_THIS(this)
HXLINE( 703)		HX_VARI( ::String,ret) = HX_("[",5b,00,00,00);
HXLINE( 704)		HX_VARI( bool,fst) = true;
HXLINE( 705)		{
HXLINE( 705)			this->zpp_inner->valmod();
HXDLIN( 705)			HX_VARI(  ::nape::phys::BodyIterator,_g) = ::nape::phys::BodyIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 705)			while(true){
HXLINE( 705)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 705)				HX_VARI(  ::nape::phys::BodyList,_this) = _g->zpp_inner;
HXDLIN( 705)				_this->zpp_inner->valmod();
HXDLIN( 705)				if (_this->zpp_inner->zip_length) {
HXLINE( 705)					_this->zpp_inner->zip_length = false;
HXDLIN( 705)					_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            				}
HXDLIN( 705)				_g->zpp_critical = true;
HXDLIN( 705)				bool _hx_tmp;
HXDLIN( 705)				if ((_g->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 705)					_hx_tmp = true;
            				}
            				else {
HXLINE( 705)					{
HXLINE( 705)						_g->zpp_next = ::nape::phys::BodyIterator_obj::zpp_pool;
HXDLIN( 705)						::nape::phys::BodyIterator_obj::zpp_pool = _g;
HXDLIN( 705)						_g->zpp_inner = null();
            					}
HXDLIN( 705)					_hx_tmp = false;
            				}
HXDLIN( 705)				if (!(_hx_tmp)) {
HXLINE( 705)					goto _hx_goto_21;
            				}
HXDLIN( 705)				_g->zpp_critical = false;
HXDLIN( 705)				HX_VARI(  ::nape::phys::Body,i) = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 706)				if (!(fst)) {
HXLINE( 706)					ret = (ret + HX_(",",2c,00,00,00));
            				}
HXLINE( 707)				::String ret1;
HXDLIN( 707)				if (hx::IsNull( i )) {
HXLINE( 707)					ret1 = HX_("NULL",87,66,cf,33);
            				}
            				else {
HXLINE( 707)					ret1 = i->toString();
            				}
HXDLIN( 707)				ret = (ret + ret1);
HXLINE( 708)				fst = false;
            			}
            			_hx_goto_21:;
            		}
HXLINE( 710)		return (ret + HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyList_obj,toString,return )

 ::nape::phys::BodyList BodyList_obj::foreach( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_732_foreach)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 736)		this->zpp_inner->valmod();
HXDLIN( 736)		HX_VARI(  ::nape::phys::BodyIterator,it) = ::nape::phys::BodyIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXLINE( 737)		while(true){
HXLINE( 737)			it->zpp_inner->zpp_inner->valmod();
HXDLIN( 737)			HX_VARI(  ::nape::phys::BodyList,_this) = it->zpp_inner;
HXDLIN( 737)			_this->zpp_inner->valmod();
HXDLIN( 737)			if (_this->zpp_inner->zip_length) {
HXLINE( 737)				_this->zpp_inner->zip_length = false;
HXDLIN( 737)				_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
            			}
HXDLIN( 737)			it->zpp_critical = true;
HXDLIN( 737)			bool _hx_tmp;
HXDLIN( 737)			if ((it->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 737)				_hx_tmp = true;
            			}
            			else {
HXLINE( 737)				{
HXLINE( 737)					it->zpp_next = ::nape::phys::BodyIterator_obj::zpp_pool;
HXDLIN( 737)					::nape::phys::BodyIterator_obj::zpp_pool = it;
HXDLIN( 737)					it->zpp_inner = null();
            				}
HXDLIN( 737)				_hx_tmp = false;
            			}
HXDLIN( 737)			if (!(_hx_tmp)) {
HXLINE( 737)				goto _hx_goto_23;
            			}
HXLINE( 738)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 739)				it->zpp_critical = false;
HXDLIN( 739)				lambda(it->zpp_inner->at(it->zpp_i++));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 742)					{
HXLINE( 743)						it->zpp_next = ::nape::phys::BodyIterator_obj::zpp_pool;
HXLINE( 744)						::nape::phys::BodyIterator_obj::zpp_pool = it;
HXLINE( 745)						it->zpp_inner = null();
            					}
HXLINE( 747)					goto _hx_goto_23;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_23:;
HXLINE( 750)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,foreach,return )

 ::nape::phys::BodyList BodyList_obj::filter( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_5fe30e9415d85d40_779_filter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 783)		HX_VARI( int,i) = (int)0;
HXLINE( 784)		while(true){
HXLINE( 784)			this->zpp_inner->valmod();
HXDLIN( 784)			if (this->zpp_inner->zip_length) {
HXLINE( 784)				this->zpp_inner->zip_length = false;
HXDLIN( 784)				this->zpp_inner->user_length = this->zpp_inner->inner->length;
            			}
HXDLIN( 784)			if (!((i < this->zpp_inner->user_length))) {
HXLINE( 784)				goto _hx_goto_25;
            			}
HXLINE( 785)			HX_VARI(  ::nape::phys::Body,x) = this->at(i);
HXLINE( 786)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 787)				if (( (bool)(lambda(x)) )) {
HXLINE( 787)					i = (i + (int)1);
            				}
            				else {
HXLINE( 788)					this->remove(x);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 791)					goto _hx_goto_25;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_25:;
HXLINE( 794)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,filter,return )

 ::nape::phys::BodyList BodyList_obj::fromArray(::Array< ::Dynamic> array){
            	HX_GC_STACKFRAME(&_hx_pos_5fe30e9415d85d40_304_fromArray)
            	HX_STACK_ARG(array,"array")
HXLINE( 310)		HX_VARI(  ::nape::phys::BodyList,ret) =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
HXLINE( 311)		{
HXLINE( 311)			HX_VARI( int,_g) = (int)0;
HXDLIN( 311)			while((_g < array->length)){
HXLINE( 311)				HX_VARI(  ::nape::phys::Body,i) = array->__get(_g).StaticCast<  ::nape::phys::Body >();
HXDLIN( 311)				_g = (_g + (int)1);
HXLINE( 316)				ret->push(i);
            			}
            		}
HXLINE( 318)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BodyList_obj,fromArray,return )


hx::ObjectPtr< BodyList_obj > BodyList_obj::__new() {
	hx::ObjectPtr< BodyList_obj > __this = new BodyList_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BodyList_obj > BodyList_obj::__alloc(hx::Ctx *_hx_ctx) {
	BodyList_obj *__this = (BodyList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BodyList_obj), true, "nape.phys.BodyList"));
	*(void **)__this = BodyList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BodyList_obj::BodyList_obj()
{
}

void BodyList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BodyList);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void BodyList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val BodyList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn()); }
		if (HX_FIELD_EQ(inName,"foreach") ) { return hx::Val( foreach_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool BodyList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
	}
	return false;
}

hx::Val BodyList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::util::ZPP_BodyList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BodyList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BodyList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_BodyList*/ ,(int)offsetof(BodyList_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BodyList_obj_sStaticStorageInfo = 0;
#endif

static ::String BodyList_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("foreach","\x8a","\xfd","\xe4","\xd9"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	::String(null()) };

static void BodyList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BodyList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BodyList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BodyList_obj::__mClass,"__mClass");
};

#endif

hx::Class BodyList_obj::__mClass;

static ::String BodyList_obj_sStaticFields[] = {
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	::String(null())
};

void BodyList_obj::__register()
{
	hx::Object *dummy = new BodyList_obj;
	BodyList_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.phys.BodyList","\x56","\x88","\x49","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BodyList_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BodyList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BodyList_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BodyList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BodyList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BodyList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BodyList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BodyList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
