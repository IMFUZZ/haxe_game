// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_FluidProperties
#include <nape/phys/FluidProperties.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_177_new,"nape.phys.FluidProperties","new",0x937b9199,"nape.phys.FluidProperties.new","nape/phys/FluidProperties.hx",177,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_195_get_userData,"nape.phys.FluidProperties","get_userData",0xff2f19c5,"nape.phys.FluidProperties.get_userData","nape/phys/FluidProperties.hx",195,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_210_get_shapes,"nape.phys.FluidProperties","get_shapes",0x01af11e2,"nape.phys.FluidProperties.get_shapes","nape/phys/FluidProperties.hx",210,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_254_copy,"nape.phys.FluidProperties","copy",0x71660c5c,"nape.phys.FluidProperties.copy","nape/phys/FluidProperties.hx",254,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_269_get_density,"nape.phys.FluidProperties","get_density",0x52e0c238,"nape.phys.FluidProperties.get_density","nape/phys/FluidProperties.hx",269,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_271_set_density,"nape.phys.FluidProperties","set_density",0x5d4dc944,"nape.phys.FluidProperties.set_density","nape/phys/FluidProperties.hx",271,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_294_get_viscosity,"nape.phys.FluidProperties","get_viscosity",0xf5eafc77,"nape.phys.FluidProperties.get_viscosity","nape/phys/FluidProperties.hx",294,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_296_set_viscosity,"nape.phys.FluidProperties","set_viscosity",0x3af0de83,"nape.phys.FluidProperties.set_viscosity","nape/phys/FluidProperties.hx",296,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_318_get_gravity,"nape.phys.FluidProperties","get_gravity",0x880af09e,"nape.phys.FluidProperties.get_gravity","nape/phys/FluidProperties.hx",318,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_320_set_gravity,"nape.phys.FluidProperties","set_gravity",0x9277f7aa,"nape.phys.FluidProperties.set_gravity","nape/phys/FluidProperties.hx",320,0xe22a5857)
HX_DEFINE_STACK_FRAME(_hx_pos_5b9aecec097d9540_345_toString,"nape.phys.FluidProperties","toString",0x82e300d3,"nape.phys.FluidProperties.toString","nape/phys/FluidProperties.hx",345,0xe22a5857)
namespace nape{
namespace phys{

void FluidProperties_obj::__construct(hx::Null< Float >  __o_density,hx::Null< Float >  __o_viscosity){
Float density = __o_density.Default(1);
Float viscosity = __o_viscosity.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_5b9aecec097d9540_177_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(density,"density")
            	HX_STACK_ARG(viscosity,"viscosity")
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 224)		if (hx::IsNull( ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool )) {
HXLINE( 225)			this->zpp_inner =  ::zpp_nape::phys::ZPP_FluidProperties_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 231)			this->zpp_inner = ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool;
HXLINE( 232)			::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool = this->zpp_inner->next;
HXLINE( 233)			this->zpp_inner->next = null();
            		}
HXLINE( 240)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 241)		if ((density != (this->zpp_inner->density * (int)1000))) {
HXLINE( 241)			this->zpp_inner->density = ((Float)density / (Float)(int)1000);
HXDLIN( 241)			this->zpp_inner->invalidate();
            		}
HXLINE( 242)		if ((viscosity != this->zpp_inner->viscosity)) {
HXLINE( 242)			this->zpp_inner->viscosity = ((Float)viscosity / (Float)(int)1);
HXDLIN( 242)			this->zpp_inner->invalidate();
            		}
            	}

Dynamic FluidProperties_obj::__CreateEmpty() { return new FluidProperties_obj; }

void *FluidProperties_obj::_hx_vtable = 0;

Dynamic FluidProperties_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FluidProperties_obj > _hx_result = new FluidProperties_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FluidProperties_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x53fe0f03;
}

 ::Dynamic FluidProperties_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_195_get_userData)
            	HX_STACK_THIS(this)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 197)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 199)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_userData,return )

 ::nape::shape::ShapeList FluidProperties_obj::get_shapes(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_210_get_shapes)
            	HX_STACK_THIS(this)
HXLINE( 211)		if (hx::IsNull( this->zpp_inner->wrap_shapes )) {
HXLINE( 211)			this->zpp_inner->wrap_shapes = ::zpp_nape::util::ZPP_ShapeList_obj::get(this->zpp_inner->shapes,true);
            		}
HXLINE( 212)		return this->zpp_inner->wrap_shapes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_shapes,return )

 ::nape::phys::FluidProperties FluidProperties_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_5b9aecec097d9540_254_copy)
            	HX_STACK_THIS(this)
HXLINE( 255)		HX_VARI(  ::nape::phys::FluidProperties,ret) =  ::nape::phys::FluidProperties_obj::__alloc( HX_CTX ,(this->zpp_inner->density * (int)1000),this->zpp_inner->viscosity);
HXLINE( 256)		if (hx::IsNotNull( this->zpp_inner->userData )) {
HXLINE( 256)			ret->zpp_inner->userData = ::Reflect_obj::copy(this->zpp_inner->userData);
            		}
HXLINE( 257)		{
HXLINE( 257)			HX_VARI(  ::nape::geom::Vec2,gravity) = this->zpp_inner->wrap_gravity;
HXDLIN( 257)			if (hx::IsNull( gravity )) {
HXLINE( 257)				if (hx::IsNotNull( ret->zpp_inner->wrap_gravity )) {
HXLINE( 257)					ret->zpp_inner->wrap_gravity->zpp_inner->_inuse = false;
HXDLIN( 257)					{
HXLINE( 257)						HX_VARI(  ::nape::geom::Vec2,_this) = ret->zpp_inner->wrap_gravity;
HXDLIN( 257)						HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = _this->zpp_inner;
HXDLIN( 257)						_this->zpp_inner->outer = null();
HXDLIN( 257)						_this->zpp_inner = null();
HXDLIN( 257)						{
HXLINE( 257)							_this->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 257)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this;
            						}
HXDLIN( 257)						{
HXLINE( 257)							{
HXLINE( 257)								if (hx::IsNotNull( inner->outer )) {
HXLINE( 257)									inner->outer->zpp_inner = null();
HXDLIN( 257)									inner->outer = null();
            								}
HXDLIN( 257)								inner->_isimmutable = null();
HXDLIN( 257)								inner->_validate = null();
HXDLIN( 257)								inner->_invalidate = null();
            							}
HXDLIN( 257)							inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 257)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            						}
            					}
HXDLIN( 257)					ret->zpp_inner->wrap_gravity = null();
            				}
            			}
            			else {
HXLINE( 257)				if (hx::IsNull( ret->zpp_inner->wrap_gravity )) {
HXLINE( 257)					ret->zpp_inner->getgravity();
            				}
HXDLIN( 257)				{
HXLINE( 257)					HX_VARI_NAME(  ::nape::geom::Vec2,_this1,"_this") = ret->zpp_inner->wrap_gravity;
HXDLIN( 257)					{
HXLINE( 257)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = gravity->zpp_inner;
HXDLIN( 257)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 257)							_this2->_validate();
            						}
            					}
HXDLIN( 257)					HX_VARI( Float,x) = gravity->zpp_inner->x;
HXDLIN( 257)					{
HXLINE( 257)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = gravity->zpp_inner;
HXDLIN( 257)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 257)							_this3->_validate();
            						}
            					}
HXDLIN( 257)					HX_VARI( Float,y) = gravity->zpp_inner->y;
HXDLIN( 257)					bool _hx_tmp;
HXDLIN( 257)					{
HXLINE( 257)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this1->zpp_inner;
HXDLIN( 257)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 257)							_this4->_validate();
            						}
            					}
HXDLIN( 257)					if ((_this1->zpp_inner->x == x)) {
HXLINE( 257)						{
HXLINE( 257)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this1->zpp_inner;
HXDLIN( 257)							if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 257)								_this5->_validate();
            							}
            						}
HXDLIN( 257)						_hx_tmp = (_this1->zpp_inner->y == y);
            					}
            					else {
HXLINE( 257)						_hx_tmp = false;
            					}
HXDLIN( 257)					if (!(_hx_tmp)) {
HXLINE( 257)						{
HXLINE( 257)							_this1->zpp_inner->x = x;
HXDLIN( 257)							_this1->zpp_inner->y = y;
            						}
HXDLIN( 257)						{
HXLINE( 257)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = _this1->zpp_inner;
HXDLIN( 257)							if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 257)								_this6->_invalidate(_this6);
            							}
            						}
            					}
HXDLIN( 257)					if (gravity->zpp_inner->weak) {
HXLINE( 257)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = gravity->zpp_inner;
HXDLIN( 257)						gravity->zpp_inner->outer = null();
HXDLIN( 257)						gravity->zpp_inner = null();
HXDLIN( 257)						{
HXLINE( 257)							gravity->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 257)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = gravity;
            						}
HXDLIN( 257)						{
HXLINE( 257)							{
HXLINE( 257)								if (hx::IsNotNull( inner1->outer )) {
HXLINE( 257)									inner1->outer->zpp_inner = null();
HXDLIN( 257)									inner1->outer = null();
            								}
HXDLIN( 257)								inner1->_isimmutable = null();
HXDLIN( 257)								inner1->_validate = null();
HXDLIN( 257)								inner1->_invalidate = null();
            							}
HXDLIN( 257)							inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 257)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            						}
            					}
            				}
            			}
            		}
HXLINE( 258)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,copy,return )

Float FluidProperties_obj::get_density(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_269_get_density)
            	HX_STACK_THIS(this)
HXLINE( 269)		return (this->zpp_inner->density * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_density,return )

Float FluidProperties_obj::set_density(Float density){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_271_set_density)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(density,"density")
HXLINE( 273)		if ((density != (this->zpp_inner->density * (int)1000))) {
HXLINE( 278)			this->zpp_inner->density = ((Float)density / (Float)(int)1000);
HXLINE( 279)			this->zpp_inner->invalidate();
            		}
HXLINE( 282)		return (this->zpp_inner->density * (int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidProperties_obj,set_density,return )

Float FluidProperties_obj::get_viscosity(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_294_get_viscosity)
            	HX_STACK_THIS(this)
HXLINE( 294)		return this->zpp_inner->viscosity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_viscosity,return )

Float FluidProperties_obj::set_viscosity(Float viscosity){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_296_set_viscosity)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(viscosity,"viscosity")
HXLINE( 298)		if ((viscosity != this->zpp_inner->viscosity)) {
HXLINE( 303)			this->zpp_inner->viscosity = ((Float)viscosity / (Float)(int)1);
HXLINE( 304)			this->zpp_inner->invalidate();
            		}
HXLINE( 307)		return this->zpp_inner->viscosity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidProperties_obj,set_viscosity,return )

 ::nape::geom::Vec2 FluidProperties_obj::get_gravity(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_318_get_gravity)
            	HX_STACK_THIS(this)
HXLINE( 318)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,get_gravity,return )

 ::nape::geom::Vec2 FluidProperties_obj::set_gravity( ::nape::geom::Vec2 gravity){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_320_set_gravity)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gravity,"gravity")
HXLINE( 322)		if (hx::IsNull( gravity )) {
HXLINE( 323)			if (hx::IsNotNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 324)				this->zpp_inner->wrap_gravity->zpp_inner->_inuse = false;
HXLINE( 325)				{
HXLINE( 325)					HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_gravity;
HXDLIN( 325)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = _this->zpp_inner;
HXDLIN( 325)					_this->zpp_inner->outer = null();
HXDLIN( 325)					_this->zpp_inner = null();
HXDLIN( 325)					{
HXLINE( 325)						_this->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 325)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = _this;
            					}
HXDLIN( 325)					{
HXLINE( 325)						{
HXLINE( 325)							if (hx::IsNotNull( inner->outer )) {
HXLINE( 325)								inner->outer->zpp_inner = null();
HXDLIN( 325)								inner->outer = null();
            							}
HXDLIN( 325)							inner->_isimmutable = null();
HXDLIN( 325)							inner->_validate = null();
HXDLIN( 325)							inner->_invalidate = null();
            						}
HXDLIN( 325)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 325)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
HXLINE( 326)				this->zpp_inner->wrap_gravity = null();
            			}
            		}
            		else {
HXLINE( 335)			if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 335)				this->zpp_inner->getgravity();
            			}
HXLINE( 336)			{
HXLINE( 336)				HX_VARI_NAME(  ::nape::geom::Vec2,_this1,"_this") = this->zpp_inner->wrap_gravity;
HXDLIN( 336)				{
HXLINE( 336)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = gravity->zpp_inner;
HXDLIN( 336)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 336)						_this2->_validate();
            					}
            				}
HXDLIN( 336)				HX_VARI( Float,x) = gravity->zpp_inner->x;
HXDLIN( 336)				{
HXLINE( 336)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = gravity->zpp_inner;
HXDLIN( 336)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 336)						_this3->_validate();
            					}
            				}
HXDLIN( 336)				HX_VARI( Float,y) = gravity->zpp_inner->y;
HXDLIN( 336)				bool _hx_tmp;
HXDLIN( 336)				{
HXLINE( 336)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this1->zpp_inner;
HXDLIN( 336)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 336)						_this4->_validate();
            					}
            				}
HXDLIN( 336)				if ((_this1->zpp_inner->x == x)) {
HXLINE( 336)					{
HXLINE( 336)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this1->zpp_inner;
HXDLIN( 336)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 336)							_this5->_validate();
            						}
            					}
HXDLIN( 336)					_hx_tmp = (_this1->zpp_inner->y == y);
            				}
            				else {
HXLINE( 336)					_hx_tmp = false;
            				}
HXDLIN( 336)				if (!(_hx_tmp)) {
HXLINE( 336)					{
HXLINE( 336)						_this1->zpp_inner->x = x;
HXDLIN( 336)						_this1->zpp_inner->y = y;
            					}
HXDLIN( 336)					{
HXLINE( 336)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = _this1->zpp_inner;
HXDLIN( 336)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 336)							_this6->_invalidate(_this6);
            						}
            					}
            				}
HXDLIN( 336)				if (gravity->zpp_inner->weak) {
HXLINE( 336)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = gravity->zpp_inner;
HXDLIN( 336)					gravity->zpp_inner->outer = null();
HXDLIN( 336)					gravity->zpp_inner = null();
HXDLIN( 336)					{
HXLINE( 336)						gravity->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 336)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = gravity;
            					}
HXDLIN( 336)					{
HXLINE( 336)						{
HXLINE( 336)							if (hx::IsNotNull( inner1->outer )) {
HXLINE( 336)								inner1->outer->zpp_inner = null();
HXDLIN( 336)								inner1->outer = null();
            							}
HXDLIN( 336)							inner1->_isimmutable = null();
HXDLIN( 336)							inner1->_validate = null();
HXDLIN( 336)							inner1->_invalidate = null();
            						}
HXDLIN( 336)						inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 336)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            					}
            				}
            			}
            		}
HXLINE( 339)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidProperties_obj,set_gravity,return )

::String FluidProperties_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5b9aecec097d9540_345_toString)
            	HX_STACK_THIS(this)
HXLINE( 345)		::String _hx_tmp = ((((HX_("{ density: ",a9,c0,bf,86) + (this->zpp_inner->density * (int)1000)) + HX_(" viscosity: ",6d,44,e7,22)) + this->zpp_inner->viscosity) + HX_(" gravity: ",54,4c,c1,12));
HXDLIN( 345)		return ((_hx_tmp + ::Std_obj::string(this->zpp_inner->wrap_gravity)) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidProperties_obj,toString,return )


hx::ObjectPtr< FluidProperties_obj > FluidProperties_obj::__new(hx::Null< Float >  __o_density,hx::Null< Float >  __o_viscosity) {
	hx::ObjectPtr< FluidProperties_obj > __this = new FluidProperties_obj();
	__this->__construct(__o_density,__o_viscosity);
	return __this;
}

hx::ObjectPtr< FluidProperties_obj > FluidProperties_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_density,hx::Null< Float >  __o_viscosity) {
	FluidProperties_obj *__this = (FluidProperties_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FluidProperties_obj), true, "nape.phys.FluidProperties"));
	*(void **)__this = FluidProperties_obj::_hx_vtable;
	__this->__construct(__o_density,__o_viscosity);
	return __this;
}

FluidProperties_obj::FluidProperties_obj()
{
}

void FluidProperties_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FluidProperties);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void FluidProperties_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val FluidProperties_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_shapes()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_density()); }
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gravity()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_userData()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"viscosity") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_viscosity()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_shapes") ) { return hx::Val( get_shapes_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_density") ) { return hx::Val( get_density_dyn()); }
		if (HX_FIELD_EQ(inName,"set_density") ) { return hx::Val( set_density_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gravity") ) { return hx::Val( get_gravity_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gravity") ) { return hx::Val( set_gravity_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_viscosity") ) { return hx::Val( get_viscosity_dyn()); }
		if (HX_FIELD_EQ(inName,"set_viscosity") ) { return hx::Val( set_viscosity_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FluidProperties_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_density(inValue) ); }
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gravity(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::phys::ZPP_FluidProperties >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viscosity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_viscosity(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FluidProperties_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"));
	outFields->push(HX_HCSTRING("density","\xe8","\x3f","\xd5","\x42"));
	outFields->push(HX_HCSTRING("viscosity","\x27","\x46","\x3e","\x2a"));
	outFields->push(HX_HCSTRING("gravity","\x4e","\x6e","\xff","\x77"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FluidProperties_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::phys::ZPP_FluidProperties*/ ,(int)offsetof(FluidProperties_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FluidProperties_obj_sStaticStorageInfo = 0;
#endif

static ::String FluidProperties_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_userData","\x1e","\x4a","\x42","\xba"),
	HX_HCSTRING("get_shapes","\xfb","\x49","\xb1","\x0d"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("get_density","\xff","\x9f","\xcf","\xc8"),
	HX_HCSTRING("set_density","\x0b","\xa7","\x3c","\xd3"),
	HX_HCSTRING("get_viscosity","\xfe","\x19","\xa2","\xeb"),
	HX_HCSTRING("set_viscosity","\x0a","\xfc","\xa7","\x30"),
	HX_HCSTRING("get_gravity","\x65","\xce","\xf9","\xfd"),
	HX_HCSTRING("set_gravity","\x71","\xd5","\x66","\x08"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void FluidProperties_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FluidProperties_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FluidProperties_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FluidProperties_obj::__mClass,"__mClass");
};

#endif

hx::Class FluidProperties_obj::__mClass;

void FluidProperties_obj::__register()
{
	hx::Object *dummy = new FluidProperties_obj;
	FluidProperties_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.phys.FluidProperties","\x27","\xd1","\xe2","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FluidProperties_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FluidProperties_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FluidProperties_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FluidProperties_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FluidProperties_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FluidProperties_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
