// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_phys_GravMassMode
#include <nape/phys/GravMassMode.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7f4163d5e28a6952_181_new,"nape.phys.GravMassMode","new",0xf67ed11f,"nape.phys.GravMassMode.new","nape/phys/GravMassMode.hx",181,0xc89986d1)
HX_DEFINE_STACK_FRAME(_hx_pos_7f4163d5e28a6952_192_toString,"nape.phys.GravMassMode","toString",0x648dbb8d,"nape.phys.GravMassMode.toString","nape/phys/GravMassMode.hx",192,0xc89986d1)
HX_DEFINE_STACK_FRAME(_hx_pos_7f4163d5e28a6952_204_get_DEFAULT,"nape.phys.GravMassMode","get_DEFAULT",0x9cda6477,"nape.phys.GravMassMode.get_DEFAULT","nape/phys/GravMassMode.hx",204,0xc89986d1)
HX_DEFINE_STACK_FRAME(_hx_pos_7f4163d5e28a6952_219_get_FIXED,"nape.phys.GravMassMode","get_FIXED",0x312827aa,"nape.phys.GravMassMode.get_FIXED","nape/phys/GravMassMode.hx",219,0xc89986d1)
HX_DEFINE_STACK_FRAME(_hx_pos_7f4163d5e28a6952_235_get_SCALED,"nape.phys.GravMassMode","get_SCALED",0x81082b84,"nape.phys.GravMassMode.get_SCALED","nape/phys/GravMassMode.hx",235,0xc89986d1)
namespace nape{
namespace phys{

void GravMassMode_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7f4163d5e28a6952_181_new)
            	HX_STACK_THIS(this)
            	}

Dynamic GravMassMode_obj::__CreateEmpty() { return new GravMassMode_obj; }

void *GravMassMode_obj::_hx_vtable = 0;

Dynamic GravMassMode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GravMassMode_obj > _hx_result = new GravMassMode_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GravMassMode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3b1922b5;
}

::String GravMassMode_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_7f4163d5e28a6952_192_toString)
            	HX_STACK_THIS(this)
HXLINE( 192)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT )) {
HXLINE( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 192)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT )) {
HXLINE( 192)			return HX_("DEFAULT",a1,ac,97,1b);
            		}
            		else {
HXLINE( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED )) {
HXLINE( 193)				return HX_("FIXED",54,31,90,7e);
            			}
            			else {
HXLINE( 194)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED )) {
HXLINE( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 194)				if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED )) {
HXLINE( 194)					return HX_("SCALED",9a,96,a8,ee);
            				}
            				else {
HXLINE( 195)					return HX_("",00,00,00,00);
            				}
            			}
            		}
HXLINE( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GravMassMode_obj,toString,return )

 ::nape::phys::GravMassMode GravMassMode_obj::get_DEFAULT(){
            	HX_GC_STACKFRAME(&_hx_pos_7f4163d5e28a6952_204_get_DEFAULT)
HXLINE( 205)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT )) {
HXLINE( 206)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 207)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXLINE( 208)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 210)		return ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_DEFAULT;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GravMassMode_obj,get_DEFAULT,return )

 ::nape::phys::GravMassMode GravMassMode_obj::get_FIXED(){
            	HX_GC_STACKFRAME(&_hx_pos_7f4163d5e28a6952_219_get_FIXED)
HXLINE( 220)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED )) {
HXLINE( 221)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 222)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXLINE( 223)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 225)		return ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_FIXED;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GravMassMode_obj,get_FIXED,return )

 ::nape::phys::GravMassMode GravMassMode_obj::get_SCALED(){
            	HX_GC_STACKFRAME(&_hx_pos_7f4163d5e28a6952_235_get_SCALED)
HXLINE( 236)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED )) {
HXLINE( 237)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 238)			::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED =  ::nape::phys::GravMassMode_obj::__alloc( HX_CTX );
HXLINE( 239)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 241)		return ::zpp_nape::util::ZPP_Flags_obj::GravMassMode_SCALED;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GravMassMode_obj,get_SCALED,return )


hx::ObjectPtr< GravMassMode_obj > GravMassMode_obj::__new() {
	hx::ObjectPtr< GravMassMode_obj > __this = new GravMassMode_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GravMassMode_obj > GravMassMode_obj::__alloc(hx::Ctx *_hx_ctx) {
	GravMassMode_obj *__this = (GravMassMode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GravMassMode_obj), false, "nape.phys.GravMassMode"));
	*(void **)__this = GravMassMode_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GravMassMode_obj::GravMassMode_obj()
{
}

hx::Val GravMassMode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool GravMassMode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"FIXED") ) { if (inCallProp == hx::paccAlways) { outValue = get_FIXED(); return true; } }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"SCALED") ) { if (inCallProp == hx::paccAlways) { outValue = get_SCALED(); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"DEFAULT") ) { if (inCallProp == hx::paccAlways) { outValue = get_DEFAULT(); return true; } }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_FIXED") ) { outValue = get_FIXED_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_SCALED") ) { outValue = get_SCALED_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_DEFAULT") ) { outValue = get_DEFAULT_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GravMassMode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GravMassMode_obj_sStaticStorageInfo = 0;
#endif

static ::String GravMassMode_obj_sMemberFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void GravMassMode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GravMassMode_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GravMassMode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GravMassMode_obj::__mClass,"__mClass");
};

#endif

hx::Class GravMassMode_obj::__mClass;

static ::String GravMassMode_obj_sStaticFields[] = {
	HX_HCSTRING("get_DEFAULT","\xb8","\x0c","\x92","\xa1"),
	HX_HCSTRING("get_FIXED","\xab","\x8d","\x39","\xc2"),
	HX_HCSTRING("get_SCALED","\x63","\x06","\x30","\xdf"),
	::String(null())
};

void GravMassMode_obj::__register()
{
	hx::Object *dummy = new GravMassMode_obj;
	GravMassMode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.phys.GravMassMode","\xad","\x55","\x22","\xf3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GravMassMode_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GravMassMode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GravMassMode_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GravMassMode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GravMassMode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GravMassMode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GravMassMode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GravMassMode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace phys
