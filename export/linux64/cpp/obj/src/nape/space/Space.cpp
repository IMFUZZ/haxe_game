// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_InteractionType
#include <nape/callbacks/InteractionType.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerList
#include <nape/callbacks/ListenerList.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintIterator
#include <nape/constraint/ConstraintIterator.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResult
#include <nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResultList
#include <nape/geom/ConvexResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Ray
#include <nape/geom/Ray.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyIterator
#include <nape/phys/BodyIterator.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundIterator
#include <nape/phys/CompoundIterator.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundList
#include <nape/phys/CompoundList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeIterator
#include <nape/shape/ShapeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SpaceArbiterList
#include <zpp_nape/dynamics/ZPP_SpaceArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#include <zpp_nape/util/ZNPList_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CompoundList
#include <zpp_nape/util/ZPP_CompoundList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <zpp_nape/util/ZPP_ConstraintList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_177_new,"nape.space.Space","new",0xca3d1b6a,"nape.space.Space.new","nape/space/Space.hx",177,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_195_get_userData,"nape.space.Space","get_userData",0x3f404dd4,"nape.space.Space.get_userData","nape/space/Space.hx",195,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_209_get_gravity,"nape.space.Space","get_gravity",0x5014336f,"nape.space.Space.get_gravity","nape/space/Space.hx",209,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_213_set_gravity,"nape.space.Space","set_gravity",0x5a813a7b,"nape.space.Space.set_gravity","nape/space/Space.hx",213,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_233_get_broadphase,"nape.space.Space","get_broadphase",0x9161c338,"nape.space.Space.get_broadphase","nape/space/Space.hx",233,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_254_get_sortContacts,"nape.space.Space","get_sortContacts",0x856c4690,"nape.space.Space.get_sortContacts","nape/space/Space.hx",254,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_256_set_sortContacts,"nape.space.Space","set_sortContacts",0xdbae3404,"nape.space.Space.set_sortContacts","nape/space/Space.hx",256,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_273_get_worldAngularDrag,"nape.space.Space","get_worldAngularDrag",0x1b380d83,"nape.space.Space.get_worldAngularDrag","nape/space/Space.hx",273,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_275_set_worldAngularDrag,"nape.space.Space","set_worldAngularDrag",0xe7efc4f7,"nape.space.Space.set_worldAngularDrag","nape/space/Space.hx",275,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_296_get_worldLinearDrag,"nape.space.Space","get_worldLinearDrag",0x00d4c38c,"nape.space.Space.get_worldLinearDrag","nape/space/Space.hx",296,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_298_set_worldLinearDrag,"nape.space.Space","set_worldLinearDrag",0x3d71b698,"nape.space.Space.set_worldLinearDrag","nape/space/Space.hx",298,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_320_get_compounds,"nape.space.Space","get_compounds",0xaea44a09,"nape.space.Space.get_compounds","nape/space/Space.hx",320,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_334_get_bodies,"nape.space.Space","get_bodies",0x8403157f,"nape.space.Space.get_bodies","nape/space/Space.hx",334,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_346_get_liveBodies,"nape.space.Space","get_liveBodies",0xb25d0d0b,"nape.space.Space.get_liveBodies","nape/space/Space.hx",346,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_360_get_constraints,"nape.space.Space","get_constraints",0x7a48bb17,"nape.space.Space.get_constraints","nape/space/Space.hx",360,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_372_get_liveConstraints,"nape.space.Space","get_liveConstraints",0xc965e80b,"nape.space.Space.get_liveConstraints","nape/space/Space.hx",372,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_383_visitBodies,"nape.space.Space","visitBodies",0x367958b5,"nape.space.Space.visitBodies","nape/space/Space.hx",383,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_399_visitConstraints,"nape.space.Space","visitConstraints",0x9c851421,"nape.space.Space.visitConstraints","nape/space/Space.hx",399,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_419_visitCompounds,"nape.space.Space","visitCompounds",0xd6eb6c93,"nape.space.Space.visitCompounds","nape/space/Space.hx",419,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_437_get_world,"nape.space.Space","get_world",0x1a582133,"nape.space.Space.get_world","nape/space/Space.hx",437,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_446_get_arbiters,"nape.space.Space","get_arbiters",0x5bc9e429,"nape.space.Space.get_arbiters","nape/space/Space.hx",446,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_463_get_listeners,"nape.space.Space","get_listeners",0x8e3774e0,"nape.space.Space.get_listeners","nape/space/Space.hx",463,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_479_clear,"nape.space.Space","clear",0x57751317,"nape.space.Space.clear","nape/space/Space.hx",479,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_508_step,"nape.space.Space","step",0x2e944502,"nape.space.Space.step","nape/space/Space.hx",508,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_518_get_timeStamp,"nape.space.Space","get_timeStamp",0xd3a55417,"nape.space.Space.get_timeStamp","nape/space/Space.hx",518,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_528_get_elapsedTime,"nape.space.Space","get_elapsedTime",0x2961c80a,"nape.space.Space.get_elapsedTime","nape/space/Space.hx",528,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_578_interactionType,"nape.space.Space","interactionType",0xaa7b59b6,"nape.space.Space.interactionType","nape/space/Space.hx",578,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_610_shapesUnderPoint,"nape.space.Space","shapesUnderPoint",0x226603a0,"nape.space.Space.shapesUnderPoint","nape/space/Space.hx",610,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_647_bodiesUnderPoint,"nape.space.Space","bodiesUnderPoint",0x5ad9326e,"nape.space.Space.bodiesUnderPoint","nape/space/Space.hx",647,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_695_shapesInAABB,"nape.space.Space","shapesInAABB",0x7e82208d,"nape.space.Space.shapesInAABB","nape/space/Space.hx",695,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_723_bodiesInAABB,"nape.space.Space","bodiesInAABB",0x2326505b,"nape.space.Space.bodiesInAABB","nape/space/Space.hx",723,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_744_shapesInCircle,"nape.space.Space","shapesInCircle",0xb046b15d,"nape.space.Space.shapesInCircle","nape/space/Space.hx",744,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_791_bodiesInCircle,"nape.space.Space","bodiesInCircle",0xea30f0ab,"nape.space.Space.bodiesInCircle","nape/space/Space.hx",791,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_847_shapesInShape,"nape.space.Space","shapesInShape",0xaa6fcc74,"nape.space.Space.shapesInShape","nape/space/Space.hx",847,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_879_bodiesInShape,"nape.space.Space","bodiesInShape",0x157570e6,"nape.space.Space.bodiesInShape","nape/space/Space.hx",879,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_898_shapesInBody,"nape.space.Space","shapesInBody",0x7f4e5caf,"nape.space.Space.shapesInBody","nape/space/Space.hx",898,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_924_bodiesInBody,"nape.space.Space","bodiesInBody",0x23f28c7d,"nape.space.Space.bodiesInBody","nape/space/Space.hx",924,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_967_convexCast,"nape.space.Space","convexCast",0x715d8bfc,"nape.space.Space.convexCast","nape/space/Space.hx",967,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_1002_convexMultiCast,"nape.space.Space","convexMultiCast",0x0e887b7b,"nape.space.Space.convexMultiCast","nape/space/Space.hx",1002,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_1027_rayCast,"nape.space.Space","rayCast",0x6728f5d3,"nape.space.Space.rayCast","nape/space/Space.hx",1027,0x769bc808)
HX_DEFINE_STACK_FRAME(_hx_pos_dd842c0da2ce1650_1052_rayMultiCast,"nape.space.Space","rayMultiCast",0xa87b0644,"nape.space.Space.rayMultiCast","nape/space/Space.hx",1052,0x769bc808)
namespace nape{
namespace space{

void Space_obj::__construct( ::nape::geom::Vec2 gravity, ::nape::space::Broadphase broadphase){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_177_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gravity,"gravity")
            	HX_STACK_ARG(broadphase,"broadphase")
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 544)		 ::zpp_nape::geom::ZPP_Vec2 _hx_tmp;
HXDLIN( 544)		if (hx::IsNull( gravity )) {
HXLINE( 544)			_hx_tmp = null();
            		}
            		else {
HXLINE( 544)			_hx_tmp = gravity->zpp_inner;
            		}
HXDLIN( 544)		this->zpp_inner =  ::zpp_nape::space::ZPP_Space_obj::__alloc( HX_CTX ,_hx_tmp,broadphase);
HXLINE( 545)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 546)		if (hx::IsNotNull( gravity )) {
HXLINE( 546)			if (gravity->zpp_inner->weak) {
HXLINE( 550)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = gravity->zpp_inner;
HXDLIN( 550)				gravity->zpp_inner->outer = null();
HXDLIN( 550)				gravity->zpp_inner = null();
HXDLIN( 550)				{
HXLINE( 550)					gravity->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 550)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = gravity;
            				}
HXDLIN( 550)				{
HXLINE( 550)					{
HXLINE( 550)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 550)							inner->outer->zpp_inner = null();
HXDLIN( 550)							inner->outer = null();
            						}
HXDLIN( 550)						inner->_isimmutable = null();
HXDLIN( 550)						inner->_validate = null();
HXDLIN( 550)						inner->_invalidate = null();
            					}
HXDLIN( 550)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 550)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
            	}

Dynamic Space_obj::__CreateEmpty() { return new Space_obj; }

void *Space_obj::_hx_vtable = 0;

Dynamic Space_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Space_obj > _hx_result = new Space_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Space_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a6e0090;
}

 ::Dynamic Space_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_195_get_userData)
            	HX_STACK_THIS(this)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 197)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 199)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_userData,return )

 ::nape::geom::Vec2 Space_obj::get_gravity(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_209_get_gravity)
            	HX_STACK_THIS(this)
HXLINE( 210)		if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 210)			this->zpp_inner->getgravity();
            		}
HXLINE( 211)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_gravity,return )

 ::nape::geom::Vec2 Space_obj::set_gravity( ::nape::geom::Vec2 gravity){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_213_set_gravity)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gravity,"gravity")
HXLINE( 223)		{
HXLINE( 223)			if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 223)				this->zpp_inner->getgravity();
            			}
HXDLIN( 223)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->wrap_gravity;
HXDLIN( 223)			{
HXLINE( 223)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = gravity->zpp_inner;
HXDLIN( 223)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 223)					_this1->_validate();
            				}
            			}
HXDLIN( 223)			HX_VARI( Float,x) = gravity->zpp_inner->x;
HXDLIN( 223)			{
HXLINE( 223)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = gravity->zpp_inner;
HXDLIN( 223)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 223)					_this2->_validate();
            				}
            			}
HXDLIN( 223)			HX_VARI( Float,y) = gravity->zpp_inner->y;
HXDLIN( 223)			bool _hx_tmp;
HXDLIN( 223)			{
HXLINE( 223)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 223)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 223)					_this3->_validate();
            				}
            			}
HXDLIN( 223)			if ((_this->zpp_inner->x == x)) {
HXLINE( 223)				{
HXLINE( 223)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 223)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 223)						_this4->_validate();
            					}
            				}
HXDLIN( 223)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 223)				_hx_tmp = false;
            			}
HXDLIN( 223)			if (!(_hx_tmp)) {
HXLINE( 223)				{
HXLINE( 223)					_this->zpp_inner->x = x;
HXDLIN( 223)					_this->zpp_inner->y = y;
            				}
HXDLIN( 223)				{
HXLINE( 223)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 223)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 223)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 223)			if (gravity->zpp_inner->weak) {
HXLINE( 223)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = gravity->zpp_inner;
HXDLIN( 223)				gravity->zpp_inner->outer = null();
HXDLIN( 223)				gravity->zpp_inner = null();
HXDLIN( 223)				{
HXLINE( 223)					gravity->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 223)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = gravity;
            				}
HXDLIN( 223)				{
HXLINE( 223)					{
HXLINE( 223)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 223)							inner->outer->zpp_inner = null();
HXDLIN( 223)							inner->outer = null();
            						}
HXDLIN( 223)						inner->_isimmutable = null();
HXDLIN( 223)						inner->_validate = null();
HXDLIN( 223)						inner->_invalidate = null();
            					}
HXDLIN( 223)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 223)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 225)		if (hx::IsNull( this->zpp_inner->wrap_gravity )) {
HXLINE( 225)			this->zpp_inner->getgravity();
            		}
HXDLIN( 225)		return this->zpp_inner->wrap_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_gravity,return )

 ::nape::space::Broadphase Space_obj::get_broadphase(){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_233_get_broadphase)
            	HX_STACK_THIS(this)
HXLINE( 233)		if (this->zpp_inner->bphase->is_sweep) {
HXLINE( 233)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE )) {
HXLINE( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE =  ::nape::space::Broadphase_obj::__alloc( HX_CTX );
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 233)			return ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE;
            		}
            		else {
HXLINE( 233)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE )) {
HXLINE( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE =  ::nape::space::Broadphase_obj::__alloc( HX_CTX );
HXDLIN( 233)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 233)			return ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE;
            		}
HXDLIN( 233)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_broadphase,return )

bool Space_obj::get_sortContacts(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_254_get_sortContacts)
            	HX_STACK_THIS(this)
HXLINE( 254)		return this->zpp_inner->sortcontacts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_sortContacts,return )

bool Space_obj::set_sortContacts(bool sortContacts){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_256_set_sortContacts)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sortContacts,"sortContacts")
HXLINE( 258)		this->zpp_inner->sortcontacts = sortContacts;
HXLINE( 260)		return this->zpp_inner->sortcontacts;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_sortContacts,return )

Float Space_obj::get_worldAngularDrag(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_273_get_worldAngularDrag)
            	HX_STACK_THIS(this)
HXLINE( 273)		return this->zpp_inner->global_ang_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_worldAngularDrag,return )

Float Space_obj::set_worldAngularDrag(Float worldAngularDrag){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_275_set_worldAngularDrag)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(worldAngularDrag,"worldAngularDrag")
HXLINE( 281)		this->zpp_inner->global_ang_drag = worldAngularDrag;
HXLINE( 283)		return this->zpp_inner->global_ang_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_worldAngularDrag,return )

Float Space_obj::get_worldLinearDrag(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_296_get_worldLinearDrag)
            	HX_STACK_THIS(this)
HXLINE( 296)		return this->zpp_inner->global_lin_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_worldLinearDrag,return )

Float Space_obj::set_worldLinearDrag(Float worldLinearDrag){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_298_set_worldLinearDrag)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(worldLinearDrag,"worldLinearDrag")
HXLINE( 304)		this->zpp_inner->global_lin_drag = worldLinearDrag;
HXLINE( 306)		return this->zpp_inner->global_lin_drag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,set_worldLinearDrag,return )

 ::nape::phys::CompoundList Space_obj::get_compounds(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_320_get_compounds)
            	HX_STACK_THIS(this)
HXLINE( 320)		return this->zpp_inner->wrap_compounds;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_compounds,return )

 ::nape::phys::BodyList Space_obj::get_bodies(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_334_get_bodies)
            	HX_STACK_THIS(this)
HXLINE( 334)		return this->zpp_inner->wrap_bodies;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_bodies,return )

 ::nape::phys::BodyList Space_obj::get_liveBodies(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_346_get_liveBodies)
            	HX_STACK_THIS(this)
HXLINE( 346)		return this->zpp_inner->wrap_live;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_liveBodies,return )

 ::nape::constraint::ConstraintList Space_obj::get_constraints(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_360_get_constraints)
            	HX_STACK_THIS(this)
HXLINE( 360)		return this->zpp_inner->wrap_constraints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_constraints,return )

 ::nape::constraint::ConstraintList Space_obj::get_liveConstraints(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_372_get_liveConstraints)
            	HX_STACK_THIS(this)
HXLINE( 372)		return this->zpp_inner->wrap_livecon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_liveConstraints,return )

void Space_obj::visitBodies( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_383_visitBodies)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 387)		{
HXLINE( 387)			HX_VARI(  ::nape::phys::BodyList,_this) = this->zpp_inner->wrap_bodies;
HXDLIN( 387)			_this->zpp_inner->valmod();
HXDLIN( 387)			HX_VARI(  ::nape::phys::BodyIterator,_g) = ::nape::phys::BodyIterator_obj::get(_this);
HXDLIN( 387)			while(true){
HXLINE( 387)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 387)				HX_VARI_NAME(  ::nape::phys::BodyList,_this1,"_this") = _g->zpp_inner;
HXDLIN( 387)				_this1->zpp_inner->valmod();
HXDLIN( 387)				if (_this1->zpp_inner->zip_length) {
HXLINE( 387)					_this1->zpp_inner->zip_length = false;
HXDLIN( 387)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 387)				_g->zpp_critical = true;
HXDLIN( 387)				bool _hx_tmp;
HXDLIN( 387)				if ((_g->zpp_i < _this1->zpp_inner->user_length)) {
HXLINE( 387)					_hx_tmp = true;
            				}
            				else {
HXLINE( 387)					{
HXLINE( 387)						_g->zpp_next = ::nape::phys::BodyIterator_obj::zpp_pool;
HXDLIN( 387)						::nape::phys::BodyIterator_obj::zpp_pool = _g;
HXDLIN( 387)						_g->zpp_inner = null();
            					}
HXDLIN( 387)					_hx_tmp = false;
            				}
HXDLIN( 387)				if (!(_hx_tmp)) {
HXLINE( 387)					goto _hx_goto_16;
            				}
HXDLIN( 387)				_g->zpp_critical = false;
HXDLIN( 387)				lambda(_g->zpp_inner->at(_g->zpp_i++));
            			}
            			_hx_goto_16:;
            		}
HXLINE( 388)		{
HXLINE( 388)			HX_VARI_NAME(  ::nape::phys::CompoundList,_this2,"_this") = this->zpp_inner->wrap_compounds;
HXDLIN( 388)			_this2->zpp_inner->valmod();
HXDLIN( 388)			HX_VARI_NAME(  ::nape::phys::CompoundIterator,_g1,"_g") = ::nape::phys::CompoundIterator_obj::get(_this2);
HXDLIN( 388)			while(true){
HXLINE( 388)				_g1->zpp_inner->zpp_inner->valmod();
HXDLIN( 388)				HX_VARI_NAME(  ::nape::phys::CompoundList,_this3,"_this") = _g1->zpp_inner;
HXDLIN( 388)				_this3->zpp_inner->valmod();
HXDLIN( 388)				if (_this3->zpp_inner->zip_length) {
HXLINE( 388)					_this3->zpp_inner->zip_length = false;
HXDLIN( 388)					_this3->zpp_inner->user_length = _this3->zpp_inner->inner->length;
            				}
HXDLIN( 388)				_g1->zpp_critical = true;
HXDLIN( 388)				bool _hx_tmp1;
HXDLIN( 388)				if ((_g1->zpp_i < _this3->zpp_inner->user_length)) {
HXLINE( 388)					_hx_tmp1 = true;
            				}
            				else {
HXLINE( 388)					{
HXLINE( 388)						_g1->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 388)						::nape::phys::CompoundIterator_obj::zpp_pool = _g1;
HXDLIN( 388)						_g1->zpp_inner = null();
            					}
HXDLIN( 388)					_hx_tmp1 = false;
            				}
HXDLIN( 388)				if (!(_hx_tmp1)) {
HXLINE( 388)					goto _hx_goto_17;
            				}
HXDLIN( 388)				_g1->zpp_critical = false;
HXDLIN( 388)				_g1->zpp_inner->at(_g1->zpp_i++)->visitBodies(lambda);
            			}
            			_hx_goto_17:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,visitBodies,(void))

void Space_obj::visitConstraints( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_399_visitConstraints)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 403)		{
HXLINE( 403)			HX_VARI(  ::nape::constraint::ConstraintList,_this) = this->zpp_inner->wrap_constraints;
HXDLIN( 403)			_this->zpp_inner->valmod();
HXDLIN( 403)			HX_VARI(  ::nape::constraint::ConstraintIterator,_g) = ::nape::constraint::ConstraintIterator_obj::get(_this);
HXDLIN( 403)			while(true){
HXLINE( 403)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 403)				HX_VARI_NAME(  ::nape::constraint::ConstraintList,_this1,"_this") = _g->zpp_inner;
HXDLIN( 403)				_this1->zpp_inner->valmod();
HXDLIN( 403)				if (_this1->zpp_inner->zip_length) {
HXLINE( 403)					_this1->zpp_inner->zip_length = false;
HXDLIN( 403)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 403)				_g->zpp_critical = true;
HXDLIN( 403)				bool _hx_tmp;
HXDLIN( 403)				if ((_g->zpp_i < _this1->zpp_inner->user_length)) {
HXLINE( 403)					_hx_tmp = true;
            				}
            				else {
HXLINE( 403)					{
HXLINE( 403)						_g->zpp_next = ::nape::constraint::ConstraintIterator_obj::zpp_pool;
HXDLIN( 403)						::nape::constraint::ConstraintIterator_obj::zpp_pool = _g;
HXDLIN( 403)						_g->zpp_inner = null();
            					}
HXDLIN( 403)					_hx_tmp = false;
            				}
HXDLIN( 403)				if (!(_hx_tmp)) {
HXLINE( 403)					goto _hx_goto_19;
            				}
HXDLIN( 403)				_g->zpp_critical = false;
HXDLIN( 403)				lambda(_g->zpp_inner->at(_g->zpp_i++));
            			}
            			_hx_goto_19:;
            		}
HXLINE( 404)		{
HXLINE( 404)			HX_VARI_NAME(  ::nape::phys::CompoundList,_this2,"_this") = this->zpp_inner->wrap_compounds;
HXDLIN( 404)			_this2->zpp_inner->valmod();
HXDLIN( 404)			HX_VARI_NAME(  ::nape::phys::CompoundIterator,_g1,"_g") = ::nape::phys::CompoundIterator_obj::get(_this2);
HXDLIN( 404)			while(true){
HXLINE( 404)				_g1->zpp_inner->zpp_inner->valmod();
HXDLIN( 404)				HX_VARI_NAME(  ::nape::phys::CompoundList,_this3,"_this") = _g1->zpp_inner;
HXDLIN( 404)				_this3->zpp_inner->valmod();
HXDLIN( 404)				if (_this3->zpp_inner->zip_length) {
HXLINE( 404)					_this3->zpp_inner->zip_length = false;
HXDLIN( 404)					_this3->zpp_inner->user_length = _this3->zpp_inner->inner->length;
            				}
HXDLIN( 404)				_g1->zpp_critical = true;
HXDLIN( 404)				bool _hx_tmp1;
HXDLIN( 404)				if ((_g1->zpp_i < _this3->zpp_inner->user_length)) {
HXLINE( 404)					_hx_tmp1 = true;
            				}
            				else {
HXLINE( 404)					{
HXLINE( 404)						_g1->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 404)						::nape::phys::CompoundIterator_obj::zpp_pool = _g1;
HXDLIN( 404)						_g1->zpp_inner = null();
            					}
HXDLIN( 404)					_hx_tmp1 = false;
            				}
HXDLIN( 404)				if (!(_hx_tmp1)) {
HXLINE( 404)					goto _hx_goto_20;
            				}
HXDLIN( 404)				_g1->zpp_critical = false;
HXDLIN( 404)				_g1->zpp_inner->at(_g1->zpp_i++)->visitConstraints(lambda);
            			}
            			_hx_goto_20:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,visitConstraints,(void))

void Space_obj::visitCompounds( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_419_visitCompounds)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 419)		HX_VARI(  ::nape::phys::CompoundList,_this) = this->zpp_inner->wrap_compounds;
HXDLIN( 419)		_this->zpp_inner->valmod();
HXDLIN( 419)		HX_VARI(  ::nape::phys::CompoundIterator,_g) = ::nape::phys::CompoundIterator_obj::get(_this);
HXDLIN( 419)		while(true){
HXLINE( 419)			_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 419)			HX_VARI_NAME(  ::nape::phys::CompoundList,_this1,"_this") = _g->zpp_inner;
HXDLIN( 419)			_this1->zpp_inner->valmod();
HXDLIN( 419)			if (_this1->zpp_inner->zip_length) {
HXLINE( 419)				_this1->zpp_inner->zip_length = false;
HXDLIN( 419)				_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            			}
HXDLIN( 419)			_g->zpp_critical = true;
HXDLIN( 419)			bool _hx_tmp;
HXDLIN( 419)			if ((_g->zpp_i < _this1->zpp_inner->user_length)) {
HXLINE( 419)				_hx_tmp = true;
            			}
            			else {
HXLINE( 419)				{
HXLINE( 419)					_g->zpp_next = ::nape::phys::CompoundIterator_obj::zpp_pool;
HXDLIN( 419)					::nape::phys::CompoundIterator_obj::zpp_pool = _g;
HXDLIN( 419)					_g->zpp_inner = null();
            				}
HXDLIN( 419)				_hx_tmp = false;
            			}
HXDLIN( 419)			if (!(_hx_tmp)) {
HXLINE( 419)				goto _hx_goto_22;
            			}
HXDLIN( 419)			_g->zpp_critical = false;
HXDLIN( 419)			HX_VARI(  ::nape::phys::Compound,c) = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 420)			lambda(c);
HXLINE( 421)			c->visitCompounds(lambda);
            		}
            		_hx_goto_22:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Space_obj,visitCompounds,(void))

 ::nape::phys::Body Space_obj::get_world(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_437_get_world)
            	HX_STACK_THIS(this)
HXLINE( 437)		return this->zpp_inner->_hx___static;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_world,return )

 ::nape::dynamics::ArbiterList Space_obj::get_arbiters(){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_446_get_arbiters)
            	HX_STACK_THIS(this)
HXLINE( 447)		if (hx::IsNull( this->zpp_inner->wrap_arbiters )) {
HXLINE( 448)			HX_VARI(  ::zpp_nape::dynamics::ZPP_SpaceArbiterList,ret) =  ::zpp_nape::dynamics::ZPP_SpaceArbiterList_obj::__alloc( HX_CTX );
HXLINE( 449)			ret->space = this->zpp_inner;
HXLINE( 450)			this->zpp_inner->wrap_arbiters = ret;
            		}
HXLINE( 452)		return this->zpp_inner->wrap_arbiters;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_arbiters,return )

 ::nape::callbacks::ListenerList Space_obj::get_listeners(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_463_get_listeners)
            	HX_STACK_THIS(this)
HXLINE( 463)		return this->zpp_inner->wrap_listeners;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_listeners,return )

void Space_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_479_clear)
            	HX_STACK_THIS(this)
HXLINE( 479)		this->zpp_inner->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,clear,(void))

void Space_obj::step(Float deltaTime,hx::Null< int >  __o_velocityIterations,hx::Null< int >  __o_positionIterations){
int velocityIterations = __o_velocityIterations.Default(10);
int positionIterations = __o_positionIterations.Default(10);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_508_step)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
            	HX_STACK_ARG(velocityIterations,"velocityIterations")
            	HX_STACK_ARG(positionIterations,"positionIterations")
HXLINE( 508)		this->zpp_inner->step(deltaTime,velocityIterations,positionIterations);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,step,(void))

int Space_obj::get_timeStamp(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_518_get_timeStamp)
            	HX_STACK_THIS(this)
HXLINE( 518)		return this->zpp_inner->stamp;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_timeStamp,return )

Float Space_obj::get_elapsedTime(){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_528_get_elapsedTime)
            	HX_STACK_THIS(this)
HXLINE( 528)		return this->zpp_inner->time;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Space_obj,get_elapsedTime,return )

 ::nape::callbacks::InteractionType Space_obj::interactionType( ::nape::shape::Shape shape1, ::nape::shape::Shape shape2){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_578_interactionType)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape1,"shape1")
            	HX_STACK_ARG(shape2,"shape2")
HXLINE( 585)		bool _hx_tmp;
HXDLIN( 585)		 ::nape::phys::Body _this;
HXDLIN( 585)		if (hx::IsNotNull( shape1->zpp_inner->body )) {
HXLINE( 585)			_this = shape1->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 585)			_this = null();
            		}
HXDLIN( 585)		if ((_this->zpp_inner->type == (int)1)) {
HXLINE( 585)			 ::nape::phys::Body _this1;
HXDLIN( 585)			if (hx::IsNotNull( shape2->zpp_inner->body )) {
HXLINE( 585)				_this1 = shape2->zpp_inner->body->outer;
            			}
            			else {
HXLINE( 585)				_this1 = null();
            			}
HXDLIN( 585)			_hx_tmp = (_this1->zpp_inner->type == (int)1);
            		}
            		else {
HXLINE( 585)			_hx_tmp = false;
            		}
HXDLIN( 585)		if (_hx_tmp) {
HXLINE( 585)			return null();
            		}
HXLINE( 586)		 ::nape::phys::Body _hx_tmp1;
HXDLIN( 586)		if (hx::IsNotNull( shape1->zpp_inner->body )) {
HXLINE( 586)			_hx_tmp1 = shape1->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 586)			_hx_tmp1 = null();
            		}
HXDLIN( 586)		 ::nape::phys::Body _hx_tmp2;
HXDLIN( 586)		if (hx::IsNotNull( shape2->zpp_inner->body )) {
HXLINE( 586)			_hx_tmp2 = shape2->zpp_inner->body->outer;
            		}
            		else {
HXLINE( 586)			_hx_tmp2 = null();
            		}
HXDLIN( 586)		if (hx::IsEq( _hx_tmp1,_hx_tmp2 )) {
HXLINE( 586)			return null();
            		}
HXLINE( 587)		HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s1) = shape1->zpp_inner;
HXLINE( 588)		HX_VARI(  ::zpp_nape::shape::ZPP_Shape,s2) = shape2->zpp_inner;
HXLINE( 589)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,b1) = s1->body;
HXDLIN( 589)		HX_VARI(  ::zpp_nape::phys::ZPP_Body,b2) = s2->body;
HXDLIN( 589)		HX_VAR( bool,con_ignore);
HXDLIN( 589)		{
HXLINE( 589)			con_ignore = false;
HXDLIN( 589)			{
HXLINE( 589)				HX_VARI(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,cx_ite) = b1->constraints->head;
HXDLIN( 589)				while(hx::IsNotNull( cx_ite )){
HXLINE( 589)					HX_VARI(  ::zpp_nape::constraint::ZPP_Constraint,con) = cx_ite->elt;
HXDLIN( 589)					bool _hx_tmp3;
HXDLIN( 589)					if (con->ignore) {
HXLINE( 589)						_hx_tmp3 = con->pair_exists(b1->id,b2->id);
            					}
            					else {
HXLINE( 589)						_hx_tmp3 = false;
            					}
HXDLIN( 589)					if (_hx_tmp3) {
HXLINE( 589)						con_ignore = true;
HXDLIN( 589)						goto _hx_goto_31;
            					}
HXDLIN( 589)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_31:;
            			}
            		}
HXDLIN( 589)		HX_VAR( int,_g);
HXDLIN( 589)		bool _g1;
HXDLIN( 589)		if (!(con_ignore)) {
HXLINE( 589)			HX_VARI(  ::zpp_nape::phys::ZPP_Interactor,cur) = s1;
HXDLIN( 589)			while(true){
HXLINE( 589)				bool _g2;
HXDLIN( 589)				if (hx::IsNotNull( cur )) {
HXLINE( 589)					_g2 = hx::IsNull( cur->group );
            				}
            				else {
HXLINE( 589)					_g2 = false;
            				}
HXDLIN( 589)				if (!(_g2)) {
HXLINE( 589)					goto _hx_goto_32;
            				}
HXDLIN( 589)				if (hx::IsNotNull( cur->ishape )) {
HXLINE( 589)					cur = cur->ishape->body;
            				}
            				else {
HXLINE( 589)					if (hx::IsNotNull( cur->icompound )) {
HXLINE( 589)						cur = cur->icompound->compound;
            					}
            					else {
HXLINE( 589)						cur = cur->ibody->compound;
            					}
            				}
            			}
            			_hx_goto_32:;
HXDLIN( 589)			HX_VAR(  ::zpp_nape::dynamics::ZPP_InteractionGroup,g1);
HXDLIN( 589)			if (hx::IsNull( cur )) {
HXLINE( 589)				g1 = null();
            			}
            			else {
HXLINE( 589)				g1 = cur->group;
            			}
HXDLIN( 589)			bool _g3;
HXDLIN( 589)			if (hx::IsNull( g1 )) {
HXLINE( 589)				_g3 = false;
            			}
            			else {
HXLINE( 589)				HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Interactor,cur1,"cur") = s2;
HXDLIN( 589)				while(true){
HXLINE( 589)					bool _g4;
HXDLIN( 589)					if (hx::IsNotNull( cur1 )) {
HXLINE( 589)						_g4 = hx::IsNull( cur1->group );
            					}
            					else {
HXLINE( 589)						_g4 = false;
            					}
HXDLIN( 589)					if (!(_g4)) {
HXLINE( 589)						goto _hx_goto_33;
            					}
HXDLIN( 589)					if (hx::IsNotNull( cur1->ishape )) {
HXLINE( 589)						cur1 = cur1->ishape->body;
            					}
            					else {
HXLINE( 589)						if (hx::IsNotNull( cur1->icompound )) {
HXLINE( 589)							cur1 = cur1->icompound->compound;
            						}
            						else {
HXLINE( 589)							cur1 = cur1->ibody->compound;
            						}
            					}
            				}
            				_hx_goto_33:;
HXDLIN( 589)				HX_VAR(  ::zpp_nape::dynamics::ZPP_InteractionGroup,g2);
HXDLIN( 589)				if (hx::IsNull( cur1 )) {
HXLINE( 589)					g2 = null();
            				}
            				else {
HXLINE( 589)					g2 = cur1->group;
            				}
HXDLIN( 589)				if (hx::IsNull( g2 )) {
HXLINE( 589)					_g3 = false;
            				}
            				else {
HXLINE( 589)					HX_VARI( bool,ret) = false;
HXDLIN( 589)					while(true){
HXLINE( 589)						bool _g5;
HXDLIN( 589)						if (hx::IsNotNull( g1 )) {
HXLINE( 589)							_g5 = hx::IsNotNull( g2 );
            						}
            						else {
HXLINE( 589)							_g5 = false;
            						}
HXDLIN( 589)						if (!(_g5)) {
HXLINE( 589)							goto _hx_goto_34;
            						}
HXDLIN( 589)						if (hx::IsEq( g1,g2 )) {
HXLINE( 589)							ret = g1->ignore;
HXDLIN( 589)							goto _hx_goto_34;
            						}
HXDLIN( 589)						if ((g1->depth < g2->depth)) {
HXLINE( 589)							g2 = g2->group;
            						}
            						else {
HXLINE( 589)							g1 = g1->group;
            						}
            					}
            					_hx_goto_34:;
HXDLIN( 589)					_g3 = ret;
            				}
            			}
HXDLIN( 589)			_g1 = !(_g3);
            		}
            		else {
HXLINE( 589)			_g1 = false;
            		}
HXDLIN( 589)		if (_g1) {
HXLINE( 589)			bool _g6;
HXDLIN( 589)			bool _g7;
HXDLIN( 589)			if (!(s1->sensorEnabled)) {
HXLINE( 589)				_g7 = s2->sensorEnabled;
            			}
            			else {
HXLINE( 589)				_g7 = true;
            			}
HXDLIN( 589)			if (_g7) {
HXLINE( 589)				HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this2,"_this") = s1->filter;
HXDLIN( 589)				HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,x) = s2->filter;
HXDLIN( 589)				if ((((int)_this2->sensorMask & (int)x->sensorGroup) != (int)0)) {
HXLINE( 589)					_g6 = (((int)x->sensorMask & (int)_this2->sensorGroup) != (int)0);
            				}
            				else {
HXLINE( 589)					_g6 = false;
            				}
            			}
            			else {
HXLINE( 589)				_g6 = false;
            			}
HXDLIN( 589)			if (_g6) {
HXLINE( 589)				_g = (int)2;
            			}
            			else {
HXLINE( 589)				bool _g8;
HXDLIN( 589)				bool _g9;
HXDLIN( 589)				bool _g10;
HXDLIN( 589)				if (!(s1->fluidEnabled)) {
HXLINE( 589)					_g10 = s2->fluidEnabled;
            				}
            				else {
HXLINE( 589)					_g10 = true;
            				}
HXDLIN( 589)				if (_g10) {
HXLINE( 589)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this3,"_this") = s1->filter;
HXDLIN( 589)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,x1,"x") = s2->filter;
HXDLIN( 589)					if ((((int)_this3->fluidMask & (int)x1->fluidGroup) != (int)0)) {
HXLINE( 589)						_g9 = (((int)x1->fluidMask & (int)_this3->fluidGroup) != (int)0);
            					}
            					else {
HXLINE( 589)						_g9 = false;
            					}
            				}
            				else {
HXLINE( 589)					_g9 = false;
            				}
HXDLIN( 589)				if (_g9) {
HXLINE( 589)					bool _g11;
HXDLIN( 589)					bool _g12;
HXDLIN( 589)					bool _g13;
HXDLIN( 589)					if ((b1->imass == (int)0)) {
HXLINE( 589)						_g13 = (b2->imass == (int)0);
            					}
            					else {
HXLINE( 589)						_g13 = false;
            					}
HXDLIN( 589)					if (_g13) {
HXLINE( 589)						_g12 = (b1->iinertia == (int)0);
            					}
            					else {
HXLINE( 589)						_g12 = false;
            					}
HXDLIN( 589)					if (_g12) {
HXLINE( 589)						_g11 = (b2->iinertia == (int)0);
            					}
            					else {
HXLINE( 589)						_g11 = false;
            					}
HXDLIN( 589)					_g8 = !(_g11);
            				}
            				else {
HXLINE( 589)					_g8 = false;
            				}
HXDLIN( 589)				if (_g8) {
HXLINE( 589)					_g = (int)0;
            				}
            				else {
HXLINE( 589)					bool _g14;
HXDLIN( 589)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this4,"_this") = s1->filter;
HXDLIN( 589)					HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,x2,"x") = s2->filter;
HXDLIN( 589)					bool _g15;
HXDLIN( 589)					if ((((int)_this4->collisionMask & (int)x2->collisionGroup) != (int)0)) {
HXLINE( 589)						_g15 = (((int)x2->collisionMask & (int)_this4->collisionGroup) != (int)0);
            					}
            					else {
HXLINE( 589)						_g15 = false;
            					}
HXDLIN( 589)					if (_g15) {
HXLINE( 589)						bool _g16;
HXDLIN( 589)						bool _g17;
HXDLIN( 589)						bool _g18;
HXDLIN( 589)						if ((b1->imass == (int)0)) {
HXLINE( 589)							_g18 = (b2->imass == (int)0);
            						}
            						else {
HXLINE( 589)							_g18 = false;
            						}
HXDLIN( 589)						if (_g18) {
HXLINE( 589)							_g17 = (b1->iinertia == (int)0);
            						}
            						else {
HXLINE( 589)							_g17 = false;
            						}
HXDLIN( 589)						if (_g17) {
HXLINE( 589)							_g16 = (b2->iinertia == (int)0);
            						}
            						else {
HXLINE( 589)							_g16 = false;
            						}
HXDLIN( 589)						_g14 = !(_g16);
            					}
            					else {
HXLINE( 589)						_g14 = false;
            					}
HXDLIN( 589)					if (_g14) {
HXLINE( 589)						_g = (int)1;
            					}
            					else {
HXLINE( 589)						_g = (int)-1;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 589)			_g = (int)-1;
            		}
HXDLIN( 589)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 590)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID )) {
HXLINE( 590)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 590)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 590)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXLINE( 589)				return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID;
            			}
            			break;
            			case (int)1: {
HXLINE( 591)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION )) {
HXLINE( 591)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 591)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 591)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXLINE( 589)				return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION;
            			}
            			break;
            			case (int)2: {
HXLINE( 592)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR )) {
HXLINE( 592)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 592)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 592)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXLINE( 589)				return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR;
            			}
            			break;
            			default:{
HXLINE( 589)				return null();
            			}
            		}
HXDLIN( 589)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Space_obj,interactionType,return )

 ::nape::shape::ShapeList Space_obj::shapesUnderPoint( ::nape::geom::Vec2 point, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_610_shapesUnderPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 619)		HX_VARI(  ::zpp_nape::space::ZPP_Space,ret) = this->zpp_inner;
HXDLIN( 619)		{
HXLINE( 619)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = point->zpp_inner;
HXDLIN( 619)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 619)				_this->_validate();
            			}
            		}
HXDLIN( 619)		HX_VARI_NAME( Float,ret1,"ret") = point->zpp_inner->x;
HXDLIN( 619)		{
HXLINE( 619)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = point->zpp_inner;
HXDLIN( 619)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 619)				_this1->_validate();
            			}
            		}
HXDLIN( 619)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret2;
HXDLIN( 619)		if (hx::IsNull( filter )) {
HXLINE( 619)			ret2 = null();
            		}
            		else {
HXLINE( 619)			ret2 = filter->zpp_inner;
            		}
HXDLIN( 619)		HX_VARI_NAME(  ::nape::shape::ShapeList,ret3,"ret") = ret->shapesUnderPoint(ret1,point->zpp_inner->y,ret2,output);
HXLINE( 620)		if (point->zpp_inner->weak) {
HXLINE( 624)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN( 624)			point->zpp_inner->outer = null();
HXDLIN( 624)			point->zpp_inner = null();
HXDLIN( 624)			{
HXLINE( 624)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 624)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN( 624)			{
HXLINE( 624)				{
HXLINE( 624)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 624)						inner->outer->zpp_inner = null();
HXDLIN( 624)						inner->outer = null();
            					}
HXDLIN( 624)					inner->_isimmutable = null();
HXDLIN( 624)					inner->_validate = null();
HXDLIN( 624)					inner->_invalidate = null();
            				}
HXDLIN( 624)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 624)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 631)		return ret3;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,shapesUnderPoint,return )

 ::nape::phys::BodyList Space_obj::bodiesUnderPoint( ::nape::geom::Vec2 point, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_647_bodiesUnderPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 656)		HX_VARI(  ::zpp_nape::space::ZPP_Space,ret) = this->zpp_inner;
HXDLIN( 656)		{
HXLINE( 656)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = point->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 656)				_this->_validate();
            			}
            		}
HXDLIN( 656)		HX_VARI_NAME( Float,ret1,"ret") = point->zpp_inner->x;
HXDLIN( 656)		{
HXLINE( 656)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = point->zpp_inner;
HXDLIN( 656)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 656)				_this1->_validate();
            			}
            		}
HXDLIN( 656)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret2;
HXDLIN( 656)		if (hx::IsNull( filter )) {
HXLINE( 656)			ret2 = null();
            		}
            		else {
HXLINE( 656)			ret2 = filter->zpp_inner;
            		}
HXDLIN( 656)		HX_VARI_NAME(  ::nape::phys::BodyList,ret3,"ret") = ret->bodiesUnderPoint(ret1,point->zpp_inner->y,ret2,output);
HXLINE( 657)		if (point->zpp_inner->weak) {
HXLINE( 661)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN( 661)			point->zpp_inner->outer = null();
HXDLIN( 661)			point->zpp_inner = null();
HXDLIN( 661)			{
HXLINE( 661)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 661)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN( 661)			{
HXLINE( 661)				{
HXLINE( 661)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 661)						inner->outer->zpp_inner = null();
HXDLIN( 661)						inner->outer = null();
            					}
HXDLIN( 661)					inner->_isimmutable = null();
HXDLIN( 661)					inner->_validate = null();
HXDLIN( 661)					inner->_invalidate = null();
            				}
HXDLIN( 661)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 661)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 668)		return ret3;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,bodiesUnderPoint,return )

 ::nape::shape::ShapeList Space_obj::shapesInAABB( ::nape::geom::AABB aabb,hx::Null< bool >  __o_containment,hx::Null< bool >  __o_strict, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
bool containment = __o_containment.Default(false);
bool strict = __o_strict.Default(true);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_695_shapesInAABB)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(strict,"strict")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 695)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp;
HXDLIN( 695)		if (hx::IsNull( filter )) {
HXLINE( 695)			_hx_tmp = null();
            		}
            		else {
HXLINE( 695)			_hx_tmp = filter->zpp_inner;
            		}
HXDLIN( 695)		return this->zpp_inner->shapesInAABB(aabb,strict,containment,_hx_tmp,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,shapesInAABB,return )

 ::nape::phys::BodyList Space_obj::bodiesInAABB( ::nape::geom::AABB aabb,hx::Null< bool >  __o_containment,hx::Null< bool >  __o_strict, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
bool containment = __o_containment.Default(false);
bool strict = __o_strict.Default(true);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_723_bodiesInAABB)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(strict,"strict")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 723)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp;
HXDLIN( 723)		if (hx::IsNull( filter )) {
HXLINE( 723)			_hx_tmp = null();
            		}
            		else {
HXLINE( 723)			_hx_tmp = filter->zpp_inner;
            		}
HXDLIN( 723)		return this->zpp_inner->bodiesInAABB(aabb,strict,containment,_hx_tmp,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,bodiesInAABB,return )

 ::nape::shape::ShapeList Space_obj::shapesInCircle( ::nape::geom::Vec2 position,Float radius,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
bool containment = __o_containment.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_744_shapesInCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 755)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret;
HXDLIN( 755)		if (hx::IsNull( filter )) {
HXLINE( 755)			ret = null();
            		}
            		else {
HXLINE( 755)			ret = filter->zpp_inner;
            		}
HXDLIN( 755)		HX_VARI_NAME(  ::nape::shape::ShapeList,ret1,"ret") = this->zpp_inner->shapesInCircle(position,radius,containment,ret,output);
HXLINE( 756)		if (position->zpp_inner->weak) {
HXLINE( 760)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = position->zpp_inner;
HXDLIN( 760)			position->zpp_inner->outer = null();
HXDLIN( 760)			position->zpp_inner = null();
HXDLIN( 760)			{
HXLINE( 760)				position->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 760)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = position;
            			}
HXDLIN( 760)			{
HXLINE( 760)				{
HXLINE( 760)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 760)						inner->outer->zpp_inner = null();
HXDLIN( 760)						inner->outer = null();
            					}
HXDLIN( 760)					inner->_isimmutable = null();
HXDLIN( 760)					inner->_validate = null();
HXDLIN( 760)					inner->_invalidate = null();
            				}
HXDLIN( 760)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 760)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 767)		return ret1;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,shapesInCircle,return )

 ::nape::phys::BodyList Space_obj::bodiesInCircle( ::nape::geom::Vec2 position,Float radius,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
bool containment = __o_containment.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_791_bodiesInCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 802)		 ::zpp_nape::dynamics::ZPP_InteractionFilter ret;
HXDLIN( 802)		if (hx::IsNull( filter )) {
HXLINE( 802)			ret = null();
            		}
            		else {
HXLINE( 802)			ret = filter->zpp_inner;
            		}
HXDLIN( 802)		HX_VARI_NAME(  ::nape::phys::BodyList,ret1,"ret") = this->zpp_inner->bodiesInCircle(position,radius,containment,ret,output);
HXLINE( 803)		if (position->zpp_inner->weak) {
HXLINE( 807)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = position->zpp_inner;
HXDLIN( 807)			position->zpp_inner->outer = null();
HXDLIN( 807)			position->zpp_inner = null();
HXDLIN( 807)			{
HXLINE( 807)				position->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 807)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = position;
            			}
HXDLIN( 807)			{
HXLINE( 807)				{
HXLINE( 807)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 807)						inner->outer->zpp_inner = null();
HXDLIN( 807)						inner->outer = null();
            					}
HXDLIN( 807)					inner->_isimmutable = null();
HXDLIN( 807)					inner->_validate = null();
HXDLIN( 807)					inner->_invalidate = null();
            				}
HXDLIN( 807)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 807)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 814)		return ret1;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,bodiesInCircle,return )

 ::nape::shape::ShapeList Space_obj::shapesInShape( ::nape::shape::Shape shape,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
bool containment = __o_containment.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_847_shapesInShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 847)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp;
HXDLIN( 847)		if (hx::IsNull( filter )) {
HXLINE( 847)			_hx_tmp = null();
            		}
            		else {
HXLINE( 847)			_hx_tmp = filter->zpp_inner;
            		}
HXDLIN( 847)		return this->zpp_inner->shapesInShape(shape->zpp_inner,containment,_hx_tmp,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,shapesInShape,return )

 ::nape::phys::BodyList Space_obj::bodiesInShape( ::nape::shape::Shape shape,hx::Null< bool >  __o_containment, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
bool containment = __o_containment.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_879_bodiesInShape)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(containment,"containment")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 879)		 ::zpp_nape::dynamics::ZPP_InteractionFilter _hx_tmp;
HXDLIN( 879)		if (hx::IsNull( filter )) {
HXLINE( 879)			_hx_tmp = null();
            		}
            		else {
HXLINE( 879)			_hx_tmp = filter->zpp_inner;
            		}
HXDLIN( 879)		return this->zpp_inner->bodiesInShape(shape->zpp_inner,containment,_hx_tmp,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,bodiesInShape,return )

 ::nape::shape::ShapeList Space_obj::shapesInBody( ::nape::phys::Body body, ::nape::dynamics::InteractionFilter filter, ::nape::shape::ShapeList output){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_898_shapesInBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 902)		HX_VAR(  ::nape::shape::ShapeList,ret);
HXDLIN( 902)		if (hx::IsNull( output )) {
HXLINE( 902)			ret =  ::nape::shape::ShapeList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 902)			ret = output;
            		}
HXLINE( 903)		{
HXLINE( 903)			HX_VARI(  ::nape::shape::ShapeList,_this) = body->zpp_inner->wrap_shapes;
HXDLIN( 903)			_this->zpp_inner->valmod();
HXDLIN( 903)			HX_VARI(  ::nape::shape::ShapeIterator,_g) = ::nape::shape::ShapeIterator_obj::get(_this);
HXDLIN( 903)			while(true){
HXLINE( 903)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 903)				HX_VARI_NAME(  ::nape::shape::ShapeList,_this1,"_this") = _g->zpp_inner;
HXDLIN( 903)				_this1->zpp_inner->valmod();
HXDLIN( 903)				if (_this1->zpp_inner->zip_length) {
HXLINE( 903)					_this1->zpp_inner->zip_length = false;
HXDLIN( 903)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 903)				_g->zpp_critical = true;
HXDLIN( 903)				bool _hx_tmp;
HXDLIN( 903)				if ((_g->zpp_i < _this1->zpp_inner->user_length)) {
HXLINE( 903)					_hx_tmp = true;
            				}
            				else {
HXLINE( 903)					{
HXLINE( 903)						_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
HXDLIN( 903)						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
HXDLIN( 903)						_g->zpp_inner = null();
            					}
HXDLIN( 903)					_hx_tmp = false;
            				}
HXDLIN( 903)				if (!(_hx_tmp)) {
HXLINE( 903)					goto _hx_goto_44;
            				}
HXDLIN( 903)				_g->zpp_critical = false;
HXLINE( 904)				this->shapesInShape(_g->zpp_inner->at(_g->zpp_i++),false,filter,ret);
            			}
            			_hx_goto_44:;
            		}
HXLINE( 906)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,shapesInBody,return )

 ::nape::phys::BodyList Space_obj::bodiesInBody( ::nape::phys::Body body, ::nape::dynamics::InteractionFilter filter, ::nape::phys::BodyList output){
            	HX_GC_STACKFRAME(&_hx_pos_dd842c0da2ce1650_924_bodiesInBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE( 928)		HX_VAR(  ::nape::phys::BodyList,ret);
HXDLIN( 928)		if (hx::IsNull( output )) {
HXLINE( 928)			ret =  ::nape::phys::BodyList_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 928)			ret = output;
            		}
HXLINE( 929)		{
HXLINE( 929)			HX_VARI(  ::nape::shape::ShapeList,_this) = body->zpp_inner->wrap_shapes;
HXDLIN( 929)			_this->zpp_inner->valmod();
HXDLIN( 929)			HX_VARI(  ::nape::shape::ShapeIterator,_g) = ::nape::shape::ShapeIterator_obj::get(_this);
HXDLIN( 929)			while(true){
HXLINE( 929)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 929)				HX_VARI_NAME(  ::nape::shape::ShapeList,_this1,"_this") = _g->zpp_inner;
HXDLIN( 929)				_this1->zpp_inner->valmod();
HXDLIN( 929)				if (_this1->zpp_inner->zip_length) {
HXLINE( 929)					_this1->zpp_inner->zip_length = false;
HXDLIN( 929)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN( 929)				_g->zpp_critical = true;
HXDLIN( 929)				bool _hx_tmp;
HXDLIN( 929)				if ((_g->zpp_i < _this1->zpp_inner->user_length)) {
HXLINE( 929)					_hx_tmp = true;
            				}
            				else {
HXLINE( 929)					{
HXLINE( 929)						_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
HXDLIN( 929)						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
HXDLIN( 929)						_g->zpp_inner = null();
            					}
HXDLIN( 929)					_hx_tmp = false;
            				}
HXDLIN( 929)				if (!(_hx_tmp)) {
HXLINE( 929)					goto _hx_goto_46;
            				}
HXDLIN( 929)				_g->zpp_critical = false;
HXLINE( 930)				this->bodiesInShape(_g->zpp_inner->at(_g->zpp_i++),false,filter,ret);
            			}
            			_hx_goto_46:;
            		}
HXLINE( 932)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,bodiesInBody,return )

 ::nape::geom::ConvexResult Space_obj::convexCast( ::nape::shape::Shape shape,Float deltaTime,hx::Null< bool >  __o_liveSweep, ::nape::dynamics::InteractionFilter filter){
bool liveSweep = __o_liveSweep.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_967_convexCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(deltaTime,"deltaTime")
            	HX_STACK_ARG(liveSweep,"liveSweep")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 967)		return this->zpp_inner->convexCast(shape->zpp_inner,deltaTime,filter,liveSweep);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,convexCast,return )

 ::nape::geom::ConvexResultList Space_obj::convexMultiCast( ::nape::shape::Shape shape,Float deltaTime,hx::Null< bool >  __o_liveSweep, ::nape::dynamics::InteractionFilter filter, ::nape::geom::ConvexResultList output){
bool liveSweep = __o_liveSweep.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_1002_convexMultiCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(deltaTime,"deltaTime")
            	HX_STACK_ARG(liveSweep,"liveSweep")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE(1002)		return this->zpp_inner->convexMultiCast(shape->zpp_inner,deltaTime,filter,liveSweep,output);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Space_obj,convexMultiCast,return )

 ::nape::geom::RayResult Space_obj::rayCast( ::nape::geom::Ray ray,hx::Null< bool >  __o_inner, ::nape::dynamics::InteractionFilter filter){
bool inner = __o_inner.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_1027_rayCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ray,"ray")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(filter,"filter")
HXLINE(1027)		return this->zpp_inner->rayCast(ray,inner,filter);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Space_obj,rayCast,return )

 ::nape::geom::RayResultList Space_obj::rayMultiCast( ::nape::geom::Ray ray,hx::Null< bool >  __o_inner, ::nape::dynamics::InteractionFilter filter, ::nape::geom::RayResultList output){
bool inner = __o_inner.Default(false);
            	HX_STACKFRAME(&_hx_pos_dd842c0da2ce1650_1052_rayMultiCast)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ray,"ray")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(output,"output")
HXLINE(1052)		return this->zpp_inner->rayMultiCast(ray,inner,filter,output);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Space_obj,rayMultiCast,return )


hx::ObjectPtr< Space_obj > Space_obj::__new( ::nape::geom::Vec2 gravity, ::nape::space::Broadphase broadphase) {
	hx::ObjectPtr< Space_obj > __this = new Space_obj();
	__this->__construct(gravity,broadphase);
	return __this;
}

hx::ObjectPtr< Space_obj > Space_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::geom::Vec2 gravity, ::nape::space::Broadphase broadphase) {
	Space_obj *__this = (Space_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Space_obj), true, "nape.space.Space"));
	*(void **)__this = Space_obj::_hx_vtable;
	__this->__construct(gravity,broadphase);
	return __this;
}

Space_obj::Space_obj()
{
}

void Space_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Space);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Space_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Space_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_world()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bodies()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gravity()); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_userData()); }
		if (HX_FIELD_EQ(inName,"arbiters") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_arbiters()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"compounds") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_compounds()); }
		if (HX_FIELD_EQ(inName,"get_world") ) { return hx::Val( get_world_dyn()); }
		if (HX_FIELD_EQ(inName,"listeners") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_listeners()); }
		if (HX_FIELD_EQ(inName,"timeStamp") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_timeStamp()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"broadphase") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_broadphase()); }
		if (HX_FIELD_EQ(inName,"get_bodies") ) { return hx::Val( get_bodies_dyn()); }
		if (HX_FIELD_EQ(inName,"liveBodies") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_liveBodies()); }
		if (HX_FIELD_EQ(inName,"convexCast") ) { return hx::Val( convexCast_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_gravity") ) { return hx::Val( get_gravity_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gravity") ) { return hx::Val( set_gravity_dyn()); }
		if (HX_FIELD_EQ(inName,"constraints") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_constraints()); }
		if (HX_FIELD_EQ(inName,"visitBodies") ) { return hx::Val( visitBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"elapsedTime") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_elapsedTime()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn()); }
		if (HX_FIELD_EQ(inName,"sortContacts") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sortContacts()); }
		if (HX_FIELD_EQ(inName,"get_arbiters") ) { return hx::Val( get_arbiters_dyn()); }
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return hx::Val( shapesInAABB_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return hx::Val( bodiesInAABB_dyn()); }
		if (HX_FIELD_EQ(inName,"shapesInBody") ) { return hx::Val( shapesInBody_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInBody") ) { return hx::Val( bodiesInBody_dyn()); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return hx::Val( rayMultiCast_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_compounds") ) { return hx::Val( get_compounds_dyn()); }
		if (HX_FIELD_EQ(inName,"get_listeners") ) { return hx::Val( get_listeners_dyn()); }
		if (HX_FIELD_EQ(inName,"get_timeStamp") ) { return hx::Val( get_timeStamp_dyn()); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return hx::Val( shapesInShape_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return hx::Val( bodiesInShape_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_broadphase") ) { return hx::Val( get_broadphase_dyn()); }
		if (HX_FIELD_EQ(inName,"get_liveBodies") ) { return hx::Val( get_liveBodies_dyn()); }
		if (HX_FIELD_EQ(inName,"visitCompounds") ) { return hx::Val( visitCompounds_dyn()); }
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return hx::Val( shapesInCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return hx::Val( bodiesInCircle_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"worldLinearDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_worldLinearDrag()); }
		if (HX_FIELD_EQ(inName,"get_constraints") ) { return hx::Val( get_constraints_dyn()); }
		if (HX_FIELD_EQ(inName,"liveConstraints") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_liveConstraints()); }
		if (HX_FIELD_EQ(inName,"get_elapsedTime") ) { return hx::Val( get_elapsedTime_dyn()); }
		if (HX_FIELD_EQ(inName,"interactionType") ) { return hx::Val( interactionType_dyn()); }
		if (HX_FIELD_EQ(inName,"convexMultiCast") ) { return hx::Val( convexMultiCast_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_sortContacts") ) { return hx::Val( get_sortContacts_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sortContacts") ) { return hx::Val( set_sortContacts_dyn()); }
		if (HX_FIELD_EQ(inName,"worldAngularDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_worldAngularDrag()); }
		if (HX_FIELD_EQ(inName,"visitConstraints") ) { return hx::Val( visitConstraints_dyn()); }
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return hx::Val( shapesUnderPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return hx::Val( bodiesUnderPoint_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_worldLinearDrag") ) { return hx::Val( get_worldLinearDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"set_worldLinearDrag") ) { return hx::Val( set_worldLinearDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"get_liveConstraints") ) { return hx::Val( get_liveConstraints_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_worldAngularDrag") ) { return hx::Val( get_worldAngularDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"set_worldAngularDrag") ) { return hx::Val( set_worldAngularDrag_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Space_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gravity(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::space::ZPP_Space >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sortContacts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sortContacts(inValue) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"worldLinearDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_worldLinearDrag(inValue) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"worldAngularDrag") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_worldAngularDrag(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Space_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("gravity","\x4e","\x6e","\xff","\x77"));
	outFields->push(HX_HCSTRING("broadphase","\xb9","\x5d","\x1d","\xd8"));
	outFields->push(HX_HCSTRING("sortContacts","\x51","\x43","\x24","\xa6"));
	outFields->push(HX_HCSTRING("worldAngularDrag","\xc4","\xfe","\xf3","\x7d"));
	outFields->push(HX_HCSTRING("worldLinearDrag","\x6b","\x75","\xd4","\xfd"));
	outFields->push(HX_HCSTRING("compounds","\xa8","\x3a","\xfb","\x13"));
	outFields->push(HX_HCSTRING("bodies","\x80","\x1b","\xdd","\x5a"));
	outFields->push(HX_HCSTRING("liveBodies","\x8c","\xa7","\x18","\xf9"));
	outFields->push(HX_HCSTRING("constraints","\x76","\x51","\xb4","\x17"));
	outFields->push(HX_HCSTRING("liveConstraints","\xea","\x99","\x65","\xc6"));
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("arbiters","\x6a","\x2c","\xb2","\x21"));
	outFields->push(HX_HCSTRING("listeners","\x7f","\x65","\x8e","\xf3"));
	outFields->push(HX_HCSTRING("timeStamp","\xb6","\x44","\xfc","\x38"));
	outFields->push(HX_HCSTRING("elapsedTime","\x69","\x5e","\xcd","\xc6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Space_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::space::ZPP_Space*/ ,(int)offsetof(Space_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Space_obj_sStaticStorageInfo = 0;
#endif

static ::String Space_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_userData","\x1e","\x4a","\x42","\xba"),
	HX_HCSTRING("get_gravity","\x65","\xce","\xf9","\xfd"),
	HX_HCSTRING("set_gravity","\x71","\xd5","\x66","\x08"),
	HX_HCSTRING("get_broadphase","\x02","\xe6","\x12","\x4e"),
	HX_HCSTRING("get_sortContacts","\xda","\x2f","\xc3","\xaa"),
	HX_HCSTRING("set_sortContacts","\x4e","\x1d","\x05","\x01"),
	HX_HCSTRING("get_worldAngularDrag","\xcd","\x63","\x5e","\x9c"),
	HX_HCSTRING("set_worldAngularDrag","\x41","\x1b","\x16","\x69"),
	HX_HCSTRING("get_worldLinearDrag","\x82","\x44","\xdf","\x88"),
	HX_HCSTRING("set_worldLinearDrag","\x8e","\x37","\x7c","\xc5"),
	HX_HCSTRING("get_compounds","\x7f","\x0e","\x5f","\xd5"),
	HX_HCSTRING("get_bodies","\x49","\x8b","\x64","\x4b"),
	HX_HCSTRING("get_liveBodies","\xd5","\x2f","\x0e","\x6f"),
	HX_HCSTRING("get_constraints","\x0d","\x09","\x96","\xd8"),
	HX_HCSTRING("get_liveConstraints","\x01","\x69","\x70","\x51"),
	HX_HCSTRING("visitBodies","\xab","\xf3","\x5e","\xe4"),
	HX_HCSTRING("visitConstraints","\x6b","\xfd","\xdb","\xc1"),
	HX_HCSTRING("visitCompounds","\x5d","\x8f","\x9c","\x93"),
	HX_HCSTRING("get_world","\xa9","\xf2","\x0d","\x12"),
	HX_HCSTRING("get_arbiters","\x73","\xe0","\xcb","\xd6"),
	HX_HCSTRING("get_listeners","\x56","\x39","\xf2","\xb4"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("get_timeStamp","\x8d","\x18","\x60","\xfa"),
	HX_HCSTRING("get_elapsedTime","\x00","\x16","\xaf","\x87"),
	HX_HCSTRING("interactionType","\xac","\xa7","\xc8","\x08"),
	HX_HCSTRING("shapesUnderPoint","\xea","\xec","\xbc","\x47"),
	HX_HCSTRING("bodiesUnderPoint","\xb8","\x1b","\x30","\x80"),
	HX_HCSTRING("shapesInAABB","\xd7","\x1c","\x84","\xf9"),
	HX_HCSTRING("bodiesInAABB","\xa5","\x4c","\x28","\x9e"),
	HX_HCSTRING("shapesInCircle","\x27","\xd4","\xf7","\x6c"),
	HX_HCSTRING("bodiesInCircle","\x75","\x13","\xe2","\xa6"),
	HX_HCSTRING("shapesInShape","\xea","\x90","\x2a","\xd1"),
	HX_HCSTRING("bodiesInShape","\x5c","\x35","\x30","\x3c"),
	HX_HCSTRING("shapesInBody","\xf9","\x58","\x50","\xfa"),
	HX_HCSTRING("bodiesInBody","\xc7","\x88","\xf4","\x9e"),
	HX_HCSTRING("convexCast","\xc6","\x01","\xbf","\x38"),
	HX_HCSTRING("convexMultiCast","\x71","\xc9","\xd5","\x6c"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("rayMultiCast","\x8e","\x02","\x7d","\x23"),
	::String(null()) };

static void Space_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Space_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Space_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Space_obj::__mClass,"__mClass");
};

#endif

hx::Class Space_obj::__mClass;

void Space_obj::__register()
{
	hx::Object *dummy = new Space_obj;
	Space_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.space.Space","\x78","\xde","\xa4","\x7c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Space_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Space_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Space_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Space_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Space_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Space_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace space
