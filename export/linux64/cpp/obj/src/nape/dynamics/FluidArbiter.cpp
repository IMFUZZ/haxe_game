// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_Arbiter
#include <nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_FluidArbiter
#include <nape/dynamics/FluidArbiter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <zpp_nape/geom/ZPP_Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_320_new,"nape.dynamics.FluidArbiter","new",0x49116625,"nape.dynamics.FluidArbiter.new","nape/dynamics/FluidArbiter.hx",320,0xd522c90b)
HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_185_get_position,"nape.dynamics.FluidArbiter","get_position",0x08ca5e4d,"nape.dynamics.FluidArbiter.get_position","nape/dynamics/FluidArbiter.hx",185,0xd522c90b)
HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_192_set_position,"nape.dynamics.FluidArbiter","set_position",0x1dc381c1,"nape.dynamics.FluidArbiter.set_position","nape/dynamics/FluidArbiter.hx",192,0xd522c90b)
HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_218_get_overlap,"nape.dynamics.FluidArbiter","get_overlap",0xd2ab0663,"nape.dynamics.FluidArbiter.get_overlap","nape/dynamics/FluidArbiter.hx",218,0xd522c90b)
HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_220_set_overlap,"nape.dynamics.FluidArbiter","set_overlap",0xdd180d6f,"nape.dynamics.FluidArbiter.set_overlap","nape/dynamics/FluidArbiter.hx",220,0xd522c90b)
HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_246_buoyancyImpulse,"nape.dynamics.FluidArbiter","buoyancyImpulse",0x456d50ba,"nape.dynamics.FluidArbiter.buoyancyImpulse","nape/dynamics/FluidArbiter.hx",246,0xd522c90b)
HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_275_dragImpulse,"nape.dynamics.FluidArbiter","dragImpulse",0xc77ed5e6,"nape.dynamics.FluidArbiter.dragImpulse","nape/dynamics/FluidArbiter.hx",275,0xd522c90b)
HX_DEFINE_STACK_FRAME(_hx_pos_01914838f75225be_298_totalImpulse,"nape.dynamics.FluidArbiter","totalImpulse",0x9f71eeec,"nape.dynamics.FluidArbiter.totalImpulse","nape/dynamics/FluidArbiter.hx",298,0xd522c90b)
namespace nape{
namespace dynamics{

void FluidArbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_320_new)
            	HX_STACK_THIS(this)
HXLINE( 320)		super::__construct();
            	}

Dynamic FluidArbiter_obj::__CreateEmpty() { return new FluidArbiter_obj; }

void *FluidArbiter_obj::_hx_vtable = 0;

Dynamic FluidArbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FluidArbiter_obj > _hx_result = new FluidArbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FluidArbiter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3d1477e9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3d1477e9;
	} else {
		return inClassId==(int)0x4b698aff;
	}
}

 ::nape::geom::Vec2 FluidArbiter_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_185_get_position)
            	HX_STACK_THIS(this)
HXLINE( 189)		if (hx::IsNull( this->zpp_inner->fluidarb->wrap_position )) {
HXLINE( 189)			this->zpp_inner->fluidarb->getposition();
            		}
HXLINE( 190)		return this->zpp_inner->fluidarb->wrap_position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidArbiter_obj,get_position,return )

 ::nape::geom::Vec2 FluidArbiter_obj::set_position( ::nape::geom::Vec2 position){
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_192_set_position)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
HXLINE( 200)		{
HXLINE( 200)			if (hx::IsNull( this->zpp_inner->fluidarb->wrap_position )) {
HXLINE( 200)				this->zpp_inner->fluidarb->getposition();
            			}
HXDLIN( 200)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->fluidarb->wrap_position;
HXDLIN( 200)			{
HXLINE( 200)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = position->zpp_inner;
HXDLIN( 200)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 200)					_this1->_validate();
            				}
            			}
HXDLIN( 200)			HX_VARI( Float,x) = position->zpp_inner->x;
HXDLIN( 200)			{
HXLINE( 200)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = position->zpp_inner;
HXDLIN( 200)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 200)					_this2->_validate();
            				}
            			}
HXDLIN( 200)			HX_VARI( Float,y) = position->zpp_inner->y;
HXDLIN( 200)			bool _hx_tmp;
HXDLIN( 200)			{
HXLINE( 200)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 200)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 200)					_this3->_validate();
            				}
            			}
HXDLIN( 200)			if ((_this->zpp_inner->x == x)) {
HXLINE( 200)				{
HXLINE( 200)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 200)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 200)						_this4->_validate();
            					}
            				}
HXDLIN( 200)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 200)				_hx_tmp = false;
            			}
HXDLIN( 200)			if (!(_hx_tmp)) {
HXLINE( 200)				{
HXLINE( 200)					_this->zpp_inner->x = x;
HXDLIN( 200)					_this->zpp_inner->y = y;
            				}
HXDLIN( 200)				{
HXLINE( 200)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 200)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 200)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 200)			if (position->zpp_inner->weak) {
HXLINE( 200)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = position->zpp_inner;
HXDLIN( 200)				position->zpp_inner->outer = null();
HXDLIN( 200)				position->zpp_inner = null();
HXDLIN( 200)				{
HXLINE( 200)					position->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 200)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = position;
            				}
HXDLIN( 200)				{
HXLINE( 200)					{
HXLINE( 200)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 200)							inner->outer->zpp_inner = null();
HXDLIN( 200)							inner->outer = null();
            						}
HXDLIN( 200)						inner->_isimmutable = null();
HXDLIN( 200)						inner->_validate = null();
HXDLIN( 200)						inner->_invalidate = null();
            					}
HXDLIN( 200)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 200)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 202)		if (hx::IsNull( this->zpp_inner->fluidarb->wrap_position )) {
HXLINE( 202)			this->zpp_inner->fluidarb->getposition();
            		}
HXDLIN( 202)		return this->zpp_inner->fluidarb->wrap_position;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidArbiter_obj,set_position,return )

Float FluidArbiter_obj::get_overlap(){
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_218_get_overlap)
            	HX_STACK_THIS(this)
HXLINE( 218)		return this->zpp_inner->fluidarb->overlap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FluidArbiter_obj,get_overlap,return )

Float FluidArbiter_obj::set_overlap(Float overlap){
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_220_set_overlap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(overlap,"overlap")
HXLINE( 231)		this->zpp_inner->fluidarb->overlap = overlap;
HXLINE( 233)		return this->zpp_inner->fluidarb->overlap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidArbiter_obj,set_overlap,return )

 ::nape::geom::Vec3 FluidArbiter_obj::buoyancyImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_246_buoyancyImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 253)		HX_VARI(  ::zpp_nape::dynamics::ZPP_FluidArbiter,farb) = this->zpp_inner->fluidarb;
HXLINE( 254)		if (hx::IsNull( body )) {
HXLINE( 255)			return ::nape::geom::Vec3_obj::get(farb->buoyx,farb->buoyy,(int)0);
            		}
            		else {
HXLINE( 257)			if (hx::IsEq( body->zpp_inner,this->zpp_inner->b2 )) {
HXLINE( 258)				return ::nape::geom::Vec3_obj::get(farb->buoyx,farb->buoyy,((farb->buoyy * farb->r2x) - (farb->buoyx * farb->r2y)));
            			}
            			else {
HXLINE( 261)				return ::nape::geom::Vec3_obj::get(-(farb->buoyx),-(farb->buoyy),-(((farb->buoyy * farb->r1x) - (farb->buoyx * farb->r1y))));
            			}
            		}
HXLINE( 254)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidArbiter_obj,buoyancyImpulse,return )

 ::nape::geom::Vec3 FluidArbiter_obj::dragImpulse( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_275_dragImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 282)		HX_VARI(  ::zpp_nape::dynamics::ZPP_FluidArbiter,farb) = this->zpp_inner->fluidarb;
HXLINE( 283)		HX_VAR( int,scale);
HXDLIN( 283)		bool scale1;
HXDLIN( 283)		if (hx::IsNotNull( body )) {
HXLINE( 283)			scale1 = hx::IsEq( body->zpp_inner,this->zpp_inner->b2 );
            		}
            		else {
HXLINE( 283)			scale1 = true;
            		}
HXDLIN( 283)		if (scale1) {
HXLINE( 283)			scale = (int)1;
            		}
            		else {
HXLINE( 283)			scale = (int)-1;
            		}
HXLINE( 284)		return ::nape::geom::Vec3_obj::get((farb->dampx * scale),(farb->dampy * scale),(farb->adamp * scale));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FluidArbiter_obj,dragImpulse,return )

 ::nape::geom::Vec3 FluidArbiter_obj::totalImpulse( ::nape::phys::Body body,hx::Null< bool >  __o_freshOnly){
bool freshOnly = __o_freshOnly.Default(false);
            	HX_STACKFRAME(&_hx_pos_01914838f75225be_298_totalImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(freshOnly,"freshOnly")
HXLINE( 305)		HX_VARI(  ::nape::geom::Vec3,tmp) = this->buoyancyImpulse(body);
HXLINE( 306)		HX_VARI(  ::nape::geom::Vec3,ret) = this->dragImpulse(body);
HXLINE( 307)		{
HXLINE( 307)			{
HXLINE( 307)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec3,_this) = ret->zpp_inner;
HXDLIN( 307)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 307)					_this->_validate();
            				}
            			}
HXDLIN( 307)			HX_VARI( Float,x) = ret->zpp_inner->x;
HXDLIN( 307)			{
HXLINE( 307)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this1,"_this") = tmp->zpp_inner;
HXDLIN( 307)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 307)					_this1->_validate();
            				}
            			}
HXDLIN( 307)			ret->zpp_inner->x = (x + tmp->zpp_inner->x);
HXDLIN( 307)			{
HXLINE( 307)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this2,"_this") = ret->zpp_inner;
HXDLIN( 307)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 307)					_this2->_validate();
            				}
            			}
            		}
HXLINE( 308)		{
HXLINE( 308)			{
HXLINE( 308)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this3,"_this") = ret->zpp_inner;
HXDLIN( 308)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 308)					_this3->_validate();
            				}
            			}
HXDLIN( 308)			HX_VARI( Float,y) = ret->zpp_inner->y;
HXDLIN( 308)			{
HXLINE( 308)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this4,"_this") = tmp->zpp_inner;
HXDLIN( 308)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 308)					_this4->_validate();
            				}
            			}
HXDLIN( 308)			ret->zpp_inner->y = (y + tmp->zpp_inner->y);
HXDLIN( 308)			{
HXLINE( 308)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this5,"_this") = ret->zpp_inner;
HXDLIN( 308)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 308)					_this5->_validate();
            				}
            			}
            		}
HXLINE( 309)		{
HXLINE( 309)			{
HXLINE( 309)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this6,"_this") = ret->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 309)					_this6->_validate();
            				}
            			}
HXDLIN( 309)			HX_VARI( Float,z) = ret->zpp_inner->z;
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this7,"_this") = tmp->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 309)					_this7->_validate();
            				}
            			}
HXDLIN( 309)			ret->zpp_inner->z = (z + tmp->zpp_inner->z);
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec3,_this8,"_this") = ret->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 309)					_this8->_validate();
            				}
            			}
            		}
HXLINE( 310)		tmp->dispose();
HXLINE( 311)		return ret;
            	}



hx::ObjectPtr< FluidArbiter_obj > FluidArbiter_obj::__new() {
	hx::ObjectPtr< FluidArbiter_obj > __this = new FluidArbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FluidArbiter_obj > FluidArbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	FluidArbiter_obj *__this = (FluidArbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FluidArbiter_obj), true, "nape.dynamics.FluidArbiter"));
	*(void **)__this = FluidArbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FluidArbiter_obj::FluidArbiter_obj()
{
}

hx::Val FluidArbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"overlap") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_overlap()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_overlap") ) { return hx::Val( get_overlap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_overlap") ) { return hx::Val( set_overlap_dyn()); }
		if (HX_FIELD_EQ(inName,"dragImpulse") ) { return hx::Val( dragImpulse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
		if (HX_FIELD_EQ(inName,"totalImpulse") ) { return hx::Val( totalImpulse_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buoyancyImpulse") ) { return hx::Val( buoyancyImpulse_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FluidArbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"overlap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_overlap(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FluidArbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("overlap","\x87","\x43","\x10","\xa9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FluidArbiter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FluidArbiter_obj_sStaticStorageInfo = 0;
#endif

static ::String FluidArbiter_obj_sMemberFields[] = {
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get_overlap","\x9e","\xa3","\x0a","\x2f"),
	HX_HCSTRING("set_overlap","\xaa","\xaa","\x77","\x39"),
	HX_HCSTRING("buoyancyImpulse","\x75","\xa7","\x03","\x9f"),
	HX_HCSTRING("dragImpulse","\x21","\x73","\xde","\x23"),
	HX_HCSTRING("totalImpulse","\x51","\xe5","\xbb","\x16"),
	::String(null()) };

static void FluidArbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FluidArbiter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FluidArbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FluidArbiter_obj::__mClass,"__mClass");
};

#endif

hx::Class FluidArbiter_obj::__mClass;

void FluidArbiter_obj::__register()
{
	hx::Object *dummy = new FluidArbiter_obj;
	FluidArbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.dynamics.FluidArbiter","\xb3","\x6f","\x38","\xa3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FluidArbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FluidArbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FluidArbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FluidArbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FluidArbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FluidArbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace dynamics
