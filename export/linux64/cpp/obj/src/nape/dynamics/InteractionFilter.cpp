// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_206_new,"nape.dynamics.InteractionFilter","new",0xe0918fe8,"nape.dynamics.InteractionFilter.new","nape/dynamics/InteractionFilter.hx",206,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_224_get_userData,"nape.dynamics.InteractionFilter","get_userData",0x21645996,"nape.dynamics.InteractionFilter.get_userData","nape/dynamics/InteractionFilter.hx",224,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_239_get_shapes,"nape.dynamics.InteractionFilter","get_shapes",0x65060b73,"nape.dynamics.InteractionFilter.get_shapes","nape/dynamics/InteractionFilter.hx",239,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_250_get_collisionGroup,"nape.dynamics.InteractionFilter","get_collisionGroup",0x313677ae,"nape.dynamics.InteractionFilter.get_collisionGroup","nape/dynamics/InteractionFilter.hx",250,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_252_set_collisionGroup,"nape.dynamics.InteractionFilter","set_collisionGroup",0x0de5aa22,"nape.dynamics.InteractionFilter.set_collisionGroup","nape/dynamics/InteractionFilter.hx",252,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_268_get_collisionMask,"nape.dynamics.InteractionFilter","get_collisionMask",0x01d71f5d,"nape.dynamics.InteractionFilter.get_collisionMask","nape/dynamics/InteractionFilter.hx",268,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_270_set_collisionMask,"nape.dynamics.InteractionFilter","set_collisionMask",0x2544f769,"nape.dynamics.InteractionFilter.set_collisionMask","nape/dynamics/InteractionFilter.hx",270,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_286_get_sensorGroup,"nape.dynamics.InteractionFilter","get_sensorGroup",0x14d441c4,"nape.dynamics.InteractionFilter.get_sensorGroup","nape/dynamics/InteractionFilter.hx",286,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_288_set_sensorGroup,"nape.dynamics.InteractionFilter","set_sensorGroup",0x109fbed0,"nape.dynamics.InteractionFilter.set_sensorGroup","nape/dynamics/InteractionFilter.hx",288,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_304_get_sensorMask,"nape.dynamics.InteractionFilter","get_sensorMask",0x8a52aa07,"nape.dynamics.InteractionFilter.get_sensorMask","nape/dynamics/InteractionFilter.hx",304,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_306_set_sensorMask,"nape.dynamics.InteractionFilter","set_sensorMask",0xaa72927b,"nape.dynamics.InteractionFilter.set_sensorMask","nape/dynamics/InteractionFilter.hx",306,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_322_get_fluidGroup,"nape.dynamics.InteractionFilter","get_fluidGroup",0x6c068a96,"nape.dynamics.InteractionFilter.get_fluidGroup","nape/dynamics/InteractionFilter.hx",322,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_324_set_fluidGroup,"nape.dynamics.InteractionFilter","set_fluidGroup",0x8c26730a,"nape.dynamics.InteractionFilter.set_fluidGroup","nape/dynamics/InteractionFilter.hx",324,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_340_get_fluidMask,"nape.dynamics.InteractionFilter","get_fluidMask",0x8990e175,"nape.dynamics.InteractionFilter.get_fluidMask","nape/dynamics/InteractionFilter.hx",340,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_342_set_fluidMask,"nape.dynamics.InteractionFilter","set_fluidMask",0xce96c381,"nape.dynamics.InteractionFilter.set_fluidMask","nape/dynamics/InteractionFilter.hx",342,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_404_shouldCollide,"nape.dynamics.InteractionFilter","shouldCollide",0xb4a36513,"nape.dynamics.InteractionFilter.shouldCollide","nape/dynamics/InteractionFilter.hx",404,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_420_shouldSense,"nape.dynamics.InteractionFilter","shouldSense",0x43d0d583,"nape.dynamics.InteractionFilter.shouldSense","nape/dynamics/InteractionFilter.hx",420,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_436_shouldFlow,"nape.dynamics.InteractionFilter","shouldFlow",0x2a3e4339,"nape.dynamics.InteractionFilter.shouldFlow","nape/dynamics/InteractionFilter.hx",436,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_445_copy,"nape.dynamics.InteractionFilter","copy",0x978e932d,"nape.dynamics.InteractionFilter.copy","nape/dynamics/InteractionFilter.hx",445,0x3ee48c68)
HX_DEFINE_STACK_FRAME(_hx_pos_5718b5af5ed2d6ec_452_toString,"nape.dynamics.InteractionFilter","toString",0xe585c424,"nape.dynamics.InteractionFilter.toString","nape/dynamics/InteractionFilter.hx",452,0x3ee48c68)
namespace nape{
namespace dynamics{

void InteractionFilter_obj::__construct(hx::Null< int >  __o_collisionGroup,hx::Null< int >  __o_collisionMask,hx::Null< int >  __o_sensorGroup,hx::Null< int >  __o_sensorMask,hx::Null< int >  __o_fluidGroup,hx::Null< int >  __o_fluidMask){
int collisionGroup = __o_collisionGroup.Default(1);
int collisionMask = __o_collisionMask.Default(-1);
int sensorGroup = __o_sensorGroup.Default(1);
int sensorMask = __o_sensorMask.Default(-1);
int fluidGroup = __o_fluidGroup.Default(1);
int fluidMask = __o_fluidMask.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_206_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(collisionGroup,"collisionGroup")
            	HX_STACK_ARG(collisionMask,"collisionMask")
            	HX_STACK_ARG(sensorGroup,"sensorGroup")
            	HX_STACK_ARG(sensorMask,"sensorMask")
            	HX_STACK_ARG(fluidGroup,"fluidGroup")
            	HX_STACK_ARG(fluidMask,"fluidMask")
HXLINE( 210)		this->zpp_inner = null();
HXLINE( 366)		if (hx::IsNull( ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool )) {
HXLINE( 367)			this->zpp_inner =  ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 373)			this->zpp_inner = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool;
HXLINE( 374)			::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = this->zpp_inner->next;
HXLINE( 375)			this->zpp_inner->next = null();
            		}
HXLINE( 382)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 383)		if ((this->zpp_inner->collisionGroup != collisionGroup)) {
HXLINE( 383)			this->zpp_inner->collisionGroup = collisionGroup;
HXDLIN( 383)			this->zpp_inner->invalidate();
            		}
HXLINE( 384)		if ((this->zpp_inner->collisionMask != collisionMask)) {
HXLINE( 384)			this->zpp_inner->collisionMask = collisionMask;
HXDLIN( 384)			this->zpp_inner->invalidate();
            		}
HXLINE( 385)		if ((this->zpp_inner->sensorGroup != sensorGroup)) {
HXLINE( 385)			this->zpp_inner->sensorGroup = sensorGroup;
HXDLIN( 385)			this->zpp_inner->invalidate();
            		}
HXLINE( 386)		if ((this->zpp_inner->sensorMask != sensorMask)) {
HXLINE( 386)			this->zpp_inner->sensorMask = sensorMask;
HXDLIN( 386)			this->zpp_inner->invalidate();
            		}
HXLINE( 387)		if ((this->zpp_inner->fluidGroup != fluidGroup)) {
HXLINE( 387)			this->zpp_inner->fluidGroup = fluidGroup;
HXDLIN( 387)			this->zpp_inner->invalidate();
            		}
HXLINE( 388)		if ((this->zpp_inner->fluidMask != fluidMask)) {
HXLINE( 388)			this->zpp_inner->fluidMask = fluidMask;
HXDLIN( 388)			this->zpp_inner->invalidate();
            		}
            	}

Dynamic InteractionFilter_obj::__CreateEmpty() { return new InteractionFilter_obj; }

void *InteractionFilter_obj::_hx_vtable = 0;

Dynamic InteractionFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InteractionFilter_obj > _hx_result = new InteractionFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool InteractionFilter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03d87446;
}

 ::Dynamic InteractionFilter_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_224_get_userData)
            	HX_STACK_THIS(this)
HXLINE( 225)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 226)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 228)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_userData,return )

 ::nape::shape::ShapeList InteractionFilter_obj::get_shapes(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_239_get_shapes)
            	HX_STACK_THIS(this)
HXLINE( 240)		if (hx::IsNull( this->zpp_inner->wrap_shapes )) {
HXLINE( 240)			this->zpp_inner->wrap_shapes = ::zpp_nape::util::ZPP_ShapeList_obj::get(this->zpp_inner->shapes,true);
            		}
HXLINE( 241)		return this->zpp_inner->wrap_shapes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_shapes,return )

int InteractionFilter_obj::get_collisionGroup(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_250_get_collisionGroup)
            	HX_STACK_THIS(this)
HXLINE( 250)		return this->zpp_inner->collisionGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_collisionGroup,return )

int InteractionFilter_obj::set_collisionGroup(int collisionGroup){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_252_set_collisionGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(collisionGroup,"collisionGroup")
HXLINE( 254)		if ((this->zpp_inner->collisionGroup != collisionGroup)) {
HXLINE( 255)			this->zpp_inner->collisionGroup = collisionGroup;
HXLINE( 256)			this->zpp_inner->invalidate();
            		}
HXLINE( 259)		return this->zpp_inner->collisionGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,set_collisionGroup,return )

int InteractionFilter_obj::get_collisionMask(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_268_get_collisionMask)
            	HX_STACK_THIS(this)
HXLINE( 268)		return this->zpp_inner->collisionMask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_collisionMask,return )

int InteractionFilter_obj::set_collisionMask(int collisionMask){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_270_set_collisionMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(collisionMask,"collisionMask")
HXLINE( 272)		if ((this->zpp_inner->collisionMask != collisionMask)) {
HXLINE( 273)			this->zpp_inner->collisionMask = collisionMask;
HXLINE( 274)			this->zpp_inner->invalidate();
            		}
HXLINE( 277)		return this->zpp_inner->collisionMask;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,set_collisionMask,return )

int InteractionFilter_obj::get_sensorGroup(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_286_get_sensorGroup)
            	HX_STACK_THIS(this)
HXLINE( 286)		return this->zpp_inner->sensorGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_sensorGroup,return )

int InteractionFilter_obj::set_sensorGroup(int sensorGroup){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_288_set_sensorGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sensorGroup,"sensorGroup")
HXLINE( 290)		if ((this->zpp_inner->sensorGroup != sensorGroup)) {
HXLINE( 291)			this->zpp_inner->sensorGroup = sensorGroup;
HXLINE( 292)			this->zpp_inner->invalidate();
            		}
HXLINE( 295)		return this->zpp_inner->sensorGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,set_sensorGroup,return )

int InteractionFilter_obj::get_sensorMask(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_304_get_sensorMask)
            	HX_STACK_THIS(this)
HXLINE( 304)		return this->zpp_inner->sensorMask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_sensorMask,return )

int InteractionFilter_obj::set_sensorMask(int sensorMask){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_306_set_sensorMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sensorMask,"sensorMask")
HXLINE( 308)		if ((this->zpp_inner->sensorMask != sensorMask)) {
HXLINE( 309)			this->zpp_inner->sensorMask = sensorMask;
HXLINE( 310)			this->zpp_inner->invalidate();
            		}
HXLINE( 313)		return this->zpp_inner->sensorMask;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,set_sensorMask,return )

int InteractionFilter_obj::get_fluidGroup(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_322_get_fluidGroup)
            	HX_STACK_THIS(this)
HXLINE( 322)		return this->zpp_inner->fluidGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_fluidGroup,return )

int InteractionFilter_obj::set_fluidGroup(int fluidGroup){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_324_set_fluidGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fluidGroup,"fluidGroup")
HXLINE( 326)		if ((this->zpp_inner->fluidGroup != fluidGroup)) {
HXLINE( 327)			this->zpp_inner->fluidGroup = fluidGroup;
HXLINE( 328)			this->zpp_inner->invalidate();
            		}
HXLINE( 331)		return this->zpp_inner->fluidGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,set_fluidGroup,return )

int InteractionFilter_obj::get_fluidMask(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_340_get_fluidMask)
            	HX_STACK_THIS(this)
HXLINE( 340)		return this->zpp_inner->fluidMask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,get_fluidMask,return )

int InteractionFilter_obj::set_fluidMask(int fluidMask){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_342_set_fluidMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fluidMask,"fluidMask")
HXLINE( 344)		if ((this->zpp_inner->fluidMask != fluidMask)) {
HXLINE( 345)			this->zpp_inner->fluidMask = fluidMask;
HXLINE( 346)			this->zpp_inner->invalidate();
            		}
HXLINE( 349)		return this->zpp_inner->fluidMask;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,set_fluidMask,return )

bool InteractionFilter_obj::shouldCollide( ::nape::dynamics::InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_404_shouldCollide)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 404)		HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this) = this->zpp_inner;
HXDLIN( 404)		HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,x) = filter->zpp_inner;
HXDLIN( 404)		if ((((int)_this->collisionMask & (int)x->collisionGroup) != (int)0)) {
HXLINE( 404)			return (((int)x->collisionMask & (int)_this->collisionGroup) != (int)0);
            		}
            		else {
HXLINE( 404)			return false;
            		}
HXDLIN( 404)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,shouldCollide,return )

bool InteractionFilter_obj::shouldSense( ::nape::dynamics::InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_420_shouldSense)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 420)		HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this) = this->zpp_inner;
HXDLIN( 420)		HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,x) = filter->zpp_inner;
HXDLIN( 420)		if ((((int)_this->sensorMask & (int)x->sensorGroup) != (int)0)) {
HXLINE( 420)			return (((int)x->sensorMask & (int)_this->sensorGroup) != (int)0);
            		}
            		else {
HXLINE( 420)			return false;
            		}
HXDLIN( 420)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,shouldSense,return )

bool InteractionFilter_obj::shouldFlow( ::nape::dynamics::InteractionFilter filter){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_436_shouldFlow)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 436)		HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,_this) = this->zpp_inner;
HXDLIN( 436)		HX_VARI(  ::zpp_nape::dynamics::ZPP_InteractionFilter,x) = filter->zpp_inner;
HXDLIN( 436)		if ((((int)_this->fluidMask & (int)x->fluidGroup) != (int)0)) {
HXLINE( 436)			return (((int)x->fluidMask & (int)_this->fluidGroup) != (int)0);
            		}
            		else {
HXLINE( 436)			return false;
            		}
HXDLIN( 436)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractionFilter_obj,shouldFlow,return )

 ::nape::dynamics::InteractionFilter InteractionFilter_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_445_copy)
            	HX_STACK_THIS(this)
HXLINE( 445)		return  ::nape::dynamics::InteractionFilter_obj::__alloc( HX_CTX ,this->zpp_inner->collisionGroup,this->zpp_inner->collisionMask,this->zpp_inner->sensorGroup,this->zpp_inner->sensorMask,this->zpp_inner->fluidGroup,this->zpp_inner->fluidMask);
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,copy,return )

::String InteractionFilter_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5718b5af5ed2d6ec_452_toString)
            	HX_STACK_THIS(this)
HXLINE( 452)		::String _hx_tmp = ((HX_("{ collision: ",73,5c,f5,d8) + ::StringTools_obj::hex(this->zpp_inner->collisionGroup,(int)8)) + HX_("~",7e,00,00,00));
HXDLIN( 452)		::String _hx_tmp1 = ((_hx_tmp + ::StringTools_obj::hex(this->zpp_inner->collisionMask,(int)8)) + HX_(" sensor: ",80,07,da,f3));
HXDLIN( 452)		::String _hx_tmp2 = ((_hx_tmp1 + ::StringTools_obj::hex(this->zpp_inner->sensorGroup,(int)8)) + HX_("~",7e,00,00,00));
HXDLIN( 452)		::String _hx_tmp3 = ((_hx_tmp2 + ::StringTools_obj::hex(this->zpp_inner->sensorMask,(int)8)) + HX_(" fluid: ",10,e7,fb,89));
HXDLIN( 452)		::String _hx_tmp4 = ((_hx_tmp3 + ::StringTools_obj::hex(this->zpp_inner->fluidGroup,(int)8)) + HX_("~",7e,00,00,00));
HXDLIN( 452)		return ((_hx_tmp4 + ::StringTools_obj::hex(this->zpp_inner->fluidMask,(int)8)) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionFilter_obj,toString,return )


hx::ObjectPtr< InteractionFilter_obj > InteractionFilter_obj::__new(hx::Null< int >  __o_collisionGroup,hx::Null< int >  __o_collisionMask,hx::Null< int >  __o_sensorGroup,hx::Null< int >  __o_sensorMask,hx::Null< int >  __o_fluidGroup,hx::Null< int >  __o_fluidMask) {
	hx::ObjectPtr< InteractionFilter_obj > __this = new InteractionFilter_obj();
	__this->__construct(__o_collisionGroup,__o_collisionMask,__o_sensorGroup,__o_sensorMask,__o_fluidGroup,__o_fluidMask);
	return __this;
}

hx::ObjectPtr< InteractionFilter_obj > InteractionFilter_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_collisionGroup,hx::Null< int >  __o_collisionMask,hx::Null< int >  __o_sensorGroup,hx::Null< int >  __o_sensorMask,hx::Null< int >  __o_fluidGroup,hx::Null< int >  __o_fluidMask) {
	InteractionFilter_obj *__this = (InteractionFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InteractionFilter_obj), true, "nape.dynamics.InteractionFilter"));
	*(void **)__this = InteractionFilter_obj::_hx_vtable;
	__this->__construct(__o_collisionGroup,__o_collisionMask,__o_sensorGroup,__o_sensorMask,__o_fluidGroup,__o_fluidMask);
	return __this;
}

InteractionFilter_obj::InteractionFilter_obj()
{
}

void InteractionFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InteractionFilter);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void InteractionFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val InteractionFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_shapes()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_userData()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"fluidMask") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_fluidMask()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_shapes") ) { return hx::Val( get_shapes_dyn()); }
		if (HX_FIELD_EQ(inName,"sensorMask") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sensorMask()); }
		if (HX_FIELD_EQ(inName,"fluidGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_fluidGroup()); }
		if (HX_FIELD_EQ(inName,"shouldFlow") ) { return hx::Val( shouldFlow_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sensorGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sensorGroup()); }
		if (HX_FIELD_EQ(inName,"shouldSense") ) { return hx::Val( shouldSense_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisionMask") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_collisionMask()); }
		if (HX_FIELD_EQ(inName,"get_fluidMask") ) { return hx::Val( get_fluidMask_dyn()); }
		if (HX_FIELD_EQ(inName,"set_fluidMask") ) { return hx::Val( set_fluidMask_dyn()); }
		if (HX_FIELD_EQ(inName,"shouldCollide") ) { return hx::Val( shouldCollide_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"collisionGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_collisionGroup()); }
		if (HX_FIELD_EQ(inName,"get_sensorMask") ) { return hx::Val( get_sensorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sensorMask") ) { return hx::Val( set_sensorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_fluidGroup") ) { return hx::Val( get_fluidGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"set_fluidGroup") ) { return hx::Val( set_fluidGroup_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_sensorGroup") ) { return hx::Val( get_sensorGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sensorGroup") ) { return hx::Val( set_sensorGroup_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_collisionMask") ) { return hx::Val( get_collisionMask_dyn()); }
		if (HX_FIELD_EQ(inName,"set_collisionMask") ) { return hx::Val( set_collisionMask_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_collisionGroup") ) { return hx::Val( get_collisionGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"set_collisionGroup") ) { return hx::Val( set_collisionGroup_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InteractionFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::dynamics::ZPP_InteractionFilter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fluidMask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fluidMask(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sensorMask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sensorMask(inValue) ); }
		if (HX_FIELD_EQ(inName,"fluidGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fluidGroup(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sensorGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sensorGroup(inValue) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collisionMask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_collisionMask(inValue) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"collisionGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_collisionGroup(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InteractionFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"));
	outFields->push(HX_HCSTRING("collisionGroup","\x6d","\x9d","\xf5","\xe8"));
	outFields->push(HX_HCSTRING("collisionMask","\x7e","\x36","\x8c","\x28"));
	outFields->push(HX_HCSTRING("sensorGroup","\xa5","\x9e","\x4f","\xe0"));
	outFields->push(HX_HCSTRING("sensorMask","\x46","\x44","\xfe","\x14"));
	outFields->push(HX_HCSTRING("fluidGroup","\xd5","\x24","\xb2","\xf6"));
	outFields->push(HX_HCSTRING("fluidMask","\x16","\x94","\x81","\xf1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo InteractionFilter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_InteractionFilter*/ ,(int)offsetof(InteractionFilter_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InteractionFilter_obj_sStaticStorageInfo = 0;
#endif

static ::String InteractionFilter_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_userData","\x1e","\x4a","\x42","\xba"),
	HX_HCSTRING("get_shapes","\xfb","\x49","\xb1","\x0d"),
	HX_HCSTRING("get_collisionGroup","\x36","\x7e","\x8f","\x84"),
	HX_HCSTRING("set_collisionGroup","\xaa","\xb0","\x3e","\x61"),
	HX_HCSTRING("get_collisionMask","\xd5","\x41","\xfc","\x2e"),
	HX_HCSTRING("set_collisionMask","\xe1","\x19","\x6a","\x52"),
	HX_HCSTRING("get_sensorGroup","\x3c","\x56","\x31","\xa1"),
	HX_HCSTRING("set_sensorGroup","\x48","\xd3","\xfc","\x9c"),
	HX_HCSTRING("get_sensorMask","\x8f","\xcc","\xf3","\x8a"),
	HX_HCSTRING("set_sensorMask","\x03","\xb5","\x13","\xab"),
	HX_HCSTRING("get_fluidGroup","\x1e","\xad","\xa7","\x6c"),
	HX_HCSTRING("set_fluidGroup","\x92","\x95","\xc7","\x8c"),
	HX_HCSTRING("get_fluidMask","\xed","\x67","\xe5","\xb2"),
	HX_HCSTRING("set_fluidMask","\xf9","\x49","\xeb","\xf7"),
	HX_HCSTRING("shouldCollide","\x8b","\xeb","\xf7","\xdd"),
	HX_HCSTRING("shouldSense","\xfb","\x4d","\xfc","\x30"),
	HX_HCSTRING("shouldFlow","\xc1","\x81","\xe9","\xd2"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void InteractionFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InteractionFilter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InteractionFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InteractionFilter_obj::__mClass,"__mClass");
};

#endif

hx::Class InteractionFilter_obj::__mClass;

void InteractionFilter_obj::__register()
{
	hx::Object *dummy = new InteractionFilter_obj;
	InteractionFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.dynamics.InteractionFilter","\xf6","\xbb","\x49","\xd6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InteractionFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InteractionFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InteractionFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InteractionFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InteractionFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InteractionFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace dynamics
