// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_dynamics_Contact
#include <nape/dynamics/Contact.h>
#endif
#ifndef INCLUDED_nape_dynamics_ContactIterator
#include <nape/dynamics/ContactIterator.h>
#endif
#ifndef INCLUDED_nape_dynamics_ContactList
#include <nape/dynamics/ContactList.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ContactList
#include <zpp_nape/util/ZPP_ContactList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_234_new,"nape.dynamics.ContactList","new",0x4bb1d6dc,"nape.dynamics.ContactList.new","nape/dynamics/ContactList.hx",234,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_244_get_length,"nape.dynamics.ContactList","get_length",0x6f0d05b3,"nape.dynamics.ContactList.get_length","nape/dynamics/ContactList.hx",244,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_346_has,"nape.dynamics.ContactList","has",0x4bad45d6,"nape.dynamics.ContactList.has","nape/dynamics/ContactList.hx",346,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_363_at,"nape.dynamics.ContactList","at",0x9593b1f7,"nape.dynamics.ContactList.at","nape/dynamics/ContactList.hx",363,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_416_push,"nape.dynamics.ContactList","push",0xf148b7de,"nape.dynamics.ContactList.push","nape/dynamics/ContactList.hx",416,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_447_unshift,"nape.dynamics.ContactList","unshift",0x983cd805,"nape.dynamics.ContactList.unshift","nape/dynamics/ContactList.hx",447,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_478_pop,"nape.dynamics.ContactList","pop",0x4bb3640d,"nape.dynamics.ContactList.pop","nape/dynamics/ContactList.hx",478,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_519_shift,"nape.dynamics.ContactList","shift",0xdfec89fe,"nape.dynamics.ContactList.shift","nape/dynamics/ContactList.hx",519,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_564_add,"nape.dynamics.ContactList","add",0x4ba7f89d,"nape.dynamics.ContactList.add","nape/dynamics/ContactList.hx",564,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_576_remove,"nape.dynamics.ContactList","remove",0xf128cb48,"nape.dynamics.ContactList.remove","nape/dynamics/ContactList.hx",576,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_618_clear,"nape.dynamics.ContactList","clear",0xac250f09,"nape.dynamics.ContactList.clear","nape/dynamics/ContactList.hx",618,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_632_empty,"nape.dynamics.ContactList","empty",0xd3a3d809,"nape.dynamics.ContactList.empty","nape/dynamics/ContactList.hx",632,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_647_iterator,"nape.dynamics.ContactList","iterator",0x0be741f2,"nape.dynamics.ContactList.iterator","nape/dynamics/ContactList.hx",647,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_662_copy,"nape.dynamics.ContactList","copy",0xe8ac61b9,"nape.dynamics.ContactList.copy","nape/dynamics/ContactList.hx",662,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_688_merge,"nape.dynamics.ContactList","merge",0x69904034,"nape.dynamics.ContactList.merge","nape/dynamics/ContactList.hx",688,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_702_toString,"nape.dynamics.ContactList","toString",0xb0bbc8b0,"nape.dynamics.ContactList.toString","nape/dynamics/ContactList.hx",702,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_732_foreach,"nape.dynamics.ContactList","foreach",0xf96df206,"nape.dynamics.ContactList.foreach","nape/dynamics/ContactList.hx",732,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_779_filter,"nape.dynamics.ContactList","filter",0x71d54ebc,"nape.dynamics.ContactList.filter","nape/dynamics/ContactList.hx",779,0xd6cc37f4)
HX_DEFINE_STACK_FRAME(_hx_pos_2011eb8df9683541_304_fromArray,"nape.dynamics.ContactList","fromArray",0xa524634b,"nape.dynamics.ContactList.fromArray","nape/dynamics/ContactList.hx",304,0xd6cc37f4)
namespace nape{
namespace dynamics{

void ContactList_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_2011eb8df9683541_234_new)
            	HX_STACK_THIS(this)
HXLINE( 238)		this->zpp_inner = null();
HXLINE( 696)		this->zpp_inner =  ::zpp_nape::util::ZPP_ContactList_obj::__alloc( HX_CTX );
HXLINE( 697)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic ContactList_obj::__CreateEmpty() { return new ContactList_obj; }

void *ContactList_obj::_hx_vtable = 0;

Dynamic ContactList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ContactList_obj > _hx_result = new ContactList_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ContactList_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4ea78102;
}

int ContactList_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_244_get_length)
            	HX_STACK_THIS(this)
HXLINE( 245)		this->zpp_inner->valmod();
HXLINE( 246)		if (this->zpp_inner->zip_length) {
HXLINE( 247)			this->zpp_inner->zip_length = false;
HXLINE( 248)			{
HXLINE( 249)				this->zpp_inner->user_length = (int)0;
HXLINE( 250)				{
HXLINE( 251)					HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXLINE( 252)					while(hx::IsNotNull( cx_ite )){
HXLINE( 253)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXLINE( 254)						bool _hx_tmp;
HXDLIN( 254)						if (i->active) {
HXLINE( 254)							_hx_tmp = i->arbiter->active;
            						}
            						else {
HXLINE( 254)							_hx_tmp = false;
            						}
HXDLIN( 254)						if (_hx_tmp) {
HXLINE( 254)							this->zpp_inner->user_length++;
            						}
HXLINE( 255)						cx_ite = cx_ite->next;
            					}
            				}
            			}
            		}
HXLINE( 261)		return this->zpp_inner->user_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactList_obj,get_length,return )

bool ContactList_obj::has( ::nape::dynamics::Contact obj){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_346_has)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 347)		this->zpp_inner->valmod();
HXLINE( 350)		return this->zpp_inner->inner->has(obj->zpp_inner);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,has,return )

 ::nape::dynamics::Contact ContactList_obj::at(int index){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_363_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 364)		this->zpp_inner->valmod();
HXLINE( 370)		if (this->zpp_inner->reverse_flag) {
HXLINE( 370)			this->zpp_inner->valmod();
HXDLIN( 370)			if (this->zpp_inner->zip_length) {
HXLINE( 370)				this->zpp_inner->zip_length = false;
HXDLIN( 370)				{
HXLINE( 370)					this->zpp_inner->user_length = (int)0;
HXDLIN( 370)					{
HXLINE( 370)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 370)						while(hx::IsNotNull( cx_ite )){
HXLINE( 370)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 370)							bool index1;
HXDLIN( 370)							if (i->active) {
HXLINE( 370)								index1 = i->arbiter->active;
            							}
            							else {
HXLINE( 370)								index1 = false;
            							}
HXDLIN( 370)							if (index1) {
HXLINE( 370)								this->zpp_inner->user_length++;
            							}
HXDLIN( 370)							cx_ite = cx_ite->next;
            						}
            					}
            				}
            			}
HXDLIN( 370)			index = ((this->zpp_inner->user_length - (int)1) - index);
            		}
HXLINE( 383)		{
HXLINE( 384)			bool _hx_tmp;
HXDLIN( 384)			if ((index >= this->zpp_inner->at_index)) {
HXLINE( 384)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite );
            			}
            			else {
HXLINE( 384)				_hx_tmp = true;
            			}
HXDLIN( 384)			if (_hx_tmp) {
HXLINE( 385)				this->zpp_inner->at_index = (int)0;
HXLINE( 386)				this->zpp_inner->at_ite = this->zpp_inner->inner->next;
HXLINE( 387)				while(true){
HXLINE( 388)					 ::zpp_nape::dynamics::ZPP_Contact _this = this->zpp_inner->at_ite;
HXLINE( 389)					bool _hx_tmp1;
HXDLIN( 389)					if (_this->active) {
HXLINE( 389)						_hx_tmp1 = _this->arbiter->active;
            					}
            					else {
HXLINE( 389)						_hx_tmp1 = false;
            					}
HXDLIN( 389)					if (_hx_tmp1) {
HXLINE( 389)						goto _hx_goto_5;
            					}
HXLINE( 390)					this->zpp_inner->at_ite = this->zpp_inner->at_ite->next;
            				}
            				_hx_goto_5:;
            			}
HXLINE( 393)			while((this->zpp_inner->at_index != index)){
HXLINE( 394)				this->zpp_inner->at_index++;
HXLINE( 395)				this->zpp_inner->at_ite = this->zpp_inner->at_ite->next;
HXLINE( 396)				while(true){
HXLINE( 397)					 ::zpp_nape::dynamics::ZPP_Contact _this1 = this->zpp_inner->at_ite;
HXLINE( 398)					bool _hx_tmp2;
HXDLIN( 398)					if (_this1->active) {
HXLINE( 398)						_hx_tmp2 = _this1->arbiter->active;
            					}
            					else {
HXLINE( 398)						_hx_tmp2 = false;
            					}
HXDLIN( 398)					if (_hx_tmp2) {
HXLINE( 398)						goto _hx_goto_7;
            					}
HXLINE( 399)					this->zpp_inner->at_ite = this->zpp_inner->at_ite->next;
            				}
            				_hx_goto_7:;
            			}
            		}
HXLINE( 403)		return this->zpp_inner->at_ite->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,at,return )

bool ContactList_obj::push( ::nape::dynamics::Contact obj){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_416_push)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 421)		this->zpp_inner->valmod();
HXLINE( 424)		HX_VAR( bool,cont);
HXDLIN( 424)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 424)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 424)			cont = true;
            		}
HXLINE( 425)		if (cont) {
HXLINE( 426)			if (this->zpp_inner->reverse_flag) {
HXLINE( 426)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
            			else {
HXLINE( 428)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 428)					 ::zpp_nape::dynamics::ZPP_Contact _hx_tmp;
HXDLIN( 428)					this->zpp_inner->valmod();
HXDLIN( 428)					if (this->zpp_inner->zip_length) {
HXLINE( 428)						this->zpp_inner->zip_length = false;
HXDLIN( 428)						{
HXLINE( 428)							this->zpp_inner->user_length = (int)0;
HXDLIN( 428)							{
HXLINE( 428)								HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 428)								while(hx::IsNotNull( cx_ite )){
HXLINE( 428)									HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 428)									bool _hx_tmp1;
HXDLIN( 428)									if (i->active) {
HXLINE( 428)										_hx_tmp1 = i->arbiter->active;
            									}
            									else {
HXLINE( 428)										_hx_tmp1 = false;
            									}
HXDLIN( 428)									if (_hx_tmp1) {
HXLINE( 428)										this->zpp_inner->user_length++;
            									}
HXDLIN( 428)									cx_ite = cx_ite->next;
            								}
            							}
            						}
            					}
HXDLIN( 428)					if ((this->zpp_inner->user_length == (int)0)) {
HXLINE( 428)						_hx_tmp = null();
            					}
            					else {
HXLINE( 428)						 ::zpp_nape::dynamics::ZPP_Contact _hx_tmp2 = this->zpp_inner->inner;
HXDLIN( 428)						this->zpp_inner->valmod();
HXDLIN( 428)						if (this->zpp_inner->zip_length) {
HXLINE( 428)							this->zpp_inner->zip_length = false;
HXDLIN( 428)							{
HXLINE( 428)								this->zpp_inner->user_length = (int)0;
HXDLIN( 428)								{
HXLINE( 428)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite1,"cx_ite") = this->zpp_inner->inner->next;
HXDLIN( 428)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 428)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,i1,"i") = cx_ite1;
HXDLIN( 428)										bool _hx_tmp3;
HXDLIN( 428)										if (i1->active) {
HXLINE( 428)											_hx_tmp3 = i1->arbiter->active;
            										}
            										else {
HXLINE( 428)											_hx_tmp3 = false;
            										}
HXDLIN( 428)										if (_hx_tmp3) {
HXLINE( 428)											this->zpp_inner->user_length++;
            										}
HXDLIN( 428)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
            						}
HXDLIN( 428)						_hx_tmp = _hx_tmp2->iterator_at((this->zpp_inner->user_length - (int)1));
            					}
HXDLIN( 428)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 429)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
HXLINE( 431)			this->zpp_inner->invalidate();
HXLINE( 432)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 432)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 434)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,push,return )

bool ContactList_obj::unshift( ::nape::dynamics::Contact obj){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_447_unshift)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 452)		this->zpp_inner->valmod();
HXLINE( 455)		HX_VAR( bool,cont);
HXDLIN( 455)		if (hx::IsNotNull( this->zpp_inner->adder )) {
HXLINE( 455)			cont = ( (bool)(this->zpp_inner->adder(obj)) );
            		}
            		else {
HXLINE( 455)			cont = true;
            		}
HXLINE( 456)		if (cont) {
HXLINE( 457)			if (this->zpp_inner->reverse_flag) {
HXLINE( 458)				if (hx::IsNull( this->zpp_inner->push_ite )) {
HXLINE( 458)					 ::zpp_nape::dynamics::ZPP_Contact _hx_tmp;
HXDLIN( 458)					this->zpp_inner->valmod();
HXDLIN( 458)					if (this->zpp_inner->zip_length) {
HXLINE( 458)						this->zpp_inner->zip_length = false;
HXDLIN( 458)						{
HXLINE( 458)							this->zpp_inner->user_length = (int)0;
HXDLIN( 458)							{
HXLINE( 458)								HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 458)								while(hx::IsNotNull( cx_ite )){
HXLINE( 458)									HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 458)									bool _hx_tmp1;
HXDLIN( 458)									if (i->active) {
HXLINE( 458)										_hx_tmp1 = i->arbiter->active;
            									}
            									else {
HXLINE( 458)										_hx_tmp1 = false;
            									}
HXDLIN( 458)									if (_hx_tmp1) {
HXLINE( 458)										this->zpp_inner->user_length++;
            									}
HXDLIN( 458)									cx_ite = cx_ite->next;
            								}
            							}
            						}
            					}
HXDLIN( 458)					if ((this->zpp_inner->user_length == (int)0)) {
HXLINE( 458)						_hx_tmp = null();
            					}
            					else {
HXLINE( 458)						 ::zpp_nape::dynamics::ZPP_Contact _hx_tmp2 = this->zpp_inner->inner;
HXDLIN( 458)						this->zpp_inner->valmod();
HXDLIN( 458)						if (this->zpp_inner->zip_length) {
HXLINE( 458)							this->zpp_inner->zip_length = false;
HXDLIN( 458)							{
HXLINE( 458)								this->zpp_inner->user_length = (int)0;
HXDLIN( 458)								{
HXLINE( 458)									HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite1,"cx_ite") = this->zpp_inner->inner->next;
HXDLIN( 458)									while(hx::IsNotNull( cx_ite1 )){
HXLINE( 458)										HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,i1,"i") = cx_ite1;
HXDLIN( 458)										bool _hx_tmp3;
HXDLIN( 458)										if (i1->active) {
HXLINE( 458)											_hx_tmp3 = i1->arbiter->active;
            										}
            										else {
HXLINE( 458)											_hx_tmp3 = false;
            										}
HXDLIN( 458)										if (_hx_tmp3) {
HXLINE( 458)											this->zpp_inner->user_length++;
            										}
HXDLIN( 458)										cx_ite1 = cx_ite1->next;
            									}
            								}
            							}
            						}
HXDLIN( 458)						_hx_tmp = _hx_tmp2->iterator_at((this->zpp_inner->user_length - (int)1));
            					}
HXDLIN( 458)					this->zpp_inner->push_ite = _hx_tmp;
            				}
HXLINE( 459)				this->zpp_inner->push_ite = this->zpp_inner->inner->insert(this->zpp_inner->push_ite,obj->zpp_inner);
            			}
            			else {
HXLINE( 461)				this->zpp_inner->inner->add(obj->zpp_inner);
            			}
HXLINE( 462)			this->zpp_inner->invalidate();
HXLINE( 463)			if (hx::IsNotNull( this->zpp_inner->post_adder )) {
HXLINE( 463)				this->zpp_inner->post_adder(obj);
            			}
            		}
HXLINE( 465)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,unshift,return )

 ::nape::dynamics::Contact ContactList_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_478_pop)
            	HX_STACK_THIS(this)
HXLINE( 486)		this->zpp_inner->valmod();
HXLINE( 489)		HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,ret) = null();
HXLINE( 490)		if (this->zpp_inner->reverse_flag) {
HXLINE( 491)			 ::zpp_nape::dynamics::ZPP_Contact _this = this->zpp_inner->inner->next;
HXDLIN( 491)			ret = _this;
HXLINE( 492)			HX_VARI(  ::nape::dynamics::Contact,retx) = _this->wrapper();
HXLINE( 493)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 493)				this->zpp_inner->subber(retx);
            			}
HXLINE( 494)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 494)				this->zpp_inner->inner->pop();
            			}
            		}
            		else {
HXLINE( 497)			bool _hx_tmp;
HXDLIN( 497)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 497)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 497)				_hx_tmp = false;
            			}
HXDLIN( 497)			if (_hx_tmp) {
HXLINE( 497)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 498)			HX_VAR(  ::zpp_nape::dynamics::ZPP_Contact,ite);
HXDLIN( 498)			this->zpp_inner->valmod();
HXDLIN( 498)			if (this->zpp_inner->zip_length) {
HXLINE( 498)				this->zpp_inner->zip_length = false;
HXDLIN( 498)				{
HXLINE( 498)					this->zpp_inner->user_length = (int)0;
HXDLIN( 498)					{
HXLINE( 498)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 498)						while(hx::IsNotNull( cx_ite )){
HXLINE( 498)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 498)							bool ite1;
HXDLIN( 498)							if (i->active) {
HXLINE( 498)								ite1 = i->arbiter->active;
            							}
            							else {
HXLINE( 498)								ite1 = false;
            							}
HXDLIN( 498)							if (ite1) {
HXLINE( 498)								this->zpp_inner->user_length++;
            							}
HXDLIN( 498)							cx_ite = cx_ite->next;
            						}
            					}
            				}
            			}
HXDLIN( 498)			if ((this->zpp_inner->user_length == (int)1)) {
HXLINE( 498)				ite = null();
            			}
            			else {
HXLINE( 498)				HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,ite2,"ite") = this->zpp_inner->inner;
HXDLIN( 498)				this->zpp_inner->valmod();
HXDLIN( 498)				if (this->zpp_inner->zip_length) {
HXLINE( 498)					this->zpp_inner->zip_length = false;
HXDLIN( 498)					{
HXLINE( 498)						this->zpp_inner->user_length = (int)0;
HXDLIN( 498)						{
HXLINE( 498)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite1,"cx_ite") = this->zpp_inner->inner->next;
HXDLIN( 498)							while(hx::IsNotNull( cx_ite1 )){
HXLINE( 498)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,i1,"i") = cx_ite1;
HXDLIN( 498)								bool ite3;
HXDLIN( 498)								if (i1->active) {
HXLINE( 498)									ite3 = i1->arbiter->active;
            								}
            								else {
HXLINE( 498)									ite3 = false;
            								}
HXDLIN( 498)								if (ite3) {
HXLINE( 498)									this->zpp_inner->user_length++;
            								}
HXDLIN( 498)								cx_ite1 = cx_ite1->next;
            							}
            						}
            					}
            				}
HXDLIN( 498)				ite = ite2->iterator_at((this->zpp_inner->user_length - (int)2));
            			}
HXLINE( 499)			if (hx::IsNull( ite )) {
HXLINE( 499)				ret = this->zpp_inner->inner->next;
            			}
            			else {
HXLINE( 499)				ret = ite->next;
            			}
HXLINE( 500)			HX_VARI_NAME(  ::nape::dynamics::Contact,retx1,"retx") = ret->wrapper();
HXLINE( 501)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 501)				this->zpp_inner->subber(retx1);
            			}
HXLINE( 502)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 502)				this->zpp_inner->inner->erase(ite);
            			}
            		}
HXLINE( 504)		this->zpp_inner->invalidate();
HXLINE( 506)		return ret->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactList_obj,pop,return )

 ::nape::dynamics::Contact ContactList_obj::shift(){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_519_shift)
            	HX_STACK_THIS(this)
HXLINE( 527)		this->zpp_inner->valmod();
HXLINE( 530)		HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,ret) = null();
HXLINE( 531)		if (this->zpp_inner->reverse_flag) {
HXLINE( 532)			bool _hx_tmp;
HXDLIN( 532)			if (hx::IsNotNull( this->zpp_inner->at_ite )) {
HXLINE( 532)				_hx_tmp = hx::IsNull( this->zpp_inner->at_ite->next );
            			}
            			else {
HXLINE( 532)				_hx_tmp = false;
            			}
HXDLIN( 532)			if (_hx_tmp) {
HXLINE( 532)				this->zpp_inner->at_ite = null();
            			}
HXLINE( 533)			HX_VAR(  ::zpp_nape::dynamics::ZPP_Contact,ite);
HXDLIN( 533)			this->zpp_inner->valmod();
HXDLIN( 533)			if (this->zpp_inner->zip_length) {
HXLINE( 533)				this->zpp_inner->zip_length = false;
HXDLIN( 533)				{
HXLINE( 533)					this->zpp_inner->user_length = (int)0;
HXDLIN( 533)					{
HXLINE( 533)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 533)						while(hx::IsNotNull( cx_ite )){
HXLINE( 533)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 533)							bool ite1;
HXDLIN( 533)							if (i->active) {
HXLINE( 533)								ite1 = i->arbiter->active;
            							}
            							else {
HXLINE( 533)								ite1 = false;
            							}
HXDLIN( 533)							if (ite1) {
HXLINE( 533)								this->zpp_inner->user_length++;
            							}
HXDLIN( 533)							cx_ite = cx_ite->next;
            						}
            					}
            				}
            			}
HXDLIN( 533)			if ((this->zpp_inner->user_length == (int)1)) {
HXLINE( 533)				ite = null();
            			}
            			else {
HXLINE( 533)				HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,ite2,"ite") = this->zpp_inner->inner;
HXDLIN( 533)				this->zpp_inner->valmod();
HXDLIN( 533)				if (this->zpp_inner->zip_length) {
HXLINE( 533)					this->zpp_inner->zip_length = false;
HXDLIN( 533)					{
HXLINE( 533)						this->zpp_inner->user_length = (int)0;
HXDLIN( 533)						{
HXLINE( 533)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite1,"cx_ite") = this->zpp_inner->inner->next;
HXDLIN( 533)							while(hx::IsNotNull( cx_ite1 )){
HXLINE( 533)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,i1,"i") = cx_ite1;
HXDLIN( 533)								bool ite3;
HXDLIN( 533)								if (i1->active) {
HXLINE( 533)									ite3 = i1->arbiter->active;
            								}
            								else {
HXLINE( 533)									ite3 = false;
            								}
HXDLIN( 533)								if (ite3) {
HXLINE( 533)									this->zpp_inner->user_length++;
            								}
HXDLIN( 533)								cx_ite1 = cx_ite1->next;
            							}
            						}
            					}
            				}
HXDLIN( 533)				ite = ite2->iterator_at((this->zpp_inner->user_length - (int)2));
            			}
HXLINE( 534)			if (hx::IsNull( ite )) {
HXLINE( 534)				ret = this->zpp_inner->inner->next;
            			}
            			else {
HXLINE( 534)				ret = ite->next;
            			}
HXLINE( 535)			HX_VARI(  ::nape::dynamics::Contact,retx) = ret->wrapper();
HXLINE( 536)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 536)				this->zpp_inner->subber(retx);
            			}
HXLINE( 537)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 537)				this->zpp_inner->inner->erase(ite);
            			}
            		}
            		else {
HXLINE( 540)			 ::zpp_nape::dynamics::ZPP_Contact _this = this->zpp_inner->inner->next;
HXDLIN( 540)			ret = _this;
HXLINE( 541)			HX_VARI_NAME(  ::nape::dynamics::Contact,retx1,"retx") = _this->wrapper();
HXLINE( 542)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 542)				this->zpp_inner->subber(retx1);
            			}
HXLINE( 543)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 543)				this->zpp_inner->inner->pop();
            			}
            		}
HXLINE( 545)		this->zpp_inner->invalidate();
HXLINE( 547)		return ret->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactList_obj,shift,return )

bool ContactList_obj::add( ::nape::dynamics::Contact obj){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_564_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 564)		if (this->zpp_inner->reverse_flag) {
HXLINE( 564)			return this->push(obj);
            		}
            		else {
HXLINE( 564)			return this->unshift(obj);
            		}
HXDLIN( 564)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,add,return )

bool ContactList_obj::remove( ::nape::dynamics::Contact obj){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_576_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 581)		this->zpp_inner->valmod();
HXLINE( 584)		HX_VAR( bool,ret);
HXLINE( 585)		{
HXLINE( 586)			ret = false;
HXLINE( 587)			{
HXLINE( 588)				HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXLINE( 589)				while(hx::IsNotNull( cx_ite )){
HXLINE( 592)					if (hx::IsEq( cx_ite,obj->zpp_inner )) {
HXLINE( 593)						ret = true;
HXLINE( 594)						goto _hx_goto_22;
            					}
HXLINE( 597)					cx_ite = cx_ite->next;
            				}
            				_hx_goto_22:;
            			}
            		}
HXLINE( 601)		if (ret) {
HXLINE( 602)			if (hx::IsNotNull( this->zpp_inner->subber )) {
HXLINE( 602)				this->zpp_inner->subber(obj);
            			}
HXLINE( 603)			if (!(this->zpp_inner->dontremove)) {
HXLINE( 603)				this->zpp_inner->inner->remove(obj->zpp_inner);
            			}
HXLINE( 604)			this->zpp_inner->invalidate();
            		}
HXLINE( 606)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,remove,return )

void ContactList_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_618_clear)
            	HX_STACK_THIS(this)
HXLINE( 618)		if (this->zpp_inner->reverse_flag) {
HXLINE( 619)			while(true){
HXLINE( 619)				this->zpp_inner->valmod();
HXDLIN( 619)				if (this->zpp_inner->zip_length) {
HXLINE( 619)					this->zpp_inner->zip_length = false;
HXDLIN( 619)					{
HXLINE( 619)						this->zpp_inner->user_length = (int)0;
HXDLIN( 619)						{
HXLINE( 619)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 619)							while(hx::IsNotNull( cx_ite )){
HXLINE( 619)								HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 619)								bool _hx_tmp;
HXDLIN( 619)								if (i->active) {
HXLINE( 619)									_hx_tmp = i->arbiter->active;
            								}
            								else {
HXLINE( 619)									_hx_tmp = false;
            								}
HXDLIN( 619)								if (_hx_tmp) {
HXLINE( 619)									this->zpp_inner->user_length++;
            								}
HXDLIN( 619)								cx_ite = cx_ite->next;
            							}
            						}
            					}
            				}
HXDLIN( 619)				if (!((this->zpp_inner->user_length != (int)0))) {
HXLINE( 619)					goto _hx_goto_24;
            				}
HXDLIN( 619)				this->pop();
            			}
            			_hx_goto_24:;
            		}
            		else {
HXLINE( 622)			while(true){
HXLINE( 622)				this->zpp_inner->valmod();
HXDLIN( 622)				if (this->zpp_inner->zip_length) {
HXLINE( 622)					this->zpp_inner->zip_length = false;
HXDLIN( 622)					{
HXLINE( 622)						this->zpp_inner->user_length = (int)0;
HXDLIN( 622)						{
HXLINE( 622)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite1,"cx_ite") = this->zpp_inner->inner->next;
HXDLIN( 622)							while(hx::IsNotNull( cx_ite1 )){
HXLINE( 622)								HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,i1,"i") = cx_ite1;
HXDLIN( 622)								bool _hx_tmp1;
HXDLIN( 622)								if (i1->active) {
HXLINE( 622)									_hx_tmp1 = i1->arbiter->active;
            								}
            								else {
HXLINE( 622)									_hx_tmp1 = false;
            								}
HXDLIN( 622)								if (_hx_tmp1) {
HXLINE( 622)									this->zpp_inner->user_length++;
            								}
HXDLIN( 622)								cx_ite1 = cx_ite1->next;
            							}
            						}
            					}
            				}
HXDLIN( 622)				if (!((this->zpp_inner->user_length != (int)0))) {
HXLINE( 622)					goto _hx_goto_26;
            				}
HXDLIN( 622)				this->shift();
            			}
            			_hx_goto_26:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactList_obj,clear,(void))

bool ContactList_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_632_empty)
            	HX_STACK_THIS(this)
HXLINE( 632)		this->zpp_inner->valmod();
HXDLIN( 632)		if (this->zpp_inner->zip_length) {
HXLINE( 632)			this->zpp_inner->zip_length = false;
HXDLIN( 632)			{
HXLINE( 632)				this->zpp_inner->user_length = (int)0;
HXDLIN( 632)				{
HXLINE( 632)					HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 632)					while(hx::IsNotNull( cx_ite )){
HXLINE( 632)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 632)						bool _hx_tmp;
HXDLIN( 632)						if (i->active) {
HXLINE( 632)							_hx_tmp = i->arbiter->active;
            						}
            						else {
HXLINE( 632)							_hx_tmp = false;
            						}
HXDLIN( 632)						if (_hx_tmp) {
HXLINE( 632)							this->zpp_inner->user_length++;
            						}
HXDLIN( 632)						cx_ite = cx_ite->next;
            					}
            				}
            			}
            		}
HXDLIN( 632)		return (this->zpp_inner->user_length == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactList_obj,empty,return )

 ::nape::dynamics::ContactIterator ContactList_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_647_iterator)
            	HX_STACK_THIS(this)
HXLINE( 648)		this->zpp_inner->valmod();
HXLINE( 651)		return ::nape::dynamics::ContactIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactList_obj,iterator,return )

 ::nape::dynamics::ContactList ContactList_obj::copy(hx::Null< bool >  __o_deep){
bool deep = __o_deep.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_2011eb8df9683541_662_copy)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deep,"deep")
HXLINE( 663)		HX_VARI(  ::nape::dynamics::ContactList,ret) =  ::nape::dynamics::ContactList_obj::__alloc( HX_CTX );
HXLINE( 664)		{
HXLINE( 664)			this->zpp_inner->valmod();
HXDLIN( 664)			HX_VARI(  ::nape::dynamics::ContactIterator,_g) = ::nape::dynamics::ContactIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 664)			while(true){
HXLINE( 664)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 664)				HX_VARI(  ::nape::dynamics::ContactList,_this) = _g->zpp_inner;
HXDLIN( 664)				_this->zpp_inner->valmod();
HXDLIN( 664)				if (_this->zpp_inner->zip_length) {
HXLINE( 664)					_this->zpp_inner->zip_length = false;
HXDLIN( 664)					{
HXLINE( 664)						_this->zpp_inner->user_length = (int)0;
HXDLIN( 664)						{
HXLINE( 664)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = _this->zpp_inner->inner->next;
HXDLIN( 664)							while(hx::IsNotNull( cx_ite )){
HXLINE( 664)								HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 664)								bool _hx_tmp;
HXDLIN( 664)								if (i->active) {
HXLINE( 664)									_hx_tmp = i->arbiter->active;
            								}
            								else {
HXLINE( 664)									_hx_tmp = false;
            								}
HXDLIN( 664)								if (_hx_tmp) {
HXLINE( 664)									_this->zpp_inner->user_length++;
            								}
HXDLIN( 664)								cx_ite = cx_ite->next;
            							}
            						}
            					}
            				}
HXDLIN( 664)				_g->zpp_critical = true;
HXDLIN( 664)				bool _hx_tmp1;
HXDLIN( 664)				if ((_g->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 664)					_hx_tmp1 = true;
            				}
            				else {
HXLINE( 664)					{
HXLINE( 664)						_g->zpp_next = ::nape::dynamics::ContactIterator_obj::zpp_pool;
HXDLIN( 664)						::nape::dynamics::ContactIterator_obj::zpp_pool = _g;
HXDLIN( 664)						_g->zpp_inner = null();
            					}
HXDLIN( 664)					_hx_tmp1 = false;
            				}
HXDLIN( 664)				if (!(_hx_tmp1)) {
HXLINE( 664)					goto _hx_goto_32;
            				}
HXDLIN( 664)				_g->zpp_critical = false;
HXDLIN( 664)				HX_VARI_NAME(  ::nape::dynamics::Contact,i1,"i") = _g->zpp_inner->at(_g->zpp_i++);
HXDLIN( 664)				 ::nape::dynamics::Contact _hx_tmp2;
HXDLIN( 664)				if (deep) {
HXLINE( 664)					_hx_tmp2 = null();
            				}
            				else {
HXLINE( 664)					_hx_tmp2 = i1;
            				}
HXDLIN( 664)				ret->push(_hx_tmp2);
            			}
            			_hx_goto_32:;
            		}
HXLINE( 671)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,copy,return )

void ContactList_obj::merge( ::nape::dynamics::ContactList xs){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_688_merge)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xs,"xs")
HXLINE( 688)		xs->zpp_inner->valmod();
HXDLIN( 688)		HX_VARI(  ::nape::dynamics::ContactIterator,_g) = ::nape::dynamics::ContactIterator_obj::get(xs);
HXDLIN( 688)		while(true){
HXLINE( 688)			_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 688)			HX_VARI(  ::nape::dynamics::ContactList,_this) = _g->zpp_inner;
HXDLIN( 688)			_this->zpp_inner->valmod();
HXDLIN( 688)			if (_this->zpp_inner->zip_length) {
HXLINE( 688)				_this->zpp_inner->zip_length = false;
HXDLIN( 688)				{
HXLINE( 688)					_this->zpp_inner->user_length = (int)0;
HXDLIN( 688)					{
HXLINE( 688)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = _this->zpp_inner->inner->next;
HXDLIN( 688)						while(hx::IsNotNull( cx_ite )){
HXLINE( 688)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 688)							bool _hx_tmp;
HXDLIN( 688)							if (i->active) {
HXLINE( 688)								_hx_tmp = i->arbiter->active;
            							}
            							else {
HXLINE( 688)								_hx_tmp = false;
            							}
HXDLIN( 688)							if (_hx_tmp) {
HXLINE( 688)								_this->zpp_inner->user_length++;
            							}
HXDLIN( 688)							cx_ite = cx_ite->next;
            						}
            					}
            				}
            			}
HXDLIN( 688)			_g->zpp_critical = true;
HXDLIN( 688)			bool _hx_tmp1;
HXDLIN( 688)			if ((_g->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 688)				_hx_tmp1 = true;
            			}
            			else {
HXLINE( 688)				{
HXLINE( 688)					_g->zpp_next = ::nape::dynamics::ContactIterator_obj::zpp_pool;
HXDLIN( 688)					::nape::dynamics::ContactIterator_obj::zpp_pool = _g;
HXDLIN( 688)					_g->zpp_inner = null();
            				}
HXDLIN( 688)				_hx_tmp1 = false;
            			}
HXDLIN( 688)			if (!(_hx_tmp1)) {
HXLINE( 688)				goto _hx_goto_35;
            			}
HXDLIN( 688)			_g->zpp_critical = false;
HXDLIN( 688)			HX_VARI(  ::nape::dynamics::Contact,x) = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 689)			if (!(this->has(x))) {
HXLINE( 689)				if (this->zpp_inner->reverse_flag) {
HXLINE( 689)					this->push(x);
            				}
            				else {
HXLINE( 689)					this->unshift(x);
            				}
            			}
            		}
            		_hx_goto_35:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,merge,(void))

::String ContactList_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_702_toString)
            	HX_STACK_THIS(this)
HXLINE( 703)		HX_VARI( ::String,ret) = HX_("[",5b,00,00,00);
HXLINE( 704)		HX_VARI( bool,fst) = true;
HXLINE( 705)		{
HXLINE( 705)			this->zpp_inner->valmod();
HXDLIN( 705)			HX_VARI(  ::nape::dynamics::ContactIterator,_g) = ::nape::dynamics::ContactIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 705)			while(true){
HXLINE( 705)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN( 705)				HX_VARI(  ::nape::dynamics::ContactList,_this) = _g->zpp_inner;
HXDLIN( 705)				_this->zpp_inner->valmod();
HXDLIN( 705)				if (_this->zpp_inner->zip_length) {
HXLINE( 705)					_this->zpp_inner->zip_length = false;
HXDLIN( 705)					{
HXLINE( 705)						_this->zpp_inner->user_length = (int)0;
HXDLIN( 705)						{
HXLINE( 705)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = _this->zpp_inner->inner->next;
HXDLIN( 705)							while(hx::IsNotNull( cx_ite )){
HXLINE( 705)								HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 705)								bool _hx_tmp;
HXDLIN( 705)								if (i->active) {
HXLINE( 705)									_hx_tmp = i->arbiter->active;
            								}
            								else {
HXLINE( 705)									_hx_tmp = false;
            								}
HXDLIN( 705)								if (_hx_tmp) {
HXLINE( 705)									_this->zpp_inner->user_length++;
            								}
HXDLIN( 705)								cx_ite = cx_ite->next;
            							}
            						}
            					}
            				}
HXDLIN( 705)				_g->zpp_critical = true;
HXDLIN( 705)				bool _hx_tmp1;
HXDLIN( 705)				if ((_g->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 705)					_hx_tmp1 = true;
            				}
            				else {
HXLINE( 705)					{
HXLINE( 705)						_g->zpp_next = ::nape::dynamics::ContactIterator_obj::zpp_pool;
HXDLIN( 705)						::nape::dynamics::ContactIterator_obj::zpp_pool = _g;
HXDLIN( 705)						_g->zpp_inner = null();
            					}
HXDLIN( 705)					_hx_tmp1 = false;
            				}
HXDLIN( 705)				if (!(_hx_tmp1)) {
HXLINE( 705)					goto _hx_goto_38;
            				}
HXDLIN( 705)				_g->zpp_critical = false;
HXDLIN( 705)				HX_VARI_NAME(  ::nape::dynamics::Contact,i1,"i") = _g->zpp_inner->at(_g->zpp_i++);
HXLINE( 706)				if (!(fst)) {
HXLINE( 706)					ret = (ret + HX_(",",2c,00,00,00));
            				}
HXLINE( 707)				::String ret1;
HXDLIN( 707)				if (hx::IsNull( i1 )) {
HXLINE( 707)					ret1 = HX_("NULL",87,66,cf,33);
            				}
            				else {
HXLINE( 707)					ret1 = i1->toString();
            				}
HXDLIN( 707)				ret = (ret + ret1);
HXLINE( 708)				fst = false;
            			}
            			_hx_goto_38:;
            		}
HXLINE( 710)		return (ret + HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactList_obj,toString,return )

 ::nape::dynamics::ContactList ContactList_obj::foreach( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_732_foreach)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 736)		this->zpp_inner->valmod();
HXDLIN( 736)		HX_VARI(  ::nape::dynamics::ContactIterator,it) = ::nape::dynamics::ContactIterator_obj::get(hx::ObjectPtr<OBJ_>(this));
HXLINE( 737)		while(true){
HXLINE( 737)			it->zpp_inner->zpp_inner->valmod();
HXDLIN( 737)			HX_VARI(  ::nape::dynamics::ContactList,_this) = it->zpp_inner;
HXDLIN( 737)			_this->zpp_inner->valmod();
HXDLIN( 737)			if (_this->zpp_inner->zip_length) {
HXLINE( 737)				_this->zpp_inner->zip_length = false;
HXDLIN( 737)				{
HXLINE( 737)					_this->zpp_inner->user_length = (int)0;
HXDLIN( 737)					{
HXLINE( 737)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = _this->zpp_inner->inner->next;
HXDLIN( 737)						while(hx::IsNotNull( cx_ite )){
HXLINE( 737)							HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,i) = cx_ite;
HXDLIN( 737)							bool _hx_tmp;
HXDLIN( 737)							if (i->active) {
HXLINE( 737)								_hx_tmp = i->arbiter->active;
            							}
            							else {
HXLINE( 737)								_hx_tmp = false;
            							}
HXDLIN( 737)							if (_hx_tmp) {
HXLINE( 737)								_this->zpp_inner->user_length++;
            							}
HXDLIN( 737)							cx_ite = cx_ite->next;
            						}
            					}
            				}
            			}
HXDLIN( 737)			it->zpp_critical = true;
HXDLIN( 737)			bool _hx_tmp1;
HXDLIN( 737)			if ((it->zpp_i < _this->zpp_inner->user_length)) {
HXLINE( 737)				_hx_tmp1 = true;
            			}
            			else {
HXLINE( 737)				{
HXLINE( 737)					it->zpp_next = ::nape::dynamics::ContactIterator_obj::zpp_pool;
HXDLIN( 737)					::nape::dynamics::ContactIterator_obj::zpp_pool = it;
HXDLIN( 737)					it->zpp_inner = null();
            				}
HXDLIN( 737)				_hx_tmp1 = false;
            			}
HXDLIN( 737)			if (!(_hx_tmp1)) {
HXLINE( 737)				goto _hx_goto_41;
            			}
HXLINE( 738)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 739)				it->zpp_critical = false;
HXDLIN( 739)				lambda(it->zpp_inner->at(it->zpp_i++));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 742)					{
HXLINE( 743)						it->zpp_next = ::nape::dynamics::ContactIterator_obj::zpp_pool;
HXLINE( 744)						::nape::dynamics::ContactIterator_obj::zpp_pool = it;
HXLINE( 745)						it->zpp_inner = null();
            					}
HXLINE( 747)					goto _hx_goto_41;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_41:;
HXLINE( 750)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,foreach,return )

 ::nape::dynamics::ContactList ContactList_obj::filter( ::Dynamic lambda){
            	HX_STACKFRAME(&_hx_pos_2011eb8df9683541_779_filter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lambda,"lambda")
HXLINE( 783)		HX_VARI( int,i) = (int)0;
HXLINE( 784)		while(true){
HXLINE( 784)			this->zpp_inner->valmod();
HXDLIN( 784)			if (this->zpp_inner->zip_length) {
HXLINE( 784)				this->zpp_inner->zip_length = false;
HXDLIN( 784)				{
HXLINE( 784)					this->zpp_inner->user_length = (int)0;
HXDLIN( 784)					{
HXLINE( 784)						HX_VARI(  ::zpp_nape::dynamics::ZPP_Contact,cx_ite) = this->zpp_inner->inner->next;
HXDLIN( 784)						while(hx::IsNotNull( cx_ite )){
HXLINE( 784)							HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,i1,"i") = cx_ite;
HXDLIN( 784)							bool _hx_tmp;
HXDLIN( 784)							if (i1->active) {
HXLINE( 784)								_hx_tmp = i1->arbiter->active;
            							}
            							else {
HXLINE( 784)								_hx_tmp = false;
            							}
HXDLIN( 784)							if (_hx_tmp) {
HXLINE( 784)								this->zpp_inner->user_length++;
            							}
HXDLIN( 784)							cx_ite = cx_ite->next;
            						}
            					}
            				}
            			}
HXDLIN( 784)			if (!((i < this->zpp_inner->user_length))) {
HXLINE( 784)				goto _hx_goto_44;
            			}
HXLINE( 785)			HX_VARI(  ::nape::dynamics::Contact,x) = this->at(i);
HXLINE( 786)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 787)				if (( (bool)(lambda(x)) )) {
HXLINE( 787)					i = (i + (int)1);
            				}
            				else {
HXLINE( 788)					this->remove(x);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 791)					goto _hx_goto_44;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		_hx_goto_44:;
HXLINE( 794)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,filter,return )

 ::nape::dynamics::ContactList ContactList_obj::fromArray(::Array< ::Dynamic> array){
            	HX_GC_STACKFRAME(&_hx_pos_2011eb8df9683541_304_fromArray)
            	HX_STACK_ARG(array,"array")
HXLINE( 310)		HX_VARI(  ::nape::dynamics::ContactList,ret) =  ::nape::dynamics::ContactList_obj::__alloc( HX_CTX );
HXLINE( 311)		{
HXLINE( 311)			HX_VARI( int,_g) = (int)0;
HXDLIN( 311)			while((_g < array->length)){
HXLINE( 311)				HX_VARI(  ::nape::dynamics::Contact,i) = array->__get(_g).StaticCast<  ::nape::dynamics::Contact >();
HXDLIN( 311)				_g = (_g + (int)1);
HXLINE( 316)				ret->push(i);
            			}
            		}
HXLINE( 318)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ContactList_obj,fromArray,return )


hx::ObjectPtr< ContactList_obj > ContactList_obj::__new() {
	hx::ObjectPtr< ContactList_obj > __this = new ContactList_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ContactList_obj > ContactList_obj::__alloc(hx::Ctx *_hx_ctx) {
	ContactList_obj *__this = (ContactList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ContactList_obj), true, "nape.dynamics.ContactList"));
	*(void **)__this = ContactList_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ContactList_obj::ContactList_obj()
{
}

void ContactList_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ContactList);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void ContactList_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val ContactList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"empty") ) { return hx::Val( empty_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn()); }
		if (HX_FIELD_EQ(inName,"foreach") ) { return hx::Val( foreach_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ContactList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
	}
	return false;
}

hx::Val ContactList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::util::ZPP_ContactList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ContactList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ContactList_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_ContactList*/ ,(int)offsetof(ContactList_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ContactList_obj_sStaticStorageInfo = 0;
#endif

static ::String ContactList_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("foreach","\x8a","\xfd","\xe4","\xd9"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	::String(null()) };

static void ContactList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ContactList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ContactList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ContactList_obj::__mClass,"__mClass");
};

#endif

hx::Class ContactList_obj::__mClass;

static ::String ContactList_obj_sStaticFields[] = {
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	::String(null())
};

void ContactList_obj::__register()
{
	hx::Object *dummy = new ContactList_obj;
	ContactList_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.dynamics.ContactList","\xea","\x78","\x96","\x58");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ContactList_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ContactList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ContactList_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ContactList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ContactList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ContactList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ContactList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ContactList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace dynamics
