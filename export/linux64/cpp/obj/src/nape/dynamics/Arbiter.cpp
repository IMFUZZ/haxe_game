// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_PreFlag
#include <nape/callbacks/PreFlag.h>
#endif
#ifndef INCLUDED_nape_dynamics_Arbiter
#include <nape/dynamics/Arbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterType
#include <nape/dynamics/ArbiterType.h>
#endif
#ifndef INCLUDED_nape_dynamics_CollisionArbiter
#include <nape/dynamics/CollisionArbiter.h>
#endif
#ifndef INCLUDED_nape_dynamics_FluidArbiter
#include <nape/dynamics/FluidArbiter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_184_new,"nape.dynamics.Arbiter","new",0xe76def27,"nape.dynamics.Arbiter.new","nape/dynamics/Arbiter.hx",184,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_196_get_isSleeping,"nape.dynamics.Arbiter","get_isSleeping",0x2704cb17,"nape.dynamics.Arbiter.get_isSleeping","nape/dynamics/Arbiter.hx",196,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_204_get_type,"nape.dynamics.Arbiter","get_type",0x2d419e1c,"nape.dynamics.Arbiter.get_type","nape/dynamics/Arbiter.hx",204,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_215_isCollisionArbiter,"nape.dynamics.Arbiter","isCollisionArbiter",0xe3eed6ba,"nape.dynamics.Arbiter.isCollisionArbiter","nape/dynamics/Arbiter.hx",215,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_226_isFluidArbiter,"nape.dynamics.Arbiter","isFluidArbiter",0x41f1faa2,"nape.dynamics.Arbiter.isFluidArbiter","nape/dynamics/Arbiter.hx",226,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_237_isSensorArbiter,"nape.dynamics.Arbiter","isSensorArbiter",0x9140c7cc,"nape.dynamics.Arbiter.isSensorArbiter","nape/dynamics/Arbiter.hx",237,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_247_get_collisionArbiter,"nape.dynamics.Arbiter","get_collisionArbiter",0x65c547f9,"nape.dynamics.Arbiter.get_collisionArbiter","nape/dynamics/Arbiter.hx",247,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_257_get_fluidArbiter,"nape.dynamics.Arbiter","get_fluidArbiter",0xff492061,"nape.dynamics.Arbiter.get_fluidArbiter","nape/dynamics/Arbiter.hx",257,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_270_get_shape1,"nape.dynamics.Arbiter","get_shape1",0xfd6da1d2,"nape.dynamics.Arbiter.get_shape1","nape/dynamics/Arbiter.hx",270,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_283_get_shape2,"nape.dynamics.Arbiter","get_shape2",0xfd6da1d3,"nape.dynamics.Arbiter.get_shape2","nape/dynamics/Arbiter.hx",283,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_296_get_body1,"nape.dynamics.Arbiter","get_body1",0x084d1dad,"nape.dynamics.Arbiter.get_body1","nape/dynamics/Arbiter.hx",296,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_309_get_body2,"nape.dynamics.Arbiter","get_body2",0x084d1dae,"nape.dynamics.Arbiter.get_body2","nape/dynamics/Arbiter.hx",309,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_327_get_state,"nape.dynamics.Arbiter","get_state",0xd568c06f,"nape.dynamics.Arbiter.get_state","nape/dynamics/Arbiter.hx",327,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_357_totalImpulse,"nape.dynamics.Arbiter","totalImpulse",0xb05135aa,"nape.dynamics.Arbiter.totalImpulse","nape/dynamics/Arbiter.hx",357,0x42fd8209)
HX_DEFINE_STACK_FRAME(_hx_pos_60cc59ec252df1ea_372_toString,"nape.dynamics.Arbiter","toString",0x98ecc085,"nape.dynamics.Arbiter.toString","nape/dynamics/Arbiter.hx",372,0x42fd8209)
static const ::String _hx_array_data_8797cfb5_15[] = {
	HX_("SD",91,48,00,00),HX_("DD",80,3b,00,00),
};
namespace nape{
namespace dynamics{

void Arbiter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_184_new)
            	HX_STACK_THIS(this)
HXLINE( 184)		this->zpp_inner = null();
            	}

Dynamic Arbiter_obj::__CreateEmpty() { return new Arbiter_obj; }

void *Arbiter_obj::_hx_vtable = 0;

Dynamic Arbiter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Arbiter_obj > _hx_result = new Arbiter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Arbiter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3d1477e9;
}

bool Arbiter_obj::get_isSleeping(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_196_get_isSleeping)
            	HX_STACK_THIS(this)
HXLINE( 196)		return this->zpp_inner->sleeping;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_isSleeping,return )

 ::nape::dynamics::ArbiterType Arbiter_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_204_get_type)
            	HX_STACK_THIS(this)
HXLINE( 204)		return ::zpp_nape::dynamics::ZPP_Arbiter_obj::types->__get(this->zpp_inner->type).StaticCast<  ::nape::dynamics::ArbiterType >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_type,return )

bool Arbiter_obj::isCollisionArbiter(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_215_isCollisionArbiter)
            	HX_STACK_THIS(this)
HXLINE( 215)		return (this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,isCollisionArbiter,return )

bool Arbiter_obj::isFluidArbiter(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_226_isFluidArbiter)
            	HX_STACK_THIS(this)
HXLINE( 226)		return (this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,isFluidArbiter,return )

bool Arbiter_obj::isSensorArbiter(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_237_isSensorArbiter)
            	HX_STACK_THIS(this)
HXLINE( 237)		return (this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,isSensorArbiter,return )

 ::nape::dynamics::CollisionArbiter Arbiter_obj::get_collisionArbiter(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_247_get_collisionArbiter)
            	HX_STACK_THIS(this)
HXLINE( 247)		if ((this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE( 247)			return this->zpp_inner->colarb->outer_zn;
            		}
            		else {
HXLINE( 247)			return null();
            		}
HXDLIN( 247)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_collisionArbiter,return )

 ::nape::dynamics::FluidArbiter Arbiter_obj::get_fluidArbiter(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_257_get_fluidArbiter)
            	HX_STACK_THIS(this)
HXLINE( 257)		if ((this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE( 257)			return this->zpp_inner->fluidarb->outer_zn;
            		}
            		else {
HXLINE( 257)			return null();
            		}
HXDLIN( 257)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_fluidArbiter,return )

 ::nape::shape::Shape Arbiter_obj::get_shape1(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_270_get_shape1)
            	HX_STACK_THIS(this)
HXLINE( 270)		if ((this->zpp_inner->ws1->id > this->zpp_inner->ws2->id)) {
HXLINE( 270)			return this->zpp_inner->ws2->outer;
            		}
            		else {
HXLINE( 270)			return this->zpp_inner->ws1->outer;
            		}
HXDLIN( 270)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_shape1,return )

 ::nape::shape::Shape Arbiter_obj::get_shape2(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_283_get_shape2)
            	HX_STACK_THIS(this)
HXLINE( 283)		if ((this->zpp_inner->ws1->id > this->zpp_inner->ws2->id)) {
HXLINE( 283)			return this->zpp_inner->ws1->outer;
            		}
            		else {
HXLINE( 283)			return this->zpp_inner->ws2->outer;
            		}
HXDLIN( 283)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_shape2,return )

 ::nape::phys::Body Arbiter_obj::get_body1(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_296_get_body1)
            	HX_STACK_THIS(this)
HXLINE( 296)		if ((this->zpp_inner->ws1->id > this->zpp_inner->ws2->id)) {
HXLINE( 296)			return this->zpp_inner->b2->outer;
            		}
            		else {
HXLINE( 296)			return this->zpp_inner->b1->outer;
            		}
HXDLIN( 296)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_body1,return )

 ::nape::phys::Body Arbiter_obj::get_body2(){
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_309_get_body2)
            	HX_STACK_THIS(this)
HXLINE( 309)		if ((this->zpp_inner->ws1->id > this->zpp_inner->ws2->id)) {
HXLINE( 309)			return this->zpp_inner->b1->outer;
            		}
            		else {
HXLINE( 309)			return this->zpp_inner->b2->outer;
            		}
HXDLIN( 309)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_body2,return )

 ::nape::callbacks::PreFlag Arbiter_obj::get_state(){
            	HX_GC_STACKFRAME(&_hx_pos_60cc59ec252df1ea_327_get_state)
            	HX_STACK_THIS(this)
HXLINE( 327)		HX_VARI( int,_g) = this->zpp_inner->immState;
HXDLIN( 327)		if ((_g == (int)5)) {
HXLINE( 328)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE( 328)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 328)				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 328)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXLINE( 327)			return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
            		}
            		else {
HXLINE( 327)			if ((_g == (int)1)) {
HXLINE( 329)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE( 329)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 329)					::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 329)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXLINE( 327)				return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
            			}
            			else {
HXLINE( 330)				if ((_g == (int)6)) {
HXLINE( 330)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE( 330)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 330)						::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 330)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXLINE( 327)					return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
            				}
            				else {
HXLINE( 331)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE_ONCE )) {
HXLINE( 331)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 331)						::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE_ONCE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 331)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXLINE( 327)					return ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE_ONCE;
            				}
            			}
            		}
HXDLIN( 327)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,get_state,return )

 ::nape::geom::Vec3 Arbiter_obj::totalImpulse( ::nape::phys::Body body,hx::Null< bool >  __o_freshOnly){
bool freshOnly = __o_freshOnly.Default(false);
            	HX_STACKFRAME(&_hx_pos_60cc59ec252df1ea_357_totalImpulse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
            	HX_STACK_ARG(freshOnly,"freshOnly")
HXLINE( 357)		return ::nape::geom::Vec3_obj::get((int)0,(int)0,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Arbiter_obj,totalImpulse,return )

::String Arbiter_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_60cc59ec252df1ea_372_toString)
            	HX_STACK_THIS(this)
HXLINE( 373)		HX_VAR( ::String,ret);
HXDLIN( 373)		if ((this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE( 373)			ret = HX_("CollisionArbiter",b7,ed,02,e4);
            		}
            		else {
HXLINE( 374)			if ((this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID)) {
HXLINE( 373)				ret = HX_("FluidArbiter",1f,8f,95,ed);
            			}
            			else {
HXLINE( 373)				ret = HX_("SensorArbiter",af,20,bf,14);
            			}
            		}
HXLINE( 378)		if (this->zpp_inner->cleared) {
HXLINE( 378)			return (ret + HX_("(object-pooled)",e8,46,65,39));
            		}
            		else {
HXLINE( 379)			 ::nape::shape::Shape _hx_tmp;
HXDLIN( 379)			if ((this->zpp_inner->ws1->id > this->zpp_inner->ws2->id)) {
HXLINE( 379)				_hx_tmp = this->zpp_inner->ws2->outer;
            			}
            			else {
HXLINE( 379)				_hx_tmp = this->zpp_inner->ws1->outer;
            			}
HXDLIN( 379)			 ::nape::shape::Shape _hx_tmp1;
HXDLIN( 379)			if ((this->zpp_inner->ws1->id > this->zpp_inner->ws2->id)) {
HXLINE( 379)				_hx_tmp1 = this->zpp_inner->ws1->outer;
            			}
            			else {
HXLINE( 379)				_hx_tmp1 = this->zpp_inner->ws2->outer;
            			}
HXDLIN( 379)			::String _hx_tmp2;
HXDLIN( 379)			if ((this->zpp_inner->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) {
HXLINE( 379)				int _hx_tmp3;
HXDLIN( 379)				if (this->zpp_inner->colarb->stat) {
HXLINE( 379)					_hx_tmp3 = (int)0;
            				}
            				else {
HXLINE( 379)					_hx_tmp3 = (int)1;
            				}
HXDLIN( 379)				_hx_tmp2 = ((HX_("[",5b,00,00,00) + ::Array_obj< ::String >::fromData( _hx_array_data_8797cfb5_15,2)->__get(_hx_tmp3)) + HX_("]",5d,00,00,00));
            			}
            			else {
HXLINE( 379)				_hx_tmp2 = HX_("",00,00,00,00);
            			}
HXDLIN( 379)			::String _hx_tmp4 = (((((((ret + HX_("(",28,00,00,00)) + _hx_tmp->toString()) + HX_("|",7c,00,00,00)) + _hx_tmp1->toString()) + HX_(")",29,00,00,00)) + _hx_tmp2) + HX_("<-",71,34,00,00));
HXDLIN( 379)			HX_VARI( int,_g) = this->zpp_inner->immState;
HXDLIN( 379)			 ::nape::callbacks::PreFlag _hx_tmp5;
HXDLIN( 379)			if ((_g == (int)5)) {
HXLINE( 379)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT )) {
HXLINE( 379)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 379)					::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 379)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 379)				_hx_tmp5 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
            			}
            			else {
HXLINE( 379)				if ((_g == (int)1)) {
HXLINE( 379)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE )) {
HXLINE( 379)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 379)						::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 379)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN( 379)					_hx_tmp5 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
            				}
            				else {
HXLINE( 379)					if ((_g == (int)6)) {
HXLINE( 379)						if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE )) {
HXLINE( 379)							::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 379)							::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 379)							::zpp_nape::util::ZPP_Flags_obj::internal = false;
            						}
HXDLIN( 379)						_hx_tmp5 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
            					}
            					else {
HXLINE( 379)						if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE_ONCE )) {
HXLINE( 379)							::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 379)							::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE_ONCE =  ::nape::callbacks::PreFlag_obj::__alloc( HX_CTX );
HXDLIN( 379)							::zpp_nape::util::ZPP_Flags_obj::internal = false;
            						}
HXDLIN( 379)						_hx_tmp5 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE_ONCE;
            					}
            				}
            			}
HXDLIN( 379)			return (_hx_tmp4 + _hx_tmp5->toString());
            		}
HXLINE( 378)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Arbiter_obj,toString,return )


hx::ObjectPtr< Arbiter_obj > Arbiter_obj::__new() {
	hx::ObjectPtr< Arbiter_obj > __this = new Arbiter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Arbiter_obj > Arbiter_obj::__alloc(hx::Ctx *_hx_ctx) {
	Arbiter_obj *__this = (Arbiter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Arbiter_obj), true, "nape.dynamics.Arbiter"));
	*(void **)__this = Arbiter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Arbiter_obj::Arbiter_obj()
{
}

void Arbiter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Arbiter);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Arbiter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Arbiter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"body1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body1()); }
		if (HX_FIELD_EQ(inName,"body2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body2()); }
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_state()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shape1") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_shape1()); }
		if (HX_FIELD_EQ(inName,"shape2") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_shape2()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"get_body1") ) { return hx::Val( get_body1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_body2") ) { return hx::Val( get_body2_dyn()); }
		if (HX_FIELD_EQ(inName,"get_state") ) { return hx::Val( get_state_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isSleeping") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_isSleeping()); }
		if (HX_FIELD_EQ(inName,"get_shape1") ) { return hx::Val( get_shape1_dyn()); }
		if (HX_FIELD_EQ(inName,"get_shape2") ) { return hx::Val( get_shape2_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fluidArbiter") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_fluidArbiter()); }
		if (HX_FIELD_EQ(inName,"totalImpulse") ) { return hx::Val( totalImpulse_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_isSleeping") ) { return hx::Val( get_isSleeping_dyn()); }
		if (HX_FIELD_EQ(inName,"isFluidArbiter") ) { return hx::Val( isFluidArbiter_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isSensorArbiter") ) { return hx::Val( isSensorArbiter_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"collisionArbiter") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_collisionArbiter()); }
		if (HX_FIELD_EQ(inName,"get_fluidArbiter") ) { return hx::Val( get_fluidArbiter_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"isCollisionArbiter") ) { return hx::Val( isCollisionArbiter_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_collisionArbiter") ) { return hx::Val( get_collisionArbiter_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Arbiter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::dynamics::ZPP_Arbiter >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Arbiter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("isSleeping","\x35","\x6a","\x42","\x8b"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("collisionArbiter","\x97","\x11","\x08","\xca"));
	outFields->push(HX_HCSTRING("fluidArbiter","\xff","\x42","\x83","\x25"));
	outFields->push(HX_HCSTRING("shape1","\xf0","\xd9","\x29","\x1d"));
	outFields->push(HX_HCSTRING("shape2","\xf1","\xd9","\x29","\x1d"));
	outFields->push(HX_HCSTRING("body1","\x4f","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("body2","\x50","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Arbiter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::dynamics::ZPP_Arbiter*/ ,(int)offsetof(Arbiter_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Arbiter_obj_sStaticStorageInfo = 0;
#endif

static ::String Arbiter_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_isSleeping","\x7e","\xf2","\x37","\x01"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("isCollisionArbiter","\xa1","\x3d","\x87","\x42"),
	HX_HCSTRING("isFluidArbiter","\x09","\x22","\x25","\x1c"),
	HX_HCSTRING("isSensorArbiter","\x85","\x1a","\xd0","\xa3"),
	HX_HCSTRING("get_collisionArbiter","\xa0","\x76","\x72","\xe8"),
	HX_HCSTRING("get_fluidArbiter","\x88","\x2f","\x22","\x2a"),
	HX_HCSTRING("get_shape1","\xb9","\x49","\xb1","\x0d"),
	HX_HCSTRING("get_shape2","\xba","\x49","\xb1","\x0d"),
	HX_HCSTRING("get_body1","\xa6","\x2f","\x99","\xfa"),
	HX_HCSTRING("get_body2","\xa7","\x2f","\x99","\xfa"),
	HX_HCSTRING("get_state","\x68","\xd2","\xb4","\xc7"),
	HX_HCSTRING("totalImpulse","\x51","\xe5","\xbb","\x16"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Arbiter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Arbiter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Arbiter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Arbiter_obj::__mClass,"__mClass");
};

#endif

hx::Class Arbiter_obj::__mClass;

void Arbiter_obj::__register()
{
	hx::Object *dummy = new Arbiter_obj;
	Arbiter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.dynamics.Arbiter","\xb5","\xcf","\x97","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Arbiter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Arbiter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Arbiter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Arbiter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Arbiter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Arbiter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace dynamics
