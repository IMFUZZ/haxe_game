// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResult
#include <nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a8986b1725c92b02_184_new,"nape.geom.ConvexResult","new",0x2285a4a2,"nape.geom.ConvexResult.new","nape/geom/ConvexResult.hx",184,0x8636d4ae)
HX_DEFINE_STACK_FRAME(_hx_pos_a8986b1725c92b02_194_get_normal,"nape.geom.ConvexResult","get_normal",0x9c62f9ee,"nape.geom.ConvexResult.get_normal","nape/geom/ConvexResult.hx",194,0x8636d4ae)
HX_DEFINE_STACK_FRAME(_hx_pos_a8986b1725c92b02_205_get_position,"nape.geom.ConvexResult","get_position",0x4e3ae830,"nape.geom.ConvexResult.get_position","nape/geom/ConvexResult.hx",205,0x8636d4ae)
HX_DEFINE_STACK_FRAME(_hx_pos_a8986b1725c92b02_216_get_toi,"nape.geom.ConvexResult","get_toi",0xa8eb4c67,"nape.geom.ConvexResult.get_toi","nape/geom/ConvexResult.hx",216,0x8636d4ae)
HX_DEFINE_STACK_FRAME(_hx_pos_a8986b1725c92b02_227_get_shape,"nape.geom.ConvexResult","get_shape",0x9b97b13a,"nape.geom.ConvexResult.get_shape","nape/geom/ConvexResult.hx",227,0x8636d4ae)
HX_DEFINE_STACK_FRAME(_hx_pos_a8986b1725c92b02_247_dispose,"nape.geom.ConvexResult","dispose",0x3d6a9de1,"nape.geom.ConvexResult.dispose","nape/geom/ConvexResult.hx",247,0x8636d4ae)
HX_DEFINE_STACK_FRAME(_hx_pos_a8986b1725c92b02_256_toString,"nape.geom.ConvexResult","toString",0x90aa4d2a,"nape.geom.ConvexResult.toString","nape/geom/ConvexResult.hx",256,0x8636d4ae)
namespace nape{
namespace geom{

void ConvexResult_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a8986b1725c92b02_184_new)
            	HX_STACK_THIS(this)
HXLINE( 184)		this->zpp_inner = null();
            	}

Dynamic ConvexResult_obj::__CreateEmpty() { return new ConvexResult_obj; }

void *ConvexResult_obj::_hx_vtable = 0;

Dynamic ConvexResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ConvexResult_obj > _hx_result = new ConvexResult_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ConvexResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b3705e8;
}

 ::nape::geom::Vec2 ConvexResult_obj::get_normal(){
            	HX_STACKFRAME(&_hx_pos_a8986b1725c92b02_194_get_normal)
            	HX_STACK_THIS(this)
HXLINE( 194)		return this->zpp_inner->normal;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConvexResult_obj,get_normal,return )

 ::nape::geom::Vec2 ConvexResult_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_a8986b1725c92b02_205_get_position)
            	HX_STACK_THIS(this)
HXLINE( 205)		return this->zpp_inner->position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConvexResult_obj,get_position,return )

Float ConvexResult_obj::get_toi(){
            	HX_STACKFRAME(&_hx_pos_a8986b1725c92b02_216_get_toi)
            	HX_STACK_THIS(this)
HXLINE( 216)		return this->zpp_inner->toiDistance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConvexResult_obj,get_toi,return )

 ::nape::shape::Shape ConvexResult_obj::get_shape(){
            	HX_STACKFRAME(&_hx_pos_a8986b1725c92b02_227_get_shape)
            	HX_STACK_THIS(this)
HXLINE( 227)		return this->zpp_inner->shape;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConvexResult_obj,get_shape,return )

void ConvexResult_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_a8986b1725c92b02_247_dispose)
            	HX_STACK_THIS(this)
HXLINE( 247)		this->zpp_inner->free();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConvexResult_obj,dispose,(void))

::String ConvexResult_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a8986b1725c92b02_256_toString)
            	HX_STACK_THIS(this)
HXLINE( 256)		::String _hx_tmp = ((HX_("{ shape: ",62,97,c0,e7) + ::Std_obj::string(this->zpp_inner->shape)) + HX_(" toi: ",94,64,95,df));
HXDLIN( 256)		return ((_hx_tmp + this->zpp_inner->toiDistance) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConvexResult_obj,toString,return )


hx::ObjectPtr< ConvexResult_obj > ConvexResult_obj::__new() {
	hx::ObjectPtr< ConvexResult_obj > __this = new ConvexResult_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ConvexResult_obj > ConvexResult_obj::__alloc(hx::Ctx *_hx_ctx) {
	ConvexResult_obj *__this = (ConvexResult_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConvexResult_obj), true, "nape.geom.ConvexResult"));
	*(void **)__this = ConvexResult_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ConvexResult_obj::ConvexResult_obj()
{
}

void ConvexResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ConvexResult);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void ConvexResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val ConvexResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"toi") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_toi()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_shape()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_normal()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_toi") ) { return hx::Val( get_toi_dyn()); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"get_shape") ) { return hx::Val( get_shape_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_normal") ) { return hx::Val( get_normal_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ConvexResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_ConvexRayResult >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ConvexResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("toi","\x8e","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ConvexResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_ConvexRayResult*/ ,(int)offsetof(ConvexResult_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ConvexResult_obj_sStaticStorageInfo = 0;
#endif

static ::String ConvexResult_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_normal","\xf0","\xe1","\xf0","\x20"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("get_toi","\x25","\x2f","\xcd","\x26"),
	HX_HCSTRING("get_shape","\x78","\x3f","\xc6","\xbf"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ConvexResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ConvexResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ConvexResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ConvexResult_obj::__mClass,"__mClass");
};

#endif

hx::Class ConvexResult_obj::__mClass;

void ConvexResult_obj::__register()
{
	hx::Object *dummy = new ConvexResult_obj;
	ConvexResult_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.ConvexResult","\xb0","\x6b","\x32","\xcc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ConvexResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ConvexResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ConvexResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ConvexResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConvexResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConvexResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
