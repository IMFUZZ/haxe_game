// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPolyList
#include <nape/geom/GeomPolyList.h>
#endif
#ifndef INCLUDED_nape_geom_MarchingSquares
#include <nape/geom/MarchingSquares.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchingSquares
#include <zpp_nape/geom/ZPP_MarchingSquares.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d69bf442350a137_269_run,"nape.geom.MarchingSquares","run",0xa143a3c8,"nape.geom.MarchingSquares.run","nape/geom/MarchingSquares.hx",269,0x5f5b7193)
namespace nape{
namespace geom{

void MarchingSquares_obj::__construct() { }

Dynamic MarchingSquares_obj::__CreateEmpty() { return new MarchingSquares_obj; }

void *MarchingSquares_obj::_hx_vtable = 0;

Dynamic MarchingSquares_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MarchingSquares_obj > _hx_result = new MarchingSquares_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MarchingSquares_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03c13d4f;
}

 ::nape::geom::GeomPolyList MarchingSquares_obj::run( ::Dynamic iso, ::nape::geom::AABB bounds, ::nape::geom::Vec2 cellsize,hx::Null< int >  __o_quality, ::nape::geom::Vec2 subgrid,hx::Null< bool >  __o_combine, ::nape::geom::GeomPolyList output){
int quality = __o_quality.Default(2);
bool combine = __o_combine.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_8d69bf442350a137_269_run)
            	HX_STACK_ARG(iso,"iso")
            	HX_STACK_ARG(bounds,"bounds")
            	HX_STACK_ARG(cellsize,"cellsize")
            	HX_STACK_ARG(quality,"quality")
            	HX_STACK_ARG(subgrid,"subgrid")
            	HX_STACK_ARG(combine,"combine")
            	HX_STACK_ARG(output,"output")
HXLINE( 300)		HX_VAR(  ::nape::geom::GeomPolyList,ret);
HXDLIN( 300)		if (hx::IsNotNull( output )) {
HXLINE( 300)			ret = output;
            		}
            		else {
HXLINE( 300)			ret =  ::nape::geom::GeomPolyList_obj::__alloc( HX_CTX );
            		}
HXLINE( 301)		if (hx::IsNull( subgrid )) {
HXLINE( 302)			{
HXLINE( 302)				HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = bounds->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 302)					_this->_validate();
            				}
            			}
HXDLIN( 302)			Float _hx_tmp = bounds->zpp_inner->minx;
HXDLIN( 302)			{
HXLINE( 302)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = bounds->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 302)					_this1->_validate();
            				}
            			}
HXDLIN( 302)			Float _hx_tmp1 = bounds->zpp_inner->miny;
HXDLIN( 302)			HX_VARI_NAME(  ::nape::geom::Vec2,_this2,"_this") = bounds->zpp_inner->getmax();
HXDLIN( 302)			{
HXLINE( 302)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this2->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 302)					_this3->_validate();
            				}
            			}
HXDLIN( 302)			Float _hx_tmp2 = _this2->zpp_inner->x;
HXDLIN( 302)			HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = bounds->zpp_inner->getmax();
HXDLIN( 302)			{
HXLINE( 302)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this4->zpp_inner;
HXDLIN( 302)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 302)					_this5->_validate();
            				}
            			}
HXDLIN( 302)			::zpp_nape::geom::ZPP_MarchingSquares_obj::run(iso,_hx_tmp,_hx_tmp1,_hx_tmp2,_this4->zpp_inner->y,cellsize,quality,combine,ret);
            		}
            		else {
HXLINE( 305)			{
HXLINE( 305)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this6,"_this") = bounds->zpp_inner;
HXDLIN( 305)				if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 305)					_this6->_validate();
            				}
            			}
HXDLIN( 305)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this7,"_this") = bounds->zpp_inner;
HXDLIN( 305)			HX_VARI( Float,xp) = (_this7->maxx - _this7->minx);
HXDLIN( 305)			{
HXLINE( 305)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = subgrid->zpp_inner;
HXDLIN( 305)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 305)					_this8->_validate();
            				}
            			}
HXDLIN( 305)			HX_VARI_NAME( Float,xp1,"xp") = ((Float)xp / (Float)subgrid->zpp_inner->x);
HXLINE( 306)			{
HXLINE( 306)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this9,"_this") = bounds->zpp_inner;
HXDLIN( 306)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 306)					_this9->_validate();
            				}
            			}
HXDLIN( 306)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this10,"_this") = bounds->zpp_inner;
HXDLIN( 306)			HX_VARI( Float,yp) = (_this10->maxy - _this10->miny);
HXDLIN( 306)			{
HXLINE( 306)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = subgrid->zpp_inner;
HXDLIN( 306)				if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 306)					_this11->_validate();
            				}
            			}
HXDLIN( 306)			HX_VARI_NAME( Float,yp1,"yp") = ((Float)yp / (Float)subgrid->zpp_inner->y);
HXLINE( 307)			HX_VARI( int,xn) = ::Std_obj::_hx_int(xp1);
HXLINE( 308)			HX_VARI( int,yn) = ::Std_obj::_hx_int(yp1);
HXLINE( 309)			if ((xn != xp1)) {
HXLINE( 309)				xn = (xn + (int)1);
            			}
HXLINE( 310)			if ((yn != yp1)) {
HXLINE( 310)				yn = (yn + (int)1);
            			}
HXLINE( 311)			{
HXLINE( 311)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 311)				HX_VARI( int,_g) = xn;
HXDLIN( 311)				while((_g1 < _g)){
HXLINE( 311)					_g1 = (_g1 + (int)1);
HXDLIN( 311)					HX_VARI( int,x) = (_g1 - (int)1);
HXLINE( 312)					{
HXLINE( 312)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this12,"_this") = bounds->zpp_inner;
HXDLIN( 312)						if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 312)							_this12->_validate();
            						}
            					}
HXDLIN( 312)					HX_VARI( Float,x0) = bounds->zpp_inner->minx;
HXDLIN( 312)					{
HXLINE( 312)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = subgrid->zpp_inner;
HXDLIN( 312)						if (hx::IsNotNull( _this13->_validate )) {
HXLINE( 312)							_this13->_validate();
            						}
            					}
HXDLIN( 312)					HX_VARI_NAME( Float,x01,"x0") = (x0 + (subgrid->zpp_inner->x * x));
HXLINE( 313)					HX_VAR( Float,x1);
HXDLIN( 313)					if ((x == (xn - (int)1))) {
HXLINE( 313)						HX_VARI_NAME(  ::nape::geom::Vec2,_this14,"_this") = bounds->zpp_inner->getmax();
HXDLIN( 313)						{
HXLINE( 313)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this15,"_this") = _this14->zpp_inner;
HXDLIN( 313)							if (hx::IsNotNull( _this15->_validate )) {
HXLINE( 313)								_this15->_validate();
            							}
            						}
HXDLIN( 313)						x1 = _this14->zpp_inner->x;
            					}
            					else {
HXLINE( 313)						{
HXLINE( 313)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this16,"_this") = subgrid->zpp_inner;
HXDLIN( 313)							if (hx::IsNotNull( _this16->_validate )) {
HXLINE( 313)								_this16->_validate();
            							}
            						}
HXDLIN( 313)						x1 = (x01 + subgrid->zpp_inner->x);
            					}
HXLINE( 314)					{
HXLINE( 314)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 314)						HX_VARI( int,_g2) = yn;
HXDLIN( 314)						while((_g3 < _g2)){
HXLINE( 314)							_g3 = (_g3 + (int)1);
HXDLIN( 314)							HX_VARI( int,y) = (_g3 - (int)1);
HXLINE( 315)							{
HXLINE( 315)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this17,"_this") = bounds->zpp_inner;
HXDLIN( 315)								if (hx::IsNotNull( _this17->_validate )) {
HXLINE( 315)									_this17->_validate();
            								}
            							}
HXDLIN( 315)							HX_VARI( Float,y0) = bounds->zpp_inner->miny;
HXDLIN( 315)							{
HXLINE( 315)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this18,"_this") = subgrid->zpp_inner;
HXDLIN( 315)								if (hx::IsNotNull( _this18->_validate )) {
HXLINE( 315)									_this18->_validate();
            								}
            							}
HXDLIN( 315)							HX_VARI_NAME( Float,y01,"y0") = (y0 + (subgrid->zpp_inner->y * y));
HXLINE( 316)							HX_VAR( Float,y1);
HXDLIN( 316)							if ((y == (yn - (int)1))) {
HXLINE( 316)								HX_VARI_NAME(  ::nape::geom::Vec2,_this19,"_this") = bounds->zpp_inner->getmax();
HXDLIN( 316)								{
HXLINE( 316)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this20,"_this") = _this19->zpp_inner;
HXDLIN( 316)									if (hx::IsNotNull( _this20->_validate )) {
HXLINE( 316)										_this20->_validate();
            									}
            								}
HXDLIN( 316)								y1 = _this19->zpp_inner->y;
            							}
            							else {
HXLINE( 316)								{
HXLINE( 316)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this21,"_this") = subgrid->zpp_inner;
HXDLIN( 316)									if (hx::IsNotNull( _this21->_validate )) {
HXLINE( 316)										_this21->_validate();
            									}
            								}
HXDLIN( 316)								y1 = (y01 + subgrid->zpp_inner->y);
            							}
HXLINE( 317)							::zpp_nape::geom::ZPP_MarchingSquares_obj::run(iso,x01,y01,x1,y1,cellsize,quality,combine,ret);
            						}
            					}
            				}
            			}
            		}
HXLINE( 321)		if (cellsize->zpp_inner->weak) {
HXLINE( 325)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = cellsize->zpp_inner;
HXDLIN( 325)			cellsize->zpp_inner->outer = null();
HXDLIN( 325)			cellsize->zpp_inner = null();
HXDLIN( 325)			{
HXLINE( 325)				cellsize->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 325)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = cellsize;
            			}
HXDLIN( 325)			{
HXLINE( 325)				{
HXLINE( 325)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 325)						inner->outer->zpp_inner = null();
HXDLIN( 325)						inner->outer = null();
            					}
HXDLIN( 325)					inner->_isimmutable = null();
HXDLIN( 325)					inner->_validate = null();
HXDLIN( 325)					inner->_invalidate = null();
            				}
HXDLIN( 325)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 325)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 332)		if (hx::IsNotNull( subgrid )) {
HXLINE( 333)			if (subgrid->zpp_inner->weak) {
HXLINE( 337)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = subgrid->zpp_inner;
HXDLIN( 337)				subgrid->zpp_inner->outer = null();
HXDLIN( 337)				subgrid->zpp_inner = null();
HXDLIN( 337)				{
HXLINE( 337)					subgrid->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 337)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = subgrid;
            				}
HXDLIN( 337)				{
HXLINE( 337)					{
HXLINE( 337)						if (hx::IsNotNull( inner1->outer )) {
HXLINE( 337)							inner1->outer->zpp_inner = null();
HXDLIN( 337)							inner1->outer = null();
            						}
HXDLIN( 337)						inner1->_isimmutable = null();
HXDLIN( 337)						inner1->_validate = null();
HXDLIN( 337)						inner1->_invalidate = null();
            					}
HXDLIN( 337)					inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 337)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            				}
            			}
            		}
HXLINE( 345)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(MarchingSquares_obj,run,return )


MarchingSquares_obj::MarchingSquares_obj()
{
}

bool MarchingSquares_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MarchingSquares_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *MarchingSquares_obj_sStaticStorageInfo = 0;
#endif

static void MarchingSquares_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MarchingSquares_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MarchingSquares_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MarchingSquares_obj::__mClass,"__mClass");
};

#endif

hx::Class MarchingSquares_obj::__mClass;

static ::String MarchingSquares_obj_sStaticFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null())
};

void MarchingSquares_obj::__register()
{
	hx::Object *dummy = new MarchingSquares_obj;
	MarchingSquares_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.MarchingSquares","\x6b","\xda","\xaf","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MarchingSquares_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MarchingSquares_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MarchingSquares_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MarchingSquares_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MarchingSquares_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MarchingSquares_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MarchingSquares_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
