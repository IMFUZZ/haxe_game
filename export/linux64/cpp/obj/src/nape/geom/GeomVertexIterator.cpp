// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_GeomVertexIterator
#include <nape/geom/GeomVertexIterator.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVertexIterator
#include <zpp_nape/geom/ZPP_GeomVertexIterator.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bba1df91bdc9be32_188_new,"nape.geom.GeomVertexIterator","new",0x2010c04c,"nape.geom.GeomVertexIterator.new","nape/geom/GeomVertexIterator.hx",188,0x93c1d444)
HX_DEFINE_STACK_FRAME(_hx_pos_bba1df91bdc9be32_200_hasNext,"nape.geom.GeomVertexIterator","hasNext",0x6d37fb59,"nape.geom.GeomVertexIterator.hasNext","nape/geom/GeomVertexIterator.hx",200,0x93c1d444)
HX_DEFINE_STACK_FRAME(_hx_pos_bba1df91bdc9be32_237_next,"nape.geom.GeomVertexIterator","next",0xee978387,"nape.geom.GeomVertexIterator.next","nape/geom/GeomVertexIterator.hx",237,0x93c1d444)
namespace nape{
namespace geom{

void GeomVertexIterator_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bba1df91bdc9be32_188_new)
            	HX_STACK_THIS(this)
            	}

Dynamic GeomVertexIterator_obj::__CreateEmpty() { return new GeomVertexIterator_obj; }

void *GeomVertexIterator_obj::_hx_vtable = 0;

Dynamic GeomVertexIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GeomVertexIterator_obj > _hx_result = new GeomVertexIterator_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GeomVertexIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x182dfe92;
}

bool GeomVertexIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_bba1df91bdc9be32_200_hasNext)
            	HX_STACK_THIS(this)
HXLINE( 206)		HX_VAR( bool,ret);
HXDLIN( 206)		if (hx::IsEq( this->zpp_inner->ptr,this->zpp_inner->start )) {
HXLINE( 206)			ret = this->zpp_inner->first;
            		}
            		else {
HXLINE( 206)			ret = true;
            		}
HXLINE( 207)		this->zpp_inner->first = false;
HXLINE( 208)		if (!(ret)) {
HXLINE( 210)			HX_VARI(  ::zpp_nape::geom::ZPP_GeomVertexIterator,o) = this->zpp_inner;
HXLINE( 219)			{
HXLINE( 219)				o->outer->zpp_inner = null();
HXDLIN( 219)				o->ptr = (o->start = null());
            			}
HXLINE( 220)			o->next = ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool;
HXLINE( 221)			::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool = o;
            		}
HXLINE( 227)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomVertexIterator_obj,hasNext,return )

 ::nape::geom::Vec2 GeomVertexIterator_obj::next(){
            	HX_GC_STACKFRAME(&_hx_pos_bba1df91bdc9be32_237_next)
            	HX_STACK_THIS(this)
HXLINE( 243)		HX_VARI(  ::zpp_nape::geom::ZPP_GeomVert,_this) = this->zpp_inner->ptr;
HXDLIN( 243)		if (hx::IsNull( _this->wrap )) {
HXLINE( 243)			HX_VARI( Float,x) = _this->x;
HXDLIN( 243)			HX_VARI( Float,y) = _this->y;
HXDLIN( 243)			HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 243)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 243)				ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 243)				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 243)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 243)				ret->zpp_pool = null();
            			}
HXDLIN( 243)			if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 243)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 243)				{
HXLINE( 243)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 243)						ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 243)						ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 243)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 243)						ret1->next = null();
            					}
HXDLIN( 243)					ret1->weak = false;
            				}
HXDLIN( 243)				ret1->_immutable = false;
HXDLIN( 243)				{
HXLINE( 243)					ret1->x = x;
HXDLIN( 243)					ret1->y = y;
            				}
HXDLIN( 243)				ret->zpp_inner = ret1;
HXDLIN( 243)				ret->zpp_inner->outer = ret;
            			}
            			else {
HXLINE( 243)				bool _hx_tmp;
HXDLIN( 243)				{
HXLINE( 243)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 243)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 243)						_this1->_validate();
            					}
            				}
HXDLIN( 243)				if ((ret->zpp_inner->x == x)) {
HXLINE( 243)					{
HXLINE( 243)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 243)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 243)							_this2->_validate();
            						}
            					}
HXDLIN( 243)					_hx_tmp = (ret->zpp_inner->y == y);
            				}
            				else {
HXLINE( 243)					_hx_tmp = false;
            				}
HXDLIN( 243)				if (!(_hx_tmp)) {
HXLINE( 243)					{
HXLINE( 243)						ret->zpp_inner->x = x;
HXDLIN( 243)						ret->zpp_inner->y = y;
            					}
HXDLIN( 243)					{
HXLINE( 243)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN( 243)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 243)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN( 243)			ret->zpp_inner->weak = false;
HXDLIN( 243)			_this->wrap = ret;
HXDLIN( 243)			_this->wrap->zpp_inner->_inuse = true;
HXDLIN( 243)			_this->wrap->zpp_inner->_invalidate = _this->modwrap_dyn();
HXDLIN( 243)			_this->wrap->zpp_inner->_validate = _this->getwrap_dyn();
            		}
HXLINE( 244)		 ::zpp_nape::geom::ZPP_GeomVert _hx_tmp1;
HXDLIN( 244)		if (this->zpp_inner->forward) {
HXLINE( 244)			_hx_tmp1 = this->zpp_inner->ptr->next;
            		}
            		else {
HXLINE( 244)			_hx_tmp1 = this->zpp_inner->ptr->prev;
            		}
HXDLIN( 244)		this->zpp_inner->ptr = _hx_tmp1;
HXLINE( 245)		return _this->wrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GeomVertexIterator_obj,next,return )


hx::ObjectPtr< GeomVertexIterator_obj > GeomVertexIterator_obj::__new() {
	hx::ObjectPtr< GeomVertexIterator_obj > __this = new GeomVertexIterator_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GeomVertexIterator_obj > GeomVertexIterator_obj::__alloc(hx::Ctx *_hx_ctx) {
	GeomVertexIterator_obj *__this = (GeomVertexIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GeomVertexIterator_obj), true, "nape.geom.GeomVertexIterator"));
	*(void **)__this = GeomVertexIterator_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GeomVertexIterator_obj::GeomVertexIterator_obj()
{
}

void GeomVertexIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GeomVertexIterator);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void GeomVertexIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val GeomVertexIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GeomVertexIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_GeomVertexIterator >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GeomVertexIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GeomVertexIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_GeomVertexIterator*/ ,(int)offsetof(GeomVertexIterator_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GeomVertexIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String GeomVertexIterator_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void GeomVertexIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GeomVertexIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GeomVertexIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GeomVertexIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class GeomVertexIterator_obj::__mClass;

void GeomVertexIterator_obj::__register()
{
	hx::Object *dummy = new GeomVertexIterator_obj;
	GeomVertexIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.GeomVertexIterator","\x5a","\xea","\x07","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GeomVertexIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GeomVertexIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GeomVertexIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GeomVertexIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GeomVertexIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GeomVertexIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
