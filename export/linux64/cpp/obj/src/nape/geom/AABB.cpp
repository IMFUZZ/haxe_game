// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_182_new,"nape.geom.AABB","new",0xaccd397e,"nape.geom.AABB.new","nape/geom/AABB.hx",182,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_226_copy,"nape.geom.AABB","copy",0x7f874cd7,"nape.geom.AABB.copy","nape/geom/AABB.hx",226,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_261_toRect,"nape.geom.AABB","toRect",0xa1c355e1,"nape.geom.AABB.toRect","nape/geom/AABB.hx",261,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_281_get_min,"nape.geom.AABB","get_min",0x5caf2a47,"nape.geom.AABB.get_min","nape/geom/AABB.hx",281,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_283_set_min,"nape.geom.AABB","set_min",0x4fb0bb53,"nape.geom.AABB.set_min","nape/geom/AABB.hx",283,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_330_get_max,"nape.geom.AABB","get_max",0x5caf2359,"nape.geom.AABB.get_max","nape/geom/AABB.hx",330,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_332_set_max,"nape.geom.AABB","set_max",0x4fb0b465,"nape.geom.AABB.set_max","nape/geom/AABB.hx",332,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_370_get_x,"nape.geom.AABB","get_x",0x5ddd11ed,"nape.geom.AABB.get_x","nape/geom/AABB.hx",370,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_374_set_x,"nape.geom.AABB","set_x",0x46ac07f9,"nape.geom.AABB.set_x","nape/geom/AABB.hx",374,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_400_get_y,"nape.geom.AABB","get_y",0x5ddd11ee,"nape.geom.AABB.get_y","nape/geom/AABB.hx",400,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_404_set_y,"nape.geom.AABB","set_y",0x46ac07fa,"nape.geom.AABB.set_y","nape/geom/AABB.hx",404,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_430_get_width,"nape.geom.AABB","get_width",0x087e25fb,"nape.geom.AABB.get_width","nape/geom/AABB.hx",430,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_434_set_width,"nape.geom.AABB","set_width",0xebcf1207,"nape.geom.AABB.set_width","nape/geom/AABB.hx",434,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_464_get_height,"nape.geom.AABB","get_height",0x1c328e52,"nape.geom.AABB.get_height","nape/geom/AABB.hx",464,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_468_set_height,"nape.geom.AABB","set_height",0x1fb02cc6,"nape.geom.AABB.set_height","nape/geom/AABB.hx",468,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_493_toString,"nape.geom.AABB","toString",0x2ced9ace,"nape.geom.AABB.toString","nape/geom/AABB.hx",493,0x3e49ef52)
HX_DEFINE_STACK_FRAME(_hx_pos_841f2e948d01b503_249_fromRect,"nape.geom.AABB","fromRect",0x9df1e5d0,"nape.geom.AABB.fromRect","nape/geom/AABB.hx",249,0x3e49ef52)
namespace nape{
namespace geom{

void AABB_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float width = __o_width.Default(0);
Float height = __o_height.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_841f2e948d01b503_182_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 186)		this->zpp_inner = null();
HXLINE( 214)		HX_VAR(  ::zpp_nape::geom::ZPP_AABB,ret);
HXDLIN( 214)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 214)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 214)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 214)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 214)			ret->next = null();
            		}
HXDLIN( 214)		{
HXLINE( 214)			ret->minx = x;
HXDLIN( 214)			ret->miny = y;
            		}
HXDLIN( 214)		{
HXLINE( 214)			ret->maxx = (x + width);
HXDLIN( 214)			ret->maxy = (y + height);
            		}
HXDLIN( 214)		this->zpp_inner = ret;
HXLINE( 215)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic AABB_obj::__CreateEmpty() { return new AABB_obj; }

void *AABB_obj::_hx_vtable = 0;

Dynamic AABB_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AABB_obj > _hx_result = new AABB_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool AABB_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x221d1df0;
}

 ::nape::geom::AABB AABB_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_841f2e948d01b503_226_copy)
            	HX_STACK_THIS(this)
HXLINE( 227)		{
HXLINE( 227)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 227)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 227)				_this->_validate();
            			}
            		}
HXLINE( 228)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 228)		HX_VAR(  ::zpp_nape::geom::ZPP_AABB,ret);
HXDLIN( 228)		if (hx::IsNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )) {
HXLINE( 228)			ret =  ::zpp_nape::geom::ZPP_AABB_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 228)			ret = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
HXDLIN( 228)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = ret->next;
HXDLIN( 228)			ret->next = null();
            		}
HXDLIN( 228)		{
HXLINE( 228)			ret->minx = _this1->minx;
HXDLIN( 228)			ret->miny = _this1->miny;
            		}
HXDLIN( 228)		{
HXLINE( 228)			ret->maxx = _this1->maxx;
HXDLIN( 228)			ret->maxy = _this1->maxy;
            		}
HXDLIN( 228)		return ret->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,copy,return )

 ::openfl::_legacy::geom::Rectangle AABB_obj::toRect(){
            	HX_GC_STACKFRAME(&_hx_pos_841f2e948d01b503_261_toRect)
            	HX_STACK_THIS(this)
HXLINE( 261)		{
HXLINE( 261)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 261)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 261)				_this->_validate();
            			}
            		}
HXDLIN( 261)		Float _hx_tmp = this->zpp_inner->minx;
HXDLIN( 261)		{
HXLINE( 261)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 261)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 261)				_this1->_validate();
            			}
            		}
HXDLIN( 261)		Float _hx_tmp1 = this->zpp_inner->miny;
HXDLIN( 261)		{
HXLINE( 261)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = this->zpp_inner;
HXDLIN( 261)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 261)				_this2->_validate();
            			}
            		}
HXDLIN( 261)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = this->zpp_inner;
HXDLIN( 261)		Float _hx_tmp2 = (_this3->maxx - _this3->minx);
HXDLIN( 261)		{
HXLINE( 261)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = this->zpp_inner;
HXDLIN( 261)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 261)				_this4->_validate();
            			}
            		}
HXDLIN( 261)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = this->zpp_inner;
HXDLIN( 261)		return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,(_this5->maxy - _this5->miny));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,toRect,return )

 ::nape::geom::Vec2 AABB_obj::get_min(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_281_get_min)
            	HX_STACK_THIS(this)
HXLINE( 281)		return this->zpp_inner->getmin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_min,return )

 ::nape::geom::Vec2 AABB_obj::set_min( ::nape::geom::Vec2 min){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_283_set_min)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(min,"min")
HXLINE( 309)		{
HXLINE( 309)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->getmin();
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = min->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 309)					_this1->_validate();
            				}
            			}
HXDLIN( 309)			HX_VARI( Float,x) = min->zpp_inner->x;
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = min->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 309)					_this2->_validate();
            				}
            			}
HXDLIN( 309)			HX_VARI( Float,y) = min->zpp_inner->y;
HXDLIN( 309)			bool _hx_tmp;
HXDLIN( 309)			{
HXLINE( 309)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 309)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 309)					_this3->_validate();
            				}
            			}
HXDLIN( 309)			if ((_this->zpp_inner->x == x)) {
HXLINE( 309)				{
HXLINE( 309)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 309)						_this4->_validate();
            					}
            				}
HXDLIN( 309)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 309)				_hx_tmp = false;
            			}
HXDLIN( 309)			if (!(_hx_tmp)) {
HXLINE( 309)				{
HXLINE( 309)					_this->zpp_inner->x = x;
HXDLIN( 309)					_this->zpp_inner->y = y;
            				}
HXDLIN( 309)				{
HXLINE( 309)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 309)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 309)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 309)			if (min->zpp_inner->weak) {
HXLINE( 309)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = min->zpp_inner;
HXDLIN( 309)				min->zpp_inner->outer = null();
HXDLIN( 309)				min->zpp_inner = null();
HXDLIN( 309)				{
HXLINE( 309)					min->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 309)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = min;
            				}
HXDLIN( 309)				{
HXLINE( 309)					{
HXLINE( 309)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 309)							inner->outer->zpp_inner = null();
HXDLIN( 309)							inner->outer = null();
            						}
HXDLIN( 309)						inner->_isimmutable = null();
HXDLIN( 309)						inner->_validate = null();
HXDLIN( 309)						inner->_invalidate = null();
            					}
HXDLIN( 309)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 309)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 311)		return this->zpp_inner->getmin();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_min,return )

 ::nape::geom::Vec2 AABB_obj::get_max(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_330_get_max)
            	HX_STACK_THIS(this)
HXLINE( 330)		return this->zpp_inner->getmax();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_max,return )

 ::nape::geom::Vec2 AABB_obj::set_max( ::nape::geom::Vec2 max){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_332_set_max)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(max,"max")
HXLINE( 358)		{
HXLINE( 358)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->getmax();
HXDLIN( 358)			{
HXLINE( 358)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = max->zpp_inner;
HXDLIN( 358)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 358)					_this1->_validate();
            				}
            			}
HXDLIN( 358)			HX_VARI( Float,x) = max->zpp_inner->x;
HXDLIN( 358)			{
HXLINE( 358)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = max->zpp_inner;
HXDLIN( 358)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 358)					_this2->_validate();
            				}
            			}
HXDLIN( 358)			HX_VARI( Float,y) = max->zpp_inner->y;
HXDLIN( 358)			bool _hx_tmp;
HXDLIN( 358)			{
HXLINE( 358)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 358)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 358)					_this3->_validate();
            				}
            			}
HXDLIN( 358)			if ((_this->zpp_inner->x == x)) {
HXLINE( 358)				{
HXLINE( 358)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 358)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 358)						_this4->_validate();
            					}
            				}
HXDLIN( 358)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 358)				_hx_tmp = false;
            			}
HXDLIN( 358)			if (!(_hx_tmp)) {
HXLINE( 358)				{
HXLINE( 358)					_this->zpp_inner->x = x;
HXDLIN( 358)					_this->zpp_inner->y = y;
            				}
HXDLIN( 358)				{
HXLINE( 358)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 358)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 358)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 358)			if (max->zpp_inner->weak) {
HXLINE( 358)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = max->zpp_inner;
HXDLIN( 358)				max->zpp_inner->outer = null();
HXDLIN( 358)				max->zpp_inner = null();
HXDLIN( 358)				{
HXLINE( 358)					max->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 358)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = max;
            				}
HXDLIN( 358)				{
HXLINE( 358)					{
HXLINE( 358)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 358)							inner->outer->zpp_inner = null();
HXDLIN( 358)							inner->outer = null();
            						}
HXDLIN( 358)						inner->_isimmutable = null();
HXDLIN( 358)						inner->_validate = null();
HXDLIN( 358)						inner->_invalidate = null();
            					}
HXDLIN( 358)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 358)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 360)		return this->zpp_inner->getmax();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_max,return )

Float AABB_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_370_get_x)
            	HX_STACK_THIS(this)
HXLINE( 371)		{
HXLINE( 371)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 371)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 371)				_this->_validate();
            			}
            		}
HXLINE( 372)		return this->zpp_inner->minx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_x,return )

Float AABB_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_374_set_x)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 381)		{
HXLINE( 381)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 381)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 381)				_this->_validate();
            			}
            		}
HXDLIN( 381)		if ((this->zpp_inner->minx != x)) {
HXLINE( 385)			 ::zpp_nape::geom::ZPP_AABB _hx_tmp = this->zpp_inner;
HXDLIN( 385)			_hx_tmp->maxx = (_hx_tmp->maxx + (x - this->zpp_inner->minx));
HXLINE( 386)			this->zpp_inner->minx = x;
HXLINE( 387)			{
HXLINE( 387)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 387)				if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 387)					_this1->_invalidate(_this1);
            				}
            			}
            		}
HXLINE( 390)		{
HXLINE( 390)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = this->zpp_inner;
HXDLIN( 390)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 390)				_this2->_validate();
            			}
            		}
HXDLIN( 390)		return this->zpp_inner->minx;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_x,return )

Float AABB_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_400_get_y)
            	HX_STACK_THIS(this)
HXLINE( 401)		{
HXLINE( 401)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 401)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 401)				_this->_validate();
            			}
            		}
HXLINE( 402)		return this->zpp_inner->miny;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_y,return )

Float AABB_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_404_set_y)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(y,"y")
HXLINE( 411)		{
HXLINE( 411)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 411)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 411)				_this->_validate();
            			}
            		}
HXDLIN( 411)		if ((this->zpp_inner->miny != y)) {
HXLINE( 415)			 ::zpp_nape::geom::ZPP_AABB _hx_tmp = this->zpp_inner;
HXDLIN( 415)			_hx_tmp->maxy = (_hx_tmp->maxy + (y - this->zpp_inner->miny));
HXLINE( 416)			this->zpp_inner->miny = y;
HXLINE( 417)			{
HXLINE( 417)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 417)				if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 417)					_this1->_invalidate(_this1);
            				}
            			}
            		}
HXLINE( 420)		{
HXLINE( 420)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = this->zpp_inner;
HXDLIN( 420)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 420)				_this2->_validate();
            			}
            		}
HXDLIN( 420)		return this->zpp_inner->miny;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_y,return )

Float AABB_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_430_get_width)
            	HX_STACK_THIS(this)
HXLINE( 431)		{
HXLINE( 431)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 431)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 431)				_this->_validate();
            			}
            		}
HXLINE( 432)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 432)		return (_this1->maxx - _this1->minx);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_width,return )

Float AABB_obj::set_width(Float width){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_434_set_width)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
HXLINE( 441)		{
HXLINE( 441)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 441)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 441)				_this->_validate();
            			}
            		}
HXDLIN( 441)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 441)		if (((_this1->maxx - _this1->minx) != width)) {
HXLINE( 450)			{
HXLINE( 450)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = this->zpp_inner;
HXDLIN( 450)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 450)					_this2->_validate();
            				}
            			}
HXDLIN( 450)			this->zpp_inner->maxx = (this->zpp_inner->minx + width);
HXLINE( 451)			{
HXLINE( 451)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = this->zpp_inner;
HXDLIN( 451)				if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 451)					_this3->_invalidate(_this3);
            				}
            			}
            		}
HXLINE( 454)		{
HXLINE( 454)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = this->zpp_inner;
HXDLIN( 454)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 454)				_this4->_validate();
            			}
            		}
HXDLIN( 454)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = this->zpp_inner;
HXDLIN( 454)		return (_this5->maxx - _this5->minx);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_width,return )

Float AABB_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_464_get_height)
            	HX_STACK_THIS(this)
HXLINE( 465)		{
HXLINE( 465)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 465)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 465)				_this->_validate();
            			}
            		}
HXLINE( 466)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 466)		return (_this1->maxy - _this1->miny);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,get_height,return )

Float AABB_obj::set_height(Float height){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_468_set_height)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(height,"height")
HXLINE( 475)		{
HXLINE( 475)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 475)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 475)				_this->_validate();
            			}
            		}
HXDLIN( 475)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this1,"_this") = this->zpp_inner;
HXDLIN( 475)		if (((_this1->maxy - _this1->miny) != height)) {
HXLINE( 484)			{
HXLINE( 484)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this2,"_this") = this->zpp_inner;
HXDLIN( 484)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 484)					_this2->_validate();
            				}
            			}
HXDLIN( 484)			this->zpp_inner->maxy = (this->zpp_inner->miny + height);
HXLINE( 485)			{
HXLINE( 485)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this3,"_this") = this->zpp_inner;
HXDLIN( 485)				if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 485)					_this3->_invalidate(_this3);
            				}
            			}
            		}
HXLINE( 488)		{
HXLINE( 488)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this4,"_this") = this->zpp_inner;
HXDLIN( 488)			if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 488)				_this4->_validate();
            			}
            		}
HXDLIN( 488)		HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,_this5,"_this") = this->zpp_inner;
HXDLIN( 488)		return (_this5->maxy - _this5->miny);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,set_height,return )

::String AABB_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_841f2e948d01b503_493_toString)
            	HX_STACK_THIS(this)
HXLINE( 494)		{
HXLINE( 494)			HX_VARI(  ::zpp_nape::geom::ZPP_AABB,_this) = this->zpp_inner;
HXDLIN( 494)			if (hx::IsNotNull( _this->_validate )) {
HXLINE( 494)				_this->_validate();
            			}
            		}
HXLINE( 495)		return this->zpp_inner->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AABB_obj,toString,return )

 ::nape::geom::AABB AABB_obj::fromRect( ::openfl::_legacy::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_841f2e948d01b503_249_fromRect)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 249)		return  ::nape::geom::AABB_obj::__alloc( HX_CTX ,rect->x,rect->y,rect->width,rect->height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AABB_obj,fromRect,return )


hx::ObjectPtr< AABB_obj > AABB_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	hx::ObjectPtr< AABB_obj > __this = new AABB_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

hx::ObjectPtr< AABB_obj > AABB_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	AABB_obj *__this = (AABB_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AABB_obj), true, "nape.geom.AABB"));
	*(void **)__this = AABB_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

AABB_obj::AABB_obj()
{
}

void AABB_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AABB);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void AABB_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val AABB_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_x()); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_y()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_min()); }
		if (HX_FIELD_EQ(inName,"max") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_max()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_width()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toRect") ) { return hx::Val( toRect_dyn()); }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_height()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_min") ) { return hx::Val( get_min_dyn()); }
		if (HX_FIELD_EQ(inName,"set_min") ) { return hx::Val( set_min_dyn()); }
		if (HX_FIELD_EQ(inName,"get_max") ) { return hx::Val( get_max_dyn()); }
		if (HX_FIELD_EQ(inName,"set_max") ) { return hx::Val( set_max_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool AABB_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromRect") ) { outValue = fromRect_dyn(); return true; }
	}
	return false;
}

hx::Val AABB_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_min(inValue) ); }
		if (HX_FIELD_EQ(inName,"max") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_max(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_AABB >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AABB_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("min","\x92","\x11","\x53","\x00"));
	outFields->push(HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AABB_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_AABB*/ ,(int)offsetof(AABB_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AABB_obj_sStaticStorageInfo = 0;
#endif

static ::String AABB_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("toRect","\x3f","\xb8","\x60","\x81"),
	HX_HCSTRING("get_min","\x29","\xda","\xc7","\x26"),
	HX_HCSTRING("set_min","\x35","\x6b","\xc9","\x19"),
	HX_HCSTRING("get_max","\x3b","\xd3","\xc7","\x26"),
	HX_HCSTRING("set_max","\x47","\x64","\xc9","\x19"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void AABB_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AABB_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AABB_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AABB_obj::__mClass,"__mClass");
};

#endif

hx::Class AABB_obj::__mClass;

static ::String AABB_obj_sStaticFields[] = {
	HX_HCSTRING("fromRect","\xae","\x1b","\x73","\xa9"),
	::String(null())
};

void AABB_obj::__register()
{
	hx::Object *dummy = new AABB_obj;
	AABB_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.AABB","\x8c","\x62","\x9f","\xf1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AABB_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AABB_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AABB_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AABB_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AABB_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AABB_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AABB_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AABB_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
