// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_MatMN
#include <nape/geom/MatMN.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MatMN
#include <zpp_nape/geom/ZPP_MatMN.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_179_new,"nape.geom.MatMN","new",0x580e1be7,"nape.geom.MatMN.new","nape/geom/MatMN.hx",179,0x8baed9c9)
HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_190_get_rows,"nape.geom.MatMN","get_rows",0xefad3bbb,"nape.geom.MatMN.get_rows","nape/geom/MatMN.hx",190,0x8baed9c9)
HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_198_get_cols,"nape.geom.MatMN","get_cols",0xe5c2fed5,"nape.geom.MatMN.get_cols","nape/geom/MatMN.hx",198,0x8baed9c9)
HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_215_x,"nape.geom.MatMN","x",0x4f2a8c3f,"nape.geom.MatMN.x","nape/geom/MatMN.hx",215,0x8baed9c9)
HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_234_setx,"nape.geom.MatMN","setx",0xb7985d2f,"nape.geom.MatMN.setx","nape/geom/MatMN.hx",234,0x8baed9c9)
HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_258_toString,"nape.geom.MatMN","toString",0x5cb25bc5,"nape.geom.MatMN.toString","nape/geom/MatMN.hx",258,0x8baed9c9)
HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_274_transpose,"nape.geom.MatMN","transpose",0xe3057b40,"nape.geom.MatMN.transpose","nape/geom/MatMN.hx",274,0x8baed9c9)
HX_DEFINE_STACK_FRAME(_hx_pos_e4aae68bce5f9bdc_294_mul,"nape.geom.MatMN","mul",0x580d678b,"nape.geom.MatMN.mul","nape/geom/MatMN.hx",294,0x8baed9c9)
namespace nape{
namespace geom{

void MatMN_obj::__construct(int rows,int cols){
            	HX_GC_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_179_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rows,"rows")
            	HX_STACK_ARG(cols,"cols")
HXLINE( 183)		this->zpp_inner = null();
HXLINE( 252)		this->zpp_inner =  ::zpp_nape::geom::ZPP_MatMN_obj::__alloc( HX_CTX ,rows,cols);
HXLINE( 253)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic MatMN_obj::__CreateEmpty() { return new MatMN_obj; }

void *MatMN_obj::_hx_vtable = 0;

Dynamic MatMN_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MatMN_obj > _hx_result = new MatMN_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MatMN_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x285ceb3d;
}

int MatMN_obj::get_rows(){
            	HX_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_190_get_rows)
            	HX_STACK_THIS(this)
HXLINE( 190)		return this->zpp_inner->m;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MatMN_obj,get_rows,return )

int MatMN_obj::get_cols(){
            	HX_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_198_get_cols)
            	HX_STACK_THIS(this)
HXLINE( 198)		return this->zpp_inner->n;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MatMN_obj,get_cols,return )

Float MatMN_obj::x(int row,int col){
            	HX_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_215_x)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(col,"col")
HXLINE( 215)		return this->zpp_inner->x->__get(((row * this->zpp_inner->n) + col));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MatMN_obj,x,return )

Float MatMN_obj::setx(int row,int col,Float x){
            	HX_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_234_setx)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(col,"col")
            	HX_STACK_ARG(x,"x")
HXLINE( 234)		return (this->zpp_inner->x[((row * this->zpp_inner->n) + col)] = x);
            	}


HX_DEFINE_DYNAMIC_FUNC3(MatMN_obj,setx,return )

::String MatMN_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_258_toString)
            	HX_STACK_THIS(this)
HXLINE( 259)		HX_VARI( ::String,ret) = HX_("{ ",45,6b,00,00);
HXLINE( 260)		HX_VARI( bool,fst) = true;
HXLINE( 261)		{
HXLINE( 261)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 261)			HX_VARI( int,_g) = this->zpp_inner->m;
HXDLIN( 261)			while((_g1 < _g)){
HXLINE( 261)				_g1 = (_g1 + (int)1);
HXDLIN( 261)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 262)				if (!(fst)) {
HXLINE( 262)					ret = (ret + HX_("; ",85,33,00,00));
            				}
HXLINE( 263)				fst = false;
HXLINE( 264)				{
HXLINE( 264)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 264)					HX_VARI( int,_g2) = this->zpp_inner->n;
HXDLIN( 264)					while((_g3 < _g2)){
HXLINE( 264)						_g3 = (_g3 + (int)1);
HXDLIN( 264)						ret = (ret + (this->zpp_inner->x->__get(((i * this->zpp_inner->n) + (_g3 - (int)1))) + HX_(" ",20,00,00,00)));
            					}
            				}
            			}
            		}
HXLINE( 266)		ret = (ret + HX_("}",7d,00,00,00));
HXLINE( 267)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MatMN_obj,toString,return )

 ::nape::geom::MatMN MatMN_obj::transpose(){
            	HX_GC_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_274_transpose)
            	HX_STACK_THIS(this)
HXLINE( 275)		HX_VARI(  ::nape::geom::MatMN,ret) =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,this->zpp_inner->n,this->zpp_inner->m);
HXLINE( 276)		{
HXLINE( 276)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 276)			HX_VARI( int,_g) = this->zpp_inner->m;
HXDLIN( 276)			while((_g1 < _g)){
HXLINE( 276)				_g1 = (_g1 + (int)1);
HXDLIN( 276)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 277)				{
HXLINE( 277)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 277)					HX_VARI( int,_g2) = this->zpp_inner->n;
HXDLIN( 277)					while((_g3 < _g2)){
HXLINE( 277)						_g3 = (_g3 + (int)1);
HXDLIN( 277)						HX_VARI( int,j) = (_g3 - (int)1);
HXDLIN( 277)						ret->zpp_inner->x[((j * ret->zpp_inner->n) + i)] = this->zpp_inner->x->__get(((i * this->zpp_inner->n) + j));
            					}
            				}
            			}
            		}
HXLINE( 279)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MatMN_obj,transpose,return )

 ::nape::geom::MatMN MatMN_obj::mul( ::nape::geom::MatMN matrix){
            	HX_GC_STACKFRAME(&_hx_pos_e4aae68bce5f9bdc_294_mul)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 301)		HX_VARI(  ::nape::geom::MatMN,ret) =  ::nape::geom::MatMN_obj::__alloc( HX_CTX ,this->zpp_inner->m,matrix->zpp_inner->n);
HXLINE( 302)		{
HXLINE( 302)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 302)			HX_VARI( int,_g) = this->zpp_inner->m;
HXDLIN( 302)			while((_g1 < _g)){
HXLINE( 302)				_g1 = (_g1 + (int)1);
HXDLIN( 302)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 303)				{
HXLINE( 303)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 303)					HX_VARI( int,_g2) = matrix->zpp_inner->n;
HXDLIN( 303)					while((_g3 < _g2)){
HXLINE( 303)						_g3 = (_g3 + (int)1);
HXDLIN( 303)						HX_VARI( int,j) = (_g3 - (int)1);
HXLINE( 304)						HX_VARI( Float,v) = ((Float)0.0);
HXLINE( 305)						{
HXLINE( 305)							HX_VARI( int,_g5) = (int)0;
HXDLIN( 305)							HX_VARI( int,_g4) = this->zpp_inner->n;
HXDLIN( 305)							while((_g5 < _g4)){
HXLINE( 305)								_g5 = (_g5 + (int)1);
HXDLIN( 305)								HX_VARI( int,k) = (_g5 - (int)1);
HXDLIN( 305)								v = (v + (this->zpp_inner->x->__get(((i * this->zpp_inner->n) + k)) * matrix->zpp_inner->x->__get(((k * matrix->zpp_inner->n) + j))));
            							}
            						}
HXLINE( 306)						ret->zpp_inner->x[((i * ret->zpp_inner->n) + j)] = v;
            					}
            				}
            			}
            		}
HXLINE( 309)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MatMN_obj,mul,return )


hx::ObjectPtr< MatMN_obj > MatMN_obj::__new(int rows,int cols) {
	hx::ObjectPtr< MatMN_obj > __this = new MatMN_obj();
	__this->__construct(rows,cols);
	return __this;
}

hx::ObjectPtr< MatMN_obj > MatMN_obj::__alloc(hx::Ctx *_hx_ctx,int rows,int cols) {
	MatMN_obj *__this = (MatMN_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MatMN_obj), true, "nape.geom.MatMN"));
	*(void **)__this = MatMN_obj::_hx_vtable;
	__this->__construct(rows,cols);
	return __this;
}

MatMN_obj::MatMN_obj()
{
}

void MatMN_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MatMN);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void MatMN_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val MatMN_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mul") ) { return hx::Val( mul_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rows") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_rows()); }
		if (HX_FIELD_EQ(inName,"cols") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_cols()); }
		if (HX_FIELD_EQ(inName,"setx") ) { return hx::Val( setx_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_rows") ) { return hx::Val( get_rows_dyn()); }
		if (HX_FIELD_EQ(inName,"get_cols") ) { return hx::Val( get_cols_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MatMN_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_MatMN >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MatMN_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("rows","\x19","\xf5","\xae","\x4b"));
	outFields->push(HX_HCSTRING("cols","\x33","\xb8","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MatMN_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_MatMN*/ ,(int)offsetof(MatMN_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MatMN_obj_sStaticStorageInfo = 0;
#endif

static ::String MatMN_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_rows","\xa2","\xb0","\x69","\xcb"),
	HX_HCSTRING("get_cols","\xbc","\x73","\x7f","\xc1"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("setx","\x96","\x92","\x50","\x4c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("mul","\x04","\x1c","\x53","\x00"),
	::String(null()) };

static void MatMN_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MatMN_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MatMN_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MatMN_obj::__mClass,"__mClass");
};

#endif

hx::Class MatMN_obj::__mClass;

void MatMN_obj::__register()
{
	hx::Object *dummy = new MatMN_obj;
	MatMN_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.MatMN","\x75","\x9c","\xf2","\x77");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MatMN_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MatMN_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MatMN_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MatMN_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MatMN_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MatMN_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
