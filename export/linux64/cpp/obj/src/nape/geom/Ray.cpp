// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_Ray
#include <nape/geom/Ray.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_177_new,"nape.geom.Ray","new",0xebb19f50,"nape.geom.Ray.new","nape/geom/Ray.hx",177,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_195_get_userData,"nape.geom.Ray","get_userData",0x2d8b1d2e,"nape.geom.Ray.get_userData","nape/geom/Ray.hx",195,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_210_get_origin,"nape.geom.Ray","get_origin",0x5ceb78bf,"nape.geom.Ray.get_origin","nape/geom/Ray.hx",210,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_212_set_origin,"nape.geom.Ray","set_origin",0x60691733,"nape.geom.Ray.set_origin","nape/geom/Ray.hx",212,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_240_get_direction,"nape.geom.Ray","get_direction",0x3e141106,"nape.geom.Ray.get_direction","nape/geom/Ray.hx",240,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_242_set_direction,"nape.geom.Ray","set_direction",0x8319f312,"nape.geom.Ray.set_direction","nape/geom/Ray.hx",242,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_273_get_maxDistance,"nape.geom.Ray","get_maxDistance",0xeef1cc80,"nape.geom.Ray.get_maxDistance","nape/geom/Ray.hx",273,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_275_set_maxDistance,"nape.geom.Ray","set_maxDistance",0xeabd498c,"nape.geom.Ray.set_maxDistance","nape/geom/Ray.hx",275,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_296_aabb,"nape.geom.Ray","aabb",0x471ee5b0,"nape.geom.Ray.aabb","nape/geom/Ray.hx",296,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_313_at,"nape.geom.Ray","at",0x7f55b403,"nape.geom.Ray.at","nape/geom/Ray.hx",313,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_350_copy,"nape.geom.Ray","copy",0x487bfec5,"nape.geom.Ray.copy","nape/geom/Ray.hx",350,0xeaaa9e80)
HX_DEFINE_STACK_FRAME(_hx_pos_4f8965e3d8a05fef_370_fromSegment,"nape.geom.Ray","fromSegment",0x543d7259,"nape.geom.Ray.fromSegment","nape/geom/Ray.hx",370,0xeaaa9e80)
namespace nape{
namespace geom{

void Ray_obj::__construct( ::nape::geom::Vec2 origin, ::nape::geom::Vec2 direction){
            	HX_GC_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_177_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(origin,"origin")
            	HX_STACK_ARG(direction,"direction")
HXLINE( 181)		this->zpp_inner = null();
HXLINE( 338)		this->zpp_inner =  ::zpp_nape::geom::ZPP_Ray_obj::__alloc( HX_CTX );
HXLINE( 339)		{
HXLINE( 339)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->origin;
HXDLIN( 339)			{
HXLINE( 339)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = origin->zpp_inner;
HXDLIN( 339)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 339)					_this1->_validate();
            				}
            			}
HXDLIN( 339)			HX_VARI( Float,x) = origin->zpp_inner->x;
HXDLIN( 339)			{
HXLINE( 339)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = origin->zpp_inner;
HXDLIN( 339)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 339)					_this2->_validate();
            				}
            			}
HXDLIN( 339)			HX_VARI( Float,y) = origin->zpp_inner->y;
HXDLIN( 339)			bool _hx_tmp;
HXDLIN( 339)			{
HXLINE( 339)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 339)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 339)					_this3->_validate();
            				}
            			}
HXDLIN( 339)			if ((_this->zpp_inner->x == x)) {
HXLINE( 339)				{
HXLINE( 339)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 339)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 339)						_this4->_validate();
            					}
            				}
HXDLIN( 339)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 339)				_hx_tmp = false;
            			}
HXDLIN( 339)			if (!(_hx_tmp)) {
HXLINE( 339)				{
HXLINE( 339)					_this->zpp_inner->x = x;
HXDLIN( 339)					_this->zpp_inner->y = y;
            				}
HXDLIN( 339)				{
HXLINE( 339)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 339)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 339)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 339)			if (origin->zpp_inner->weak) {
HXLINE( 339)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = origin->zpp_inner;
HXDLIN( 339)				origin->zpp_inner->outer = null();
HXDLIN( 339)				origin->zpp_inner = null();
HXDLIN( 339)				{
HXLINE( 339)					origin->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 339)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = origin;
            				}
HXDLIN( 339)				{
HXLINE( 339)					{
HXLINE( 339)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 339)							inner->outer->zpp_inner = null();
HXDLIN( 339)							inner->outer = null();
            						}
HXDLIN( 339)						inner->_isimmutable = null();
HXDLIN( 339)						inner->_validate = null();
HXDLIN( 339)						inner->_invalidate = null();
            					}
HXDLIN( 339)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 339)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 340)		{
HXLINE( 340)			{
HXLINE( 340)				HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = this->zpp_inner->direction;
HXDLIN( 340)				{
HXLINE( 340)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = direction->zpp_inner;
HXDLIN( 340)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 340)						_this7->_validate();
            					}
            				}
HXDLIN( 340)				HX_VARI_NAME( Float,x1,"x") = direction->zpp_inner->x;
HXDLIN( 340)				{
HXLINE( 340)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = direction->zpp_inner;
HXDLIN( 340)					if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 340)						_this8->_validate();
            					}
            				}
HXDLIN( 340)				HX_VARI_NAME( Float,y1,"y") = direction->zpp_inner->y;
HXDLIN( 340)				bool _hx_tmp1;
HXDLIN( 340)				{
HXLINE( 340)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _this6->zpp_inner;
HXDLIN( 340)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 340)						_this9->_validate();
            					}
            				}
HXDLIN( 340)				if ((_this6->zpp_inner->x == x1)) {
HXLINE( 340)					{
HXLINE( 340)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = _this6->zpp_inner;
HXDLIN( 340)						if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 340)							_this10->_validate();
            						}
            					}
HXDLIN( 340)					_hx_tmp1 = (_this6->zpp_inner->y == y1);
            				}
            				else {
HXLINE( 340)					_hx_tmp1 = false;
            				}
HXDLIN( 340)				if (!(_hx_tmp1)) {
HXLINE( 340)					{
HXLINE( 340)						_this6->zpp_inner->x = x1;
HXDLIN( 340)						_this6->zpp_inner->y = y1;
            					}
HXDLIN( 340)					{
HXLINE( 340)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = _this6->zpp_inner;
HXDLIN( 340)						if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 340)							_this11->_invalidate(_this11);
            						}
            					}
            				}
HXDLIN( 340)				if (direction->zpp_inner->weak) {
HXLINE( 340)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = direction->zpp_inner;
HXDLIN( 340)					direction->zpp_inner->outer = null();
HXDLIN( 340)					direction->zpp_inner = null();
HXDLIN( 340)					{
HXLINE( 340)						direction->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 340)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = direction;
            					}
HXDLIN( 340)					{
HXLINE( 340)						{
HXLINE( 340)							if (hx::IsNotNull( inner1->outer )) {
HXLINE( 340)								inner1->outer->zpp_inner = null();
HXDLIN( 340)								inner1->outer = null();
            							}
HXDLIN( 340)							inner1->_isimmutable = null();
HXDLIN( 340)							inner1->_validate = null();
HXDLIN( 340)							inner1->_invalidate = null();
            						}
HXDLIN( 340)						inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 340)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            					}
            				}
            			}
HXDLIN( 340)			this->zpp_inner->zip_dir = true;
            		}
HXLINE( 341)		this->zpp_inner->maxdist = ::Math_obj::POSITIVE_INFINITY;
            	}

Dynamic Ray_obj::__CreateEmpty() { return new Ray_obj; }

void *Ray_obj::_hx_vtable = 0;

Dynamic Ray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ray_obj > _hx_result = new Ray_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Ray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x672b9442;
}

 ::Dynamic Ray_obj::get_userData(){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_195_get_userData)
            	HX_STACK_THIS(this)
HXLINE( 196)		if (hx::IsNull( this->zpp_inner->userData )) {
HXLINE( 197)			this->zpp_inner->userData =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE( 199)		return this->zpp_inner->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,get_userData,return )

 ::nape::geom::Vec2 Ray_obj::get_origin(){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_210_get_origin)
            	HX_STACK_THIS(this)
HXLINE( 210)		return this->zpp_inner->origin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,get_origin,return )

 ::nape::geom::Vec2 Ray_obj::set_origin( ::nape::geom::Vec2 origin){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_212_set_origin)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(origin,"origin")
HXLINE( 224)		{
HXLINE( 224)			HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->origin;
HXDLIN( 224)			{
HXLINE( 224)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = origin->zpp_inner;
HXDLIN( 224)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 224)					_this1->_validate();
            				}
            			}
HXDLIN( 224)			HX_VARI( Float,x) = origin->zpp_inner->x;
HXDLIN( 224)			{
HXLINE( 224)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = origin->zpp_inner;
HXDLIN( 224)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 224)					_this2->_validate();
            				}
            			}
HXDLIN( 224)			HX_VARI( Float,y) = origin->zpp_inner->y;
HXDLIN( 224)			bool _hx_tmp;
HXDLIN( 224)			{
HXLINE( 224)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 224)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 224)					_this3->_validate();
            				}
            			}
HXDLIN( 224)			if ((_this->zpp_inner->x == x)) {
HXLINE( 224)				{
HXLINE( 224)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 224)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 224)						_this4->_validate();
            					}
            				}
HXDLIN( 224)				_hx_tmp = (_this->zpp_inner->y == y);
            			}
            			else {
HXLINE( 224)				_hx_tmp = false;
            			}
HXDLIN( 224)			if (!(_hx_tmp)) {
HXLINE( 224)				{
HXLINE( 224)					_this->zpp_inner->x = x;
HXDLIN( 224)					_this->zpp_inner->y = y;
            				}
HXDLIN( 224)				{
HXLINE( 224)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 224)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 224)						_this5->_invalidate(_this5);
            					}
            				}
            			}
HXDLIN( 224)			if (origin->zpp_inner->weak) {
HXLINE( 224)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = origin->zpp_inner;
HXDLIN( 224)				origin->zpp_inner->outer = null();
HXDLIN( 224)				origin->zpp_inner = null();
HXDLIN( 224)				{
HXLINE( 224)					origin->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 224)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = origin;
            				}
HXDLIN( 224)				{
HXLINE( 224)					{
HXLINE( 224)						if (hx::IsNotNull( inner->outer )) {
HXLINE( 224)							inner->outer->zpp_inner = null();
HXDLIN( 224)							inner->outer = null();
            						}
HXDLIN( 224)						inner->_isimmutable = null();
HXDLIN( 224)						inner->_validate = null();
HXDLIN( 224)						inner->_invalidate = null();
            					}
HXDLIN( 224)					inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 224)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            				}
            			}
            		}
HXLINE( 226)		return this->zpp_inner->origin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,set_origin,return )

 ::nape::geom::Vec2 Ray_obj::get_direction(){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_240_get_direction)
            	HX_STACK_THIS(this)
HXLINE( 240)		return this->zpp_inner->direction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,get_direction,return )

 ::nape::geom::Vec2 Ray_obj::set_direction( ::nape::geom::Vec2 direction){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_242_set_direction)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(direction,"direction")
HXLINE( 243)		{
HXLINE( 254)			{
HXLINE( 254)				HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->direction;
HXDLIN( 254)				{
HXLINE( 254)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = direction->zpp_inner;
HXDLIN( 254)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 254)						_this1->_validate();
            					}
            				}
HXDLIN( 254)				HX_VARI( Float,x) = direction->zpp_inner->x;
HXDLIN( 254)				{
HXLINE( 254)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = direction->zpp_inner;
HXDLIN( 254)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 254)						_this2->_validate();
            					}
            				}
HXDLIN( 254)				HX_VARI( Float,y) = direction->zpp_inner->y;
HXDLIN( 254)				bool _hx_tmp;
HXDLIN( 254)				{
HXLINE( 254)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 254)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 254)						_this3->_validate();
            					}
            				}
HXDLIN( 254)				if ((_this->zpp_inner->x == x)) {
HXLINE( 254)					{
HXLINE( 254)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this->zpp_inner;
HXDLIN( 254)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 254)							_this4->_validate();
            						}
            					}
HXDLIN( 254)					_hx_tmp = (_this->zpp_inner->y == y);
            				}
            				else {
HXLINE( 254)					_hx_tmp = false;
            				}
HXDLIN( 254)				if (!(_hx_tmp)) {
HXLINE( 254)					{
HXLINE( 254)						_this->zpp_inner->x = x;
HXDLIN( 254)						_this->zpp_inner->y = y;
            					}
HXDLIN( 254)					{
HXLINE( 254)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this->zpp_inner;
HXDLIN( 254)						if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 254)							_this5->_invalidate(_this5);
            						}
            					}
            				}
HXDLIN( 254)				if (direction->zpp_inner->weak) {
HXLINE( 254)					HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = direction->zpp_inner;
HXDLIN( 254)					direction->zpp_inner->outer = null();
HXDLIN( 254)					direction->zpp_inner = null();
HXDLIN( 254)					{
HXLINE( 254)						direction->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 254)						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = direction;
            					}
HXDLIN( 254)					{
HXLINE( 254)						{
HXLINE( 254)							if (hx::IsNotNull( inner->outer )) {
HXLINE( 254)								inner->outer->zpp_inner = null();
HXDLIN( 254)								inner->outer = null();
            							}
HXDLIN( 254)							inner->_isimmutable = null();
HXDLIN( 254)							inner->_validate = null();
HXDLIN( 254)							inner->_invalidate = null();
            						}
HXDLIN( 254)						inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 254)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            					}
            				}
            			}
HXLINE( 255)			this->zpp_inner->zip_dir = true;
            		}
HXLINE( 257)		return this->zpp_inner->direction;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,set_direction,return )

Float Ray_obj::get_maxDistance(){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_273_get_maxDistance)
            	HX_STACK_THIS(this)
HXLINE( 273)		return this->zpp_inner->maxdist;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,get_maxDistance,return )

Float Ray_obj::set_maxDistance(Float maxDistance){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_275_set_maxDistance)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maxDistance,"maxDistance")
HXLINE( 282)		this->zpp_inner->maxdist = maxDistance;
HXLINE( 284)		return this->zpp_inner->maxdist;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ray_obj,set_maxDistance,return )

 ::nape::geom::AABB Ray_obj::aabb(){
            	HX_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_296_aabb)
            	HX_STACK_THIS(this)
HXLINE( 296)		return this->zpp_inner->rayAABB()->wrapper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,aabb,return )

 ::nape::geom::Vec2 Ray_obj::at(Float distance,hx::Null< bool >  __o_weak){
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_313_at)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(distance,"distance")
            	HX_STACK_ARG(weak,"weak")
HXLINE( 314)		this->zpp_inner->validate_dir();
HXLINE( 315)		HX_VARI(  ::nape::geom::Vec2,_this) = this->zpp_inner->origin;
HXDLIN( 315)		{
HXLINE( 315)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = _this->zpp_inner;
HXDLIN( 315)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 315)				_this1->_validate();
            			}
            		}
HXDLIN( 315)		HX_VARI( Float,x) = (_this->zpp_inner->x + (distance * this->zpp_inner->dirx));
HXDLIN( 315)		HX_VARI_NAME(  ::nape::geom::Vec2,_this2,"_this") = this->zpp_inner->origin;
HXDLIN( 315)		{
HXLINE( 315)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this2->zpp_inner;
HXDLIN( 315)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 315)				_this3->_validate();
            			}
            		}
HXDLIN( 315)		HX_VARI( Float,y) = (_this2->zpp_inner->y + (distance * this->zpp_inner->diry));
HXDLIN( 315)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 315)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 315)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 315)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 315)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 315)			ret->zpp_pool = null();
            		}
HXDLIN( 315)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 315)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 315)			{
HXLINE( 315)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 315)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 315)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 315)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 315)					ret1->next = null();
            				}
HXDLIN( 315)				ret1->weak = false;
            			}
HXDLIN( 315)			ret1->_immutable = false;
HXDLIN( 315)			{
HXLINE( 315)				ret1->x = x;
HXDLIN( 315)				ret1->y = y;
            			}
HXDLIN( 315)			ret->zpp_inner = ret1;
HXDLIN( 315)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 315)			bool _hx_tmp;
HXDLIN( 315)			{
HXLINE( 315)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret->zpp_inner;
HXDLIN( 315)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 315)					_this4->_validate();
            				}
            			}
HXDLIN( 315)			if ((ret->zpp_inner->x == x)) {
HXLINE( 315)				{
HXLINE( 315)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret->zpp_inner;
HXDLIN( 315)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 315)						_this5->_validate();
            					}
            				}
HXDLIN( 315)				_hx_tmp = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 315)				_hx_tmp = false;
            			}
HXDLIN( 315)			if (!(_hx_tmp)) {
HXLINE( 315)				{
HXLINE( 315)					ret->zpp_inner->x = x;
HXDLIN( 315)					ret->zpp_inner->y = y;
            				}
HXDLIN( 315)				{
HXLINE( 315)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret->zpp_inner;
HXDLIN( 315)					if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 315)						_this6->_invalidate(_this6);
            					}
            				}
            			}
            		}
HXDLIN( 315)		ret->zpp_inner->weak = weak;
HXDLIN( 315)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Ray_obj,at,return )

 ::nape::geom::Ray Ray_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_350_copy)
            	HX_STACK_THIS(this)
HXLINE( 351)		HX_VARI(  ::nape::geom::Ray,ret) =  ::nape::geom::Ray_obj::__alloc( HX_CTX ,this->zpp_inner->origin,this->zpp_inner->direction);
HXLINE( 352)		ret->zpp_inner->maxdist = this->zpp_inner->maxdist;
HXLINE( 353)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,copy,return )

 ::nape::geom::Ray Ray_obj::fromSegment( ::nape::geom::Vec2 start, ::nape::geom::Vec2 end){
            	HX_GC_STACKFRAME(&_hx_pos_4f8965e3d8a05fef_370_fromSegment)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
HXLINE( 390)		HX_VARI(  ::nape::geom::Ray,ret) =  ::nape::geom::Ray_obj::__alloc( HX_CTX ,start,end->sub(start,true));
HXLINE( 391)		{
HXLINE( 391)			{
HXLINE( 391)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = start->zpp_inner;
HXDLIN( 391)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 391)					_this->_validate();
            				}
            			}
HXDLIN( 391)			Float ax = start->zpp_inner->x;
HXDLIN( 391)			{
HXLINE( 391)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = start->zpp_inner;
HXDLIN( 391)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 391)					_this1->_validate();
            				}
            			}
HXDLIN( 391)			Float ay = start->zpp_inner->y;
HXDLIN( 391)			{
HXLINE( 391)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = end->zpp_inner;
HXDLIN( 391)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 391)					_this2->_validate();
            				}
            			}
HXDLIN( 391)			Float bx = end->zpp_inner->x;
HXDLIN( 391)			{
HXLINE( 391)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = end->zpp_inner;
HXDLIN( 391)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 391)					_this3->_validate();
            				}
            			}
HXDLIN( 391)			HX_VARI( Float,dx) = ((Float)0.0);
HXDLIN( 391)			HX_VARI( Float,dy) = ((Float)0.0);
HXDLIN( 391)			{
HXLINE( 391)				dx = (ax - bx);
HXDLIN( 391)				dy = (ay - end->zpp_inner->y);
            			}
HXDLIN( 391)			ret->zpp_inner->maxdist = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
            		}
HXLINE( 392)		if (start->zpp_inner->weak) {
HXLINE( 396)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = start->zpp_inner;
HXDLIN( 396)			start->zpp_inner->outer = null();
HXDLIN( 396)			start->zpp_inner = null();
HXDLIN( 396)			{
HXLINE( 396)				start->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 396)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = start;
            			}
HXDLIN( 396)			{
HXLINE( 396)				{
HXLINE( 396)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 396)						inner->outer->zpp_inner = null();
HXDLIN( 396)						inner->outer = null();
            					}
HXDLIN( 396)					inner->_isimmutable = null();
HXDLIN( 396)					inner->_validate = null();
HXDLIN( 396)					inner->_invalidate = null();
            				}
HXDLIN( 396)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 396)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 403)		if (end->zpp_inner->weak) {
HXLINE( 407)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,inner1,"inner") = end->zpp_inner;
HXDLIN( 407)			end->zpp_inner->outer = null();
HXDLIN( 407)			end->zpp_inner = null();
HXDLIN( 407)			{
HXLINE( 407)				end->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 407)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = end;
            			}
HXDLIN( 407)			{
HXLINE( 407)				{
HXLINE( 407)					if (hx::IsNotNull( inner1->outer )) {
HXLINE( 407)						inner1->outer->zpp_inner = null();
HXDLIN( 407)						inner1->outer = null();
            					}
HXDLIN( 407)					inner1->_isimmutable = null();
HXDLIN( 407)					inner1->_validate = null();
HXDLIN( 407)					inner1->_invalidate = null();
            				}
HXDLIN( 407)				inner1->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 407)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner1;
            			}
            		}
HXLINE( 414)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ray_obj,fromSegment,return )


hx::ObjectPtr< Ray_obj > Ray_obj::__new( ::nape::geom::Vec2 origin, ::nape::geom::Vec2 direction) {
	hx::ObjectPtr< Ray_obj > __this = new Ray_obj();
	__this->__construct(origin,direction);
	return __this;
}

hx::ObjectPtr< Ray_obj > Ray_obj::__alloc(hx::Ctx *_hx_ctx, ::nape::geom::Vec2 origin, ::nape::geom::Vec2 direction) {
	Ray_obj *__this = (Ray_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ray_obj), true, "nape.geom.Ray"));
	*(void **)__this = Ray_obj::_hx_vtable;
	__this->__construct(origin,direction);
	return __this;
}

Ray_obj::Ray_obj()
{
}

void Ray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ray);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Ray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Ray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"aabb") ) { return hx::Val( aabb_dyn()); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_origin()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_userData()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_direction()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_origin") ) { return hx::Val( get_origin_dyn()); }
		if (HX_FIELD_EQ(inName,"set_origin") ) { return hx::Val( set_origin_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxDistance") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxDistance()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_userData") ) { return hx::Val( get_userData_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_direction") ) { return hx::Val( get_direction_dyn()); }
		if (HX_FIELD_EQ(inName,"set_direction") ) { return hx::Val( set_direction_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_maxDistance") ) { return hx::Val( get_maxDistance_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxDistance") ) { return hx::Val( set_maxDistance_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Ray_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"fromSegment") ) { outValue = fromSegment_dyn(); return true; }
	}
	return false;
}

hx::Val Ray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_origin(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_Ray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_direction(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxDistance") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxDistance(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("direction","\x3f","\x62","\x40","\x10"));
	outFields->push(HX_HCSTRING("maxDistance","\xf9","\x9d","\xbf","\xe1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ray_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_Ray*/ ,(int)offsetof(Ray_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ray_obj_sStaticStorageInfo = 0;
#endif

static ::String Ray_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_userData","\x1e","\x4a","\x42","\xba"),
	HX_HCSTRING("get_origin","\xaf","\x89","\x88","\x3b"),
	HX_HCSTRING("set_origin","\x23","\x28","\x06","\x3f"),
	HX_HCSTRING("get_direction","\x16","\x36","\xa4","\xd1"),
	HX_HCSTRING("set_direction","\x22","\x18","\xaa","\x16"),
	HX_HCSTRING("get_maxDistance","\x90","\x55","\xa1","\xa2"),
	HX_HCSTRING("set_maxDistance","\x9c","\xd2","\x6c","\x9e"),
	HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	::String(null()) };

static void Ray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ray_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ray_obj::__mClass,"__mClass");
};

#endif

hx::Class Ray_obj::__mClass;

static ::String Ray_obj_sStaticFields[] = {
	HX_HCSTRING("fromSegment","\x69","\x33","\x0f","\x3f"),
	::String(null())
};

void Ray_obj::__register()
{
	hx::Object *dummy = new Ray_obj;
	Ray_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.Ray","\x5e","\xf7","\x83","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ray_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Ray_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
