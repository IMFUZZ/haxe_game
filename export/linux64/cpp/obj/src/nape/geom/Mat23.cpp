// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_187_new,"nape.geom.Mat23","new",0x0099b447,"nape.geom.Mat23.new","nape/geom/Mat23.hx",187,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_205_get_a,"nape.geom.Mat23","get_a",0x99d490df,"nape.geom.Mat23.get_a","nape/geom/Mat23.hx",205,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_207_set_a,"nape.geom.Mat23","set_a",0x82a386eb,"nape.geom.Mat23.set_a","nape/geom/Mat23.hx",207,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_232_get_b,"nape.geom.Mat23","get_b",0x99d490e0,"nape.geom.Mat23.get_b","nape/geom/Mat23.hx",232,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_234_set_b,"nape.geom.Mat23","set_b",0x82a386ec,"nape.geom.Mat23.set_b","nape/geom/Mat23.hx",234,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_259_get_c,"nape.geom.Mat23","get_c",0x99d490e1,"nape.geom.Mat23.get_c","nape/geom/Mat23.hx",259,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_261_set_c,"nape.geom.Mat23","set_c",0x82a386ed,"nape.geom.Mat23.set_c","nape/geom/Mat23.hx",261,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_286_get_d,"nape.geom.Mat23","get_d",0x99d490e2,"nape.geom.Mat23.get_d","nape/geom/Mat23.hx",286,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_288_set_d,"nape.geom.Mat23","set_d",0x82a386ee,"nape.geom.Mat23.set_d","nape/geom/Mat23.hx",288,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_313_get_tx,"nape.geom.Mat23","get_tx",0x002a4346,"nape.geom.Mat23.get_tx","nape/geom/Mat23.hx",313,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_315_set_tx,"nape.geom.Mat23","set_tx",0xcc7297ba,"nape.geom.Mat23.set_tx","nape/geom/Mat23.hx",315,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_340_get_ty,"nape.geom.Mat23","get_ty",0x002a4347,"nape.geom.Mat23.get_ty","nape/geom/Mat23.hx",340,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_342_set_ty,"nape.geom.Mat23","set_ty",0xcc7297bb,"nape.geom.Mat23.set_ty","nape/geom/Mat23.hx",342,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_387_copy,"nape.geom.Mat23","copy",0x7ea641ee,"nape.geom.Mat23.copy","nape/geom/Mat23.hx",387,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_396_set,"nape.geom.Mat23","set",0x009d7f89,"nape.geom.Mat23.set","nape/geom/Mat23.hx",396,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_420_setAs,"nape.geom.Mat23","setAs",0x82a36cdb,"nape.geom.Mat23.setAs","nape/geom/Mat23.hx",420,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_434_reset,"nape.geom.Mat23","reset",0xef3c3576,"nape.geom.Mat23.reset","nape/geom/Mat23.hx",434,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_467_toMatrix,"nape.geom.Mat23","toMatrix",0x27fa74d5,"nape.geom.Mat23.toMatrix","nape/geom/Mat23.hx",467,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_548_get_determinant,"nape.geom.Mat23","get_determinant",0x66b6b793,"nape.geom.Mat23.get_determinant","nape/geom/Mat23.hx",548,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_560_singular,"nape.geom.Mat23","singular",0x9c1a3f90,"nape.geom.Mat23.singular","nape/geom/Mat23.hx",560,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_577_inverse,"nape.geom.Mat23","inverse",0x3bf4af17,"nape.geom.Mat23.inverse","nape/geom/Mat23.hx",577,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_607_transpose,"nape.geom.Mat23","transpose",0x5c5f9ba0,"nape.geom.Mat23.transpose","nape/geom/Mat23.hx",607,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_629_concat,"nape.geom.Mat23","concat",0x24ca4f8d,"nape.geom.Mat23.concat","nape/geom/Mat23.hx",629,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_648_transform,"nape.geom.Mat23","transform",0x55c37893,"nape.geom.Mat23.transform","nape/geom/Mat23.hx",648,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_702_inverseTransform,"nape.geom.Mat23","inverseTransform",0xbb944355,"nape.geom.Mat23.inverseTransform","nape/geom/Mat23.hx",702,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_743_toString,"nape.geom.Mat23","toString",0x7d626765,"nape.geom.Mat23.toString","nape/geom/Mat23.hx",743,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_767_equiorthogonal,"nape.geom.Mat23","equiorthogonal",0x36cf42b2,"nape.geom.Mat23.equiorthogonal","nape/geom/Mat23.hx",767,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_794_orthogonal,"nape.geom.Mat23","orthogonal",0x33057072,"nape.geom.Mat23.orthogonal","nape/geom/Mat23.hx",794,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_817_equiorthogonalise,"nape.geom.Mat23","equiorthogonalise",0xca9e09c9,"nape.geom.Mat23.equiorthogonalise","nape/geom/Mat23.hx",817,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_862_orthogonalise,"nape.geom.Mat23","orthogonalise",0x11aaf409,"nape.geom.Mat23.orthogonalise","nape/geom/Mat23.hx",862,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_453_fromMatrix,"nape.geom.Mat23","fromMatrix",0x191db244,"nape.geom.Mat23.fromMatrix","nape/geom/Mat23.hx",453,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_490_rotation,"nape.geom.Mat23","rotation",0x4d79d3f7,"nape.geom.Mat23.rotation","nape/geom/Mat23.hx",490,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_514_translation,"nape.geom.Mat23","translation",0x3fd8d3d8,"nape.geom.Mat23.translation","nape/geom/Mat23.hx",514,0xee046d69)
HX_DEFINE_STACK_FRAME(_hx_pos_7545a35db7efdc4e_530_scale,"nape.geom.Mat23","scale",0x8142ba31,"nape.geom.Mat23.scale","nape/geom/Mat23.hx",530,0xee046d69)
namespace nape{
namespace geom{

void Mat23_obj::__construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float a = __o_a.Default(((Float)1.0));
Float b = __o_b.Default(((Float)0.0));
Float c = __o_c.Default(((Float)0.0));
Float d = __o_d.Default(((Float)1.0));
Float tx = __o_tx.Default(((Float)0.0));
Float ty = __o_ty.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_187_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 191)		this->zpp_inner = null();
HXLINE( 371)		this->zpp_inner = ::zpp_nape::geom::ZPP_Mat23_obj::get();
HXLINE( 372)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 373)		{
HXLINE( 373)			this->zpp_inner->a = a;
HXDLIN( 373)			{
HXLINE( 373)				HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 373)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 373)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 374)		{
HXLINE( 374)			this->zpp_inner->b = b;
HXDLIN( 374)			{
HXLINE( 374)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this1,"_this") = this->zpp_inner;
HXDLIN( 374)				if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 374)					_this1->_invalidate();
            				}
            			}
            		}
HXLINE( 375)		{
HXLINE( 375)			this->zpp_inner->tx = tx;
HXDLIN( 375)			{
HXLINE( 375)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this2,"_this") = this->zpp_inner;
HXDLIN( 375)				if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 375)					_this2->_invalidate();
            				}
            			}
            		}
HXLINE( 376)		{
HXLINE( 376)			this->zpp_inner->c = c;
HXDLIN( 376)			{
HXLINE( 376)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this3,"_this") = this->zpp_inner;
HXDLIN( 376)				if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 376)					_this3->_invalidate();
            				}
            			}
            		}
HXLINE( 377)		{
HXLINE( 377)			this->zpp_inner->d = d;
HXDLIN( 377)			{
HXLINE( 377)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this4,"_this") = this->zpp_inner;
HXDLIN( 377)				if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 377)					_this4->_invalidate();
            				}
            			}
            		}
HXLINE( 378)		{
HXLINE( 378)			this->zpp_inner->ty = ty;
HXDLIN( 378)			{
HXLINE( 378)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this5,"_this") = this->zpp_inner;
HXDLIN( 378)				if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 378)					_this5->_invalidate();
            				}
            			}
            		}
            	}

Dynamic Mat23_obj::__CreateEmpty() { return new Mat23_obj; }

void *Mat23_obj::_hx_vtable = 0;

Dynamic Mat23_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mat23_obj > _hx_result = new Mat23_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Mat23_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x285cd39d;
}

Float Mat23_obj::get_a(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_205_get_a)
            	HX_STACK_THIS(this)
HXLINE( 205)		return this->zpp_inner->a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_a,return )

Float Mat23_obj::set_a(Float a){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_207_set_a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 208)		{
HXLINE( 214)			this->zpp_inner->a = a;
HXLINE( 215)			{
HXLINE( 215)				HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 215)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 215)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 217)		return this->zpp_inner->a;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_a,return )

Float Mat23_obj::get_b(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_232_get_b)
            	HX_STACK_THIS(this)
HXLINE( 232)		return this->zpp_inner->b;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_b,return )

Float Mat23_obj::set_b(Float b){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_234_set_b)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 235)		{
HXLINE( 241)			this->zpp_inner->b = b;
HXLINE( 242)			{
HXLINE( 242)				HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 242)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 242)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 244)		return this->zpp_inner->b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_b,return )

Float Mat23_obj::get_c(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_259_get_c)
            	HX_STACK_THIS(this)
HXLINE( 259)		return this->zpp_inner->c;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_c,return )

Float Mat23_obj::set_c(Float c){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_261_set_c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE( 262)		{
HXLINE( 268)			this->zpp_inner->c = c;
HXLINE( 269)			{
HXLINE( 269)				HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 269)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 269)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 271)		return this->zpp_inner->c;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_c,return )

Float Mat23_obj::get_d(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_286_get_d)
            	HX_STACK_THIS(this)
HXLINE( 286)		return this->zpp_inner->d;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_d,return )

Float Mat23_obj::set_d(Float d){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_288_set_d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(d,"d")
HXLINE( 289)		{
HXLINE( 295)			this->zpp_inner->d = d;
HXLINE( 296)			{
HXLINE( 296)				HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 296)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 296)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 298)		return this->zpp_inner->d;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_d,return )

Float Mat23_obj::get_tx(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_313_get_tx)
            	HX_STACK_THIS(this)
HXLINE( 313)		return this->zpp_inner->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_tx,return )

Float Mat23_obj::set_tx(Float tx){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_315_set_tx)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tx,"tx")
HXLINE( 316)		{
HXLINE( 322)			this->zpp_inner->tx = tx;
HXLINE( 323)			{
HXLINE( 323)				HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 323)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 323)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 325)		return this->zpp_inner->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_tx,return )

Float Mat23_obj::get_ty(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_340_get_ty)
            	HX_STACK_THIS(this)
HXLINE( 340)		return this->zpp_inner->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_ty,return )

Float Mat23_obj::set_ty(Float ty){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_342_set_ty)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ty,"ty")
HXLINE( 343)		{
HXLINE( 349)			this->zpp_inner->ty = ty;
HXLINE( 350)			{
HXLINE( 350)				HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 350)				if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 350)					_this->_invalidate();
            				}
            			}
            		}
HXLINE( 352)		return this->zpp_inner->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set_ty,return )

 ::nape::geom::Mat23 Mat23_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_387_copy)
            	HX_STACK_THIS(this)
HXLINE( 387)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,this->zpp_inner->a,this->zpp_inner->b,this->zpp_inner->c,this->zpp_inner->d,this->zpp_inner->tx,this->zpp_inner->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,copy,return )

 ::nape::geom::Mat23 Mat23_obj::set( ::nape::geom::Mat23 matrix){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_396_set)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 402)		{
HXLINE( 402)			HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,m) = matrix->zpp_inner;
HXDLIN( 402)			this->zpp_inner->setas(m->a,m->b,m->c,m->d,m->tx,m->ty);
            		}
HXLINE( 403)		{
HXLINE( 403)			HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 403)			if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 403)				_this->_invalidate();
            			}
            		}
HXLINE( 404)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,set,return )

 ::nape::geom::Mat23 Mat23_obj::setAs(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float a = __o_a.Default(((Float)1.0));
Float b = __o_b.Default(((Float)0.0));
Float c = __o_c.Default(((Float)0.0));
Float d = __o_d.Default(((Float)1.0));
Float tx = __o_tx.Default(((Float)0.0));
Float ty = __o_ty.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_420_setAs)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 421)		this->zpp_inner->setas(a,b,c,d,tx,ty);
HXLINE( 422)		{
HXLINE( 422)			HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = this->zpp_inner;
HXDLIN( 422)			if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 422)				_this->_invalidate();
            			}
            		}
HXLINE( 423)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Mat23_obj,setAs,return )

 ::nape::geom::Mat23 Mat23_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_434_reset)
            	HX_STACK_THIS(this)
HXLINE( 434)		return this->setAs(null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,reset,return )

 ::openfl::_legacy::geom::Matrix Mat23_obj::toMatrix( ::openfl::_legacy::geom::Matrix output){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_467_toMatrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(output,"output")
HXLINE( 468)		if (hx::IsNull( output )) {
HXLINE( 468)			output =  ::openfl::_legacy::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 469)		output->a = this->zpp_inner->a;
HXLINE( 470)		output->b = this->zpp_inner->c;
HXLINE( 471)		output->c = this->zpp_inner->b;
HXLINE( 472)		output->d = this->zpp_inner->d;
HXLINE( 473)		output->tx = this->zpp_inner->tx;
HXLINE( 474)		output->ty = this->zpp_inner->ty;
HXLINE( 475)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,toMatrix,return )

Float Mat23_obj::get_determinant(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_548_get_determinant)
            	HX_STACK_THIS(this)
HXLINE( 548)		return ((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,get_determinant,return )

bool Mat23_obj::singular(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_560_singular)
            	HX_STACK_THIS(this)
HXLINE( 562)		HX_VARI( Float,limit) = ((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c));
HXLINE( 563)		if ((limit < (int)0)) {
HXLINE( 563)			limit = -(limit);
            		}
HXLINE( 564)		return (((((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->b * this->zpp_inner->b)) + (this->zpp_inner->c * this->zpp_inner->c)) + (this->zpp_inner->d * this->zpp_inner->d)) > (::nape::Config_obj::illConditionedThreshold * limit));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,singular,return )

 ::nape::geom::Mat23 Mat23_obj::inverse(){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_577_inverse)
            	HX_STACK_THIS(this)
HXLINE( 583)		HX_VARI( Float,idet) = ((Float)((Float)1.0) / (Float)((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)));
HXLINE( 584)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,(this->zpp_inner->d * idet),(-(this->zpp_inner->b) * idet),(-(this->zpp_inner->c) * idet),(this->zpp_inner->a * idet),(((this->zpp_inner->b * this->zpp_inner->ty) - (this->zpp_inner->d * this->zpp_inner->tx)) * idet),(((this->zpp_inner->c * this->zpp_inner->tx) - (this->zpp_inner->a * this->zpp_inner->ty)) * idet));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,inverse,return )

 ::nape::geom::Mat23 Mat23_obj::transpose(){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_607_transpose)
            	HX_STACK_THIS(this)
HXLINE( 607)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,this->zpp_inner->a,this->zpp_inner->c,this->zpp_inner->b,this->zpp_inner->d,((-(this->zpp_inner->a) * this->zpp_inner->tx) - (this->zpp_inner->c * this->zpp_inner->ty)),((-(this->zpp_inner->b) * this->zpp_inner->tx) - (this->zpp_inner->d * this->zpp_inner->ty)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,transpose,return )

 ::nape::geom::Mat23 Mat23_obj::concat( ::nape::geom::Mat23 matrix){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_629_concat)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 629)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,((matrix->zpp_inner->a * this->zpp_inner->a) + (matrix->zpp_inner->b * this->zpp_inner->c)),((matrix->zpp_inner->a * this->zpp_inner->b) + (matrix->zpp_inner->b * this->zpp_inner->d)),((matrix->zpp_inner->c * this->zpp_inner->a) + (matrix->zpp_inner->d * this->zpp_inner->c)),((matrix->zpp_inner->c * this->zpp_inner->b) + (matrix->zpp_inner->d * this->zpp_inner->d)),(((matrix->zpp_inner->a * this->zpp_inner->tx) + (matrix->zpp_inner->b * this->zpp_inner->ty)) + matrix->zpp_inner->tx),(((matrix->zpp_inner->c * this->zpp_inner->tx) + (matrix->zpp_inner->d * this->zpp_inner->ty)) + matrix->zpp_inner->ty));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,concat,return )

 ::nape::geom::Vec2 Mat23_obj::transform( ::nape::geom::Vec2 point,hx::Null< bool >  __o_noTranslation,hx::Null< bool >  __o_weak){
bool noTranslation = __o_noTranslation.Default(false);
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_648_transform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(noTranslation,"noTranslation")
            	HX_STACK_ARG(weak,"weak")
HXLINE( 659)		HX_VAR(  ::nape::geom::Vec2,ret);
HXLINE( 660)		if (noTranslation) {
HXLINE( 661)			{
HXLINE( 661)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 661)					_this->_validate();
            				}
            			}
HXDLIN( 661)			HX_VARI( Float,x) = (point->zpp_inner->x * this->zpp_inner->a);
HXDLIN( 661)			{
HXLINE( 661)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 661)					_this1->_validate();
            				}
            			}
HXDLIN( 661)			HX_VARI_NAME( Float,x1,"x") = (x + (point->zpp_inner->y * this->zpp_inner->b));
HXDLIN( 661)			{
HXLINE( 661)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 661)					_this2->_validate();
            				}
            			}
HXDLIN( 661)			HX_VARI( Float,y) = (point->zpp_inner->x * this->zpp_inner->c);
HXDLIN( 661)			{
HXLINE( 661)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = point->zpp_inner;
HXDLIN( 661)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 661)					_this3->_validate();
            				}
            			}
HXDLIN( 661)			HX_VARI_NAME( Float,y1,"y") = (y + (point->zpp_inner->y * this->zpp_inner->d));
HXDLIN( 661)			HX_VAR_NAME(  ::nape::geom::Vec2,ret1,"ret");
HXDLIN( 661)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 661)				ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 661)				ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 661)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN( 661)				ret1->zpp_pool = null();
            			}
HXDLIN( 661)			if (hx::IsNull( ret1->zpp_inner )) {
HXLINE( 661)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret2,"ret");
HXDLIN( 661)				{
HXLINE( 661)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 661)						ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 661)						ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 661)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN( 661)						ret2->next = null();
            					}
HXDLIN( 661)					ret2->weak = false;
            				}
HXDLIN( 661)				ret2->_immutable = false;
HXDLIN( 661)				{
HXLINE( 661)					ret2->x = x1;
HXDLIN( 661)					ret2->y = y1;
            				}
HXDLIN( 661)				ret1->zpp_inner = ret2;
HXDLIN( 661)				ret1->zpp_inner->outer = ret1;
            			}
            			else {
HXLINE( 661)				bool ret3;
HXDLIN( 661)				{
HXLINE( 661)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret1->zpp_inner;
HXDLIN( 661)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 661)						_this4->_validate();
            					}
            				}
HXDLIN( 661)				if ((ret1->zpp_inner->x == x1)) {
HXLINE( 661)					{
HXLINE( 661)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret1->zpp_inner;
HXDLIN( 661)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 661)							_this5->_validate();
            						}
            					}
HXDLIN( 661)					ret3 = (ret1->zpp_inner->y == y1);
            				}
            				else {
HXLINE( 661)					ret3 = false;
            				}
HXDLIN( 661)				if (!(ret3)) {
HXLINE( 661)					{
HXLINE( 661)						ret1->zpp_inner->x = x1;
HXDLIN( 661)						ret1->zpp_inner->y = y1;
            					}
HXDLIN( 661)					{
HXLINE( 661)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret1->zpp_inner;
HXDLIN( 661)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 661)							_this6->_invalidate(_this6);
            						}
            					}
            				}
            			}
HXDLIN( 661)			ret1->zpp_inner->weak = weak;
HXDLIN( 661)			ret = ret1;
            		}
            		else {
HXLINE( 664)			{
HXLINE( 664)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 664)					_this7->_validate();
            				}
            			}
HXDLIN( 664)			HX_VARI_NAME( Float,x2,"x") = (point->zpp_inner->x * this->zpp_inner->a);
HXDLIN( 664)			{
HXLINE( 664)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 664)					_this8->_validate();
            				}
            			}
HXDLIN( 664)			HX_VARI_NAME( Float,x3,"x") = ((x2 + (point->zpp_inner->y * this->zpp_inner->b)) + this->zpp_inner->tx);
HXDLIN( 664)			{
HXLINE( 664)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 664)					_this9->_validate();
            				}
            			}
HXDLIN( 664)			HX_VARI_NAME( Float,y2,"y") = (point->zpp_inner->x * this->zpp_inner->c);
HXDLIN( 664)			{
HXLINE( 664)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = point->zpp_inner;
HXDLIN( 664)				if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 664)					_this10->_validate();
            				}
            			}
HXDLIN( 664)			HX_VARI_NAME( Float,y3,"y") = ((y2 + (point->zpp_inner->y * this->zpp_inner->d)) + this->zpp_inner->ty);
HXDLIN( 664)			HX_VAR_NAME(  ::nape::geom::Vec2,ret4,"ret");
HXDLIN( 664)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 664)				ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 664)				ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 664)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 664)				ret4->zpp_pool = null();
            			}
HXDLIN( 664)			if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 664)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret5,"ret");
HXDLIN( 664)				{
HXLINE( 664)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 664)						ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 664)						ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 664)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 664)						ret5->next = null();
            					}
HXDLIN( 664)					ret5->weak = false;
            				}
HXDLIN( 664)				ret5->_immutable = false;
HXDLIN( 664)				{
HXLINE( 664)					ret5->x = x3;
HXDLIN( 664)					ret5->y = y3;
            				}
HXDLIN( 664)				ret4->zpp_inner = ret5;
HXDLIN( 664)				ret4->zpp_inner->outer = ret4;
            			}
            			else {
HXLINE( 664)				bool ret6;
HXDLIN( 664)				{
HXLINE( 664)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = ret4->zpp_inner;
HXDLIN( 664)					if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 664)						_this11->_validate();
            					}
            				}
HXDLIN( 664)				if ((ret4->zpp_inner->x == x3)) {
HXLINE( 664)					{
HXLINE( 664)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this12,"_this") = ret4->zpp_inner;
HXDLIN( 664)						if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 664)							_this12->_validate();
            						}
            					}
HXDLIN( 664)					ret6 = (ret4->zpp_inner->y == y3);
            				}
            				else {
HXLINE( 664)					ret6 = false;
            				}
HXDLIN( 664)				if (!(ret6)) {
HXLINE( 664)					{
HXLINE( 664)						ret4->zpp_inner->x = x3;
HXDLIN( 664)						ret4->zpp_inner->y = y3;
            					}
HXDLIN( 664)					{
HXLINE( 664)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = ret4->zpp_inner;
HXDLIN( 664)						if (hx::IsNotNull( _this13->_invalidate )) {
HXLINE( 664)							_this13->_invalidate(_this13);
            						}
            					}
            				}
            			}
HXDLIN( 664)			ret4->zpp_inner->weak = weak;
HXDLIN( 664)			ret = ret4;
            		}
HXLINE( 666)		if (point->zpp_inner->weak) {
HXLINE( 670)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN( 670)			point->zpp_inner->outer = null();
HXDLIN( 670)			point->zpp_inner = null();
HXDLIN( 670)			{
HXLINE( 670)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 670)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN( 670)			{
HXLINE( 670)				{
HXLINE( 670)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 670)						inner->outer->zpp_inner = null();
HXDLIN( 670)						inner->outer = null();
            					}
HXDLIN( 670)					inner->_isimmutable = null();
HXDLIN( 670)					inner->_validate = null();
HXDLIN( 670)					inner->_invalidate = null();
            				}
HXDLIN( 670)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 670)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 677)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mat23_obj,transform,return )

 ::nape::geom::Vec2 Mat23_obj::inverseTransform( ::nape::geom::Vec2 point,hx::Null< bool >  __o_noTranslation,hx::Null< bool >  __o_weak){
bool noTranslation = __o_noTranslation.Default(false);
bool weak = __o_weak.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_702_inverseTransform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(noTranslation,"noTranslation")
            	HX_STACK_ARG(weak,"weak")
HXLINE( 716)		HX_VARI( Float,idet) = ((Float)((Float)1.0) / (Float)((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)));
HXLINE( 717)		HX_VAR(  ::nape::geom::Vec2,ret);
HXLINE( 718)		if (noTranslation) {
HXLINE( 719)			{
HXLINE( 719)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 719)					_this->_validate();
            				}
            			}
HXDLIN( 719)			HX_VARI( Float,x) = (point->zpp_inner->x * this->zpp_inner->d);
HXDLIN( 719)			{
HXLINE( 719)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 719)					_this1->_validate();
            				}
            			}
HXDLIN( 719)			HX_VARI_NAME( Float,x1,"x") = ((x - (point->zpp_inner->y * this->zpp_inner->b)) * idet);
HXDLIN( 719)			{
HXLINE( 719)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 719)					_this2->_validate();
            				}
            			}
HXDLIN( 719)			HX_VARI( Float,y) = (point->zpp_inner->y * this->zpp_inner->a);
HXDLIN( 719)			{
HXLINE( 719)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = point->zpp_inner;
HXDLIN( 719)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 719)					_this3->_validate();
            				}
            			}
HXDLIN( 719)			HX_VARI_NAME( Float,y1,"y") = ((y - (point->zpp_inner->x * this->zpp_inner->c)) * idet);
HXDLIN( 719)			HX_VAR_NAME(  ::nape::geom::Vec2,ret1,"ret");
HXDLIN( 719)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 719)				ret1 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 719)				ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 719)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
HXDLIN( 719)				ret1->zpp_pool = null();
            			}
HXDLIN( 719)			if (hx::IsNull( ret1->zpp_inner )) {
HXLINE( 719)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret2,"ret");
HXDLIN( 719)				{
HXLINE( 719)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 719)						ret2 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 719)						ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 719)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
HXDLIN( 719)						ret2->next = null();
            					}
HXDLIN( 719)					ret2->weak = false;
            				}
HXDLIN( 719)				ret2->_immutable = false;
HXDLIN( 719)				{
HXLINE( 719)					ret2->x = x1;
HXDLIN( 719)					ret2->y = y1;
            				}
HXDLIN( 719)				ret1->zpp_inner = ret2;
HXDLIN( 719)				ret1->zpp_inner->outer = ret1;
            			}
            			else {
HXLINE( 719)				bool ret3;
HXDLIN( 719)				{
HXLINE( 719)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret1->zpp_inner;
HXDLIN( 719)					if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 719)						_this4->_validate();
            					}
            				}
HXDLIN( 719)				if ((ret1->zpp_inner->x == x1)) {
HXLINE( 719)					{
HXLINE( 719)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret1->zpp_inner;
HXDLIN( 719)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 719)							_this5->_validate();
            						}
            					}
HXDLIN( 719)					ret3 = (ret1->zpp_inner->y == y1);
            				}
            				else {
HXLINE( 719)					ret3 = false;
            				}
HXDLIN( 719)				if (!(ret3)) {
HXLINE( 719)					{
HXLINE( 719)						ret1->zpp_inner->x = x1;
HXDLIN( 719)						ret1->zpp_inner->y = y1;
            					}
HXDLIN( 719)					{
HXLINE( 719)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret1->zpp_inner;
HXDLIN( 719)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 719)							_this6->_invalidate(_this6);
            						}
            					}
            				}
            			}
HXDLIN( 719)			ret1->zpp_inner->weak = weak;
HXDLIN( 719)			ret = ret1;
            		}
            		else {
HXLINE( 722)			{
HXLINE( 722)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = point->zpp_inner;
HXDLIN( 722)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 722)					_this7->_validate();
            				}
            			}
HXDLIN( 722)			HX_VARI( Float,dx) = (point->zpp_inner->x - this->zpp_inner->tx);
HXLINE( 723)			{
HXLINE( 723)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = point->zpp_inner;
HXDLIN( 723)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 723)					_this8->_validate();
            				}
            			}
HXDLIN( 723)			HX_VARI( Float,dy) = (point->zpp_inner->y - this->zpp_inner->ty);
HXLINE( 724)			HX_VARI_NAME( Float,x2,"x") = (((dx * this->zpp_inner->d) - (dy * this->zpp_inner->b)) * idet);
HXDLIN( 724)			HX_VARI_NAME( Float,y2,"y") = (((dy * this->zpp_inner->a) - (dx * this->zpp_inner->c)) * idet);
HXDLIN( 724)			HX_VAR_NAME(  ::nape::geom::Vec2,ret4,"ret");
HXDLIN( 724)			if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 724)				ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            			}
            			else {
HXLINE( 724)				ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 724)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 724)				ret4->zpp_pool = null();
            			}
HXDLIN( 724)			if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 724)				HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret5,"ret");
HXDLIN( 724)				{
HXLINE( 724)					if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 724)						ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            					}
            					else {
HXLINE( 724)						ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 724)						::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 724)						ret5->next = null();
            					}
HXDLIN( 724)					ret5->weak = false;
            				}
HXDLIN( 724)				ret5->_immutable = false;
HXDLIN( 724)				{
HXLINE( 724)					ret5->x = x2;
HXDLIN( 724)					ret5->y = y2;
            				}
HXDLIN( 724)				ret4->zpp_inner = ret5;
HXDLIN( 724)				ret4->zpp_inner->outer = ret4;
            			}
            			else {
HXLINE( 724)				bool ret6;
HXDLIN( 724)				{
HXLINE( 724)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = ret4->zpp_inner;
HXDLIN( 724)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 724)						_this9->_validate();
            					}
            				}
HXDLIN( 724)				if ((ret4->zpp_inner->x == x2)) {
HXLINE( 724)					{
HXLINE( 724)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = ret4->zpp_inner;
HXDLIN( 724)						if (hx::IsNotNull( _this10->_validate )) {
HXLINE( 724)							_this10->_validate();
            						}
            					}
HXDLIN( 724)					ret6 = (ret4->zpp_inner->y == y2);
            				}
            				else {
HXLINE( 724)					ret6 = false;
            				}
HXDLIN( 724)				if (!(ret6)) {
HXLINE( 724)					{
HXLINE( 724)						ret4->zpp_inner->x = x2;
HXDLIN( 724)						ret4->zpp_inner->y = y2;
            					}
HXDLIN( 724)					{
HXLINE( 724)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = ret4->zpp_inner;
HXDLIN( 724)						if (hx::IsNotNull( _this11->_invalidate )) {
HXLINE( 724)							_this11->_invalidate(_this11);
            						}
            					}
            				}
            			}
HXDLIN( 724)			ret4->zpp_inner->weak = weak;
HXDLIN( 724)			ret = ret4;
            		}
HXLINE( 726)		if (point->zpp_inner->weak) {
HXLINE( 730)			HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,inner) = point->zpp_inner;
HXDLIN( 730)			point->zpp_inner->outer = null();
HXDLIN( 730)			point->zpp_inner = null();
HXDLIN( 730)			{
HXLINE( 730)				point->zpp_pool = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 730)				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = point;
            			}
HXDLIN( 730)			{
HXLINE( 730)				{
HXLINE( 730)					if (hx::IsNotNull( inner->outer )) {
HXLINE( 730)						inner->outer->zpp_inner = null();
HXDLIN( 730)						inner->outer = null();
            					}
HXDLIN( 730)					inner->_isimmutable = null();
HXDLIN( 730)					inner->_validate = null();
HXDLIN( 730)					inner->_invalidate = null();
            				}
HXDLIN( 730)				inner->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 730)				::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = inner;
            			}
            		}
HXLINE( 737)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mat23_obj,inverseTransform,return )

::String Mat23_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_743_toString)
            	HX_STACK_THIS(this)
HXLINE( 743)		return ((((((((((((HX_("{ a: ",22,fb,b9,e7) + this->zpp_inner->a) + HX_(" b: ",68,63,71,15)) + this->zpp_inner->b) + HX_(" c: ",a9,25,72,15)) + this->zpp_inner->c) + HX_(" d: ",ea,e7,72,15)) + this->zpp_inner->d) + HX_(" tx: ",4a,91,da,b9)) + this->zpp_inner->tx) + HX_(" ty: ",8b,53,db,b9)) + this->zpp_inner->ty) + HX_(" }",5d,1c,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,toString,return )

bool Mat23_obj::equiorthogonal(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_767_equiorthogonal)
            	HX_STACK_THIS(this)
HXLINE( 767)		if (this->singular()) {
HXLINE( 768)			return false;
            		}
            		else {
HXLINE( 771)			HX_VARI( Float,x) = ((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d));
HXLINE( 772)			if (((x * x) < ::nape::Config_obj::epsilon)) {
HXLINE( 773)				HX_VARI( Float,y) = ((((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->b * this->zpp_inner->b)) - (this->zpp_inner->c * this->zpp_inner->c)) - (this->zpp_inner->d * this->zpp_inner->d));
HXLINE( 774)				return ((y * y) < ::nape::Config_obj::epsilon);
            			}
            			else {
HXLINE( 777)				return false;
            			}
            		}
HXLINE( 767)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,equiorthogonal,return )

bool Mat23_obj::orthogonal(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_794_orthogonal)
            	HX_STACK_THIS(this)
HXLINE( 795)		HX_VARI( Float,x) = ((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d));
HXLINE( 796)		if (((x * x) < ::nape::Config_obj::epsilon)) {
HXLINE( 797)			HX_VARI( Float,y) = (((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->b * this->zpp_inner->b)) - (int)1);
HXLINE( 798)			HX_VARI( Float,z) = (((this->zpp_inner->c * this->zpp_inner->c) + (this->zpp_inner->d * this->zpp_inner->d)) - (int)1);
HXLINE( 799)			if (((y * y) < ::nape::Config_obj::epsilon)) {
HXLINE( 799)				return ((z * z) < ::nape::Config_obj::epsilon);
            			}
            			else {
HXLINE( 799)				return false;
            			}
            		}
            		else {
HXLINE( 802)			return false;
            		}
HXLINE( 796)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,orthogonal,return )

 ::nape::geom::Mat23 Mat23_obj::equiorthogonalise(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_817_equiorthogonalise)
            	HX_STACK_THIS(this)
HXLINE( 818)		if (!(this->equiorthogonal())) {
HXLINE( 819)			HX_VARI( Float,k1) = ::Math_obj::sqrt(((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->c * this->zpp_inner->c)));
HXLINE( 820)			HX_VARI( Float,k2) = ::Math_obj::sqrt(((this->zpp_inner->b * this->zpp_inner->b) + (this->zpp_inner->d * this->zpp_inner->d)));
HXLINE( 826)			HX_VARI( Float,k) = ((Float)(k1 + k2) / (Float)(int)2);
HXLINE( 827)			k1 = ((Float)k / (Float)k1);
HXLINE( 828)			k2 = ((Float)k / (Float)k2);
HXLINE( 829)			{
HXLINE( 829)				HX_VARI(  ::nape::geom::Mat23,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 829)				{
HXLINE( 829)					_g->zpp_inner->a = (_g->zpp_inner->a * k1);
HXDLIN( 829)					{
HXLINE( 829)						HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = _g->zpp_inner;
HXDLIN( 829)						if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 829)							_this->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 830)			{
HXLINE( 830)				HX_VARI_NAME(  ::nape::geom::Mat23,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 830)				{
HXLINE( 830)					_g1->zpp_inner->c = (_g1->zpp_inner->c * k1);
HXDLIN( 830)					{
HXLINE( 830)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this1,"_this") = _g1->zpp_inner;
HXDLIN( 830)						if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 830)							_this1->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 831)			{
HXLINE( 831)				HX_VARI_NAME(  ::nape::geom::Mat23,_g2,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 831)				{
HXLINE( 831)					_g2->zpp_inner->b = (_g2->zpp_inner->b * k2);
HXDLIN( 831)					{
HXLINE( 831)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this2,"_this") = _g2->zpp_inner;
HXDLIN( 831)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 831)							_this2->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 832)			{
HXLINE( 832)				HX_VARI_NAME(  ::nape::geom::Mat23,_g3,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 832)				{
HXLINE( 832)					_g3->zpp_inner->d = (_g3->zpp_inner->d * k2);
HXDLIN( 832)					{
HXLINE( 832)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this3,"_this") = _g3->zpp_inner;
HXDLIN( 832)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 832)							_this3->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 834)			HX_VARI( Float,ang) = ((((Float)0.25) * ::Math_obj::PI) - (((Float)0.5) * ::Math_obj::acos(((Float)((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d)) / (Float)(k * k)))));
HXLINE( 835)			if ((((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)) > (int)0)) {
HXLINE( 836)				ang = -(ang);
            			}
HXLINE( 838)			HX_VARI( Float,sin) = ::Math_obj::sin(ang);
HXLINE( 839)			HX_VARI( Float,cos) = ::Math_obj::cos(ang);
HXLINE( 840)			HX_VARI( Float,a2) = ((this->zpp_inner->a * cos) - (this->zpp_inner->c * sin));
HXLINE( 841)			HX_VARI( Float,b2) = ((this->zpp_inner->b * cos) + (this->zpp_inner->d * sin));
HXLINE( 842)			{
HXLINE( 842)				this->zpp_inner->c = ((this->zpp_inner->c * cos) + (this->zpp_inner->a * sin));
HXDLIN( 842)				{
HXLINE( 842)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this4,"_this") = this->zpp_inner;
HXDLIN( 842)					if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 842)						_this4->_invalidate();
            					}
            				}
            			}
HXLINE( 843)			{
HXLINE( 843)				this->zpp_inner->a = a2;
HXDLIN( 843)				{
HXLINE( 843)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this5,"_this") = this->zpp_inner;
HXDLIN( 843)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 843)						_this5->_invalidate();
            					}
            				}
            			}
HXLINE( 844)			{
HXLINE( 844)				this->zpp_inner->d = ((this->zpp_inner->d * cos) - (this->zpp_inner->b * sin));
HXDLIN( 844)				{
HXLINE( 844)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this6,"_this") = this->zpp_inner;
HXDLIN( 844)					if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 844)						_this6->_invalidate();
            					}
            				}
            			}
HXLINE( 845)			{
HXLINE( 845)				this->zpp_inner->b = b2;
HXDLIN( 845)				{
HXLINE( 845)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this7,"_this") = this->zpp_inner;
HXDLIN( 845)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 845)						_this7->_invalidate();
            					}
            				}
            			}
HXLINE( 846)			{
HXLINE( 846)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this8,"_this") = this->zpp_inner;
HXDLIN( 846)				if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 846)					_this8->_invalidate();
            				}
            			}
            		}
HXLINE( 848)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,equiorthogonalise,return )

 ::nape::geom::Mat23 Mat23_obj::orthogonalise(){
            	HX_STACKFRAME(&_hx_pos_7545a35db7efdc4e_862_orthogonalise)
            	HX_STACK_THIS(this)
HXLINE( 863)		if (!(this->orthogonal())) {
HXLINE( 864)			HX_VARI( Float,k1) = ::Math_obj::sqrt(((this->zpp_inner->a * this->zpp_inner->a) + (this->zpp_inner->c * this->zpp_inner->c)));
HXLINE( 865)			HX_VARI( Float,k2) = ::Math_obj::sqrt(((this->zpp_inner->b * this->zpp_inner->b) + (this->zpp_inner->d * this->zpp_inner->d)));
HXLINE( 872)			k1 = ((Float)(int)1 / (Float)k1);
HXLINE( 873)			k2 = ((Float)(int)1 / (Float)k2);
HXLINE( 874)			{
HXLINE( 874)				HX_VARI(  ::nape::geom::Mat23,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 874)				{
HXLINE( 874)					_g->zpp_inner->a = (_g->zpp_inner->a * k1);
HXDLIN( 874)					{
HXLINE( 874)						HX_VARI(  ::zpp_nape::geom::ZPP_Mat23,_this) = _g->zpp_inner;
HXDLIN( 874)						if (hx::IsNotNull( _this->_invalidate )) {
HXLINE( 874)							_this->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 875)			{
HXLINE( 875)				HX_VARI_NAME(  ::nape::geom::Mat23,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 875)				{
HXLINE( 875)					_g1->zpp_inner->c = (_g1->zpp_inner->c * k1);
HXDLIN( 875)					{
HXLINE( 875)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this1,"_this") = _g1->zpp_inner;
HXDLIN( 875)						if (hx::IsNotNull( _this1->_invalidate )) {
HXLINE( 875)							_this1->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 876)			{
HXLINE( 876)				HX_VARI_NAME(  ::nape::geom::Mat23,_g2,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 876)				{
HXLINE( 876)					_g2->zpp_inner->b = (_g2->zpp_inner->b * k2);
HXDLIN( 876)					{
HXLINE( 876)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this2,"_this") = _g2->zpp_inner;
HXDLIN( 876)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 876)							_this2->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 877)			{
HXLINE( 877)				HX_VARI_NAME(  ::nape::geom::Mat23,_g3,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 877)				{
HXLINE( 877)					_g3->zpp_inner->d = (_g3->zpp_inner->d * k2);
HXDLIN( 877)					{
HXLINE( 877)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this3,"_this") = _g3->zpp_inner;
HXDLIN( 877)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 877)							_this3->_invalidate();
            						}
            					}
            				}
            			}
HXLINE( 879)			HX_VARI( Float,ang) = ((((Float)0.25) * ::Math_obj::PI) - (((Float)0.5) * ::Math_obj::acos(((Float)((this->zpp_inner->a * this->zpp_inner->b) + (this->zpp_inner->c * this->zpp_inner->d)) / (Float)(int)1))));
HXLINE( 880)			if ((((this->zpp_inner->a * this->zpp_inner->d) - (this->zpp_inner->b * this->zpp_inner->c)) > (int)0)) {
HXLINE( 881)				ang = -(ang);
            			}
HXLINE( 883)			HX_VARI( Float,sin) = ::Math_obj::sin(ang);
HXLINE( 884)			HX_VARI( Float,cos) = ::Math_obj::cos(ang);
HXLINE( 885)			HX_VARI( Float,a2) = ((this->zpp_inner->a * cos) - (this->zpp_inner->c * sin));
HXLINE( 886)			HX_VARI( Float,b2) = ((this->zpp_inner->b * cos) + (this->zpp_inner->d * sin));
HXLINE( 887)			{
HXLINE( 887)				this->zpp_inner->c = ((this->zpp_inner->c * cos) + (this->zpp_inner->a * sin));
HXDLIN( 887)				{
HXLINE( 887)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this4,"_this") = this->zpp_inner;
HXDLIN( 887)					if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 887)						_this4->_invalidate();
            					}
            				}
            			}
HXLINE( 888)			{
HXLINE( 888)				this->zpp_inner->a = a2;
HXDLIN( 888)				{
HXLINE( 888)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this5,"_this") = this->zpp_inner;
HXDLIN( 888)					if (hx::IsNotNull( _this5->_invalidate )) {
HXLINE( 888)						_this5->_invalidate();
            					}
            				}
            			}
HXLINE( 889)			{
HXLINE( 889)				this->zpp_inner->d = ((this->zpp_inner->d * cos) - (this->zpp_inner->b * sin));
HXDLIN( 889)				{
HXLINE( 889)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this6,"_this") = this->zpp_inner;
HXDLIN( 889)					if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 889)						_this6->_invalidate();
            					}
            				}
            			}
HXLINE( 890)			{
HXLINE( 890)				this->zpp_inner->b = b2;
HXDLIN( 890)				{
HXLINE( 890)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this7,"_this") = this->zpp_inner;
HXDLIN( 890)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 890)						_this7->_invalidate();
            					}
            				}
            			}
HXLINE( 891)			{
HXLINE( 891)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,_this8,"_this") = this->zpp_inner;
HXDLIN( 891)				if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 891)					_this8->_invalidate();
            				}
            			}
            		}
HXLINE( 893)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mat23_obj,orthogonalise,return )

 ::nape::geom::Mat23 Mat23_obj::fromMatrix( ::openfl::_legacy::geom::Matrix matrix){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_453_fromMatrix)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 453)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,matrix->a,matrix->c,matrix->b,matrix->d,matrix->tx,matrix->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,fromMatrix,return )

 ::nape::geom::Mat23 Mat23_obj::rotation(Float angle){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_490_rotation)
            	HX_STACK_ARG(angle,"angle")
HXLINE( 496)		HX_VARI( Float,cos) = ::Math_obj::cos(angle);
HXLINE( 497)		HX_VARI( Float,sin) = ::Math_obj::sin(angle);
HXLINE( 498)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,cos,-(sin),sin,cos,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mat23_obj,rotation,return )

 ::nape::geom::Mat23 Mat23_obj::translation(Float tx,Float ty){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_514_translation)
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 514)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,(int)1,tx,ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mat23_obj,translation,return )

 ::nape::geom::Mat23 Mat23_obj::scale(Float sx,Float sy){
            	HX_GC_STACKFRAME(&_hx_pos_7545a35db7efdc4e_530_scale)
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
HXLINE( 530)		return  ::nape::geom::Mat23_obj::__alloc( HX_CTX ,sx,(int)0,(int)0,sy,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mat23_obj,scale,return )


hx::ObjectPtr< Mat23_obj > Mat23_obj::__new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	hx::ObjectPtr< Mat23_obj > __this = new Mat23_obj();
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

hx::ObjectPtr< Mat23_obj > Mat23_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	Mat23_obj *__this = (Mat23_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mat23_obj), true, "nape.geom.Mat23"));
	*(void **)__this = Mat23_obj::_hx_vtable;
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

Mat23_obj::Mat23_obj()
{
}

void Mat23_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mat23);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void Mat23_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val Mat23_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_a()); }
		if (HX_FIELD_EQ(inName,"b") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_b()); }
		if (HX_FIELD_EQ(inName,"c") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_c()); }
		if (HX_FIELD_EQ(inName,"d") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_d()); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_tx()); }
		if (HX_FIELD_EQ(inName,"ty") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_ty()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_a") ) { return hx::Val( get_a_dyn()); }
		if (HX_FIELD_EQ(inName,"set_a") ) { return hx::Val( set_a_dyn()); }
		if (HX_FIELD_EQ(inName,"get_b") ) { return hx::Val( get_b_dyn()); }
		if (HX_FIELD_EQ(inName,"set_b") ) { return hx::Val( set_b_dyn()); }
		if (HX_FIELD_EQ(inName,"get_c") ) { return hx::Val( get_c_dyn()); }
		if (HX_FIELD_EQ(inName,"set_c") ) { return hx::Val( set_c_dyn()); }
		if (HX_FIELD_EQ(inName,"get_d") ) { return hx::Val( get_d_dyn()); }
		if (HX_FIELD_EQ(inName,"set_d") ) { return hx::Val( set_d_dyn()); }
		if (HX_FIELD_EQ(inName,"setAs") ) { return hx::Val( setAs_dyn()); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_tx") ) { return hx::Val( get_tx_dyn()); }
		if (HX_FIELD_EQ(inName,"set_tx") ) { return hx::Val( set_tx_dyn()); }
		if (HX_FIELD_EQ(inName,"get_ty") ) { return hx::Val( get_ty_dyn()); }
		if (HX_FIELD_EQ(inName,"set_ty") ) { return hx::Val( set_ty_dyn()); }
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inverse") ) { return hx::Val( inverse_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toMatrix") ) { return hx::Val( toMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"singular") ) { return hx::Val( singular_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn()); }
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"orthogonal") ) { return hx::Val( orthogonal_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_determinant()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"orthogonalise") ) { return hx::Val( orthogonalise_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"equiorthogonal") ) { return hx::Val( equiorthogonal_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_determinant") ) { return hx::Val( get_determinant_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"inverseTransform") ) { return hx::Val( inverseTransform_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"equiorthogonalise") ) { return hx::Val( equiorthogonalise_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mat23_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { outValue = rotation_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromMatrix") ) { outValue = fromMatrix_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"translation") ) { outValue = translation_dyn(); return true; }
	}
	return false;
}

hx::Val Mat23_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_a(inValue) ); }
		if (HX_FIELD_EQ(inName,"b") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_b(inValue) ); }
		if (HX_FIELD_EQ(inName,"c") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_c(inValue) ); }
		if (HX_FIELD_EQ(inName,"d") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_d(inValue) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tx(inValue) ); }
		if (HX_FIELD_EQ(inName,"ty") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_ty(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::geom::ZPP_Mat23 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mat23_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("tx","\x84","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("ty","\x85","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mat23_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::geom::ZPP_Mat23*/ ,(int)offsetof(Mat23_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mat23_obj_sStaticStorageInfo = 0;
#endif

static ::String Mat23_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_a","\x38","\xa5","\x60","\x91"),
	HX_HCSTRING("set_a","\x44","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_b","\x39","\xa5","\x60","\x91"),
	HX_HCSTRING("set_b","\x45","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_c","\x3a","\xa5","\x60","\x91"),
	HX_HCSTRING("set_c","\x46","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_d","\x3b","\xa5","\x60","\x91"),
	HX_HCSTRING("set_d","\x47","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_tx","\xcd","\xfc","\x2f","\xa3"),
	HX_HCSTRING("set_tx","\x41","\x51","\x78","\x6f"),
	HX_HCSTRING("get_ty","\xce","\xfc","\x2f","\xa3"),
	HX_HCSTRING("set_ty","\x42","\x51","\x78","\x6f"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("setAs","\x34","\x81","\x2f","\x7a"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("toMatrix","\x1c","\xde","\x06","\xe3"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("singular","\xd7","\xa8","\x26","\x57"),
	HX_HCSTRING("inverse","\xb0","\x4b","\xf1","\x3d"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("inverseTransform","\x9c","\xcb","\xa5","\xe7"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equiorthogonal","\x39","\x5b","\x04","\x99"),
	HX_HCSTRING("orthogonal","\x79","\xf9","\xf3","\x18"),
	HX_HCSTRING("equiorthogonalise","\xa2","\xbf","\xe3","\x2d"),
	HX_HCSTRING("orthogonalise","\x62","\x89","\x58","\xa7"),
	::String(null()) };

static void Mat23_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mat23_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mat23_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mat23_obj::__mClass,"__mClass");
};

#endif

hx::Class Mat23_obj::__mClass;

static ::String Mat23_obj_sStaticFields[] = {
	HX_HCSTRING("fromMatrix","\x4b","\x3b","\x0c","\xff"),
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("translation","\xf1","\x30","\xa2","\x8a"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	::String(null())
};

void Mat23_obj::__register()
{
	hx::Object *dummy = new Mat23_obj;
	Mat23_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.Mat23","\xd5","\x84","\xf2","\x77");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mat23_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Mat23_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mat23_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mat23_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mat23_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mat23_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mat23_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mat23_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
