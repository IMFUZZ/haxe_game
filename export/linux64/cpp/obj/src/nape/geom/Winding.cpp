// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_geom_Winding
#include <nape/geom/Winding.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e0378536b3b06e1d_188_new,"nape.geom.Winding","new",0x17093480,"nape.geom.Winding.new","nape/geom/Winding.hx",188,0x1c896f50)
HX_DEFINE_STACK_FRAME(_hx_pos_e0378536b3b06e1d_199_toString,"nape.geom.Winding","toString",0x2d1a788c,"nape.geom.Winding.toString","nape/geom/Winding.hx",199,0x1c896f50)
HX_DEFINE_STACK_FRAME(_hx_pos_e0378536b3b06e1d_213_get_UNDEFINED,"nape.geom.Winding","get_UNDEFINED",0xc26e4e67,"nape.geom.Winding.get_UNDEFINED","nape/geom/Winding.hx",213,0x1c896f50)
HX_DEFINE_STACK_FRAME(_hx_pos_e0378536b3b06e1d_226_get_CLOCKWISE,"nape.geom.Winding","get_CLOCKWISE",0x62038dc9,"nape.geom.Winding.get_CLOCKWISE","nape/geom/Winding.hx",226,0x1c896f50)
HX_DEFINE_STACK_FRAME(_hx_pos_e0378536b3b06e1d_239_get_ANTICLOCKWISE,"nape.geom.Winding","get_ANTICLOCKWISE",0x8e22f967,"nape.geom.Winding.get_ANTICLOCKWISE","nape/geom/Winding.hx",239,0x1c896f50)
namespace nape{
namespace geom{

void Winding_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e0378536b3b06e1d_188_new)
            	HX_STACK_THIS(this)
            	}

Dynamic Winding_obj::__CreateEmpty() { return new Winding_obj; }

void *Winding_obj::_hx_vtable = 0;

Dynamic Winding_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Winding_obj > _hx_result = new Winding_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Winding_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x176ec556;
}

::String Winding_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_e0378536b3b06e1d_199_toString)
            	HX_STACK_THIS(this)
HXLINE( 199)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED )) {
HXLINE( 199)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 199)			::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN( 199)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 199)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED )) {
HXLINE( 199)			return HX_("UNDEFINED",70,ae,62,98);
            		}
            		else {
HXLINE( 200)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE )) {
HXLINE( 200)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 200)				::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN( 200)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 200)			if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE )) {
HXLINE( 200)				return HX_("CLOCKWISE",d2,ed,f7,37);
            			}
            			else {
HXLINE( 201)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE )) {
HXLINE( 201)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 201)					::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXDLIN( 201)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 201)				if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE )) {
HXLINE( 201)					return HX_("ANTICLOCKWISE",f0,91,62,14);
            				}
            				else {
HXLINE( 202)					return HX_("",00,00,00,00);
            				}
            			}
            		}
HXLINE( 199)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Winding_obj,toString,return )

 ::nape::geom::Winding Winding_obj::get_UNDEFINED(){
            	HX_GC_STACKFRAME(&_hx_pos_e0378536b3b06e1d_213_get_UNDEFINED)
HXLINE( 214)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED )) {
HXLINE( 215)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 216)			::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXLINE( 217)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 219)		return ::zpp_nape::util::ZPP_Flags_obj::Winding_UNDEFINED;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Winding_obj,get_UNDEFINED,return )

 ::nape::geom::Winding Winding_obj::get_CLOCKWISE(){
            	HX_GC_STACKFRAME(&_hx_pos_e0378536b3b06e1d_226_get_CLOCKWISE)
HXLINE( 227)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE )) {
HXLINE( 228)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 229)			::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXLINE( 230)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 232)		return ::zpp_nape::util::ZPP_Flags_obj::Winding_CLOCKWISE;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Winding_obj,get_CLOCKWISE,return )

 ::nape::geom::Winding Winding_obj::get_ANTICLOCKWISE(){
            	HX_GC_STACKFRAME(&_hx_pos_e0378536b3b06e1d_239_get_ANTICLOCKWISE)
HXLINE( 240)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE )) {
HXLINE( 241)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 242)			::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE =  ::nape::geom::Winding_obj::__alloc( HX_CTX );
HXLINE( 243)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 245)		return ::zpp_nape::util::ZPP_Flags_obj::Winding_ANTICLOCKWISE;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Winding_obj,get_ANTICLOCKWISE,return )


hx::ObjectPtr< Winding_obj > Winding_obj::__new() {
	hx::ObjectPtr< Winding_obj > __this = new Winding_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Winding_obj > Winding_obj::__alloc(hx::Ctx *_hx_ctx) {
	Winding_obj *__this = (Winding_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Winding_obj), false, "nape.geom.Winding"));
	*(void **)__this = Winding_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Winding_obj::Winding_obj()
{
}

hx::Val Winding_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Winding_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"UNDEFINED") ) { if (inCallProp == hx::paccAlways) { outValue = get_UNDEFINED(); return true; } }
		if (HX_FIELD_EQ(inName,"CLOCKWISE") ) { if (inCallProp == hx::paccAlways) { outValue = get_CLOCKWISE(); return true; } }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_UNDEFINED") ) { outValue = get_UNDEFINED_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_CLOCKWISE") ) { outValue = get_CLOCKWISE_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ANTICLOCKWISE") ) { if (inCallProp == hx::paccAlways) { outValue = get_ANTICLOCKWISE(); return true; } }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_ANTICLOCKWISE") ) { outValue = get_ANTICLOCKWISE_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Winding_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Winding_obj_sStaticStorageInfo = 0;
#endif

static ::String Winding_obj_sMemberFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Winding_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Winding_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Winding_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Winding_obj::__mClass,"__mClass");
};

#endif

hx::Class Winding_obj::__mClass;

static ::String Winding_obj_sStaticFields[] = {
	HX_HCSTRING("get_UNDEFINED","\x47","\x82","\xc6","\x59"),
	HX_HCSTRING("get_CLOCKWISE","\xa9","\xc1","\x5b","\xf9"),
	HX_HCSTRING("get_ANTICLOCKWISE","\x47","\x9d","\xd2","\x1a"),
	::String(null())
};

void Winding_obj::__register()
{
	hx::Object *dummy = new Winding_obj;
	Winding_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.geom.Winding","\x8e","\x34","\xbd","\xbc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Winding_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Winding_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Winding_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Winding_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Winding_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Winding_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Winding_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Winding_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace geom
