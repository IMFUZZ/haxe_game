// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbTypeIterator
#include <nape/callbacks/CbTypeIterator.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerIterator
#include <nape/callbacks/ListenerIterator.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintIterator
#include <nape/constraint/ConstraintIterator.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterIterator
#include <nape/dynamics/ArbiterIterator.h>
#endif
#ifndef INCLUDED_nape_dynamics_ContactIterator
#include <nape/dynamics/ContactIterator.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionGroupIterator
#include <nape/dynamics/InteractionGroupIterator.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResultIterator
#include <nape/geom/ConvexResultIterator.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPoly
#include <nape/geom/GeomPoly.h>
#endif
#ifndef INCLUDED_nape_geom_GeomPolyIterator
#include <nape/geom/GeomPolyIterator.h>
#endif
#ifndef INCLUDED_nape_geom_Mat23
#include <nape/geom/Mat23.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultIterator
#include <nape/geom/RayResultIterator.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2Iterator
#include <nape/geom/Vec2Iterator.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2List
#include <nape/geom/Vec2List.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyIterator
#include <nape/phys/BodyIterator.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundIterator
#include <nape/phys/CompoundIterator.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_InteractorIterator
#include <nape/phys/InteractorIterator.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_EdgeIterator
#include <nape/shape/EdgeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeIterator
#include <nape/shape/ShapeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_util_Debug
#include <nape/util/Debug.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_CapsStyle
#include <openfl/_legacy/display/CapsStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Graphics
#include <openfl/_legacy/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_JointStyle
#include <openfl/_legacy/display/JointStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_LineScaleMode
#include <openfl/_legacy/display/LineScaleMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Shape
#include <openfl/_legacy/display/Shape.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_CutInt
#include <zpp_nape/geom/ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_CutVert
#include <zpp_nape/geom/ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVert
#include <zpp_nape/geom/ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_GeomVertexIterator
#include <zpp_nape/geom/ZPP_GeomVertexIterator.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchPair
#include <zpp_nape/geom/ZPP_MarchPair.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_MarchSpan
#include <zpp_nape/geom/ZPP_MarchSpan.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Mat23
#include <zpp_nape/geom/ZPP_Mat23.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionPair
#include <zpp_nape/geom/ZPP_PartitionPair.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionVertex
#include <zpp_nape/geom/ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_PartitionedPoly
#include <zpp_nape/geom/ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleEvent
#include <zpp_nape/geom/ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleSeg
#include <zpp_nape/geom/ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimpleVert
#include <zpp_nape/geom/ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimplifyP
#include <zpp_nape/geom/ZPP_SimplifyP.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SimplifyV
#include <zpp_nape/geom/ZPP_SimplifyV.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ToiEvent
#include <zpp_nape/geom/ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Island
#include <zpp_nape/space/ZPP_Island.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepData
#include <zpp_nape/space/ZPP_SweepData.h>
#endif
#ifndef INCLUDED_zpp_nape_util_Hashable2_Boolfalse
#include <zpp_nape/util/Hashable2_Boolfalse.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ConvexResult
#include <zpp_nape/util/ZNPNode_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_RayResult
#include <zpp_nape/util/ZNPNode_RayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_AABBNode
#include <zpp_nape/util/ZNPNode_ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_AABBPair
#include <zpp_nape/util/ZNPNode_ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CallbackSet
#include <zpp_nape/util/ZNPNode_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSet
#include <zpp_nape/util/ZNPNode_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbType
#include <zpp_nape/util/ZNPNode_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Component
#include <zpp_nape/util/ZNPNode_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Compound
#include <zpp_nape/util/ZNPNode_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CutInt
#include <zpp_nape/util/ZNPNode_ZPP_CutInt.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CutVert
#include <zpp_nape/util/ZNPNode_ZPP_CutVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_GeomPoly
#include <zpp_nape/util/ZNPNode_ZPP_GeomPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_GeomVert
#include <zpp_nape/util/ZNPNode_ZPP_GeomVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionGroup
#include <zpp_nape/util/ZNPNode_ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Listener
#include <zpp_nape/util/ZNPNode_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionVertex
#include <zpp_nape/util/ZNPNode_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_PartitionedPoly
#include <zpp_nape/util/ZNPNode_ZPP_PartitionedPoly.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimpleEvent
#include <zpp_nape/util/ZNPNode_ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimpleVert
#include <zpp_nape/util/ZNPNode_ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SimplifyP
#include <zpp_nape/util/ZNPNode_ZPP_SimplifyP.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ToiEvent
#include <zpp_nape/util/ZNPNode_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Vec2
#include <zpp_nape/util/ZNPNode_ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Debug
#include <zpp_nape/util/ZPP_Debug.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_Body
#include <zpp_nape/util/ZPP_Set_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSet
#include <zpp_nape/util/ZPP_Set_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSetPair
#include <zpp_nape/util/ZPP_Set_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionPair
#include <zpp_nape/util/ZPP_Set_ZPP_PartitionPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_PartitionVertex
#include <zpp_nape/util/ZPP_Set_ZPP_PartitionVertex.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleEvent
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleSeg
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleSeg.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_SimpleVert
#include <zpp_nape/util/ZPP_Set_ZPP_SimpleVert.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeDebug
#include <zpp_nape/util/ZPP_ShapeDebug.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_179_new,"nape.util.Debug","new",0xf98ab5ff,"nape.util.Debug.new","nape/util/Debug.hx",179,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1192_get_bgColour,"nape.util.Debug","get_bgColour",0x8c2c567b,"nape.util.Debug.get_bgColour","nape/util/Debug.hx",1192,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1194_set_bgColour,"nape.util.Debug","set_bgColour",0xa12579ef,"nape.util.Debug.set_bgColour","nape/util/Debug.hx",1194,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1244_get_display,"nape.util.Debug","get_display",0x5758a6f8,"nape.util.Debug.get_display","nape/util/Debug.hx",1244,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1273_get_transform,"nape.util.Debug","get_transform",0xdfc2c3a2,"nape.util.Debug.get_transform","nape/util/Debug.hx",1273,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1277_set_transform,"nape.util.Debug","set_transform",0x24c8a5ae,"nape.util.Debug.set_transform","nape/util/Debug.hx",1277,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1289_clear,"nape.util.Debug","clear",0x294e3cec,"nape.util.Debug.clear","nape/util/Debug.hx",1289,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1295_flush,"nape.util.Debug","flush",0xe38e2e23,"nape.util.Debug.flush","nape/util/Debug.hx",1295,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1310_draw,"nape.util.Debug","draw",0x59423185,"nape.util.Debug.draw","nape/util/Debug.hx",1310,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1321_drawLine,"nape.util.Debug","drawLine",0x8b861c19,"nape.util.Debug.drawLine","nape/util/Debug.hx",1321,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1333_drawCurve,"nape.util.Debug","drawCurve",0x6328e8ea,"nape.util.Debug.drawCurve","nape/util/Debug.hx",1333,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1346_drawCircle,"nape.util.Debug","drawCircle",0x77c58975,"nape.util.Debug.drawCircle","nape/util/Debug.hx",1346,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1356_drawAABB,"nape.util.Debug","drawAABB",0x842242a5,"nape.util.Debug.drawAABB","nape/util/Debug.hx",1356,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1368_drawFilledTriangle,"nape.util.Debug","drawFilledTriangle",0x76257eef,"nape.util.Debug.drawFilledTriangle","nape/util/Debug.hx",1368,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1381_drawFilledCircle,"nape.util.Debug","drawFilledCircle",0x96090a77,"nape.util.Debug.drawFilledCircle","nape/util/Debug.hx",1381,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1395_drawPolygon,"nape.util.Debug","drawPolygon",0x71ed6375,"nape.util.Debug.drawPolygon","nape/util/Debug.hx",1395,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1409_drawFilledPolygon,"nape.util.Debug","drawFilledPolygon",0xcebac433,"nape.util.Debug.drawFilledPolygon","nape/util/Debug.hx",1409,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1423_drawSpring,"nape.util.Debug","drawSpring",0xe54dee32,"nape.util.Debug.drawSpring","nape/util/Debug.hx",1423,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_184_version,"nape.util.Debug","version",0x98b58837,"nape.util.Debug.version","nape/util/Debug.hx",184,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_189_clearObjectPools,"nape.util.Debug","clearObjectPools",0x7192474c,"nape.util.Debug.clearObjectPools","nape/util/Debug.hx",189,0xfa9d0ab1)
HX_DEFINE_STACK_FRAME(_hx_pos_a931a04804ee9b05_1091_createGraphic,"nape.util.Debug","createGraphic",0x3515f56b,"nape.util.Debug.createGraphic","nape/util/Debug.hx",1091,0xfa9d0ab1)
namespace nape{
namespace util{

void Debug_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_179_new)
            	HX_STACK_THIS(this)
HXLINE(1259)		this->cullingEnabled = false;
HXLINE(1213)		this->colour = null();
HXLINE(1181)		this->drawConstraints = false;
HXLINE(1176)		this->drawShapeAngleIndicators = false;
HXLINE(1169)		this->drawShapeDetail = false;
HXLINE(1162)		this->drawBodyDetail = false;
HXLINE(1155)		this->drawBodies = false;
HXLINE(1150)		this->drawSensorArbiters = false;
HXLINE(1143)		this->drawFluidArbiters = false;
HXLINE(1136)		this->drawCollisionArbiters = false;
HXLINE(1129)		this->zpp_inner = null();
HXLINE(1221)		this->drawCollisionArbiters = false;
HXLINE(1222)		this->drawFluidArbiters = false;
HXLINE(1223)		this->drawSensorArbiters = false;
HXLINE(1224)		this->drawBodies = true;
HXLINE(1225)		this->drawShapeAngleIndicators = true;
HXLINE(1226)		this->drawBodyDetail = false;
HXLINE(1227)		this->drawShapeDetail = false;
HXLINE(1228)		this->drawConstraints = false;
HXLINE(1229)		this->cullingEnabled = false;
HXLINE(1230)		this->colour = null();
            	}

Dynamic Debug_obj::__CreateEmpty() { return new Debug_obj; }

void *Debug_obj::_hx_vtable = 0;

Dynamic Debug_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Debug_obj > _hx_result = new Debug_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Debug_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x22050309;
}

int Debug_obj::get_bgColour(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1192_get_bgColour)
            	HX_STACK_THIS(this)
HXLINE(1192)		return this->zpp_inner->bg_col;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,get_bgColour,return )

int Debug_obj::set_bgColour(int bgColour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1194_set_bgColour)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bgColour,"bgColour")
HXLINE(1198)		this->zpp_inner->d_shape->setbg(bgColour);
HXLINE(1201)		return this->zpp_inner->bg_col;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,set_bgColour,return )

 ::openfl::_legacy::display::DisplayObject Debug_obj::get_display(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1244_get_display)
            	HX_STACK_THIS(this)
HXLINE(1244)		return this->zpp_inner->d_shape->shape;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,get_display,return )

 ::nape::geom::Mat23 Debug_obj::get_transform(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1273_get_transform)
            	HX_STACK_THIS(this)
HXLINE(1274)		if (hx::IsNull( this->zpp_inner->xform )) {
HXLINE(1274)			this->zpp_inner->setform();
            		}
HXLINE(1275)		return this->zpp_inner->xform->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,get_transform,return )

 ::nape::geom::Mat23 Debug_obj::set_transform( ::nape::geom::Mat23 transform){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1277_set_transform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transform,"transform")
HXLINE(1282)		if (hx::IsNull( this->zpp_inner->xform )) {
HXLINE(1282)			this->zpp_inner->setform();
            		}
HXDLIN(1282)		this->zpp_inner->xform->outer->set(transform);
HXLINE(1284)		if (hx::IsNull( this->zpp_inner->xform )) {
HXLINE(1284)			this->zpp_inner->setform();
            		}
HXDLIN(1284)		return this->zpp_inner->xform->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,set_transform,return )

void Debug_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1289_clear)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,clear,(void))

void Debug_obj::flush(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1295_flush)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,flush,(void))

void Debug_obj::draw( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1310_draw)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(object,"object")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,draw,(void))

void Debug_obj::drawLine( ::nape::geom::Vec2 start, ::nape::geom::Vec2 end,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1321_drawLine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Debug_obj,drawLine,(void))

void Debug_obj::drawCurve( ::nape::geom::Vec2 start, ::nape::geom::Vec2 control, ::nape::geom::Vec2 end,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1333_drawCurve)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(control,"control")
            	HX_STACK_ARG(end,"end")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC4(Debug_obj,drawCurve,(void))

void Debug_obj::drawCircle( ::nape::geom::Vec2 position,Float radius,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1346_drawCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Debug_obj,drawCircle,(void))

void Debug_obj::drawAABB( ::nape::geom::AABB aabb,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1356_drawAABB)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(aabb,"aabb")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Debug_obj,drawAABB,(void))

void Debug_obj::drawFilledTriangle( ::nape::geom::Vec2 p0, ::nape::geom::Vec2 p1, ::nape::geom::Vec2 p2,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1368_drawFilledTriangle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p0,"p0")
            	HX_STACK_ARG(p1,"p1")
            	HX_STACK_ARG(p2,"p2")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC4(Debug_obj,drawFilledTriangle,(void))

void Debug_obj::drawFilledCircle( ::nape::geom::Vec2 position,Float radius,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1381_drawFilledCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(position,"position")
            	HX_STACK_ARG(radius,"radius")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC3(Debug_obj,drawFilledCircle,(void))

void Debug_obj::drawPolygon( ::Dynamic polygon,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1395_drawPolygon)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(polygon,"polygon")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Debug_obj,drawPolygon,(void))

void Debug_obj::drawFilledPolygon( ::Dynamic polygon,int colour){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1409_drawFilledPolygon)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(polygon,"polygon")
            	HX_STACK_ARG(colour,"colour")
            	}


HX_DEFINE_DYNAMIC_FUNC2(Debug_obj,drawFilledPolygon,(void))

void Debug_obj::drawSpring( ::nape::geom::Vec2 start, ::nape::geom::Vec2 end,int colour,hx::Null< int >  __o_coils,hx::Null< Float >  __o_radius){
int coils = __o_coils.Default(3);
Float radius = __o_radius.Default(((Float)3.0));
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_1423_drawSpring)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
            	HX_STACK_ARG(colour,"colour")
            	HX_STACK_ARG(coils,"coils")
            	HX_STACK_ARG(radius,"radius")
            	}


HX_DEFINE_DYNAMIC_FUNC5(Debug_obj,drawSpring,(void))

::String Debug_obj::version(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_184_version)
HXLINE( 184)		return HX_("Nape 2.0.19",3a,f2,53,c7);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,version,return )

void Debug_obj::clearObjectPools(){
            	HX_STACKFRAME(&_hx_pos_a931a04804ee9b05_189_clearObjectPools)
HXLINE( 192)		while(hx::IsNotNull( ::nape::constraint::ConstraintIterator_obj::zpp_pool )){
HXLINE( 193)			HX_VARI(  ::nape::constraint::ConstraintIterator,nxt) = ::nape::constraint::ConstraintIterator_obj::zpp_pool->zpp_next;
HXLINE( 194)			::nape::constraint::ConstraintIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 195)			::nape::constraint::ConstraintIterator_obj::zpp_pool = nxt;
            		}
HXLINE( 199)		while(hx::IsNotNull( ::nape::phys::InteractorIterator_obj::zpp_pool )){
HXLINE( 200)			HX_VARI_NAME(  ::nape::phys::InteractorIterator,nxt1,"nxt") = ::nape::phys::InteractorIterator_obj::zpp_pool->zpp_next;
HXLINE( 201)			::nape::phys::InteractorIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 202)			::nape::phys::InteractorIterator_obj::zpp_pool = nxt1;
            		}
HXLINE( 206)		while(hx::IsNotNull( ::nape::phys::BodyIterator_obj::zpp_pool )){
HXLINE( 207)			HX_VARI_NAME(  ::nape::phys::BodyIterator,nxt2,"nxt") = ::nape::phys::BodyIterator_obj::zpp_pool->zpp_next;
HXLINE( 208)			::nape::phys::BodyIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 209)			::nape::phys::BodyIterator_obj::zpp_pool = nxt2;
            		}
HXLINE( 213)		while(hx::IsNotNull( ::nape::phys::CompoundIterator_obj::zpp_pool )){
HXLINE( 214)			HX_VARI_NAME(  ::nape::phys::CompoundIterator,nxt3,"nxt") = ::nape::phys::CompoundIterator_obj::zpp_pool->zpp_next;
HXLINE( 215)			::nape::phys::CompoundIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 216)			::nape::phys::CompoundIterator_obj::zpp_pool = nxt3;
            		}
HXLINE( 220)		while(hx::IsNotNull( ::nape::callbacks::ListenerIterator_obj::zpp_pool )){
HXLINE( 221)			HX_VARI_NAME(  ::nape::callbacks::ListenerIterator,nxt4,"nxt") = ::nape::callbacks::ListenerIterator_obj::zpp_pool->zpp_next;
HXLINE( 222)			::nape::callbacks::ListenerIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 223)			::nape::callbacks::ListenerIterator_obj::zpp_pool = nxt4;
            		}
HXLINE( 227)		while(hx::IsNotNull( ::nape::callbacks::CbTypeIterator_obj::zpp_pool )){
HXLINE( 228)			HX_VARI_NAME(  ::nape::callbacks::CbTypeIterator,nxt5,"nxt") = ::nape::callbacks::CbTypeIterator_obj::zpp_pool->zpp_next;
HXLINE( 229)			::nape::callbacks::CbTypeIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 230)			::nape::callbacks::CbTypeIterator_obj::zpp_pool = nxt5;
            		}
HXLINE( 234)		while(hx::IsNotNull( ::nape::geom::ConvexResultIterator_obj::zpp_pool )){
HXLINE( 235)			HX_VARI_NAME(  ::nape::geom::ConvexResultIterator,nxt6,"nxt") = ::nape::geom::ConvexResultIterator_obj::zpp_pool->zpp_next;
HXLINE( 236)			::nape::geom::ConvexResultIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 237)			::nape::geom::ConvexResultIterator_obj::zpp_pool = nxt6;
            		}
HXLINE( 241)		while(hx::IsNotNull( ::nape::geom::GeomPolyIterator_obj::zpp_pool )){
HXLINE( 242)			HX_VARI_NAME(  ::nape::geom::GeomPolyIterator,nxt7,"nxt") = ::nape::geom::GeomPolyIterator_obj::zpp_pool->zpp_next;
HXLINE( 243)			::nape::geom::GeomPolyIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 244)			::nape::geom::GeomPolyIterator_obj::zpp_pool = nxt7;
            		}
HXLINE( 248)		while(hx::IsNotNull( ::nape::geom::Vec2Iterator_obj::zpp_pool )){
HXLINE( 249)			HX_VARI_NAME(  ::nape::geom::Vec2Iterator,nxt8,"nxt") = ::nape::geom::Vec2Iterator_obj::zpp_pool->zpp_next;
HXLINE( 250)			::nape::geom::Vec2Iterator_obj::zpp_pool->zpp_next = null();
HXLINE( 251)			::nape::geom::Vec2Iterator_obj::zpp_pool = nxt8;
            		}
HXLINE( 255)		while(hx::IsNotNull( ::nape::geom::RayResultIterator_obj::zpp_pool )){
HXLINE( 256)			HX_VARI_NAME(  ::nape::geom::RayResultIterator,nxt9,"nxt") = ::nape::geom::RayResultIterator_obj::zpp_pool->zpp_next;
HXLINE( 257)			::nape::geom::RayResultIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 258)			::nape::geom::RayResultIterator_obj::zpp_pool = nxt9;
            		}
HXLINE( 262)		while(hx::IsNotNull( ::nape::shape::ShapeIterator_obj::zpp_pool )){
HXLINE( 263)			HX_VARI_NAME(  ::nape::shape::ShapeIterator,nxt10,"nxt") = ::nape::shape::ShapeIterator_obj::zpp_pool->zpp_next;
HXLINE( 264)			::nape::shape::ShapeIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 265)			::nape::shape::ShapeIterator_obj::zpp_pool = nxt10;
            		}
HXLINE( 269)		while(hx::IsNotNull( ::nape::shape::EdgeIterator_obj::zpp_pool )){
HXLINE( 270)			HX_VARI_NAME(  ::nape::shape::EdgeIterator,nxt11,"nxt") = ::nape::shape::EdgeIterator_obj::zpp_pool->zpp_next;
HXLINE( 271)			::nape::shape::EdgeIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 272)			::nape::shape::EdgeIterator_obj::zpp_pool = nxt11;
            		}
HXLINE( 276)		while(hx::IsNotNull( ::nape::dynamics::ContactIterator_obj::zpp_pool )){
HXLINE( 277)			HX_VARI_NAME(  ::nape::dynamics::ContactIterator,nxt12,"nxt") = ::nape::dynamics::ContactIterator_obj::zpp_pool->zpp_next;
HXLINE( 278)			::nape::dynamics::ContactIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 279)			::nape::dynamics::ContactIterator_obj::zpp_pool = nxt12;
            		}
HXLINE( 283)		while(hx::IsNotNull( ::nape::dynamics::ArbiterIterator_obj::zpp_pool )){
HXLINE( 284)			HX_VARI_NAME(  ::nape::dynamics::ArbiterIterator,nxt13,"nxt") = ::nape::dynamics::ArbiterIterator_obj::zpp_pool->zpp_next;
HXLINE( 285)			::nape::dynamics::ArbiterIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 286)			::nape::dynamics::ArbiterIterator_obj::zpp_pool = nxt13;
            		}
HXLINE( 290)		while(hx::IsNotNull( ::nape::dynamics::InteractionGroupIterator_obj::zpp_pool )){
HXLINE( 291)			HX_VARI_NAME(  ::nape::dynamics::InteractionGroupIterator,nxt14,"nxt") = ::nape::dynamics::InteractionGroupIterator_obj::zpp_pool->zpp_next;
HXLINE( 292)			::nape::dynamics::InteractionGroupIterator_obj::zpp_pool->zpp_next = null();
HXLINE( 293)			::nape::dynamics::InteractionGroupIterator_obj::zpp_pool = nxt14;
            		}
HXLINE( 298)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool )){
HXLINE( 299)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbType,nxt15,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool->next;
HXLINE( 300)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool->next = null();
HXLINE( 301)			::zpp_nape::util::ZNPNode_ZPP_CbType_obj::zpp_pool = nxt15;
            		}
HXLINE( 307)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool )){
HXLINE( 308)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CallbackSet,nxt16,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool->next;
HXLINE( 309)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool->next = null();
HXLINE( 310)			::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = nxt16;
            		}
HXLINE( 316)		while(hx::IsNotNull( ::zpp_nape::phys::ZPP_Material_obj::zpp_pool )){
HXLINE( 317)			HX_VARI_NAME(  ::zpp_nape::phys::ZPP_Material,nxt17,"nxt") = ::zpp_nape::phys::ZPP_Material_obj::zpp_pool->next;
HXLINE( 318)			::zpp_nape::phys::ZPP_Material_obj::zpp_pool->next = null();
HXLINE( 319)			::zpp_nape::phys::ZPP_Material_obj::zpp_pool = nxt17;
            		}
HXLINE( 325)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool )){
HXLINE( 326)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Shape,nxt18,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool->next;
HXLINE( 327)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool->next = null();
HXLINE( 328)			::zpp_nape::util::ZNPNode_ZPP_Shape_obj::zpp_pool = nxt18;
            		}
HXLINE( 334)		while(hx::IsNotNull( ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool )){
HXLINE( 335)			HX_VARI_NAME(  ::zpp_nape::phys::ZPP_FluidProperties,nxt19,"nxt") = ::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool->next;
HXLINE( 336)			::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool->next = null();
HXLINE( 337)			::zpp_nape::phys::ZPP_FluidProperties_obj::zpp_pool = nxt19;
            		}
HXLINE( 343)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool )){
HXLINE( 344)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Body,nxt20,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool->next;
HXLINE( 345)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool->next = null();
HXLINE( 346)			::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = nxt20;
            		}
HXLINE( 352)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool )){
HXLINE( 353)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Constraint,nxt21,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool->next;
HXLINE( 354)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool->next = null();
HXLINE( 355)			::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = nxt21;
            		}
HXLINE( 361)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Compound_obj::zpp_pool )){
HXLINE( 362)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Compound,nxt22,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Compound_obj::zpp_pool->next;
HXLINE( 363)			::zpp_nape::util::ZNPNode_ZPP_Compound_obj::zpp_pool->next = null();
HXLINE( 364)			::zpp_nape::util::ZNPNode_ZPP_Compound_obj::zpp_pool = nxt22;
            		}
HXLINE( 370)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool )){
HXLINE( 371)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Arbiter,nxt23,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool->next;
HXLINE( 372)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool->next = null();
HXLINE( 373)			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = nxt23;
            		}
HXLINE( 379)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool )){
HXLINE( 380)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_Body,nxt24,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool->next;
HXLINE( 381)			::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool->next = null();
HXLINE( 382)			::zpp_nape::util::ZPP_Set_ZPP_Body_obj::zpp_pool = nxt24;
            		}
HXLINE( 388)		while(hx::IsNotNull( ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool )){
HXLINE( 389)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSetPair,nxt25,"nxt") = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool->next;
HXLINE( 390)			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool->next = null();
HXLINE( 391)			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = nxt25;
            		}
HXLINE( 397)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool )){
HXLINE( 398)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionListener,nxt26,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool->next;
HXLINE( 399)			::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool->next = null();
HXLINE( 400)			::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = nxt26;
            		}
HXLINE( 406)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool )){
HXLINE( 407)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSet,nxt27,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool->next;
HXLINE( 408)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool->next = null();
HXLINE( 409)			::zpp_nape::util::ZNPNode_ZPP_CbSet_obj::zpp_pool = nxt27;
            		}
HXLINE( 415)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool )){
HXLINE( 416)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Interactor,nxt28,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool->next;
HXLINE( 417)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool->next = null();
HXLINE( 418)			::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = nxt28;
            		}
HXLINE( 424)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool )){
HXLINE( 425)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_BodyListener,nxt29,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool->next;
HXLINE( 426)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool->next = null();
HXLINE( 427)			::zpp_nape::util::ZNPNode_ZPP_BodyListener_obj::zpp_pool = nxt29;
            		}
HXLINE( 433)		while(hx::IsNotNull( ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool )){
HXLINE( 434)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_Callback,nxt30,"nxt") = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool->next;
HXLINE( 435)			::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool->next = null();
HXLINE( 436)			::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = nxt30;
            		}
HXLINE( 442)		while(hx::IsNotNull( ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool )){
HXLINE( 443)			HX_VARI_NAME(  ::zpp_nape::callbacks::ZPP_CbSet,nxt31,"nxt") = ::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool->next;
HXLINE( 444)			::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool->next = null();
HXLINE( 445)			::zpp_nape::callbacks::ZPP_CbSet_obj::zpp_pool = nxt31;
            		}
HXLINE( 451)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool )){
HXLINE( 452)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CbSetPair,nxt32,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool->next;
HXLINE( 453)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool->next = null();
HXLINE( 454)			::zpp_nape::util::ZNPNode_ZPP_CbSetPair_obj::zpp_pool = nxt32;
            		}
HXLINE( 460)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool )){
HXLINE( 461)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener,nxt33,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool->next;
HXLINE( 462)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool->next = null();
HXLINE( 463)			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener_obj::zpp_pool = nxt33;
            		}
HXLINE( 469)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool )){
HXLINE( 470)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVert,nxt34,"nxt") = ::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool->next;
HXLINE( 471)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool->next = null();
HXLINE( 472)			::zpp_nape::geom::ZPP_GeomVert_obj::zpp_pool = nxt34;
            		}
HXLINE( 478)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool )){
HXLINE( 479)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_GeomVertexIterator,nxt35,"nxt") = ::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool->next;
HXLINE( 480)			::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool->next = null();
HXLINE( 481)			::zpp_nape::geom::ZPP_GeomVertexIterator_obj::zpp_pool = nxt35;
            		}
HXLINE( 487)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Mat23_obj::zpp_pool )){
HXLINE( 488)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Mat23,nxt36,"nxt") = ::zpp_nape::geom::ZPP_Mat23_obj::zpp_pool->next;
HXLINE( 489)			::zpp_nape::geom::ZPP_Mat23_obj::zpp_pool->next = null();
HXLINE( 490)			::zpp_nape::geom::ZPP_Mat23_obj::zpp_pool = nxt36;
            		}
HXLINE( 496)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool )){
HXLINE( 497)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair,nxt37,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool->next;
HXLINE( 498)			::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool->next = null();
HXLINE( 499)			::zpp_nape::util::ZPP_Set_ZPP_CbSetPair_obj::zpp_pool = nxt37;
            		}
HXLINE( 505)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool )){
HXLINE( 506)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutVert,nxt38,"nxt") = ::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool->next;
HXLINE( 507)			::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool->next = null();
HXLINE( 508)			::zpp_nape::geom::ZPP_CutVert_obj::zpp_pool = nxt38;
            		}
HXLINE( 514)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool )){
HXLINE( 515)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_CutInt,nxt39,"nxt") = ::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool->next;
HXLINE( 516)			::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool->next = null();
HXLINE( 517)			::zpp_nape::geom::ZPP_CutInt_obj::zpp_pool = nxt39;
            		}
HXLINE( 523)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool )){
HXLINE( 524)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CutInt,nxt40,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool->next;
HXLINE( 525)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool->next = null();
HXLINE( 526)			::zpp_nape::util::ZNPNode_ZPP_CutInt_obj::zpp_pool = nxt40;
            		}
HXLINE( 532)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool )){
HXLINE( 533)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_CutVert,nxt41,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool->next;
HXLINE( 534)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool->next = null();
HXLINE( 535)			::zpp_nape::util::ZNPNode_ZPP_CutVert_obj::zpp_pool = nxt41;
            		}
HXLINE( 541)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )){
HXLINE( 542)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,nxt42,"nxt") = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool->next;
HXLINE( 543)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool->next = null();
HXLINE( 544)			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = nxt42;
            		}
HXLINE( 550)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool )){
HXLINE( 551)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex,nxt43,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool->next;
HXLINE( 552)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool->next = null();
HXLINE( 553)			::zpp_nape::util::ZNPNode_ZPP_PartitionVertex_obj::zpp_pool = nxt43;
            		}
HXLINE( 559)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool )){
HXLINE( 560)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionVertex,nxt44,"nxt") = ::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool->next;
HXLINE( 561)			::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool->next = null();
HXLINE( 562)			::zpp_nape::geom::ZPP_PartitionVertex_obj::zpp_pool = nxt44;
            		}
HXLINE( 568)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool )){
HXLINE( 569)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex,nxt45,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool->next;
HXLINE( 570)			::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool->next = null();
HXLINE( 571)			::zpp_nape::util::ZPP_Set_ZPP_PartitionVertex_obj::zpp_pool = nxt45;
            		}
HXLINE( 577)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool )){
HXLINE( 578)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimplifyV,nxt46,"nxt") = ::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool->next;
HXLINE( 579)			::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool->next = null();
HXLINE( 580)			::zpp_nape::geom::ZPP_SimplifyV_obj::zpp_pool = nxt46;
            		}
HXLINE( 586)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool )){
HXLINE( 587)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimplifyP,nxt47,"nxt") = ::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool->next;
HXLINE( 588)			::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool->next = null();
HXLINE( 589)			::zpp_nape::geom::ZPP_SimplifyP_obj::zpp_pool = nxt47;
            		}
HXLINE( 595)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool )){
HXLINE( 596)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionedPoly,nxt48,"nxt") = ::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool->next;
HXLINE( 597)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool->next = null();
HXLINE( 598)			::zpp_nape::geom::ZPP_PartitionedPoly_obj::zpp_pool = nxt48;
            		}
HXLINE( 604)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_SimplifyP_obj::zpp_pool )){
HXLINE( 605)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_SimplifyP,nxt49,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_SimplifyP_obj::zpp_pool->next;
HXLINE( 606)			::zpp_nape::util::ZNPNode_ZPP_SimplifyP_obj::zpp_pool->next = null();
HXLINE( 607)			::zpp_nape::util::ZNPNode_ZPP_SimplifyP_obj::zpp_pool = nxt49;
            		}
HXLINE( 613)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool )){
HXLINE( 614)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly,nxt50,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool->next;
HXLINE( 615)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool->next = null();
HXLINE( 616)			::zpp_nape::util::ZNPNode_ZPP_PartitionedPoly_obj::zpp_pool = nxt50;
            		}
HXLINE( 622)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool )){
HXLINE( 623)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_PartitionPair,nxt51,"nxt") = ::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool->next;
HXLINE( 624)			::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool->next = null();
HXLINE( 625)			::zpp_nape::geom::ZPP_PartitionPair_obj::zpp_pool = nxt51;
            		}
HXLINE( 631)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool )){
HXLINE( 632)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair,nxt52,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool->next;
HXLINE( 633)			::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool->next = null();
HXLINE( 634)			::zpp_nape::util::ZPP_Set_ZPP_PartitionPair_obj::zpp_pool = nxt52;
            		}
HXLINE( 640)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_GeomVert_obj::zpp_pool )){
HXLINE( 641)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_GeomVert,nxt53,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_GeomVert_obj::zpp_pool->next;
HXLINE( 642)			::zpp_nape::util::ZNPNode_ZPP_GeomVert_obj::zpp_pool->next = null();
HXLINE( 643)			::zpp_nape::util::ZNPNode_ZPP_GeomVert_obj::zpp_pool = nxt53;
            		}
HXLINE( 649)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool )){
HXLINE( 650)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_AABB,nxt54,"nxt") = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool->next;
HXLINE( 651)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool->next = null();
HXLINE( 652)			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = nxt54;
            		}
HXLINE( 658)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool )){
HXLINE( 659)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert,nxt55,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool->next;
HXLINE( 660)			::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool->next = null();
HXLINE( 661)			::zpp_nape::util::ZPP_Set_ZPP_SimpleVert_obj::zpp_pool = nxt55;
            		}
HXLINE( 667)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool )){
HXLINE( 668)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleVert,nxt56,"nxt") = ::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool->next;
HXLINE( 669)			::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool->next = null();
HXLINE( 670)			::zpp_nape::geom::ZPP_SimpleVert_obj::zpp_pool = nxt56;
            		}
HXLINE( 676)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool )){
HXLINE( 677)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleSeg,nxt57,"nxt") = ::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool->next;
HXLINE( 678)			::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool->next = null();
HXLINE( 679)			::zpp_nape::geom::ZPP_SimpleSeg_obj::zpp_pool = nxt57;
            		}
HXLINE( 685)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool )){
HXLINE( 686)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg,nxt58,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool->next;
HXLINE( 687)			::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool->next = null();
HXLINE( 688)			::zpp_nape::util::ZPP_Set_ZPP_SimpleSeg_obj::zpp_pool = nxt58;
            		}
HXLINE( 694)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool )){
HXLINE( 695)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent,nxt59,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool->next;
HXLINE( 696)			::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool->next = null();
HXLINE( 697)			::zpp_nape::util::ZPP_Set_ZPP_SimpleEvent_obj::zpp_pool = nxt59;
            		}
HXLINE( 703)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool )){
HXLINE( 704)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_SimpleEvent,nxt60,"nxt") = ::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool->next;
HXLINE( 705)			::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool->next = null();
HXLINE( 706)			::zpp_nape::geom::ZPP_SimpleEvent_obj::zpp_pool = nxt60;
            		}
HXLINE( 712)		while(hx::IsNotNull( ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool )){
HXLINE( 713)			HX_VARI_NAME(  ::zpp_nape::util::Hashable2_Boolfalse,nxt61,"nxt") = ::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool->next;
HXLINE( 714)			::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool->next = null();
HXLINE( 715)			::zpp_nape::util::Hashable2_Boolfalse_obj::zpp_pool = nxt61;
            		}
HXLINE( 721)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool )){
HXLINE( 722)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_ToiEvent,nxt62,"nxt") = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool->next;
HXLINE( 723)			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool->next = null();
HXLINE( 724)			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = nxt62;
            		}
HXLINE( 730)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool )){
HXLINE( 731)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_SimpleVert,nxt63,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool->next;
HXLINE( 732)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool->next = null();
HXLINE( 733)			::zpp_nape::util::ZNPNode_ZPP_SimpleVert_obj::zpp_pool = nxt63;
            		}
HXLINE( 739)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool )){
HXLINE( 740)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent,nxt64,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool->next;
HXLINE( 741)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool->next = null();
HXLINE( 742)			::zpp_nape::util::ZNPNode_ZPP_SimpleEvent_obj::zpp_pool = nxt64;
            		}
HXLINE( 748)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool )){
HXLINE( 749)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_MarchSpan,nxt65,"nxt") = ::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool->next;
HXLINE( 750)			::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool->next = null();
HXLINE( 751)			::zpp_nape::geom::ZPP_MarchSpan_obj::zpp_pool = nxt65;
            		}
HXLINE( 757)		while(hx::IsNotNull( ::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool )){
HXLINE( 758)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_MarchPair,nxt66,"nxt") = ::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool->next;
HXLINE( 759)			::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool->next = null();
HXLINE( 760)			::zpp_nape::geom::ZPP_MarchPair_obj::zpp_pool = nxt66;
            		}
HXLINE( 766)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool )){
HXLINE( 767)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Vec2,nxt67,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool->next;
HXLINE( 768)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool->next = null();
HXLINE( 769)			::zpp_nape::util::ZNPNode_ZPP_Vec2_obj::zpp_pool = nxt67;
            		}
HXLINE( 775)		while(hx::IsNotNull( ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool )){
HXLINE( 776)			HX_VARI_NAME(  ::zpp_nape::shape::ZPP_Edge,nxt68,"nxt") = ::zpp_nape::shape::ZPP_Edge_obj::zpp_pool->next;
HXLINE( 777)			::zpp_nape::shape::ZPP_Edge_obj::zpp_pool->next = null();
HXLINE( 778)			::zpp_nape::shape::ZPP_Edge_obj::zpp_pool = nxt68;
            		}
HXLINE( 784)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool )){
HXLINE( 785)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_AABBPair,nxt69,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool->next;
HXLINE( 786)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool->next = null();
HXLINE( 787)			::zpp_nape::util::ZNPNode_ZPP_AABBPair_obj::zpp_pool = nxt69;
            		}
HXLINE( 793)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool )){
HXLINE( 794)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Edge,nxt70,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool->next;
HXLINE( 795)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool->next = null();
HXLINE( 796)			::zpp_nape::util::ZNPNode_ZPP_Edge_obj::zpp_pool = nxt70;
            		}
HXLINE( 802)		while(hx::IsNotNull( ::zpp_nape::space::ZPP_SweepData_obj::zpp_pool )){
HXLINE( 803)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_SweepData,nxt71,"nxt") = ::zpp_nape::space::ZPP_SweepData_obj::zpp_pool->next;
HXLINE( 804)			::zpp_nape::space::ZPP_SweepData_obj::zpp_pool->next = null();
HXLINE( 805)			::zpp_nape::space::ZPP_SweepData_obj::zpp_pool = nxt71;
            		}
HXLINE( 811)		while(hx::IsNotNull( ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool )){
HXLINE( 812)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBNode,nxt72,"nxt") = ::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool->next;
HXLINE( 813)			::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool->next = null();
HXLINE( 814)			::zpp_nape::space::ZPP_AABBNode_obj::zpp_pool = nxt72;
            		}
HXLINE( 820)		while(hx::IsNotNull( ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool )){
HXLINE( 821)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_AABBPair,nxt73,"nxt") = ::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool->next;
HXLINE( 822)			::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool->next = null();
HXLINE( 823)			::zpp_nape::space::ZPP_AABBPair_obj::zpp_pool = nxt73;
            		}
HXLINE( 829)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool )){
HXLINE( 830)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_AABBNode,nxt74,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool->next;
HXLINE( 831)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool->next = null();
HXLINE( 832)			::zpp_nape::util::ZNPNode_ZPP_AABBNode_obj::zpp_pool = nxt74;
            		}
HXLINE( 838)		while(hx::IsNotNull( ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool )){
HXLINE( 839)			HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_Contact,nxt75,"nxt") = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool->next;
HXLINE( 840)			::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool->next = null();
HXLINE( 841)			::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = nxt75;
            		}
HXLINE( 847)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool )){
HXLINE( 848)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Component,nxt76,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool->next;
HXLINE( 849)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool->next = null();
HXLINE( 850)			::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = nxt76;
            		}
HXLINE( 856)		while(hx::IsNotNull( ::zpp_nape::space::ZPP_Island_obj::zpp_pool )){
HXLINE( 857)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_Island,nxt77,"nxt") = ::zpp_nape::space::ZPP_Island_obj::zpp_pool->next;
HXLINE( 858)			::zpp_nape::space::ZPP_Island_obj::zpp_pool->next = null();
HXLINE( 859)			::zpp_nape::space::ZPP_Island_obj::zpp_pool = nxt77;
            		}
HXLINE( 865)		while(hx::IsNotNull( ::zpp_nape::space::ZPP_Component_obj::zpp_pool )){
HXLINE( 866)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_Component,nxt78,"nxt") = ::zpp_nape::space::ZPP_Component_obj::zpp_pool->next;
HXLINE( 867)			::zpp_nape::space::ZPP_Component_obj::zpp_pool->next = null();
HXLINE( 868)			::zpp_nape::space::ZPP_Component_obj::zpp_pool = nxt78;
            		}
HXLINE( 874)		while(hx::IsNotNull( ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool )){
HXLINE( 875)			HX_VARI_NAME(  ::zpp_nape::space::ZPP_CallbackSet,nxt79,"nxt") = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool->next;
HXLINE( 876)			::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool->next = null();
HXLINE( 877)			::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = nxt79;
            		}
HXLINE( 883)		while(hx::IsNotNull( ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool )){
HXLINE( 884)			HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_SensorArbiter,nxt80,"nxt") = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool->next;
HXLINE( 885)			::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool->next = null();
HXLINE( 886)			::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = nxt80;
            		}
HXLINE( 892)		while(hx::IsNotNull( ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool )){
HXLINE( 893)			HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_FluidArbiter,nxt81,"nxt") = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool->next;
HXLINE( 894)			::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool->next = null();
HXLINE( 895)			::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = nxt81;
            		}
HXLINE( 901)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool )){
HXLINE( 902)			HX_VARI_NAME(  ::zpp_nape::util::ZPP_Set_ZPP_CbSet,nxt82,"nxt") = ::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool->next;
HXLINE( 903)			::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool->next = null();
HXLINE( 904)			::zpp_nape::util::ZPP_Set_ZPP_CbSet_obj::zpp_pool = nxt82;
            		}
HXLINE( 910)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool )){
HXLINE( 911)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter,nxt83,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool->next;
HXLINE( 912)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool->next = null();
HXLINE( 913)			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = nxt83;
            		}
HXLINE( 919)		while(hx::IsNotNull( ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool )){
HXLINE( 920)			HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_ColArbiter,nxt84,"nxt") = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool->next;
HXLINE( 921)			::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool->next = null();
HXLINE( 922)			::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = nxt84;
            		}
HXLINE( 928)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool )){
HXLINE( 929)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter,nxt85,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool->next;
HXLINE( 930)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool->next = null();
HXLINE( 931)			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = nxt85;
            		}
HXLINE( 937)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool )){
HXLINE( 938)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_Listener,nxt86,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool->next;
HXLINE( 939)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool->next = null();
HXLINE( 940)			::zpp_nape::util::ZNPNode_ZPP_Listener_obj::zpp_pool = nxt86;
            		}
HXLINE( 946)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool )){
HXLINE( 947)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_ColArbiter,nxt87,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool->next;
HXLINE( 948)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool->next = null();
HXLINE( 949)			::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = nxt87;
            		}
HXLINE( 955)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_InteractionGroup_obj::zpp_pool )){
HXLINE( 956)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_InteractionGroup,nxt88,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_InteractionGroup_obj::zpp_pool->next;
HXLINE( 957)			::zpp_nape::util::ZNPNode_ZPP_InteractionGroup_obj::zpp_pool->next = null();
HXLINE( 958)			::zpp_nape::util::ZNPNode_ZPP_InteractionGroup_obj::zpp_pool = nxt88;
            		}
HXLINE( 964)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool )){
HXLINE( 965)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_ToiEvent,nxt89,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool->next;
HXLINE( 966)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool->next = null();
HXLINE( 967)			::zpp_nape::util::ZNPNode_ZPP_ToiEvent_obj::zpp_pool = nxt89;
            		}
HXLINE( 973)		while(hx::IsNotNull( ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool )){
HXLINE( 974)			HX_VARI_NAME(  ::zpp_nape::dynamics::ZPP_InteractionFilter,nxt90,"nxt") = ::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool->next;
HXLINE( 975)			::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool->next = null();
HXLINE( 976)			::zpp_nape::dynamics::ZPP_InteractionFilter_obj::zpp_pool = nxt90;
            		}
HXLINE( 982)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool )){
HXLINE( 983)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ConvexResult,nxt91,"nxt") = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool->next;
HXLINE( 984)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool->next = null();
HXLINE( 985)			::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = nxt91;
            		}
HXLINE( 991)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool )){
HXLINE( 992)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_ZPP_GeomPoly,nxt92,"nxt") = ::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool->next;
HXLINE( 993)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool->next = null();
HXLINE( 994)			::zpp_nape::util::ZNPNode_ZPP_GeomPoly_obj::zpp_pool = nxt92;
            		}
HXLINE(1000)		while(hx::IsNotNull( ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool )){
HXLINE(1001)			HX_VARI_NAME(  ::zpp_nape::util::ZNPNode_RayResult,nxt93,"nxt") = ::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool->next;
HXLINE(1002)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool->next = null();
HXLINE(1003)			::zpp_nape::util::ZNPNode_RayResult_obj::zpp_pool = nxt93;
            		}
HXLINE(1010)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly )){
HXLINE(1011)			HX_VARI_NAME(  ::nape::geom::GeomPoly,nxt94,"nxt") = ::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly->zpp_pool;
HXLINE(1012)			::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly->zpp_pool = null();
HXLINE(1013)			::zpp_nape::util::ZPP_PubPool_obj::poolGeomPoly = nxt94;
            		}
HXLINE(1019)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )){
HXLINE(1020)			HX_VARI_NAME(  ::nape::geom::Vec2,nxt95,"nxt") = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2->zpp_pool;
HXLINE(1021)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2->zpp_pool = null();
HXLINE(1022)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = nxt95;
            		}
HXLINE(1028)		while(hx::IsNotNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec3 )){
HXLINE(1029)			HX_VARI_NAME(  ::nape::geom::Vec3,nxt96,"nxt") = ::zpp_nape::util::ZPP_PubPool_obj::poolVec3->zpp_pool;
HXLINE(1030)			::zpp_nape::util::ZPP_PubPool_obj::poolVec3->zpp_pool = null();
HXLINE(1031)			::zpp_nape::util::ZPP_PubPool_obj::poolVec3 = nxt96;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Debug_obj,clearObjectPools,(void))

 ::openfl::_legacy::display::Shape Debug_obj::createGraphic( ::nape::phys::Body body){
            	HX_GC_STACKFRAME(&_hx_pos_a931a04804ee9b05_1091_createGraphic)
            	HX_STACK_ARG(body,"body")
HXLINE(1095)		HX_VARI(  ::openfl::_legacy::display::Shape,ret) =  ::openfl::_legacy::display::Shape_obj::__alloc( HX_CTX );
HXLINE(1096)		HX_VARI(  ::openfl::_legacy::display::Graphics,graphics) = ret->get_graphics();
HXLINE(1097)		HX_VARI( int,idc) = ::Std_obj::_hx_int(((int)16777215 * ::Math_obj::exp(((Float)-(body->zpp_inner_i->id) / (Float)(int)1500))));
HXLINE(1101)		HX_VARI( int,col) = ((int)::Std_obj::_hx_int((((int)((int)idc & (int)(int)16711680) >> (int)(int)16) * ((Float)0.7))) << (int)(int)16);
HXDLIN(1101)		HX_VARI_NAME( int,col1,"col") = ((int)col | (int)((int)::Std_obj::_hx_int((((int)((int)idc & (int)(int)65280) >> (int)(int)8) * ((Float)0.7))) << (int)(int)8));
HXLINE(1102)		graphics->lineStyle(((Float)0.1),((int)col1 | (int)::Std_obj::_hx_int((((int)idc & (int)(int)255) * ((Float)0.7)))),(int)1,null(),null(),null(),null(),null());
HXLINE(1103)		{
HXLINE(1103)			HX_VARI(  ::nape::shape::ShapeList,_this) = body->zpp_inner->wrap_shapes;
HXDLIN(1103)			_this->zpp_inner->valmod();
HXDLIN(1103)			HX_VARI(  ::nape::shape::ShapeIterator,_g) = ::nape::shape::ShapeIterator_obj::get(_this);
HXDLIN(1103)			while(true){
HXLINE(1103)				_g->zpp_inner->zpp_inner->valmod();
HXDLIN(1103)				HX_VARI_NAME(  ::nape::shape::ShapeList,_this1,"_this") = _g->zpp_inner;
HXDLIN(1103)				_this1->zpp_inner->valmod();
HXDLIN(1103)				if (_this1->zpp_inner->zip_length) {
HXLINE(1103)					_this1->zpp_inner->zip_length = false;
HXDLIN(1103)					_this1->zpp_inner->user_length = _this1->zpp_inner->inner->length;
            				}
HXDLIN(1103)				_g->zpp_critical = true;
HXDLIN(1103)				bool _hx_tmp;
HXDLIN(1103)				if ((_g->zpp_i < _this1->zpp_inner->user_length)) {
HXLINE(1103)					_hx_tmp = true;
            				}
            				else {
HXLINE(1103)					{
HXLINE(1103)						_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
HXDLIN(1103)						::nape::shape::ShapeIterator_obj::zpp_pool = _g;
HXDLIN(1103)						_g->zpp_inner = null();
            					}
HXDLIN(1103)					_hx_tmp = false;
            				}
HXDLIN(1103)				if (!(_hx_tmp)) {
HXLINE(1103)					goto _hx_goto_117;
            				}
HXDLIN(1103)				_g->zpp_critical = false;
HXDLIN(1103)				HX_VARI(  ::nape::shape::Shape,s) = _g->zpp_inner->at(_g->zpp_i++);
HXLINE(1104)				if ((s->zpp_inner->type == (int)0)) {
HXLINE(1105)					HX_VAR(  ::nape::shape::Circle,c);
HXDLIN(1105)					if ((s->zpp_inner->type == (int)0)) {
HXLINE(1105)						c = s->zpp_inner->circle->outer_zn;
            					}
            					else {
HXLINE(1105)						c = null();
            					}
HXLINE(1106)					if (hx::IsNull( c->zpp_inner->wrap_localCOM )) {
HXLINE(1106)						if ((c->zpp_inner->type == (int)0)) {
HXLINE(1106)							c->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1106)							c->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1106)					HX_VARI_NAME(  ::nape::geom::Vec2,_this2,"_this") = c->zpp_inner->wrap_localCOM;
HXDLIN(1106)					{
HXLINE(1106)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this2->zpp_inner;
HXDLIN(1106)						if (hx::IsNotNull( _this3->_validate )) {
HXLINE(1106)							_this3->_validate();
            						}
            					}
HXDLIN(1106)					Float _hx_tmp1 = _this2->zpp_inner->x;
HXDLIN(1106)					if (hx::IsNull( c->zpp_inner->wrap_localCOM )) {
HXLINE(1106)						if ((c->zpp_inner->type == (int)0)) {
HXLINE(1106)							c->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1106)							c->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1106)					HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = c->zpp_inner->wrap_localCOM;
HXDLIN(1106)					{
HXLINE(1106)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this4->zpp_inner;
HXDLIN(1106)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE(1106)							_this5->_validate();
            						}
            					}
HXDLIN(1106)					graphics->drawCircle(_hx_tmp1,_this4->zpp_inner->y,c->zpp_inner_zn->radius);
            				}
            				else {
HXLINE(1109)					HX_VAR(  ::nape::shape::Polygon,p);
HXDLIN(1109)					if ((s->zpp_inner->type == (int)1)) {
HXLINE(1109)						p = s->zpp_inner->polygon->outer_zn;
            					}
            					else {
HXLINE(1109)						p = null();
            					}
HXLINE(1110)					if (hx::IsNull( s->zpp_inner->wrap_localCOM )) {
HXLINE(1110)						if ((s->zpp_inner->type == (int)0)) {
HXLINE(1110)							s->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1110)							s->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1110)					HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = s->zpp_inner->wrap_localCOM;
HXDLIN(1110)					{
HXLINE(1110)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = _this6->zpp_inner;
HXDLIN(1110)						if (hx::IsNotNull( _this7->_validate )) {
HXLINE(1110)							_this7->_validate();
            						}
            					}
HXDLIN(1110)					Float _hx_tmp2 = _this6->zpp_inner->x;
HXDLIN(1110)					if (hx::IsNull( s->zpp_inner->wrap_localCOM )) {
HXLINE(1110)						if ((s->zpp_inner->type == (int)0)) {
HXLINE(1110)							s->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1110)							s->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1110)					HX_VARI_NAME(  ::nape::geom::Vec2,_this8,"_this") = s->zpp_inner->wrap_localCOM;
HXDLIN(1110)					{
HXLINE(1110)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _this8->zpp_inner;
HXDLIN(1110)						if (hx::IsNotNull( _this9->_validate )) {
HXLINE(1110)							_this9->_validate();
            						}
            					}
HXDLIN(1110)					graphics->moveTo(_hx_tmp2,_this8->zpp_inner->y);
HXLINE(1111)					{
HXLINE(1111)						HX_VARI( int,_g1) = (int)0;
HXDLIN(1111)						if (hx::IsNull( p->zpp_inner_zn->wrap_gverts )) {
HXLINE(1111)							p->zpp_inner_zn->getgverts();
            						}
HXDLIN(1111)						HX_VARI_NAME( int,_g2,"_g") = p->zpp_inner_zn->wrap_gverts->zpp_gl();
HXDLIN(1111)						while((_g1 < _g2)){
HXLINE(1111)							_g1 = (_g1 + (int)1);
HXLINE(1112)							if (hx::IsNull( p->zpp_inner_zn->wrap_lverts )) {
HXLINE(1112)								p->zpp_inner_zn->getlverts();
            							}
HXDLIN(1112)							HX_VARI(  ::nape::geom::Vec2,px) = p->zpp_inner_zn->wrap_lverts->at((_g1 - (int)1));
HXLINE(1113)							{
HXLINE(1113)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = px->zpp_inner;
HXDLIN(1113)								if (hx::IsNotNull( _this10->_validate )) {
HXLINE(1113)									_this10->_validate();
            								}
            							}
HXDLIN(1113)							Float _hx_tmp3 = px->zpp_inner->x;
HXDLIN(1113)							{
HXLINE(1113)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = px->zpp_inner;
HXDLIN(1113)								if (hx::IsNotNull( _this11->_validate )) {
HXLINE(1113)									_this11->_validate();
            								}
            							}
HXDLIN(1113)							graphics->lineTo(_hx_tmp3,px->zpp_inner->y);
            						}
            					}
HXLINE(1115)					if (hx::IsNull( p->zpp_inner_zn->wrap_lverts )) {
HXLINE(1115)						p->zpp_inner_zn->getlverts();
            					}
HXDLIN(1115)					HX_VARI_NAME(  ::nape::geom::Vec2,px1,"px") = p->zpp_inner_zn->wrap_lverts->at((int)0);
HXLINE(1116)					{
HXLINE(1116)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this12,"_this") = px1->zpp_inner;
HXDLIN(1116)						if (hx::IsNotNull( _this12->_validate )) {
HXLINE(1116)							_this12->_validate();
            						}
            					}
HXDLIN(1116)					Float _hx_tmp4 = px1->zpp_inner->x;
HXDLIN(1116)					{
HXLINE(1116)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = px1->zpp_inner;
HXDLIN(1116)						if (hx::IsNotNull( _this13->_validate )) {
HXLINE(1116)							_this13->_validate();
            						}
            					}
HXDLIN(1116)					graphics->lineTo(_hx_tmp4,px1->zpp_inner->y);
            				}
HXLINE(1118)				if ((s->zpp_inner->type == (int)0)) {
HXLINE(1119)					HX_VAR_NAME(  ::nape::shape::Circle,c1,"c");
HXDLIN(1119)					if ((s->zpp_inner->type == (int)0)) {
HXLINE(1119)						c1 = s->zpp_inner->circle->outer_zn;
            					}
            					else {
HXLINE(1119)						c1 = null();
            					}
HXLINE(1120)					if (hx::IsNull( c1->zpp_inner->wrap_localCOM )) {
HXLINE(1120)						if ((c1->zpp_inner->type == (int)0)) {
HXLINE(1120)							c1->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1120)							c1->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1120)					HX_VARI_NAME(  ::nape::geom::Vec2,_this14,"_this") = c1->zpp_inner->wrap_localCOM;
HXDLIN(1120)					{
HXLINE(1120)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this15,"_this") = _this14->zpp_inner;
HXDLIN(1120)						if (hx::IsNotNull( _this15->_validate )) {
HXLINE(1120)							_this15->_validate();
            						}
            					}
HXDLIN(1120)					Float _hx_tmp5 = (_this14->zpp_inner->x + (c1->zpp_inner_zn->radius * ((Float)0.3)));
HXDLIN(1120)					if (hx::IsNull( c1->zpp_inner->wrap_localCOM )) {
HXLINE(1120)						if ((c1->zpp_inner->type == (int)0)) {
HXLINE(1120)							c1->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1120)							c1->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1120)					HX_VARI_NAME(  ::nape::geom::Vec2,_this16,"_this") = c1->zpp_inner->wrap_localCOM;
HXDLIN(1120)					{
HXLINE(1120)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this17,"_this") = _this16->zpp_inner;
HXDLIN(1120)						if (hx::IsNotNull( _this17->_validate )) {
HXLINE(1120)							_this17->_validate();
            						}
            					}
HXDLIN(1120)					graphics->moveTo(_hx_tmp5,_this16->zpp_inner->y);
HXLINE(1121)					if (hx::IsNull( c1->zpp_inner->wrap_localCOM )) {
HXLINE(1121)						if ((c1->zpp_inner->type == (int)0)) {
HXLINE(1121)							c1->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1121)							c1->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1121)					HX_VARI_NAME(  ::nape::geom::Vec2,_this18,"_this") = c1->zpp_inner->wrap_localCOM;
HXDLIN(1121)					{
HXLINE(1121)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this19,"_this") = _this18->zpp_inner;
HXDLIN(1121)						if (hx::IsNotNull( _this19->_validate )) {
HXLINE(1121)							_this19->_validate();
            						}
            					}
HXDLIN(1121)					Float _hx_tmp6 = (_this18->zpp_inner->x + c1->zpp_inner_zn->radius);
HXDLIN(1121)					if (hx::IsNull( c1->zpp_inner->wrap_localCOM )) {
HXLINE(1121)						if ((c1->zpp_inner->type == (int)0)) {
HXLINE(1121)							c1->zpp_inner->circle->setupLocalCOM();
            						}
            						else {
HXLINE(1121)							c1->zpp_inner->polygon->setupLocalCOM();
            						}
            					}
HXDLIN(1121)					HX_VARI_NAME(  ::nape::geom::Vec2,_this20,"_this") = c1->zpp_inner->wrap_localCOM;
HXDLIN(1121)					{
HXLINE(1121)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this21,"_this") = _this20->zpp_inner;
HXDLIN(1121)						if (hx::IsNotNull( _this21->_validate )) {
HXLINE(1121)							_this21->_validate();
            						}
            					}
HXDLIN(1121)					graphics->lineTo(_hx_tmp6,_this20->zpp_inner->y);
            				}
            			}
            			_hx_goto_117:;
            		}
HXLINE(1124)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Debug_obj,createGraphic,return )


hx::ObjectPtr< Debug_obj > Debug_obj::__new() {
	hx::ObjectPtr< Debug_obj > __this = new Debug_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Debug_obj > Debug_obj::__alloc(hx::Ctx *_hx_ctx) {
	Debug_obj *__this = (Debug_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Debug_obj), true, "nape.util.Debug"));
	*(void **)__this = Debug_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Debug_obj::Debug_obj()
{
}

void Debug_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Debug);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_MEMBER_NAME(drawCollisionArbiters,"drawCollisionArbiters");
	HX_MARK_MEMBER_NAME(drawFluidArbiters,"drawFluidArbiters");
	HX_MARK_MEMBER_NAME(drawSensorArbiters,"drawSensorArbiters");
	HX_MARK_MEMBER_NAME(drawBodies,"drawBodies");
	HX_MARK_MEMBER_NAME(drawBodyDetail,"drawBodyDetail");
	HX_MARK_MEMBER_NAME(drawShapeDetail,"drawShapeDetail");
	HX_MARK_MEMBER_NAME(drawShapeAngleIndicators,"drawShapeAngleIndicators");
	HX_MARK_MEMBER_NAME(drawConstraints,"drawConstraints");
	HX_MARK_MEMBER_NAME(colour,"colour");
	HX_MARK_MEMBER_NAME(cullingEnabled,"cullingEnabled");
	HX_MARK_END_CLASS();
}

void Debug_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_VISIT_MEMBER_NAME(drawCollisionArbiters,"drawCollisionArbiters");
	HX_VISIT_MEMBER_NAME(drawFluidArbiters,"drawFluidArbiters");
	HX_VISIT_MEMBER_NAME(drawSensorArbiters,"drawSensorArbiters");
	HX_VISIT_MEMBER_NAME(drawBodies,"drawBodies");
	HX_VISIT_MEMBER_NAME(drawBodyDetail,"drawBodyDetail");
	HX_VISIT_MEMBER_NAME(drawShapeDetail,"drawShapeDetail");
	HX_VISIT_MEMBER_NAME(drawShapeAngleIndicators,"drawShapeAngleIndicators");
	HX_VISIT_MEMBER_NAME(drawConstraints,"drawConstraints");
	HX_VISIT_MEMBER_NAME(colour,"colour");
	HX_VISIT_MEMBER_NAME(cullingEnabled,"cullingEnabled");
}

hx::Val Debug_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colour") ) { return hx::Val( colour); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_display()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bgColour") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bgColour()); }
		if (HX_FIELD_EQ(inName,"drawLine") ) { return hx::Val( drawLine_dyn()); }
		if (HX_FIELD_EQ(inName,"drawAABB") ) { return hx::Val( drawAABB_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_transform()); }
		if (HX_FIELD_EQ(inName,"drawCurve") ) { return hx::Val( drawCurve_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawBodies") ) { return hx::Val( drawBodies); }
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"drawSpring") ) { return hx::Val( drawSpring_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_display") ) { return hx::Val( get_display_dyn()); }
		if (HX_FIELD_EQ(inName,"drawPolygon") ) { return hx::Val( drawPolygon_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_bgColour") ) { return hx::Val( get_bgColour_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bgColour") ) { return hx::Val( set_bgColour_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_transform") ) { return hx::Val( get_transform_dyn()); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawBodyDetail") ) { return hx::Val( drawBodyDetail); }
		if (HX_FIELD_EQ(inName,"cullingEnabled") ) { return hx::Val( cullingEnabled); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawShapeDetail") ) { return hx::Val( drawShapeDetail); }
		if (HX_FIELD_EQ(inName,"drawConstraints") ) { return hx::Val( drawConstraints); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"drawFilledCircle") ) { return hx::Val( drawFilledCircle_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawFluidArbiters") ) { return hx::Val( drawFluidArbiters); }
		if (HX_FIELD_EQ(inName,"drawFilledPolygon") ) { return hx::Val( drawFilledPolygon_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"drawSensorArbiters") ) { return hx::Val( drawSensorArbiters); }
		if (HX_FIELD_EQ(inName,"drawFilledTriangle") ) { return hx::Val( drawFilledTriangle_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"drawCollisionArbiters") ) { return hx::Val( drawCollisionArbiters); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"drawShapeAngleIndicators") ) { return hx::Val( drawShapeAngleIndicators); }
	}
	return super::__Field(inName,inCallProp);
}

bool Debug_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { outValue = version_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createGraphic") ) { outValue = createGraphic_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"clearObjectPools") ) { outValue = clearObjectPools_dyn(); return true; }
	}
	return false;
}

hx::Val Debug_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"colour") ) { colour=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bgColour") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bgColour(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::util::ZPP_Debug >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transform(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawBodies") ) { drawBodies=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"drawBodyDetail") ) { drawBodyDetail=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cullingEnabled") ) { cullingEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawShapeDetail") ) { drawShapeDetail=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawConstraints") ) { drawConstraints=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawFluidArbiters") ) { drawFluidArbiters=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"drawSensorArbiters") ) { drawSensorArbiters=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"drawCollisionArbiters") ) { drawCollisionArbiters=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"drawShapeAngleIndicators") ) { drawShapeAngleIndicators=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Debug_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("drawCollisionArbiters","\x58","\x22","\xbb","\x14"));
	outFields->push(HX_HCSTRING("drawFluidArbiters","\xf0","\x4d","\xe1","\xc1"));
	outFields->push(HX_HCSTRING("drawSensorArbiters","\xe8","\x23","\x51","\x4c"));
	outFields->push(HX_HCSTRING("drawBodies","\xa4","\x96","\xa0","\x9c"));
	outFields->push(HX_HCSTRING("drawBodyDetail","\xf7","\xd3","\x45","\x9a"));
	outFields->push(HX_HCSTRING("drawShapeDetail","\xee","\xea","\xf8","\xc7"));
	outFields->push(HX_HCSTRING("drawShapeAngleIndicators","\x7a","\x5f","\xb7","\x29"));
	outFields->push(HX_HCSTRING("drawConstraints","\xd2","\xf3","\x4b","\xdd"));
	outFields->push(HX_HCSTRING("bgColour","\xf1","\xb3","\x8d","\x9b"));
	outFields->push(HX_HCSTRING("display","\x42","\x2a","\x4a","\xbb"));
	outFields->push(HX_HCSTRING("cullingEnabled","\xf1","\x77","\xac","\x15"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Debug_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::util::ZPP_Debug*/ ,(int)offsetof(Debug_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawCollisionArbiters),HX_HCSTRING("drawCollisionArbiters","\x58","\x22","\xbb","\x14")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawFluidArbiters),HX_HCSTRING("drawFluidArbiters","\xf0","\x4d","\xe1","\xc1")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawSensorArbiters),HX_HCSTRING("drawSensorArbiters","\xe8","\x23","\x51","\x4c")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawBodies),HX_HCSTRING("drawBodies","\xa4","\x96","\xa0","\x9c")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawBodyDetail),HX_HCSTRING("drawBodyDetail","\xf7","\xd3","\x45","\x9a")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawShapeDetail),HX_HCSTRING("drawShapeDetail","\xee","\xea","\xf8","\xc7")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawShapeAngleIndicators),HX_HCSTRING("drawShapeAngleIndicators","\x7a","\x5f","\xb7","\x29")},
	{hx::fsBool,(int)offsetof(Debug_obj,drawConstraints),HX_HCSTRING("drawConstraints","\xd2","\xf3","\x4b","\xdd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Debug_obj,colour),HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6")},
	{hx::fsBool,(int)offsetof(Debug_obj,cullingEnabled),HX_HCSTRING("cullingEnabled","\xf1","\x77","\xac","\x15")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Debug_obj_sStaticStorageInfo = 0;
#endif

static ::String Debug_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("drawCollisionArbiters","\x58","\x22","\xbb","\x14"),
	HX_HCSTRING("drawFluidArbiters","\xf0","\x4d","\xe1","\xc1"),
	HX_HCSTRING("drawSensorArbiters","\xe8","\x23","\x51","\x4c"),
	HX_HCSTRING("drawBodies","\xa4","\x96","\xa0","\x9c"),
	HX_HCSTRING("drawBodyDetail","\xf7","\xd3","\x45","\x9a"),
	HX_HCSTRING("drawShapeDetail","\xee","\xea","\xf8","\xc7"),
	HX_HCSTRING("drawShapeAngleIndicators","\x7a","\x5f","\xb7","\x29"),
	HX_HCSTRING("drawConstraints","\xd2","\xf3","\x4b","\xdd"),
	HX_HCSTRING("get_bgColour","\xfa","\x67","\xa7","\x50"),
	HX_HCSTRING("set_bgColour","\x6e","\x8b","\xa0","\x65"),
	HX_HCSTRING("colour","\x4c","\xc8","\x86","\xc6"),
	HX_HCSTRING("get_display","\x59","\x8a","\x44","\x41"),
	HX_HCSTRING("cullingEnabled","\xf1","\x77","\xac","\x15"),
	HX_HCSTRING("get_transform","\x43","\x01","\xf7","\x06"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawLine","\x18","\xc2","\x1c","\x5c"),
	HX_HCSTRING("drawCurve","\x0b","\x82","\x63","\x16"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawAABB","\xa4","\xe8","\xb8","\x54"),
	HX_HCSTRING("drawFilledTriangle","\xae","\x39","\xe9","\xd6"),
	HX_HCSTRING("drawFilledCircle","\x76","\x47","\xc4","\xa3"),
	HX_HCSTRING("drawPolygon","\xd6","\x46","\xd9","\x5b"),
	HX_HCSTRING("drawFilledPolygon","\x54","\xe6","\xd4","\xc4"),
	HX_HCSTRING("drawSpring","\xf1","\x51","\x59","\x05"),
	::String(null()) };

static void Debug_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Debug_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Debug_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Debug_obj::__mClass,"__mClass");
};

#endif

hx::Class Debug_obj::__mClass;

static ::String Debug_obj_sStaticFields[] = {
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("clearObjectPools","\x4b","\x84","\x4d","\x7f"),
	HX_HCSTRING("createGraphic","\x0c","\x33","\x4a","\x5c"),
	::String(null())
};

void Debug_obj::__register()
{
	hx::Object *dummy = new Debug_obj;
	Debug_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.util.Debug","\x8d","\x4a","\x62","\xab");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Debug_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Debug_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Debug_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Debug_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Debug_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Debug_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Debug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Debug_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace util
