// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nape_callbacks_BodyCallback
#include <nape/callbacks/BodyCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9be3745163f2db49_185_new,"nape.callbacks.BodyCallback","new",0x1cd59e3f,"nape.callbacks.BodyCallback.new","nape/callbacks/BodyCallback.hx",185,0x8ff3bd0f)
HX_DEFINE_STACK_FRAME(_hx_pos_9be3745163f2db49_193_get_body,"nape.callbacks.BodyCallback","get_body",0x0342bfec,"nape.callbacks.BodyCallback.get_body","nape/callbacks/BodyCallback.hx",193,0x8ff3bd0f)
HX_DEFINE_STACK_FRAME(_hx_pos_9be3745163f2db49_198_toString,"nape.callbacks.BodyCallback","toString",0x7adb5a6d,"nape.callbacks.BodyCallback.toString","nape/callbacks/BodyCallback.hx",198,0x8ff3bd0f)
static const ::String _hx_array_data_2c8412cd_3[] = {
	HX_("WAKE",24,24,b3,39),HX_("SLEEP",f7,f4,b2,fc),
};
namespace nape{
namespace callbacks{

void BodyCallback_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9be3745163f2db49_185_new)
            	HX_STACK_THIS(this)
HXLINE( 185)		super::__construct();
            	}

Dynamic BodyCallback_obj::__CreateEmpty() { return new BodyCallback_obj; }

void *BodyCallback_obj::_hx_vtable = 0;

Dynamic BodyCallback_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BodyCallback_obj > _hx_result = new BodyCallback_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BodyCallback_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ae4efa1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ae4efa1;
	} else {
		return inClassId==(int)0x1e829ba7;
	}
}

 ::nape::phys::Body BodyCallback_obj::get_body(){
            	HX_STACKFRAME(&_hx_pos_9be3745163f2db49_193_get_body)
            	HX_STACK_THIS(this)
HXLINE( 193)		return this->zpp_inner->body->outer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BodyCallback_obj,get_body,return )

::String BodyCallback_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_9be3745163f2db49_198_toString)
            	HX_STACK_THIS(this)
HXLINE( 199)		HX_VARI( ::String,ret) = HX_("Cb:",9b,2c,33,00);
HXLINE( 200)		ret = (HX_("Cb:",9b,2c,33,00) + ::Array_obj< ::String >::fromData( _hx_array_data_2c8412cd_3,2)->__get((this->zpp_inner->event - (int)2)));
HXLINE( 201)		ret = (ret + (HX_(":",3a,00,00,00) + this->zpp_inner->body->outer->toString()));
HXLINE( 202)		ret = (ret + (HX_(" : listener: ",60,26,46,e2) + ::Std_obj::string(this->zpp_inner->listener->outer)));
HXLINE( 203)		return ret;
            	}



hx::ObjectPtr< BodyCallback_obj > BodyCallback_obj::__new() {
	hx::ObjectPtr< BodyCallback_obj > __this = new BodyCallback_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BodyCallback_obj > BodyCallback_obj::__alloc(hx::Ctx *_hx_ctx) {
	BodyCallback_obj *__this = (BodyCallback_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BodyCallback_obj), true, "nape.callbacks.BodyCallback"));
	*(void **)__this = BodyCallback_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BodyCallback_obj::BodyCallback_obj()
{
}

hx::Val BodyCallback_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_body()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_body") ) { return hx::Val( get_body_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

void BodyCallback_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BodyCallback_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BodyCallback_obj_sStaticStorageInfo = 0;
#endif

static ::String BodyCallback_obj_sMemberFields[] = {
	HX_HCSTRING("get_body","\x2b","\x36","\xd6","\xc0"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void BodyCallback_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BodyCallback_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BodyCallback_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BodyCallback_obj::__mClass,"__mClass");
};

#endif

hx::Class BodyCallback_obj::__mClass;

void BodyCallback_obj::__register()
{
	hx::Object *dummy = new BodyCallback_obj;
	BodyCallback_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.callbacks.BodyCallback","\xcd","\x12","\x84","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BodyCallback_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BodyCallback_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BodyCallback_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BodyCallback_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BodyCallback_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BodyCallback_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace callbacks
