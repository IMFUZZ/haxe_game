// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_InteractionType
#include <nape/callbacks/InteractionType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8fda44c0afc3294b_181_new,"nape.callbacks.InteractionType","new",0xd712f318,"nape.callbacks.InteractionType.new","nape/callbacks/InteractionType.hx",181,0xf2de5b1a)
HX_DEFINE_STACK_FRAME(_hx_pos_8fda44c0afc3294b_192_toString,"nape.callbacks.InteractionType","toString",0x413ed2f4,"nape.callbacks.InteractionType.toString","nape/callbacks/InteractionType.hx",192,0xf2de5b1a)
HX_DEFINE_STACK_FRAME(_hx_pos_8fda44c0afc3294b_203_get_COLLISION,"nape.callbacks.InteractionType","get_COLLISION",0x1d91a4e1,"nape.callbacks.InteractionType.get_COLLISION","nape/callbacks/InteractionType.hx",203,0xf2de5b1a)
HX_DEFINE_STACK_FRAME(_hx_pos_8fda44c0afc3294b_215_get_SENSOR,"nape.callbacks.InteractionType","get_SENSOR",0xed25724b,"nape.callbacks.InteractionType.get_SENSOR","nape/callbacks/InteractionType.hx",215,0xf2de5b1a)
HX_DEFINE_STACK_FRAME(_hx_pos_8fda44c0afc3294b_228_get_FLUID,"nape.callbacks.InteractionType","get_FLUID",0x7164eaf9,"nape.callbacks.InteractionType.get_FLUID","nape/callbacks/InteractionType.hx",228,0xf2de5b1a)
HX_DEFINE_STACK_FRAME(_hx_pos_8fda44c0afc3294b_241_get_ANY,"nape.callbacks.InteractionType","get_ANY",0x5a593e1b,"nape.callbacks.InteractionType.get_ANY","nape/callbacks/InteractionType.hx",241,0xf2de5b1a)
namespace nape{
namespace callbacks{

void InteractionType_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8fda44c0afc3294b_181_new)
            	HX_STACK_THIS(this)
            	}

Dynamic InteractionType_obj::__CreateEmpty() { return new InteractionType_obj; }

void *InteractionType_obj::_hx_vtable = 0;

Dynamic InteractionType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InteractionType_obj > _hx_result = new InteractionType_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InteractionType_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78bb75a6;
}

::String InteractionType_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_8fda44c0afc3294b_192_toString)
            	HX_STACK_THIS(this)
HXLINE( 192)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION )) {
HXLINE( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 192)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION )) {
HXLINE( 192)			return HX_("COLLISION",52,18,93,d6);
            		}
            		else {
HXLINE( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR )) {
HXLINE( 193)				return HX_("SENSOR",3a,de,12,1e);
            			}
            			else {
HXLINE( 194)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID )) {
HXLINE( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 194)				if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID )) {
HXLINE( 194)					return HX_("FLUID",ea,91,89,80);
            				}
            				else {
HXLINE( 195)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_ANY )) {
HXLINE( 195)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 195)						::zpp_nape::util::ZPP_Flags_obj::InteractionType_ANY =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXDLIN( 195)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN( 195)					if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::InteractionType_ANY )) {
HXLINE( 195)						return HX_("ANY",cc,96,31,00);
            					}
            					else {
HXLINE( 196)						return HX_("",00,00,00,00);
            					}
            				}
            			}
            		}
HXLINE( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractionType_obj,toString,return )

 ::nape::callbacks::InteractionType InteractionType_obj::get_COLLISION(){
            	HX_GC_STACKFRAME(&_hx_pos_8fda44c0afc3294b_203_get_COLLISION)
HXLINE( 204)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION )) {
HXLINE( 205)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 206)			::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXLINE( 207)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 209)		return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_COLLISION;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(InteractionType_obj,get_COLLISION,return )

 ::nape::callbacks::InteractionType InteractionType_obj::get_SENSOR(){
            	HX_GC_STACKFRAME(&_hx_pos_8fda44c0afc3294b_215_get_SENSOR)
HXLINE( 216)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR )) {
HXLINE( 217)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 218)			::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXLINE( 219)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 221)		return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_SENSOR;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(InteractionType_obj,get_SENSOR,return )

 ::nape::callbacks::InteractionType InteractionType_obj::get_FLUID(){
            	HX_GC_STACKFRAME(&_hx_pos_8fda44c0afc3294b_228_get_FLUID)
HXLINE( 229)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID )) {
HXLINE( 230)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 231)			::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXLINE( 232)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 234)		return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_FLUID;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(InteractionType_obj,get_FLUID,return )

 ::nape::callbacks::InteractionType InteractionType_obj::get_ANY(){
            	HX_GC_STACKFRAME(&_hx_pos_8fda44c0afc3294b_241_get_ANY)
HXLINE( 242)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::InteractionType_ANY )) {
HXLINE( 243)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 244)			::zpp_nape::util::ZPP_Flags_obj::InteractionType_ANY =  ::nape::callbacks::InteractionType_obj::__alloc( HX_CTX );
HXLINE( 245)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 247)		return ::zpp_nape::util::ZPP_Flags_obj::InteractionType_ANY;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(InteractionType_obj,get_ANY,return )


hx::ObjectPtr< InteractionType_obj > InteractionType_obj::__new() {
	hx::ObjectPtr< InteractionType_obj > __this = new InteractionType_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< InteractionType_obj > InteractionType_obj::__alloc(hx::Ctx *_hx_ctx) {
	InteractionType_obj *__this = (InteractionType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InteractionType_obj), false, "nape.callbacks.InteractionType"));
	*(void **)__this = InteractionType_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

InteractionType_obj::InteractionType_obj()
{
}

hx::Val InteractionType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool InteractionType_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ANY") ) { if (inCallProp == hx::paccAlways) { outValue = get_ANY(); return true; } }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"FLUID") ) { if (inCallProp == hx::paccAlways) { outValue = get_FLUID(); return true; } }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"SENSOR") ) { if (inCallProp == hx::paccAlways) { outValue = get_SENSOR(); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_ANY") ) { outValue = get_ANY_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"COLLISION") ) { if (inCallProp == hx::paccAlways) { outValue = get_COLLISION(); return true; } }
		if (HX_FIELD_EQ(inName,"get_FLUID") ) { outValue = get_FLUID_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_SENSOR") ) { outValue = get_SENSOR_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_COLLISION") ) { outValue = get_COLLISION_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *InteractionType_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *InteractionType_obj_sStaticStorageInfo = 0;
#endif

static ::String InteractionType_obj_sMemberFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void InteractionType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InteractionType_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InteractionType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InteractionType_obj::__mClass,"__mClass");
};

#endif

hx::Class InteractionType_obj::__mClass;

static ::String InteractionType_obj_sStaticFields[] = {
	HX_HCSTRING("get_COLLISION","\x29","\xec","\xf6","\x97"),
	HX_HCSTRING("get_SENSOR","\x03","\x4e","\x9a","\x0e"),
	HX_HCSTRING("get_FLUID","\x41","\xee","\x32","\xc4"),
	HX_HCSTRING("get_ANY","\x63","\x5f","\xa6","\x26"),
	::String(null())
};

void InteractionType_obj::__register()
{
	hx::Object *dummy = new InteractionType_obj;
	InteractionType_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.callbacks.InteractionType","\x26","\xc7","\x2d","\x7f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InteractionType_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InteractionType_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(InteractionType_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InteractionType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InteractionType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InteractionType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InteractionType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InteractionType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace callbacks
