// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_ListenerType
#include <nape/callbacks/ListenerType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_70aa6ee36b7a85b0_181_new,"nape.callbacks.ListenerType","new",0xec0b3486,"nape.callbacks.ListenerType.new","nape/callbacks/ListenerType.hx",181,0xddcbcca8)
HX_DEFINE_STACK_FRAME(_hx_pos_70aa6ee36b7a85b0_192_toString,"nape.callbacks.ListenerType","toString",0x56fca2c6,"nape.callbacks.ListenerType.toString","nape/callbacks/ListenerType.hx",192,0xddcbcca8)
HX_DEFINE_STACK_FRAME(_hx_pos_70aa6ee36b7a85b0_203_get_BODY,"nape.callbacks.ListenerType","get_BODY",0xca24d045,"nape.callbacks.ListenerType.get_BODY","nape/callbacks/ListenerType.hx",203,0xddcbcca8)
HX_DEFINE_STACK_FRAME(_hx_pos_70aa6ee36b7a85b0_216_get_CONSTRAINT,"nape.callbacks.ListenerType","get_CONSTRAINT",0x9db05e40,"nape.callbacks.ListenerType.get_CONSTRAINT","nape/callbacks/ListenerType.hx",216,0xddcbcca8)
HX_DEFINE_STACK_FRAME(_hx_pos_70aa6ee36b7a85b0_229_get_INTERACTION,"nape.callbacks.ListenerType","get_INTERACTION",0x8147006f,"nape.callbacks.ListenerType.get_INTERACTION","nape/callbacks/ListenerType.hx",229,0xddcbcca8)
HX_DEFINE_STACK_FRAME(_hx_pos_70aa6ee36b7a85b0_242_get_PRE,"nape.callbacks.ListenerType","get_PRE",0xad2533c0,"nape.callbacks.ListenerType.get_PRE","nape/callbacks/ListenerType.hx",242,0xddcbcca8)
namespace nape{
namespace callbacks{

void ListenerType_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_70aa6ee36b7a85b0_181_new)
            	HX_STACK_THIS(this)
            	}

Dynamic ListenerType_obj::__CreateEmpty() { return new ListenerType_obj; }

void *ListenerType_obj::_hx_vtable = 0;

Dynamic ListenerType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ListenerType_obj > _hx_result = new ListenerType_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ListenerType_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x10d21668;
}

::String ListenerType_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_70aa6ee36b7a85b0_192_toString)
            	HX_STACK_THIS(this)
HXLINE( 192)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY )) {
HXLINE( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 192)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN( 192)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY )) {
HXLINE( 192)			return HX_("BODY",a2,42,dc,2b);
            		}
            		else {
HXLINE( 193)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT )) {
HXLINE( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 193)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 193)			if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT )) {
HXLINE( 193)				return HX_("CONSTRAINT",5d,74,d5,4c);
            			}
            			else {
HXLINE( 194)				if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION )) {
HXLINE( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 194)					::zpp_nape::util::ZPP_Flags_obj::internal = false;
            				}
HXDLIN( 194)				if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION )) {
HXLINE( 194)					return HX_("INTERACTION",b2,43,95,12);
            				}
            				else {
HXLINE( 195)					if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE )) {
HXLINE( 195)						::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 195)						::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXDLIN( 195)						::zpp_nape::util::ZPP_Flags_obj::internal = false;
            					}
HXDLIN( 195)					if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE )) {
HXLINE( 195)						return HX_("PRE",03,fc,3c,00);
            					}
            					else {
HXLINE( 196)						return HX_("",00,00,00,00);
            					}
            				}
            			}
            		}
HXLINE( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ListenerType_obj,toString,return )

 ::nape::callbacks::ListenerType ListenerType_obj::get_BODY(){
            	HX_GC_STACKFRAME(&_hx_pos_70aa6ee36b7a85b0_203_get_BODY)
HXLINE( 204)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY )) {
HXLINE( 205)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 206)			::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXLINE( 207)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 209)		return ::zpp_nape::util::ZPP_Flags_obj::ListenerType_BODY;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ListenerType_obj,get_BODY,return )

 ::nape::callbacks::ListenerType ListenerType_obj::get_CONSTRAINT(){
            	HX_GC_STACKFRAME(&_hx_pos_70aa6ee36b7a85b0_216_get_CONSTRAINT)
HXLINE( 217)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT )) {
HXLINE( 218)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 219)			::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXLINE( 220)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 222)		return ::zpp_nape::util::ZPP_Flags_obj::ListenerType_CONSTRAINT;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ListenerType_obj,get_CONSTRAINT,return )

 ::nape::callbacks::ListenerType ListenerType_obj::get_INTERACTION(){
            	HX_GC_STACKFRAME(&_hx_pos_70aa6ee36b7a85b0_229_get_INTERACTION)
HXLINE( 230)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION )) {
HXLINE( 231)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 232)			::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXLINE( 233)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 235)		return ::zpp_nape::util::ZPP_Flags_obj::ListenerType_INTERACTION;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ListenerType_obj,get_INTERACTION,return )

 ::nape::callbacks::ListenerType ListenerType_obj::get_PRE(){
            	HX_GC_STACKFRAME(&_hx_pos_70aa6ee36b7a85b0_242_get_PRE)
HXLINE( 243)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE )) {
HXLINE( 244)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXLINE( 245)			::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE =  ::nape::callbacks::ListenerType_obj::__alloc( HX_CTX );
HXLINE( 246)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXLINE( 248)		return ::zpp_nape::util::ZPP_Flags_obj::ListenerType_PRE;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ListenerType_obj,get_PRE,return )


hx::ObjectPtr< ListenerType_obj > ListenerType_obj::__new() {
	hx::ObjectPtr< ListenerType_obj > __this = new ListenerType_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ListenerType_obj > ListenerType_obj::__alloc(hx::Ctx *_hx_ctx) {
	ListenerType_obj *__this = (ListenerType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ListenerType_obj), false, "nape.callbacks.ListenerType"));
	*(void **)__this = ListenerType_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ListenerType_obj::ListenerType_obj()
{
}

hx::Val ListenerType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ListenerType_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"PRE") ) { if (inCallProp == hx::paccAlways) { outValue = get_PRE(); return true; } }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BODY") ) { if (inCallProp == hx::paccAlways) { outValue = get_BODY(); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_PRE") ) { outValue = get_PRE_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_BODY") ) { outValue = get_BODY_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"CONSTRAINT") ) { if (inCallProp == hx::paccAlways) { outValue = get_CONSTRAINT(); return true; } }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"INTERACTION") ) { if (inCallProp == hx::paccAlways) { outValue = get_INTERACTION(); return true; } }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_CONSTRAINT") ) { outValue = get_CONSTRAINT_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_INTERACTION") ) { outValue = get_INTERACTION_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ListenerType_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ListenerType_obj_sStaticStorageInfo = 0;
#endif

static ::String ListenerType_obj_sMemberFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ListenerType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ListenerType_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ListenerType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ListenerType_obj::__mClass,"__mClass");
};

#endif

hx::Class ListenerType_obj::__mClass;

static ::String ListenerType_obj_sStaticFields[] = {
	HX_HCSTRING("get_BODY","\x2b","\xfe","\x96","\xab"),
	HX_HCSTRING("get_CONSTRAINT","\xa6","\xfc","\xca","\xc2"),
	HX_HCSTRING("get_INTERACTION","\x49","\xfb","\x76","\xd3"),
	HX_HCSTRING("get_PRE","\x9a","\xc4","\xb1","\x26"),
	::String(null())
};

void ListenerType_obj::__register()
{
	hx::Object *dummy = new ListenerType_obj;
	ListenerType_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.callbacks.ListenerType","\x94","\x39","\x71","\x32");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ListenerType_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ListenerType_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ListenerType_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ListenerType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ListenerType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ListenerType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ListenerType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ListenerType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace callbacks
