// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_nape_callbacks_CbTypeList
#include <nape/callbacks/CbTypeList.h>
#endif
#ifndef INCLUDED_nape_callbacks_OptionType
#include <nape/callbacks/OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f8c2d3015beae7ec_199_new,"nape.callbacks.OptionType","new",0xe0e4f307,"nape.callbacks.OptionType.new","nape/callbacks/OptionType.hx",199,0x9382bdc7)
HX_DEFINE_STACK_FRAME(_hx_pos_f8c2d3015beae7ec_214_get_includes,"nape.callbacks.OptionType","get_includes",0x750fe9cd,"nape.callbacks.OptionType.get_includes","nape/callbacks/OptionType.hx",214,0x9382bdc7)
HX_DEFINE_STACK_FRAME(_hx_pos_f8c2d3015beae7ec_228_get_excludes,"nape.callbacks.OptionType","get_excludes",0x301cc4db,"nape.callbacks.OptionType.get_excludes","nape/callbacks/OptionType.hx",228,0x9382bdc7)
HX_DEFINE_STACK_FRAME(_hx_pos_f8c2d3015beae7ec_267_including,"nape.callbacks.OptionType","including",0x19eb5b4c,"nape.callbacks.OptionType.including","nape/callbacks/OptionType.hx",267,0x9382bdc7)
HX_DEFINE_STACK_FRAME(_hx_pos_f8c2d3015beae7ec_285_excluding,"nape.callbacks.OptionType","excluding",0x0a1e2c7e,"nape.callbacks.OptionType.excluding","nape/callbacks/OptionType.hx",285,0x9382bdc7)
HX_DEFINE_STACK_FRAME(_hx_pos_f8c2d3015beae7ec_292_toString,"nape.callbacks.OptionType","toString",0x921bb0a5,"nape.callbacks.OptionType.toString","nape/callbacks/OptionType.hx",292,0x9382bdc7)
namespace nape{
namespace callbacks{

void OptionType_obj::__construct( ::Dynamic includes, ::Dynamic excludes){
            	HX_GC_STACKFRAME(&_hx_pos_f8c2d3015beae7ec_199_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(includes,"includes")
            	HX_STACK_ARG(excludes,"excludes")
HXLINE( 203)		this->zpp_inner = null();
HXLINE( 248)		this->zpp_inner =  ::zpp_nape::callbacks::ZPP_OptionType_obj::__alloc( HX_CTX );
HXLINE( 249)		this->zpp_inner->outer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 250)		if (hx::IsNotNull( includes )) {
HXLINE( 250)			this->including(includes);
            		}
HXLINE( 251)		if (hx::IsNotNull( excludes )) {
HXLINE( 251)			this->excluding(excludes);
            		}
            	}

Dynamic OptionType_obj::__CreateEmpty() { return new OptionType_obj; }

void *OptionType_obj::_hx_vtable = 0;

Dynamic OptionType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OptionType_obj > _hx_result = new OptionType_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OptionType_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a8e0f31;
}

 ::nape::callbacks::CbTypeList OptionType_obj::get_includes(){
            	HX_STACKFRAME(&_hx_pos_f8c2d3015beae7ec_214_get_includes)
            	HX_STACK_THIS(this)
HXLINE( 215)		if (hx::IsNull( this->zpp_inner->wrap_includes )) {
HXLINE( 215)			this->zpp_inner->setup_includes();
            		}
HXLINE( 216)		return this->zpp_inner->wrap_includes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionType_obj,get_includes,return )

 ::nape::callbacks::CbTypeList OptionType_obj::get_excludes(){
            	HX_STACKFRAME(&_hx_pos_f8c2d3015beae7ec_228_get_excludes)
            	HX_STACK_THIS(this)
HXLINE( 229)		if (hx::IsNull( this->zpp_inner->wrap_excludes )) {
HXLINE( 229)			this->zpp_inner->setup_excludes();
            		}
HXLINE( 230)		return this->zpp_inner->wrap_excludes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionType_obj,get_excludes,return )

 ::nape::callbacks::OptionType OptionType_obj::including( ::Dynamic includes){
            	HX_STACKFRAME(&_hx_pos_f8c2d3015beae7ec_267_including)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(includes,"includes")
HXLINE( 268)		this->zpp_inner->append(this->zpp_inner->includes,includes);
HXLINE( 269)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionType_obj,including,return )

 ::nape::callbacks::OptionType OptionType_obj::excluding( ::Dynamic excludes){
            	HX_STACKFRAME(&_hx_pos_f8c2d3015beae7ec_285_excluding)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(excludes,"excludes")
HXLINE( 286)		this->zpp_inner->append(this->zpp_inner->excludes,excludes);
HXLINE( 287)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionType_obj,excluding,return )

::String OptionType_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_f8c2d3015beae7ec_292_toString)
            	HX_STACK_THIS(this)
HXLINE( 293)		if (hx::IsNull( this->zpp_inner->wrap_includes )) {
HXLINE( 293)			this->zpp_inner->setup_includes();
            		}
HXDLIN( 293)		HX_VARI( ::String,inc) = this->zpp_inner->wrap_includes->toString();
HXLINE( 294)		if (hx::IsNull( this->zpp_inner->wrap_excludes )) {
HXLINE( 294)			this->zpp_inner->setup_excludes();
            		}
HXLINE( 295)		return ((((HX_("@{",3b,38,00,00) + inc) + HX_(" excluding ",c9,99,76,25)) + this->zpp_inner->wrap_excludes->toString()) + HX_("}",7d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionType_obj,toString,return )


hx::ObjectPtr< OptionType_obj > OptionType_obj::__new( ::Dynamic includes, ::Dynamic excludes) {
	hx::ObjectPtr< OptionType_obj > __this = new OptionType_obj();
	__this->__construct(includes,excludes);
	return __this;
}

hx::ObjectPtr< OptionType_obj > OptionType_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic includes, ::Dynamic excludes) {
	OptionType_obj *__this = (OptionType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OptionType_obj), true, "nape.callbacks.OptionType"));
	*(void **)__this = OptionType_obj::_hx_vtable;
	__this->__construct(includes,excludes);
	return __this;
}

OptionType_obj::OptionType_obj()
{
}

void OptionType_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionType);
	HX_MARK_MEMBER_NAME(zpp_inner,"zpp_inner");
	HX_MARK_END_CLASS();
}

void OptionType_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zpp_inner,"zpp_inner");
}

hx::Val OptionType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"includes") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_includes()); }
		if (HX_FIELD_EQ(inName,"excludes") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_excludes()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { return hx::Val( zpp_inner); }
		if (HX_FIELD_EQ(inName,"including") ) { return hx::Val( including_dyn()); }
		if (HX_FIELD_EQ(inName,"excluding") ) { return hx::Val( excluding_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_includes") ) { return hx::Val( get_includes_dyn()); }
		if (HX_FIELD_EQ(inName,"get_excludes") ) { return hx::Val( get_excludes_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val OptionType_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"zpp_inner") ) { zpp_inner=inValue.Cast<  ::zpp_nape::callbacks::ZPP_OptionType >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionType_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"));
	outFields->push(HX_HCSTRING("includes","\x4b","\x65","\x27","\x66"));
	outFields->push(HX_HCSTRING("excludes","\x59","\x40","\x34","\x21"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OptionType_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_OptionType*/ ,(int)offsetof(OptionType_obj,zpp_inner),HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *OptionType_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionType_obj_sMemberFields[] = {
	HX_HCSTRING("zpp_inner","\x51","\x65","\x85","\x78"),
	HX_HCSTRING("get_includes","\x54","\x19","\x41","\x1b"),
	HX_HCSTRING("get_excludes","\x62","\xf4","\x4d","\xd6"),
	HX_HCSTRING("including","\x65","\x41","\x54","\xfc"),
	HX_HCSTRING("excluding","\x97","\x12","\x87","\xec"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void OptionType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OptionType_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OptionType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OptionType_obj::__mClass,"__mClass");
};

#endif

hx::Class OptionType_obj::__mClass;

void OptionType_obj::__register()
{
	hx::Object *dummy = new OptionType_obj;
	OptionType_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("nape.callbacks.OptionType","\x95","\x63","\x87","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OptionType_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OptionType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OptionType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OptionType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nape
} // end namespace callbacks
