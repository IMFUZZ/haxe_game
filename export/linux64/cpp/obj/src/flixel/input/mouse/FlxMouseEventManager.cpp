// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse__FlxMouseEventManager_ObjectMouseData
#include <flixel/input/mouse/_FlxMouseEventManager/ObjectMouseData.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_319_new,"flixel.input.mouse.FlxMouseEventManager","new",0xae332b17,"flixel.input.mouse.FlxMouseEventManager.new","flixel/input/mouse/FlxMouseEventManager.hx",319,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_331_destroy,"flixel.input.mouse.FlxMouseEventManager","destroy",0x1c6eaf31,"flixel.input.mouse.FlxMouseEventManager.destroy","flixel/input/mouse/FlxMouseEventManager.hx",331,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_338_update,"flixel.input.mouse.FlxMouseEventManager","update",0x84b077b2,"flixel.input.mouse.FlxMouseEventManager.update","flixel/input/mouse/FlxMouseEventManager.hx",338,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_430_clearRegistry,"flixel.input.mouse.FlxMouseEventManager","clearRegistry",0xaf4f39e1,"flixel.input.mouse.FlxMouseEventManager.clearRegistry","flixel/input/mouse/FlxMouseEventManager.hx",430,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_442_checkOverlap,"flixel.input.mouse.FlxMouseEventManager","checkOverlap",0x58381208,"flixel.input.mouse.FlxMouseEventManager.checkOverlap","flixel/input/mouse/FlxMouseEventManager.hx",442,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_472_checkOverlapWithPoint,"flixel.input.mouse.FlxMouseEventManager","checkOverlapWithPoint",0x0bd96542,"flixel.input.mouse.FlxMouseEventManager.checkOverlapWithPoint","flixel/input/mouse/FlxMouseEventManager.hx",472,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_483_checkPixelPerfectOverlap,"flixel.input.mouse.FlxMouseEventManager","checkPixelPerfectOverlap",0xb8bf1721,"flixel.input.mouse.FlxMouseEventManager.checkPixelPerfectOverlap","flixel/input/mouse/FlxMouseEventManager.hx",483,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_47_init,"flixel.input.mouse.FlxMouseEventManager","init",0xbb4b4079,"flixel.input.mouse.FlxMouseEventManager.init","flixel/input/mouse/FlxMouseEventManager.hx",47,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_69_add,"flixel.input.mouse.FlxMouseEventManager","add",0xae294cd8,"flixel.input.mouse.FlxMouseEventManager.add","flixel/input/mouse/FlxMouseEventManager.hx",69,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_88_remove,"flixel.input.mouse.FlxMouseEventManager","remove",0x02338ded,"flixel.input.mouse.FlxMouseEventManager.remove","flixel/input/mouse/FlxMouseEventManager.hx",88,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_109_removeAll,"flixel.input.mouse.FlxMouseEventManager","removeAll",0xef9bd534,"flixel.input.mouse.FlxMouseEventManager.removeAll","flixel/input/mouse/FlxMouseEventManager.hx",109,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_129_reorder,"flixel.input.mouse.FlxMouseEventManager","reorder",0x13a3c632,"flixel.input.mouse.FlxMouseEventManager.reorder","flixel/input/mouse/FlxMouseEventManager.hx",129,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_144_setMouseDownCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseDownCallback",0xe8b31b73,"flixel.input.mouse.FlxMouseEventManager.setMouseDownCallback","flixel/input/mouse/FlxMouseEventManager.hx",144,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_160_setMouseUpCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseUpCallback",0x3b6a476c,"flixel.input.mouse.FlxMouseEventManager.setMouseUpCallback","flixel/input/mouse/FlxMouseEventManager.hx",160,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_176_setMouseOverCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseOverCallback",0x088af665,"flixel.input.mouse.FlxMouseEventManager.setMouseOverCallback","flixel/input/mouse/FlxMouseEventManager.hx",176,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_192_setMouseOutCallback,"flixel.input.mouse.FlxMouseEventManager","setMouseOutCallback",0x235b22c7,"flixel.input.mouse.FlxMouseEventManager.setMouseOutCallback","flixel/input/mouse/FlxMouseEventManager.hx",192,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_207_setObjectMouseEnabled,"flixel.input.mouse.FlxMouseEventManager","setObjectMouseEnabled",0xe24566f4,"flixel.input.mouse.FlxMouseEventManager.setObjectMouseEnabled","flixel/input/mouse/FlxMouseEventManager.hx",207,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_220_isObjectMouseEnabled,"flixel.input.mouse.FlxMouseEventManager","isObjectMouseEnabled",0x6e5fac2e,"flixel.input.mouse.FlxMouseEventManager.isObjectMouseEnabled","flixel/input/mouse/FlxMouseEventManager.hx",220,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_239_setObjectMouseChildren,"flixel.input.mouse.FlxMouseEventManager","setObjectMouseChildren",0x9e2bdb6c,"flixel.input.mouse.FlxMouseEventManager.setObjectMouseChildren","flixel/input/mouse/FlxMouseEventManager.hx",239,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_252_isObjectMouseChildren,"flixel.input.mouse.FlxMouseEventManager","isObjectMouseChildren",0xa90e28f2,"flixel.input.mouse.FlxMouseEventManager.isObjectMouseChildren","flixel/input/mouse/FlxMouseEventManager.hx",252,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_269_setObjectMouseButtons,"flixel.input.mouse.FlxMouseEventManager","setObjectMouseButtons",0x2e89b4b4,"flixel.input.mouse.FlxMouseEventManager.setObjectMouseButtons","flixel/input/mouse/FlxMouseEventManager.hx",269,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_281_traverseFlxGroup,"flixel.input.mouse.FlxMouseEventManager","traverseFlxGroup",0xb5503c28,"flixel.input.mouse.FlxMouseEventManager.traverseFlxGroup","flixel/input/mouse/FlxMouseEventManager.hx",281,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_301_getRegister,"flixel.input.mouse.FlxMouseEventManager","getRegister",0xc4eed2d0,"flixel.input.mouse.FlxMouseEventManager.getRegister","flixel/input/mouse/FlxMouseEventManager.hx",301,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_37_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",37,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_38_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",38,0x750c3856)
HX_DEFINE_STACK_FRAME(_hx_pos_7737cad62ef16250_40_boot,"flixel.input.mouse.FlxMouseEventManager","boot",0xb6ab899b,"flixel.input.mouse.FlxMouseEventManager.boot","flixel/input/mouse/FlxMouseEventManager.hx",40,0x750c3856)
namespace flixel{
namespace input{
namespace mouse{

void FlxMouseEventManager_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_319_new)
            	HX_STACK_THIS(this)
HXLINE( 320)		super::__construct();
HXLINE( 322)		if (hx::IsNotNull( ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects )) {
HXLINE( 324)			this->clearRegistry();
            		}
HXLINE( 326)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 327)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic FlxMouseEventManager_obj::__CreateEmpty() { return new FlxMouseEventManager_obj; }

void *FlxMouseEventManager_obj::_hx_vtable = 0;

Dynamic FlxMouseEventManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxMouseEventManager_obj > _hx_result = new FlxMouseEventManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxMouseEventManager_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1c93faa1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1c93faa1;
	} else {
		return inClassId==(int)0x25a685e0;
	}
}

void FlxMouseEventManager_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_331_destroy)
            	HX_STACK_THIS(this)
HXLINE( 332)		this->clearRegistry();
HXLINE( 333)		::flixel::input::mouse::FlxMouseEventManager_obj::_point = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(::flixel::input::mouse::FlxMouseEventManager_obj::_point)) );
HXLINE( 334)		this->super::destroy();
            	}


void FlxMouseEventManager_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_338_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 339)		this->super::update(elapsed);
HXLINE( 341)		HX_VARI( ::Array< ::Dynamic>,currentOverObjects) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 343)		{
HXLINE( 343)			HX_VARI( int,_g) = (int)0;
HXDLIN( 343)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
HXDLIN( 343)			while((_g < _g1->length)){
HXLINE( 343)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 343)				_g = (_g + (int)1);
HXLINE( 346)				if (hx::IsNull( reg->object->acceleration )) {
HXLINE( 348)					::flixel::input::mouse::FlxMouseEventManager_obj::remove(reg->object);
HXLINE( 349)					continue;
            				}
HXLINE( 352)				bool _hx_tmp;
HXDLIN( 352)				bool _hx_tmp1;
HXDLIN( 352)				bool _hx_tmp2;
HXDLIN( 352)				if (!(!(reg->object->alive))) {
HXLINE( 352)					_hx_tmp2 = !(reg->object->exists);
            				}
            				else {
HXLINE( 352)					_hx_tmp2 = true;
            				}
HXDLIN( 352)				if (!(_hx_tmp2)) {
HXLINE( 352)					_hx_tmp1 = !(reg->object->visible);
            				}
            				else {
HXLINE( 352)					_hx_tmp1 = true;
            				}
HXDLIN( 352)				if (!(_hx_tmp1)) {
HXLINE( 352)					_hx_tmp = !(reg->mouseEnabled);
            				}
            				else {
HXLINE( 352)					_hx_tmp = true;
            				}
HXDLIN( 352)				if (_hx_tmp) {
HXLINE( 354)					continue;
            				}
HXLINE( 357)				if (this->checkOverlap(reg)) {
HXLINE( 359)					currentOverObjects->push(reg);
HXLINE( 361)					if (!(reg->mouseChildren)) {
HXLINE( 363)						goto _hx_goto_2;
            					}
            				}
            			}
            			_hx_goto_2:;
            		}
HXLINE( 369)		{
HXLINE( 369)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 369)			while((_g2 < currentOverObjects->length)){
HXLINE( 369)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,current) = currentOverObjects->__get(_g2).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 369)				_g2 = (_g2 + (int)1);
HXLINE( 371)				if (hx::IsNotNull( current->onMouseOver )) {
HXLINE( 373)					bool _hx_tmp3;
HXDLIN( 373)					bool _hx_tmp4;
HXDLIN( 373)					if (current->object->exists) {
HXLINE( 373)						_hx_tmp4 = current->object->visible;
            					}
            					else {
HXLINE( 373)						_hx_tmp4 = false;
            					}
HXDLIN( 373)					if (_hx_tmp4) {
HXLINE( 373)						_hx_tmp3 = hx::IsNull( ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(current->object,::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects) );
            					}
            					else {
HXLINE( 373)						_hx_tmp3 = false;
            					}
HXDLIN( 373)					if (_hx_tmp3) {
HXLINE( 375)						current->onMouseOver(current->object);
            					}
            				}
            			}
            		}
HXLINE( 381)		{
HXLINE( 381)			HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN( 381)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects;
HXDLIN( 381)			while((_g3 < _g11->length)){
HXLINE( 381)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,over) = _g11->__get(_g3).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 381)				_g3 = (_g3 + (int)1);
HXLINE( 383)				if (hx::IsNotNull( over->onMouseOut )) {
HXLINE( 387)					bool _hx_tmp5;
HXDLIN( 387)					bool _hx_tmp6;
HXDLIN( 387)					if (!(!(over->object->exists))) {
HXLINE( 387)						_hx_tmp6 = !(over->object->visible);
            					}
            					else {
HXLINE( 387)						_hx_tmp6 = true;
            					}
HXDLIN( 387)					if (!(_hx_tmp6)) {
HXLINE( 387)						_hx_tmp5 = hx::IsNull( ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(over->object,currentOverObjects) );
            					}
            					else {
HXLINE( 387)						_hx_tmp5 = true;
            					}
HXDLIN( 387)					if (_hx_tmp5) {
HXLINE( 389)						over->onMouseOut(over->object);
            					}
            				}
            			}
            		}
HXLINE( 396)		{
HXLINE( 396)			HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 396)			while((_g4 < currentOverObjects->length)){
HXLINE( 396)				HX_VARI_NAME(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,current1,"current") = currentOverObjects->__get(_g4).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 396)				_g4 = (_g4 + (int)1);
HXLINE( 398)				bool _hx_tmp7;
HXDLIN( 398)				bool _hx_tmp8;
HXDLIN( 398)				if (hx::IsNotNull( current1->onMouseDown )) {
HXLINE( 398)					_hx_tmp8 = current1->object->exists;
            				}
            				else {
HXLINE( 398)					_hx_tmp8 = false;
            				}
HXDLIN( 398)				if (_hx_tmp8) {
HXLINE( 398)					_hx_tmp7 = current1->object->visible;
            				}
            				else {
HXLINE( 398)					_hx_tmp7 = false;
            				}
HXDLIN( 398)				if (_hx_tmp7) {
HXLINE( 400)					HX_VARI_NAME( int,_g12,"_g1") = (int)0;
HXDLIN( 400)					HX_VARI_NAME( ::Array< int >,_g21,"_g2") = current1->mouseButtons;
HXDLIN( 400)					while((_g12 < _g21->length)){
HXLINE( 400)						HX_VARI( int,buttonID) = _g21->__get(_g12);
HXDLIN( 400)						_g12 = (_g12 + (int)1);
HXLINE( 402)						if ((::flixel::input::mouse::FlxMouseButton_obj::getByID(buttonID)->current == (int)2)) {
HXLINE( 404)							current1->onMouseDown(current1->object);
            						}
            					}
            				}
            			}
            		}
HXLINE( 411)		{
HXLINE( 411)			HX_VARI_NAME( int,_g5,"_g") = (int)0;
HXDLIN( 411)			while((_g5 < currentOverObjects->length)){
HXLINE( 411)				HX_VARI_NAME(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,current2,"current") = currentOverObjects->__get(_g5).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 411)				_g5 = (_g5 + (int)1);
HXLINE( 413)				bool _hx_tmp9;
HXDLIN( 413)				bool _hx_tmp10;
HXDLIN( 413)				if (hx::IsNotNull( current2->onMouseUp )) {
HXLINE( 413)					_hx_tmp10 = current2->object->exists;
            				}
            				else {
HXLINE( 413)					_hx_tmp10 = false;
            				}
HXDLIN( 413)				if (_hx_tmp10) {
HXLINE( 413)					_hx_tmp9 = current2->object->visible;
            				}
            				else {
HXLINE( 413)					_hx_tmp9 = false;
            				}
HXDLIN( 413)				if (_hx_tmp9) {
HXLINE( 415)					HX_VARI_NAME( int,_g13,"_g1") = (int)0;
HXDLIN( 415)					HX_VARI_NAME( ::Array< int >,_g22,"_g2") = current2->mouseButtons;
HXDLIN( 415)					while((_g13 < _g22->length)){
HXLINE( 415)						HX_VARI_NAME( int,buttonID1,"buttonID") = _g22->__get(_g13);
HXDLIN( 415)						_g13 = (_g13 + (int)1);
HXLINE( 417)						if ((::flixel::input::mouse::FlxMouseButton_obj::getByID(buttonID1)->current == (int)-1)) {
HXLINE( 419)							current2->onMouseUp(current2->object);
            						}
            					}
            				}
            			}
            		}
HXLINE( 426)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = currentOverObjects;
            	}


void FlxMouseEventManager_obj::clearRegistry(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_430_clearRegistry)
            	HX_STACK_THIS(this)
HXLINE( 431)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = null();
HXLINE( 433)		{
HXLINE( 433)			HX_VARI( int,_g) = (int)0;
HXDLIN( 433)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
HXDLIN( 433)			while((_g < _g1->length)){
HXLINE( 433)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 433)				_g = (_g + (int)1);
HXLINE( 435)				::flixel::input::mouse::FlxMouseEventManager_obj::remove(reg->object);
            			}
            		}
HXLINE( 438)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,clearRegistry,(void))

bool FlxMouseEventManager_obj::checkOverlap( ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData Register){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_442_checkOverlap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Register,"Register")
HXLINE( 443)		{
HXLINE( 443)			HX_VARI( int,_g) = (int)0;
HXDLIN( 443)			HX_VARI( ::Array< ::Dynamic>,_g1) = Register->object->get_cameras();
HXDLIN( 443)			while((_g < _g1->length)){
HXLINE( 443)				HX_VARI(  ::flixel::FlxCamera,camera) = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 443)				_g = (_g + (int)1);
HXLINE( 446)				::flixel::input::mouse::FlxMouseEventManager_obj::_point = ::flixel::FlxG_obj::mouse->getWorldPosition(camera,::flixel::input::mouse::FlxMouseEventManager_obj::_point);
HXLINE( 448)				HX_VARI(  ::flixel::math::FlxPoint,Point) = ::flixel::input::mouse::FlxMouseEventManager_obj::_point;
HXDLIN( 448)				bool _hx_tmp;
HXDLIN( 448)				bool _hx_tmp1;
HXDLIN( 448)				if (Register->pixelPerfect) {
HXLINE( 448)					_hx_tmp1 = hx::IsNotNull( Register->sprite );
            				}
            				else {
HXLINE( 448)					_hx_tmp1 = false;
            				}
HXDLIN( 448)				if (_hx_tmp1) {
HXLINE( 448)					HX_VARI(  ::flixel::FlxSprite,Sprite) = Register->sprite;
HXDLIN( 448)					if ((Sprite->angle != (int)0)) {
HXLINE( 448)						Float X = (Sprite->x + Sprite->origin->x);
HXDLIN( 448)						Float Y = (Sprite->y + Sprite->origin->y);
HXDLIN( 448)						HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 448)						point->_inPool = false;
HXDLIN( 448)						point->_weak = true;
HXDLIN( 448)						Point->rotate(point,-(Sprite->angle));
            					}
HXDLIN( 448)					_hx_tmp = Sprite->pixelsOverlapPoint(Point,(int)1,camera);
            				}
            				else {
HXLINE( 448)					_hx_tmp = Register->object->overlapsPoint(Point,true,camera);
            				}
HXDLIN( 448)				if (_hx_tmp) {
HXLINE( 450)					return true;
            				}
            			}
            		}
HXLINE( 467)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,checkOverlap,return )

bool FlxMouseEventManager_obj::checkOverlapWithPoint( ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData Register, ::flixel::math::FlxPoint Point, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_472_checkOverlapWithPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Register,"Register")
            	HX_STACK_ARG(Point,"Point")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 472)		bool _hx_tmp;
HXDLIN( 472)		if (Register->pixelPerfect) {
HXLINE( 472)			_hx_tmp = hx::IsNotNull( Register->sprite );
            		}
            		else {
HXLINE( 472)			_hx_tmp = false;
            		}
HXDLIN( 472)		if (_hx_tmp) {
HXLINE( 474)			HX_VARI(  ::flixel::FlxSprite,Sprite) = Register->sprite;
HXDLIN( 474)			if ((Sprite->angle != (int)0)) {
HXLINE( 474)				Float X = (Sprite->x + Sprite->origin->x);
HXDLIN( 474)				Float Y = (Sprite->y + Sprite->origin->y);
HXDLIN( 474)				HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 474)				point->_inPool = false;
HXDLIN( 474)				point->_weak = true;
HXDLIN( 474)				Point->rotate(point,-(Sprite->angle));
            			}
HXDLIN( 474)			return Sprite->pixelsOverlapPoint(Point,(int)1,Camera);
            		}
            		else {
HXLINE( 478)			return Register->object->overlapsPoint(Point,true,Camera);
            		}
HXLINE( 472)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxMouseEventManager_obj,checkOverlapWithPoint,return )

bool FlxMouseEventManager_obj::checkPixelPerfectOverlap( ::flixel::math::FlxPoint Point, ::flixel::FlxSprite Sprite, ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_483_checkPixelPerfectOverlap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Point,"Point")
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 484)		if ((Sprite->angle != (int)0)) {
HXLINE( 486)			Float X = (Sprite->x + Sprite->origin->x);
HXDLIN( 486)			Float Y = (Sprite->y + Sprite->origin->y);
HXDLIN( 486)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 486)			point->_inPool = false;
HXDLIN( 486)			point->_weak = true;
HXLINE( 487)			Point->rotate(point,-(Sprite->angle));
            		}
HXLINE( 489)		return Sprite->pixelsOverlapPoint(Point,(int)1,Camera);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxMouseEventManager_obj,checkPixelPerfectOverlap,return )

::Array< ::Dynamic> FlxMouseEventManager_obj::_registeredObjects;

::Array< ::Dynamic> FlxMouseEventManager_obj::_mouseOverObjects;

 ::flixel::math::FlxPoint FlxMouseEventManager_obj::_point;

void FlxMouseEventManager_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_7737cad62ef16250_47_init)
HXLINE(  47)		if (hx::IsNull( ::flixel::FlxG_obj::plugins->get(hx::ClassOf< ::flixel::input::mouse::FlxMouseEventManager >()) )) {
HXLINE(  48)			 ::flixel::_hx_system::frontEnds::PluginFrontEnd _hx_tmp = ::flixel::FlxG_obj::plugins;
HXDLIN(  48)			_hx_tmp->add_flixel_input_mouse_FlxMouseEventManager( ::flixel::input::mouse::FlxMouseEventManager_obj::__alloc( HX_CTX ));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,init,(void))

 ::Dynamic FlxMouseEventManager_obj::add( ::Dynamic Object, ::Dynamic OnMouseDown, ::Dynamic OnMouseUp, ::Dynamic OnMouseOver, ::Dynamic OnMouseOut,hx::Null< bool >  __o_MouseChildren,hx::Null< bool >  __o_MouseEnabled,hx::Null< bool >  __o_PixelPerfect,::Array< int > MouseButtons){
bool MouseChildren = __o_MouseChildren.Default(false);
bool MouseEnabled = __o_MouseEnabled.Default(true);
bool PixelPerfect = __o_PixelPerfect.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7737cad62ef16250_69_add)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(OnMouseDown,"OnMouseDown")
            	HX_STACK_ARG(OnMouseUp,"OnMouseUp")
            	HX_STACK_ARG(OnMouseOver,"OnMouseOver")
            	HX_STACK_ARG(OnMouseOut,"OnMouseOut")
            	HX_STACK_ARG(MouseChildren,"MouseChildren")
            	HX_STACK_ARG(MouseEnabled,"MouseEnabled")
            	HX_STACK_ARG(PixelPerfect,"PixelPerfect")
            	HX_STACK_ARG(MouseButtons,"MouseButtons")
HXLINE(  70)		if (hx::IsNull( ::flixel::FlxG_obj::plugins->get(hx::ClassOf< ::flixel::input::mouse::FlxMouseEventManager >()) )) {
HXLINE(  70)			 ::flixel::_hx_system::frontEnds::PluginFrontEnd _hx_tmp = ::flixel::FlxG_obj::plugins;
HXDLIN(  70)			_hx_tmp->add_flixel_input_mouse_FlxMouseEventManager( ::flixel::input::mouse::FlxMouseEventManager_obj::__alloc( HX_CTX ));
            		}
HXLINE(  72)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,newReg) =  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData_obj::__alloc( HX_CTX ,Object,OnMouseDown,OnMouseUp,OnMouseOver,OnMouseOut,MouseChildren,MouseEnabled,PixelPerfect,MouseButtons);
HXLINE(  75)		if (::Std_obj::is(Object,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(  77)			newReg->sprite = ( ( ::flixel::FlxSprite)(Object) );
            		}
HXLINE(  80)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->unshift(newReg);
HXLINE(  81)		return Object;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(FlxMouseEventManager_obj,add,return )

 ::Dynamic FlxMouseEventManager_obj::remove( ::Dynamic Object){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_88_remove)
            	HX_STACK_ARG(Object,"Object")
HXLINE(  89)		{
HXLINE(  89)			HX_VARI( int,_g) = (int)0;
HXDLIN(  89)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
HXDLIN(  89)			while((_g < _g1->length)){
HXLINE(  89)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN(  89)				_g = (_g + (int)1);
HXLINE(  91)				if (hx::IsEq( reg->object,Object )) {
HXLINE(  93)					reg->object = null();
HXLINE(  94)					reg->sprite = null();
HXLINE(  95)					reg->onMouseDown = null();
HXLINE(  96)					reg->onMouseUp = null();
HXLINE(  97)					reg->onMouseOver = null();
HXLINE(  98)					reg->onMouseOut = null();
HXLINE(  99)					::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects->remove(reg);
            				}
            			}
            		}
HXLINE( 102)		return Object;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,remove,return )

void FlxMouseEventManager_obj::removeAll(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_109_removeAll)
HXLINE( 110)		if (hx::IsNotNull( ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects )) {
HXLINE( 112)			HX_VARI( int,_g) = (int)0;
HXDLIN( 112)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
HXDLIN( 112)			while((_g < _g1->length)){
HXLINE( 112)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = _g1->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 112)				_g = (_g + (int)1);
HXLINE( 114)				::flixel::input::mouse::FlxMouseEventManager_obj::remove(reg->object);
            			}
            		}
HXLINE( 117)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 118)		::flixel::input::mouse::FlxMouseEventManager_obj::_mouseOverObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,removeAll,(void))

void FlxMouseEventManager_obj::reorder(){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_129_reorder)
HXLINE( 130)		HX_VARI( ::Array< ::Dynamic>,orderedObjects) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 132)		::flixel::input::mouse::FlxMouseEventManager_obj::traverseFlxGroup(::flixel::FlxG_obj::game->_state,orderedObjects);
HXLINE( 134)		orderedObjects->reverse();
HXLINE( 135)		::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects = orderedObjects;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxMouseEventManager_obj,reorder,(void))

void FlxMouseEventManager_obj::setMouseDownCallback( ::Dynamic Object, ::Dynamic OnMouseDown){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_144_setMouseDownCallback)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(OnMouseDown,"OnMouseDown")
HXLINE( 145)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 147)		if (hx::IsNotNull( reg )) {
HXLINE( 149)			reg->onMouseDown = OnMouseDown;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseDownCallback,(void))

void FlxMouseEventManager_obj::setMouseUpCallback( ::Dynamic Object, ::Dynamic OnMouseUp){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_160_setMouseUpCallback)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(OnMouseUp,"OnMouseUp")
HXLINE( 161)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 163)		if (hx::IsNotNull( reg )) {
HXLINE( 165)			reg->onMouseUp = OnMouseUp;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseUpCallback,(void))

void FlxMouseEventManager_obj::setMouseOverCallback( ::Dynamic Object, ::Dynamic OnMouseOver){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_176_setMouseOverCallback)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(OnMouseOver,"OnMouseOver")
HXLINE( 177)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 179)		if (hx::IsNotNull( reg )) {
HXLINE( 181)			reg->onMouseOver = OnMouseOver;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseOverCallback,(void))

void FlxMouseEventManager_obj::setMouseOutCallback( ::Dynamic Object, ::Dynamic OnMouseOut){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_192_setMouseOutCallback)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(OnMouseOut,"OnMouseOut")
HXLINE( 193)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 195)		if (hx::IsNotNull( reg )) {
HXLINE( 197)			reg->onMouseOut = OnMouseOut;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setMouseOutCallback,(void))

void FlxMouseEventManager_obj::setObjectMouseEnabled( ::Dynamic Object,bool MouseEnabled){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_207_setObjectMouseEnabled)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(MouseEnabled,"MouseEnabled")
HXLINE( 208)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 210)		if (hx::IsNotNull( reg )) {
HXLINE( 212)			reg->mouseEnabled = MouseEnabled;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setObjectMouseEnabled,(void))

bool FlxMouseEventManager_obj::isObjectMouseEnabled( ::Dynamic Object){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_220_isObjectMouseEnabled)
            	HX_STACK_ARG(Object,"Object")
HXLINE( 221)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 223)		if (hx::IsNotNull( reg )) {
HXLINE( 225)			return reg->mouseEnabled;
            		}
            		else {
HXLINE( 229)			return false;
            		}
HXLINE( 223)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,isObjectMouseEnabled,return )

void FlxMouseEventManager_obj::setObjectMouseChildren( ::Dynamic Object,bool MouseChildren){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_239_setObjectMouseChildren)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(MouseChildren,"MouseChildren")
HXLINE( 240)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 242)		if (hx::IsNotNull( reg )) {
HXLINE( 244)			reg->mouseChildren = MouseChildren;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setObjectMouseChildren,(void))

bool FlxMouseEventManager_obj::isObjectMouseChildren( ::Dynamic Object){
            	HX_GC_STACKFRAME(&_hx_pos_7737cad62ef16250_252_isObjectMouseChildren)
            	HX_STACK_ARG(Object,"Object")
HXLINE( 253)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(Object,null());
HXLINE( 255)		if (hx::IsNotNull( reg )) {
HXLINE( 257)			return reg->mouseChildren;
            		}
            		else {
HXLINE( 261)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxMouseEventManager , isObjectMouseChildren() : object not found",2c,1c,56,e2),null()));
            		}
HXLINE( 255)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMouseEventManager_obj,isObjectMouseChildren,return )

void FlxMouseEventManager_obj::setObjectMouseButtons( ::Dynamic object,::Array< int > mouseButtons){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_269_setObjectMouseButtons)
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(mouseButtons,"mouseButtons")
HXLINE( 270)		HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(object,null());
HXLINE( 272)		if (hx::IsNotNull( reg )) {
HXLINE( 274)			reg->mouseButtons = mouseButtons;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,setObjectMouseButtons,(void))

void FlxMouseEventManager_obj::traverseFlxGroup( ::flixel::group::FlxTypedGroup Group,::Array< ::Dynamic> OrderedObjects){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_281_traverseFlxGroup)
            	HX_STACK_ARG(Group,"Group")
            	HX_STACK_ARG(OrderedObjects,"OrderedObjects")
HXLINE( 281)		HX_VARI( int,_g) = (int)0;
HXDLIN( 281)		HX_VARI( ::cpp::VirtualArray,_g1) = Group->members;
HXDLIN( 281)		while((_g < _g1->get_length())){
HXLINE( 281)			HX_VARI(  ::Dynamic,basic) = _g1->__get(_g);
HXDLIN( 281)			_g = (_g + (int)1);
HXLINE( 283)			HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(( ( ::flixel::FlxBasic)(basic) ));
HXLINE( 284)			if (hx::IsNotNull( group )) {
HXLINE( 286)				::flixel::input::mouse::FlxMouseEventManager_obj::traverseFlxGroup(group,OrderedObjects);
            			}
HXLINE( 288)			if (::Std_obj::is(basic,hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 290)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = ::flixel::input::mouse::FlxMouseEventManager_obj::getRegister(( ( ::flixel::FlxObject)(basic) ),null());
HXLINE( 292)				if (hx::IsNotNull( reg )) {
HXLINE( 294)					OrderedObjects->push(reg);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,traverseFlxGroup,(void))

 ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData FlxMouseEventManager_obj::getRegister( ::Dynamic Object,::Array< ::Dynamic> Register){
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_301_getRegister)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Register,"Register")
HXLINE( 302)		if (hx::IsNull( Register )) {
HXLINE( 304)			Register = ::flixel::input::mouse::FlxMouseEventManager_obj::_registeredObjects;
            		}
HXLINE( 307)		{
HXLINE( 307)			HX_VARI( int,_g) = (int)0;
HXDLIN( 307)			while((_g < Register->length)){
HXLINE( 307)				HX_VARI(  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData,reg) = Register->__get(_g).StaticCast<  ::flixel::input::mouse::_FlxMouseEventManager::ObjectMouseData >();
HXDLIN( 307)				_g = (_g + (int)1);
HXLINE( 309)				if (hx::IsEq( reg->object,Object )) {
HXLINE( 311)					return reg;
            				}
            			}
            		}
HXLINE( 315)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxMouseEventManager_obj,getRegister,return )


hx::ObjectPtr< FlxMouseEventManager_obj > FlxMouseEventManager_obj::__new() {
	hx::ObjectPtr< FlxMouseEventManager_obj > __this = new FlxMouseEventManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxMouseEventManager_obj > FlxMouseEventManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxMouseEventManager_obj *__this = (FlxMouseEventManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxMouseEventManager_obj), true, "flixel.input.mouse.FlxMouseEventManager"));
	*(void **)__this = FlxMouseEventManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxMouseEventManager_obj::FlxMouseEventManager_obj()
{
}

hx::Val FlxMouseEventManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"checkOverlap") ) { return hx::Val( checkOverlap_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"clearRegistry") ) { return hx::Val( clearRegistry_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"checkOverlapWithPoint") ) { return hx::Val( checkOverlapWithPoint_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"checkPixelPerfectOverlap") ) { return hx::Val( checkPixelPerfectOverlap_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxMouseEventManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { outValue = _point; return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"reorder") ) { outValue = reorder_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"removeAll") ) { outValue = removeAll_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getRegister") ) { outValue = getRegister_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"traverseFlxGroup") ) { outValue = traverseFlxGroup_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_mouseOverObjects") ) { outValue = _mouseOverObjects; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_registeredObjects") ) { outValue = _registeredObjects; return true; }
		if (HX_FIELD_EQ(inName,"setMouseUpCallback") ) { outValue = setMouseUpCallback_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setMouseOutCallback") ) { outValue = setMouseOutCallback_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setMouseDownCallback") ) { outValue = setMouseDownCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setMouseOverCallback") ) { outValue = setMouseOverCallback_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isObjectMouseEnabled") ) { outValue = isObjectMouseEnabled_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setObjectMouseEnabled") ) { outValue = setObjectMouseEnabled_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isObjectMouseChildren") ) { outValue = isObjectMouseChildren_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setObjectMouseButtons") ) { outValue = setObjectMouseButtons_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"setObjectMouseChildren") ) { outValue = setObjectMouseChildren_dyn(); return true; }
	}
	return false;
}

bool FlxMouseEventManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { _point=ioValue.Cast<  ::flixel::math::FlxPoint >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_mouseOverObjects") ) { _mouseOverObjects=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_registeredObjects") ) { _registeredObjects=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxMouseEventManager_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxMouseEventManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &FlxMouseEventManager_obj::_registeredObjects,HX_HCSTRING("_registeredObjects","\x33","\x2c","\xb1","\xfd")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &FlxMouseEventManager_obj::_mouseOverObjects,HX_HCSTRING("_mouseOverObjects","\x1a","\x9a","\x98","\xa8")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(void *) &FlxMouseEventManager_obj::_point,HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxMouseEventManager_obj_sMemberFields[] = {
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("clearRegistry","\x6a","\xb4","\xfc","\x03"),
	HX_HCSTRING("checkOverlap","\x9f","\xfb","\x96","\x96"),
	HX_HCSTRING("checkOverlapWithPoint","\xcb","\x10","\xc2","\x44"),
	HX_HCSTRING("checkPixelPerfectOverlap","\x38","\x87","\xe1","\x62"),
	::String(null()) };

static void FlxMouseEventManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_registeredObjects,"_registeredObjects");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_mouseOverObjects,"_mouseOverObjects");
	HX_MARK_MEMBER_NAME(FlxMouseEventManager_obj::_point,"_point");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxMouseEventManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_registeredObjects,"_registeredObjects");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_mouseOverObjects,"_mouseOverObjects");
	HX_VISIT_MEMBER_NAME(FlxMouseEventManager_obj::_point,"_point");
};

#endif

hx::Class FlxMouseEventManager_obj::__mClass;

static ::String FlxMouseEventManager_obj_sStaticFields[] = {
	HX_HCSTRING("_registeredObjects","\x33","\x2c","\xb1","\xfd"),
	HX_HCSTRING("_mouseOverObjects","\x1a","\x9a","\x98","\xa8"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("removeAll","\x3d","\x17","\xe5","\xca"),
	HX_HCSTRING("reorder","\xfb","\x43","\xbb","\x1b"),
	HX_HCSTRING("setMouseDownCallback","\x0a","\xf4","\x07","\xda"),
	HX_HCSTRING("setMouseUpCallback","\x43","\xfc","\x86","\x24"),
	HX_HCSTRING("setMouseOverCallback","\xfc","\xce","\xdf","\xf9"),
	HX_HCSTRING("setMouseOutCallback","\x10","\xaa","\x5c","\x33"),
	HX_HCSTRING("setObjectMouseEnabled","\x7d","\x12","\x2e","\x1b"),
	HX_HCSTRING("isObjectMouseEnabled","\xc5","\x84","\xb4","\x5f"),
	HX_HCSTRING("setObjectMouseChildren","\xc3","\x47","\xd9","\x30"),
	HX_HCSTRING("isObjectMouseChildren","\x7b","\xd4","\xf6","\xe1"),
	HX_HCSTRING("setObjectMouseButtons","\x3d","\x60","\x72","\x67"),
	HX_HCSTRING("traverseFlxGroup","\x3f","\x3d","\x59","\xc9"),
	HX_HCSTRING("getRegister","\x19","\x69","\x93","\xf6"),
	::String(null())
};

void FlxMouseEventManager_obj::__register()
{
	hx::Object *dummy = new FlxMouseEventManager_obj;
	FlxMouseEventManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.mouse.FlxMouseEventManager","\xa5","\x53","\x34","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxMouseEventManager_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxMouseEventManager_obj::__SetStatic;
	__mClass->mMarkFunc = FlxMouseEventManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxMouseEventManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxMouseEventManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxMouseEventManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxMouseEventManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxMouseEventManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxMouseEventManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxMouseEventManager_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_37_boot)
HXLINE(  37)		_registeredObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_38_boot)
HXLINE(  38)		_mouseOverObjects = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_7737cad62ef16250_40_boot)
HXLINE(  40)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  40)			point->_inPool = false;
HXDLIN(  40)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_7737cad62ef16250_40_boot)
HXLINE(  40)		_point =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace flixel
} // end namespace input
} // end namespace mouse
