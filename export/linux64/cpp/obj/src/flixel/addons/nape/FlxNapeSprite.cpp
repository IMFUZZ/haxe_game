// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSpace
#include <flixel/addons/nape/FlxNapeSpace.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_22_new,"flixel.addons.nape.FlxNapeSprite","new",0x927785f4,"flixel.addons.nape.FlxNapeSprite.new","flixel/addons/nape/FlxNapeSprite.hx",22,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_78_destroy,"flixel.addons.nape.FlxNapeSprite","destroy",0xc2763c8e,"flixel.addons.nape.FlxNapeSprite.destroy","flixel/addons/nape/FlxNapeSprite.hx",78,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_88_update,"flixel.addons.nape.FlxNapeSprite","update",0xb23484f5,"flixel.addons.nape.FlxNapeSprite.update","flixel/addons/nape/FlxNapeSprite.hx",88,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_102_kill,"flixel.addons.nape.FlxNapeSprite","kill",0x94250b8a,"flixel.addons.nape.FlxNapeSprite.kill","flixel/addons/nape/FlxNapeSprite.hx",102,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_116_revive,"flixel.addons.nape.FlxNapeSprite","revive",0x35a5f941,"flixel.addons.nape.FlxNapeSprite.revive","flixel/addons/nape/FlxNapeSprite.hx",116,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_132_addPremadeBody,"flixel.addons.nape.FlxNapeSprite","addPremadeBody",0x42b17685,"flixel.addons.nape.FlxNapeSprite.addPremadeBody","flixel/addons/nape/FlxNapeSprite.hx",132,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_151_createCircularBody,"flixel.addons.nape.FlxNapeSprite","createCircularBody",0x406956a9,"flixel.addons.nape.FlxNapeSprite.createCircularBody","flixel/addons/nape/FlxNapeSprite.hx",151,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_174_createRectangularBody,"flixel.addons.nape.FlxNapeSprite","createRectangularBody",0x984e32f8,"flixel.addons.nape.FlxNapeSprite.createRectangularBody","flixel/addons/nape/FlxNapeSprite.hx",174,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_206_setBodyMaterial,"flixel.addons.nape.FlxNapeSprite","setBodyMaterial",0xec9e9bbf,"flixel.addons.nape.FlxNapeSprite.setBodyMaterial","flixel/addons/nape/FlxNapeSprite.hx",206,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_218_destroyPhysObjects,"flixel.addons.nape.FlxNapeSprite","destroyPhysObjects",0x7450bf34,"flixel.addons.nape.FlxNapeSprite.destroyPhysObjects","flixel/addons/nape/FlxNapeSprite.hx",218,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_235_setDrag,"flixel.addons.nape.FlxNapeSprite","setDrag",0xa5e47c4a,"flixel.addons.nape.FlxNapeSprite.setDrag","flixel/addons/nape/FlxNapeSprite.hx",235,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_254_setBody,"flixel.addons.nape.FlxNapeSprite","setBody",0xa48fcaf8,"flixel.addons.nape.FlxNapeSprite.setBody","flixel/addons/nape/FlxNapeSprite.hx",254,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_264_updatePhysObjects,"flixel.addons.nape.FlxNapeSprite","updatePhysObjects",0x8c2c922d,"flixel.addons.nape.FlxNapeSprite.updatePhysObjects","flixel/addons/nape/FlxNapeSprite.hx",264,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_282_updatePosition,"flixel.addons.nape.FlxNapeSprite","updatePosition",0x060e5ebe,"flixel.addons.nape.FlxNapeSprite.updatePosition","flixel/addons/nape/FlxNapeSprite.hx",282,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_288_set_physicsEnabled,"flixel.addons.nape.FlxNapeSprite","set_physicsEnabled",0xe2ef6ea3,"flixel.addons.nape.FlxNapeSprite.set_physicsEnabled","flixel/addons/nape/FlxNapeSprite.hx",288,0x811bdfdd)
HX_DEFINE_STACK_FRAME(_hx_pos_aaa8114a5cca0f38_302_setPosition,"flixel.addons.nape.FlxNapeSprite","setPosition",0x8b4cd3ff,"flixel.addons.nape.FlxNapeSprite.setPosition","flixel/addons/nape/FlxNapeSprite.hx",302,0x811bdfdd)
namespace flixel{
namespace addons{
namespace nape{

void FlxNapeSprite_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,hx::Null< bool >  __o_CreateRectangularBody,hx::Null< bool >  __o_EnablePhysics){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
bool CreateRectangularBody = __o_CreateRectangularBody.Default(true);
bool EnablePhysics = __o_EnablePhysics.Default(true);
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_22_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(SimpleGraphic,"SimpleGraphic")
            	HX_STACK_ARG(CreateRectangularBody,"CreateRectangularBody")
            	HX_STACK_ARG(EnablePhysics,"EnablePhysics")
HXLINE(  44)		this->_angularDrag = ((Float)1);
HXLINE(  39)		this->_linearDrag = ((Float)1);
HXLINE(  33)		this->physicsEnabled = false;
HXLINE(  61)		super::__construct(X,Y,SimpleGraphic);
HXLINE(  63)		if (CreateRectangularBody) {
HXLINE(  65)			this->createRectangularBody(null(),null(),null());
            		}
HXLINE(  67)		{
HXLINE(  67)			if (hx::IsNotNull( this->body )) {
HXLINE(  67)				HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN(  67)				HX_VAR(  ::nape::space::Space,space);
HXDLIN(  67)				if (EnablePhysics) {
HXLINE(  67)					space = ::flixel::addons::nape::FlxNapeSpace_obj::space;
            				}
            				else {
HXLINE(  67)					space = null();
            				}
HXDLIN(  67)				{
HXLINE(  67)					_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN(  67)					 ::nape::space::Space _hx_tmp;
HXDLIN(  67)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  67)						_hx_tmp = null();
            					}
            					else {
HXLINE(  67)						_hx_tmp = _this->zpp_inner->space->outer;
            					}
HXDLIN(  67)					if (hx::IsNotEq( _hx_tmp,space )) {
HXLINE(  67)						 ::nape::space::Space _hx_tmp1;
HXDLIN(  67)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  67)							_hx_tmp1 = null();
            						}
            						else {
HXLINE(  67)							_hx_tmp1 = _this->zpp_inner->space->outer;
            						}
HXDLIN(  67)						if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE(  67)							_this->zpp_inner->component->woken = false;
            						}
HXDLIN(  67)						 ::nape::space::Space _hx_tmp2;
HXDLIN(  67)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  67)							_hx_tmp2 = null();
            						}
            						else {
HXLINE(  67)							_hx_tmp2 = _this->zpp_inner->space->outer;
            						}
HXDLIN(  67)						if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE(  67)							 ::nape::space::Space _this1;
HXDLIN(  67)							if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  67)								_this1 = null();
            							}
            							else {
HXLINE(  67)								_this1 = _this->zpp_inner->space->outer;
            							}
HXDLIN(  67)							_this1->zpp_inner->wrap_bodies->remove(_this);
            						}
HXDLIN(  67)						if (hx::IsNotNull( space )) {
HXLINE(  67)							HX_VARI_NAME(  ::nape::phys::BodyList,_this2,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN(  67)							if (_this2->zpp_inner->reverse_flag) {
HXLINE(  67)								_this2->push(_this);
            							}
            							else {
HXLINE(  67)								_this2->unshift(_this);
            							}
            						}
            					}
            				}
            			}
HXDLIN(  67)			this->physicsEnabled = EnablePhysics;
            		}
            	}

Dynamic FlxNapeSprite_obj::__CreateEmpty() { return new FlxNapeSprite_obj; }

void *FlxNapeSprite_obj::_hx_vtable = 0;

Dynamic FlxNapeSprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxNapeSprite_obj > _hx_result = new FlxNapeSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxNapeSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19b9dc60) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x19b9dc60;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void FlxNapeSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_78_destroy)
            	HX_STACK_THIS(this)
HXLINE(  79)		this->destroyPhysObjects();
HXLINE(  81)		this->super::destroy();
            	}


void FlxNapeSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_88_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  89)		this->super::update(elapsed);
HXLINE(  91)		bool _hx_tmp;
HXDLIN(  91)		if (hx::IsNotNull( this->body )) {
HXLINE(  91)			_hx_tmp = this->moves;
            		}
            		else {
HXLINE(  91)			_hx_tmp = false;
            		}
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  93)			this->updatePhysObjects();
            		}
            	}


void FlxNapeSprite_obj::kill(){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_102_kill)
            	HX_STACK_THIS(this)
HXLINE( 103)		this->super::kill();
HXLINE( 105)		if (hx::IsNotNull( this->body )) {
HXLINE( 107)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 107)			{
HXLINE( 107)				_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN( 107)				 ::nape::space::Space _hx_tmp;
HXDLIN( 107)				if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 107)					_hx_tmp = null();
            				}
            				else {
HXLINE( 107)					_hx_tmp = _this->zpp_inner->space->outer;
            				}
HXDLIN( 107)				if (hx::IsNotNull( _hx_tmp )) {
HXLINE( 107)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 107)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 107)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 107)						_hx_tmp1 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 107)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 107)						_this->zpp_inner->component->woken = false;
            					}
HXDLIN( 107)					 ::nape::space::Space _hx_tmp2;
HXDLIN( 107)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 107)						_hx_tmp2 = null();
            					}
            					else {
HXLINE( 107)						_hx_tmp2 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 107)					if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE( 107)						 ::nape::space::Space _this1;
HXDLIN( 107)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 107)							_this1 = null();
            						}
            						else {
HXLINE( 107)							_this1 = _this->zpp_inner->space->outer;
            						}
HXDLIN( 107)						_this1->zpp_inner->wrap_bodies->remove(_this);
            					}
            				}
            			}
            		}
            	}


void FlxNapeSprite_obj::revive(){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_116_revive)
            	HX_STACK_THIS(this)
HXLINE( 117)		this->super::revive();
HXLINE( 119)		if (hx::IsNotNull( this->body )) {
HXLINE( 121)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 121)			HX_VARI(  ::nape::space::Space,space) = ::flixel::addons::nape::FlxNapeSpace_obj::space;
HXDLIN( 121)			{
HXLINE( 121)				_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN( 121)				 ::nape::space::Space _hx_tmp;
HXDLIN( 121)				if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 121)					_hx_tmp = null();
            				}
            				else {
HXLINE( 121)					_hx_tmp = _this->zpp_inner->space->outer;
            				}
HXDLIN( 121)				if (hx::IsNotEq( _hx_tmp,space )) {
HXLINE( 121)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 121)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 121)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 121)						_hx_tmp1 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 121)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 121)						_this->zpp_inner->component->woken = false;
            					}
HXDLIN( 121)					 ::nape::space::Space _hx_tmp2;
HXDLIN( 121)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 121)						_hx_tmp2 = null();
            					}
            					else {
HXLINE( 121)						_hx_tmp2 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 121)					if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE( 121)						 ::nape::space::Space _this1;
HXDLIN( 121)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 121)							_this1 = null();
            						}
            						else {
HXLINE( 121)							_this1 = _this->zpp_inner->space->outer;
            						}
HXDLIN( 121)						_this1->zpp_inner->wrap_bodies->remove(_this);
            					}
HXDLIN( 121)					if (hx::IsNotNull( space )) {
HXLINE( 121)						HX_VARI_NAME(  ::nape::phys::BodyList,_this2,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN( 121)						if (_this2->zpp_inner->reverse_flag) {
HXLINE( 121)							_this2->push(_this);
            						}
            						else {
HXLINE( 121)							_this2->unshift(_this);
            						}
            					}
            				}
            			}
            		}
            	}


void FlxNapeSprite_obj::addPremadeBody( ::nape::phys::Body NewBody){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_132_addPremadeBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(NewBody,"NewBody")
HXLINE( 133)		if (hx::IsNotNull( this->body )) {
HXLINE( 135)			this->destroyPhysObjects();
            		}
HXLINE( 138)		{
HXLINE( 138)			if (hx::IsNull( NewBody->zpp_inner->wrap_pos )) {
HXLINE( 138)				NewBody->zpp_inner->setupPosition();
            			}
HXDLIN( 138)			HX_VARI(  ::nape::geom::Vec2,_this) = NewBody->zpp_inner->wrap_pos;
HXDLIN( 138)			HX_VARI( Float,x) = this->x;
HXDLIN( 138)			{
HXLINE( 138)				{
HXLINE( 138)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = _this->zpp_inner;
HXDLIN( 138)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 138)						_this1->_validate();
            					}
            				}
HXDLIN( 138)				if ((_this->zpp_inner->x != x)) {
HXLINE( 138)					_this->zpp_inner->x = x;
HXDLIN( 138)					{
HXLINE( 138)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _this->zpp_inner;
HXDLIN( 138)						if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 138)							_this2->_invalidate(_this2);
            						}
            					}
            				}
            			}
HXDLIN( 138)			{
HXLINE( 138)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this->zpp_inner;
HXDLIN( 138)				if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 138)					_this3->_validate();
            				}
            			}
            		}
HXLINE( 139)		{
HXLINE( 139)			if (hx::IsNull( NewBody->zpp_inner->wrap_pos )) {
HXLINE( 139)				NewBody->zpp_inner->setupPosition();
            			}
HXDLIN( 139)			HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = NewBody->zpp_inner->wrap_pos;
HXDLIN( 139)			HX_VARI( Float,y) = this->y;
HXDLIN( 139)			{
HXLINE( 139)				{
HXLINE( 139)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this4->zpp_inner;
HXDLIN( 139)					if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 139)						_this5->_validate();
            					}
            				}
HXDLIN( 139)				if ((_this4->zpp_inner->y != y)) {
HXLINE( 139)					_this4->zpp_inner->y = y;
HXDLIN( 139)					{
HXLINE( 139)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = _this4->zpp_inner;
HXDLIN( 139)						if (hx::IsNotNull( _this6->_invalidate )) {
HXLINE( 139)							_this6->_invalidate(_this6);
            						}
            					}
            				}
            			}
HXDLIN( 139)			{
HXLINE( 139)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = _this4->zpp_inner;
HXDLIN( 139)				if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 139)					_this7->_validate();
            				}
            			}
            		}
HXLINE( 140)		this->setBody(NewBody);
HXLINE( 141)		this->setBodyMaterial(null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxNapeSprite_obj,addPremadeBody,(void))

void FlxNapeSprite_obj::createCircularBody(hx::Null< Float >  __o_Radius, ::nape::phys::BodyType _Type){
Float Radius = __o_Radius.Default(16);
            	HX_GC_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_151_createCircularBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Radius,"Radius")
            	HX_STACK_ARG(_Type,"_Type")
HXLINE( 152)		if (hx::IsNotNull( this->body )) {
HXLINE( 154)			this->destroyPhysObjects();
            		}
HXLINE( 157)		this->centerOffsets(false);
HXLINE( 158)		 ::nape::phys::BodyType _hx_tmp;
HXDLIN( 158)		if (hx::IsNotNull( _Type )) {
HXLINE( 158)			_hx_tmp = _Type;
            		}
            		else {
HXLINE( 158)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 158)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 158)				::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 158)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 158)			_hx_tmp = ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC;
            		}
HXDLIN( 158)		HX_VARI( Float,x) = this->x;
HXDLIN( 158)		HX_VARI( Float,y) = this->y;
HXDLIN( 158)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 158)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 158)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 158)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 158)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 158)			ret->zpp_pool = null();
            		}
HXDLIN( 158)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 158)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 158)			{
HXLINE( 158)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 158)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 158)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 158)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 158)					ret1->next = null();
            				}
HXDLIN( 158)				ret1->weak = false;
            			}
HXDLIN( 158)			ret1->_immutable = false;
HXDLIN( 158)			{
HXLINE( 158)				ret1->x = x;
HXDLIN( 158)				ret1->y = y;
            			}
HXDLIN( 158)			ret->zpp_inner = ret1;
HXDLIN( 158)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 158)			bool _hx_tmp1;
HXDLIN( 158)			{
HXLINE( 158)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 158)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 158)					_this->_validate();
            				}
            			}
HXDLIN( 158)			if ((ret->zpp_inner->x == x)) {
HXLINE( 158)				{
HXLINE( 158)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 158)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 158)						_this1->_validate();
            					}
            				}
HXDLIN( 158)				_hx_tmp1 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 158)				_hx_tmp1 = false;
            			}
HXDLIN( 158)			if (!(_hx_tmp1)) {
HXLINE( 158)				{
HXLINE( 158)					ret->zpp_inner->x = x;
HXDLIN( 158)					ret->zpp_inner->y = y;
            				}
HXDLIN( 158)				{
HXLINE( 158)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 158)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 158)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 158)		ret->zpp_inner->weak = true;
HXDLIN( 158)		this->setBody( ::nape::phys::Body_obj::__alloc( HX_CTX ,_hx_tmp,ret));
HXLINE( 159)		{
HXLINE( 159)			HX_VARI_NAME(  ::nape::shape::ShapeList,_this3,"_this") = this->body->zpp_inner->wrap_shapes;
HXDLIN( 159)			HX_VARI(  ::nape::shape::Shape,obj) =  ::nape::shape::Circle_obj::__alloc( HX_CTX ,Radius,null(),null(),null());
HXDLIN( 159)			if (_this3->zpp_inner->reverse_flag) {
HXLINE( 159)				_this3->push(obj);
            			}
            			else {
HXLINE( 159)				_this3->unshift(obj);
            			}
            		}
HXLINE( 161)		this->setBodyMaterial(null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxNapeSprite_obj,createCircularBody,(void))

void FlxNapeSprite_obj::createRectangularBody(hx::Null< Float >  __o_Width,hx::Null< Float >  __o_Height, ::nape::phys::BodyType _Type){
Float Width = __o_Width.Default(0);
Float Height = __o_Height.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_174_createRectangularBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(_Type,"_Type")
HXLINE( 175)		if (hx::IsNotNull( this->body )) {
HXLINE( 177)			this->destroyPhysObjects();
            		}
HXLINE( 180)		if ((Width <= (int)0)) {
HXLINE( 182)			Width = this->frameWidth;
            		}
HXLINE( 184)		if ((Height <= (int)0)) {
HXLINE( 186)			Height = this->frameHeight;
            		}
HXLINE( 189)		this->centerOffsets(false);
HXLINE( 190)		 ::nape::phys::BodyType _hx_tmp;
HXDLIN( 190)		if (hx::IsNotNull( _Type )) {
HXLINE( 190)			_hx_tmp = _Type;
            		}
            		else {
HXLINE( 190)			if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC )) {
HXLINE( 190)				::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN( 190)				::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN( 190)				::zpp_nape::util::ZPP_Flags_obj::internal = false;
            			}
HXDLIN( 190)			_hx_tmp = ::zpp_nape::util::ZPP_Flags_obj::BodyType_DYNAMIC;
            		}
HXDLIN( 190)		HX_VARI( Float,x) = this->x;
HXDLIN( 190)		HX_VARI( Float,y) = this->y;
HXDLIN( 190)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 190)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 190)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 190)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 190)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 190)			ret->zpp_pool = null();
            		}
HXDLIN( 190)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 190)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 190)			{
HXLINE( 190)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 190)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE( 190)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 190)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 190)					ret1->next = null();
            				}
HXDLIN( 190)				ret1->weak = false;
            			}
HXDLIN( 190)			ret1->_immutable = false;
HXDLIN( 190)			{
HXLINE( 190)				ret1->x = x;
HXDLIN( 190)				ret1->y = y;
            			}
HXDLIN( 190)			ret->zpp_inner = ret1;
HXDLIN( 190)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE( 190)			bool _hx_tmp1;
HXDLIN( 190)			{
HXLINE( 190)				HX_VARI(  ::zpp_nape::geom::ZPP_Vec2,_this) = ret->zpp_inner;
HXDLIN( 190)				if (hx::IsNotNull( _this->_validate )) {
HXLINE( 190)					_this->_validate();
            				}
            			}
HXDLIN( 190)			if ((ret->zpp_inner->x == x)) {
HXLINE( 190)				{
HXLINE( 190)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = ret->zpp_inner;
HXDLIN( 190)					if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 190)						_this1->_validate();
            					}
            				}
HXDLIN( 190)				_hx_tmp1 = (ret->zpp_inner->y == y);
            			}
            			else {
HXLINE( 190)				_hx_tmp1 = false;
            			}
HXDLIN( 190)			if (!(_hx_tmp1)) {
HXLINE( 190)				{
HXLINE( 190)					ret->zpp_inner->x = x;
HXDLIN( 190)					ret->zpp_inner->y = y;
            				}
HXDLIN( 190)				{
HXLINE( 190)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 190)					if (hx::IsNotNull( _this2->_invalidate )) {
HXLINE( 190)						_this2->_invalidate(_this2);
            					}
            				}
            			}
            		}
HXDLIN( 190)		ret->zpp_inner->weak = true;
HXDLIN( 190)		this->setBody( ::nape::phys::Body_obj::__alloc( HX_CTX ,_hx_tmp,ret));
HXLINE( 191)		{
HXLINE( 191)			HX_VARI_NAME(  ::nape::shape::ShapeList,_this3,"_this") = this->body->zpp_inner->wrap_shapes;
HXDLIN( 191)			HX_VARI(  ::nape::shape::Shape,obj) =  ::nape::shape::Polygon_obj::__alloc( HX_CTX ,::nape::shape::Polygon_obj::box(Width,Height,null()),null(),null());
HXDLIN( 191)			if (_this3->zpp_inner->reverse_flag) {
HXLINE( 191)				_this3->push(obj);
            			}
            			else {
HXLINE( 191)				_this3->unshift(obj);
            			}
            		}
HXLINE( 193)		this->setBodyMaterial(null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxNapeSprite_obj,createRectangularBody,(void))

void FlxNapeSprite_obj::setBodyMaterial(hx::Null< Float >  __o_Elasticity,hx::Null< Float >  __o_DynamicFriction,hx::Null< Float >  __o_StaticFriction,hx::Null< Float >  __o_Density,hx::Null< Float >  __o_RotationFriction){
Float Elasticity = __o_Elasticity.Default(1);
Float DynamicFriction = __o_DynamicFriction.Default(((Float)0.2));
Float StaticFriction = __o_StaticFriction.Default(((Float)0.4));
Float Density = __o_Density.Default(1);
Float RotationFriction = __o_RotationFriction.Default(((Float)0.001));
            	HX_GC_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_206_setBodyMaterial)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Elasticity,"Elasticity")
            	HX_STACK_ARG(DynamicFriction,"DynamicFriction")
            	HX_STACK_ARG(StaticFriction,"StaticFriction")
            	HX_STACK_ARG(Density,"Density")
            	HX_STACK_ARG(RotationFriction,"RotationFriction")
HXLINE( 207)		if (hx::IsNull( this->body )) {
HXLINE( 208)			return;
            		}
HXLINE( 210)		 ::nape::phys::Body _hx_tmp = this->body;
HXDLIN( 210)		_hx_tmp->setShapeMaterials( ::nape::phys::Material_obj::__alloc( HX_CTX ,Elasticity,DynamicFriction,StaticFriction,Density,RotationFriction));
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxNapeSprite_obj,setBodyMaterial,(void))

void FlxNapeSprite_obj::destroyPhysObjects(){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_218_destroyPhysObjects)
            	HX_STACK_THIS(this)
HXLINE( 218)		if (hx::IsNotNull( this->body )) {
HXLINE( 220)			if (hx::IsNotNull( ::flixel::addons::nape::FlxNapeSpace_obj::space )) {
HXLINE( 221)				::flixel::addons::nape::FlxNapeSpace_obj::space->zpp_inner->wrap_bodies->remove(this->body);
            			}
HXLINE( 222)			this->body = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNapeSprite_obj,destroyPhysObjects,(void))

void FlxNapeSprite_obj::setDrag(hx::Null< Float >  __o_LinearDrag,hx::Null< Float >  __o_AngularDrag){
Float LinearDrag = __o_LinearDrag.Default(1);
Float AngularDrag = __o_AngularDrag.Default(1);
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_235_setDrag)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(LinearDrag,"LinearDrag")
            	HX_STACK_ARG(AngularDrag,"AngularDrag")
HXLINE( 236)		this->_linearDrag = LinearDrag;
HXLINE( 237)		this->_angularDrag = AngularDrag;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxNapeSprite_obj,setDrag,(void))

void FlxNapeSprite_obj::setBody( ::nape::phys::Body body){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_254_setBody)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(body,"body")
HXLINE( 255)		this->body = body;
HXLINE( 256)		{
HXLINE( 256)			HX_VARI( bool,Value) = this->physicsEnabled;
HXDLIN( 256)			if (hx::IsNotNull( this->body )) {
HXLINE( 256)				HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 256)				HX_VAR(  ::nape::space::Space,space);
HXDLIN( 256)				if (Value) {
HXLINE( 256)					space = ::flixel::addons::nape::FlxNapeSpace_obj::space;
            				}
            				else {
HXLINE( 256)					space = null();
            				}
HXDLIN( 256)				{
HXLINE( 256)					_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN( 256)					 ::nape::space::Space _hx_tmp;
HXDLIN( 256)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 256)						_hx_tmp = null();
            					}
            					else {
HXLINE( 256)						_hx_tmp = _this->zpp_inner->space->outer;
            					}
HXDLIN( 256)					if (hx::IsNotEq( _hx_tmp,space )) {
HXLINE( 256)						 ::nape::space::Space _hx_tmp1;
HXDLIN( 256)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 256)							_hx_tmp1 = null();
            						}
            						else {
HXLINE( 256)							_hx_tmp1 = _this->zpp_inner->space->outer;
            						}
HXDLIN( 256)						if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 256)							_this->zpp_inner->component->woken = false;
            						}
HXDLIN( 256)						 ::nape::space::Space _hx_tmp2;
HXDLIN( 256)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 256)							_hx_tmp2 = null();
            						}
            						else {
HXLINE( 256)							_hx_tmp2 = _this->zpp_inner->space->outer;
            						}
HXDLIN( 256)						if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE( 256)							 ::nape::space::Space _this1;
HXDLIN( 256)							if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 256)								_this1 = null();
            							}
            							else {
HXLINE( 256)								_this1 = _this->zpp_inner->space->outer;
            							}
HXDLIN( 256)							_this1->zpp_inner->wrap_bodies->remove(_this);
            						}
HXDLIN( 256)						if (hx::IsNotNull( space )) {
HXLINE( 256)							HX_VARI_NAME(  ::nape::phys::BodyList,_this2,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN( 256)							if (_this2->zpp_inner->reverse_flag) {
HXLINE( 256)								_this2->push(_this);
            							}
            							else {
HXLINE( 256)								_this2->unshift(_this);
            							}
            						}
            					}
            				}
            			}
HXDLIN( 256)			this->physicsEnabled = Value;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxNapeSprite_obj,setBody,(void))

void FlxNapeSprite_obj::updatePhysObjects(){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_264_updatePhysObjects)
            	HX_STACK_THIS(this)
HXLINE( 265)		this->updatePosition();
HXLINE( 267)		if (!(this->body->zpp_inner->norotate)) {
HXLINE( 269)			this->set_angle((this->body->zpp_inner->rot * ((Float)(int)180 / (Float)::Math_obj::PI)));
            		}
HXLINE( 273)		bool _hx_tmp;
HXDLIN( 273)		if (!((this->_linearDrag < (int)1))) {
HXLINE( 273)			_hx_tmp = (this->_angularDrag < (int)1);
            		}
            		else {
HXLINE( 273)			_hx_tmp = true;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			{
HXLINE( 275)				HX_VARI(  ::nape::phys::Body,_g) = this->body;
HXDLIN( 275)				{
HXLINE( 275)					HX_VARI( Float,angularVel) = (_g->zpp_inner->angvel * this->_angularDrag);
HXDLIN( 275)					if ((_g->zpp_inner->angvel != angularVel)) {
HXLINE( 275)						_g->zpp_inner->angvel = angularVel;
HXDLIN( 275)						_g->zpp_inner->wake();
            					}
            				}
            			}
HXLINE( 276)			{
HXLINE( 276)				HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 276)				if (hx::IsNull( _this->zpp_inner->wrap_vel )) {
HXLINE( 276)					_this->zpp_inner->setupVelocity();
            				}
HXDLIN( 276)				HX_VARI_NAME(  ::nape::geom::Vec2,_g1,"_g") = _this->zpp_inner->wrap_vel;
HXDLIN( 276)				{
HXLINE( 276)					{
HXLINE( 276)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = _g1->zpp_inner;
HXDLIN( 276)						if (hx::IsNotNull( _this1->_validate )) {
HXLINE( 276)							_this1->_validate();
            						}
            					}
HXDLIN( 276)					HX_VARI( Float,x) = (_g1->zpp_inner->x * this->_linearDrag);
HXDLIN( 276)					{
HXLINE( 276)						{
HXLINE( 276)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _g1->zpp_inner;
HXDLIN( 276)							if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 276)								_this2->_validate();
            							}
            						}
HXDLIN( 276)						if ((_g1->zpp_inner->x != x)) {
HXLINE( 276)							_g1->zpp_inner->x = x;
HXDLIN( 276)							{
HXLINE( 276)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _g1->zpp_inner;
HXDLIN( 276)								if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 276)									_this3->_invalidate(_this3);
            								}
            							}
            						}
            					}
HXDLIN( 276)					{
HXLINE( 276)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _g1->zpp_inner;
HXDLIN( 276)						if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 276)							_this4->_validate();
            						}
            					}
            				}
            			}
HXLINE( 277)			{
HXLINE( 277)				HX_VARI_NAME(  ::nape::phys::Body,_this5,"_this") = this->body;
HXDLIN( 277)				if (hx::IsNull( _this5->zpp_inner->wrap_vel )) {
HXLINE( 277)					_this5->zpp_inner->setupVelocity();
            				}
HXDLIN( 277)				HX_VARI_NAME(  ::nape::geom::Vec2,_g2,"_g") = _this5->zpp_inner->wrap_vel;
HXDLIN( 277)				{
HXLINE( 277)					{
HXLINE( 277)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = _g2->zpp_inner;
HXDLIN( 277)						if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 277)							_this6->_validate();
            						}
            					}
HXDLIN( 277)					HX_VARI( Float,y) = (_g2->zpp_inner->y * this->_linearDrag);
HXDLIN( 277)					{
HXLINE( 277)						{
HXLINE( 277)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = _g2->zpp_inner;
HXDLIN( 277)							if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 277)								_this7->_validate();
            							}
            						}
HXDLIN( 277)						if ((_g2->zpp_inner->y != y)) {
HXLINE( 277)							_g2->zpp_inner->y = y;
HXDLIN( 277)							{
HXLINE( 277)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = _g2->zpp_inner;
HXDLIN( 277)								if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 277)									_this8->_invalidate(_this8);
            								}
            							}
            						}
            					}
HXDLIN( 277)					{
HXLINE( 277)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _g2->zpp_inner;
HXDLIN( 277)						if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 277)							_this9->_validate();
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNapeSprite_obj,updatePhysObjects,(void))

void FlxNapeSprite_obj::updatePosition(){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_282_updatePosition)
            	HX_STACK_THIS(this)
HXLINE( 283)		HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 283)		if (hx::IsNull( _this->zpp_inner->wrap_pos )) {
HXLINE( 283)			_this->zpp_inner->setupPosition();
            		}
HXDLIN( 283)		HX_VARI_NAME(  ::nape::geom::Vec2,_this1,"_this") = _this->zpp_inner->wrap_pos;
HXDLIN( 283)		{
HXLINE( 283)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _this1->zpp_inner;
HXDLIN( 283)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 283)				_this2->_validate();
            			}
            		}
HXDLIN( 283)		this->set_x((_this1->zpp_inner->x - this->origin->x));
HXLINE( 284)		HX_VARI_NAME(  ::nape::phys::Body,_this3,"_this") = this->body;
HXDLIN( 284)		if (hx::IsNull( _this3->zpp_inner->wrap_pos )) {
HXLINE( 284)			_this3->zpp_inner->setupPosition();
            		}
HXDLIN( 284)		HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = _this3->zpp_inner->wrap_pos;
HXDLIN( 284)		{
HXLINE( 284)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this4->zpp_inner;
HXDLIN( 284)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 284)				_this5->_validate();
            			}
            		}
HXDLIN( 284)		this->set_y((_this4->zpp_inner->y - this->origin->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNapeSprite_obj,updatePosition,(void))

bool FlxNapeSprite_obj::set_physicsEnabled(bool Value){
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_288_set_physicsEnabled)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 289)		if (hx::IsNotNull( this->body )) {
HXLINE( 290)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 290)			HX_VAR(  ::nape::space::Space,space);
HXDLIN( 290)			if (Value) {
HXLINE( 290)				space = ::flixel::addons::nape::FlxNapeSpace_obj::space;
            			}
            			else {
HXLINE( 290)				space = null();
            			}
HXDLIN( 290)			{
HXLINE( 290)				_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN( 290)				 ::nape::space::Space _hx_tmp;
HXDLIN( 290)				if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 290)					_hx_tmp = null();
            				}
            				else {
HXLINE( 290)					_hx_tmp = _this->zpp_inner->space->outer;
            				}
HXDLIN( 290)				if (hx::IsNotEq( _hx_tmp,space )) {
HXLINE( 290)					 ::nape::space::Space _hx_tmp1;
HXDLIN( 290)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 290)						_hx_tmp1 = null();
            					}
            					else {
HXLINE( 290)						_hx_tmp1 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 290)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 290)						_this->zpp_inner->component->woken = false;
            					}
HXDLIN( 290)					 ::nape::space::Space _hx_tmp2;
HXDLIN( 290)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 290)						_hx_tmp2 = null();
            					}
            					else {
HXLINE( 290)						_hx_tmp2 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 290)					if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE( 290)						 ::nape::space::Space _this1;
HXDLIN( 290)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 290)							_this1 = null();
            						}
            						else {
HXLINE( 290)							_this1 = _this->zpp_inner->space->outer;
            						}
HXDLIN( 290)						_this1->zpp_inner->wrap_bodies->remove(_this);
            					}
HXDLIN( 290)					if (hx::IsNotNull( space )) {
HXLINE( 290)						HX_VARI_NAME(  ::nape::phys::BodyList,_this2,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN( 290)						if (_this2->zpp_inner->reverse_flag) {
HXLINE( 290)							_this2->push(_this);
            						}
            						else {
HXLINE( 290)							_this2->unshift(_this);
            						}
            					}
            				}
            			}
            		}
HXLINE( 291)		return (this->physicsEnabled = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxNapeSprite_obj,set_physicsEnabled,return )

void FlxNapeSprite_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_aaa8114a5cca0f38_302_setPosition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 303)		{
HXLINE( 303)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 303)			if (hx::IsNull( _this->zpp_inner->wrap_pos )) {
HXLINE( 303)				_this->zpp_inner->setupPosition();
            			}
HXDLIN( 303)			HX_VARI_NAME(  ::nape::geom::Vec2,_this1,"_this") = _this->zpp_inner->wrap_pos;
HXDLIN( 303)			{
HXLINE( 303)				{
HXLINE( 303)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _this1->zpp_inner;
HXDLIN( 303)					if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 303)						_this2->_validate();
            					}
            				}
HXDLIN( 303)				if ((_this1->zpp_inner->x != X)) {
HXLINE( 303)					_this1->zpp_inner->x = X;
HXDLIN( 303)					{
HXLINE( 303)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this1->zpp_inner;
HXDLIN( 303)						if (hx::IsNotNull( _this3->_invalidate )) {
HXLINE( 303)							_this3->_invalidate(_this3);
            						}
            					}
            				}
            			}
HXDLIN( 303)			{
HXLINE( 303)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = _this1->zpp_inner;
HXDLIN( 303)				if (hx::IsNotNull( _this4->_validate )) {
HXLINE( 303)					_this4->_validate();
            				}
            			}
            		}
HXLINE( 304)		{
HXLINE( 304)			HX_VARI_NAME(  ::nape::phys::Body,_this5,"_this") = this->body;
HXDLIN( 304)			if (hx::IsNull( _this5->zpp_inner->wrap_pos )) {
HXLINE( 304)				_this5->zpp_inner->setupPosition();
            			}
HXDLIN( 304)			HX_VARI_NAME(  ::nape::geom::Vec2,_this6,"_this") = _this5->zpp_inner->wrap_pos;
HXDLIN( 304)			{
HXLINE( 304)				{
HXLINE( 304)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = _this6->zpp_inner;
HXDLIN( 304)					if (hx::IsNotNull( _this7->_validate )) {
HXLINE( 304)						_this7->_validate();
            					}
            				}
HXDLIN( 304)				if ((_this6->zpp_inner->y != Y)) {
HXLINE( 304)					_this6->zpp_inner->y = Y;
HXDLIN( 304)					{
HXLINE( 304)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = _this6->zpp_inner;
HXDLIN( 304)						if (hx::IsNotNull( _this8->_invalidate )) {
HXLINE( 304)							_this8->_invalidate(_this8);
            						}
            					}
            				}
            			}
HXDLIN( 304)			{
HXLINE( 304)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = _this6->zpp_inner;
HXDLIN( 304)				if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 304)					_this9->_validate();
            				}
            			}
            		}
HXLINE( 306)		this->updatePosition();
            	}



hx::ObjectPtr< FlxNapeSprite_obj > FlxNapeSprite_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,hx::Null< bool >  __o_CreateRectangularBody,hx::Null< bool >  __o_EnablePhysics) {
	hx::ObjectPtr< FlxNapeSprite_obj > __this = new FlxNapeSprite_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic,__o_CreateRectangularBody,__o_EnablePhysics);
	return __this;
}

hx::ObjectPtr< FlxNapeSprite_obj > FlxNapeSprite_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,hx::Null< bool >  __o_CreateRectangularBody,hx::Null< bool >  __o_EnablePhysics) {
	FlxNapeSprite_obj *__this = (FlxNapeSprite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxNapeSprite_obj), true, "flixel.addons.nape.FlxNapeSprite"));
	*(void **)__this = FlxNapeSprite_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic,__o_CreateRectangularBody,__o_EnablePhysics);
	return __this;
}

FlxNapeSprite_obj::FlxNapeSprite_obj()
{
}

void FlxNapeSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxNapeSprite);
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(physicsEnabled,"physicsEnabled");
	HX_MARK_MEMBER_NAME(_linearDrag,"_linearDrag");
	HX_MARK_MEMBER_NAME(_angularDrag,"_angularDrag");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxNapeSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(physicsEnabled,"physicsEnabled");
	HX_VISIT_MEMBER_NAME(_linearDrag,"_linearDrag");
	HX_VISIT_MEMBER_NAME(_angularDrag,"_angularDrag");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxNapeSprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body); }
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"revive") ) { return hx::Val( revive_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"setDrag") ) { return hx::Val( setDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"setBody") ) { return hx::Val( setBody_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_linearDrag") ) { return hx::Val( _linearDrag); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_angularDrag") ) { return hx::Val( _angularDrag); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"physicsEnabled") ) { return hx::Val( physicsEnabled); }
		if (HX_FIELD_EQ(inName,"addPremadeBody") ) { return hx::Val( addPremadeBody_dyn()); }
		if (HX_FIELD_EQ(inName,"updatePosition") ) { return hx::Val( updatePosition_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setBodyMaterial") ) { return hx::Val( setBodyMaterial_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updatePhysObjects") ) { return hx::Val( updatePhysObjects_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createCircularBody") ) { return hx::Val( createCircularBody_dyn()); }
		if (HX_FIELD_EQ(inName,"destroyPhysObjects") ) { return hx::Val( destroyPhysObjects_dyn()); }
		if (HX_FIELD_EQ(inName,"set_physicsEnabled") ) { return hx::Val( set_physicsEnabled_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createRectangularBody") ) { return hx::Val( createRectangularBody_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxNapeSprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::nape::phys::Body >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_linearDrag") ) { _linearDrag=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_angularDrag") ) { _angularDrag=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"physicsEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_physicsEnabled(inValue) );physicsEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxNapeSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"));
	outFields->push(HX_HCSTRING("physicsEnabled","\x7a","\xaa","\x7e","\xe8"));
	outFields->push(HX_HCSTRING("_linearDrag","\x98","\xcd","\x32","\x0c"));
	outFields->push(HX_HCSTRING("_angularDrag","\xf7","\xcd","\x22","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxNapeSprite_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::phys::Body*/ ,(int)offsetof(FlxNapeSprite_obj,body),HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41")},
	{hx::fsBool,(int)offsetof(FlxNapeSprite_obj,physicsEnabled),HX_HCSTRING("physicsEnabled","\x7a","\xaa","\x7e","\xe8")},
	{hx::fsFloat,(int)offsetof(FlxNapeSprite_obj,_linearDrag),HX_HCSTRING("_linearDrag","\x98","\xcd","\x32","\x0c")},
	{hx::fsFloat,(int)offsetof(FlxNapeSprite_obj,_angularDrag),HX_HCSTRING("_angularDrag","\xf7","\xcd","\x22","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxNapeSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxNapeSprite_obj_sMemberFields[] = {
	HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"),
	HX_HCSTRING("physicsEnabled","\x7a","\xaa","\x7e","\xe8"),
	HX_HCSTRING("_linearDrag","\x98","\xcd","\x32","\x0c"),
	HX_HCSTRING("_angularDrag","\xf7","\xcd","\x22","\x02"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("revive","\x55","\xfa","\x76","\x0a"),
	HX_HCSTRING("addPremadeBody","\x99","\xab","\xc7","\x3c"),
	HX_HCSTRING("createCircularBody","\xbd","\xa5","\x41","\xbe"),
	HX_HCSTRING("createRectangularBody","\x64","\x88","\x89","\x96"),
	HX_HCSTRING("setBodyMaterial","\x2b","\xd8","\xf6","\xc5"),
	HX_HCSTRING("destroyPhysObjects","\x48","\x0e","\x29","\xf2"),
	HX_HCSTRING("setDrag","\xb6","\x6c","\xf4","\x07"),
	HX_HCSTRING("setBody","\x64","\xbb","\x9f","\x06"),
	HX_HCSTRING("updatePhysObjects","\x99","\xc1","\x5d","\x99"),
	HX_HCSTRING("updatePosition","\xd2","\x93","\x24","\x00"),
	HX_HCSTRING("set_physicsEnabled","\xb7","\xbd","\xc7","\x60"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	::String(null()) };

static void FlxNapeSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxNapeSprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxNapeSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxNapeSprite_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxNapeSprite_obj::__mClass;

void FlxNapeSprite_obj::__register()
{
	hx::Object *dummy = new FlxNapeSprite_obj;
	FlxNapeSprite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.nape.FlxNapeSprite","\x02","\xbc","\xe0","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxNapeSprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxNapeSprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxNapeSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxNapeSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxNapeSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxNapeSprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace nape
