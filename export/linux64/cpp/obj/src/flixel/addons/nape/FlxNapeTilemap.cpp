// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSpace
#include <flixel/addons/nape/FlxNapeSpace.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeTilemap
#include <flixel/addons/nape/FlxNapeTilemap.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_27_new,"flixel.addons.nape.FlxNapeTilemap","new",0x18284b03,"flixel.addons.nape.FlxNapeTilemap.new","flixel/addons/nape/FlxNapeTilemap.hx",27,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_34_update,"flixel.addons.nape.FlxNapeTilemap","update",0x1b771346,"flixel.addons.nape.FlxNapeTilemap.update","flixel/addons/nape/FlxNapeTilemap.hx",34,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_42_loadMapFromCSV,"flixel.addons.nape.FlxNapeTilemap","loadMapFromCSV",0xb704bd43,"flixel.addons.nape.FlxNapeTilemap.loadMapFromCSV","flixel/addons/nape/FlxNapeTilemap.hx",42,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_51_loadMapFromArray,"flixel.addons.nape.FlxNapeTilemap","loadMapFromArray",0xfd66dc56,"flixel.addons.nape.FlxNapeTilemap.loadMapFromArray","flixel/addons/nape/FlxNapeTilemap.hx",51,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_60_loadMapFrom2DArray,"flixel.addons.nape.FlxNapeTilemap","loadMapFrom2DArray",0x4a7fc884,"flixel.addons.nape.FlxNapeTilemap.loadMapFrom2DArray","flixel/addons/nape/FlxNapeTilemap.hx",60,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_77_addSolidTile,"flixel.addons.nape.FlxNapeTilemap","addSolidTile",0x1b4b5795,"flixel.addons.nape.FlxNapeTilemap.addSolidTile","flixel/addons/nape/FlxNapeTilemap.hx",77,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_98_placeCustomPolygon,"flixel.addons.nape.FlxNapeTilemap","placeCustomPolygon",0xd2040a3f,"flixel.addons.nape.FlxNapeTilemap.placeCustomPolygon","flixel/addons/nape/FlxNapeTilemap.hx",98,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_127_setupCollideIndex,"flixel.addons.nape.FlxNapeTilemap","setupCollideIndex",0x6c5466b4,"flixel.addons.nape.FlxNapeTilemap.setupCollideIndex","flixel/addons/nape/FlxNapeTilemap.hx",127,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_153_setupTileIndices,"flixel.addons.nape.FlxNapeTilemap","setupTileIndices",0xa5da1199,"flixel.addons.nape.FlxNapeTilemap.setupTileIndices","flixel/addons/nape/FlxNapeTilemap.hx",153,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_182_constructCollider,"flixel.addons.nape.FlxNapeTilemap","constructCollider",0x412a144e,"flixel.addons.nape.FlxNapeTilemap.constructCollider","flixel/addons/nape/FlxNapeTilemap.hx",182,0x86ce3ecc)
HX_DEFINE_STACK_FRAME(_hx_pos_25c4cf28c8f6d506_267_constructRectangle,"flixel.addons.nape.FlxNapeTilemap","constructRectangle",0x0bd715d5,"flixel.addons.nape.FlxNapeTilemap.constructRectangle","flixel/addons/nape/FlxNapeTilemap.hx",267,0x86ce3ecc)
namespace flixel{
namespace addons{
namespace nape{

void FlxNapeTilemap_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_27_new)
            	HX_STACK_THIS(this)
HXLINE(  28)		super::__construct();
HXLINE(  29)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE(  29)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(  29)			::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN(  29)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(  29)		this->body =  ::nape::phys::Body_obj::__alloc( HX_CTX ,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC,null());
HXLINE(  30)		{
HXLINE(  30)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN(  30)			HX_VARI(  ::nape::space::Space,space) = ::flixel::addons::nape::FlxNapeSpace_obj::space;
HXDLIN(  30)			{
HXLINE(  30)				_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN(  30)				 ::nape::space::Space _hx_tmp;
HXDLIN(  30)				if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  30)					_hx_tmp = null();
            				}
            				else {
HXLINE(  30)					_hx_tmp = _this->zpp_inner->space->outer;
            				}
HXDLIN(  30)				if (hx::IsNotEq( _hx_tmp,space )) {
HXLINE(  30)					 ::nape::space::Space _hx_tmp1;
HXDLIN(  30)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  30)						_hx_tmp1 = null();
            					}
            					else {
HXLINE(  30)						_hx_tmp1 = _this->zpp_inner->space->outer;
            					}
HXDLIN(  30)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE(  30)						_this->zpp_inner->component->woken = false;
            					}
HXDLIN(  30)					 ::nape::space::Space _hx_tmp2;
HXDLIN(  30)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  30)						_hx_tmp2 = null();
            					}
            					else {
HXLINE(  30)						_hx_tmp2 = _this->zpp_inner->space->outer;
            					}
HXDLIN(  30)					if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE(  30)						 ::nape::space::Space _this1;
HXDLIN(  30)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  30)							_this1 = null();
            						}
            						else {
HXLINE(  30)							_this1 = _this->zpp_inner->space->outer;
            						}
HXDLIN(  30)						_this1->zpp_inner->wrap_bodies->remove(_this);
            					}
HXDLIN(  30)					if (hx::IsNotNull( space )) {
HXLINE(  30)						HX_VARI_NAME(  ::nape::phys::BodyList,_this2,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN(  30)						if (_this2->zpp_inner->reverse_flag) {
HXLINE(  30)							_this2->push(_this);
            						}
            						else {
HXLINE(  30)							_this2->unshift(_this);
            						}
            					}
            				}
            			}
            		}
            	}

Dynamic FlxNapeTilemap_obj::__CreateEmpty() { return new FlxNapeTilemap_obj; }

void *FlxNapeTilemap_obj::_hx_vtable = 0;

Dynamic FlxNapeTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxNapeTilemap_obj > _hx_result = new FlxNapeTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxNapeTilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x12852d0f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x12852d0f;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x725f80f5 || inClassId==(int)0x75a66d6a;
	}
}

void FlxNapeTilemap_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_34_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  35)		HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN(  35)		if (hx::IsNull( _this->zpp_inner->wrap_pos )) {
HXLINE(  35)			_this->zpp_inner->setupPosition();
            		}
HXDLIN(  35)		HX_VARI_NAME(  ::nape::geom::Vec2,_this1,"_this") = _this->zpp_inner->wrap_pos;
HXDLIN(  35)		{
HXLINE(  35)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _this1->zpp_inner;
HXDLIN(  35)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(  35)				_this2->_validate();
            			}
            		}
HXDLIN(  35)		this->set_x(_this1->zpp_inner->x);
HXLINE(  36)		HX_VARI_NAME(  ::nape::phys::Body,_this3,"_this") = this->body;
HXDLIN(  36)		if (hx::IsNull( _this3->zpp_inner->wrap_pos )) {
HXLINE(  36)			_this3->zpp_inner->setupPosition();
            		}
HXDLIN(  36)		HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = _this3->zpp_inner->wrap_pos;
HXDLIN(  36)		{
HXLINE(  36)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this4->zpp_inner;
HXDLIN(  36)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE(  36)				_this5->_validate();
            			}
            		}
HXDLIN(  36)		this->set_y(_this4->zpp_inner->y);
HXLINE(  37)		this->super::update(elapsed);
            	}


 ::flixel::tile::FlxBaseTilemap FlxNapeTilemap_obj::loadMapFromCSV(::String MapData, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_42_loadMapFromCSV)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE(  43)		this->super::loadMapFromCSV(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE(  44)		this->_binaryData = ::Array_obj< int >::__new();
HXLINE(  45)		::flixel::util::FlxArrayUtil_obj::setLength_Int(this->_binaryData,this->_data->length);
HXLINE(  46)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::tile::FlxBaseTilemap FlxNapeTilemap_obj::loadMapFromArray(::Array< int > MapData,int WidthInTiles,int HeightInTiles, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_51_loadMapFromArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(WidthInTiles,"WidthInTiles")
            	HX_STACK_ARG(HeightInTiles,"HeightInTiles")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE(  52)		this->super::loadMapFromArray(MapData,WidthInTiles,HeightInTiles,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE(  53)		this->_binaryData = ::Array_obj< int >::__new();
HXLINE(  54)		::flixel::util::FlxArrayUtil_obj::setLength_Int(this->_binaryData,this->_data->length);
HXLINE(  55)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::tile::FlxBaseTilemap FlxNapeTilemap_obj::loadMapFrom2DArray(::Array< ::Dynamic> MapData, ::Dynamic TileGraphic,hx::Null< int >  __o_TileWidth,hx::Null< int >  __o_TileHeight, ::flixel::tile::FlxTilemapAutoTiling AutoTile,hx::Null< int >  __o_StartingIndex,hx::Null< int >  __o_DrawIndex,hx::Null< int >  __o_CollideIndex){
int TileWidth = __o_TileWidth.Default(0);
int TileHeight = __o_TileHeight.Default(0);
int StartingIndex = __o_StartingIndex.Default(0);
int DrawIndex = __o_DrawIndex.Default(1);
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_60_loadMapFrom2DArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MapData,"MapData")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(AutoTile,"AutoTile")
            	HX_STACK_ARG(StartingIndex,"StartingIndex")
            	HX_STACK_ARG(DrawIndex,"DrawIndex")
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
HXLINE(  61)		this->super::loadMapFrom2DArray(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
HXLINE(  62)		this->_binaryData = ::Array_obj< int >::__new();
HXLINE(  63)		::flixel::util::FlxArrayUtil_obj::setLength_Int(this->_binaryData,this->_data->length);
HXLINE(  64)		return hx::ObjectPtr<OBJ_>(this);
            	}


void FlxNapeTilemap_obj::addSolidTile(int X,int Y, ::nape::phys::Material mat){
            	HX_GC_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_77_addSolidTile)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(mat,"mat")
HXLINE(  78)		{
HXLINE(  78)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN(  78)			{
HXLINE(  78)				_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN(  78)				 ::nape::space::Space _hx_tmp;
HXDLIN(  78)				if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  78)					_hx_tmp = null();
            				}
            				else {
HXLINE(  78)					_hx_tmp = _this->zpp_inner->space->outer;
            				}
HXDLIN(  78)				if (hx::IsNotNull( _hx_tmp )) {
HXLINE(  78)					 ::nape::space::Space _hx_tmp1;
HXDLIN(  78)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  78)						_hx_tmp1 = null();
            					}
            					else {
HXLINE(  78)						_hx_tmp1 = _this->zpp_inner->space->outer;
            					}
HXDLIN(  78)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE(  78)						_this->zpp_inner->component->woken = false;
            					}
HXDLIN(  78)					 ::nape::space::Space _hx_tmp2;
HXDLIN(  78)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  78)						_hx_tmp2 = null();
            					}
            					else {
HXLINE(  78)						_hx_tmp2 = _this->zpp_inner->space->outer;
            					}
HXDLIN(  78)					if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE(  78)						 ::nape::space::Space _this1;
HXDLIN(  78)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  78)							_this1 = null();
            						}
            						else {
HXLINE(  78)							_this1 = _this->zpp_inner->space->outer;
            						}
HXDLIN(  78)						_this1->zpp_inner->wrap_bodies->remove(_this);
            					}
            				}
            			}
            		}
HXLINE(  79)		if (hx::IsNull( mat )) {
HXLINE(  81)			mat =  ::nape::phys::Material_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
            		}
HXLINE(  83)		X = (X * this->_tileWidth);
HXLINE(  84)		Y = (Y * this->_tileHeight);
HXLINE(  85)		HX_VARI( ::Array< ::Dynamic>,vertices) = ::Array_obj< ::Dynamic>::__new();
HXLINE(  87)		HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN(  87)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(  87)			ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(  87)			ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(  87)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN(  87)			ret->zpp_pool = null();
            		}
HXDLIN(  87)		if (hx::IsNull( ret->zpp_inner )) {
HXLINE(  87)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN(  87)			{
HXLINE(  87)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(  87)					ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(  87)					ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(  87)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN(  87)					ret1->next = null();
            				}
HXDLIN(  87)				ret1->weak = false;
            			}
HXDLIN(  87)			ret1->_immutable = false;
HXDLIN(  87)			{
HXLINE(  87)				ret1->x = X;
HXDLIN(  87)				ret1->y = Y;
            			}
HXDLIN(  87)			ret->zpp_inner = ret1;
HXDLIN(  87)			ret->zpp_inner->outer = ret;
            		}
            		else {
HXLINE(  87)			bool _hx_tmp3;
HXDLIN(  87)			{
HXLINE(  87)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN(  87)				if (hx::IsNotNull( _this2->_validate )) {
HXLINE(  87)					_this2->_validate();
            				}
            			}
HXDLIN(  87)			if ((ret->zpp_inner->x == X)) {
HXLINE(  87)				{
HXLINE(  87)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN(  87)					if (hx::IsNotNull( _this3->_validate )) {
HXLINE(  87)						_this3->_validate();
            					}
            				}
HXDLIN(  87)				_hx_tmp3 = (ret->zpp_inner->y == Y);
            			}
            			else {
HXLINE(  87)				_hx_tmp3 = false;
            			}
HXDLIN(  87)			if (!(_hx_tmp3)) {
HXLINE(  87)				{
HXLINE(  87)					ret->zpp_inner->x = X;
HXDLIN(  87)					ret->zpp_inner->y = Y;
            				}
HXDLIN(  87)				{
HXLINE(  87)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret->zpp_inner;
HXDLIN(  87)					if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE(  87)						_this4->_invalidate(_this4);
            					}
            				}
            			}
            		}
HXDLIN(  87)		ret->zpp_inner->weak = false;
HXDLIN(  87)		vertices->push(ret);
HXLINE(  88)		HX_VARI( Float,x) = (X + this->_tileWidth);
HXDLIN(  88)		HX_VAR_NAME(  ::nape::geom::Vec2,ret2,"ret");
HXDLIN(  88)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(  88)			ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(  88)			ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(  88)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN(  88)			ret2->zpp_pool = null();
            		}
HXDLIN(  88)		if (hx::IsNull( ret2->zpp_inner )) {
HXLINE(  88)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret3,"ret");
HXDLIN(  88)			{
HXLINE(  88)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(  88)					ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(  88)					ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(  88)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN(  88)					ret3->next = null();
            				}
HXDLIN(  88)				ret3->weak = false;
            			}
HXDLIN(  88)			ret3->_immutable = false;
HXDLIN(  88)			{
HXLINE(  88)				ret3->x = x;
HXDLIN(  88)				ret3->y = Y;
            			}
HXDLIN(  88)			ret2->zpp_inner = ret3;
HXDLIN(  88)			ret2->zpp_inner->outer = ret2;
            		}
            		else {
HXLINE(  88)			bool _hx_tmp4;
HXDLIN(  88)			{
HXLINE(  88)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret2->zpp_inner;
HXDLIN(  88)				if (hx::IsNotNull( _this5->_validate )) {
HXLINE(  88)					_this5->_validate();
            				}
            			}
HXDLIN(  88)			if ((ret2->zpp_inner->x == x)) {
HXLINE(  88)				{
HXLINE(  88)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret2->zpp_inner;
HXDLIN(  88)					if (hx::IsNotNull( _this6->_validate )) {
HXLINE(  88)						_this6->_validate();
            					}
            				}
HXDLIN(  88)				_hx_tmp4 = (ret2->zpp_inner->y == Y);
            			}
            			else {
HXLINE(  88)				_hx_tmp4 = false;
            			}
HXDLIN(  88)			if (!(_hx_tmp4)) {
HXLINE(  88)				{
HXLINE(  88)					ret2->zpp_inner->x = x;
HXDLIN(  88)					ret2->zpp_inner->y = Y;
            				}
HXDLIN(  88)				{
HXLINE(  88)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = ret2->zpp_inner;
HXDLIN(  88)					if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE(  88)						_this7->_invalidate(_this7);
            					}
            				}
            			}
            		}
HXDLIN(  88)		ret2->zpp_inner->weak = false;
HXDLIN(  88)		vertices->push(ret2);
HXLINE(  89)		HX_VARI_NAME( Float,x1,"x") = (X + this->_tileWidth);
HXDLIN(  89)		HX_VARI( Float,y) = (Y + this->_tileHeight);
HXDLIN(  89)		HX_VAR_NAME(  ::nape::geom::Vec2,ret4,"ret");
HXDLIN(  89)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(  89)			ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(  89)			ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(  89)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN(  89)			ret4->zpp_pool = null();
            		}
HXDLIN(  89)		if (hx::IsNull( ret4->zpp_inner )) {
HXLINE(  89)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret5,"ret");
HXDLIN(  89)			{
HXLINE(  89)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(  89)					ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(  89)					ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(  89)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN(  89)					ret5->next = null();
            				}
HXDLIN(  89)				ret5->weak = false;
            			}
HXDLIN(  89)			ret5->_immutable = false;
HXDLIN(  89)			{
HXLINE(  89)				ret5->x = x1;
HXDLIN(  89)				ret5->y = y;
            			}
HXDLIN(  89)			ret4->zpp_inner = ret5;
HXDLIN(  89)			ret4->zpp_inner->outer = ret4;
            		}
            		else {
HXLINE(  89)			bool _hx_tmp5;
HXDLIN(  89)			{
HXLINE(  89)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = ret4->zpp_inner;
HXDLIN(  89)				if (hx::IsNotNull( _this8->_validate )) {
HXLINE(  89)					_this8->_validate();
            				}
            			}
HXDLIN(  89)			if ((ret4->zpp_inner->x == x1)) {
HXLINE(  89)				{
HXLINE(  89)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = ret4->zpp_inner;
HXDLIN(  89)					if (hx::IsNotNull( _this9->_validate )) {
HXLINE(  89)						_this9->_validate();
            					}
            				}
HXDLIN(  89)				_hx_tmp5 = (ret4->zpp_inner->y == y);
            			}
            			else {
HXLINE(  89)				_hx_tmp5 = false;
            			}
HXDLIN(  89)			if (!(_hx_tmp5)) {
HXLINE(  89)				{
HXLINE(  89)					ret4->zpp_inner->x = x1;
HXDLIN(  89)					ret4->zpp_inner->y = y;
            				}
HXDLIN(  89)				{
HXLINE(  89)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = ret4->zpp_inner;
HXDLIN(  89)					if (hx::IsNotNull( _this10->_invalidate )) {
HXLINE(  89)						_this10->_invalidate(_this10);
            					}
            				}
            			}
            		}
HXDLIN(  89)		ret4->zpp_inner->weak = false;
HXDLIN(  89)		vertices->push(ret4);
HXLINE(  90)		HX_VARI_NAME( Float,y1,"y") = (Y + this->_tileHeight);
HXDLIN(  90)		HX_VAR_NAME(  ::nape::geom::Vec2,ret6,"ret");
HXDLIN(  90)		if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE(  90)			ret6 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE(  90)			ret6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN(  90)			::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret6->zpp_pool;
HXDLIN(  90)			ret6->zpp_pool = null();
            		}
HXDLIN(  90)		if (hx::IsNull( ret6->zpp_inner )) {
HXLINE(  90)			HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret7,"ret");
HXDLIN(  90)			{
HXLINE(  90)				if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE(  90)					ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            				}
            				else {
HXLINE(  90)					ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN(  90)					::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN(  90)					ret7->next = null();
            				}
HXDLIN(  90)				ret7->weak = false;
            			}
HXDLIN(  90)			ret7->_immutable = false;
HXDLIN(  90)			{
HXLINE(  90)				ret7->x = X;
HXDLIN(  90)				ret7->y = y1;
            			}
HXDLIN(  90)			ret6->zpp_inner = ret7;
HXDLIN(  90)			ret6->zpp_inner->outer = ret6;
            		}
            		else {
HXLINE(  90)			bool _hx_tmp6;
HXDLIN(  90)			{
HXLINE(  90)				HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = ret6->zpp_inner;
HXDLIN(  90)				if (hx::IsNotNull( _this11->_validate )) {
HXLINE(  90)					_this11->_validate();
            				}
            			}
HXDLIN(  90)			if ((ret6->zpp_inner->x == X)) {
HXLINE(  90)				{
HXLINE(  90)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this12,"_this") = ret6->zpp_inner;
HXDLIN(  90)					if (hx::IsNotNull( _this12->_validate )) {
HXLINE(  90)						_this12->_validate();
            					}
            				}
HXDLIN(  90)				_hx_tmp6 = (ret6->zpp_inner->y == y1);
            			}
            			else {
HXLINE(  90)				_hx_tmp6 = false;
            			}
HXDLIN(  90)			if (!(_hx_tmp6)) {
HXLINE(  90)				{
HXLINE(  90)					ret6->zpp_inner->x = X;
HXDLIN(  90)					ret6->zpp_inner->y = y1;
            				}
HXDLIN(  90)				{
HXLINE(  90)					HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = ret6->zpp_inner;
HXDLIN(  90)					if (hx::IsNotNull( _this13->_invalidate )) {
HXLINE(  90)						_this13->_invalidate(_this13);
            					}
            				}
            			}
            		}
HXDLIN(  90)		ret6->zpp_inner->weak = false;
HXDLIN(  90)		vertices->push(ret6);
HXLINE(  92)		{
HXLINE(  92)			HX_VARI_NAME(  ::nape::shape::ShapeList,_this14,"_this") = this->body->zpp_inner->wrap_shapes;
HXDLIN(  92)			HX_VARI(  ::nape::shape::Shape,obj) =  ::nape::shape::Polygon_obj::__alloc( HX_CTX ,vertices,mat,null());
HXDLIN(  92)			if (_this14->zpp_inner->reverse_flag) {
HXLINE(  92)				_this14->push(obj);
            			}
            			else {
HXLINE(  92)				_this14->unshift(obj);
            			}
            		}
HXLINE(  94)		{
HXLINE(  94)			HX_VARI_NAME(  ::nape::phys::Body,_this15,"_this") = this->body;
HXDLIN(  94)			HX_VARI(  ::nape::space::Space,space) = ::flixel::addons::nape::FlxNapeSpace_obj::space;
HXDLIN(  94)			{
HXLINE(  94)				_this15->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN(  94)				 ::nape::space::Space _hx_tmp7;
HXDLIN(  94)				if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE(  94)					_hx_tmp7 = null();
            				}
            				else {
HXLINE(  94)					_hx_tmp7 = _this15->zpp_inner->space->outer;
            				}
HXDLIN(  94)				if (hx::IsNotEq( _hx_tmp7,space )) {
HXLINE(  94)					 ::nape::space::Space _hx_tmp8;
HXDLIN(  94)					if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE(  94)						_hx_tmp8 = null();
            					}
            					else {
HXLINE(  94)						_hx_tmp8 = _this15->zpp_inner->space->outer;
            					}
HXDLIN(  94)					if (hx::IsNotNull( _hx_tmp8 )) {
HXLINE(  94)						_this15->zpp_inner->component->woken = false;
            					}
HXDLIN(  94)					 ::nape::space::Space _hx_tmp9;
HXDLIN(  94)					if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE(  94)						_hx_tmp9 = null();
            					}
            					else {
HXLINE(  94)						_hx_tmp9 = _this15->zpp_inner->space->outer;
            					}
HXDLIN(  94)					if (hx::IsNotNull( _hx_tmp9 )) {
HXLINE(  94)						 ::nape::space::Space _this16;
HXDLIN(  94)						if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE(  94)							_this16 = null();
            						}
            						else {
HXLINE(  94)							_this16 = _this15->zpp_inner->space->outer;
            						}
HXDLIN(  94)						_this16->zpp_inner->wrap_bodies->remove(_this15);
            					}
HXDLIN(  94)					if (hx::IsNotNull( space )) {
HXLINE(  94)						HX_VARI_NAME(  ::nape::phys::BodyList,_this17,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN(  94)						if (_this17->zpp_inner->reverse_flag) {
HXLINE(  94)							_this17->push(_this15);
            						}
            						else {
HXLINE(  94)							_this17->unshift(_this15);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxNapeTilemap_obj,addSolidTile,(void))

void FlxNapeTilemap_obj::placeCustomPolygon(::Array< int > tileIndices,::Array< ::Dynamic> vertices, ::nape::phys::Material mat){
            	HX_GC_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_98_placeCustomPolygon)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tileIndices,"tileIndices")
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(mat,"mat")
HXLINE(  99)		{
HXLINE(  99)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN(  99)			{
HXLINE(  99)				_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN(  99)				 ::nape::space::Space _hx_tmp;
HXDLIN(  99)				if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  99)					_hx_tmp = null();
            				}
            				else {
HXLINE(  99)					_hx_tmp = _this->zpp_inner->space->outer;
            				}
HXDLIN(  99)				if (hx::IsNotNull( _hx_tmp )) {
HXLINE(  99)					 ::nape::space::Space _hx_tmp1;
HXDLIN(  99)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  99)						_hx_tmp1 = null();
            					}
            					else {
HXLINE(  99)						_hx_tmp1 = _this->zpp_inner->space->outer;
            					}
HXDLIN(  99)					if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE(  99)						_this->zpp_inner->component->woken = false;
            					}
HXDLIN(  99)					 ::nape::space::Space _hx_tmp2;
HXDLIN(  99)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  99)						_hx_tmp2 = null();
            					}
            					else {
HXLINE(  99)						_hx_tmp2 = _this->zpp_inner->space->outer;
            					}
HXDLIN(  99)					if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE(  99)						 ::nape::space::Space _this1;
HXDLIN(  99)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE(  99)							_this1 = null();
            						}
            						else {
HXLINE(  99)							_this1 = _this->zpp_inner->space->outer;
            						}
HXDLIN(  99)						_this1->zpp_inner->wrap_bodies->remove(_this);
            					}
            				}
            			}
            		}
HXLINE( 100)		HX_VAR(  ::nape::shape::Polygon,polygon);
HXLINE( 101)		{
HXLINE( 101)			HX_VARI( int,_g) = (int)0;
HXDLIN( 101)			while((_g < tileIndices->length)){
HXLINE( 101)				HX_VARI( int,index) = tileIndices->__get(_g);
HXDLIN( 101)				_g = (_g + (int)1);
HXLINE( 103)				HX_VARI( ::Array< ::Dynamic>,coords) = this->getTileCoords(index,false);
HXLINE( 104)				if (hx::IsNull( coords )) {
HXLINE( 105)					continue;
            				}
HXLINE( 107)				{
HXLINE( 107)					HX_VARI( int,_g1) = (int)0;
HXDLIN( 107)					while((_g1 < coords->length)){
HXLINE( 107)						HX_VARI(  ::flixel::math::FlxPoint,point) = coords->__get(_g1).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN( 107)						_g1 = (_g1 + (int)1);
HXLINE( 109)						polygon =  ::nape::shape::Polygon_obj::__alloc( HX_CTX ,vertices,mat,null());
HXLINE( 110)						HX_VARI( Float,x) = point->x;
HXDLIN( 110)						HX_VARI( Float,y) = point->y;
HXDLIN( 110)						HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 110)						if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 110)							ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            						}
            						else {
HXLINE( 110)							ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 110)							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 110)							ret->zpp_pool = null();
            						}
HXDLIN( 110)						if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 110)							HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 110)							{
HXLINE( 110)								if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 110)									ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            								}
            								else {
HXLINE( 110)									ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 110)									::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 110)									ret1->next = null();
            								}
HXDLIN( 110)								ret1->weak = false;
            							}
HXDLIN( 110)							ret1->_immutable = false;
HXDLIN( 110)							{
HXLINE( 110)								ret1->x = x;
HXDLIN( 110)								ret1->y = y;
            							}
HXDLIN( 110)							ret->zpp_inner = ret1;
HXDLIN( 110)							ret->zpp_inner->outer = ret;
            						}
            						else {
HXLINE( 110)							bool _hx_tmp3;
HXDLIN( 110)							{
HXLINE( 110)								HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 110)								if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 110)									_this2->_validate();
            								}
            							}
HXDLIN( 110)							if ((ret->zpp_inner->x == x)) {
HXLINE( 110)								{
HXLINE( 110)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN( 110)									if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 110)										_this3->_validate();
            									}
            								}
HXDLIN( 110)								_hx_tmp3 = (ret->zpp_inner->y == y);
            							}
            							else {
HXLINE( 110)								_hx_tmp3 = false;
            							}
HXDLIN( 110)							if (!(_hx_tmp3)) {
HXLINE( 110)								{
HXLINE( 110)									ret->zpp_inner->x = x;
HXDLIN( 110)									ret->zpp_inner->y = y;
            								}
HXDLIN( 110)								{
HXLINE( 110)									HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret->zpp_inner;
HXDLIN( 110)									if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 110)										_this4->_invalidate(_this4);
            									}
            								}
            							}
            						}
HXDLIN( 110)						ret->zpp_inner->weak = false;
HXDLIN( 110)						polygon->translate(ret);
HXLINE( 111)						{
HXLINE( 111)							HX_VARI_NAME(  ::nape::shape::ShapeList,_this5,"_this") = this->body->zpp_inner->wrap_shapes;
HXDLIN( 111)							if (_this5->zpp_inner->reverse_flag) {
HXLINE( 111)								_this5->push(polygon);
            							}
            							else {
HXLINE( 111)								_this5->unshift(polygon);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 116)		{
HXLINE( 116)			HX_VARI_NAME(  ::nape::phys::Body,_this6,"_this") = this->body;
HXDLIN( 116)			HX_VARI(  ::nape::space::Space,space) = ::flixel::addons::nape::FlxNapeSpace_obj::space;
HXDLIN( 116)			{
HXLINE( 116)				_this6->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN( 116)				 ::nape::space::Space _hx_tmp4;
HXDLIN( 116)				if (hx::IsNull( _this6->zpp_inner->space )) {
HXLINE( 116)					_hx_tmp4 = null();
            				}
            				else {
HXLINE( 116)					_hx_tmp4 = _this6->zpp_inner->space->outer;
            				}
HXDLIN( 116)				if (hx::IsNotEq( _hx_tmp4,space )) {
HXLINE( 116)					 ::nape::space::Space _hx_tmp5;
HXDLIN( 116)					if (hx::IsNull( _this6->zpp_inner->space )) {
HXLINE( 116)						_hx_tmp5 = null();
            					}
            					else {
HXLINE( 116)						_hx_tmp5 = _this6->zpp_inner->space->outer;
            					}
HXDLIN( 116)					if (hx::IsNotNull( _hx_tmp5 )) {
HXLINE( 116)						_this6->zpp_inner->component->woken = false;
            					}
HXDLIN( 116)					 ::nape::space::Space _hx_tmp6;
HXDLIN( 116)					if (hx::IsNull( _this6->zpp_inner->space )) {
HXLINE( 116)						_hx_tmp6 = null();
            					}
            					else {
HXLINE( 116)						_hx_tmp6 = _this6->zpp_inner->space->outer;
            					}
HXDLIN( 116)					if (hx::IsNotNull( _hx_tmp6 )) {
HXLINE( 116)						 ::nape::space::Space _this7;
HXDLIN( 116)						if (hx::IsNull( _this6->zpp_inner->space )) {
HXLINE( 116)							_this7 = null();
            						}
            						else {
HXLINE( 116)							_this7 = _this6->zpp_inner->space->outer;
            						}
HXDLIN( 116)						_this7->zpp_inner->wrap_bodies->remove(_this6);
            					}
HXDLIN( 116)					if (hx::IsNotNull( space )) {
HXLINE( 116)						HX_VARI_NAME(  ::nape::phys::BodyList,_this8,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN( 116)						if (_this8->zpp_inner->reverse_flag) {
HXLINE( 116)							_this8->push(_this6);
            						}
            						else {
HXLINE( 116)							_this8->unshift(_this6);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxNapeTilemap_obj,placeCustomPolygon,(void))

void FlxNapeTilemap_obj::setupCollideIndex(hx::Null< int >  __o_CollideIndex, ::nape::phys::Material mat){
int CollideIndex = __o_CollideIndex.Default(1);
            	HX_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_127_setupCollideIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(CollideIndex,"CollideIndex")
            	HX_STACK_ARG(mat,"mat")
HXLINE( 128)		if (hx::IsNull( this->_data )) {
HXLINE( 131)			return;
            		}
HXLINE( 133)		HX_VARI( int,tileIndex) = (int)0;
HXLINE( 135)		{
HXLINE( 135)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 135)			HX_VARI( int,_g) = this->heightInTiles;
HXDLIN( 135)			while((_g1 < _g)){
HXLINE( 135)				_g1 = (_g1 + (int)1);
HXDLIN( 135)				HX_VARI( int,y) = (_g1 - (int)1);
HXLINE( 137)				{
HXLINE( 137)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 137)					HX_VARI( int,_g2) = this->widthInTiles;
HXDLIN( 137)					while((_g3 < _g2)){
HXLINE( 137)						_g3 = (_g3 + (int)1);
HXLINE( 139)						tileIndex = ((_g3 - (int)1) + (y * this->widthInTiles));
HXLINE( 140)						int _hx_tmp;
HXDLIN( 140)						if ((this->_data->__get(tileIndex) >= CollideIndex)) {
HXLINE( 140)							_hx_tmp = (int)1;
            						}
            						else {
HXLINE( 140)							_hx_tmp = (int)0;
            						}
HXDLIN( 140)						this->_binaryData[tileIndex] = _hx_tmp;
            					}
            				}
            			}
            		}
HXLINE( 143)		this->constructCollider(mat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxNapeTilemap_obj,setupCollideIndex,(void))

void FlxNapeTilemap_obj::setupTileIndices(::Array< int > tileIndices, ::nape::phys::Material mat){
            	HX_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_153_setupTileIndices)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tileIndices,"tileIndices")
            	HX_STACK_ARG(mat,"mat")
HXLINE( 154)		if (hx::IsNull( this->_data )) {
HXLINE( 157)			return;
            		}
HXLINE( 159)		HX_VARI( int,tileIndex) = (int)0;
HXLINE( 160)		{
HXLINE( 160)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 160)			HX_VARI( int,_g) = this->heightInTiles;
HXDLIN( 160)			while((_g1 < _g)){
HXLINE( 160)				_g1 = (_g1 + (int)1);
HXDLIN( 160)				HX_VARI( int,y) = (_g1 - (int)1);
HXLINE( 162)				{
HXLINE( 162)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 162)					HX_VARI( int,_g2) = this->widthInTiles;
HXDLIN( 162)					while((_g3 < _g2)){
HXLINE( 162)						_g3 = (_g3 + (int)1);
HXLINE( 164)						tileIndex = ((_g3 - (int)1) + (y * this->widthInTiles));
HXLINE( 165)						::Array< int > _hx_tmp = this->_binaryData;
HXDLIN( 165)						int _hx_tmp1;
HXDLIN( 165)						if (::Lambda_obj::has(tileIndices,this->_data->__get(tileIndex))) {
HXLINE( 165)							_hx_tmp1 = (int)1;
            						}
            						else {
HXLINE( 165)							_hx_tmp1 = (int)0;
            						}
HXDLIN( 165)						_hx_tmp[tileIndex] = _hx_tmp1;
            					}
            				}
            			}
            		}
HXLINE( 168)		this->constructCollider(mat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxNapeTilemap_obj,setupTileIndices,(void))

void FlxNapeTilemap_obj::constructCollider( ::nape::phys::Material mat){
            	HX_GC_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_182_constructCollider)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mat,"mat")
HXLINE( 183)		if (hx::IsNull( mat )) {
HXLINE( 185)			mat =  ::nape::phys::Material_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
            		}
HXLINE( 187)		HX_VARI( int,tileIndex) = (int)0;
HXLINE( 188)		HX_VARI( int,startRow) = (int)-1;
HXLINE( 189)		HX_VARI( int,endRow) = (int)-1;
HXLINE( 190)		HX_VARI( ::Array< ::Dynamic>,rects) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 194)		{
HXLINE( 194)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 194)			HX_VARI( int,_g) = this->widthInTiles;
HXDLIN( 194)			while((_g1 < _g)){
HXLINE( 194)				_g1 = (_g1 + (int)1);
HXDLIN( 194)				HX_VARI( int,x) = (_g1 - (int)1);
HXLINE( 196)				{
HXLINE( 196)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 196)					HX_VARI( int,_g2) = this->heightInTiles;
HXDLIN( 196)					while((_g3 < _g2)){
HXLINE( 196)						_g3 = (_g3 + (int)1);
HXDLIN( 196)						HX_VARI( int,y) = (_g3 - (int)1);
HXLINE( 198)						tileIndex = (x + (y * this->widthInTiles));
HXLINE( 200)						if ((this->_binaryData->__get(tileIndex) == (int)1)) {
HXLINE( 203)							if ((startRow == (int)-1)) {
HXLINE( 205)								startRow = y;
            							}
HXLINE( 208)							this->_binaryData[tileIndex] = (int)-1;
            						}
            						else {
HXLINE( 212)							bool _hx_tmp;
HXDLIN( 212)							if ((this->_binaryData->__get(tileIndex) != (int)0)) {
HXLINE( 212)								_hx_tmp = (this->_binaryData->__get(tileIndex) == (int)-1);
            							}
            							else {
HXLINE( 212)								_hx_tmp = true;
            							}
HXDLIN( 212)							if (_hx_tmp) {
HXLINE( 215)								if ((startRow != (int)-1)) {
HXLINE( 217)									endRow = (y - (int)1);
HXLINE( 218)									rects->push(this->constructRectangle(x,startRow,endRow));
HXLINE( 219)									startRow = (int)-1;
HXLINE( 220)									endRow = (int)-1;
            								}
            							}
            						}
            					}
            				}
HXLINE( 225)				if ((startRow != (int)-1)) {
HXLINE( 227)					endRow = (this->heightInTiles - (int)1);
HXLINE( 228)					rects->push(this->constructRectangle(x,startRow,endRow));
HXLINE( 229)					startRow = (int)-1;
HXLINE( 230)					endRow = (int)-1;
            				}
            			}
            		}
HXLINE( 234)		{
HXLINE( 234)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN( 234)			{
HXLINE( 234)				_this->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN( 234)				 ::nape::space::Space _hx_tmp1;
HXDLIN( 234)				if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 234)					_hx_tmp1 = null();
            				}
            				else {
HXLINE( 234)					_hx_tmp1 = _this->zpp_inner->space->outer;
            				}
HXDLIN( 234)				if (hx::IsNotNull( _hx_tmp1 )) {
HXLINE( 234)					 ::nape::space::Space _hx_tmp2;
HXDLIN( 234)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 234)						_hx_tmp2 = null();
            					}
            					else {
HXLINE( 234)						_hx_tmp2 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 234)					if (hx::IsNotNull( _hx_tmp2 )) {
HXLINE( 234)						_this->zpp_inner->component->woken = false;
            					}
HXDLIN( 234)					 ::nape::space::Space _hx_tmp3;
HXDLIN( 234)					if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 234)						_hx_tmp3 = null();
            					}
            					else {
HXLINE( 234)						_hx_tmp3 = _this->zpp_inner->space->outer;
            					}
HXDLIN( 234)					if (hx::IsNotNull( _hx_tmp3 )) {
HXLINE( 234)						 ::nape::space::Space _this1;
HXDLIN( 234)						if (hx::IsNull( _this->zpp_inner->space )) {
HXLINE( 234)							_this1 = null();
            						}
            						else {
HXLINE( 234)							_this1 = _this->zpp_inner->space->outer;
            						}
HXDLIN( 234)						_this1->zpp_inner->wrap_bodies->remove(_this);
            					}
            				}
            			}
            		}
HXLINE( 236)		HX_VAR( ::Array< ::Dynamic>,vertices);
HXLINE( 237)		{
HXLINE( 237)			HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 237)			while((_g4 < rects->length)){
HXLINE( 237)				HX_VARI(  ::flixel::math::FlxRect,rect) = rects->__get(_g4).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 237)				_g4 = (_g4 + (int)1);
HXLINE( 239)				vertices = ::Array_obj< ::Dynamic>::__new();
HXLINE( 240)				rect->x = (rect->x * this->_tileWidth);
HXLINE( 241)				rect->y = (rect->y * this->_tileHeight);
HXLINE( 242)				rect->width++;
HXLINE( 243)				rect->width = (rect->width * this->_tileWidth);
HXLINE( 244)				rect->height++;
HXLINE( 245)				rect->height = (rect->height * this->_tileHeight);
HXLINE( 247)				HX_VARI_NAME( Float,x1,"x") = rect->x;
HXDLIN( 247)				HX_VARI_NAME( Float,y1,"y") = rect->y;
HXDLIN( 247)				HX_VAR(  ::nape::geom::Vec2,ret);
HXDLIN( 247)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 247)					ret =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 247)					ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 247)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
HXDLIN( 247)					ret->zpp_pool = null();
            				}
HXDLIN( 247)				if (hx::IsNull( ret->zpp_inner )) {
HXLINE( 247)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret1,"ret");
HXDLIN( 247)					{
HXLINE( 247)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 247)							ret1 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 247)							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 247)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
HXDLIN( 247)							ret1->next = null();
            						}
HXDLIN( 247)						ret1->weak = false;
            					}
HXDLIN( 247)					ret1->_immutable = false;
HXDLIN( 247)					{
HXLINE( 247)						ret1->x = x1;
HXDLIN( 247)						ret1->y = y1;
            					}
HXDLIN( 247)					ret->zpp_inner = ret1;
HXDLIN( 247)					ret->zpp_inner->outer = ret;
            				}
            				else {
HXLINE( 247)					bool _hx_tmp4;
HXDLIN( 247)					{
HXLINE( 247)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = ret->zpp_inner;
HXDLIN( 247)						if (hx::IsNotNull( _this2->_validate )) {
HXLINE( 247)							_this2->_validate();
            						}
            					}
HXDLIN( 247)					if ((ret->zpp_inner->x == x1)) {
HXLINE( 247)						{
HXLINE( 247)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = ret->zpp_inner;
HXDLIN( 247)							if (hx::IsNotNull( _this3->_validate )) {
HXLINE( 247)								_this3->_validate();
            							}
            						}
HXDLIN( 247)						_hx_tmp4 = (ret->zpp_inner->y == y1);
            					}
            					else {
HXLINE( 247)						_hx_tmp4 = false;
            					}
HXDLIN( 247)					if (!(_hx_tmp4)) {
HXLINE( 247)						{
HXLINE( 247)							ret->zpp_inner->x = x1;
HXDLIN( 247)							ret->zpp_inner->y = y1;
            						}
HXDLIN( 247)						{
HXLINE( 247)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this4,"_this") = ret->zpp_inner;
HXDLIN( 247)							if (hx::IsNotNull( _this4->_invalidate )) {
HXLINE( 247)								_this4->_invalidate(_this4);
            							}
            						}
            					}
            				}
HXDLIN( 247)				ret->zpp_inner->weak = false;
HXDLIN( 247)				vertices->push(ret);
HXLINE( 248)				HX_VARI_NAME( Float,x2,"x") = rect->width;
HXDLIN( 248)				HX_VARI_NAME( Float,y2,"y") = rect->y;
HXDLIN( 248)				HX_VAR_NAME(  ::nape::geom::Vec2,ret2,"ret");
HXDLIN( 248)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 248)					ret2 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 248)					ret2 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 248)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret2->zpp_pool;
HXDLIN( 248)					ret2->zpp_pool = null();
            				}
HXDLIN( 248)				if (hx::IsNull( ret2->zpp_inner )) {
HXLINE( 248)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret3,"ret");
HXDLIN( 248)					{
HXLINE( 248)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 248)							ret3 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 248)							ret3 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 248)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret3->next;
HXDLIN( 248)							ret3->next = null();
            						}
HXDLIN( 248)						ret3->weak = false;
            					}
HXDLIN( 248)					ret3->_immutable = false;
HXDLIN( 248)					{
HXLINE( 248)						ret3->x = x2;
HXDLIN( 248)						ret3->y = y2;
            					}
HXDLIN( 248)					ret2->zpp_inner = ret3;
HXDLIN( 248)					ret2->zpp_inner->outer = ret2;
            				}
            				else {
HXLINE( 248)					bool _hx_tmp5;
HXDLIN( 248)					{
HXLINE( 248)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = ret2->zpp_inner;
HXDLIN( 248)						if (hx::IsNotNull( _this5->_validate )) {
HXLINE( 248)							_this5->_validate();
            						}
            					}
HXDLIN( 248)					if ((ret2->zpp_inner->x == x2)) {
HXLINE( 248)						{
HXLINE( 248)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this6,"_this") = ret2->zpp_inner;
HXDLIN( 248)							if (hx::IsNotNull( _this6->_validate )) {
HXLINE( 248)								_this6->_validate();
            							}
            						}
HXDLIN( 248)						_hx_tmp5 = (ret2->zpp_inner->y == y2);
            					}
            					else {
HXLINE( 248)						_hx_tmp5 = false;
            					}
HXDLIN( 248)					if (!(_hx_tmp5)) {
HXLINE( 248)						{
HXLINE( 248)							ret2->zpp_inner->x = x2;
HXDLIN( 248)							ret2->zpp_inner->y = y2;
            						}
HXDLIN( 248)						{
HXLINE( 248)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this7,"_this") = ret2->zpp_inner;
HXDLIN( 248)							if (hx::IsNotNull( _this7->_invalidate )) {
HXLINE( 248)								_this7->_invalidate(_this7);
            							}
            						}
            					}
            				}
HXDLIN( 248)				ret2->zpp_inner->weak = false;
HXDLIN( 248)				vertices->push(ret2);
HXLINE( 249)				HX_VARI_NAME( Float,x3,"x") = rect->width;
HXDLIN( 249)				HX_VARI_NAME( Float,y3,"y") = rect->height;
HXDLIN( 249)				HX_VAR_NAME(  ::nape::geom::Vec2,ret4,"ret");
HXDLIN( 249)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 249)					ret4 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 249)					ret4 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 249)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret4->zpp_pool;
HXDLIN( 249)					ret4->zpp_pool = null();
            				}
HXDLIN( 249)				if (hx::IsNull( ret4->zpp_inner )) {
HXLINE( 249)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret5,"ret");
HXDLIN( 249)					{
HXLINE( 249)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 249)							ret5 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 249)							ret5 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 249)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret5->next;
HXDLIN( 249)							ret5->next = null();
            						}
HXDLIN( 249)						ret5->weak = false;
            					}
HXDLIN( 249)					ret5->_immutable = false;
HXDLIN( 249)					{
HXLINE( 249)						ret5->x = x3;
HXDLIN( 249)						ret5->y = y3;
            					}
HXDLIN( 249)					ret4->zpp_inner = ret5;
HXDLIN( 249)					ret4->zpp_inner->outer = ret4;
            				}
            				else {
HXLINE( 249)					bool _hx_tmp6;
HXDLIN( 249)					{
HXLINE( 249)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this8,"_this") = ret4->zpp_inner;
HXDLIN( 249)						if (hx::IsNotNull( _this8->_validate )) {
HXLINE( 249)							_this8->_validate();
            						}
            					}
HXDLIN( 249)					if ((ret4->zpp_inner->x == x3)) {
HXLINE( 249)						{
HXLINE( 249)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this9,"_this") = ret4->zpp_inner;
HXDLIN( 249)							if (hx::IsNotNull( _this9->_validate )) {
HXLINE( 249)								_this9->_validate();
            							}
            						}
HXDLIN( 249)						_hx_tmp6 = (ret4->zpp_inner->y == y3);
            					}
            					else {
HXLINE( 249)						_hx_tmp6 = false;
            					}
HXDLIN( 249)					if (!(_hx_tmp6)) {
HXLINE( 249)						{
HXLINE( 249)							ret4->zpp_inner->x = x3;
HXDLIN( 249)							ret4->zpp_inner->y = y3;
            						}
HXDLIN( 249)						{
HXLINE( 249)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this10,"_this") = ret4->zpp_inner;
HXDLIN( 249)							if (hx::IsNotNull( _this10->_invalidate )) {
HXLINE( 249)								_this10->_invalidate(_this10);
            							}
            						}
            					}
            				}
HXDLIN( 249)				ret4->zpp_inner->weak = false;
HXDLIN( 249)				vertices->push(ret4);
HXLINE( 250)				HX_VARI_NAME( Float,x4,"x") = rect->x;
HXDLIN( 250)				HX_VARI_NAME( Float,y4,"y") = rect->height;
HXDLIN( 250)				HX_VAR_NAME(  ::nape::geom::Vec2,ret6,"ret");
HXDLIN( 250)				if (hx::IsNull( ::zpp_nape::util::ZPP_PubPool_obj::poolVec2 )) {
HXLINE( 250)					ret6 =  ::nape::geom::Vec2_obj::__alloc( HX_CTX ,null(),null());
            				}
            				else {
HXLINE( 250)					ret6 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
HXDLIN( 250)					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret6->zpp_pool;
HXDLIN( 250)					ret6->zpp_pool = null();
            				}
HXDLIN( 250)				if (hx::IsNull( ret6->zpp_inner )) {
HXLINE( 250)					HX_VAR_NAME(  ::zpp_nape::geom::ZPP_Vec2,ret7,"ret");
HXDLIN( 250)					{
HXLINE( 250)						if (hx::IsNull( ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool )) {
HXLINE( 250)							ret7 =  ::zpp_nape::geom::ZPP_Vec2_obj::__alloc( HX_CTX );
            						}
            						else {
HXLINE( 250)							ret7 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
HXDLIN( 250)							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret7->next;
HXDLIN( 250)							ret7->next = null();
            						}
HXDLIN( 250)						ret7->weak = false;
            					}
HXDLIN( 250)					ret7->_immutable = false;
HXDLIN( 250)					{
HXLINE( 250)						ret7->x = x4;
HXDLIN( 250)						ret7->y = y4;
            					}
HXDLIN( 250)					ret6->zpp_inner = ret7;
HXDLIN( 250)					ret6->zpp_inner->outer = ret6;
            				}
            				else {
HXLINE( 250)					bool _hx_tmp7;
HXDLIN( 250)					{
HXLINE( 250)						HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this11,"_this") = ret6->zpp_inner;
HXDLIN( 250)						if (hx::IsNotNull( _this11->_validate )) {
HXLINE( 250)							_this11->_validate();
            						}
            					}
HXDLIN( 250)					if ((ret6->zpp_inner->x == x4)) {
HXLINE( 250)						{
HXLINE( 250)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this12,"_this") = ret6->zpp_inner;
HXDLIN( 250)							if (hx::IsNotNull( _this12->_validate )) {
HXLINE( 250)								_this12->_validate();
            							}
            						}
HXDLIN( 250)						_hx_tmp7 = (ret6->zpp_inner->y == y4);
            					}
            					else {
HXLINE( 250)						_hx_tmp7 = false;
            					}
HXDLIN( 250)					if (!(_hx_tmp7)) {
HXLINE( 250)						{
HXLINE( 250)							ret6->zpp_inner->x = x4;
HXDLIN( 250)							ret6->zpp_inner->y = y4;
            						}
HXDLIN( 250)						{
HXLINE( 250)							HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this13,"_this") = ret6->zpp_inner;
HXDLIN( 250)							if (hx::IsNotNull( _this13->_invalidate )) {
HXLINE( 250)								_this13->_invalidate(_this13);
            							}
            						}
            					}
            				}
HXDLIN( 250)				ret6->zpp_inner->weak = false;
HXDLIN( 250)				vertices->push(ret6);
HXLINE( 251)				{
HXLINE( 251)					HX_VARI_NAME(  ::nape::shape::ShapeList,_this14,"_this") = this->body->zpp_inner->wrap_shapes;
HXDLIN( 251)					HX_VARI(  ::nape::shape::Shape,obj) =  ::nape::shape::Polygon_obj::__alloc( HX_CTX ,vertices,mat,null());
HXDLIN( 251)					if (_this14->zpp_inner->reverse_flag) {
HXLINE( 251)						_this14->push(obj);
            					}
            					else {
HXLINE( 251)						_this14->unshift(obj);
            					}
            				}
HXLINE( 252)				if (!(rect->_inPool)) {
HXLINE( 252)					rect->_inPool = true;
HXDLIN( 252)					rect->_weak = false;
HXDLIN( 252)					::flixel::math::FlxRect_obj::_pool->putUnsafe(rect);
            				}
            			}
            		}
HXLINE( 255)		{
HXLINE( 255)			HX_VARI_NAME(  ::nape::phys::Body,_this15,"_this") = this->body;
HXDLIN( 255)			HX_VARI(  ::nape::space::Space,space) = ::flixel::addons::nape::FlxNapeSpace_obj::space;
HXDLIN( 255)			{
HXLINE( 255)				_this15->zpp_inner->immutable_midstep(HX_("Body::space",84,f7,bc,26));
HXDLIN( 255)				 ::nape::space::Space _hx_tmp8;
HXDLIN( 255)				if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE( 255)					_hx_tmp8 = null();
            				}
            				else {
HXLINE( 255)					_hx_tmp8 = _this15->zpp_inner->space->outer;
            				}
HXDLIN( 255)				if (hx::IsNotEq( _hx_tmp8,space )) {
HXLINE( 255)					 ::nape::space::Space _hx_tmp9;
HXDLIN( 255)					if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE( 255)						_hx_tmp9 = null();
            					}
            					else {
HXLINE( 255)						_hx_tmp9 = _this15->zpp_inner->space->outer;
            					}
HXDLIN( 255)					if (hx::IsNotNull( _hx_tmp9 )) {
HXLINE( 255)						_this15->zpp_inner->component->woken = false;
            					}
HXDLIN( 255)					 ::nape::space::Space _hx_tmp10;
HXDLIN( 255)					if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE( 255)						_hx_tmp10 = null();
            					}
            					else {
HXLINE( 255)						_hx_tmp10 = _this15->zpp_inner->space->outer;
            					}
HXDLIN( 255)					if (hx::IsNotNull( _hx_tmp10 )) {
HXLINE( 255)						 ::nape::space::Space _this16;
HXDLIN( 255)						if (hx::IsNull( _this15->zpp_inner->space )) {
HXLINE( 255)							_this16 = null();
            						}
            						else {
HXLINE( 255)							_this16 = _this15->zpp_inner->space->outer;
            						}
HXDLIN( 255)						_this16->zpp_inner->wrap_bodies->remove(_this15);
            					}
HXDLIN( 255)					if (hx::IsNotNull( space )) {
HXLINE( 255)						HX_VARI_NAME(  ::nape::phys::BodyList,_this17,"_this") = space->zpp_inner->wrap_bodies;
HXDLIN( 255)						if (_this17->zpp_inner->reverse_flag) {
HXLINE( 255)							_this17->push(_this15);
            						}
            						else {
HXLINE( 255)							_this17->unshift(_this15);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxNapeTilemap_obj,constructCollider,(void))

 ::flixel::math::FlxRect FlxNapeTilemap_obj::constructRectangle(int StartX,int StartY,int EndY){
            	HX_STACKFRAME(&_hx_pos_25c4cf28c8f6d506_267_constructRectangle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(StartX,"StartX")
            	HX_STACK_ARG(StartY,"StartY")
            	HX_STACK_ARG(EndY,"EndY")
HXLINE( 269)		StartX = (StartX + (int)1);
HXLINE( 270)		HX_VARI( bool,rectFinished) = false;
HXLINE( 271)		HX_VARI( int,tileIndex) = (int)0;
HXLINE( 273)		{
HXLINE( 273)			HX_VARI( int,_g1) = StartX;
HXDLIN( 273)			HX_VARI( int,_g) = this->widthInTiles;
HXDLIN( 273)			while((_g1 < _g)){
HXLINE( 273)				_g1 = (_g1 + (int)1);
HXDLIN( 273)				HX_VARI( int,x) = (_g1 - (int)1);
HXLINE( 275)				{
HXLINE( 275)					HX_VARI( int,_g3) = StartY;
HXDLIN( 275)					HX_VARI( int,_g2) = (EndY + (int)1);
HXDLIN( 275)					while((_g3 < _g2)){
HXLINE( 275)						_g3 = (_g3 + (int)1);
HXLINE( 277)						tileIndex = (x + ((_g3 - (int)1) * this->widthInTiles));
HXLINE( 279)						bool _hx_tmp;
HXDLIN( 279)						if ((this->_binaryData->__get(tileIndex) != (int)0)) {
HXLINE( 279)							_hx_tmp = (this->_binaryData->__get(tileIndex) == (int)-1);
            						}
            						else {
HXLINE( 279)							_hx_tmp = true;
            						}
HXDLIN( 279)						if (_hx_tmp) {
HXLINE( 281)							rectFinished = true;
HXLINE( 282)							goto _hx_goto_20;
            						}
            					}
            					_hx_goto_20:;
            				}
HXLINE( 285)				if (rectFinished) {
HXLINE( 288)					{
HXLINE( 288)						HX_VARI_NAME( int,_g31,"_g3") = StartX;
HXDLIN( 288)						while((_g31 < x)){
HXLINE( 288)							_g31 = (_g31 + (int)1);
HXDLIN( 288)							HX_VARI( int,u) = (_g31 - (int)1);
HXLINE( 290)							{
HXLINE( 290)								HX_VARI( int,_g5) = StartY;
HXDLIN( 290)								HX_VARI( int,_g4) = (EndY + (int)1);
HXDLIN( 290)								while((_g5 < _g4)){
HXLINE( 290)									_g5 = (_g5 + (int)1);
HXLINE( 292)									tileIndex = (u + ((_g5 - (int)1) * this->widthInTiles));
HXLINE( 293)									this->_binaryData[tileIndex] = (int)-1;
            								}
            							}
            						}
            					}
HXLINE( 298)					HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 298)					_this->x = (StartX - (int)1);
HXDLIN( 298)					_this->y = StartY;
HXDLIN( 298)					_this->width = (x - (int)1);
HXDLIN( 298)					_this->height = EndY;
HXDLIN( 298)					_this->_inPool = false;
HXDLIN( 298)					return _this;
            				}
            			}
            		}
HXLINE( 302)		{
HXLINE( 302)			HX_VARI_NAME( int,_g11,"_g1") = StartX;
HXDLIN( 302)			HX_VARI_NAME( int,_g6,"_g") = this->widthInTiles;
HXDLIN( 302)			while((_g11 < _g6)){
HXLINE( 302)				_g11 = (_g11 + (int)1);
HXDLIN( 302)				HX_VARI_NAME( int,u1,"u") = (_g11 - (int)1);
HXLINE( 304)				{
HXLINE( 304)					HX_VARI_NAME( int,_g32,"_g3") = StartY;
HXDLIN( 304)					HX_VARI_NAME( int,_g21,"_g2") = (EndY + (int)1);
HXDLIN( 304)					while((_g32 < _g21)){
HXLINE( 304)						_g32 = (_g32 + (int)1);
HXLINE( 306)						tileIndex = (u1 + ((_g32 - (int)1) * this->widthInTiles));
HXLINE( 307)						this->_binaryData[tileIndex] = (int)-1;
            					}
            				}
            			}
            		}
HXLINE( 310)		Float Width = (this->widthInTiles - (int)1);
HXDLIN( 310)		HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 310)		_this1->x = (StartX - (int)1);
HXDLIN( 310)		_this1->y = StartY;
HXDLIN( 310)		_this1->width = Width;
HXDLIN( 310)		_this1->height = EndY;
HXDLIN( 310)		_this1->_inPool = false;
HXDLIN( 310)		return _this1;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxNapeTilemap_obj,constructRectangle,return )


hx::ObjectPtr< FlxNapeTilemap_obj > FlxNapeTilemap_obj::__new() {
	hx::ObjectPtr< FlxNapeTilemap_obj > __this = new FlxNapeTilemap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxNapeTilemap_obj > FlxNapeTilemap_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxNapeTilemap_obj *__this = (FlxNapeTilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxNapeTilemap_obj), true, "flixel.addons.nape.FlxNapeTilemap"));
	*(void **)__this = FlxNapeTilemap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxNapeTilemap_obj::FlxNapeTilemap_obj()
{
}

void FlxNapeTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxNapeTilemap);
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(_binaryData,"_binaryData");
	 ::flixel::tile::FlxTilemap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxNapeTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(_binaryData,"_binaryData");
	 ::flixel::tile::FlxTilemap_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxNapeTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_binaryData") ) { return hx::Val( _binaryData); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addSolidTile") ) { return hx::Val( addSolidTile_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadMapFromCSV") ) { return hx::Val( loadMapFromCSV_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadMapFromArray") ) { return hx::Val( loadMapFromArray_dyn()); }
		if (HX_FIELD_EQ(inName,"setupTileIndices") ) { return hx::Val( setupTileIndices_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setupCollideIndex") ) { return hx::Val( setupCollideIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"constructCollider") ) { return hx::Val( constructCollider_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadMapFrom2DArray") ) { return hx::Val( loadMapFrom2DArray_dyn()); }
		if (HX_FIELD_EQ(inName,"placeCustomPolygon") ) { return hx::Val( placeCustomPolygon_dyn()); }
		if (HX_FIELD_EQ(inName,"constructRectangle") ) { return hx::Val( constructRectangle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxNapeTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::nape::phys::Body >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_binaryData") ) { _binaryData=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxNapeTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"));
	outFields->push(HX_HCSTRING("_binaryData","\xea","\x9f","\xc6","\xb6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxNapeTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::phys::Body*/ ,(int)offsetof(FlxNapeTilemap_obj,body),HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxNapeTilemap_obj,_binaryData),HX_HCSTRING("_binaryData","\xea","\x9f","\xc6","\xb6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxNapeTilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxNapeTilemap_obj_sMemberFields[] = {
	HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"),
	HX_HCSTRING("_binaryData","\xea","\x9f","\xc6","\xb6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("loadMapFromCSV","\x06","\x2b","\x38","\x8f"),
	HX_HCSTRING("loadMapFromArray","\xd9","\x80","\xa3","\xdb"),
	HX_HCSTRING("loadMapFrom2DArray","\xc7","\xd3","\x90","\xac"),
	HX_HCSTRING("addSolidTile","\x98","\xbe","\x14","\xe1"),
	HX_HCSTRING("placeCustomPolygon","\x82","\x15","\x15","\x34"),
	HX_HCSTRING("setupCollideIndex","\xd1","\xb4","\x27","\x03"),
	HX_HCSTRING("setupTileIndices","\x1c","\xb6","\x16","\x84"),
	HX_HCSTRING("constructCollider","\x6b","\x62","\xfd","\xd7"),
	HX_HCSTRING("constructRectangle","\x18","\x21","\xe8","\x6d"),
	::String(null()) };

static void FlxNapeTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxNapeTilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxNapeTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxNapeTilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxNapeTilemap_obj::__mClass;

void FlxNapeTilemap_obj::__register()
{
	hx::Object *dummy = new FlxNapeTilemap_obj;
	FlxNapeTilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.nape.FlxNapeTilemap","\x91","\x0d","\xc8","\x42");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxNapeTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxNapeTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxNapeTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxNapeTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxNapeTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxNapeTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace nape
