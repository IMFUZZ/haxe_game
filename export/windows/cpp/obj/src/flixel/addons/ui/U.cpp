// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_45_xml_str,"flixel.addons.ui.U","xml_str",0xebebbe9f,"flixel.addons.ui.U.xml_str","flixel/addons/ui/U.hx",45,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_62_xml_name,"flixel.addons.ui.U","xml_name",0x7efe8c9d,"flixel.addons.ui.U.xml_name","flixel/addons/ui/U.hx",62,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_78_xml_color,"flixel.addons.ui.U","xml_color",0x53945ed1,"flixel.addons.ui.U.xml_color","flixel/addons/ui/U.hx",78,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_93_xml_iArray,"flixel.addons.ui.U","xml_iArray",0xbbed9342,"flixel.addons.ui.U.xml_iArray","flixel/addons/ui/U.hx",93,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_108_xml_fArray,"flixel.addons.ui.U","xml_fArray",0x88db7e25,"flixel.addons.ui.U.xml_fArray","flixel/addons/ui/U.hx",108,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_123_xml_strArray,"flixel.addons.ui.U","xml_strArray",0x1a3ebe7a,"flixel.addons.ui.U.xml_strArray","flixel/addons/ui/U.hx",123,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_138_xml_colorArray,"flixel.addons.ui.U","xml_colorArray",0x092a2908,"flixel.addons.ui.U.xml_colorArray","flixel/addons/ui/U.hx",138,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_158_perc_to_float,"flixel.addons.ui.U","perc_to_float",0xc1657e67,"flixel.addons.ui.U.perc_to_float","flixel/addons/ui/U.hx",158,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_174_isStrNum,"flixel.addons.ui.U","isStrNum",0x399f4549,"flixel.addons.ui.U.isStrNum","flixel/addons/ui/U.hx",174,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_186_isStrInt,"flixel.addons.ui.U","isStrInt",0x399b73f2,"flixel.addons.ui.U.isStrInt","flixel/addons/ui/U.hx",186,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_197_isStrFloat,"flixel.addons.ui.U","isStrFloat",0xb2cc335f,"flixel.addons.ui.U.isStrFloat","flixel/addons/ui/U.hx",197,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_216_xml_f,"flixel.addons.ui.U","xml_f",0xcb3d1ed4,"flixel.addons.ui.U.xml_f","flixel/addons/ui/U.hx",216,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_230_xml_i,"flixel.addons.ui.U","xml_i",0xcb3d1ed7,"flixel.addons.ui.U.xml_i","flixel/addons/ui/U.hx",230,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_244_xml_pt,"flixel.addons.ui.U","xml_pt",0x0a3de3d6,"flixel.addons.ui.U.xml_pt","flixel/addons/ui/U.hx",244,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_251_boolify,"flixel.addons.ui.U","boolify",0xe88e23a8,"flixel.addons.ui.U.boolify","flixel/addons/ui/U.hx",251,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_267_pointify,"flixel.addons.ui.U","pointify",0x7c83db56,"flixel.addons.ui.U.pointify","flixel/addons/ui/U.hx",267,0x74647d9b)
static const ::String _hx_array_data_ef400604_21[] = {
	HX_("(",28,00,00,00),HX_(")",29,00,00,00),HX_(" ",20,00,00,00),HX_("=",3d,00,00,00),HX_(":",3a,00,00,00),
};
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_298_compareStringVars,"flixel.addons.ui.U","compareStringVars",0x90ebbd38,"flixel.addons.ui.U.compareStringVars","flixel/addons/ui/U.hx",298,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_338_xml_bool,"flixel.addons.ui.U","xml_bool",0x771a9e7c,"flixel.addons.ui.U.xml_bool","flixel/addons/ui/U.hx",338,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_351_xml_gfx,"flixel.addons.ui.U","xml_gfx",0xebe29767,"flixel.addons.ui.U.xml_gfx","flixel/addons/ui/U.hx",351,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_390_center,"flixel.addons.ui.U","center",0x0aecfeff,"flixel.addons.ui.U.center","flixel/addons/ui/U.hx",390,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_396_test_int,"flixel.addons.ui.U","test_int",0x278ea2ec,"flixel.addons.ui.U.test_int","flixel/addons/ui/U.hx",396,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_408_test_float,"flixel.addons.ui.U","test_float",0x672494d9,"flixel.addons.ui.U.test_float","flixel/addons/ui/U.hx",408,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_427_padDigits,"flixel.addons.ui.U","padDigits",0x6478ccef,"flixel.addons.ui.U.padDigits","flixel/addons/ui/U.hx",427,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_450_conformToBounds,"flixel.addons.ui.U","conformToBounds",0xe785bc8c,"flixel.addons.ui.U.conformToBounds","flixel/addons/ui/U.hx",450,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_470_parseHex,"flixel.addons.ui.U","parseHex",0xa68b4412,"flixel.addons.ui.U.parseHex","flixel/addons/ui/U.hx",470,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_493_hexChar2dec,"flixel.addons.ui.U","hexChar2dec",0xbd0fe737,"flixel.addons.ui.U.hexChar2dec","flixel/addons/ui/U.hx",493,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_511_hex2dec,"flixel.addons.ui.U","hex2dec",0xeabe5cc1,"flixel.addons.ui.U.hex2dec","flixel/addons/ui/U.hx",511,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_532_hex2rgb,"flixel.addons.ui.U","hex2rgb",0xeac8fe0c,"flixel.addons.ui.U.hex2rgb","flixel/addons/ui/U.hx",532,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_538_applyResize,"flixel.addons.ui.U","applyResize",0x7e0ec898,"flixel.addons.ui.U.applyResize","flixel/addons/ui/U.hx",538,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_577_rgb2hex,"flixel.addons.ui.U","rgb2hex",0xac7dff0c,"flixel.addons.ui.U.rgb2hex","flixel/addons/ui/U.hx",577,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_588_interpolate,"flixel.addons.ui.U","interpolate",0x58cb8357,"flixel.addons.ui.U.interpolate","flixel/addons/ui/U.hx",588,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_624_getLocList,"flixel.addons.ui.U","getLocList",0xf38b1932,"flixel.addons.ui.U.getLocList","flixel/addons/ui/U.hx",624,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_633_disposeXML,"flixel.addons.ui.U","disposeXML",0xe5262ca2,"flixel.addons.ui.U.disposeXML","flixel/addons/ui/U.hx",633,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_648_copyFast,"flixel.addons.ui.U","copyFast",0x986e209b,"flixel.addons.ui.U.copyFast","flixel/addons/ui/U.hx",648,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_652_copyXml,"flixel.addons.ui.U","copyXml",0xae1514b8,"flixel.addons.ui.U.copyXml","flixel/addons/ui/U.hx",652,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_656_readXml,"flixel.addons.ui.U","readXml",0x6d613fb7,"flixel.addons.ui.U.readXml","flixel/addons/ui/U.hx",656,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_664_readFast,"flixel.addons.ui.U","readFast",0x3bc794bc,"flixel.addons.ui.U.readFast","flixel/addons/ui/U.hx",664,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_673_fixSlash,"flixel.addons.ui.U","fixSlash",0xb543a1d2,"flixel.addons.ui.U.fixSlash","flixel/addons/ui/U.hx",673,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_688_endline,"flixel.addons.ui.U","endline",0xa98ad0e5,"flixel.addons.ui.U.endline","flixel/addons/ui/U.hx",688,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_697_slash,"flixel.addons.ui.U","slash",0xe98aba53,"flixel.addons.ui.U.slash","flixel/addons/ui/U.hx",697,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_703_writeXml,"flixel.addons.ui.U","writeXml",0xf415c5e2,"flixel.addons.ui.U.writeXml","flixel/addons/ui/U.hx",703,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_732_getXML,"flixel.addons.ui.U","getXML",0xa83c640b,"flixel.addons.ui.U.getXML","flixel/addons/ui/U.hx",732,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_740_json,"flixel.addons.ui.U","json",0x492e9cd2,"flixel.addons.ui.U.json","flixel/addons/ui/U.hx",740,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_749_field,"flixel.addons.ui.U","field",0x6b5c8ed0,"flixel.addons.ui.U.field","flixel/addons/ui/U.hx",749,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_761_xml,"flixel.addons.ui.U","xml",0x6318966d,"flixel.addons.ui.U.xml","flixel/addons/ui/U.hx",761,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_797_clearArraySoft,"flixel.addons.ui.U","clearArraySoft",0x8f7d5f00,"flixel.addons.ui.U.clearArraySoft","flixel/addons/ui/U.hx",797,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_811_clearArray,"flixel.addons.ui.U","clearArray",0x7ee062f6,"flixel.addons.ui.U.clearArray","flixel/addons/ui/U.hx",811,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_821_destroyThing,"flixel.addons.ui.U","destroyThing",0x2d89953e,"flixel.addons.ui.U.destroyThing","flixel/addons/ui/U.hx",821,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_840_fontStr,"flixel.addons.ui.U","fontStr",0x00b679b8,"flixel.addons.ui.U.fontStr","flixel/addons/ui/U.hx",840,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_844_font,"flixel.addons.ui.U","font",0x4686b879,"flixel.addons.ui.U.font","flixel/addons/ui/U.hx",844,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_871__font,"flixel.addons.ui.U","_font",0x619a73c4,"flixel.addons.ui.U._font","flixel/addons/ui/U.hx",871,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_888_fsx,"flixel.addons.ui.U","fsx",0x630af321,"flixel.addons.ui.U.fsx","flixel/addons/ui/U.hx",888,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_892_fs,"flixel.addons.ui.U","fs",0x12cfd577,"flixel.addons.ui.U.fs","flixel/addons/ui/U.hx",892,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_902_FU,"flixel.addons.ui.U","FU",0x12cfb979,"flixel.addons.ui.U.FU","flixel/addons/ui/U.hx",902,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_912_FUL,"flixel.addons.ui.U","FUL",0x62f290b3,"flixel.addons.ui.U.FUL","flixel/addons/ui/U.hx",912,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_916_getBmp,"flixel.addons.ui.U","getBmp",0xa82bce79,"flixel.addons.ui.U.getBmp","flixel/addons/ui/U.hx",916,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_943_checkHaxedef,"flixel.addons.ui.U","checkHaxedef",0x22016e21,"flixel.addons.ui.U.checkHaxedef","flixel/addons/ui/U.hx",943,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1049_copy_shallow_arr,"flixel.addons.ui.U","copy_shallow_arr",0xfda79816,"flixel.addons.ui.U.copy_shallow_arr","flixel/addons/ui/U.hx",1049,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1062_copy_arr_arr_i,"flixel.addons.ui.U","copy_arr_arr_i",0xd7a40f0d,"flixel.addons.ui.U.copy_arr_arr_i","flixel/addons/ui/U.hx",1062,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1075_copy_shallow_arr_i,"flixel.addons.ui.U","copy_shallow_arr_i",0x68ce9cc0,"flixel.addons.ui.U.copy_shallow_arr_i","flixel/addons/ui/U.hx",1075,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1085_copy_shallow_arr_str,"flixel.addons.ui.U","copy_shallow_arr_str",0x2f4748c8,"flixel.addons.ui.U.copy_shallow_arr_str","flixel/addons/ui/U.hx",1085,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1095_FU_,"flixel.addons.ui.U","FU_",0x62f290c6,"flixel.addons.ui.U.FU_","flixel/addons/ui/U.hx",1095,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1109_xml_blend,"flixel.addons.ui.U","xml_blend",0xbe2cd5bf,"flixel.addons.ui.U.xml_blend","flixel/addons/ui/U.hx",1109,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1113_blendModeFromString,"flixel.addons.ui.U","blendModeFromString",0x03077be5,"flixel.addons.ui.U.blendModeFromString","flixel/addons/ui/U.hx",1113,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1152_scaleTileBmp,"flixel.addons.ui.U","scaleTileBmp",0x08b80cf7,"flixel.addons.ui.U.scaleTileBmp","flixel/addons/ui/U.hx",1152,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1220_scaleAndStoreTileset,"flixel.addons.ui.U","scaleAndStoreTileset",0x3f80e40a,"flixel.addons.ui.U.scaleAndStoreTileset","flixel/addons/ui/U.hx",1220,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1241_loadScaledImage,"flixel.addons.ui.U","loadScaledImage",0x44902b71,"flixel.addons.ui.U.loadScaledImage","flixel/addons/ui/U.hx",1241,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1287_loadImageScaleToHeight,"flixel.addons.ui.U","loadImageScaleToHeight",0xb375d501,"flixel.addons.ui.U.loadImageScaleToHeight","flixel/addons/ui/U.hx",1287,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1315_loadMonoScaledImage,"flixel.addons.ui.U","loadMonoScaledImage",0x63eb2c0e,"flixel.addons.ui.U.loadMonoScaledImage","flixel/addons/ui/U.hx",1315,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1386_gfx,"flixel.addons.ui.U","gfx",0x630baa0f,"flixel.addons.ui.U.gfx","flixel/addons/ui/U.hx",1386,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1439_bmpToArrayIntLayer,"flixel.addons.ui.U","bmpToArrayIntLayer",0x35cf3805,"flixel.addons.ui.U.bmpToArrayIntLayer","flixel/addons/ui/U.hx",1439,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1474_bmpToCSVLayer,"flixel.addons.ui.U","bmpToCSVLayer",0xcff6d981,"flixel.addons.ui.U.bmpToCSVLayer","flixel/addons/ui/U.hx",1474,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1510_get_gfx,"flixel.addons.ui.U","get_gfx",0x914f75a6,"flixel.addons.ui.U.get_gfx","flixel/addons/ui/U.hx",1510,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1551_sfx,"flixel.addons.ui.U","sfx",0x6314c51b,"flixel.addons.ui.U.sfx","flixel/addons/ui/U.hx",1551,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1571_intStr_to_arr,"flixel.addons.ui.U","intStr_to_arr",0xf37b0550,"flixel.addons.ui.U.intStr_to_arr","flixel/addons/ui/U.hx",1571,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1601_intStr_to_arrStr,"flixel.addons.ui.U","intStr_to_arrStr",0xae968d41,"flixel.addons.ui.U.intStr_to_arrStr","flixel/addons/ui/U.hx",1601,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1625_dirStr,"flixel.addons.ui.U","dirStr",0xc16e8a8e,"flixel.addons.ui.U.dirStr","flixel/addons/ui/U.hx",1625,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1644_obj_direction,"flixel.addons.ui.U","obj_direction",0x85cba8cd,"flixel.addons.ui.U.obj_direction","flixel/addons/ui/U.hx",1644,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1658_circle_test,"flixel.addons.ui.U","circle_test",0xe94ea6b7,"flixel.addons.ui.U.circle_test","flixel/addons/ui/U.hx",1658,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1666_point_circle_test,"flixel.addons.ui.U","point_circle_test",0x8b175588,"flixel.addons.ui.U.point_circle_test","flixel/addons/ui/U.hx",1666,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1673_aabb_test_mult,"flixel.addons.ui.U","aabb_test_mult",0x7aa50bc8,"flixel.addons.ui.U.aabb_test_mult","flixel/addons/ui/U.hx",1673,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1698_aabb_test,"flixel.addons.ui.U","aabb_test",0xfa707aa7,"flixel.addons.ui.U.aabb_test","flixel/addons/ui/U.hx",1698,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1720_bitStringDimensions,"flixel.addons.ui.U","bitStringDimensions",0x61b76e01,"flixel.addons.ui.U.bitStringDimensions","flixel/addons/ui/U.hx",1720,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1736_splitBitString,"flixel.addons.ui.U","splitBitString",0xe2e84a6e,"flixel.addons.ui.U.splitBitString","flixel/addons/ui/U.hx",1736,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1752_getShortTextFromFlxKeyText,"flixel.addons.ui.U","getShortTextFromFlxKeyText",0x3a78f701,"flixel.addons.ui.U.getShortTextFromFlxKeyText","flixel/addons/ui/U.hx",1752,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1820_getFlxKeyTextFromShortText,"flixel.addons.ui.U","getFlxKeyTextFromShortText",0x32f730b9,"flixel.addons.ui.U.getFlxKeyTextFromShortText","flixel/addons/ui/U.hx",1820,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1889_formatXml,"flixel.addons.ui.U","formatXml",0x5ff16ff6,"flixel.addons.ui.U.formatXml","flixel/addons/ui/U.hx",1889,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1928_strCase,"flixel.addons.ui.U","strCase",0x4a57cb97,"flixel.addons.ui.U.strCase","flixel/addons/ui/U.hx",1928,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1939_unparentXML,"flixel.addons.ui.U","unparentXML",0x3e984fea,"flixel.addons.ui.U.unparentXML","flixel/addons/ui/U.hx",1939,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1947_getMatrix,"flixel.addons.ui.U","getMatrix",0x7ebd7c8d,"flixel.addons.ui.U.getMatrix","flixel/addons/ui/U.hx",1947,0x74647d9b)
HX_DEFINE_STACK_FRAME(_hx_pos_9939526bb4013f05_1954_boot,"flixel.addons.ui.U","boot",0x43e1dedc,"flixel.addons.ui.U.boot","flixel/addons/ui/U.hx",1954,0x74647d9b)
namespace flixel{
namespace addons{
namespace ui{

void U_obj::__construct() { }

Dynamic U_obj::__CreateEmpty() { return new U_obj; }

void *U_obj::_hx_vtable = 0;

Dynamic U_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< U_obj > _hx_result = new U_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool U_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54a0d9ee;
}

::String U_obj::xml_str( ::Xml data,::String att,hx::Null< bool >  __o_lower_case,::String __o_default_str){
bool lower_case = __o_lower_case.Default(false);
::String default_str = __o_default_str.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_45_xml_str)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(lower_case,"lower_case")
            	HX_STACK_ARG(default_str,"default_str")
HXLINE(  46)		if (hx::IsNotNull( data->get(att) )) {
HXLINE(  47)			if (lower_case) {
HXLINE(  48)				return data->get(att).toLowerCase();
            			}
            			else {
HXLINE(  50)				return data->get(att);
            			}
            		}
HXLINE(  52)		return default_str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_str,return )

::String U_obj::xml_name( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_62_xml_name)
            	HX_STACK_ARG(data,"data")
HXLINE(  63)		HX_VARI( ::String,name) = ::flixel::addons::ui::U_obj::xml_str(data,HX_("name",4b,72,ff,48),true,HX_("",00,00,00,00));
HXLINE(  64)		if ((name == HX_("",00,00,00,00))) {
HXLINE(  66)			name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("id",db,5b,00,00),true,HX_("",00,00,00,00));
            		}
HXLINE(  68)		return name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,xml_name,return )

 ::Dynamic U_obj::xml_color( ::Xml data,::String att,hx::Null< bool >  __o_cast32Bit, ::Dynamic defaultColor){
bool cast32Bit = __o_cast32Bit.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_78_xml_color)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(cast32Bit,"cast32Bit")
            	HX_STACK_ARG(defaultColor,"defaultColor")
HXLINE(  79)		HX_VARI(  ::Dynamic,col) = null();
HXLINE(  80)		HX_VARI( ::String,str) = ::flixel::addons::ui::U_obj::xml_str(data,att,true,null());
HXLINE(  81)		if ((str != HX_("",00,00,00,00))) {
HXLINE(  83)			HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN(  83)			if (hx::IsNull( return_val )) {
HXLINE(  83)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str));
            			}
HXDLIN(  83)			col = return_val;
            		}
HXLINE(  85)		bool _hx_tmp;
HXDLIN(  85)		if (hx::IsNull( col )) {
HXLINE(  85)			_hx_tmp = hx::IsNotNull( defaultColor );
            		}
            		else {
HXLINE(  85)			_hx_tmp = false;
            		}
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  87)			col = defaultColor;
            		}
HXLINE(  89)		return col;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_color,return )

::Array< int > U_obj::xml_iArray( ::Xml data,::String att){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_93_xml_iArray)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
HXLINE(  94)		HX_VARI( ::Array< ::String >,arr) = ::flixel::addons::ui::U_obj::xml_strArray(data,att,null(),null());
HXLINE(  95)		HX_VARI( ::Array< int >,ints) = null();
HXLINE(  96)		bool _hx_tmp;
HXDLIN(  96)		if (hx::IsNotNull( arr )) {
HXLINE(  96)			_hx_tmp = (arr->length > (int)0);
            		}
            		else {
HXLINE(  96)			_hx_tmp = false;
            		}
HXDLIN(  96)		if (_hx_tmp) {
HXLINE(  98)			ints = ::Array_obj< int >::__new(0);
HXLINE(  99)			{
HXLINE(  99)				HX_VARI( int,_g1) = (int)0;
HXDLIN(  99)				HX_VARI( int,_g) = arr->length;
HXDLIN(  99)				while((_g1 < _g)){
HXLINE(  99)					_g1 = (_g1 + (int)1);
HXDLIN(  99)					HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 101)					ints[i] = ::Std_obj::parseInt(arr->__get(i));
            				}
            			}
            		}
HXLINE( 104)		return ints;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,xml_iArray,return )

::Array< Float > U_obj::xml_fArray( ::Xml data,::String att){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_108_xml_fArray)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
HXLINE( 109)		HX_VARI( ::Array< ::String >,arr) = ::flixel::addons::ui::U_obj::xml_strArray(data,att,null(),null());
HXLINE( 110)		HX_VARI( ::Array< Float >,fs) = null();
HXLINE( 111)		bool _hx_tmp;
HXDLIN( 111)		if (hx::IsNotNull( arr )) {
HXLINE( 111)			_hx_tmp = (arr->length > (int)0);
            		}
            		else {
HXLINE( 111)			_hx_tmp = false;
            		}
HXDLIN( 111)		if (_hx_tmp) {
HXLINE( 113)			fs = ::Array_obj< Float >::__new(0);
HXLINE( 114)			{
HXLINE( 114)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 114)				HX_VARI( int,_g) = arr->length;
HXDLIN( 114)				while((_g1 < _g)){
HXLINE( 114)					_g1 = (_g1 + (int)1);
HXDLIN( 114)					HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 116)					fs[i] = ::Std_obj::parseFloat(arr->__get(i));
            				}
            			}
            		}
HXLINE( 119)		return fs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,xml_fArray,return )

::Array< ::String > U_obj::xml_strArray( ::Xml data,::String att,hx::Null< bool >  __o_lowerCase,::Array< ::String > default_){
bool lowerCase = __o_lowerCase.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_123_xml_strArray)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(lowerCase,"lowerCase")
            	HX_STACK_ARG(default_,"default_")
HXLINE( 124)		HX_VARI( ::String,str) = ::flixel::addons::ui::U_obj::xml_str(data,att,lowerCase,null());
HXLINE( 125)		if ((str != HX_("",00,00,00,00))) {
HXLINE( 128)			return str.split(HX_(",",2c,00,00,00));
            		}
            		else {
HXLINE( 132)			return default_;
            		}
HXLINE( 125)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_strArray,return )

::Array< int > U_obj::xml_colorArray( ::Xml data,::String att,hx::Null< bool >  __o_cast32Bit){
bool cast32Bit = __o_cast32Bit.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_138_xml_colorArray)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(cast32Bit,"cast32Bit")
HXLINE( 139)		HX_VARI( ::Array< ::String >,arr) = ::flixel::addons::ui::U_obj::xml_strArray(data,att,null(),null());
HXLINE( 140)		HX_VARI( ::Array< int >,cols) = null();
HXLINE( 141)		bool _hx_tmp;
HXDLIN( 141)		if (hx::IsNotNull( arr )) {
HXLINE( 141)			_hx_tmp = (arr->length > (int)0);
            		}
            		else {
HXLINE( 141)			_hx_tmp = false;
            		}
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 143)			cols = ::Array_obj< int >::__new(0);
HXLINE( 144)			{
HXLINE( 144)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 144)				HX_VARI( int,_g) = arr->length;
HXDLIN( 144)				while((_g1 < _g)){
HXLINE( 144)					_g1 = (_g1 + (int)1);
HXDLIN( 144)					HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 146)					HX_VARI( ::String,str) = arr->__get(i);
HXDLIN( 146)					HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN( 146)					if (hx::IsNull( return_val )) {
HXLINE( 146)						HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str));
            					}
HXDLIN( 146)					cols[i] = return_val;
            				}
            			}
            		}
HXLINE( 149)		return cols;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_colorArray,return )

Float U_obj::perc_to_float(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_158_perc_to_float)
            	HX_STACK_ARG(str,"str")
HXLINE( 159)		int _hx_tmp = str.lastIndexOf(HX_("%",25,00,00,00),null());
HXDLIN( 159)		if ((_hx_tmp == (str.length - (int)1))) {
HXLINE( 160)			str = str.substr((int)0,(str.length - (int)1));
HXLINE( 161)			HX_VARI(  ::EReg,r) =  ::EReg_obj::__alloc( HX_CTX ,HX_("([0-9]+)?(\\.)?([0-9]*)?",69,52,2d,64),HX_("",00,00,00,00));
HXLINE( 162)			if (r->match(str)) {
HXLINE( 163)				HX_VARI(  ::Dynamic,match) = r->matchedPos();
HXLINE( 164)				bool _hx_tmp1;
HXDLIN( 164)				if ((( (int)(match->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 164)					_hx_tmp1 = (( (int)(match->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) == str.length);
            				}
            				else {
HXLINE( 164)					_hx_tmp1 = false;
            				}
HXDLIN( 164)				if (_hx_tmp1) {
HXLINE( 165)					HX_VARI( Float,perc_float) = ::Std_obj::parseFloat(str);
HXLINE( 166)					perc_float = ((Float)perc_float / (Float)(int)100);
HXLINE( 167)					return perc_float;
            				}
            			}
            		}
HXLINE( 171)		return ::Math_obj::NaN;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,perc_to_float,return )

bool U_obj::isStrNum(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_174_isStrNum)
            	HX_STACK_ARG(str,"str")
HXLINE( 175)		bool _hx_tmp;
HXDLIN( 175)		if (hx::IsNotNull( str )) {
HXLINE( 175)			_hx_tmp = (str == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 175)			_hx_tmp = true;
            		}
HXDLIN( 175)		if (_hx_tmp) {
HXLINE( 175)			return false;
            		}
HXLINE( 176)		HX_VARI(  ::EReg,r) =  ::EReg_obj::__alloc( HX_CTX ,HX_("-?([0-9]+)?(\\.)?([0-9]*)?",37,d9,6d,5d),HX_("",00,00,00,00));
HXLINE( 177)		if (r->match(str)) {
HXLINE( 178)			HX_VARI(  ::Dynamic,p) = r->matchedPos();
HXLINE( 179)			bool _hx_tmp1;
HXDLIN( 179)			if ((( (int)(p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 179)				_hx_tmp1 = (( (int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) == str.length);
            			}
            			else {
HXLINE( 179)				_hx_tmp1 = false;
            			}
HXDLIN( 179)			if (_hx_tmp1) {
HXLINE( 180)				return true;
            			}
            		}
HXLINE( 183)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,isStrNum,return )

bool U_obj::isStrInt(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_186_isStrInt)
            	HX_STACK_ARG(str,"str")
HXLINE( 187)		HX_VARI(  ::EReg,r) =  ::EReg_obj::__alloc( HX_CTX ,HX_("[0-9]+",8f,d9,9f,23),HX_("",00,00,00,00));
HXLINE( 188)		if (r->match(str)) {
HXLINE( 189)			HX_VARI(  ::Dynamic,p) = r->matchedPos();
HXLINE( 190)			bool _hx_tmp;
HXDLIN( 190)			if ((( (int)(p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 190)				_hx_tmp = (( (int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) == str.length);
            			}
            			else {
HXLINE( 190)				_hx_tmp = false;
            			}
HXDLIN( 190)			if (_hx_tmp) {
HXLINE( 191)				return true;
            			}
            		}
HXLINE( 194)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,isStrInt,return )

bool U_obj::isStrFloat(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_197_isStrFloat)
            	HX_STACK_ARG(str,"str")
HXLINE( 198)		HX_VARI(  ::EReg,r) =  ::EReg_obj::__alloc( HX_CTX ,HX_("[0-9]+\\.[0-9]+",f0,b3,16,fc),HX_("",00,00,00,00));
HXLINE( 199)		if (r->match(str)) {
HXLINE( 200)			HX_VARI(  ::Dynamic,p) = r->matchedPos();
HXLINE( 201)			bool _hx_tmp;
HXDLIN( 201)			if ((( (int)(p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) == (int)0)) {
HXLINE( 201)				_hx_tmp = (( (int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) == str.length);
            			}
            			else {
HXLINE( 201)				_hx_tmp = false;
            			}
HXDLIN( 201)			if (_hx_tmp) {
HXLINE( 202)				return true;
            			}
            		}
HXLINE( 205)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,isStrFloat,return )

Float U_obj::xml_f( ::Xml data,::String att,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_216_xml_f)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(default_,"default_")
HXLINE( 217)		if (hx::IsNotNull( data->get(att) )) {
HXLINE( 218)			return ::Std_obj::parseFloat(data->get(att));
            		}
HXLINE( 219)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_f,return )

int U_obj::xml_i( ::Xml data,::String att,hx::Null< int >  __o_default_){
int default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_230_xml_i)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(default_,"default_")
HXLINE( 231)		if (hx::IsNotNull( data->get(att) )) {
HXLINE( 232)			return ::Std_obj::parseInt(data->get(att));
            		}
HXLINE( 233)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_i,return )

 ::flixel::math::FlxPoint U_obj::xml_pt( ::Xml data,::String att, ::flixel::math::FlxPoint default_){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_244_xml_pt)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(default_,"default_")
HXLINE( 245)		if (hx::IsNotNull( data->get(att) )) {
HXLINE( 246)			return ::flixel::addons::ui::U_obj::pointify(data->get(att));
            		}
HXLINE( 248)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_pt,return )

bool U_obj::boolify(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_251_boolify)
            	HX_STACK_ARG(str,"str")
HXLINE( 252)		str = str.toLowerCase();
HXLINE( 253)		bool _hx_tmp;
HXDLIN( 253)		if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE( 253)			_hx_tmp = (str == HX_("1",31,00,00,00));
            		}
            		else {
HXLINE( 253)			_hx_tmp = true;
            		}
HXDLIN( 253)		if (_hx_tmp) {
HXLINE( 254)			return true;
            		}
HXLINE( 256)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,boolify,return )

 ::flixel::math::FlxPoint U_obj::pointify(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_267_pointify)
            	HX_STACK_ARG(str,"str")
HXLINE( 268)		HX_VARI(  ::flixel::math::FlxPoint,pt) = null();
HXLINE( 269)		if (hx::IsNotNull( str )) {
HXLINE( 270)			HX_VARI( ::Array< ::String >,arr) = ::Array_obj< ::String >::fromData( _hx_array_data_ef400604_21,5);
HXLINE( 271)			{
HXLINE( 271)				HX_VARI( int,_g) = (int)0;
HXDLIN( 271)				while((_g < arr->length)){
HXLINE( 271)					HX_VARI( ::String,thing) = arr->__get(_g);
HXDLIN( 271)					_g = (_g + (int)1);
HXLINE( 272)					while((str.indexOf(thing,null()) != (int)-1)){
HXLINE( 273)						str = ::StringTools_obj::replace(str,thing,HX_("",00,00,00,00));
            					}
            				}
            			}
HXLINE( 276)			if ((str.indexOf(HX_(",",2c,00,00,00),null()) == (int)-1)) {
HXLINE( 277)				if ((str.indexOf(HX_("x",78,00,00,00),null()) != (int)-1)) {
HXLINE( 278)					str = ::StringTools_obj::replace(str,HX_("x",78,00,00,00),HX_(",",2c,00,00,00));
            				}
            			}
HXLINE( 281)			arr = str.split(HX_(",",2c,00,00,00));
HXLINE( 282)			if ((arr->length == (int)2)) {
HXLINE( 283)				HX_VARI_NAME( Float,pt1,"pt") = ::Std_obj::parseFloat(arr->__get((int)0));
HXDLIN( 283)				pt =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,pt1,::Std_obj::parseFloat(arr->__get((int)1)));
            			}
            		}
HXLINE( 286)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,pointify,return )

bool U_obj::compareStringVars(::String variable,::String otherValue,::String type,::String __o__hx_operator){
::String _hx_operator = __o__hx_operator.Default(HX_HCSTRING("==","\x60","\x35","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_298_compareStringVars)
            	HX_STACK_ARG(variable,"variable")
            	HX_STACK_ARG(otherValue,"otherValue")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(_hx_operator,"operator")
HXLINE( 299)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 322)			HX_VARI( bool,ba) = ::flixel::addons::ui::U_obj::boolify(variable);
HXLINE( 323)			HX_VARI( bool,bb) = ::flixel::addons::ui::U_obj::boolify(otherValue);
HXLINE( 324)			bool _hx_tmp;
HXDLIN( 324)			if ((_hx_operator != HX_("==",60,35,00,00))) {
HXLINE( 324)				_hx_tmp = (_hx_operator == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 324)				_hx_tmp = true;
            			}
HXDLIN( 324)			if (_hx_tmp) {
HXLINE( 324)				return (ba == bb);
            			}
            			else {
HXLINE( 325)				bool _hx_tmp1;
HXDLIN( 325)				if ((_hx_operator != HX_("!==",c1,3f,19,00))) {
HXLINE( 325)					_hx_tmp1 = (_hx_operator == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 325)					_hx_tmp1 = true;
            				}
HXDLIN( 325)				if (_hx_tmp1) {
HXLINE( 325)					return (ba != bb);
            				}
            			}
HXLINE( 321)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 313)			HX_VARI( Float,fa) = ::Std_obj::parseFloat(variable);
HXLINE( 314)			HX_VARI( Float,fb) = ::Std_obj::parseFloat(otherValue);
HXLINE( 315)			bool _hx_tmp2;
HXDLIN( 315)			if ((_hx_operator != HX_("==",60,35,00,00))) {
HXLINE( 315)				_hx_tmp2 = (_hx_operator == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 315)				_hx_tmp2 = true;
            			}
HXDLIN( 315)			if (_hx_tmp2) {
HXLINE( 315)				return (fa == fb);
            			}
            			else {
HXLINE( 316)				bool _hx_tmp3;
HXDLIN( 316)				if ((_hx_operator != HX_("!==",c1,3f,19,00))) {
HXLINE( 316)					_hx_tmp3 = (_hx_operator == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 316)					_hx_tmp3 = true;
            				}
HXDLIN( 316)				if (_hx_tmp3) {
HXLINE( 316)					return (fa != fb);
            				}
            				else {
HXLINE( 317)					if ((_hx_operator == HX_("<",3c,00,00,00))) {
HXLINE( 317)						return (fa < fb);
            					}
            					else {
HXLINE( 318)						if ((_hx_operator == HX_(">",3e,00,00,00))) {
HXLINE( 318)							return (fa > fb);
            						}
            						else {
HXLINE( 319)							if ((_hx_operator == HX_("<=",81,34,00,00))) {
HXLINE( 319)								return (fa <= fb);
            							}
            							else {
HXLINE( 320)								if ((_hx_operator == HX_(">=",3f,36,00,00))) {
HXLINE( 320)									return (fa >= fb);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 312)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE( 304)			HX_VARI( int,ia) = ::Std_obj::parseInt(variable);
HXLINE( 305)			HX_VARI( int,ib) = ::Std_obj::parseInt(otherValue);
HXLINE( 306)			bool _hx_tmp4;
HXDLIN( 306)			if ((_hx_operator != HX_("==",60,35,00,00))) {
HXLINE( 306)				_hx_tmp4 = (_hx_operator == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 306)				_hx_tmp4 = true;
            			}
HXDLIN( 306)			if (_hx_tmp4) {
HXLINE( 306)				return (ia == ib);
            			}
            			else {
HXLINE( 307)				bool _hx_tmp5;
HXDLIN( 307)				if ((_hx_operator != HX_("!==",c1,3f,19,00))) {
HXLINE( 307)					_hx_tmp5 = (_hx_operator == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 307)					_hx_tmp5 = true;
            				}
HXDLIN( 307)				if (_hx_tmp5) {
HXLINE( 307)					return (ia != ib);
            				}
            				else {
HXLINE( 308)					if ((_hx_operator == HX_("<",3c,00,00,00))) {
HXLINE( 308)						return (ia < ib);
            					}
            					else {
HXLINE( 309)						if ((_hx_operator == HX_(">",3e,00,00,00))) {
HXLINE( 309)							return (ia > ib);
            						}
            						else {
HXLINE( 310)							if ((_hx_operator == HX_("<=",81,34,00,00))) {
HXLINE( 310)								return (ia <= ib);
            							}
            							else {
HXLINE( 311)								if ((_hx_operator == HX_(">=",3f,36,00,00))) {
HXLINE( 311)									return (ia >= ib);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 303)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 301)			bool _hx_tmp6;
HXDLIN( 301)			if ((_hx_operator != HX_("==",60,35,00,00))) {
HXLINE( 301)				_hx_tmp6 = (_hx_operator == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 301)				_hx_tmp6 = true;
            			}
HXDLIN( 301)			if (_hx_tmp6) {
HXLINE( 301)				return (variable == otherValue);
            			}
HXLINE( 302)			bool _hx_tmp7;
HXDLIN( 302)			if ((_hx_operator != HX_("!==",c1,3f,19,00))) {
HXLINE( 302)				_hx_tmp7 = (_hx_operator == HX_("!=",fc,1c,00,00));
            			}
            			else {
HXLINE( 302)				_hx_tmp7 = true;
            			}
HXDLIN( 302)			if (_hx_tmp7) {
HXLINE( 302)				return (variable != otherValue);
            			}
HXLINE( 300)			goto _hx_goto_22;
            		}
            		_hx_goto_22:;
HXLINE( 327)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,compareStringVars,return )

bool U_obj::xml_bool( ::Xml data,::String att,hx::Null< bool >  __o_default_){
bool default_ = __o_default_.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_338_xml_bool)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(default_,"default_")
HXLINE( 339)		if (hx::IsNotNull( data->get(att) )) {
HXLINE( 340)			HX_VARI( ::String,str) = data->get(att);
HXLINE( 341)			str = str.toLowerCase();
HXLINE( 342)			bool _hx_tmp;
HXDLIN( 342)			if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE( 342)				_hx_tmp = (str == HX_("1",31,00,00,00));
            			}
            			else {
HXLINE( 342)				_hx_tmp = true;
            			}
HXDLIN( 342)			if (_hx_tmp) {
HXLINE( 343)				return true;
            			}
HXLINE( 345)			return false;
            		}
HXLINE( 347)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_bool,return )

::String U_obj::xml_gfx( ::Xml data,::String att,hx::Null< bool >  __o_test){
bool test = __o_test.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_351_xml_gfx)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(att,"att")
            	HX_STACK_ARG(test,"test")
HXLINE( 352)		HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXLINE( 353)		if (hx::IsNotNull( data->get(att) )) {
HXLINE( 355)			str = data->get(att);
HXLINE( 356)			bool _hx_tmp;
HXDLIN( 356)			if ((str != HX_("",00,00,00,00))) {
HXLINE( 356)				_hx_tmp = hx::IsNull( str );
            			}
            			else {
HXLINE( 356)				_hx_tmp = true;
            			}
HXDLIN( 356)			if (_hx_tmp) {
HXLINE( 358)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 362)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXLINE( 363)				if (test) {
HXLINE( 365)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE( 367)						if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE( 369)							HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + att) + HX_("\"",22,00,00,00)));
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE( 379)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_gfx,return )

void U_obj::center( ::flixel::FlxObject fb1, ::flixel::FlxObject fb2,hx::Null< bool >  __o_centerX,hx::Null< bool >  __o_centerY){
bool centerX = __o_centerX.Default(true);
bool centerY = __o_centerY.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_390_center)
            	HX_STACK_ARG(fb1,"fb1")
            	HX_STACK_ARG(fb2,"fb2")
            	HX_STACK_ARG(centerX,"centerX")
            	HX_STACK_ARG(centerY,"centerY")
HXLINE( 391)		if (centerX) {
HXLINE( 391)			HX_VARI_NAME( Float,fb11,"fb1") = fb1->x;
HXDLIN( 391)			Float _hx_tmp = fb1->get_width();
HXDLIN( 391)			fb2->set_x((fb11 + ((Float)(_hx_tmp - fb2->get_width()) / (Float)(int)2)));
            		}
HXLINE( 392)		if (centerY) {
HXLINE( 392)			HX_VARI_NAME( Float,fb12,"fb1") = fb1->y;
HXDLIN( 392)			Float _hx_tmp1 = fb1->get_height();
HXDLIN( 392)			fb2->set_y((fb12 + ((Float)(_hx_tmp1 - fb2->get_height()) / (Float)(int)2)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,center,(void))

bool U_obj::test_int(int i1,::String test,int i2){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_396_test_int)
            	HX_STACK_ARG(i1,"i1")
            	HX_STACK_ARG(test,"test")
            	HX_STACK_ARG(i2,"i2")
HXLINE( 396)		::String _hx_switch_0 = test;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE( 396)			return (i1 != i2);
HXDLIN( 396)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE( 396)			return (i1 < i2);
HXDLIN( 396)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE( 396)			return (i1 <= i2);
HXDLIN( 396)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE( 396)			return (i1 == i2);
HXDLIN( 396)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE( 396)			return (i1 > i2);
HXDLIN( 396)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE( 396)			return (i1 >= i2);
HXDLIN( 396)			goto _hx_goto_27;
            		}
            		/* default */{
HXLINE( 396)			return false;
            		}
            		_hx_goto_27:;
HXDLIN( 396)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,test_int,return )

bool U_obj::test_float(Float f1,::String test,int f2){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_408_test_float)
            	HX_STACK_ARG(f1,"f1")
            	HX_STACK_ARG(test,"test")
            	HX_STACK_ARG(f2,"f2")
HXLINE( 408)		::String _hx_switch_0 = test;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE( 408)			return (f1 != f2);
HXDLIN( 408)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE( 408)			return (f1 < f2);
HXDLIN( 408)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE( 408)			return (f1 <= f2);
HXDLIN( 408)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE( 408)			return (f1 == f2);
HXDLIN( 408)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE( 408)			return (f1 > f2);
HXDLIN( 408)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE( 408)			return (f1 >= f2);
HXDLIN( 408)			goto _hx_goto_29;
            		}
            		/* default */{
HXLINE( 408)			return false;
            		}
            		_hx_goto_29:;
HXDLIN( 408)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,test_float,return )

::String U_obj::padDigits(int i,int d,::String __o_padChar){
::String padChar = __o_padChar.Default(HX_HCSTRING("0","\x30","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_427_padDigits)
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(padChar,"padChar")
HXLINE( 428)		HX_VARI( Float,f) = i;
HXLINE( 429)		HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXLINE( 430)		HX_VARI( int,num_digits) = (int)0;
HXLINE( 431)		while((f >= (int)1)){
HXLINE( 432)			f = ((Float)f / (Float)(int)10);
HXLINE( 433)			num_digits = (num_digits + (int)1);
            		}
HXLINE( 436)		if ((i == (int)0)) {
HXLINE( 437)			num_digits = (int)1;
            		}
HXLINE( 440)		if ((num_digits < d)) {
HXLINE( 441)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 441)			HX_VARI( int,_g) = (d - num_digits);
HXDLIN( 441)			while((_g1 < _g)){
HXLINE( 441)				_g1 = (_g1 + (int)1);
HXLINE( 442)				str = (str + padChar);
            			}
            		}
HXLINE( 446)		return (str + ::Std_obj::string(i));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,padDigits,return )

 ::openfl::_legacy::geom::Point U_obj::conformToBounds( ::openfl::_legacy::geom::Point pt, ::Dynamic maxMin){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_450_conformToBounds)
            	HX_STACK_ARG(pt,"pt")
            	HX_STACK_ARG(maxMin,"maxMin")
HXLINE( 451)		if (hx::IsNotNull( maxMin )) {
HXLINE( 453)			if ((pt->x < ( (Float)(maxMin->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE( 453)				pt->x = ( (Float)(maxMin->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) );
            			}
HXLINE( 454)			if ((pt->y < ( (Float)(maxMin->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE( 454)				pt->y = ( (Float)(maxMin->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) );
            			}
HXLINE( 455)			if ((pt->x > ( (Float)(maxMin->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE( 455)				pt->x = ( (Float)(maxMin->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) );
            			}
HXLINE( 456)			if ((pt->x > ( (Float)(maxMin->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE( 456)				pt->y = ( (Float)(maxMin->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) );
            			}
            		}
HXLINE( 458)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,conformToBounds,return )

int U_obj::parseHex(::String str,hx::Null< bool >  __o_cast32Bit,hx::Null< bool >  __o_safe,hx::Null< int >  __o_default_color){
bool cast32Bit = __o_cast32Bit.Default(false);
bool safe = __o_safe.Default(false);
int default_color = __o_default_color.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_470_parseHex)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(cast32Bit,"cast32Bit")
            	HX_STACK_ARG(safe,"safe")
            	HX_STACK_ARG(default_color,"default_color")
HXLINE( 471)		HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXLINE( 472)		if (hx::IsNull( return_val )) {
HXLINE( 474)			if (!(safe)) {
HXLINE( 476)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str));
            			}
            			else {
HXLINE( 480)				return_val = default_color;
            			}
            		}
HXLINE( 483)		return return_val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,parseHex,return )

int U_obj::hexChar2dec(::String hex_char){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_493_hexChar2dec)
            	HX_STACK_ARG(hex_char,"hex_char")
HXLINE( 493)		::String _hx_switch_0 = hex_char;
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("10",df,2a,00,00)) ||  (_hx_switch_0==HX_("2",32,00,00,00)) ||  (_hx_switch_0==HX_("3",33,00,00,00)) ||  (_hx_switch_0==HX_("4",34,00,00,00)) ||  (_hx_switch_0==HX_("5",35,00,00,00)) ||  (_hx_switch_0==HX_("6",36,00,00,00)) ||  (_hx_switch_0==HX_("7",37,00,00,00)) ||  (_hx_switch_0==HX_("8",38,00,00,00)) ||  (_hx_switch_0==HX_("9",39,00,00,00)) ){
HXLINE( 493)			return ::Std_obj::parseInt(hex_char);
HXDLIN( 493)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("A",41,00,00,00)) ||  (_hx_switch_0==HX_("a",61,00,00,00)) ){
HXLINE( 493)			return (int)10;
HXDLIN( 493)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("C",43,00,00,00)) ||  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 493)			return (int)12;
HXDLIN( 493)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("E",45,00,00,00)) ||  (_hx_switch_0==HX_("e",65,00,00,00)) ){
HXLINE( 493)			return (int)14;
HXDLIN( 493)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("B",42,00,00,00)) ||  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 493)			return (int)11;
HXDLIN( 493)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("D",44,00,00,00)) ||  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 493)			return (int)13;
HXDLIN( 493)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("F",46,00,00,00)) ||  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 493)			return (int)15;
HXDLIN( 493)			goto _hx_goto_36;
            		}
            		/* default */{
HXLINE( 501)			HX_STACK_DO_THROW(((HX_("U.hexChar2dec() illegal char(",11,98,18,de) + hex_char) + HX_(")",29,00,00,00)));
            		}
            		_hx_goto_36:;
HXLINE( 493)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,hexChar2dec,return )

int U_obj::hex2dec(::String hex_str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_511_hex2dec)
            	HX_STACK_ARG(hex_str,"hex_str")
HXLINE( 513)		HX_VARI( int,place_mult) = (int)1;
HXLINE( 514)		HX_VARI( int,sum) = (int)0;
HXLINE( 515)		HX_VARI( int,i) = (hex_str.length - (int)1);
HXDLIN( 515)		while((i >= (int)0)){
HXLINE( 516)			HX_VARI( ::String,char_hex) = hex_str.substr(i,(int)1);
HXLINE( 517)			HX_VAR( int,char_int);
HXDLIN( 517)			::String _hx_switch_0 = char_hex;
            			if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("10",df,2a,00,00)) ||  (_hx_switch_0==HX_("2",32,00,00,00)) ||  (_hx_switch_0==HX_("3",33,00,00,00)) ||  (_hx_switch_0==HX_("4",34,00,00,00)) ||  (_hx_switch_0==HX_("5",35,00,00,00)) ||  (_hx_switch_0==HX_("6",36,00,00,00)) ||  (_hx_switch_0==HX_("7",37,00,00,00)) ||  (_hx_switch_0==HX_("8",38,00,00,00)) ||  (_hx_switch_0==HX_("9",39,00,00,00)) ){
HXLINE( 517)				char_int = ::Std_obj::parseInt(char_hex);
HXDLIN( 517)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("A",41,00,00,00)) ||  (_hx_switch_0==HX_("a",61,00,00,00)) ){
HXLINE( 517)				char_int = (int)10;
HXDLIN( 517)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("C",43,00,00,00)) ||  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 517)				char_int = (int)12;
HXDLIN( 517)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("E",45,00,00,00)) ||  (_hx_switch_0==HX_("e",65,00,00,00)) ){
HXLINE( 517)				char_int = (int)14;
HXDLIN( 517)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("B",42,00,00,00)) ||  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 517)				char_int = (int)11;
HXDLIN( 517)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("D",44,00,00,00)) ||  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 517)				char_int = (int)13;
HXDLIN( 517)				goto _hx_goto_39;
            			}
            			if (  (_hx_switch_0==HX_("F",46,00,00,00)) ||  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 517)				char_int = (int)15;
HXDLIN( 517)				goto _hx_goto_39;
            			}
            			/* default */{
HXLINE( 517)				HX_STACK_DO_THROW(((HX_("U.hexChar2dec() illegal char(",11,98,18,de) + char_hex) + HX_(")",29,00,00,00)));
            			}
            			_hx_goto_39:;
HXLINE( 518)			sum = (sum + (char_int * place_mult));
HXLINE( 519)			place_mult = (place_mult * (int)16);
HXLINE( 520)			i = (i - (int)1);
            		}
HXLINE( 522)		return sum;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,hex2dec,return )

::Array< int > U_obj::hex2rgb(int hex){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_532_hex2rgb)
            	HX_STACK_ARG(hex,"hex")
HXLINE( 532)		return ::Array_obj< int >::__new(3)->init(0,((int)((int)hex >> (int)(int)16) & (int)(int)255))->init(1,((int)((int)hex >> (int)(int)8) & (int)(int)255))->init(2,((int)hex & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,hex2rgb,return )

 ::flixel::math::FlxPoint U_obj::applyResize(Float resize_ratio,int resize_ratio_axis,Float w,Float h, ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_538_applyResize)
            	HX_STACK_ARG(resize_ratio,"resize_ratio")
            	HX_STACK_ARG(resize_ratio_axis,"resize_ratio_axis")
            	HX_STACK_ARG(w,"w")
            	HX_STACK_ARG(h,"h")
            	HX_STACK_ARG(pt,"pt")
HXLINE( 539)		if (hx::IsNull( pt )) {
HXLINE( 541)			pt =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 543)		if ((resize_ratio > (int)0)) {
HXLINE( 545)			if ((::Math_obj::abs((((Float)w / (Float)h) - resize_ratio)) > ((Float)0.0001))) {
HXLINE( 546)				if ((resize_ratio_axis == (int)1)) {
HXLINE( 548)					h = (w * ((Float)(int)1 / (Float)resize_ratio));
            				}
            				else {
HXLINE( 552)					w = (h * ((Float)(int)1 / (Float)resize_ratio));
            				}
            			}
            		}
HXLINE( 557)		if ((::Std_obj::_hx_int(w) < (int)1)) {
HXLINE( 558)			w = (int)1;
            		}
HXLINE( 561)		if ((::Std_obj::_hx_int(h) < (int)1)) {
HXLINE( 562)			h = (int)1;
            		}
HXLINE( 564)		pt->set(w,h);
HXLINE( 565)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(U_obj,applyResize,return )

int U_obj::rgb2hex(int r,int g,int b){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_577_rgb2hex)
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
HXLINE( 577)		return ((int)((int)((int)r << (int)(int)16) | (int)((int)g << (int)(int)8)) | (int)b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,rgb2hex,return )

int U_obj::interpolate(int hex1,int hex2,Float amt){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_588_interpolate)
            	HX_STACK_ARG(hex1,"hex1")
            	HX_STACK_ARG(hex2,"hex2")
            	HX_STACK_ARG(amt,"amt")
HXLINE( 589)		if ((amt < (int)0)) {
HXLINE( 589)			amt = (int)0;
            		}
            		else {
HXLINE( 589)			if ((amt > (int)1)) {
HXLINE( 589)				amt = (int)1;
            			}
            		}
HXLINE( 591)		HX_VARI( Float,a1) = ((int)1 - amt);
HXLINE( 601)		HX_VARI( int,c3r) = ::Std_obj::_hx_int(((((int)((int)hex1 >> (int)(int)16) & (int)(int)255) * a1) + (((int)((int)hex2 >> (int)(int)16) & (int)(int)255) * amt)));
HXLINE( 602)		HX_VARI( int,c3g) = ::Std_obj::_hx_int(((((int)((int)hex1 >> (int)(int)8) & (int)(int)255) * a1) + (((int)((int)hex2 >> (int)(int)8) & (int)(int)255) * amt)));
HXLINE( 605)		return ((int)((int)((int)c3r << (int)(int)16) | (int)((int)c3g << (int)(int)8)) | (int)::Std_obj::_hx_int(((((int)hex1 & (int)(int)255) * a1) + (((int)hex2 & (int)(int)255) * amt))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,interpolate,return )

::Array< ::Dynamic> U_obj::getLocList(int xmin,int ymin,int xmax,int ymax){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_624_getLocList)
            	HX_STACK_ARG(xmin,"xmin")
            	HX_STACK_ARG(ymin,"ymin")
            	HX_STACK_ARG(xmax,"xmax")
            	HX_STACK_ARG(ymax,"ymax")
HXLINE( 625)		HX_VARI( ::Array< ::Dynamic>,list) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 626)		{
HXLINE( 626)			HX_VARI( int,_g1) = ymin;
HXDLIN( 626)			HX_VARI( int,_g) = (ymax + (int)1);
HXDLIN( 626)			while((_g1 < _g)){
HXLINE( 626)				_g1 = (_g1 + (int)1);
HXDLIN( 626)				HX_VARI( int,yy) = (_g1 - (int)1);
HXLINE( 627)				{
HXLINE( 627)					HX_VARI( int,_g3) = xmin;
HXDLIN( 627)					HX_VARI( int,_g2) = (xmax + (int)1);
HXDLIN( 627)					while((_g3 < _g2)){
HXLINE( 627)						_g3 = (_g3 + (int)1);
HXLINE( 628)						HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((_g3 - (int)1),yy);
HXDLIN( 628)						point->_inPool = false;
HXDLIN( 628)						list->push(point);
            					}
            				}
            			}
            		}
HXLINE( 630)		return list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,getLocList,return )

void U_obj::disposeXML( ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_633_disposeXML)
            	HX_STACK_ARG(thing,"thing")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,disposeXML,(void))

 ::haxe::xml::Fast U_obj::copyFast( ::haxe::xml::Fast fast){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_648_copyFast)
            	HX_STACK_ARG(fast,"fast")
HXLINE( 648)		return  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,::Xml_obj::parse(::haxe::xml::Printer_obj::print(fast->x,null()))->firstElement());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copyFast,return )

 ::Xml U_obj::copyXml( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_652_copyXml)
            	HX_STACK_ARG(data,"data")
HXLINE( 652)		return ::Xml_obj::parse(::haxe::xml::Printer_obj::print(data,null()))->firstElement();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copyXml,return )

 ::Xml U_obj::readXml(::String path){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_656_readXml)
            	HX_STACK_ARG(path,"path")
HXLINE( 657)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 659)			return ::Xml_obj::parse(::sys::io::File_obj::getContent(path))->firstElement();
            		}
HXLINE( 661)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,readXml,return )

 ::haxe::xml::Fast U_obj::readFast(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_664_readFast)
            	HX_STACK_ARG(path,"path")
HXLINE( 665)		HX_VARI(  ::Xml,xml) = ::flixel::addons::ui::U_obj::readXml(path);
HXLINE( 666)		if (hx::IsNotNull( xml )) {
HXLINE( 667)			return  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,xml);
            		}
HXLINE( 669)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,readFast,return )

::String U_obj::fixSlash(::String path){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_673_fixSlash)
            	HX_STACK_ARG(path,"path")
HXLINE( 676)		while((path.indexOf(HX_("/",2f,00,00,00),null()) != (int)-1)){
HXLINE( 678)			path = ::StringTools_obj::replace(path,HX_("/",2f,00,00,00),HX_("\\",5c,00,00,00));
            		}
HXLINE( 680)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,fixSlash,return )

::String U_obj::endline(){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_688_endline)
HXLINE( 688)		return HX_("\r\n",5d,0b,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(U_obj,endline,return )

::String U_obj::slash(){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_697_slash)
HXLINE( 697)		return HX_("\\",5c,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(U_obj,slash,return )

void U_obj::writeXml( ::Xml data,::String path,hx::Null< bool >  __o_wrapData,hx::Null< bool >  __o_addHeader){
bool wrapData = __o_wrapData.Default(true);
bool addHeader = __o_addHeader.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_703_writeXml)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(wrapData,"wrapData")
            	HX_STACK_ARG(addHeader,"addHeader")
HXLINE( 706)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 708)			::sys::FileSystem_obj::deleteFile(path);
            		}
HXLINE( 711)		HX_VARI( ::String,xmlString) = HX_("",00,00,00,00);
HXLINE( 713)		HX_VARI(  ::sys::io::FileOutput,fout) = ::sys::io::File_obj::write(path,false);
HXLINE( 714)		if (addHeader) {
HXLINE( 715)			xmlString = HX_("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n",73,6f,3d,1e);
            		}
HXLINE( 717)		if (wrapData) {
HXLINE( 718)			xmlString = (xmlString + HX_("<data>\n",f2,bf,8c,e1));
            		}
HXLINE( 721)		xmlString = (xmlString + ::haxe::xml::Printer_obj::print(data,null()));
HXLINE( 723)		if (wrapData) {
HXLINE( 724)			xmlString = (xmlString + HX_("</data>",81,d9,55,5e));
            		}
HXLINE( 727)		fout->writeString(xmlString);
HXLINE( 728)		fout->close();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,writeXml,(void))

 ::Dynamic U_obj::getXML(::String str,::String __o_folder){
::String folder = __o_folder.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_732_getXML)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(folder,"folder")
HXLINE( 733)		HX_VARI( ::String,id) = str;
HXLINE( 734)		if ((folder != HX_("",00,00,00,00))) {
HXLINE( 735)			id = ((folder + HX_("/",2f,00,00,00)) + str);
            		}
HXLINE( 737)		return ::flixel::addons::ui::U_obj::xml(id,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,getXML,return )

 ::Dynamic U_obj::json(::String str,::String __o_extension,::String __o_dir){
::String extension = __o_extension.Default(HX_HCSTRING("json","\x28","\x42","\x68","\x46"));
::String dir = __o_dir.Default(HX_HCSTRING("assets/json/","\x3b","\xa3","\xbc","\x20"));
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_740_json)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(extension,"extension")
            	HX_STACK_ARG(dir,"dir")
HXLINE( 741)		HX_VARI( ::String,json_str) = ::openfl::_legacy::Assets_obj::getText((((dir + str) + HX_(".",2e,00,00,00)) + extension));
HXLINE( 742)		bool _hx_tmp;
HXDLIN( 742)		if ((json_str != HX_("",00,00,00,00))) {
HXLINE( 742)			_hx_tmp = hx::IsNotNull( json_str );
            		}
            		else {
HXLINE( 742)			_hx_tmp = false;
            		}
HXDLIN( 742)		if (_hx_tmp) {
HXLINE( 744)			return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,json_str)->parseRec();
            		}
HXLINE( 746)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,json,return )

 ::Dynamic U_obj::field( ::Dynamic object,::String field, ::Dynamic _default){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_749_field)
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(field,"field")
            	HX_STACK_ARG(_default,"_default")
HXLINE( 750)		if (hx::IsNull( object )) {
HXLINE( 750)			return null();
            		}
HXLINE( 751)		if (::Reflect_obj::hasField(object,field)) {
HXLINE( 752)			HX_VARI(  ::Dynamic,thing) = ::Reflect_obj::field(object,field);
HXLINE( 753)			if (hx::IsNull( thing )) {
HXLINE( 754)				return _default;
            			}
HXLINE( 756)			return thing;
            		}
HXLINE( 758)		return _default;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,field,return )

 ::Dynamic U_obj::xml(::String id,::String __o_extension,hx::Null< bool >  __o_getFast,::String __o_dir){
::String extension = __o_extension.Default(HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00"));
bool getFast = __o_getFast.Default(true);
::String dir = __o_dir.Default(HX_HCSTRING("assets/xml/","\xc4","\xee","\x51","\xbb"));
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_761_xml)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(extension,"extension")
            	HX_STACK_ARG(getFast,"getFast")
            	HX_STACK_ARG(dir,"dir")
HXLINE( 762)		bool _hx_tmp;
HXDLIN( 762)		if ((id.indexOf(HX_("raw:",52,55,a4,4b),null()) != (int)0)) {
HXLINE( 762)			_hx_tmp = (id.indexOf(HX_("RAW:",72,1d,65,36),null()) == (int)0);
            		}
            		else {
HXLINE( 762)			_hx_tmp = true;
            		}
HXDLIN( 762)		if (_hx_tmp) {
HXLINE( 764)			id = id.substr((int)4,(id.length - (int)4));
HXLINE( 765)			dir = HX_("",00,00,00,00);
            		}
HXLINE( 772)		if (!(::openfl::_legacy::Assets_obj::exists((((dir + id) + HX_(".",2e,00,00,00)) + extension),::openfl::_legacy::AssetType_obj::TEXT_dyn()))) {
HXLINE( 773)			return null();
            		}
HXLINE( 776)		HX_VARI( ::String,str) = ::openfl::_legacy::Assets_obj::getText((((dir + id) + HX_(".",2e,00,00,00)) + extension));
HXLINE( 777)		if (hx::IsNull( str )) {
HXLINE( 778)			return null();
            		}
HXLINE( 780)		HX_VARI(  ::Xml,the_xml) = ::Xml_obj::parse(str);
HXLINE( 781)		if (getFast) {
HXLINE( 783)			return  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,the_xml->firstElement());
            		}
            		else {
HXLINE( 785)			return the_xml->firstElement();
            		}
HXLINE( 781)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml,return )

void U_obj::clearArraySoft(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_797_clearArraySoft)
            	HX_STACK_ARG(array,"array")
HXLINE( 798)		if (hx::IsNull( array )) {
HXLINE( 798)			return;
            		}
HXLINE( 799)		HX_VARI( int,i) = (array->get_length() - (int)1);
HXDLIN( 799)		while((i >= (int)0)){
HXLINE( 800)			array->set(i,null());
HXLINE( 801)			array->splice(i,(int)1);
HXLINE( 802)			i = (i - (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,clearArraySoft,(void))

void U_obj::clearArray(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_811_clearArray)
            	HX_STACK_ARG(array,"array")
HXLINE( 812)		if (hx::IsNull( array )) {
HXLINE( 812)			return;
            		}
HXLINE( 813)		HX_VARI( int,i) = (array->get_length() - (int)1);
HXDLIN( 813)		while((i >= (int)0)){
HXLINE( 814)			::flixel::addons::ui::U_obj::destroyThing(array->__get(i));
HXLINE( 815)			array->set(i,null());
HXLINE( 816)			array->splice(i,(int)1);
HXLINE( 817)			i = (i - (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,clearArray,(void))

void U_obj::destroyThing( ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_821_destroyThing)
            	HX_STACK_ARG(thing,"thing")
HXLINE( 822)		if (hx::IsNull( thing )) {
HXLINE( 822)			return;
            		}
HXLINE( 824)		if (::Std_obj::is(thing,hx::ArrayBase::__mClass)) {
HXLINE( 825)			::flixel::addons::ui::U_obj::clearArray(( (::cpp::VirtualArray)(thing) ));
            		}
            		else {
HXLINE( 826)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::util::IFlxDestroyable >())) {
HXLINE( 827)				HX_VARI( ::Dynamic,idstr) = thing;
HXLINE( 828)				::flixel::util::IFlxDestroyable_obj::destroy(idstr);
HXLINE( 829)				idstr = null();
            			}
            			else {
HXLINE( 830)				if (::Std_obj::is(thing,hx::ClassOf< ::flixel::FlxBasic >())) {
HXLINE( 831)					HX_VARI(  ::flixel::FlxBasic,fb) = hx::TCast<  ::flixel::FlxBasic >::cast(thing);
HXLINE( 832)					fb->destroy();
HXLINE( 833)					fb = null();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,destroyThing,(void))

::String U_obj::fontStr(::String str,::String __o_style){
::String style = __o_style.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_840_fontStr)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(style,"style")
HXLINE( 840)		HX_VARI_NAME( ::String,style1,"style") = style;
HXDLIN( 840)		style1 = style.toLowerCase();
HXDLIN( 840)		HX_VARI( ::String,suffix) = HX_("",00,00,00,00);
HXDLIN( 840)		::String _hx_switch_0 = style1;
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 840)			suffix = HX_("b",62,00,00,00);
HXDLIN( 840)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 840)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 840)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 840)			suffix = HX_("i",69,00,00,00);
HXDLIN( 840)			goto _hx_goto_67;
            		}
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 840)			suffix = HX_("",00,00,00,00);
HXDLIN( 840)			goto _hx_goto_67;
            		}
            		_hx_goto_67:;
HXDLIN( 840)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != (int)0)) {
HXLINE( 840)			return ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXLINE( 840)			return (str + suffix);
            		}
HXDLIN( 840)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,fontStr,return )

::String U_obj::font(::String str,::String __o_style,::String __o_extension){
::String style = __o_style.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String extension = __o_extension.Default(HX_HCSTRING(".ttf","\x78","\x3b","\xc0","\x1e"));
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_844_font)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(style,"style")
            	HX_STACK_ARG(extension,"extension")
HXLINE( 845)		HX_VARI( ::String,ostr) = str;
HXLINE( 846)		HX_VARI_NAME( ::String,style1,"style") = style;
HXDLIN( 846)		style1 = style.toLowerCase();
HXDLIN( 846)		HX_VARI( ::String,suffix) = HX_("",00,00,00,00);
HXDLIN( 846)		::String _hx_switch_0 = style1;
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 846)			suffix = HX_("b",62,00,00,00);
HXDLIN( 846)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 846)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 846)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 846)			suffix = HX_("i",69,00,00,00);
HXDLIN( 846)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 846)			suffix = HX_("",00,00,00,00);
HXDLIN( 846)			goto _hx_goto_69;
            		}
            		_hx_goto_69:;
HXDLIN( 846)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != (int)0)) {
HXLINE( 846)			str = ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXLINE( 846)			str = (str + suffix);
            		}
HXLINE( 847)		if ((str.indexOf(extension,null()) == (int)-1)) {
HXLINE( 849)			str = (str + extension);
            		}
HXLINE( 857)		bool _hx_tmp;
HXDLIN( 857)		if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::FONT_dyn()))) {
HXLINE( 857)			_hx_tmp = (extension == HX_(".ttf",78,3b,c0,1e));
            		}
            		else {
HXLINE( 857)			_hx_tmp = false;
            		}
HXDLIN( 857)		if (_hx_tmp) {
HXLINE( 859)			HX_VARI( ::String,alt) = ::flixel::addons::ui::U_obj::font(ostr,style,HX_(".otf",33,70,bc,1e));
HXLINE( 860)			if (::openfl::_legacy::Assets_obj::exists(alt,::openfl::_legacy::AssetType_obj::FONT_dyn())) {
HXLINE( 862)				return alt;
            			}
            		}
HXLINE( 866)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,font,return )

::String U_obj::_font(::String str,::String __o_style){
::String style = __o_style.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_871__font)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(style,"style")
HXLINE( 872)		style = style.toLowerCase();
HXLINE( 873)		HX_VARI( ::String,suffix) = HX_("",00,00,00,00);
HXLINE( 874)		::String _hx_switch_0 = style;
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE( 876)			suffix = HX_("b",62,00,00,00);
HXDLIN( 876)			goto _hx_goto_71;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE( 878)			suffix = HX_("z",7a,00,00,00);
HXDLIN( 878)			goto _hx_goto_71;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE( 877)			suffix = HX_("i",69,00,00,00);
HXDLIN( 877)			goto _hx_goto_71;
            		}
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE( 875)			suffix = HX_("",00,00,00,00);
HXDLIN( 875)			goto _hx_goto_71;
            		}
            		_hx_goto_71:;
HXLINE( 881)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != (int)0)) {
HXLINE( 882)			return ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
HXLINE( 884)		return (str + suffix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,_font,return )

 ::flixel::addons::ui::FlxUISprite U_obj::fsx( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_888_fsx)
            	HX_STACK_ARG(data,"data")
HXLINE( 888)		return  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,data);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,fsx,return )

 ::flixel::FlxSprite U_obj::fs( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_892_fs)
            	HX_STACK_ARG(data,"data")
HXLINE( 892)		return  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,data);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,fs,return )

::String U_obj::FU(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_902_FU)
            	HX_STACK_ARG(str,"str")
HXLINE( 902)		::String _hx_tmp = str.substr((int)0,(int)1).toUpperCase();
HXDLIN( 902)		return (_hx_tmp + str.substr((int)1,(str.length - (int)1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FU,return )

::String U_obj::FUL(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_912_FUL)
            	HX_STACK_ARG(str,"str")
HXLINE( 912)		::String _hx_tmp = str.substr((int)0,(int)1).toUpperCase();
HXDLIN( 912)		return (_hx_tmp + str.substr((int)1,(str.length - (int)1)).toLowerCase());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FUL,return )

 ::openfl::_legacy::display::BitmapData U_obj::getBmp( ::Dynamic asset){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_916_getBmp)
            	HX_STACK_ARG(asset,"asset")
HXLINE( 917)		HX_VARI( ::String,str) = null();
HXLINE( 918)		if (::Std_obj::is(asset,hx::ClassOf< ::String >())) {
HXLINE( 920)			str = ( (::String)(asset) );
            		}
            		else {
HXLINE( 922)			if (::Std_obj::is(asset,hx::ClassOf< ::flixel::graphics::FlxGraphic >())) {
HXLINE( 925)				str = ( ( ::flixel::graphics::FlxGraphic)(asset) )->key;
            			}
            			else {
HXLINE( 927)				if (::Std_obj::is(asset,hx::ClassOf< ::openfl::_legacy::display::BitmapData >())) {
HXLINE( 930)					return ( ( ::openfl::_legacy::display::BitmapData)(asset) );
            				}
            			}
            		}
HXLINE( 932)		if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,str)) ) )) {
HXLINE( 934)			HX_VARI(  ::flixel::graphics::FlxGraphic,cg) = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,str)) );
HXLINE( 935)			if (hx::IsNotNull( cg->bitmap )) {
HXLINE( 937)				return cg->bitmap;
            			}
            		}
HXLINE( 940)		return ::openfl::_legacy::Assets_obj::getBitmapData(str,false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,getBmp,return )

bool U_obj::checkHaxedef(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_943_checkHaxedef)
            	HX_STACK_ARG(str,"str")
HXLINE( 944)		str = str.toLowerCase();
HXLINE( 945)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("android",2f,9b,a4,9c)) ){
HXLINE( 974)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("console-pc",69,0c,13,e9)) ||  (_hx_switch_0==HX_("console_pc",1b,fd,38,e9)) ){
HXLINE(1020)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("cpp",23,81,4b,00)) ){
HXLINE( 948)			return true;
HXDLIN( 948)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("demo",23,59,66,42)) ){
HXLINE(1006)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("desktop",dc,c5,94,1e)) ){
HXLINE( 968)			return true;
HXDLIN( 968)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("flash",b0,35,8c,02)) ){
HXLINE( 986)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("html5",6a,28,ac,2e)) ){
HXLINE( 990)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("ios",cd,0d,50,00)) ){
HXLINE( 978)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("js",c9,5c,00,00)) ){
HXLINE( 994)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("legacy",49,7a,62,9a)) ||  (_hx_switch_0==HX_("lime_legacy",73,b1,ea,a6)) ){
HXLINE(1018)			return true;
HXDLIN(1018)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("lime_next",9d,bd,4b,86)) ||  (_hx_switch_0==HX_("next",f3,84,02,49)) ){
HXLINE(1015)			return false;
HXDLIN(1015)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("linux",f4,eb,01,75)) ){
HXLINE( 962)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("mac",8f,0a,53,00)) ){
HXLINE( 958)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("mobile",62,ac,77,bf)) ){
HXLINE( 970)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("neko",9b,79,02,49)) ){
HXLINE( 950)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("ps3",d0,60,55,00)) ){
HXLINE(1028)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("ps4",d1,60,55,00)) ){
HXLINE(1024)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("sys",0d,ad,57,00)) ){
HXLINE(1004)			return true;
HXDLIN(1004)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("tvos",26,ab,06,4d)) ){
HXLINE( 982)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("vita",60,3f,4f,4e)) ){
HXLINE(1032)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("web",94,a4,5a,00)) ){
HXLINE( 998)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("wiiu",7e,6c,f8,4e)) ){
HXLINE(1036)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("windows",83,de,74,e8)) ){
HXLINE( 956)			return true;
HXDLIN( 956)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("xbox1",3e,28,31,59)) ){
HXLINE(1040)			goto _hx_goto_78;
            		}
            		_hx_goto_78:;
HXLINE(1046)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,checkHaxedef,return )

::cpp::VirtualArray U_obj::copy_shallow_arr(::cpp::VirtualArray src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1049_copy_shallow_arr)
            	HX_STACK_ARG(src,"src")
HXLINE(1050)		if (hx::IsNull( src )) {
HXLINE(1050)			return null();
            		}
HXLINE(1051)		HX_VARI( ::cpp::VirtualArray,arr) = ::cpp::VirtualArray_obj::__new();
HXLINE(1053)		if (hx::IsNull( src )) {
HXLINE(1054)			return arr;
            		}
HXLINE(1056)		{
HXLINE(1056)			HX_VARI( int,_g) = (int)0;
HXDLIN(1056)			while((_g < src->get_length())){
HXLINE(1056)				HX_VARI(  ::Dynamic,thing) = src->__get(_g);
HXDLIN(1056)				_g = (_g + (int)1);
HXLINE(1057)				arr->push(thing);
            			}
            		}
HXLINE(1059)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_shallow_arr,return )

::Array< ::Dynamic> U_obj::copy_arr_arr_i(::Array< ::Dynamic> src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1062_copy_arr_arr_i)
            	HX_STACK_ARG(src,"src")
HXLINE(1063)		if (hx::IsNull( src )) {
HXLINE(1063)			return null();
            		}
HXLINE(1064)		HX_VARI( ::Array< ::Dynamic>,arrarr) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1065)		{
HXLINE(1065)			HX_VARI( int,_g) = (int)0;
HXDLIN(1065)			while((_g < src->length)){
HXLINE(1065)				HX_VARI( ::Array< int >,arri) = src->__get(_g).StaticCast< ::Array< int > >();
HXDLIN(1065)				_g = (_g + (int)1);
HXLINE(1066)				HX_VARI( ::Array< int >,temp) = ::Array_obj< int >::__new(0);
HXLINE(1067)				{
HXLINE(1067)					HX_VARI( int,_g1) = (int)0;
HXDLIN(1067)					while((_g1 < arri->length)){
HXLINE(1067)						HX_VARI( int,i) = arri->__get(_g1);
HXDLIN(1067)						_g1 = (_g1 + (int)1);
HXLINE(1068)						temp->push(i);
            					}
            				}
HXLINE(1070)				arrarr->push(temp);
            			}
            		}
HXLINE(1072)		return arrarr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_arr_arr_i,return )

::Array< int > U_obj::copy_shallow_arr_i(::Array< int > src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1075_copy_shallow_arr_i)
            	HX_STACK_ARG(src,"src")
HXLINE(1076)		if (hx::IsNull( src )) {
HXLINE(1076)			return null();
            		}
HXLINE(1077)		HX_VARI( ::Array< int >,arr) = ::Array_obj< int >::__new();
HXLINE(1079)		{
HXLINE(1079)			HX_VARI( int,_g) = (int)0;
HXDLIN(1079)			while((_g < src->length)){
HXLINE(1079)				HX_VARI( int,thing) = src->__get(_g);
HXDLIN(1079)				_g = (_g + (int)1);
HXLINE(1080)				arr->push(thing);
            			}
            		}
HXLINE(1082)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_shallow_arr_i,return )

::Array< ::String > U_obj::copy_shallow_arr_str(::Array< ::String > src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1085_copy_shallow_arr_str)
            	HX_STACK_ARG(src,"src")
HXLINE(1086)		if (hx::IsNull( src )) {
HXLINE(1086)			return null();
            		}
HXLINE(1087)		HX_VARI( ::Array< ::String >,arr) = ::Array_obj< ::String >::__new();
HXLINE(1089)		{
HXLINE(1089)			HX_VARI( int,_g) = (int)0;
HXDLIN(1089)			while((_g < src->length)){
HXLINE(1089)				HX_VARI( ::String,thing) = src->__get(_g);
HXDLIN(1089)				_g = (_g + (int)1);
HXLINE(1090)				arr->push(thing);
            			}
            		}
HXLINE(1092)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_shallow_arr_str,return )

::String U_obj::FU_(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1095_FU_)
            	HX_STACK_ARG(str,"str")
HXLINE(1096)		HX_VARI( ::Array< ::String >,arr) = str.split(HX_(" ",20,00,00,00));
HXLINE(1097)		HX_VARI_NAME( ::String,str1,"str") = HX_("",00,00,00,00);
HXLINE(1098)		{
HXLINE(1098)			HX_VARI( int,_g1) = (int)0;
HXDLIN(1098)			HX_VARI( int,_g) = arr->length;
HXDLIN(1098)			while((_g1 < _g)){
HXLINE(1098)				_g1 = (_g1 + (int)1);
HXDLIN(1098)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE(1099)				str1 = (str1 + ::flixel::addons::ui::U_obj::FU(arr->__get(i)));
HXLINE(1100)				if ((i != (arr->length - (int)1))) {
HXLINE(1101)					str1 = (str1 + HX_(" ",20,00,00,00));
            				}
            			}
            		}
HXLINE(1104)		return str1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FU_,return )

 ::openfl::_legacy::display::BlendMode U_obj::xml_blend( ::Xml x,::String att){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1109_xml_blend)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(att,"att")
HXLINE(1109)		return ::flixel::addons::ui::U_obj::blendModeFromString(::flixel::addons::ui::U_obj::xml_str(x,att,true,HX_("normal",27,72,69,30)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,xml_blend,return )

 ::openfl::_legacy::display::BlendMode U_obj::blendModeFromString(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1113_blendModeFromString)
            	HX_STACK_ARG(str,"str")
HXLINE(1114)		str = str.toLowerCase();
HXLINE(1115)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::ADD_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("alpha",5e,a7,96,21)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::ALPHA_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("darken",5f,36,3a,21)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::DARKEN_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("difference",fd,9b,91,46)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::DIFFERENCE_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("erase",e6,e8,1c,73)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::ERASE_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("hardlight",0b,6e,6b,53)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::HARDLIGHT_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("invert",16,e7,d8,9f)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::INVERT_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("layer",d1,81,c0,6f)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::LAYER_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("lighten",bf,4a,e3,19)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::LIGHTEN_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("multiply",24,e2,8c,9a)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::MULTIPLY_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::NORMAL_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("overlay",90,43,10,a9)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::OVERLAY_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("screen",6c,3b,5d,47)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::SCREEN_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::SUBTRACT_dyn();
HXDLIN(1115)			goto _hx_goto_92;
            		}
            		/* default */{
HXLINE(1115)			return ::openfl::_legacy::display::BlendMode_obj::NORMAL_dyn();
            		}
            		_hx_goto_92:;
HXDLIN(1115)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,blendModeFromString,return )

 ::openfl::_legacy::display::BitmapData U_obj::scaleTileBmp(::String orig_id,Float scale,int origW,int origH,hx::Null< int >  __o_W,hx::Null< int >  __o_H,hx::Null< bool >  __o_smooth){
int W = __o_W.Default(-1);
int H = __o_H.Default(-1);
bool smooth = __o_smooth.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1152_scaleTileBmp)
            	HX_STACK_ARG(orig_id,"orig_id")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(origW,"origW")
            	HX_STACK_ARG(origH,"origH")
            	HX_STACK_ARG(W,"W")
            	HX_STACK_ARG(H,"H")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE(1153)		HX_VARI(  ::openfl::_legacy::display::BitmapData,orig) = ::openfl::_legacy::Assets_obj::getBitmapData(orig_id,false);
HXLINE(1154)		if (hx::IsNull( orig )) {
HXLINE(1155)			if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,orig_id)) ) )) {
HXLINE(1156)				orig = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,orig_id)) )->bitmap;
            			}
            			else {
HXLINE(1158)				return null();
            			}
            		}
HXLINE(1162)		HX_VARI( int,widthInTiles) = ::Std_obj::_hx_int(((Float)orig->get_width() / (Float)origW));
HXLINE(1163)		HX_VARI( int,heightInTiles) = ::Std_obj::_hx_int(((Float)orig->get_height() / (Float)origH));
HXLINE(1166)		if ((W == (int)-1)) {
HXLINE(1168)			W = ::Std_obj::_hx_int((origW * scale));
            		}
HXLINE(1170)		if ((H == (int)-1)) {
HXLINE(1172)			H = ::Std_obj::_hx_int((origH * scale));
HXLINE(1173)			scale = ((Float)H / (Float)origH);
            		}
HXLINE(1176)		if ((::Math_obj::abs((scale - ((Float)1.0))) > ((Float)0.001))) {
HXLINE(1178)			HX_VARI( int,scaled) = ::Std_obj::_hx_int((W * widthInTiles));
HXDLIN(1178)			HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,scaled1,"scaled") =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,scaled,::Std_obj::_hx_int((H * heightInTiles)),true,(int)0,null());
HXLINE(1179)			HX_VARI(  ::openfl::_legacy::geom::Rectangle,rect) =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1180)			HX_VARI(  ::openfl::_legacy::geom::Point,pt) =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1181)			HX_VARI(  ::openfl::_legacy::geom::Matrix,matrix) =  ::openfl::_legacy::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(1182)			matrix->scale(scale,scale);
HXLINE(1183)			{
HXLINE(1183)				HX_VARI( int,_g1) = (int)0;
HXDLIN(1183)				while((_g1 < heightInTiles)){
HXLINE(1183)					_g1 = (_g1 + (int)1);
HXDLIN(1183)					HX_VARI( int,tiley) = (_g1 - (int)1);
HXLINE(1185)					{
HXLINE(1185)						HX_VARI( int,_g3) = (int)0;
HXDLIN(1185)						while((_g3 < widthInTiles)){
HXLINE(1185)							_g3 = (_g3 + (int)1);
HXDLIN(1185)							HX_VARI( int,tilex) = (_g3 - (int)1);
HXLINE(1187)							HX_VARI(  ::openfl::_legacy::display::BitmapData,tile) =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,origW,origH,true,(int)0,null());
HXLINE(1188)							rect->setTo((tilex * origW),(tiley * origH),origW,origH);
HXLINE(1189)							pt->setTo((int)0,(int)0);
HXLINE(1190)							tile->copyPixels(orig,rect,pt,null(),null(),null());
HXLINE(1192)							HX_VARI(  ::openfl::_legacy::display::BitmapData,scaleTile) =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,W,H,true,(int)0,null());
HXLINE(1193)							scaleTile->draw(tile,matrix,null(),null(),null(),smooth);
HXLINE(1194)							pt->setTo((tilex * W),(tiley * H));
HXLINE(1195)							scaled1->copyPixels(scaleTile,scaleTile->get_rect(),pt,null(),null(),null());
            						}
            					}
            				}
            			}
HXLINE(1198)			return scaled1;
            		}
            		else {
HXLINE(1202)			return orig->clone();
            		}
HXLINE(1176)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(U_obj,scaleTileBmp,return )

::String U_obj::scaleAndStoreTileset(::String orig_id,Float scale,int OrigW,int OrigH,hx::Null< int >  __o_TileW,hx::Null< int >  __o_TileH,hx::Null< bool >  __o_Smooth){
int TileW = __o_TileW.Default(-1);
int TileH = __o_TileH.Default(-1);
bool Smooth = __o_Smooth.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1220_scaleAndStoreTileset)
            	HX_STACK_ARG(orig_id,"orig_id")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(OrigW,"OrigW")
            	HX_STACK_ARG(OrigH,"OrigH")
            	HX_STACK_ARG(TileW,"TileW")
            	HX_STACK_ARG(TileH,"TileH")
            	HX_STACK_ARG(Smooth,"Smooth")
HXLINE(1221)		HX_VARI( ::String,assetKey) = ((orig_id + HX_("_x",39,53,00,00)) + scale);
HXLINE(1223)		if ((hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,assetKey)) ) ) == false)) {
HXLINE(1225)			HX_VARI(  ::openfl::_legacy::display::BitmapData,bmp) = ::flixel::addons::ui::U_obj::scaleTileBmp(orig_id,scale,OrigW,OrigH,TileW,TileH,Smooth);
HXLINE(1226)			::flixel::FlxG_obj::bitmap->add(bmp,false,assetKey);
            		}
HXLINE(1229)		return assetKey;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(U_obj,scaleAndStoreTileset,return )

::String U_obj::loadScaledImage(::String src,Float W,Float H,hx::Null< bool >  __o_smooth){
bool smooth = __o_smooth.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1241_loadScaledImage)
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(W,"W")
            	HX_STACK_ARG(H,"H")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE(1242)		HX_VARI( ::String,bmpSrc) = ::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null());
HXLINE(1243)		HX_VARI(  ::openfl::_legacy::display::BitmapData,testBmp) = ::openfl::_legacy::Assets_obj::getBitmapData(bmpSrc,false);
HXLINE(1245)		if (hx::IsNotNull( testBmp )) {
HXLINE(1247)			if ((W < (int)0)) {
HXLINE(1249)				W = testBmp->get_width();
            			}
HXLINE(1251)			if ((H < (int)0)) {
HXLINE(1253)				H = testBmp->get_height();
            			}
HXLINE(1256)			HX_VARI( Float,diff) = ::Math_obj::abs((W - testBmp->get_width()));
HXLINE(1259)			if (((diff + ::Math_obj::abs((H - testBmp->get_height()))) > ((Float)0.01))) {
HXLINE(1261)				HX_VARI( ::String,scaleKey) = (((bmpSrc + HX_("_",5f,00,00,00)) + ::Std_obj::_hx_int(W)) + HX_("x",78,00,00,00));
HXDLIN(1261)				HX_VARI_NAME( ::String,scaleKey1,"scaleKey") = (scaleKey + ::Std_obj::_hx_int(H));
HXLINE(1264)				if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,scaleKey1)) ) )) {
HXLINE(1266)					HX_VARI( int,scaledBmp) = ::Std_obj::_hx_int(W);
HXDLIN(1266)					HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,scaledBmp1,"scaledBmp") =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,scaledBmp,::Std_obj::_hx_int(H),true,(int)0,null());
HXLINE(1268)					HX_VARI(  ::openfl::_legacy::geom::Matrix,m) = ::flixel::addons::ui::U_obj::getMatrix();
HXLINE(1269)					m->identity();
HXLINE(1270)					Float _hx_tmp = ((Float)W / (Float)testBmp->get_width());
HXDLIN(1270)					m->scale(_hx_tmp,((Float)H / (Float)testBmp->get_height()));
HXLINE(1272)					scaledBmp1->draw(testBmp,m,null(),null(),null(),smooth);
HXLINE(1274)					::flixel::FlxG_obj::bitmap->add(scaledBmp1,true,scaleKey1);
            				}
HXLINE(1276)				return scaleKey1;
            			}
            			else {
HXLINE(1280)				return bmpSrc;
            			}
            		}
HXLINE(1283)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,loadScaledImage,return )

::String U_obj::loadImageScaleToHeight(::String src,Float Height,hx::Null< bool >  __o_Smooth,hx::Null< bool >  __o_checkFlxBitmap){
bool Smooth = __o_Smooth.Default(true);
bool checkFlxBitmap = __o_checkFlxBitmap.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1287_loadImageScaleToHeight)
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Smooth,"Smooth")
            	HX_STACK_ARG(checkFlxBitmap,"checkFlxBitmap")
HXLINE(1288)		HX_VARI( ::String,bmpSrc) = ::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null());
HXLINE(1289)		HX_VARI(  ::openfl::_legacy::display::BitmapData,testBmp) = null();
HXLINE(1291)		if (!(checkFlxBitmap)) {
HXLINE(1293)			testBmp = ::openfl::_legacy::Assets_obj::getBitmapData(bmpSrc,false);
            		}
            		else {
HXLINE(1297)			HX_VARI(  ::flixel::graphics::FlxGraphic,flximg) = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,bmpSrc)) );
HXLINE(1298)			if (hx::IsNotNull( flximg )) {
HXLINE(1298)				testBmp = flximg->bitmap;
            			}
            			else {
HXLINE(1298)				testBmp = null();
            			}
            		}
HXLINE(1301)		HX_VAR( Float,ratio);
HXDLIN(1301)		if (hx::IsNotNull( testBmp )) {
HXLINE(1301)			ratio = ((Float)Height / (Float)testBmp->get_height());
            		}
            		else {
HXLINE(1301)			ratio = ((Float)1.0);
            		}
HXLINE(1302)		return ::flixel::addons::ui::U_obj::loadMonoScaledImage(bmpSrc,ratio,Smooth,checkFlxBitmap,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,loadImageScaleToHeight,return )

::String U_obj::loadMonoScaledImage(::String src,Float Scale,hx::Null< bool >  __o_smooth,hx::Null< bool >  __o_checkFlxBitmap,hx::Null< bool >  __o_fixAlphaChannel){
bool smooth = __o_smooth.Default(true);
bool checkFlxBitmap = __o_checkFlxBitmap.Default(false);
bool fixAlphaChannel = __o_fixAlphaChannel.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1315_loadMonoScaledImage)
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(Scale,"Scale")
            	HX_STACK_ARG(smooth,"smooth")
            	HX_STACK_ARG(checkFlxBitmap,"checkFlxBitmap")
            	HX_STACK_ARG(fixAlphaChannel,"fixAlphaChannel")
HXLINE(1316)		HX_VARI( ::String,bmpSrc) = ::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null());
HXLINE(1318)		HX_VARI(  ::openfl::_legacy::display::BitmapData,testBmp) = null();
HXLINE(1320)		if (!(checkFlxBitmap)) {
HXLINE(1322)			testBmp = ::openfl::_legacy::Assets_obj::getBitmapData(bmpSrc,false);
HXLINE(1323)			if (hx::IsNull( testBmp )) {
HXLINE(1325)				testBmp = ::openfl::_legacy::Assets_obj::getBitmapData(bmpSrc,true);
            			}
            		}
            		else {
HXLINE(1330)			HX_VARI(  ::flixel::graphics::FlxGraphic,flximg) = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,bmpSrc)) );
HXLINE(1331)			if (hx::IsNotNull( flximg )) {
HXLINE(1331)				testBmp = flximg->bitmap;
            			}
            			else {
HXLINE(1331)				testBmp = null();
            			}
            		}
HXLINE(1334)		if (hx::IsNotNull( testBmp )) {
HXLINE(1336)			if ((Scale <= (int)0)) {
HXLINE(1338)				HX_STACK_DO_THROW(((HX_("Error! Scale must be positive & > 0! (Scale was = ",a9,42,eb,3c) + Scale) + HX_(")",29,00,00,00)));
            			}
HXLINE(1342)			if ((::Math_obj::abs((Scale - ((Float)1.00))) > ((Float)0.001))) {
HXLINE(1344)				HX_VARI( ::String,scaleKey) = ((bmpSrc + HX_("_ScaleX",4d,70,31,df)) + Scale);
HXLINE(1347)				if (hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,scaleKey)) ) )) {
HXLINE(1349)					HX_VARI( int,scaledBmp) = ::Std_obj::_hx_int((testBmp->get_width() * Scale));
HXDLIN(1349)					HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,scaledBmp1,"scaledBmp") =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,scaledBmp,::Std_obj::_hx_int((testBmp->get_height() * Scale)),true,(int)0,null());
HXLINE(1351)					HX_VARI(  ::openfl::_legacy::geom::Matrix,m) = ::flixel::addons::ui::U_obj::getMatrix();
HXLINE(1352)					m->identity();
HXLINE(1353)					m->scale(Scale,Scale);
HXLINE(1354)					scaledBmp1->draw(testBmp,m,null(),null(),null(),smooth);
HXLINE(1356)					if (fixAlphaChannel) {
HXLINE(1359)						HX_VARI( int,black) = scaledBmp1->get_width();
HXDLIN(1359)						HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,black1,"black") =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,black,scaledBmp1->get_height(),true,(int)-16777216,null());
HXLINE(1361)						 ::openfl::_legacy::geom::Rectangle _hx_tmp = scaledBmp1->get_rect();
HXDLIN(1361)						black1->copyPixels(scaledBmp1,_hx_tmp, ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null()),null(),null(),true);
HXLINE(1363)						 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = scaledBmp1->get_rect();
HXDLIN(1363)						black1->copyChannel(scaledBmp1,_hx_tmp1, ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0),(int)8,(int)8);
HXLINE(1365)						HX_VARI(  ::openfl::_legacy::display::BitmapData,temp) = scaledBmp1;
HXLINE(1366)						scaledBmp1 = black1;
HXLINE(1367)						temp->dispose();
            					}
HXLINE(1370)					::flixel::FlxG_obj::bitmap->add(scaledBmp1,true,scaleKey);
            				}
HXLINE(1373)				return scaleKey;
            			}
            			else {
HXLINE(1377)				::flixel::FlxG_obj::bitmap->add(testBmp,false,bmpSrc);
HXLINE(1378)				return bmpSrc;
            			}
            		}
HXLINE(1382)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(U_obj,loadMonoScaledImage,return )

::String U_obj::gfx(::String id,::String __o_dir1,::String __o_dir2,::String __o_dir3,::String __o_dir4,hx::Null< bool >  __o_suppressError){
::String dir1 = __o_dir1.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String dir2 = __o_dir2.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String dir3 = __o_dir3.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String dir4 = __o_dir4.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
bool suppressError = __o_suppressError.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1386_gfx)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(dir1,"dir1")
            	HX_STACK_ARG(dir2,"dir2")
            	HX_STACK_ARG(dir3,"dir3")
            	HX_STACK_ARG(dir4,"dir4")
            	HX_STACK_ARG(suppressError,"suppressError")
HXLINE(1387)		if (hx::IsNotNull( id )) {
HXLINE(1388)			id = id.toLowerCase();
            		}
HXLINE(1391)		HX_VARI( ::String,prefix) = HX_("",00,00,00,00);
HXLINE(1393)		if ((dir1 != HX_("",00,00,00,00))) {
HXLINE(1394)			prefix = (dir1 + HX_("/",2f,00,00,00));
HXLINE(1395)			if ((dir2 != HX_("",00,00,00,00))) {
HXLINE(1396)				prefix = (prefix + (dir2 + HX_("/",2f,00,00,00)));
HXLINE(1397)				if ((dir3 != HX_("",00,00,00,00))) {
HXLINE(1398)					prefix = (prefix + (dir3 + HX_("/",2f,00,00,00)));
HXLINE(1399)					if ((dir4 != HX_("",00,00,00,00))) {
HXLINE(1400)						prefix = (prefix + (dir4 + HX_("/",2f,00,00,00)));
            					}
            				}
            			}
            		}
HXLINE(1406)		if ((prefix != HX_("",00,00,00,00))) {
HXLINE(1407)			id = (prefix + id);
            		}
HXLINE(1410)		if ((id.indexOf(HX_("raw:",52,55,a4,4b),null()) != (int)0)) {
HXLINE(1411)			id = ::StringTools_obj::replace(id,HX_("-",2d,00,00,00),HX_("_",5f,00,00,00));
            		}
HXLINE(1414)		return ::flixel::addons::ui::U_obj::get_gfx(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(U_obj,gfx,return )

::Array< int > U_obj::bmpToArrayIntLayer(int color_index, ::openfl::_legacy::display::BitmapData bd){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1439_bmpToArrayIntLayer)
            	HX_STACK_ARG(color_index,"color_index")
            	HX_STACK_ARG(bd,"bd")
HXLINE(1441)		HX_VAR( int,p);
HXLINE(1443)		HX_VARI( ::Array< int >,arr) = ::Array_obj< int >::__new(0);
HXLINE(1444)		HX_VARI( int,w) = bd->get_width();
HXLINE(1445)		HX_VARI( int,h) = bd->get_height();
HXLINE(1446)		{
HXLINE(1446)			HX_VARI( int,_g1) = (int)0;
HXDLIN(1446)			while((_g1 < h)){
HXLINE(1446)				_g1 = (_g1 + (int)1);
HXDLIN(1446)				HX_VARI( int,r) = (_g1 - (int)1);
HXLINE(1447)				{
HXLINE(1447)					HX_VARI( int,_g3) = (int)0;
HXDLIN(1447)					while((_g3 < w)){
HXLINE(1447)						_g3 = (_g3 + (int)1);
HXLINE(1449)						p = bd->getPixel((_g3 - (int)1),r);
HXLINE(1451)						if ((p == color_index)) {
HXLINE(1452)							p = (int)1;
            						}
            						else {
HXLINE(1454)							p = (int)0;
            						}
HXLINE(1458)						arr->push(p);
            					}
            				}
            			}
            		}
HXLINE(1461)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,bmpToArrayIntLayer,return )

::String U_obj::bmpToCSVLayer(int color_index, ::openfl::_legacy::display::BitmapData bd){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1474_bmpToCSVLayer)
            	HX_STACK_ARG(color_index,"color_index")
            	HX_STACK_ARG(bd,"bd")
HXLINE(1477)		HX_VAR( int,p);
HXLINE(1479)		HX_VARI( ::String,csv) = HX_("",00,00,00,00);
HXLINE(1480)		HX_VARI( int,w) = bd->get_width();
HXLINE(1481)		HX_VARI( int,h) = bd->get_height();
HXLINE(1482)		{
HXLINE(1482)			HX_VARI( int,_g1) = (int)0;
HXDLIN(1482)			while((_g1 < h)){
HXLINE(1482)				_g1 = (_g1 + (int)1);
HXDLIN(1482)				HX_VARI( int,r) = (_g1 - (int)1);
HXLINE(1483)				{
HXLINE(1483)					HX_VARI( int,_g3) = (int)0;
HXDLIN(1483)					while((_g3 < w)){
HXLINE(1483)						_g3 = (_g3 + (int)1);
HXDLIN(1483)						HX_VARI( int,c) = (_g3 - (int)1);
HXLINE(1485)						p = bd->getPixel(c,r);
HXLINE(1487)						if ((p == color_index)) {
HXLINE(1488)							p = (int)1;
            						}
            						else {
HXLINE(1490)							p = (int)0;
            						}
HXLINE(1494)						if ((c == (int)0)) {
HXLINE(1496)							if ((r == (int)0)) {
HXLINE(1497)								csv = (csv + p);
            							}
            							else {
HXLINE(1499)								csv = (csv + (HX_("\n",0a,00,00,00) + p));
            							}
            						}
            						else {
HXLINE(1503)							csv = (csv + (HX_(", ",74,26,00,00) + p));
            						}
            					}
            				}
            			}
            		}
HXLINE(1507)		return csv;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,bmpToCSVLayer,return )

::String U_obj::get_gfx(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1510_get_gfx)
            	HX_STACK_ARG(str,"str")
HXLINE(1511)		HX_VARI( ::String,return_str) = HX_("",00,00,00,00);
HXLINE(1513)		HX_VARI( ::String,suffix) = HX_("",00,00,00,00);
HXLINE(1516)		if ((str.indexOf(HX_(".jpg",73,a1,b8,1e),null()) != (int)-1)) {
HXLINE(1518)			suffix = HX_(".jpg",73,a1,b8,1e);
            		}
            		else {
HXLINE(1522)			suffix = HX_(".png",3b,2d,bd,1e);
            		}
HXLINE(1525)		bool _hx_tmp;
HXDLIN(1525)		bool _hx_tmp1;
HXDLIN(1525)		if (hx::IsNotNull( str )) {
HXLINE(1525)			_hx_tmp1 = (str.length > (int)4);
            		}
            		else {
HXLINE(1525)			_hx_tmp1 = false;
            		}
HXDLIN(1525)		if (_hx_tmp1) {
HXLINE(1525)			_hx_tmp = (str.indexOf(suffix,null()) != (int)-1);
            		}
            		else {
HXLINE(1525)			_hx_tmp = false;
            		}
HXDLIN(1525)		if (_hx_tmp) {
HXLINE(1527)			str = str.substr((int)0,(str.length - (int)4));
            		}
HXLINE(1529)		bool _hx_tmp2;
HXDLIN(1529)		if ((str.indexOf(HX_("raw:",52,55,a4,4b),null()) != (int)0)) {
HXLINE(1529)			_hx_tmp2 = (str.indexOf(HX_("RAW:",72,1d,65,36),null()) == (int)0);
            		}
            		else {
HXLINE(1529)			_hx_tmp2 = true;
            		}
HXDLIN(1529)		if (_hx_tmp2) {
HXLINE(1530)			str = str.substr((int)4,(str.length - (int)4));
HXLINE(1531)			return_str = (str + suffix);
            		}
HXLINE(1533)		bool _hx_tmp3;
HXDLIN(1533)		if (hx::IsNotNull( str )) {
HXLINE(1533)			_hx_tmp3 = (str.indexOf(HX_("assets/gfx/",e2,08,10,b0),null()) == (int)0);
            		}
            		else {
HXLINE(1533)			_hx_tmp3 = false;
            		}
HXDLIN(1533)		if (_hx_tmp3) {
HXLINE(1535)			return_str = (str + suffix);
            		}
HXLINE(1538)		if ((return_str == HX_("",00,00,00,00))) {
HXLINE(1540)			return_str = ((HX_("assets/gfx/",e2,08,10,b0) + str) + suffix);
            		}
HXLINE(1543)		if ((return_str.indexOf((HX_(".stitch.txt",a1,9d,fa,01) + suffix),null()) != (int)-1)) {
HXLINE(1545)			return_str = ::StringTools_obj::replace(return_str,(HX_(".stitch.txt",a1,9d,fa,01) + suffix),HX_(".stitch.txt",a1,9d,fa,01));
            		}
HXLINE(1548)		return return_str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,get_gfx,return )

::String U_obj::sfx(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1551_sfx)
            	HX_STACK_ARG(str,"str")
HXLINE(1558)		if ((str.indexOf(HX_("RAW:",72,1d,65,36),null()) == (int)0)) {
HXLINE(1559)			str = str.substr((int)4,(str.length - (int)4));
HXLINE(1560)			return (str + HX_(".ogg",e1,64,bc,1e));
            		}
HXLINE(1562)		return ((HX_("assets/sfx/",56,98,fe,b7) + str) + HX_(".ogg",e1,64,bc,1e));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,sfx,return )

::Array< int > U_obj::intStr_to_arr(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1571_intStr_to_arr)
            	HX_STACK_ARG(str,"str")
HXLINE(1572)		HX_VARI( ::Array< ::String >,arr) = str.split(HX_(",",2c,00,00,00));
HXLINE(1573)		HX_VARI( ::Array< int >,str_arr) = ::Array_obj< int >::__new();
HXLINE(1574)		{
HXLINE(1574)			HX_VARI( int,_g) = (int)0;
HXDLIN(1574)			while((_g < arr->length)){
HXLINE(1574)				HX_VARI( ::String,s) = arr->__get(_g);
HXDLIN(1574)				_g = (_g + (int)1);
HXLINE(1575)				if ((s.indexOf(HX_("-",2d,00,00,00),null()) == (int)-1)) {
HXLINE(1576)					str_arr->push(::Std_obj::parseInt(s));
            				}
            				else {
HXLINE(1578)					HX_VARI( ::Array< ::String >,range) = str.split(HX_("-",2d,00,00,00));
HXLINE(1579)					HX_VARI( int,lo) = (int)-1;
HXLINE(1580)					HX_VARI( int,hi) = (int)-1;
HXLINE(1581)					bool _hx_tmp;
HXDLIN(1581)					if (hx::IsNotNull( range )) {
HXLINE(1581)						_hx_tmp = (range->length == (int)2);
            					}
            					else {
HXLINE(1581)						_hx_tmp = false;
            					}
HXDLIN(1581)					if (_hx_tmp) {
HXLINE(1582)						lo = ::Std_obj::parseInt(range->__get((int)0));
HXLINE(1583)						hi = (::Std_obj::parseInt(range->__get((int)1)) + (int)1);
HXLINE(1584)						bool _hx_tmp1;
HXDLIN(1584)						if ((lo >= (int)0)) {
HXLINE(1584)							_hx_tmp1 = (hi > lo);
            						}
            						else {
HXLINE(1584)							_hx_tmp1 = false;
            						}
HXDLIN(1584)						if (_hx_tmp1) {
HXLINE(1585)							HX_VARI( int,_g2) = lo;
HXDLIN(1585)							HX_VARI( int,_g1) = hi;
HXDLIN(1585)							while((_g2 < _g1)){
HXLINE(1585)								_g2 = (_g2 + (int)1);
HXLINE(1586)								str_arr->push((_g2 - (int)1));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1592)		return str_arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,intStr_to_arr,return )

::Array< ::String > U_obj::intStr_to_arrStr(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1601_intStr_to_arrStr)
            	HX_STACK_ARG(str,"str")
HXLINE(1602)		HX_VARI( ::Array< ::String >,arr) = str.split(HX_(",",2c,00,00,00));
HXLINE(1603)		HX_VARI( ::Array< ::String >,str_arr) = ::Array_obj< ::String >::__new();
HXLINE(1604)		{
HXLINE(1604)			HX_VARI( int,_g) = (int)0;
HXDLIN(1604)			while((_g < arr->length)){
HXLINE(1604)				HX_VARI( ::String,s) = arr->__get(_g);
HXDLIN(1604)				_g = (_g + (int)1);
HXLINE(1605)				if ((s.indexOf(HX_("-",2d,00,00,00),null()) == (int)-1)) {
HXLINE(1606)					str_arr->push(::Std_obj::string(::Std_obj::parseInt(s)));
            				}
            				else {
HXLINE(1608)					HX_VARI( ::Array< ::String >,range) = str.split(HX_("-",2d,00,00,00));
HXLINE(1609)					HX_VARI( int,lo) = (int)-1;
HXLINE(1610)					HX_VARI( int,hi) = (int)-1;
HXLINE(1611)					bool _hx_tmp;
HXDLIN(1611)					if (hx::IsNotNull( range )) {
HXLINE(1611)						_hx_tmp = (range->length == (int)2);
            					}
            					else {
HXLINE(1611)						_hx_tmp = false;
            					}
HXDLIN(1611)					if (_hx_tmp) {
HXLINE(1612)						lo = ::Std_obj::parseInt(range->__get((int)0));
HXLINE(1613)						hi = (::Std_obj::parseInt(range->__get((int)1)) + (int)1);
HXLINE(1614)						bool _hx_tmp1;
HXDLIN(1614)						if ((lo >= (int)0)) {
HXLINE(1614)							_hx_tmp1 = (hi > lo);
            						}
            						else {
HXLINE(1614)							_hx_tmp1 = false;
            						}
HXDLIN(1614)						if (_hx_tmp1) {
HXLINE(1615)							HX_VARI( int,_g2) = lo;
HXDLIN(1615)							HX_VARI( int,_g1) = hi;
HXDLIN(1615)							while((_g2 < _g1)){
HXLINE(1615)								_g2 = (_g2 + (int)1);
HXLINE(1616)								str_arr->push(::Std_obj::string((_g2 - (int)1)));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1622)		return str_arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,intStr_to_arrStr,return )

::String U_obj::dirStr(int XX,int YY){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1625_dirStr)
            	HX_STACK_ARG(XX,"XX")
            	HX_STACK_ARG(YY,"YY")
HXLINE(1626)		HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXLINE(1627)		if ((XX == (int)0)) {
HXLINE(1628)			if ((YY == (int)-1)) {
HXLINE(1628)				str = HX_("N",4e,00,00,00);
            			}
            			else {
HXLINE(1629)				if ((YY == (int)1)) {
HXLINE(1629)					str = HX_("S",53,00,00,00);
            				}
            				else {
HXLINE(1630)					if ((YY == (int)0)) {
HXLINE(1630)						str = HX_("NONE",b8,da,ca,33);
            					}
            				}
            			}
            		}
            		else {
HXLINE(1631)			if ((XX == (int)1)) {
HXLINE(1632)				if ((YY == (int)-1)) {
HXLINE(1632)					str = HX_("NE",37,44,00,00);
            				}
            				else {
HXLINE(1633)					if ((YY == (int)1)) {
HXLINE(1633)						str = HX_("SE",92,48,00,00);
            					}
            					else {
HXLINE(1634)						if ((YY == (int)0)) {
HXLINE(1634)							str = HX_("E",45,00,00,00);
            						}
            					}
            				}
            			}
            			else {
HXLINE(1635)				if ((XX == (int)-1)) {
HXLINE(1636)					if ((YY == (int)-1)) {
HXLINE(1636)						str = HX_("NW",49,44,00,00);
            					}
            					else {
HXLINE(1637)						if ((YY == (int)1)) {
HXLINE(1637)							str = HX_("SW",a4,48,00,00);
            						}
            						else {
HXLINE(1638)							if ((YY == (int)0)) {
HXLINE(1638)								str = HX_("W",57,00,00,00);
            							}
            						}
            					}
            				}
            				else {
HXLINE(1640)					str = HX_("NONE",b8,da,ca,33);
            				}
            			}
            		}
HXLINE(1641)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,dirStr,return )

 ::flixel::math::FlxPoint U_obj::obj_direction( ::flixel::FlxObject a, ::flixel::FlxObject b){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1644_obj_direction)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(1645)		a->get_width();
HXLINE(1646)		a->get_height();
HXLINE(1648)		b->get_width();
HXLINE(1649)		b->get_height();
HXLINE(1651)		HX_VARI( Float,dx) = (a->x - b->x);
HXLINE(1652)		HX_VARI( Float,dy) = (a->y - b->y);
HXLINE(1654)		Float X = ::Std_obj::_hx_int(((Float)dx / (Float)::Math_obj::abs(dx)));
HXDLIN(1654)		Float Y = ::Std_obj::_hx_int(((Float)dy / (Float)::Math_obj::abs(dy)));
HXDLIN(1654)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(1654)		point->_inPool = false;
HXLINE(1655)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,obj_direction,return )

bool U_obj::circle_test(Float x1,Float y1,Float r1,Float x2,Float y2,Float r2){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1658_circle_test)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(r1,"r1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(r2,"r2")
HXLINE(1659)		HX_VARI( Float,dx) = (x1 - x2);
HXLINE(1660)		HX_VARI( Float,dy) = (y1 - y2);
HXLINE(1663)		return (((dx * dx) + (dy * dy)) <= ((r1 * r1) + (r2 * r2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(U_obj,circle_test,return )

bool U_obj::point_circle_test(Float x,Float y,Float cx,Float cy,Float r){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1666_point_circle_test)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(r,"r")
HXLINE(1667)		HX_VARI( Float,dx) = (x - cx);
HXLINE(1668)		HX_VARI( Float,dy) = (y - cy);
HXLINE(1670)		return (((dx * dx) + (dy * dy)) <= (r * r));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(U_obj,point_circle_test,return )

bool U_obj::aabb_test_mult( ::flixel::FlxObject a, ::flixel::FlxObject b,hx::Null< Float >  __o_multA,hx::Null< Float >  __o_multB){
Float multA = __o_multA.Default(1);
Float multB = __o_multB.Default(1);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1673_aabb_test_mult)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(multA,"multA")
            	HX_STACK_ARG(multB,"multB")
HXLINE(1674)		HX_VARI( Float,extra) = (a->get_width() * multA);
HXDLIN(1674)		HX_VARI( Float,diff) = ((Float)(extra - a->get_width()) / (Float)(int)2);
HXLINE(1676)		HX_VARI( Float,ax1) = (a->x - diff);
HXLINE(1677)		HX_VARI_NAME( Float,a1,"a") = a->x;
HXDLIN(1677)		HX_VARI( Float,ax2) = ((a1 + a->get_width()) + diff);
HXLINE(1679)		extra = (a->get_height() * multA);
HXDLIN(1679)		diff = ((Float)(extra - a->get_height()) / (Float)(int)2);
HXLINE(1681)		HX_VARI( Float,ay1) = (a->y - diff);
HXLINE(1682)		HX_VARI_NAME( Float,a2,"a") = a->y;
HXDLIN(1682)		HX_VARI( Float,ay2) = ((a2 + a->get_height()) + diff);
HXLINE(1684)		extra = (b->get_width() * multB);
HXDLIN(1684)		diff = ((Float)(extra - b->get_width()) / (Float)(int)2);
HXLINE(1686)		HX_VARI( Float,bx1) = (b->x - diff);
HXLINE(1687)		HX_VARI_NAME( Float,b1,"b") = b->x;
HXDLIN(1687)		HX_VARI( Float,bx2) = ((b1 + b->get_width()) + diff);
HXLINE(1689)		extra = (b->get_height() * multB);
HXDLIN(1689)		diff = ((Float)(extra - b->get_height()) / (Float)(int)2);
HXLINE(1691)		HX_VARI( Float,by1) = (b->y - diff);
HXLINE(1692)		HX_VARI_NAME( Float,b2,"b") = b->y;
HXDLIN(1692)		HX_VARI( Float,by2) = ((b2 + b->get_height()) + diff);
HXLINE(1694)		if ((::Math_obj::abs(((bx2 + bx1) - (ax2 + ax1))) <= (((bx2 - bx1) + ax2) - ax1))) {
HXLINE(1694)			return (::Math_obj::abs(((by2 + by1) - (ay2 + ay1))) <= (((by2 - by1) + ay2) - ay1));
            		}
            		else {
HXLINE(1694)			return false;
            		}
HXDLIN(1694)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,aabb_test_mult,return )

bool U_obj::aabb_test( ::flixel::FlxObject a, ::flixel::FlxObject b){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1698_aabb_test)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(1700)		HX_VARI( Float,ax1) = a->x;
HXLINE(1701)		HX_VARI_NAME( Float,a1,"a") = a->x;
HXDLIN(1701)		HX_VARI( Float,ax2) = (a1 + a->get_width());
HXLINE(1703)		HX_VARI( Float,ay1) = a->y;
HXLINE(1704)		HX_VARI_NAME( Float,a2,"a") = a->y;
HXDLIN(1704)		HX_VARI( Float,ay2) = (a2 + a->get_height());
HXLINE(1706)		HX_VARI( Float,bx1) = b->x;
HXLINE(1707)		HX_VARI_NAME( Float,b1,"b") = b->x;
HXDLIN(1707)		HX_VARI( Float,bx2) = (b1 + b->get_width());
HXLINE(1709)		HX_VARI( Float,by1) = b->y;
HXLINE(1710)		HX_VARI_NAME( Float,b2,"b") = b->y;
HXDLIN(1710)		HX_VARI( Float,by2) = (b2 + b->get_height());
HXLINE(1712)		if ((::Math_obj::abs(((bx2 + bx1) - (ax2 + ax1))) <= (((bx2 - bx1) + ax2) - ax1))) {
HXLINE(1712)			return (::Math_obj::abs(((by2 + by1) - (ay2 + ay1))) <= (((by2 - by1) + ay2) - ay1));
            		}
            		else {
HXLINE(1712)			return false;
            		}
HXDLIN(1712)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,aabb_test,return )

 ::openfl::_legacy::geom::Point U_obj::bitStringDimensions(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1720_bitStringDimensions)
            	HX_STACK_ARG(str,"str")
HXLINE(1721)		HX_VARI(  ::openfl::_legacy::geom::Point,pt) =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(1722)		HX_VARI( ::Array< ::String >,arr) = str.split(HX_("\n",0a,00,00,00));
HXLINE(1723)		bool _hx_tmp;
HXDLIN(1723)		if (hx::IsNotNull( arr )) {
HXLINE(1723)			_hx_tmp = (arr->length > (int)1);
            		}
            		else {
HXLINE(1723)			_hx_tmp = false;
            		}
HXDLIN(1723)		if (_hx_tmp) {
HXLINE(1724)			pt->y = arr->length;
HXLINE(1725)			bool _hx_tmp1;
HXDLIN(1725)			if (hx::IsNotNull( arr->__get((int)0) )) {
HXLINE(1725)				_hx_tmp1 = (arr->__get((int)0).length > (int)1);
            			}
            			else {
HXLINE(1725)				_hx_tmp1 = false;
            			}
HXDLIN(1725)			if (_hx_tmp1) {
HXLINE(1726)				pt->x = arr->__get((int)0).length;
            			}
            		}
HXLINE(1729)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,bitStringDimensions,return )

::Array< int > U_obj::splitBitString(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1736_splitBitString)
            	HX_STACK_ARG(str,"str")
HXLINE(1737)		HX_VARI( ::Array< int >,final) = ::Array_obj< int >::__new();
HXLINE(1738)		HX_VARI( ::Array< ::String >,arr) = str.split(HX_("\n",0a,00,00,00));
HXLINE(1739)		HX_VARI( int,i) = (int)0;
HXDLIN(1739)		while((i < arr->length)){
HXLINE(1740)			HX_VARI( int,len) = arr->__get(i).length;
HXLINE(1741)			HX_VARI( int,j) = (int)0;
HXDLIN(1741)			while((j < len)){
HXLINE(1744)				final->push(::Std_obj::parseInt(arr->__get(i).charAt(j)));
HXLINE(1745)				j = (j + (int)1);
            			}
HXLINE(1747)			i = (i + (int)1);
            		}
HXLINE(1749)		return final;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,splitBitString,return )

::String U_obj::getShortTextFromFlxKeyText(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1752_getShortTextFromFlxKeyText)
            	HX_STACK_ARG(str,"str")
HXLINE(1753)		str = str.toUpperCase();
HXLINE(1754)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("ACCENT",4a,3d,89,bd)) ){
HXLINE(1754)			return HX_("`",60,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ALT",09,95,31,00)) ){
HXLINE(1754)			return HX_("AT",f3,38,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("BACKSLASH",96,28,9e,c3)) ){
HXLINE(1754)			return HX_("\\",5c,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("BACKSPACE",1f,f5,42,c6)) ){
HXLINE(1754)			return HX_("BK",c9,39,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("CAPSLOCK",8c,6c,6e,80)) ){
HXLINE(1754)			return HX_("CP",ad,3a,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("COMMA",b5,69,4b,c8)) ){
HXLINE(1754)			return HX_(",",2c,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("CONTROL",3d,3f,55,99)) ){
HXLINE(1754)			return HX_("CT",b1,3a,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("DELETE",2b,6c,5b,1d)) ){
HXLINE(1754)			return HX_("DE",81,3b,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("DOWN",62,c0,2e,2d)) ){
HXLINE(1754)			return HX_("DN",8a,3b,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("EIGHT",2f,b9,1c,eb)) ){
HXLINE(1754)			return HX_("8",38,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("END",bb,9f,34,00)) ){
HXLINE(1754)			return HX_("ED",5f,3c,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ENTER",f8,a4,74,ee)) ){
HXLINE(1754)			return HX_("EN",69,3c,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("EQUALS",3f,9a,75,72)) ){
HXLINE(1754)			return HX_("=",3d,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ESC",15,a4,34,00)) ||  (_hx_switch_0==HX_("ESCAPE",81,ef,5c,8d)) ){
HXLINE(1754)			return HX_("EC",5e,3c,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("FIVE",32,9f,7c,2e)) ){
HXLINE(1754)			return HX_("5",35,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("FOUR",e6,2b,81,2e)) ){
HXLINE(1754)			return HX_("4",34,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("HOME",1f,92,d3,2f)) ){
HXLINE(1754)			return HX_("HM",05,3f,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("INSERT",39,ef,5f,50)) ){
HXLINE(1754)			return HX_("IN",e5,3f,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("LBRACKET",3c,3b,54,16)) ){
HXLINE(1754)			return HX_("[",5b,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("LEFT",07,d0,70,32)) ){
HXLINE(1754)			return HX_("LT",88,42,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("MINUS",50,b8,56,86)) ){
HXLINE(1754)			return HX_("-",2d,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NINE",32,4d,c6,33)) ){
HXLINE(1754)			return HX_("9",39,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NULL",87,66,cf,33)) ){
HXLINE(1754)			return HX_(" ",20,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM0",4a,67,cf,33)) ){
HXLINE(1754)			return HX_("N0",22,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM1",4b,67,cf,33)) ){
HXLINE(1754)			return HX_("N1",23,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM2",4c,67,cf,33)) ){
HXLINE(1754)			return HX_("N2",24,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM3",4d,67,cf,33)) ){
HXLINE(1754)			return HX_("N3",25,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM4",4e,67,cf,33)) ){
HXLINE(1754)			return HX_("N4",26,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM5",4f,67,cf,33)) ){
HXLINE(1754)			return HX_("N5",27,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM6",50,67,cf,33)) ){
HXLINE(1754)			return HX_("N6",28,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM7",51,67,cf,33)) ){
HXLINE(1754)			return HX_("N7",29,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM8",52,67,cf,33)) ){
HXLINE(1754)			return HX_("N8",2a,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUM9",53,67,cf,33)) ){
HXLINE(1754)			return HX_("N9",2b,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMDEC",3c,b7,fe,53)) ){
HXLINE(1754)			return HX_("N.",20,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMDIV",cb,ba,fe,53)) ){
HXLINE(1754)			return HX_("N/",21,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMLOCK",11,e9,32,30)) ){
HXLINE(1754)			return HX_("NM",3f,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMMINUS",6a,b4,d0,8b)) ){
HXLINE(1754)			return HX_("N-",1f,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMMULT",16,b5,e0,30)) ){
HXLINE(1754)			return HX_("N*",1c,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("NUMPLUS",80,8c,d5,32)) ){
HXLINE(1754)			return HX_("N+",1d,44,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ONE",46,36,3c,00)) ){
HXLINE(1754)			return HX_("1",31,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PAGEDOWN",31,36,e2,b9)) ){
HXLINE(1754)			return HX_("PD",f4,45,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PAGEUP",6a,5e,bb,98)) ){
HXLINE(1754)			return HX_("PU",05,46,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PAUSEBREAK",09,c6,40,ed)) ){
HXLINE(1754)			return HX_("PB",f2,45,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PERIOD",01,0d,9e,ed)) ){
HXLINE(1754)			return HX_(".",2e,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("PLUS",5a,07,1b,35)) ){
HXLINE(1754)			return HX_("+",2b,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("QUOTE",1c,5b,e0,db)) ){
HXLINE(1754)			return HX_("\"",22,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("RBRACKET",f6,e7,82,6d)) ){
HXLINE(1754)			return HX_("]",5d,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("RIGHT",bc,43,52,67)) ){
HXLINE(1754)			return HX_("RT",c2,47,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SCROLLLOCK",78,72,a7,0c)) ){
HXLINE(1754)			return HX_("SC",90,48,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SEMICOLON",11,86,2a,49)) ){
HXLINE(1754)			return HX_(";",3b,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SEVEN",ed,5c,1f,f8)) ){
HXLINE(1754)			return HX_("7",37,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SHIFT",62,24,11,fa)) ){
HXLINE(1754)			return HX_("SH",95,48,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SIX",02,3b,3f,00)) ){
HXLINE(1754)			return HX_("6",36,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SLASH",1d,f8,af,fc)) ){
HXLINE(1754)			return HX_("/",2f,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("SPACE",a6,c4,54,ff)) ){
HXLINE(1754)			return HX_("SP",9d,48,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("TAB",35,f6,3f,00)) ){
HXLINE(1754)			return HX_("TB",6e,49,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("TEN",bd,f9,3f,00)) ){
HXLINE(1754)			return HX_("10",df,2a,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("THREE",3e,8c,7e,8d)) ){
HXLINE(1754)			return HX_("3",33,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("TWO",6c,09,40,00)) ){
HXLINE(1754)			return HX_("2",32,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("UP",5b,4a,00,00)) ){
HXLINE(1754)			return HX_("UP",5b,4a,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("ZERO",28,d7,b1,3b)) ){
HXLINE(1754)			return HX_("0",30,00,00,00);
HXDLIN(1754)			goto _hx_goto_126;
            		}
            		/* default */{
HXLINE(1754)			return str;
            		}
            		_hx_goto_126:;
HXDLIN(1754)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,getShortTextFromFlxKeyText,return )

::String U_obj::getFlxKeyTextFromShortText(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1820_getFlxKeyTextFromShortText)
            	HX_STACK_ARG(str,"str")
HXLINE(1821)		str = str.toUpperCase();
HXLINE(1822)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE(1822)			return HX_(" ",20,00,00,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE(1822)			return HX_("QUOTE",1c,5b,e0,db);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("*",2a,00,00,00)) ){
HXLINE(1822)			return HX_("NUMMULT",16,b5,e0,30);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE(1822)			return HX_("PLUS",5a,07,1b,35);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_(",",2c,00,00,00)) ){
HXLINE(1822)			return HX_("COMMA",b5,69,4b,c8);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE(1822)			return HX_("MINUS",50,b8,56,86);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_(".",2e,00,00,00)) ){
HXLINE(1822)			return HX_("PERIOD",01,0d,9e,ed);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("/",2f,00,00,00)) ){
HXLINE(1822)			return HX_("SLASH",1d,f8,af,fc);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE(1822)			return HX_("ZERO",28,d7,b1,3b);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ){
HXLINE(1822)			return HX_("ONE",46,36,3c,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("10",df,2a,00,00)) ){
HXLINE(1822)			return HX_("TEN",bd,f9,3f,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("2",32,00,00,00)) ){
HXLINE(1822)			return HX_("TWO",6c,09,40,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("3",33,00,00,00)) ){
HXLINE(1822)			return HX_("THREE",3e,8c,7e,8d);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("4",34,00,00,00)) ){
HXLINE(1822)			return HX_("FOUR",e6,2b,81,2e);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("5",35,00,00,00)) ){
HXLINE(1822)			return HX_("FIVE",32,9f,7c,2e);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("6",36,00,00,00)) ){
HXLINE(1822)			return HX_("SIX",02,3b,3f,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("7",37,00,00,00)) ){
HXLINE(1822)			return HX_("SEVEN",ed,5c,1f,f8);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("8",38,00,00,00)) ){
HXLINE(1822)			return HX_("EIGHT",2f,b9,1c,eb);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("9",39,00,00,00)) ){
HXLINE(1822)			return HX_("NINE",32,4d,c6,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_(";",3b,00,00,00)) ){
HXLINE(1822)			return HX_("SEMICOLON",11,86,2a,49);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("=",3d,00,00,00)) ){
HXLINE(1822)			return HX_("EQUALS",3f,9a,75,72);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("AT",f3,38,00,00)) ){
HXLINE(1822)			return HX_("ALT",09,95,31,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("BK",c9,39,00,00)) ){
HXLINE(1822)			return HX_("BACKSPACE",1f,f5,42,c6);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("CP",ad,3a,00,00)) ){
HXLINE(1822)			return HX_("CAPSLOCK",8c,6c,6e,80);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("CT",b1,3a,00,00)) ){
HXLINE(1822)			return HX_("CONTROL",3d,3f,55,99);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("DE",81,3b,00,00)) ){
HXLINE(1822)			return HX_("DELETE",2b,6c,5b,1d);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("DN",8a,3b,00,00)) ){
HXLINE(1822)			return HX_("DOWN",62,c0,2e,2d);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("EC",5e,3c,00,00)) ){
HXLINE(1822)			return HX_("ESCAPE",81,ef,5c,8d);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("ED",5f,3c,00,00)) ){
HXLINE(1822)			return HX_("END",bb,9f,34,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("EN",69,3c,00,00)) ){
HXLINE(1822)			return HX_("ENTER",f8,a4,74,ee);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("HM",05,3f,00,00)) ){
HXLINE(1822)			return HX_("HOME",1f,92,d3,2f);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("IN",e5,3f,00,00)) ){
HXLINE(1822)			return HX_("INSERT",39,ef,5f,50);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("LT",88,42,00,00)) ){
HXLINE(1822)			return HX_("LEFT",07,d0,70,32);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N+",1d,44,00,00)) ){
HXLINE(1822)			return HX_("NUMPLUS",80,8c,d5,32);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N-",1f,44,00,00)) ){
HXLINE(1822)			return HX_("NUMMINUS",6a,b4,d0,8b);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N.",20,44,00,00)) ){
HXLINE(1822)			return HX_("NUMDEC",3c,b7,fe,53);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N/",21,44,00,00)) ){
HXLINE(1822)			return HX_("NUMDIV",cb,ba,fe,53);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N0",22,44,00,00)) ){
HXLINE(1822)			return HX_("NUM0",4a,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N1",23,44,00,00)) ){
HXLINE(1822)			return HX_("NUM1",4b,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N2",24,44,00,00)) ){
HXLINE(1822)			return HX_("NUM2",4c,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N3",25,44,00,00)) ){
HXLINE(1822)			return HX_("NUM3",4d,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N4",26,44,00,00)) ){
HXLINE(1822)			return HX_("NUM4",4e,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N5",27,44,00,00)) ){
HXLINE(1822)			return HX_("NUM5",4f,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N6",28,44,00,00)) ){
HXLINE(1822)			return HX_("NUM6",50,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N7",29,44,00,00)) ){
HXLINE(1822)			return HX_("NUM7",51,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N8",2a,44,00,00)) ){
HXLINE(1822)			return HX_("NUM8",52,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("N9",2b,44,00,00)) ){
HXLINE(1822)			return HX_("NUM9",53,67,cf,33);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("NM",3f,44,00,00)) ){
HXLINE(1822)			return HX_("NUMLOCK",11,e9,32,30);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("PB",f2,45,00,00)) ){
HXLINE(1822)			return HX_("PAUSEBREAK",09,c6,40,ed);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("PD",f4,45,00,00)) ){
HXLINE(1822)			return HX_("PAGEDOWN",31,36,e2,b9);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("PU",05,46,00,00)) ){
HXLINE(1822)			return HX_("PAGEUP",6a,5e,bb,98);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("RT",c2,47,00,00)) ){
HXLINE(1822)			return HX_("RIGHT",bc,43,52,67);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("SC",90,48,00,00)) ){
HXLINE(1822)			return HX_("SCROLLLOCK",78,72,a7,0c);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("SH",95,48,00,00)) ){
HXLINE(1822)			return HX_("SHIFT",62,24,11,fa);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("SP",9d,48,00,00)) ){
HXLINE(1822)			return HX_("SPACE",a6,c4,54,ff);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("TB",6e,49,00,00)) ){
HXLINE(1822)			return HX_("TAB",35,f6,3f,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("UP",5b,4a,00,00)) ){
HXLINE(1822)			return HX_("UP",5b,4a,00,00);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("[",5b,00,00,00)) ){
HXLINE(1822)			return HX_("LBRACKET",3c,3b,54,16);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE(1822)			return HX_("BACKSLASH",96,28,9e,c3);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("]",5d,00,00,00)) ){
HXLINE(1822)			return HX_("RBRACKET",f6,e7,82,6d);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		if (  (_hx_switch_0==HX_("`",60,00,00,00)) ){
HXLINE(1822)			return HX_("ACCENT",4a,3d,89,bd);
HXDLIN(1822)			goto _hx_goto_128;
            		}
            		/* default */{
HXLINE(1822)			return str;
            		}
            		_hx_goto_128:;
HXDLIN(1822)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,getFlxKeyTextFromShortText,return )

::String U_obj::formatXml( ::Xml _xml){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1889_formatXml)
            	HX_STACK_ARG(_xml,"_xml")
HXLINE(1890)		HX_VARI( ::String,s) = ::haxe::xml::Printer_obj::print(_xml,null());
HXLINE(1892)		HX_VARI(  ::EReg,r) =  ::EReg_obj::__alloc( HX_CTX ,HX_(">[^`<]*<",12,f9,4b,a6),HX_("g",67,00,00,00));
HXLINE(1893)		s = r->replace(s,HX_(">___SPLITHERE___<",66,2a,ca,af));
HXLINE(1895)		r =  ::EReg_obj::__alloc( HX_CTX ,HX_("___SPLITHERE___",94,d3,9b,af),HX_("g",67,00,00,00));
HXLINE(1896)		HX_VARI( ::Array< ::String >,split) = r->split(s);
HXLINE(1899)		s = HX_("",00,00,00,00);
HXLINE(1900)		HX_VARI( int,childDepht) = (int)0;
HXLINE(1903)		{
HXLINE(1903)			HX_VARI( int,_g) = (int)0;
HXDLIN(1903)			while((_g < split->length)){
HXLINE(1903)				HX_VARI( ::String,str) = split->__get(_g);
HXDLIN(1903)				_g = (_g + (int)1);
HXLINE(1905)				{
HXLINE(1905)					HX_VARI( int,_g2) = (int)0;
HXDLIN(1905)					HX_VARI( int,_g1) = childDepht;
HXDLIN(1905)					while((_g2 < _g1)){
HXLINE(1905)						_g2 = (_g2 + (int)1);
HXLINE(1907)						s = (s + HX_("\t",09,00,00,00));
            					}
            				}
HXLINE(1910)				bool _hx_tmp;
HXDLIN(1910)				if ((str.charAt((int)0) == HX_("<",3c,00,00,00))) {
HXLINE(1910)					_hx_tmp = (str.charAt((int)1) == HX_("/",2f,00,00,00));
            				}
            				else {
HXLINE(1910)					_hx_tmp = false;
            				}
HXDLIN(1910)				if (_hx_tmp) {
HXLINE(1912)					childDepht = (childDepht - (int)1);
HXLINE(1913)					s = s.substr((int)0,(s.length - HX_("\t",09,00,00,00).length));
            				}
            				else {
HXLINE(1916)					bool _hx_tmp1;
HXDLIN(1916)					bool _hx_tmp2;
HXDLIN(1916)					if ((str.charAt((str.length - (int)1)) == HX_(">",3e,00,00,00))) {
HXLINE(1916)						_hx_tmp2 = (str.charAt((str.length - (int)2)) != HX_("/",2f,00,00,00));
            					}
            					else {
HXLINE(1916)						_hx_tmp2 = false;
            					}
HXDLIN(1916)					if (_hx_tmp2) {
HXLINE(1916)						_hx_tmp1 = (str.charAt((str.length - (int)2)) != HX_("-",2d,00,00,00));
            					}
            					else {
HXLINE(1916)						_hx_tmp1 = false;
            					}
HXDLIN(1916)					if (_hx_tmp1) {
HXLINE(1918)						childDepht = (childDepht + (int)1);
            					}
            				}
HXLINE(1921)				s = (s + (str + HX_("\n",0a,00,00,00)));
            			}
            		}
HXLINE(1924)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,formatXml,return )

::String U_obj::strCase(::String str,::String code){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1928_strCase)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(code,"code")
HXLINE(1928)		::String _hx_switch_0 = code;
            		if (  (_hx_switch_0==HX_("fu",4f,59,00,00)) ){
HXLINE(1928)			return ::flixel::addons::ui::U_obj::FU(str);
HXDLIN(1928)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("fu_",30,cc,4d,00)) ){
HXLINE(1928)			return ::flixel::addons::ui::U_obj::FU_(str);
HXDLIN(1928)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ){
HXLINE(1928)			return str.toLowerCase();
HXDLIN(1928)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1928)			return str.toUpperCase();
HXDLIN(1928)			goto _hx_goto_133;
            		}
            		/* default */{
HXLINE(1928)			return str;
            		}
            		_hx_goto_133:;
HXDLIN(1928)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,strCase,return )

 ::haxe::xml::Fast U_obj::unparentXML( ::haxe::xml::Fast f){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1939_unparentXML)
            	HX_STACK_ARG(f,"f")
HXLINE(1940)		if (hx::IsNotNull( f->x->parent )) {
HXLINE(1942)			f->x->parent->removeChild(f->x);
            		}
HXLINE(1944)		return f;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,unparentXML,return )

 ::openfl::_legacy::geom::Matrix U_obj::getMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1947_getMatrix)
HXLINE(1948)		if (hx::IsNull( ::flixel::addons::ui::U_obj::_matrix )) {
HXLINE(1949)			::flixel::addons::ui::U_obj::_matrix =  ::openfl::_legacy::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(1951)		return ::flixel::addons::ui::U_obj::_matrix;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(U_obj,getMatrix,return )

 ::openfl::_legacy::geom::Matrix U_obj::_matrix;


U_obj::U_obj()
{
}

bool U_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"fs") ) { outValue = fs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"FU") ) { outValue = FU_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { outValue = xml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fsx") ) { outValue = fsx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"FUL") ) { outValue = FUL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"FU_") ) { outValue = FU__dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gfx") ) { outValue = gfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sfx") ) { outValue = sfx_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"json") ) { outValue = json_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xml_f") ) { outValue = xml_f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_i") ) { outValue = xml_i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"slash") ) { outValue = slash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"field") ) { outValue = field_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_font") ) { outValue = _font_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xml_pt") ) { outValue = xml_pt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"center") ) { outValue = center_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getXML") ) { outValue = getXML_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBmp") ) { outValue = getBmp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dirStr") ) { outValue = dirStr_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xml_str") ) { outValue = xml_str_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boolify") ) { outValue = boolify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_gfx") ) { outValue = xml_gfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hex2dec") ) { outValue = hex2dec_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hex2rgb") ) { outValue = hex2rgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rgb2hex") ) { outValue = rgb2hex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyXml") ) { outValue = copyXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readXml") ) { outValue = readXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endline") ) { outValue = endline_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fontStr") ) { outValue = fontStr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_gfx") ) { outValue = get_gfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"strCase") ) { outValue = strCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { outValue = _matrix; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xml_name") ) { outValue = xml_name_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStrNum") ) { outValue = isStrNum_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStrInt") ) { outValue = isStrInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pointify") ) { outValue = pointify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_bool") ) { outValue = xml_bool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"test_int") ) { outValue = test_int_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseHex") ) { outValue = parseHex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyFast") ) { outValue = copyFast_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readFast") ) { outValue = readFast_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fixSlash") ) { outValue = fixSlash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"writeXml") ) { outValue = writeXml_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xml_color") ) { outValue = xml_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"padDigits") ) { outValue = padDigits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_blend") ) { outValue = xml_blend_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aabb_test") ) { outValue = aabb_test_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatXml") ) { outValue = formatXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMatrix") ) { outValue = getMatrix_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xml_iArray") ) { outValue = xml_iArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_fArray") ) { outValue = xml_fArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStrFloat") ) { outValue = isStrFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"test_float") ) { outValue = test_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLocList") ) { outValue = getLocList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"disposeXML") ) { outValue = disposeXML_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearArray") ) { outValue = clearArray_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hexChar2dec") ) { outValue = hexChar2dec_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"applyResize") ) { outValue = applyResize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circle_test") ) { outValue = circle_test_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { outValue = unparentXML_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"xml_strArray") ) { outValue = xml_strArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"destroyThing") ) { outValue = destroyThing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"checkHaxedef") ) { outValue = checkHaxedef_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleTileBmp") ) { outValue = scaleTileBmp_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"perc_to_float") ) { outValue = perc_to_float_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bmpToCSVLayer") ) { outValue = bmpToCSVLayer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intStr_to_arr") ) { outValue = intStr_to_arr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"obj_direction") ) { outValue = obj_direction_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"xml_colorArray") ) { outValue = xml_colorArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearArraySoft") ) { outValue = clearArraySoft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy_arr_arr_i") ) { outValue = copy_arr_arr_i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aabb_test_mult") ) { outValue = aabb_test_mult_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitBitString") ) { outValue = splitBitString_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"conformToBounds") ) { outValue = conformToBounds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadScaledImage") ) { outValue = loadScaledImage_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"copy_shallow_arr") ) { outValue = copy_shallow_arr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intStr_to_arrStr") ) { outValue = intStr_to_arrStr_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"compareStringVars") ) { outValue = compareStringVars_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"point_circle_test") ) { outValue = point_circle_test_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"copy_shallow_arr_i") ) { outValue = copy_shallow_arr_i_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bmpToArrayIntLayer") ) { outValue = bmpToArrayIntLayer_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"blendModeFromString") ) { outValue = blendModeFromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMonoScaledImage") ) { outValue = loadMonoScaledImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bitStringDimensions") ) { outValue = bitStringDimensions_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"copy_shallow_arr_str") ) { outValue = copy_shallow_arr_str_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleAndStoreTileset") ) { outValue = scaleAndStoreTileset_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"loadImageScaleToHeight") ) { outValue = loadImageScaleToHeight_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getShortTextFromFlxKeyText") ) { outValue = getShortTextFromFlxKeyText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFlxKeyTextFromShortText") ) { outValue = getFlxKeyTextFromShortText_dyn(); return true; }
	}
	return false;
}

bool U_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=ioValue.Cast<  ::openfl::_legacy::geom::Matrix >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *U_obj_sMemberStorageInfo = 0;
static hx::StaticInfo U_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::geom::Matrix*/ ,(void *) &U_obj::_matrix,HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void U_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(U_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(U_obj::_matrix,"_matrix");
};

#ifdef HXCPP_VISIT_ALLOCS
static void U_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(U_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(U_obj::_matrix,"_matrix");
};

#endif

hx::Class U_obj::__mClass;

static ::String U_obj_sStaticFields[] = {
	HX_HCSTRING("xml_str","\x09","\x93","\x5f","\x81"),
	HX_HCSTRING("xml_name","\xf3","\x94","\xe4","\xae"),
	HX_HCSTRING("xml_color","\xbb","\xa1","\xf5","\x0c"),
	HX_HCSTRING("xml_iArray","\x18","\xdd","\xa6","\x37"),
	HX_HCSTRING("xml_fArray","\xfb","\xc7","\x94","\x04"),
	HX_HCSTRING("xml_strArray","\xd0","\xa9","\x3e","\xee"),
	HX_HCSTRING("xml_colorArray","\xde","\x15","\x7c","\xcd"),
	HX_HCSTRING("perc_to_float","\x51","\x7e","\x53","\x6d"),
	HX_HCSTRING("isStrNum","\x9f","\x4d","\x85","\x69"),
	HX_HCSTRING("isStrInt","\x48","\x7c","\x81","\x69"),
	HX_HCSTRING("isStrFloat","\x35","\x7d","\x85","\x2e"),
	HX_HCSTRING("xml_f","\xbe","\x24","\x74","\x60"),
	HX_HCSTRING("xml_i","\xc1","\x24","\x74","\x60"),
	HX_HCSTRING("xml_pt","\xac","\x0a","\x2c","\x05"),
	HX_HCSTRING("boolify","\x12","\xf8","\x01","\x7e"),
	HX_HCSTRING("pointify","\xac","\xe3","\x69","\xac"),
	HX_HCSTRING("compareStringVars","\x22","\xfa","\x08","\x21"),
	HX_HCSTRING("xml_bool","\xd2","\xa6","\x00","\xa7"),
	HX_HCSTRING("xml_gfx","\xd1","\x6b","\x56","\x81"),
	HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"),
	HX_HCSTRING("test_int","\x42","\xab","\x74","\x57"),
	HX_HCSTRING("test_float","\xaf","\xde","\xdd","\xe2"),
	HX_HCSTRING("padDigits","\xd9","\x0f","\xda","\x1d"),
	HX_HCSTRING("conformToBounds","\xf6","\x0a","\xe3","\xea"),
	HX_HCSTRING("parseHex","\x68","\x4c","\x71","\xd6"),
	HX_HCSTRING("hexChar2dec","\xa1","\x38","\x77","\x83"),
	HX_HCSTRING("hex2dec","\x2b","\x31","\x32","\x80"),
	HX_HCSTRING("hex2rgb","\x76","\xd2","\x3c","\x80"),
	HX_HCSTRING("applyResize","\x02","\x1a","\x76","\x44"),
	HX_HCSTRING("rgb2hex","\x76","\xd3","\xf1","\x41"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("getLocList","\x08","\x63","\x44","\x6f"),
	HX_HCSTRING("disposeXML","\x78","\x76","\xdf","\x60"),
	HX_HCSTRING("copyFast","\xf1","\x28","\x54","\xc8"),
	HX_HCSTRING("copyXml","\x22","\xe9","\x88","\x43"),
	HX_HCSTRING("readXml","\x21","\x14","\xd5","\x02"),
	HX_HCSTRING("readFast","\x12","\x9d","\xad","\x6b"),
	HX_HCSTRING("fixSlash","\x28","\xaa","\x29","\xe5"),
	HX_HCSTRING("endline","\x4f","\xa5","\xfe","\x3e"),
	HX_HCSTRING("slash","\x3d","\xc0","\xc1","\x7e"),
	HX_HCSTRING("writeXml","\x38","\xce","\xfb","\x23"),
	HX_HCSTRING("getXML","\xe1","\x8a","\x2a","\xa3"),
	HX_HCSTRING("json","\x28","\x42","\x68","\x46"),
	HX_HCSTRING("field","\xba","\x94","\x93","\x00"),
	HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00"),
	HX_HCSTRING("clearArraySoft","\xd6","\x4b","\xcf","\x53"),
	HX_HCSTRING("clearArray","\xcc","\xac","\x99","\xfa"),
	HX_HCSTRING("destroyThing","\x94","\x80","\x89","\x01"),
	HX_HCSTRING("fontStr","\x22","\x4e","\x2a","\x96"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("_font","\xae","\x79","\xd1","\xf6"),
	HX_HCSTRING("fsx","\x8b","\xca","\x4d","\x00"),
	HX_HCSTRING("fs","\x4d","\x59","\x00","\x00"),
	HX_HCSTRING("FU","\x4f","\x3d","\x00","\x00"),
	HX_HCSTRING("FUL","\x1d","\x68","\x35","\x00"),
	HX_HCSTRING("getBmp","\x4f","\xf5","\x19","\xa3"),
	HX_HCSTRING("checkHaxedef","\x77","\x59","\x01","\xf6"),
	HX_HCSTRING("copy_shallow_arr","\x6c","\xe6","\xee","\xeb"),
	HX_HCSTRING("copy_arr_arr_i","\xe3","\xfb","\xf5","\x9b"),
	HX_HCSTRING("copy_shallow_arr_i","\x96","\xac","\x46","\xf2"),
	HX_HCSTRING("copy_shallow_arr_str","\x1e","\x7a","\xc3","\x12"),
	HX_HCSTRING("FU_","\x30","\x68","\x35","\x00"),
	HX_HCSTRING("xml_blend","\xa9","\x18","\x8e","\x77"),
	HX_HCSTRING("blendModeFromString","\x4f","\x47","\x9d","\xc2"),
	HX_HCSTRING("scaleTileBmp","\x4d","\xf8","\xb7","\xdc"),
	HX_HCSTRING("scaleAndStoreTileset","\x60","\x15","\xfd","\x22"),
	HX_HCSTRING("loadScaledImage","\xdb","\x79","\xed","\x47"),
	HX_HCSTRING("loadImageScaleToHeight","\xd7","\x87","\x61","\x93"),
	HX_HCSTRING("loadMonoScaledImage","\x78","\xf7","\x80","\x23"),
	HX_HCSTRING("gfx","\x79","\x81","\x4e","\x00"),
	HX_HCSTRING("bmpToArrayIntLayer","\xdb","\x47","\x47","\xbf"),
	HX_HCSTRING("bmpToCSVLayer","\x6b","\xd9","\xe4","\x7b"),
	HX_HCSTRING("get_gfx","\x10","\x4a","\xc3","\x26"),
	HX_HCSTRING("sfx","\x85","\x9c","\x57","\x00"),
	HX_HCSTRING("intStr_to_arr","\x3a","\x05","\x69","\x9f"),
	HX_HCSTRING("intStr_to_arrStr","\x97","\xdb","\xdd","\x9c"),
	HX_HCSTRING("dirStr","\x64","\xb1","\x5c","\xbc"),
	HX_HCSTRING("obj_direction","\xb7","\xa8","\xb9","\x31"),
	HX_HCSTRING("circle_test","\x21","\xf8","\xb5","\xaf"),
	HX_HCSTRING("point_circle_test","\x72","\x92","\x34","\x1b"),
	HX_HCSTRING("aabb_test_mult","\x9e","\xf8","\xf6","\x3e"),
	HX_HCSTRING("aabb_test","\x91","\xbd","\xd1","\xb3"),
	HX_HCSTRING("bitStringDimensions","\x6b","\x39","\x4d","\x21"),
	HX_HCSTRING("splitBitString","\x44","\x37","\x3a","\xa7"),
	HX_HCSTRING("getShortTextFromFlxKeyText","\xd7","\xcc","\xe5","\x76"),
	HX_HCSTRING("getFlxKeyTextFromShortText","\x8f","\x06","\x64","\x6f"),
	HX_HCSTRING("formatXml","\xe0","\xb2","\x52","\x19"),
	HX_HCSTRING("strCase","\x01","\xa0","\xcb","\xdf"),
	HX_HCSTRING("unparentXML","\x54","\xa1","\xff","\x04"),
	HX_HCSTRING("getMatrix","\x77","\xbf","\x1e","\x38"),
	HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"),
	::String(null())
};

void U_obj::__register()
{
	hx::Object *dummy = new U_obj;
	U_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.U","\x04","\x06","\x40","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &U_obj::__GetStatic;
	__mClass->mSetStaticField = &U_obj::__SetStatic;
	__mClass->mMarkFunc = U_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(U_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< U_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = U_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = U_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = U_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void U_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1954_boot)
HXLINE(1954)		_matrix = null();
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
