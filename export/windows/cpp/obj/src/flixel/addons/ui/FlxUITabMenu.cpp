// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui__FlxButton_FlxButtonEvent
#include <flixel/ui/_FlxButton/FlxButtonEvent.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_21_new,"flixel.addons.ui.FlxUITabMenu","new",0xc82b8b31,"flixel.addons.ui.FlxUITabMenu.new","flixel/addons/ui/FlxUITabMenu.hx",21,0x21d3489e)
static const ::String _hx_array_data_6a801ebf_3[] = {
	HX_("front",a9,18,8e,06),HX_("back",27,da,10,41),
};
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_178_new,"flixel.addons.ui.FlxUITabMenu","new",0xc82b8b31,"flixel.addons.ui.FlxUITabMenu.new","flixel/addons/ui/FlxUITabMenu.hx",178,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_30_get_numTabs,"flixel.addons.ui.FlxUITabMenu","get_numTabs",0xbaaa29cc,"flixel.addons.ui.FlxUITabMenu.get_numTabs","flixel/addons/ui/FlxUITabMenu.hx",30,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_39_getEvent,"flixel.addons.ui.FlxUITabMenu","getEvent",0x34184733,"flixel.addons.ui.FlxUITabMenu.getEvent","flixel/addons/ui/FlxUITabMenu.hx",39,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_45_getRequest,"flixel.addons.ui.FlxUITabMenu","getRequest",0xde0916a8,"flixel.addons.ui.FlxUITabMenu.getRequest","flixel/addons/ui/FlxUITabMenu.hx",45,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_51_set_skipButtonUpdate,"flixel.addons.ui.FlxUITabMenu","set_skipButtonUpdate",0x94812946,"flixel.addons.ui.FlxUITabMenu.set_skipButtonUpdate","flixel/addons/ui/FlxUITabMenu.hx",51,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_73_get_width,"flixel.addons.ui.FlxUITabMenu","get_width",0x5c713fee,"flixel.addons.ui.FlxUITabMenu.get_width","flixel/addons/ui/FlxUITabMenu.hx",73,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_76_get_height,"flixel.addons.ui.FlxUITabMenu","get_height",0x3cf628ff,"flixel.addons.ui.FlxUITabMenu.get_height","flixel/addons/ui/FlxUITabMenu.hx",76,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_84_resize,"flixel.addons.ui.FlxUITabMenu","resize",0xfcd977c3,"flixel.addons.ui.FlxUITabMenu.resize","flixel/addons/ui/FlxUITabMenu.hx",84,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_104_get_selected_tab,"flixel.addons.ui.FlxUITabMenu","get_selected_tab",0xa5609649,"flixel.addons.ui.FlxUITabMenu.get_selected_tab","flixel/addons/ui/FlxUITabMenu.hx",104,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_105_set_selected_tab,"flixel.addons.ui.FlxUITabMenu","set_selected_tab",0xfba283bd,"flixel.addons.ui.FlxUITabMenu.set_selected_tab","flixel/addons/ui/FlxUITabMenu.hx",105,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_111_get_selected_tab_id,"flixel.addons.ui.FlxUITabMenu","get_selected_tab_id",0x4d2a2f51,"flixel.addons.ui.FlxUITabMenu.get_selected_tab_id","flixel/addons/ui/FlxUITabMenu.hx",111,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_112_set_selected_tab_id,"flixel.addons.ui.FlxUITabMenu","set_selected_tab_id",0x89c7225d,"flixel.addons.ui.FlxUITabMenu.set_selected_tab_id","flixel/addons/ui/FlxUITabMenu.hx",112,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_187_destroy,"flixel.addons.ui.FlxUITabMenu","destroy",0x0282244b,"flixel.addons.ui.FlxUITabMenu.destroy","flixel/addons/ui/FlxUITabMenu.hx",187,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_196_getTab,"flixel.addons.ui.FlxUITabMenu","getTab",0x9785b12e,"flixel.addons.ui.FlxUITabMenu.getTab","flixel/addons/ui/FlxUITabMenu.hx",196,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_212_getTabGroup,"flixel.addons.ui.FlxUITabMenu","getTabGroup",0xc2c56b31,"flixel.addons.ui.FlxUITabMenu.getTabGroup","flixel/addons/ui/FlxUITabMenu.hx",212,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_230_getBack,"flixel.addons.ui.FlxUITabMenu","getBack",0xf18f812e,"flixel.addons.ui.FlxUITabMenu.getBack","flixel/addons/ui/FlxUITabMenu.hx",230,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_233_replaceBack,"flixel.addons.ui.FlxUITabMenu","replaceBack",0xe9e4ec4c,"flixel.addons.ui.FlxUITabMenu.replaceBack","flixel/addons/ui/FlxUITabMenu.hx",233,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_250_addGroup,"flixel.addons.ui.FlxUITabMenu","addGroup",0x71ce48ed,"flixel.addons.ui.FlxUITabMenu.addGroup","flixel/addons/ui/FlxUITabMenu.hx",250,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_275__onTabEvent,"flixel.addons.ui.FlxUITabMenu","_onTabEvent",0x28e25eb4,"flixel.addons.ui.FlxUITabMenu._onTabEvent","flixel/addons/ui/FlxUITabMenu.hx",275,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_285_stackTabs,"flixel.addons.ui.FlxUITabMenu","stackTabs",0x2659b577,"flixel.addons.ui.FlxUITabMenu.stackTabs","flixel/addons/ui/FlxUITabMenu.hx",285,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_325_showTabId,"flixel.addons.ui.FlxUITabMenu","showTabId",0x87ad2ce4,"flixel.addons.ui.FlxUITabMenu.showTabId","flixel/addons/ui/FlxUITabMenu.hx",325,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_362_sortTabs,"flixel.addons.ui.FlxUITabMenu","sortTabs",0xaeee7a8b,"flixel.addons.ui.FlxUITabMenu.sortTabs","flixel/addons/ui/FlxUITabMenu.hx",362,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_372_showTabInt,"flixel.addons.ui.FlxUITabMenu","showTabInt",0x2fda23c6,"flixel.addons.ui.FlxUITabMenu.showTabInt","flixel/addons/ui/FlxUITabMenu.hx",372,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_382__showOnlyGroup,"flixel.addons.ui.FlxUITabMenu","_showOnlyGroup",0xbe9f6e86,"flixel.addons.ui.FlxUITabMenu._showOnlyGroup","flixel/addons/ui/FlxUITabMenu.hx",382,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_391_getFirstTab,"flixel.addons.ui.FlxUITabMenu","getFirstTab",0xab440e8c,"flixel.addons.ui.FlxUITabMenu.getFirstTab","flixel/addons/ui/FlxUITabMenu.hx",391,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_399_distributeTabs,"flixel.addons.ui.FlxUITabMenu","distributeTabs",0xcf609f0e,"flixel.addons.ui.FlxUITabMenu.distributeTabs","flixel/addons/ui/FlxUITabMenu.hx",399,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_24_boot,"flixel.addons.ui.FlxUITabMenu","boot",0x56074041,"flixel.addons.ui.FlxUITabMenu.boot","flixel/addons/ui/FlxUITabMenu.hx",24,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_26_boot,"flixel.addons.ui.FlxUITabMenu","boot",0x56074041,"flixel.addons.ui.FlxUITabMenu.boot","flixel/addons/ui/FlxUITabMenu.hx",26,0x21d3489e)
HX_DEFINE_STACK_FRAME(_hx_pos_261d41b9609a7d0a_27_boot,"flixel.addons.ui.FlxUITabMenu","boot",0x56074041,"flixel.addons.ui.FlxUITabMenu.boot","flixel/addons/ui/FlxUITabMenu.hx",27,0x21d3489e)
namespace flixel{
namespace addons{
namespace ui{

void FlxUITabMenu_obj::__construct( ::flixel::FlxSprite back_,::Array< ::Dynamic> tabs_,::Array< ::Dynamic> tab_names_and_labels_, ::flixel::math::FlxPoint tab_offset, ::Dynamic __o_stretch_tabs, ::Dynamic tab_spacing,::Array< ::String > tab_stacking){
 ::Dynamic stretch_tabs = __o_stretch_tabs.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_261d41b9609a7d0a_21_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(back_,"back_")
            	HX_STACK_ARG(tabs_,"tabs_")
            	HX_STACK_ARG(tab_names_and_labels_,"tab_names_and_labels_")
            	HX_STACK_ARG(tab_offset,"tab_offset")
            	HX_STACK_ARG(stretch_tabs,"stretch_tabs")
            	HX_STACK_ARG(tab_spacing,"tab_spacing")
            	HX_STACK_ARG(tab_stacking,"tab_stacking")
HXLINE( 358)		this->_selected_tab = (int)-1;
HXLINE( 357)		this->_selected_tab_id = HX_("",00,00,00,00);
HXLINE( 355)		this->_tab_offset = null();
HXLINE( 354)		this->_tab_stacking = null();
HXLINE( 353)		this->_tab_spacing = null();
HXLINE( 352)		this->_stretch_tabs = false;
HXLINE( 121)		super::__construct(null(),null());
HXLINE( 123)		if (hx::IsNull( back_ )) {
HXLINE( 125)			back_ =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("flixel/flixel-ui/img/chrome_flat.png",30,cf,0a,80), ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)200,(int)200),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 128)		this->_back = back_;
HXLINE( 129)		this->add(this->_back);
HXLINE( 131)		if (hx::IsNull( tabs_ )) {
HXLINE( 132)			if (hx::IsNotNull( tab_names_and_labels_ )) {
HXLINE( 133)				tabs_ = ::Array_obj< ::Dynamic>::__new();
HXLINE( 136)				{
HXLINE( 136)					HX_VARI( int,_g) = (int)0;
HXDLIN( 136)					while((_g < tab_names_and_labels_->length)){
HXLINE( 136)						HX_VARI(  ::Dynamic,tdata) = tab_names_and_labels_->__get(_g);
HXDLIN( 136)						_g = (_g + (int)1);
HXLINE( 138)						HX_VARI(  ::flixel::addons::ui::FlxUIButton,fb) =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,(int)0,(int)0, ::Dynamic(tdata->__Field(HX_("label",f4,0d,af,6f),hx::paccDynamic)),null(),null(),null());
HXLINE( 141)						fb->up_color = (int)16777215;
HXLINE( 142)						fb->down_color = (int)16777215;
HXLINE( 143)						fb->over_color = (int)16777215;
HXLINE( 144)						fb->up_toggle_color = (int)16777215;
HXLINE( 145)						fb->down_toggle_color = (int)16777215;
HXLINE( 146)						fb->over_toggle_color = (int)16777215;
HXLINE( 148)						( ( ::flixel::text::FlxText)(fb->label) )->set_color((int)16777215);
HXLINE( 149)						{
HXLINE( 149)							HX_VARI(  ::flixel::addons::ui::FlxUIText,_this) = ( ( ::flixel::addons::ui::FlxUIText)(fb->label) );
HXDLIN( 149)							_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 149)							_this->set_borderColor((int)0);
HXDLIN( 149)							_this->set_borderSize((int)1);
HXDLIN( 149)							_this->set_borderQuality((int)1);
            						}
HXLINE( 151)						fb->name = ( (::String)(tdata->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 155)						HX_VARI( ::Array< int >,slice9tab) = ::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07));
HXLINE( 157)						fb->loadGraphicSlice9(::cpp::VirtualArray_obj::__new(6)->init(0,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(1,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(2,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(3,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(4,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(5,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04)),(int)0,(int)0,::Array_obj< ::Dynamic>::__new(6)->init(0,slice9tab)->init(1,slice9tab)->init(2,slice9tab)->init(3,slice9tab)->init(4,slice9tab)->init(5,slice9tab),(int)0,(int)-1,true,null(),null(),null());
HXLINE( 158)						tabs_->push(fb);
            					}
            				}
            			}
            		}
HXLINE( 163)		this->_tabs = tabs_;
HXLINE( 164)		this->_stretch_tabs = stretch_tabs;
HXLINE( 165)		this->_tab_spacing = tab_spacing;
HXLINE( 166)		this->_tab_stacking = tab_stacking;
HXLINE( 167)		if (hx::IsNull( this->_tab_stacking )) {
HXLINE( 168)			this->_tab_stacking = ::Array_obj< ::String >::fromData( _hx_array_data_6a801ebf_3,2);
            		}
HXLINE( 170)		this->_tab_offset = tab_offset;
HXLINE( 173)		HX_VARI(  ::flixel::addons::ui::FlxUITypedButton,tab) = null();
HXLINE( 174)		{
HXLINE( 174)			HX_VARI_NAME( int,_g1,"_g") = (int)0;
HXDLIN( 174)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_tabs;
HXDLIN( 174)			while((_g1 < _g11->length)){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,::String,a1) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_261d41b9609a7d0a_178_new)
HXLINE( 178)					f(a1);
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 174)				HX_VARI( ::Dynamic,t) = _g11->__get(_g1);
HXDLIN( 174)				_g1 = (_g1 + (int)1);
HXLINE( 176)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE( 177)				this->add(tab);
HXLINE( 178)				 ::Dynamic f = this->_onTabEvent_dyn();
HXDLIN( 178)				::String a1 = tab->name;
HXDLIN( 178)				 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 178)				tab->onUp->callback = _hx_tmp;
            			}
            		}
HXLINE( 182)		this->distributeTabs(null());
HXLINE( 184)		this->_tab_groups = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic FlxUITabMenu_obj::__CreateEmpty() { return new FlxUITabMenu_obj; }

void *FlxUITabMenu_obj::_hx_vtable = 0;

Dynamic FlxUITabMenu_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUITabMenu_obj > _hx_result = new FlxUITabMenu_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool FlxUITabMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x263b73ac) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x263b73ac;
		}
	} else {
		if (inClassId<=(int)0x2e105115) {
			return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
		} else {
			return inClassId==(int)0x58684eb1;
		}
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUITabMenu_obj::getEvent,
	(  ::Dynamic (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUITabMenu_obj::getRequest,
};

static ::flixel::addons::ui::interfaces::IFlxUIClickable_obj _hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IFlxUIClickable= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUITabMenu_obj::set_skipButtonUpdate,
};

static ::flixel::addons::ui::interfaces::IResizable_obj _hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IResizable= {
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUITabMenu_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITabMenu_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUITabMenu_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUITabMenu_obj::set_height,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUITabMenu_obj::resize,
};

void *FlxUITabMenu_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IEventGetter;
		case (int)0x3e998408: return &_hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IFlxUIClickable;
		case (int)0x194a3c9f: return &_hx_flixel_addons_ui_FlxUITabMenu__hx_flixel_addons_ui_interfaces_IResizable;
	}
	return super::_hx_getInterface(inHash);
}

int FlxUITabMenu_obj::get_numTabs(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_30_get_numTabs)
            	HX_STACK_THIS(this)
HXLINE(  31)		if (hx::IsNotNull( this->_tabs )) {
HXLINE(  33)			return this->_tabs->length;
            		}
HXLINE(  35)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,get_numTabs,return )

void FlxUITabMenu_obj::getEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_39_getEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(sender,"sender")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(params,"params")
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUITabMenu_obj,getEvent,(void))

 ::Dynamic FlxUITabMenu_obj::getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_45_getRequest)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(sender,"sender")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(params,"params")
HXLINE(  45)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUITabMenu_obj,getRequest,return )

bool FlxUITabMenu_obj::set_skipButtonUpdate(bool b){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_51_set_skipButtonUpdate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  52)		this->skipButtonUpdate = b;
HXLINE(  53)		{
HXLINE(  53)			HX_VARI( int,_g) = (int)0;
HXDLIN(  53)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tabs;
HXDLIN(  53)			while((_g < _g1->length)){
HXLINE(  53)				HX_VARI( ::Dynamic,tab) = _g1->__get(_g);
HXDLIN(  53)				_g = (_g + (int)1);
HXLINE(  55)				( ( ::flixel::addons::ui::FlxUITypedButton)(tab) )->set_skipButtonUpdate(b);
            			}
            		}
HXLINE(  58)		{
HXLINE(  58)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN(  58)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_tab_groups;
HXDLIN(  58)			while((_g2 < _g11->length)){
HXLINE(  58)				HX_VARI(  ::flixel::addons::ui::FlxUIGroup,group) = _g11->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN(  58)				_g2 = (_g2 + (int)1);
HXLINE(  60)				{
HXLINE(  60)					HX_VARI_NAME( int,_g21,"_g2") = (int)0;
HXDLIN(  60)					HX_VARI( ::Array< ::Dynamic>,_g3) = group->group->members;
HXDLIN(  60)					while((_g21 < _g3->length)){
HXLINE(  60)						HX_VARI(  ::flixel::FlxSprite,sprite) = _g3->__get(_g21).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  60)						_g21 = (_g21 + (int)1);
HXLINE(  61)						if (::Std_obj::is(sprite,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >())) {
HXLINE(  63)							sprite->__Field(HX_("set_skipButtonUpdate",37,1f,14,ff),hx::paccDynamic)(b);
            						}
            					}
            				}
            			}
            		}
HXLINE(  67)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,set_skipButtonUpdate,return )

Float FlxUITabMenu_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_73_get_width)
            	HX_STACK_THIS(this)
HXLINE(  73)		return this->_back->get_width();
            	}


Float FlxUITabMenu_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_76_get_height)
            	HX_STACK_THIS(this)
HXLINE(  77)		HX_VARI( ::Dynamic,fbt) = this->getFirstTab();
HXLINE(  78)		if (hx::IsNotNull( fbt )) {
HXLINE(  79)			Float _hx_tmp = this->_back->y;
HXDLIN(  79)			Float _hx_tmp1 = (_hx_tmp + this->_back->get_height());
HXDLIN(  79)			return (_hx_tmp1 - ( (Float)(fbt->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            		}
HXLINE(  81)		return this->_back->get_height();
            	}


void FlxUITabMenu_obj::resize(Float W,Float H){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_84_resize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(W,"W")
            	HX_STACK_ARG(H,"H")
HXLINE(  85)		HX_VAR( ::Dynamic,ir);
HXLINE(  86)		if (::Std_obj::is(this->_back,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(  88)			this->distributeTabs(W);
HXLINE(  89)			ir = this->_back;
HXLINE(  90)			HX_VARI(  ::flixel::addons::ui::FlxUITypedButton,fbt) = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->getFirstTab()) );
HXLINE(  91)			if (hx::IsNotNull( fbt )) {
HXLINE(  92)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,W,(H - fbt->get_height()));
            			}
            			else {
HXLINE(  94)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,W,H);
            			}
            		}
            		else {
HXLINE(  99)			this->distributeTabs(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,resize,(void))

int FlxUITabMenu_obj::get_selected_tab(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_104_get_selected_tab)
            	HX_STACK_THIS(this)
HXLINE( 104)		return this->_selected_tab;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,get_selected_tab,return )

int FlxUITabMenu_obj::set_selected_tab(int i){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_105_set_selected_tab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 106)		this->showTabInt(i);
HXLINE( 107)		return this->_selected_tab;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,set_selected_tab,return )

::String FlxUITabMenu_obj::get_selected_tab_id(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_111_get_selected_tab_id)
            	HX_STACK_THIS(this)
HXLINE( 111)		return this->_selected_tab_id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,get_selected_tab_id,return )

::String FlxUITabMenu_obj::set_selected_tab_id(::String str){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_112_set_selected_tab_id)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(str,"str")
HXLINE( 113)		this->showTabId(str);
HXLINE( 114)		return this->_selected_tab_id;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,set_selected_tab_id,return )

void FlxUITabMenu_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_187_destroy)
            	HX_STACK_THIS(this)
HXLINE( 188)		this->super::destroy();
HXLINE( 189)		::flixel::addons::ui::U_obj::clearArray(this->_tab_groups);
HXLINE( 190)		::flixel::addons::ui::U_obj::clearArray(this->_tabs);
HXLINE( 191)		this->_back = null();
HXLINE( 192)		this->_tabs = null();
HXLINE( 193)		this->_tab_groups = null();
            	}


::Dynamic FlxUITabMenu_obj::getTab(::String name, ::Dynamic index){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_196_getTab)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(index,"index")
HXLINE( 197)		if (hx::IsNotNull( name )) {
HXLINE( 198)			HX_VARI( int,_g) = (int)0;
HXDLIN( 198)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tabs;
HXDLIN( 198)			while((_g < _g1->length)){
HXLINE( 198)				HX_VARI( ::Dynamic,tab) = _g1->__get(_g);
HXDLIN( 198)				_g = (_g + (int)1);
HXLINE( 199)				if ((( (::String)(tab->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 200)					return tab;
            				}
            			}
            		}
HXLINE( 204)		if (hx::IsNotNull( index )) {
HXLINE( 205)			if (hx::IsLess( index,this->_tabs->length )) {
HXLINE( 206)				return this->_tabs->__get(index);
            			}
            		}
HXLINE( 209)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,getTab,return )

 ::flixel::addons::ui::FlxUIGroup FlxUITabMenu_obj::getTabGroup(::String name, ::Dynamic index){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_212_getTabGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(index,"index")
HXLINE( 214)		if (hx::IsNotNull( name )) {
HXLINE( 215)			HX_VARI( int,_g) = (int)0;
HXDLIN( 215)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tab_groups;
HXDLIN( 215)			while((_g < _g1->length)){
HXLINE( 215)				HX_VARI(  ::flixel::addons::ui::FlxUIGroup,tabGroup) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN( 215)				_g = (_g + (int)1);
HXLINE( 216)				if ((tabGroup->name == name)) {
HXLINE( 217)					return tabGroup;
            				}
            			}
            		}
HXLINE( 221)		if (hx::IsNotNull( index )) {
HXLINE( 222)			if (hx::IsLess( index,this->_tab_groups->length )) {
HXLINE( 223)				return this->_tab_groups->__get(index).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
            			}
            		}
HXLINE( 226)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,getTabGroup,return )

 ::flixel::FlxSprite FlxUITabMenu_obj::getBack(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_230_getBack)
            	HX_STACK_THIS(this)
HXLINE( 230)		return this->_back;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,getBack,return )

void FlxUITabMenu_obj::replaceBack( ::flixel::FlxSprite newBack){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_233_replaceBack)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newBack,"newBack")
HXLINE( 234)		HX_VARI( int,i) = this->group->members->indexOf(this->_back,null());
HXLINE( 235)		if ((i != (int)-1)) {
HXLINE( 237)			HX_VARI(  ::flixel::FlxSprite,oldBack) = this->_back;
HXLINE( 238)			if (::Std_obj::is(newBack,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE( 241)				Float _hx_tmp = oldBack->get_width();
HXDLIN( 241)				::flixel::addons::ui::interfaces::IResizable_obj::resize(newBack,_hx_tmp,oldBack->get_height());
            			}
HXLINE( 243)			this->group->members->set(i,newBack);
HXLINE( 244)			newBack->set_x(oldBack->x);
HXLINE( 245)			newBack->set_y(oldBack->y);
HXLINE( 246)			oldBack->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,replaceBack,(void))

void FlxUITabMenu_obj::addGroup( ::flixel::addons::ui::FlxUIGroup g){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_250_addGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
HXLINE( 251)		if (hx::IsEq( g,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 252)			return;
            		}
HXLINE( 255)		if (!(this->hasThis(g))) {
HXLINE( 256)			g->set_y((this->_back->y - this->y));
HXLINE( 257)			this->add(g);
HXLINE( 258)			this->_tab_groups->push(g);
            		}
HXLINE( 262)		this->_showOnlyGroup(HX_("",00,00,00,00));
HXLINE( 265)		if ((this->_tab_groups->length == (int)1)) {
HXLINE( 266)			this->set_selected_tab((int)0);
            		}
HXLINE( 270)		if ((this->_selected_tab != (int)-1)) {
HXLINE( 271)			this->set_selected_tab(this->_selected_tab);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,addGroup,(void))

void FlxUITabMenu_obj::_onTabEvent(::String name){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_275__onTabEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 276)		this->showTabId(name);
HXLINE( 277)		HX_VARI( ::Dynamic,tab) = this->getTab(name,null());
HXLINE( 278)		HX_VAR( ::cpp::VirtualArray,params);
HXDLIN( 278)		if (hx::IsNotNull( tab )) {
HXLINE( 278)			params = ( (::cpp::VirtualArray)(tab->__Field(HX_("params",46,fb,7a,ed),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 278)			params = null();
            		}
HXLINE( 279)		if (this->broadcastToFlxUI) {
HXLINE( 280)			::flixel::addons::ui::FlxUI_obj::event(HX_("tab_menu_click",52,a3,80,94),hx::ObjectPtr<OBJ_>(this),name,params);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,_onTabEvent,(void))

void FlxUITabMenu_obj::stackTabs(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_285_stackTabs)
            	HX_STACK_THIS(this)
HXLINE( 286)		HX_VARI( Float,_backx) = this->_back->x;
HXLINE( 287)		HX_VARI( Float,_backy) = this->_back->y;
HXLINE( 289)		this->group->remove(this->_back,true).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 291)		HX_VARI(  ::flixel::addons::ui::FlxUITypedButton,tab) = null();
HXLINE( 292)		{
HXLINE( 292)			HX_VARI( int,_g) = (int)0;
HXDLIN( 292)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tabs;
HXDLIN( 292)			while((_g < _g1->length)){
HXLINE( 292)				HX_VARI( ::Dynamic,t) = _g1->__get(_g);
HXDLIN( 292)				_g = (_g + (int)1);
HXLINE( 293)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE( 294)				if (tab->toggled) {
HXLINE( 296)					this->group->remove(tab,true).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
HXLINE( 300)		this->group->add(this->_back).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 302)		{
HXLINE( 302)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 302)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_tabs;
HXDLIN( 302)			while((_g2 < _g11->length)){
HXLINE( 302)				HX_VARI_NAME( ::Dynamic,t1,"t") = _g11->__get(_g2);
HXDLIN( 302)				_g2 = (_g2 + (int)1);
HXLINE( 303)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t1) );
HXLINE( 304)				if (tab->toggled) {
HXLINE( 306)					this->group->add(tab).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
HXLINE( 311)		{
HXLINE( 311)			HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN( 311)			HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->_tab_groups;
HXDLIN( 311)			while((_g3 < _g12->length)){
HXLINE( 311)				HX_VARI(  ::flixel::addons::ui::FlxUIGroup,group) = _g12->__get(_g3).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN( 311)				_g3 = (_g3 + (int)1);
HXLINE( 313)				HX_VARI( Float,tempX) = group->x;
HXLINE( 314)				HX_VARI( Float,tempY) = group->y;
HXLINE( 315)				this->remove(group,true);
HXLINE( 316)				this->add(group);
HXLINE( 317)				group->set_x(tempX);
HXLINE( 318)				group->set_y(tempY);
            			}
            		}
HXLINE( 321)		this->_back->set_x(_backx);
HXLINE( 322)		this->_back->set_y(_backy);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,stackTabs,(void))

void FlxUITabMenu_obj::showTabId(::String name){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_325_showTabId)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 327)		this->_selected_tab = (int)-1;
HXLINE( 328)		this->_selected_tab_id = HX_("",00,00,00,00);
HXLINE( 330)		HX_VARI( int,i) = (int)0;
HXLINE( 331)		{
HXLINE( 331)			HX_VARI( int,_g) = (int)0;
HXDLIN( 331)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tabs;
HXDLIN( 331)			while((_g < _g1->length)){
HXLINE( 331)				HX_VARI( ::Dynamic,tab) = _g1->__get(_g);
HXDLIN( 331)				_g = (_g + (int)1);
HXLINE( 333)				tab->__Field(HX_("set_toggled",73,49,6b,5c),hx::paccDynamic)(false);
HXLINE( 334)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::forceStateHandler(tab,HX_("out_button",c3,20,d2,fb));
HXLINE( 335)				if ((( (::String)(tab->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == name)) {
HXLINE( 336)					tab->__Field(HX_("set_toggled",73,49,6b,5c),hx::paccDynamic)(true);
HXLINE( 337)					this->_selected_tab_id = name;
HXLINE( 338)					this->_selected_tab = i;
            				}
HXLINE( 340)				i = (i + (int)1);
            			}
            		}
HXLINE( 343)		this->_showOnlyGroup(name);
HXLINE( 344)		this->stackTabs();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,showTabId,(void))

int FlxUITabMenu_obj::sortTabs(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_362_sortTabs)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 363)		if ((( (::String)(a->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) < ( (::String)(b->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ))) {
HXLINE( 364)			return (int)-1;
            		}
            		else {
HXLINE( 365)			if ((( (::String)(a->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) > ( (::String)(b->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ))) {
HXLINE( 366)				return (int)1;
            			}
            		}
HXLINE( 368)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITabMenu_obj,sortTabs,return )

void FlxUITabMenu_obj::showTabInt(int i){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_372_showTabInt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 372)		bool _hx_tmp;
HXDLIN( 372)		bool _hx_tmp1;
HXDLIN( 372)		if ((i >= (int)0)) {
HXLINE( 372)			_hx_tmp1 = hx::IsNotNull( this->_tabs );
            		}
            		else {
HXLINE( 372)			_hx_tmp1 = false;
            		}
HXDLIN( 372)		if (_hx_tmp1) {
HXLINE( 372)			_hx_tmp = (this->_tabs->length > i);
            		}
            		else {
HXLINE( 372)			_hx_tmp = false;
            		}
HXDLIN( 372)		if (_hx_tmp) {
HXLINE( 375)			this->showTabId(( (::String)(this->_tabs->__get(i)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 377)			this->showTabId(HX_("",00,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,showTabInt,(void))

void FlxUITabMenu_obj::_showOnlyGroup(::String name){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_382__showOnlyGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 382)		HX_VARI( int,_g) = (int)0;
HXDLIN( 382)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tab_groups;
HXDLIN( 382)		while((_g < _g1->length)){
HXLINE( 382)			HX_VARI(  ::flixel::addons::ui::FlxUIGroup,group) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXDLIN( 382)			_g = (_g + (int)1);
HXLINE( 383)			if ((group->name == name)) {
HXLINE( 384)				group->set_visible(group->set_active(true));
            			}
            			else {
HXLINE( 386)				group->set_visible(group->set_active(false));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,_showOnlyGroup,(void))

::Dynamic FlxUITabMenu_obj::getFirstTab(){
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_391_getFirstTab)
            	HX_STACK_THIS(this)
HXLINE( 392)		HX_VARI( ::Dynamic,_the_tab) = null();
HXLINE( 393)		bool _hx_tmp;
HXDLIN( 393)		if (hx::IsNotNull( this->_tabs )) {
HXLINE( 393)			_hx_tmp = (this->_tabs->length > (int)0);
            		}
            		else {
HXLINE( 393)			_hx_tmp = false;
            		}
HXDLIN( 393)		if (_hx_tmp) {
HXLINE( 394)			_the_tab = this->_tabs->__get((int)0);
            		}
HXLINE( 396)		return _the_tab;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITabMenu_obj,getFirstTab,return )

void FlxUITabMenu_obj::distributeTabs(hx::Null< Float >  __o_W){
Float W = __o_W.Default(-1);
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_399_distributeTabs)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(W,"W")
HXLINE( 400)		HX_VARI( Float,xx) = (int)0;
HXLINE( 402)		HX_VARI( Float,tab_width) = (int)0;
HXLINE( 404)		if ((W == (int)-1)) {
HXLINE( 406)			W = this->_back->get_width();
            		}
HXLINE( 409)		HX_VARI( Float,diff_size) = (int)0;
HXLINE( 410)		if (this->_stretch_tabs) {
HXLINE( 411)			tab_width = ((Float)W / (Float)this->_tabs->length);
HXLINE( 412)			int tot_size = ::Std_obj::_hx_int(tab_width);
HXDLIN( 412)			HX_VARI_NAME( Float,tot_size1,"tot_size") = (tot_size * this->_tabs->length);
HXLINE( 413)			if ((tot_size1 < W)) {
HXLINE( 414)				diff_size = (W - tot_size1);
            			}
            		}
HXLINE( 418)		this->_tabs->sort(this->sortTabs_dyn());
HXLINE( 420)		HX_VARI( int,i) = (int)0;
HXLINE( 421)		HX_VARI( Float,firstHeight) = (int)0;
HXLINE( 423)		HX_VAR(  ::flixel::addons::ui::FlxUITypedButton,tab);
HXLINE( 424)		{
HXLINE( 424)			HX_VARI( int,_g) = (int)0;
HXDLIN( 424)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tabs;
HXDLIN( 424)			while((_g < _g1->length)){
HXLINE( 424)				HX_VARI( ::Dynamic,t) = _g1->__get(_g);
HXDLIN( 424)				_g = (_g + (int)1);
HXLINE( 426)				tab = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE( 428)				tab->set_x((this->x + xx));
HXLINE( 429)				tab->set_y(this->y);
HXLINE( 431)				if (hx::IsNotNull( this->_tab_offset )) {
HXLINE( 432)					tab->set_x((tab->x + this->_tab_offset->x));
HXLINE( 433)					tab->set_y((tab->y + this->_tab_offset->y));
            				}
HXLINE( 436)				if (this->_stretch_tabs) {
HXLINE( 437)					HX_VARI( Float,theHeight) = tab->get_height();
HXLINE( 438)					if ((i != (int)0)) {
HXLINE( 443)						theHeight = firstHeight;
HXLINE( 444)						tab->resize_ratio = (int)-1;
            					}
HXLINE( 446)					if ((diff_size > (int)0)) {
HXLINE( 447)						tab->resize((tab_width + (int)1),theHeight);
HXLINE( 448)						xx = (xx + (::Std_obj::_hx_int(tab_width) + (int)1));
HXLINE( 449)						diff_size = (diff_size - (int)1);
            					}
            					else {
HXLINE( 451)						tab->resize(tab_width,theHeight);
HXLINE( 452)						xx = (xx + ::Std_obj::_hx_int(tab_width));
            					}
            				}
            				else {
HXLINE( 455)					if (hx::IsNotNull( this->_tab_spacing )) {
HXLINE( 456)						Float xx1 = tab->get_width();
HXDLIN( 456)						xx = (xx + (xx1 + this->_tab_spacing));
            					}
            					else {
HXLINE( 458)						xx = (xx + tab->get_width());
            					}
            				}
HXLINE( 461)				if ((i == (int)0)) {
HXLINE( 463)					firstHeight = tab->get_height();
            				}
HXLINE( 465)				i = (i + (int)1);
            			}
            		}
HXLINE( 468)		bool _hx_tmp;
HXDLIN( 468)		bool _hx_tmp1;
HXDLIN( 468)		if (hx::IsNotNull( this->_tabs )) {
HXLINE( 468)			_hx_tmp1 = (this->_tabs->length > (int)0);
            		}
            		else {
HXLINE( 468)			_hx_tmp1 = false;
            		}
HXDLIN( 468)		if (_hx_tmp1) {
HXLINE( 468)			_hx_tmp = hx::IsNotNull( this->_tabs->__get((int)0) );
            		}
            		else {
HXLINE( 468)			_hx_tmp = false;
            		}
HXDLIN( 468)		if (_hx_tmp) {
HXLINE( 470)			 ::flixel::FlxSprite _hx_tmp2 = this->_back;
HXDLIN( 470)			Float _hx_tmp3 = ( (Float)(this->_tabs->__get((int)0)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 470)			_hx_tmp2->set_y(((_hx_tmp3 + ( (Float)(this->_tabs->__get((int)0)->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )) - (int)2));
HXLINE( 471)			if (hx::IsNotNull( this->_tab_offset )) {
HXLINE( 473)				HX_VARI_NAME(  ::flixel::FlxSprite,_g2,"_g") = this->_back;
HXDLIN( 473)				_g2->set_y((_g2->y - this->_tab_offset->y));
            			}
            		}
HXLINE( 477)		this->calcBounds(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITabMenu_obj,distributeTabs,(void))

::String FlxUITabMenu_obj::CLICK_EVENT;

::String FlxUITabMenu_obj::STACK_FRONT;

::String FlxUITabMenu_obj::STACK_BACK;


hx::ObjectPtr< FlxUITabMenu_obj > FlxUITabMenu_obj::__new( ::flixel::FlxSprite back_,::Array< ::Dynamic> tabs_,::Array< ::Dynamic> tab_names_and_labels_, ::flixel::math::FlxPoint tab_offset, ::Dynamic __o_stretch_tabs, ::Dynamic tab_spacing,::Array< ::String > tab_stacking) {
	hx::ObjectPtr< FlxUITabMenu_obj > __this = new FlxUITabMenu_obj();
	__this->__construct(back_,tabs_,tab_names_and_labels_,tab_offset,__o_stretch_tabs,tab_spacing,tab_stacking);
	return __this;
}

hx::ObjectPtr< FlxUITabMenu_obj > FlxUITabMenu_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::FlxSprite back_,::Array< ::Dynamic> tabs_,::Array< ::Dynamic> tab_names_and_labels_, ::flixel::math::FlxPoint tab_offset, ::Dynamic __o_stretch_tabs, ::Dynamic tab_spacing,::Array< ::String > tab_stacking) {
	FlxUITabMenu_obj *__this = (FlxUITabMenu_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUITabMenu_obj), true, "flixel.addons.ui.FlxUITabMenu"));
	*(void **)__this = FlxUITabMenu_obj::_hx_vtable;
	__this->__construct(back_,tabs_,tab_names_and_labels_,tab_offset,__o_stretch_tabs,tab_spacing,tab_stacking);
	return __this;
}

FlxUITabMenu_obj::FlxUITabMenu_obj()
{
}

void FlxUITabMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUITabMenu);
	HX_MARK_MEMBER_NAME(numTabs,"numTabs");
	HX_MARK_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_MARK_MEMBER_NAME(_back,"_back");
	HX_MARK_MEMBER_NAME(_tabs,"_tabs");
	HX_MARK_MEMBER_NAME(_tab_groups,"_tab_groups");
	HX_MARK_MEMBER_NAME(_stretch_tabs,"_stretch_tabs");
	HX_MARK_MEMBER_NAME(_tab_spacing,"_tab_spacing");
	HX_MARK_MEMBER_NAME(_tab_stacking,"_tab_stacking");
	HX_MARK_MEMBER_NAME(_tab_offset,"_tab_offset");
	HX_MARK_MEMBER_NAME(_selected_tab_id,"_selected_tab_id");
	HX_MARK_MEMBER_NAME(_selected_tab,"_selected_tab");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUITabMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(numTabs,"numTabs");
	HX_VISIT_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_VISIT_MEMBER_NAME(_back,"_back");
	HX_VISIT_MEMBER_NAME(_tabs,"_tabs");
	HX_VISIT_MEMBER_NAME(_tab_groups,"_tab_groups");
	HX_VISIT_MEMBER_NAME(_stretch_tabs,"_stretch_tabs");
	HX_VISIT_MEMBER_NAME(_tab_spacing,"_tab_spacing");
	HX_VISIT_MEMBER_NAME(_tab_stacking,"_tab_stacking");
	HX_VISIT_MEMBER_NAME(_tab_offset,"_tab_offset");
	HX_VISIT_MEMBER_NAME(_selected_tab_id,"_selected_tab_id");
	HX_VISIT_MEMBER_NAME(_selected_tab,"_selected_tab");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUITabMenu_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_back") ) { return hx::Val( _back); }
		if (HX_FIELD_EQ(inName,"_tabs") ) { return hx::Val( _tabs); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		if (HX_FIELD_EQ(inName,"getTab") ) { return hx::Val( getTab_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numTabs") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numTabs() : numTabs); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"getBack") ) { return hx::Val( getBack_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return hx::Val( getEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"addGroup") ) { return hx::Val( addGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"sortTabs") ) { return hx::Val( sortTabs_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"stackTabs") ) { return hx::Val( stackTabs_dyn()); }
		if (HX_FIELD_EQ(inName,"showTabId") ) { return hx::Val( showTabId_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getRequest") ) { return hx::Val( getRequest_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"showTabInt") ) { return hx::Val( showTabInt_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_numTabs") ) { return hx::Val( get_numTabs_dyn()); }
		if (HX_FIELD_EQ(inName,"getTabGroup") ) { return hx::Val( getTabGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceBack") ) { return hx::Val( replaceBack_dyn()); }
		if (HX_FIELD_EQ(inName,"_onTabEvent") ) { return hx::Val( _onTabEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"_tab_groups") ) { return hx::Val( _tab_groups); }
		if (HX_FIELD_EQ(inName,"_tab_offset") ) { return hx::Val( _tab_offset); }
		if (HX_FIELD_EQ(inName,"getFirstTab") ) { return hx::Val( getFirstTab_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selected_tab") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selected_tab()); }
		if (HX_FIELD_EQ(inName,"_tab_spacing") ) { return hx::Val( _tab_spacing); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_stretch_tabs") ) { return hx::Val( _stretch_tabs); }
		if (HX_FIELD_EQ(inName,"_tab_stacking") ) { return hx::Val( _tab_stacking); }
		if (HX_FIELD_EQ(inName,"_selected_tab") ) { return hx::Val( _selected_tab); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_showOnlyGroup") ) { return hx::Val( _showOnlyGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"distributeTabs") ) { return hx::Val( distributeTabs_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selected_tab_id") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selected_tab_id()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { return hx::Val( skipButtonUpdate); }
		if (HX_FIELD_EQ(inName,"get_selected_tab") ) { return hx::Val( get_selected_tab_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selected_tab") ) { return hx::Val( set_selected_tab_dyn()); }
		if (HX_FIELD_EQ(inName,"_selected_tab_id") ) { return hx::Val( _selected_tab_id); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_selected_tab_id") ) { return hx::Val( get_selected_tab_id_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selected_tab_id") ) { return hx::Val( set_selected_tab_id_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_skipButtonUpdate") ) { return hx::Val( set_skipButtonUpdate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUITabMenu_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_back") ) { _back=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tabs") ) { _tabs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numTabs") ) { numTabs=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_tab_groups") ) { _tab_groups=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tab_offset") ) { _tab_offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selected_tab") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selected_tab(inValue) ); }
		if (HX_FIELD_EQ(inName,"_tab_spacing") ) { _tab_spacing=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_stretch_tabs") ) { _stretch_tabs=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tab_stacking") ) { _tab_stacking=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selected_tab") ) { _selected_tab=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"selected_tab_id") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selected_tab_id(inValue) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skipButtonUpdate(inValue) );skipButtonUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selected_tab_id") ) { _selected_tab_id=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUITabMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("numTabs","\xe4","\x55","\x77","\xa0"));
	outFields->push(HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"));
	outFields->push(HX_HCSTRING("selected_tab","\x31","\x93","\xe4","\xe4"));
	outFields->push(HX_HCSTRING("selected_tab_id","\x69","\x33","\xa5","\x8c"));
	outFields->push(HX_HCSTRING("_back","\x06","\xf6","\x21","\xf4"));
	outFields->push(HX_HCSTRING("_tabs","\x5d","\xcc","\x07","\x00"));
	outFields->push(HX_HCSTRING("_tab_groups","\x5d","\xcd","\xaf","\x51"));
	outFields->push(HX_HCSTRING("_stretch_tabs","\x17","\x2f","\x6b","\x3f"));
	outFields->push(HX_HCSTRING("_tab_spacing","\x5a","\x72","\xe7","\x32"));
	outFields->push(HX_HCSTRING("_tab_stacking","\xe3","\x1f","\x41","\xff"));
	outFields->push(HX_HCSTRING("_tab_offset","\x9c","\x40","\xc7","\x95"));
	outFields->push(HX_HCSTRING("_selected_tab_id","\xea","\x75","\x84","\x77"));
	outFields->push(HX_HCSTRING("_selected_tab","\x10","\x26","\x53","\xc7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUITabMenu_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxUITabMenu_obj,numTabs),HX_HCSTRING("numTabs","\xe4","\x55","\x77","\xa0")},
	{hx::fsBool,(int)offsetof(FlxUITabMenu_obj,skipButtonUpdate),HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxUITabMenu_obj,_back),HX_HCSTRING("_back","\x06","\xf6","\x21","\xf4")},
	{hx::fsObject /*Array< ::flixel::addons::ui::interfaces::IFlxUIButton >*/ ,(int)offsetof(FlxUITabMenu_obj,_tabs),HX_HCSTRING("_tabs","\x5d","\xcc","\x07","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUITabMenu_obj,_tab_groups),HX_HCSTRING("_tab_groups","\x5d","\xcd","\xaf","\x51")},
	{hx::fsBool,(int)offsetof(FlxUITabMenu_obj,_stretch_tabs),HX_HCSTRING("_stretch_tabs","\x17","\x2f","\x6b","\x3f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITabMenu_obj,_tab_spacing),HX_HCSTRING("_tab_spacing","\x5a","\x72","\xe7","\x32")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUITabMenu_obj,_tab_stacking),HX_HCSTRING("_tab_stacking","\xe3","\x1f","\x41","\xff")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxUITabMenu_obj,_tab_offset),HX_HCSTRING("_tab_offset","\x9c","\x40","\xc7","\x95")},
	{hx::fsString,(int)offsetof(FlxUITabMenu_obj,_selected_tab_id),HX_HCSTRING("_selected_tab_id","\xea","\x75","\x84","\x77")},
	{hx::fsInt,(int)offsetof(FlxUITabMenu_obj,_selected_tab),HX_HCSTRING("_selected_tab","\x10","\x26","\x53","\xc7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUITabMenu_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &FlxUITabMenu_obj::CLICK_EVENT,HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d")},
	{hx::fsString,(void *) &FlxUITabMenu_obj::STACK_FRONT,HX_HCSTRING("STACK_FRONT","\xf2","\x04","\x39","\x17")},
	{hx::fsString,(void *) &FlxUITabMenu_obj::STACK_BACK,HX_HCSTRING("STACK_BACK","\xde","\x2d","\xef","\xd2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUITabMenu_obj_sMemberFields[] = {
	HX_HCSTRING("numTabs","\xe4","\x55","\x77","\xa0"),
	HX_HCSTRING("get_numTabs","\xfb","\xb5","\x71","\x26"),
	HX_HCSTRING("getEvent","\xa4","\xd7","\x9b","\xd5"),
	HX_HCSTRING("getRequest","\x59","\x65","\xe6","\x93"),
	HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"),
	HX_HCSTRING("set_skipButtonUpdate","\x37","\x1f","\x14","\xff"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("get_selected_tab","\xba","\x7f","\x83","\xe9"),
	HX_HCSTRING("set_selected_tab","\x2e","\x6d","\xc5","\x3f"),
	HX_HCSTRING("get_selected_tab_id","\x80","\x02","\xb0","\x17"),
	HX_HCSTRING("set_selected_tab_id","\x8c","\xf5","\x4c","\x54"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("getTab","\x5f","\x93","\x27","\xa3"),
	HX_HCSTRING("getTabGroup","\x60","\xf7","\x8c","\x2e"),
	HX_HCSTRING("getBack","\xdd","\x89","\x93","\x13"),
	HX_HCSTRING("replaceBack","\x7b","\x78","\xac","\x55"),
	HX_HCSTRING("addGroup","\x5e","\xd9","\x51","\x13"),
	HX_HCSTRING("_onTabEvent","\xe3","\xea","\xa9","\x94"),
	HX_HCSTRING("stackTabs","\xe6","\x87","\xf4","\xd7"),
	HX_HCSTRING("showTabId","\x53","\xff","\x47","\x39"),
	HX_HCSTRING("_back","\x06","\xf6","\x21","\xf4"),
	HX_HCSTRING("_tabs","\x5d","\xcc","\x07","\x00"),
	HX_HCSTRING("_tab_groups","\x5d","\xcd","\xaf","\x51"),
	HX_HCSTRING("_stretch_tabs","\x17","\x2f","\x6b","\x3f"),
	HX_HCSTRING("_tab_spacing","\x5a","\x72","\xe7","\x32"),
	HX_HCSTRING("_tab_stacking","\xe3","\x1f","\x41","\xff"),
	HX_HCSTRING("_tab_offset","\x9c","\x40","\xc7","\x95"),
	HX_HCSTRING("_selected_tab_id","\xea","\x75","\x84","\x77"),
	HX_HCSTRING("_selected_tab","\x10","\x26","\x53","\xc7"),
	HX_HCSTRING("sortTabs","\xfc","\x0a","\x72","\x50"),
	HX_HCSTRING("showTabInt","\x77","\x72","\xb7","\xe5"),
	HX_HCSTRING("_showOnlyGroup","\xb7","\x69","\x28","\x52"),
	HX_HCSTRING("getFirstTab","\xbb","\x9a","\x0b","\x17"),
	HX_HCSTRING("distributeTabs","\x3f","\x9a","\xe9","\x62"),
	::String(null()) };

static void FlxUITabMenu_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUITabMenu_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUITabMenu_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_MARK_MEMBER_NAME(FlxUITabMenu_obj::STACK_FRONT,"STACK_FRONT");
	HX_MARK_MEMBER_NAME(FlxUITabMenu_obj::STACK_BACK,"STACK_BACK");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUITabMenu_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUITabMenu_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUITabMenu_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_VISIT_MEMBER_NAME(FlxUITabMenu_obj::STACK_FRONT,"STACK_FRONT");
	HX_VISIT_MEMBER_NAME(FlxUITabMenu_obj::STACK_BACK,"STACK_BACK");
};

#endif

hx::Class FlxUITabMenu_obj::__mClass;

static ::String FlxUITabMenu_obj_sStaticFields[] = {
	HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d"),
	HX_HCSTRING("STACK_FRONT","\xf2","\x04","\x39","\x17"),
	HX_HCSTRING("STACK_BACK","\xde","\x2d","\xef","\xd2"),
	::String(null())
};

void FlxUITabMenu_obj::__register()
{
	hx::Object *dummy = new FlxUITabMenu_obj;
	FlxUITabMenu_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUITabMenu","\xbf","\x1e","\x80","\x6a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUITabMenu_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUITabMenu_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUITabMenu_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUITabMenu_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUITabMenu_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUITabMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUITabMenu_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUITabMenu_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_24_boot)
HXLINE(  24)		CLICK_EVENT = HX_("tab_menu_click",52,a3,80,94);
            	}
{
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_26_boot)
HXLINE(  26)		STACK_FRONT = HX_("front",a9,18,8e,06);
            	}
{
            	HX_STACKFRAME(&_hx_pos_261d41b9609a7d0a_27_boot)
HXLINE(  27)		STACK_BACK = HX_("back",27,da,10,41);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
