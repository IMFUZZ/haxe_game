// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_ColorTransform
#include <openfl/_legacy/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_19_new,"flixel.addons.ui.FlxUI9SliceSprite","new",0x6ddf7885,"flixel.addons.ui.FlxUI9SliceSprite.new","flixel/addons/ui/FlxUI9SliceSprite.hx",19,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_124_destroy,"flixel.addons.ui.FlxUI9SliceSprite","destroy",0x52d94b9f,"flixel.addons.ui.FlxUI9SliceSprite.destroy","flixel/addons/ui/FlxUI9SliceSprite.hx",124,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_129_resize,"flixel.addons.ui.FlxUI9SliceSprite","resize",0x881d96ef,"flixel.addons.ui.FlxUI9SliceSprite.resize","flixel/addons/ui/FlxUI9SliceSprite.hx",129,0x728ef6ec)
static const int _hx_array_data_7a35d213_3[] = {
	(int)4,(int)4,(int)7,(int)7,
};
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_207_noLongerUsingCachedID,"flixel.addons.ui.FlxUI9SliceSprite","noLongerUsingCachedID",0x94bbc89c,"flixel.addons.ui.FlxUI9SliceSprite.noLongerUsingCachedID","flixel/addons/ui/FlxUI9SliceSprite.hx",207,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_222_purgeSections,"flixel.addons.ui.FlxUI9SliceSprite","purgeSections",0xa3a6749e,"flixel.addons.ui.FlxUI9SliceSprite.purgeSections","flixel/addons/ui/FlxUI9SliceSprite.hx",222,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_241_getRectFromString,"flixel.addons.ui.FlxUI9SliceSprite","getRectFromString",0x5989423a,"flixel.addons.ui.FlxUI9SliceSprite.getRectFromString","flixel/addons/ui/FlxUI9SliceSprite.hx",241,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_254_getRectIntsFromString,"flixel.addons.ui.FlxUI9SliceSprite","getRectIntsFromString",0x35da5b7e,"flixel.addons.ui.FlxUI9SliceSprite.getRectIntsFromString","flixel/addons/ui/FlxUI9SliceSprite.hx",254,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_282_paintScale9,"flixel.addons.ui.FlxUI9SliceSprite","paintScale9",0xf90375d2,"flixel.addons.ui.FlxUI9SliceSprite.paintScale9","flixel/addons/ui/FlxUI9SliceSprite.hx",282,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_383_makePaintScale9Id,"flixel.addons.ui.FlxUI9SliceSprite","makePaintScale9Id",0x83e4ddff,"flixel.addons.ui.FlxUI9SliceSprite.makePaintScale9Id","flixel/addons/ui/FlxUI9SliceSprite.hx",383,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_386_paintCompoundBitmap,"flixel.addons.ui.FlxUI9SliceSprite","paintCompoundBitmap",0xb0d9501d,"flixel.addons.ui.FlxUI9SliceSprite.paintCompoundBitmap","flixel/addons/ui/FlxUI9SliceSprite.hx",386,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_453_paintBitmapSection,"flixel.addons.ui.FlxUI9SliceSprite","paintBitmapSection",0xd9a180b3,"flixel.addons.ui.FlxUI9SliceSprite.paintBitmapSection","flixel/addons/ui/FlxUI9SliceSprite.hx",453,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_517_bitmapFillRect,"flixel.addons.ui.FlxUI9SliceSprite","bitmapFillRect",0x90ef4851,"flixel.addons.ui.FlxUI9SliceSprite.bitmapFillRect","flixel/addons/ui/FlxUI9SliceSprite.hx",517,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_21_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",21,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_25_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",25,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_45_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",45,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_46_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",46,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_47_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",47,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_49_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",49,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_50_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",50,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_52_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",52,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_53_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",53,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_56_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",56,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_57_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",57,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_58_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",58,0x728ef6ec)
HX_DEFINE_STACK_FRAME(_hx_pos_99c1e4be2c673cd2_59_boot,"flixel.addons.ui.FlxUI9SliceSprite","boot",0xadc2fc6d,"flixel.addons.ui.FlxUI9SliceSprite.boot","flixel/addons/ui/FlxUI9SliceSprite.hx",59,0x728ef6ec)
namespace flixel{
namespace addons{
namespace ui{

void FlxUI9SliceSprite_obj::__construct(Float X,Float Y, ::Dynamic Graphic, ::openfl::_legacy::geom::Rectangle Rect,::Array< int > Slice9,hx::Null< int >  __o_Tile,hx::Null< bool >  __o_Smooth,::String __o_Id,hx::Null< Float >  __o_Ratio, ::flixel::math::FlxPoint Resize_point,hx::Null< int >  __o_Resize_axis,hx::Null< bool >  __o_DeferResize){
int Tile = __o_Tile.Default(0);
bool Smooth = __o_Smooth.Default(false);
::String Id = __o_Id.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
Float Ratio = __o_Ratio.Default(-1);
int Resize_axis = __o_Resize_axis.Default(1);
bool DeferResize = __o_DeferResize.Default(false);
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_19_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Graphic,"Graphic")
            	HX_STACK_ARG(Rect,"Rect")
            	HX_STACK_ARG(Slice9,"Slice9")
            	HX_STACK_ARG(Tile,"Tile")
            	HX_STACK_ARG(Smooth,"Smooth")
            	HX_STACK_ARG(Id,"Id")
            	HX_STACK_ARG(Ratio,"Ratio")
            	HX_STACK_ARG(Resize_point,"Resize_point")
            	HX_STACK_ARG(Resize_axis,"Resize_axis")
            	HX_STACK_ARG(DeferResize,"DeferResize")
HXLINE(  40)		this->_asset_id = HX_("",00,00,00,00);
HXLINE(  38)		this->_smooth = false;
HXLINE(  37)		this->_tile = (int)0;
HXLINE(  35)		this->_slice9 = null();
HXLINE(  33)		this->paintScale9_id = HX_("",00,00,00,00);
HXLINE(  81)		super::__construct(X,Y,null());
HXLINE(  83)		this->_slice9 = Slice9;
HXLINE(  84)		this->_tile = Tile;
HXLINE(  85)		this->_smooth = Smooth;
HXLINE(  87)		this->_asset_id = HX_("",00,00,00,00);
HXLINE(  89)		if (hx::IsNull( Graphic )) {
HXLINE(  90)			Graphic = HX_("flixel/flixel-ui/img/chrome.png",fe,fb,12,55);
            		}
HXLINE(  93)		if (::Std_obj::is(Graphic,hx::ClassOf< ::String >())) {
HXLINE(  94)			this->_asset_id = ( (::String)(Graphic) );
HXLINE(  95)			this->_raw_pixels = null();
            		}
            		else {
HXLINE(  96)			if (::Std_obj::is(Graphic,hx::ClassOf< ::openfl::_legacy::display::BitmapData >())) {
HXLINE(  97)				this->_asset_id = Id;
HXLINE(  98)				this->_raw_pixels = ( ( ::openfl::_legacy::display::BitmapData)(Graphic) );
            			}
            			else {
HXLINE(  99)				if (::Std_obj::is(Graphic,hx::ClassOf< ::flixel::graphics::FlxGraphic >())) {
HXLINE( 100)					HX_VARI(  ::flixel::graphics::FlxGraphic,fg) = ( ( ::flixel::graphics::FlxGraphic)(Graphic) );
HXLINE( 101)					this->_asset_id = fg->key;
HXLINE( 102)					this->_raw_pixels = fg->bitmap;
            				}
            			}
            		}
HXLINE( 105)		this->set_resize_ratio(Ratio);
HXLINE( 106)		this->resize_ratio_axis = Resize_axis;
HXLINE( 107)		if (hx::IsNotNull( Resize_point )) {
HXLINE( 108)			this->set_resize_point(Resize_point);
            		}
HXLINE( 111)		if (DeferResize) {
HXLINE( 113)			HX_VARI(  ::flixel::math::FlxPoint,pt) = ::flixel::addons::ui::U_obj::applyResize(this->resize_ratio,this->resize_ratio_axis,Rect->width,Rect->height,null());
HXLINE( 114)			this->set_width(pt->x);
HXLINE( 115)			this->set_height(pt->y);
            		}
            		else {
HXLINE( 119)			this->resize(Rect->width,Rect->height);
            		}
            	}

Dynamic FlxUI9SliceSprite_obj::__CreateEmpty() { return new FlxUI9SliceSprite_obj; }

void *FlxUI9SliceSprite_obj::_hx_vtable = 0;

Dynamic FlxUI9SliceSprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUI9SliceSprite_obj > _hx_result = new FlxUI9SliceSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool FlxUI9SliceSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x488a99fd || inClassId==(int)0x7eb12c44;
	}
}

static ::flixel::IFlxSprite_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxSprite= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUI9SliceSprite_obj::setPosition,
};

static ::flixel::IFlxBasic_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxBasic= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::toString,
};

static ::flixel::addons::ui::interfaces::IFlxUIWidget_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IFlxUIWidget= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_active,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_visible,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alive,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_exists,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::update,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::destroy,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::kill,
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::revive,
	( ::String (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::toString,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_angle,
	( int (hx::Object::*)(int))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_facing,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_moves,
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::addons::ui::FlxUI9SliceSprite_obj::setPosition,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_height,
};

static ::flixel::addons::ui::interfaces::IResizable_obj _hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IResizable= {
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_width,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_width,
	( Float (hx::Object::*)())&::flixel::addons::ui::FlxUI9SliceSprite_obj::get_height,
	( Float (hx::Object::*)(Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::set_height,
	( void (hx::Object::*)(Float,Float))&::flixel::addons::ui::FlxUI9SliceSprite_obj::resize,
};

void *FlxUI9SliceSprite_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x897c83aa: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxSprite;
		case (int)0x284cfea9: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_IFlxBasic;
		case (int)0x998525de: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IFlxUIWidget;
		case (int)0x194a3c9f: return &_hx_flixel_addons_ui_FlxUI9SliceSprite__hx_flixel_addons_ui_interfaces_IResizable;
	}
	return super::_hx_getInterface(inHash);
}

void FlxUI9SliceSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_124_destroy)
            	HX_STACK_THIS(this)
HXLINE( 125)		this->noLongerUsingCachedID(this->paintScale9_id);
HXLINE( 126)		this->super::destroy();
            	}


void FlxUI9SliceSprite_obj::resize(Float w,Float h){
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_129_resize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(w,"w")
            	HX_STACK_ARG(h,"h")
HXLINE( 131)		if ((::Std_obj::_hx_int(w) < (int)1)) {
HXLINE( 132)			w = (int)1;
            		}
HXLINE( 134)		if ((::Std_obj::_hx_int(h) < (int)1)) {
HXLINE( 135)			h = (int)1;
            		}
HXLINE( 138)		HX_VARI( Float,old_width) = this->get_width();
HXLINE( 139)		HX_VARI( Float,old_height) = this->get_height();
HXLINE( 141)		HX_VARI(  ::flixel::math::FlxPoint,pt) = ::flixel::addons::ui::U_obj::applyResize(this->resize_ratio,this->resize_ratio_axis,w,h,null());
HXLINE( 143)		w = pt->x;
HXLINE( 144)		h = pt->y;
HXLINE( 146)		HX_VARI( int,iw) = ::Std_obj::_hx_int(pt->x);
HXLINE( 147)		HX_VARI( int,ih) = ::Std_obj::_hx_int(pt->y);
HXLINE( 149)		bool _hx_tmp;
HXDLIN( 149)		if (hx::IsNotNull( this->_slice9 )) {
HXLINE( 149)			_hx_tmp = hx::IsEq( this->_slice9,::Array_obj< int >::__new(0) );
            		}
            		else {
HXLINE( 149)			_hx_tmp = true;
            		}
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 150)			this->_slice9 = ::Array_obj< int >::fromData( _hx_array_data_7a35d213_3,4);
            		}
HXLINE( 154)		HX_VARI( ::String,key) = (this->_asset_id + HX_("_",5f,00,00,00));
HXDLIN( 154)		::String key1 = ((((((key + this->_slice9->join(HX_(",",2c,00,00,00))) + HX_("_",5f,00,00,00)) + iw) + HX_("x",78,00,00,00)) + ih) + HX_("_",5f,00,00,00));
HXDLIN( 154)		HX_VARI_NAME( ::String,key2,"key") = ((key1 + this->_tile) + HX_("_",5f,00,00,00));
HXDLIN( 154)		HX_VARI_NAME( ::String,key3,"key") = (key2 + ::Std_obj::string(this->_smooth));
HXLINE( 157)		if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key3)) ) )) {
HXLINE( 160)			this->loadGraphic(key3,false,iw,ih,null(),null());
            		}
            		else {
HXLINE( 165)			HX_VARI( int,bmpCanvas) = ::Std_obj::_hx_int(w);
HXDLIN( 165)			HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,bmpCanvas1,"bmpCanvas") =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,bmpCanvas,::Std_obj::_hx_int(h),null(),null(),null());
HXLINE( 166)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->x = (int)0;
HXLINE( 167)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->y = (int)0;
HXLINE( 168)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->width = w;
HXLINE( 169)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect->height = h;
HXLINE( 171)			HX_VARI( ::String,oldID) = this->paintScale9_id;
HXLINE( 177)			if ((::flixel::addons::ui::FlxUI9SliceSprite_obj::makePaintScale9Id(this->_asset_id,this->_slice9,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect) != oldID)) {
HXLINE( 180)				this->paintScale9_id = ::flixel::addons::ui::FlxUI9SliceSprite_obj::paintScale9(bmpCanvas1,this->_asset_id,this->_slice9,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect,this->_tile,this->_smooth,this->_raw_pixels);
HXLINE( 183)				HX_VARI(  ::Dynamic,sectionCounter) = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(this->paintScale9_id);
HXLINE( 184)				hx::FieldRef((sectionCounter).mPtr,HX_("useCount",08,a7,ce,11))++;
HXLINE( 186)				this->noLongerUsingCachedID(oldID);
            			}
HXLINE( 189)			int _hx_tmp1 = bmpCanvas1->get_width();
HXDLIN( 189)			this->loadGraphic(bmpCanvas1,false,_hx_tmp1,bmpCanvas1->get_height(),false,key3);
            		}
HXLINE( 192)		HX_VARI( Float,diff_w) = (this->get_width() - old_width);
HXLINE( 193)		HX_VARI( Float,diff_h) = (this->get_height() - old_height);
HXLINE( 195)		if (hx::IsNotNull( this->resize_point )) {
HXLINE( 198)			HX_VARI( Float,delta_y) = (diff_h * this->resize_point->y);
HXLINE( 199)			{
HXLINE( 199)				HX_VARI(  ::flixel::addons::ui::FlxUI9SliceSprite,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 199)				_g->set_x((_g->x - (diff_w * this->resize_point->x)));
            			}
HXLINE( 200)			{
HXLINE( 200)				HX_VARI_NAME(  ::flixel::addons::ui::FlxUI9SliceSprite,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 200)				_g1->set_y((_g1->y - delta_y));
            			}
            		}
            	}


void FlxUI9SliceSprite_obj::noLongerUsingCachedID(::String id){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_207_noLongerUsingCachedID)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 207)		if (::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->exists(id)) {
HXLINE( 210)			HX_VARI(  ::Dynamic,oldCounter) = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(id);
HXLINE( 211)			hx::FieldRef((oldCounter).mPtr,HX_("useCount",08,a7,ce,11))--;
HXLINE( 214)			if ((( (int)(oldCounter->__Field(HX_("useCount",08,a7,ce,11),hx::paccDynamic)) ) <= (int)0)) {
HXLINE( 216)				this->purgeSections(id);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,noLongerUsingCachedID,(void))

void FlxUI9SliceSprite_obj::purgeSections(::String id){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_222_purgeSections)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 224)		HX_VARI(  ::Dynamic,counter) = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(id);
HXLINE( 226)		if (hx::IsNotNull( counter )) {
HXLINE( 230)			{
HXLINE( 230)				HX_VARI( int,_g) = (int)0;
HXDLIN( 230)				HX_VARI( ::Array< ::String >,_g1) = ( (::Array< ::String >)(counter->__Field(HX_("subKeys",94,77,0a,15),hx::paccDynamic)) );
HXDLIN( 230)				while((_g < _g1->length)){
HXLINE( 230)					HX_VARI( ::String,key) = _g1->__get(_g);
HXDLIN( 230)					_g = (_g + (int)1);
HXLINE( 232)					::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache->remove(key);
            				}
            			}
HXLINE( 236)			counter->__SetField(HX_("subKeys",94,77,0a,15),null(),hx::paccDynamic);
HXLINE( 237)			::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->remove(id);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,purgeSections,(void))

int FlxUI9SliceSprite_obj::bitmapsCreated;

bool FlxUI9SliceSprite_obj::useSectionCache;

 ::haxe::ds::StringMap FlxUI9SliceSprite_obj::sectionCache;

 ::haxe::ds::StringMap FlxUI9SliceSprite_obj::cacheCounter;

 ::openfl::_legacy::geom::Point FlxUI9SliceSprite_obj::_staticPoint;

 ::openfl::_legacy::geom::Rectangle FlxUI9SliceSprite_obj::_staticRect;

 ::openfl::_legacy::geom::Rectangle FlxUI9SliceSprite_obj::_staticRect2;

 ::openfl::_legacy::geom::Point FlxUI9SliceSprite_obj::_staticPointZero;

 ::openfl::_legacy::geom::Matrix FlxUI9SliceSprite_obj::_staticMatrix;

 ::flixel::math::FlxRect FlxUI9SliceSprite_obj::_staticFlxRect;

 ::flixel::math::FlxRect FlxUI9SliceSprite_obj::_staticFlxRect2;

int FlxUI9SliceSprite_obj::TILE_NONE;

int FlxUI9SliceSprite_obj::TILE_BOTH;

int FlxUI9SliceSprite_obj::TILE_H;

int FlxUI9SliceSprite_obj::TILE_V;

 ::haxe::ds::StringMap FlxUI9SliceSprite_obj::_staticRects;

 ::openfl::_legacy::geom::Rectangle FlxUI9SliceSprite_obj::getRectFromString(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_241_getRectFromString)
            	HX_STACK_ARG(str,"str")
HXLINE( 242)		HX_VARI( ::Array< ::String >,coords) = str.split(HX_(",",2c,00,00,00));
HXLINE( 243)		HX_VARI(  ::openfl::_legacy::geom::Rectangle,rect) = null();
HXLINE( 244)		bool _hx_tmp;
HXDLIN( 244)		if (hx::IsNotNull( coords )) {
HXLINE( 244)			_hx_tmp = (coords->length == (int)4);
            		}
            		else {
HXLINE( 244)			_hx_tmp = false;
            		}
HXDLIN( 244)		if (_hx_tmp) {
HXLINE( 245)			HX_VARI( int,x_) = ::Std_obj::parseInt(coords->__get((int)0));
HXLINE( 246)			HX_VARI( int,y_) = ::Std_obj::parseInt(coords->__get((int)1));
HXLINE( 247)			HX_VARI( int,w_) = ::Std_obj::parseInt(coords->__get((int)2));
HXLINE( 249)			rect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,x_,y_,w_,::Std_obj::parseInt(coords->__get((int)3)));
            		}
HXLINE( 251)		return rect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,getRectFromString,return )

::Array< int > FlxUI9SliceSprite_obj::getRectIntsFromString(::String str){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_254_getRectIntsFromString)
            	HX_STACK_ARG(str,"str")
HXLINE( 255)		HX_VARI( ::Array< ::String >,coords) = str.split(HX_(",",2c,00,00,00));
HXLINE( 256)		bool _hx_tmp;
HXDLIN( 256)		if (hx::IsNotNull( coords )) {
HXLINE( 256)			_hx_tmp = (coords->length == (int)4);
            		}
            		else {
HXLINE( 256)			_hx_tmp = false;
            		}
HXDLIN( 256)		if (_hx_tmp) {
HXLINE( 257)			HX_VARI( int,x1) = ::Std_obj::parseInt(coords->__get((int)0));
HXLINE( 258)			HX_VARI( int,y1) = ::Std_obj::parseInt(coords->__get((int)1));
HXLINE( 259)			HX_VARI( int,x2) = ::Std_obj::parseInt(coords->__get((int)2));
HXLINE( 261)			return ::Array_obj< int >::__new(4)->init(0,x1)->init(1,y1)->init(2,x2)->init(3,::Std_obj::parseInt(coords->__get((int)3)));
            		}
HXLINE( 263)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI9SliceSprite_obj,getRectIntsFromString,return )

::String FlxUI9SliceSprite_obj::paintScale9( ::openfl::_legacy::display::BitmapData g,::String assetID,::Array< int > scale9, ::flixel::math::FlxRect rc,hx::Null< int >  __o_tile,hx::Null< bool >  __o_smooth, ::openfl::_legacy::display::BitmapData raw){
int tile = __o_tile.Default(0);
bool smooth = __o_smooth.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_282_paintScale9)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(assetID,"assetID")
            	HX_STACK_ARG(scale9,"scale9")
            	HX_STACK_ARG(rc,"rc")
            	HX_STACK_ARG(tile,"tile")
            	HX_STACK_ARG(smooth,"smooth")
            	HX_STACK_ARG(raw,"raw")
HXLINE( 283)		if (hx::IsNotNull( scale9 )) {
HXLINE( 285)			HX_VAR( int,w);
HXLINE( 286)			HX_VAR( int,h);
HXLINE( 287)			if (hx::IsNull( raw )) {
HXLINE( 288)				HX_VARI(  ::openfl::_legacy::display::BitmapData,assetBmp) = ::flixel::addons::ui::U_obj::getBmp(assetID);
HXLINE( 289)				if (hx::IsNotNull( assetBmp )) {
HXLINE( 291)					w = assetBmp->get_width();
HXLINE( 292)					h = assetBmp->get_height();
            				}
            				else {
HXLINE( 296)					HX_VARI(  ::flixel::graphics::FlxGraphic,assetFlx) = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,assetID)) );
HXLINE( 297)					w = assetFlx->width;
HXLINE( 298)					h = assetFlx->height;
            				}
            			}
            			else {
HXLINE( 301)				w = raw->get_width();
HXLINE( 302)				h = raw->get_height();
            			}
HXLINE( 305)			HX_VARI( int,x1) = scale9->__get((int)0);
HXLINE( 306)			HX_VARI( int,y1) = scale9->__get((int)1);
HXLINE( 307)			HX_VARI( int,x2) = scale9->__get((int)2);
HXLINE( 308)			HX_VARI( int,y2) = scale9->__get((int)3);
HXLINE( 310)			if (hx::IsNull( ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects )) {
HXLINE( 312)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 313)				{
HXLINE( 313)					::Dynamic this1 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 313)					HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 313)					_this->x = (int)0;
HXDLIN( 313)					_this->y = (int)0;
HXDLIN( 313)					_this->width = (int)0;
HXDLIN( 313)					_this->height = (int)0;
HXDLIN( 313)					_this->_inPool = false;
HXDLIN( 313)					( ( ::haxe::ds::StringMap)(this1) )->set(HX_("top.left",80,54,c1,7e),_this);
            				}
HXLINE( 314)				{
HXLINE( 314)					::Dynamic this2 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 314)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 314)					_this1->x = (int)0;
HXDLIN( 314)					_this1->y = (int)0;
HXDLIN( 314)					_this1->width = (int)0;
HXDLIN( 314)					_this1->height = (int)0;
HXDLIN( 314)					_this1->_inPool = false;
HXDLIN( 314)					( ( ::haxe::ds::StringMap)(this2) )->set(HX_("top",95,66,58,00),_this1);
            				}
HXLINE( 315)				{
HXLINE( 315)					::Dynamic this3 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 315)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 315)					_this2->x = (int)0;
HXDLIN( 315)					_this2->y = (int)0;
HXDLIN( 315)					_this2->width = (int)0;
HXDLIN( 315)					_this2->height = (int)0;
HXDLIN( 315)					_this2->_inPool = false;
HXDLIN( 315)					( ( ::haxe::ds::StringMap)(this3) )->set(HX_("top.right",43,a9,75,e1),_this2);
            				}
HXLINE( 316)				{
HXLINE( 316)					::Dynamic this4 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 316)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this3,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 316)					_this3->x = (int)0;
HXDLIN( 316)					_this3->y = (int)0;
HXDLIN( 316)					_this3->width = (int)0;
HXDLIN( 316)					_this3->height = (int)0;
HXDLIN( 316)					_this3->_inPool = false;
HXDLIN( 316)					( ( ::haxe::ds::StringMap)(this4) )->set(HX_("left",07,08,b0,47),_this3);
            				}
HXLINE( 317)				{
HXLINE( 317)					::Dynamic this5 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 317)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this4,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 317)					_this4->x = (int)0;
HXDLIN( 317)					_this4->y = (int)0;
HXDLIN( 317)					_this4->width = (int)0;
HXDLIN( 317)					_this4->height = (int)0;
HXDLIN( 317)					_this4->_inPool = false;
HXDLIN( 317)					( ( ::haxe::ds::StringMap)(this5) )->set(HX_("middle",55,d3,5e,4c),_this4);
            				}
HXLINE( 318)				{
HXLINE( 318)					::Dynamic this6 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 318)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this5,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 318)					_this5->x = (int)0;
HXDLIN( 318)					_this5->y = (int)0;
HXDLIN( 318)					_this5->width = (int)0;
HXDLIN( 318)					_this5->height = (int)0;
HXDLIN( 318)					_this5->_inPool = false;
HXDLIN( 318)					( ( ::haxe::ds::StringMap)(this6) )->set(HX_("right",dc,0b,64,e9),_this5);
            				}
HXLINE( 319)				{
HXLINE( 319)					::Dynamic this7 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 319)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this6,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 319)					_this6->x = (int)0;
HXDLIN( 319)					_this6->y = (int)0;
HXDLIN( 319)					_this6->width = (int)0;
HXDLIN( 319)					_this6->height = (int)0;
HXDLIN( 319)					_this6->_inPool = false;
HXDLIN( 319)					( ( ::haxe::ds::StringMap)(this7) )->set(HX_("bottom.left",6a,dc,81,96),_this6);
            				}
HXLINE( 320)				{
HXLINE( 320)					::Dynamic this8 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 320)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this7,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 320)					_this7->x = (int)0;
HXDLIN( 320)					_this7->y = (int)0;
HXDLIN( 320)					_this7->width = (int)0;
HXDLIN( 320)					_this7->height = (int)0;
HXDLIN( 320)					_this7->_inPool = false;
HXDLIN( 320)					( ( ::haxe::ds::StringMap)(this8) )->set(HX_("bottom",eb,e6,78,65),_this7);
            				}
HXLINE( 321)				{
HXLINE( 321)					::Dynamic this9 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects;
HXDLIN( 321)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this8,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 321)					_this8->x = (int)0;
HXDLIN( 321)					_this8->y = (int)0;
HXDLIN( 321)					_this8->width = (int)0;
HXDLIN( 321)					_this8->height = (int)0;
HXDLIN( 321)					_this8->_inPool = false;
HXDLIN( 321)					( ( ::haxe::ds::StringMap)(this9) )->set(HX_("bottom.right",19,0e,2c,92),_this8);
            				}
            			}
HXLINE( 324)			{
HXLINE( 324)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this9,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top.left",80,54,c1,7e)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 324)				_this9->x = (int)0;
HXDLIN( 324)				_this9->y = (int)0;
HXDLIN( 324)				_this9->width = x1;
HXDLIN( 324)				_this9->height = y1;
            			}
HXLINE( 325)			{
HXLINE( 325)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this10,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top",95,66,58,00)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 325)				_this10->x = x1;
HXDLIN( 325)				_this10->y = (int)0;
HXDLIN( 325)				_this10->width = (x2 - x1);
HXDLIN( 325)				_this10->height = y1;
            			}
HXLINE( 326)			{
HXLINE( 326)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this11,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("top.right",43,a9,75,e1)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 326)				_this11->x = x2;
HXDLIN( 326)				_this11->y = (int)0;
HXDLIN( 326)				_this11->width = (w - x2);
HXDLIN( 326)				_this11->height = y1;
            			}
HXLINE( 328)			{
HXLINE( 328)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this12,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("left",07,08,b0,47)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 328)				_this12->x = (int)0;
HXDLIN( 328)				_this12->y = y1;
HXDLIN( 328)				_this12->width = x1;
HXDLIN( 328)				_this12->height = (y2 - y1);
            			}
HXLINE( 329)			{
HXLINE( 329)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this13,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("middle",55,d3,5e,4c)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 329)				_this13->x = x1;
HXDLIN( 329)				_this13->y = y1;
HXDLIN( 329)				_this13->width = (x2 - x1);
HXDLIN( 329)				_this13->height = (y2 - y1);
            			}
HXLINE( 330)			{
HXLINE( 330)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this14,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("right",dc,0b,64,e9)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 330)				_this14->x = x2;
HXDLIN( 330)				_this14->y = y1;
HXDLIN( 330)				_this14->width = (w - x2);
HXDLIN( 330)				_this14->height = (y2 - y1);
            			}
HXLINE( 332)			{
HXLINE( 332)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this15,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom.left",6a,dc,81,96)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 332)				_this15->x = (int)0;
HXDLIN( 332)				_this15->y = y2;
HXDLIN( 332)				_this15->width = x1;
HXDLIN( 332)				_this15->height = (h - y2);
            			}
HXLINE( 333)			{
HXLINE( 333)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this16,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom",eb,e6,78,65)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 333)				_this16->x = x1;
HXDLIN( 333)				_this16->y = y2;
HXDLIN( 333)				_this16->width = (x2 - x1);
HXDLIN( 333)				_this16->height = (h - y2);
            			}
HXLINE( 334)			{
HXLINE( 334)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this17,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects->get(HX_("bottom.right",19,0e,2c,92)).StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 334)				_this17->x = x2;
HXDLIN( 334)				_this17->y = y2;
HXDLIN( 334)				_this17->width = (w - x2);
HXDLIN( 334)				_this17->height = (h - y2);
            			}
HXLINE( 336)			if (hx::IsNull( ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter )) {
HXLINE( 338)				::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 342)			HX_VARI( ::String,uniqueID) = ::flixel::addons::ui::FlxUI9SliceSprite_obj::makePaintScale9Id(assetID,scale9,rc);
HXLINE( 345)			HX_VARI(  ::Dynamic,sectionCounter) = ::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->get(uniqueID);
HXLINE( 347)			if (hx::IsNull( sectionCounter )) {
HXLINE( 350)				sectionCounter =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("useCount",08,a7,ce,11),(int)0)
            					->setFixed(1,HX_("subKeys",94,77,0a,15),::Array_obj< ::String >::__new(0)));
HXLINE( 352)				{
HXLINE( 352)					HX_VARI( int,_g) = (int)0;
HXDLIN( 352)					while((_g < (int)9)){
HXLINE( 352)						_g = (_g + (int)1);
HXLINE( 354)						HX_VAR(  ::flixel::math::FlxRect,rect);
HXLINE( 355)						switch((int)((_g - (int)1))){
            							case (int)0: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("top.left",80,54,c1,7e))) );
            							}
            							break;
            							case (int)1: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("top",95,66,58,00))) );
            							}
            							break;
            							case (int)2: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("top.right",43,a9,75,e1))) );
            							}
            							break;
            							case (int)3: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("left",07,08,b0,47))) );
            							}
            							break;
            							case (int)4: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("middle",55,d3,5e,4c))) );
            							}
            							break;
            							case (int)5: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("right",dc,0b,64,e9))) );
            							}
            							break;
            							case (int)6: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("bottom.left",6a,dc,81,96))) );
            							}
            							break;
            							case (int)7: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("bottom",eb,e6,78,65))) );
            							}
            							break;
            							case (int)8: {
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("bottom.right",19,0e,2c,92))) );
            							}
            							break;
            							default:{
HXLINE( 354)								rect = ( ( ::flixel::math::FlxRect)(::haxe::IMap_obj::get(::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,HX_("top.left",80,54,c1,7e))) );
            							}
            						}
HXLINE( 369)						( (::Array< ::String >)(sectionCounter->__Field(HX_("subKeys",94,77,0a,15),hx::paccDynamic)) )->push((((((((((assetID + HX_("_",5f,00,00,00)) + rect->x) + HX_("_",5f,00,00,00)) + rect->y) + HX_("_",5f,00,00,00)) + rect->width) + HX_("_",5f,00,00,00)) + rect->height) + HX_("_",5f,00,00,00)));
            					}
            				}
HXLINE( 371)				::flixel::addons::ui::FlxUI9SliceSprite_obj::cacheCounter->set(uniqueID,sectionCounter);
            			}
HXLINE( 374)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintCompoundBitmap(g,assetID,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRects,rc,tile,smooth,raw);
HXLINE( 376)			return uniqueID;
            		}
HXLINE( 378)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxUI9SliceSprite_obj,paintScale9,return )

::String FlxUI9SliceSprite_obj::makePaintScale9Id(::String assetId,::Array< int > slice9, ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_383_makePaintScale9Id)
            	HX_STACK_ARG(assetId,"assetId")
            	HX_STACK_ARG(slice9,"slice9")
            	HX_STACK_ARG(rect,"rect")
HXLINE( 383)		::String _hx_tmp = (((assetId + HX_("_",5f,00,00,00)) + slice9->join(HX_(",",2c,00,00,00))) + HX_("_",5f,00,00,00));
HXDLIN( 383)		 ::Dynamic value = rect->x;
HXDLIN( 383)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 383)		_this->label = HX_("x",78,00,00,00);
HXDLIN( 383)		_this->value = value;
HXDLIN( 383)		 ::Dynamic value1 = rect->y;
HXDLIN( 383)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 383)		_this1->label = HX_("y",79,00,00,00);
HXDLIN( 383)		_this1->value = value1;
HXDLIN( 383)		 ::Dynamic value2 = rect->width;
HXDLIN( 383)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this2,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 383)		_this2->label = HX_("w",77,00,00,00);
HXDLIN( 383)		_this2->value = value2;
HXDLIN( 383)		 ::Dynamic value3 = rect->height;
HXDLIN( 383)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this3,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 383)		_this3->label = HX_("h",68,00,00,00);
HXDLIN( 383)		_this3->value = value3;
HXDLIN( 383)		return (_hx_tmp + ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI9SliceSprite_obj,makePaintScale9Id,return )

void FlxUI9SliceSprite_obj::paintCompoundBitmap( ::openfl::_legacy::display::BitmapData g,::String assetID, ::haxe::ds::StringMap sourceRects, ::flixel::math::FlxRect targetRect,hx::Null< int >  __o_tile,hx::Null< bool >  __o_smooth, ::openfl::_legacy::display::BitmapData raw){
int tile = __o_tile.Default(0);
bool smooth = __o_smooth.Default(false);
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_386_paintCompoundBitmap)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(assetID,"assetID")
            	HX_STACK_ARG(sourceRects,"sourceRects")
            	HX_STACK_ARG(targetRect,"targetRect")
            	HX_STACK_ARG(tile,"tile")
            	HX_STACK_ARG(smooth,"smooth")
            	HX_STACK_ARG(raw,"raw")
HXLINE( 389)		targetRect->x = ::Std_obj::_hx_int(targetRect->x);
HXLINE( 390)		targetRect->y = ::Std_obj::_hx_int(targetRect->y);
HXLINE( 391)		targetRect->width = ::Std_obj::_hx_int(targetRect->width);
HXLINE( 392)		targetRect->height = ::Std_obj::_hx_int(targetRect->height);
HXLINE( 395)		HX_VARI(  ::flixel::math::FlxRect,tl) = sourceRects->get(HX_("top.left",80,54,c1,7e)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 396)		if (hx::IsNotNull( tl )) {
HXLINE( 397)			{
HXLINE( 397)				HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 397)				_this->x = (int)0;
HXDLIN( 397)				_this->y = (int)0;
HXDLIN( 397)				_this->width = tl->width;
HXDLIN( 397)				_this->height = tl->height;
            			}
HXLINE( 398)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,tl,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(int)0,smooth,raw);
            		}
HXLINE( 401)		HX_VARI(  ::flixel::math::FlxRect,tr) = sourceRects->get(HX_("top.right",43,a9,75,e1)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 402)		if (hx::IsNotNull( tr )) {
HXLINE( 403)			{
HXLINE( 403)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 403)				_this1->x = (targetRect->width - tr->width);
HXDLIN( 403)				_this1->y = (int)0;
HXDLIN( 403)				_this1->width = tr->width;
HXDLIN( 403)				_this1->height = tr->height;
            			}
HXLINE( 404)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,tr,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(int)0,smooth,raw);
            		}
HXLINE( 407)		HX_VARI(  ::flixel::math::FlxRect,t) = sourceRects->get(HX_("top",95,66,58,00)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 408)		if (hx::IsNotNull( t )) {
HXLINE( 409)			{
HXLINE( 409)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this2,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 409)				_this2->x = tl->width;
HXDLIN( 409)				_this2->y = (int)0;
HXDLIN( 409)				_this2->width = ((targetRect->width - tl->width) - tr->width);
HXDLIN( 409)				_this2->height = t->height;
            			}
HXLINE( 410)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,t,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),((int)tile & (int)(int)16),smooth,raw);
            		}
HXLINE( 414)		HX_VARI(  ::flixel::math::FlxRect,bl) = sourceRects->get(HX_("bottom.left",6a,dc,81,96)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 415)		if (hx::IsNotNull( bl )) {
HXLINE( 416)			{
HXLINE( 416)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this3,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 416)				_this3->x = (int)0;
HXDLIN( 416)				_this3->y = (targetRect->height - bl->height);
HXDLIN( 416)				_this3->width = bl->width;
HXDLIN( 416)				_this3->height = bl->height;
            			}
HXLINE( 417)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,bl,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(int)0,smooth,raw);
            		}
HXLINE( 420)		HX_VARI(  ::flixel::math::FlxRect,br) = sourceRects->get(HX_("bottom.right",19,0e,2c,92)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 421)		if (hx::IsNotNull( br )) {
HXLINE( 422)			{
HXLINE( 422)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this4,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 422)				_this4->x = (targetRect->width - br->width);
HXDLIN( 422)				_this4->y = (targetRect->height - br->height);
HXDLIN( 422)				_this4->width = br->width;
HXDLIN( 422)				_this4->height = br->height;
            			}
HXLINE( 423)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,br,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),(int)0,smooth,raw);
            		}
HXLINE( 426)		HX_VARI(  ::flixel::math::FlxRect,b) = sourceRects->get(HX_("bottom",eb,e6,78,65)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 427)		if (hx::IsNotNull( b )) {
HXLINE( 428)			{
HXLINE( 428)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this5,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 428)				_this5->x = bl->width;
HXDLIN( 428)				_this5->y = (targetRect->height - b->height);
HXDLIN( 428)				_this5->width = ((targetRect->width - bl->width) - br->width);
HXDLIN( 428)				_this5->height = b->height;
            			}
HXLINE( 429)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,b,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),((int)tile & (int)(int)16),smooth,raw);
            		}
HXLINE( 433)		HX_VARI(  ::flixel::math::FlxRect,l) = sourceRects->get(HX_("left",07,08,b0,47)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 434)		if (hx::IsNotNull( l )) {
HXLINE( 435)			{
HXLINE( 435)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this6,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 435)				_this6->x = (int)0;
HXDLIN( 435)				_this6->y = tl->height;
HXDLIN( 435)				_this6->width = l->width;
HXDLIN( 435)				_this6->height = ((targetRect->height - tl->height) - bl->height);
            			}
HXLINE( 436)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,l,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),((int)tile & (int)(int)1),smooth,raw);
            		}
HXLINE( 439)		HX_VARI(  ::flixel::math::FlxRect,r) = sourceRects->get(HX_("right",dc,0b,64,e9)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 440)		if (hx::IsNotNull( r )) {
HXLINE( 441)			{
HXLINE( 441)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this7,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 441)				_this7->x = (targetRect->width - r->width);
HXDLIN( 441)				_this7->y = tr->height;
HXDLIN( 441)				_this7->width = r->width;
HXDLIN( 441)				_this7->height = ((targetRect->height - tl->height) - bl->height);
            			}
HXLINE( 442)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,r,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),((int)tile & (int)(int)1),smooth,raw);
            		}
HXLINE( 445)		HX_VARI(  ::flixel::math::FlxRect,m) = sourceRects->get(HX_("middle",55,d3,5e,4c)).StaticCast<  ::flixel::math::FlxRect >();
HXLINE( 446)		if (hx::IsNotNull( m )) {
HXLINE( 447)			{
HXLINE( 447)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this8,"_this") = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2;
HXDLIN( 447)				_this8->x = l->width;
HXDLIN( 447)				_this8->y = t->height;
HXDLIN( 447)				_this8->width = ((targetRect->width - l->width) - r->width);
HXDLIN( 447)				_this8->height = ((targetRect->height - t->height) - b->height);
            			}
HXLINE( 448)			::flixel::addons::ui::FlxUI9SliceSprite_obj::paintBitmapSection(g,assetID,m,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticFlxRect2,null(),tile,smooth,raw);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FlxUI9SliceSprite_obj,paintCompoundBitmap,(void))

void FlxUI9SliceSprite_obj::paintBitmapSection( ::openfl::_legacy::display::BitmapData g,::String assetId, ::flixel::math::FlxRect src, ::flixel::math::FlxRect dst, ::openfl::_legacy::display::BitmapData srcData,hx::Null< int >  __o_tile,hx::Null< bool >  __o_smooth, ::openfl::_legacy::display::BitmapData raw){
int tile = __o_tile.Default(0);
bool smooth = __o_smooth.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_453_paintBitmapSection)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(assetId,"assetId")
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(dst,"dst")
            	HX_STACK_ARG(srcData,"srcData")
            	HX_STACK_ARG(tile,"tile")
            	HX_STACK_ARG(smooth,"smooth")
            	HX_STACK_ARG(raw,"raw")
HXLINE( 454)		if (hx::IsNull( srcData )) {
HXLINE( 456)			if (hx::IsNotNull( raw )) {
HXLINE( 458)				srcData = raw;
            			}
            			else {
HXLINE( 462)				srcData = ::flixel::addons::ui::U_obj::getBmp(assetId);
            			}
            		}
HXLINE( 466)		src->x = ::Std_obj::_hx_int(src->x);
HXLINE( 467)		src->y = ::Std_obj::_hx_int(src->y);
HXLINE( 468)		src->width = ::Std_obj::_hx_int(src->width);
HXLINE( 469)		src->height = ::Std_obj::_hx_int(src->height);
HXLINE( 471)		dst->x = ::Std_obj::_hx_int(dst->x);
HXLINE( 472)		dst->y = ::Std_obj::_hx_int(dst->y);
HXLINE( 473)		dst->width = ::Std_obj::_hx_int(dst->width);
HXLINE( 474)		dst->height = ::Std_obj::_hx_int(dst->height);
HXLINE( 476)		HX_VARI(  ::openfl::_legacy::display::BitmapData,section) = null();
HXLINE( 477)		HX_VARI( ::String,cacheId) = null();
HXLINE( 478)		bool _hx_tmp;
HXDLIN( 478)		if ((::flixel::addons::ui::FlxUI9SliceSprite_obj::useSectionCache == true)) {
HXLINE( 478)			_hx_tmp = hx::IsNotNull( assetId );
            		}
            		else {
HXLINE( 478)			_hx_tmp = false;
            		}
HXDLIN( 478)		if (_hx_tmp) {
HXLINE( 480)			if (hx::IsNull( ::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache )) {
HXLINE( 482)				::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 484)			cacheId = (((((((((assetId + HX_("_",5f,00,00,00)) + src->x) + HX_("_",5f,00,00,00)) + src->y) + HX_("_",5f,00,00,00)) + src->width) + HX_("_",5f,00,00,00)) + src->height) + HX_("_",5f,00,00,00));
HXLINE( 485)			section = ::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache->get(cacheId).StaticCast<  ::openfl::_legacy::display::BitmapData >();
            		}
HXLINE( 488)		if (hx::IsNull( section )) {
HXLINE( 491)			HX_VARI_NAME( int,section1,"section") = ::Std_obj::_hx_int(src->width);
HXDLIN( 491)			section =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,section1,::Std_obj::_hx_int(src->height),true,(int)16777215,null());
HXLINE( 493)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->x = src->x;
HXLINE( 494)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->y = src->y;
HXLINE( 495)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->width = src->width;
HXLINE( 496)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->height = src->height;
HXLINE( 498)			section->copyPixels(srcData,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPointZero,null(),null(),null());
HXLINE( 500)			bool _hx_tmp1;
HXDLIN( 500)			if ((::flixel::addons::ui::FlxUI9SliceSprite_obj::useSectionCache == true)) {
HXLINE( 500)				_hx_tmp1 = hx::IsNotNull( cacheId );
            			}
            			else {
HXLINE( 500)				_hx_tmp1 = false;
            			}
HXDLIN( 500)			if (_hx_tmp1) {
HXLINE( 501)				::flixel::addons::ui::FlxUI9SliceSprite_obj::sectionCache->set(cacheId,section);
            			}
HXLINE( 503)			::flixel::addons::ui::FlxUI9SliceSprite_obj::bitmapsCreated++;
            		}
HXLINE( 506)		bool _hx_tmp2;
HXDLIN( 506)		if ((dst->width > (int)0)) {
HXLINE( 506)			_hx_tmp2 = (dst->height > (int)0);
            		}
            		else {
HXLINE( 506)			_hx_tmp2 = false;
            		}
HXDLIN( 506)		if (_hx_tmp2) {
HXLINE( 508)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->x = dst->x;
HXLINE( 509)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->y = dst->y;
HXLINE( 510)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->width = dst->width;
HXLINE( 511)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2->height = dst->height;
HXLINE( 513)			::flixel::addons::ui::FlxUI9SliceSprite_obj::bitmapFillRect(g,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect2,section,tile,smooth);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(FlxUI9SliceSprite_obj,paintBitmapSection,(void))

void FlxUI9SliceSprite_obj::bitmapFillRect( ::openfl::_legacy::display::BitmapData g, ::openfl::_legacy::geom::Rectangle dst, ::openfl::_legacy::display::BitmapData section,hx::Null< int >  __o_tile,hx::Null< bool >  __o_smooth_){
int tile = __o_tile.Default(0);
bool smooth_ = __o_smooth_.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_517_bitmapFillRect)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(dst,"dst")
            	HX_STACK_ARG(section,"section")
            	HX_STACK_ARG(tile,"tile")
            	HX_STACK_ARG(smooth_,"smooth_")
HXLINE( 524)		HX_VARI( int,final_pixels) = ::Std_obj::_hx_int(dst->width);
HXDLIN( 524)		HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,final_pixels1,"final_pixels") =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,final_pixels,::Std_obj::_hx_int(dst->height),true,(int)0,null());
HXLINE( 526)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix->identity();
HXLINE( 529)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->x = (int)0;
HXLINE( 530)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->y = (int)0;
HXLINE( 531)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width = section->get_width();
HXLINE( 532)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->height = section->get_height();
HXLINE( 534)		if ((((int)tile & (int)(int)16) == (int)0)) {
HXLINE( 535)			 ::openfl::_legacy::geom::Matrix _hx_tmp = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix;
HXDLIN( 535)			HX_VARI_NAME( Float,dst1,"dst") = dst->width;
HXDLIN( 535)			_hx_tmp->scale(((Float)dst1 / (Float)section->get_width()),((Float)1.0));
HXLINE( 536)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width = dst->width;
            		}
HXLINE( 538)		if ((((int)tile & (int)(int)1) == (int)0)) {
HXLINE( 539)			 ::openfl::_legacy::geom::Matrix _hx_tmp1 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix;
HXDLIN( 539)			HX_VARI_NAME( Float,dst2,"dst") = dst->height;
HXDLIN( 539)			_hx_tmp1->scale(((Float)1.0),((Float)dst2 / (Float)section->get_height()));
HXLINE( 540)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->height = dst->height;
            		}
HXLINE( 548)		bool _hx_tmp2;
HXDLIN( 548)		int _hx_tmp3 = section->get_width();
HXDLIN( 548)		if ((_hx_tmp3 == dst->width)) {
HXLINE( 548)			int _hx_tmp4 = section->get_height();
HXDLIN( 548)			_hx_tmp2 = (_hx_tmp4 == dst->height);
            		}
            		else {
HXLINE( 548)			_hx_tmp2 = false;
            		}
HXDLIN( 548)		if (_hx_tmp2) {
HXLINE( 549)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = (int)0;
HXLINE( 550)			::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = (int)0;
HXLINE( 551)			 ::openfl::_legacy::geom::Rectangle _hx_tmp5 = section->get_rect();
HXDLIN( 551)			final_pixels1->copyPixels(section,_hx_tmp5,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
            		}
            		else {
HXLINE( 553)			if (smooth_) {
HXLINE( 554)				final_pixels1->draw(section,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix,null(),null(),null(),true);
            			}
            			else {
HXLINE( 556)				final_pixels1->draw(section,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticMatrix,null(),null(),null(),false);
            			}
            		}
HXLINE( 561)		if ((tile != (int)0)) {
HXLINE( 567)			if ((((int)tile & (int)(int)16) == (int)16)) {
HXLINE( 569)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = (int)0;
HXLINE( 570)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = (int)0;
HXLINE( 572)				while((::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x < dst->width)){
HXLINE( 573)					 ::openfl::_legacy::geom::Point _hx_tmp6 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint;
HXDLIN( 573)					_hx_tmp6->x = (_hx_tmp6->x + ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width);
HXLINE( 576)					final_pixels1->copyPixels(final_pixels1,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
            				}
            			}
HXLINE( 586)			if ((((int)tile & (int)(int)1) == (int)1)) {
HXLINE( 588)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = (int)0;
HXLINE( 589)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = (int)0;
HXLINE( 592)				::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->width = final_pixels1->get_width();
HXLINE( 594)				while((::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y < dst->height)){
HXLINE( 595)					 ::openfl::_legacy::geom::Point _hx_tmp7 = ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint;
HXDLIN( 595)					_hx_tmp7->y = (_hx_tmp7->y + ::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect->height);
HXLINE( 599)					final_pixels1->copyPixels(final_pixels1,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticRect,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
            				}
            			}
            		}
HXLINE( 608)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->x = dst->x;
HXLINE( 609)		::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint->y = dst->y;
HXLINE( 612)		 ::openfl::_legacy::geom::Rectangle _hx_tmp8 = final_pixels1->get_rect();
HXDLIN( 612)		g->copyPixels(final_pixels1,_hx_tmp8,::flixel::addons::ui::FlxUI9SliceSprite_obj::_staticPoint,null(),null(),null());
HXLINE( 615)		::flixel::util::FlxDestroyUtil_obj::dispose(final_pixels1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxUI9SliceSprite_obj,bitmapFillRect,(void))


hx::ObjectPtr< FlxUI9SliceSprite_obj > FlxUI9SliceSprite_obj::__new(Float X,Float Y, ::Dynamic Graphic, ::openfl::_legacy::geom::Rectangle Rect,::Array< int > Slice9,hx::Null< int >  __o_Tile,hx::Null< bool >  __o_Smooth,::String __o_Id,hx::Null< Float >  __o_Ratio, ::flixel::math::FlxPoint Resize_point,hx::Null< int >  __o_Resize_axis,hx::Null< bool >  __o_DeferResize) {
	hx::ObjectPtr< FlxUI9SliceSprite_obj > __this = new FlxUI9SliceSprite_obj();
	__this->__construct(X,Y,Graphic,Rect,Slice9,__o_Tile,__o_Smooth,__o_Id,__o_Ratio,Resize_point,__o_Resize_axis,__o_DeferResize);
	return __this;
}

hx::ObjectPtr< FlxUI9SliceSprite_obj > FlxUI9SliceSprite_obj::__alloc(hx::Ctx *_hx_ctx,Float X,Float Y, ::Dynamic Graphic, ::openfl::_legacy::geom::Rectangle Rect,::Array< int > Slice9,hx::Null< int >  __o_Tile,hx::Null< bool >  __o_Smooth,::String __o_Id,hx::Null< Float >  __o_Ratio, ::flixel::math::FlxPoint Resize_point,hx::Null< int >  __o_Resize_axis,hx::Null< bool >  __o_DeferResize) {
	FlxUI9SliceSprite_obj *__this = (FlxUI9SliceSprite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUI9SliceSprite_obj), true, "flixel.addons.ui.FlxUI9SliceSprite"));
	*(void **)__this = FlxUI9SliceSprite_obj::_hx_vtable;
	__this->__construct(X,Y,Graphic,Rect,Slice9,__o_Tile,__o_Smooth,__o_Id,__o_Ratio,Resize_point,__o_Resize_axis,__o_DeferResize);
	return __this;
}

FlxUI9SliceSprite_obj::FlxUI9SliceSprite_obj()
{
}

void FlxUI9SliceSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUI9SliceSprite);
	HX_MARK_MEMBER_NAME(_bmpCanvas,"_bmpCanvas");
	HX_MARK_MEMBER_NAME(paintScale9_id,"paintScale9_id");
	HX_MARK_MEMBER_NAME(_slice9,"_slice9");
	HX_MARK_MEMBER_NAME(_tile,"_tile");
	HX_MARK_MEMBER_NAME(_smooth,"_smooth");
	HX_MARK_MEMBER_NAME(_asset_id,"_asset_id");
	HX_MARK_MEMBER_NAME(_raw_pixels,"_raw_pixels");
	 ::flixel::addons::ui::FlxUISprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUI9SliceSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_bmpCanvas,"_bmpCanvas");
	HX_VISIT_MEMBER_NAME(paintScale9_id,"paintScale9_id");
	HX_VISIT_MEMBER_NAME(_slice9,"_slice9");
	HX_VISIT_MEMBER_NAME(_tile,"_tile");
	HX_VISIT_MEMBER_NAME(_smooth,"_smooth");
	HX_VISIT_MEMBER_NAME(_asset_id,"_asset_id");
	HX_VISIT_MEMBER_NAME(_raw_pixels,"_raw_pixels");
	 ::flixel::addons::ui::FlxUISprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUI9SliceSprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_tile") ) { return hx::Val( _tile); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_slice9") ) { return hx::Val( _slice9); }
		if (HX_FIELD_EQ(inName,"_smooth") ) { return hx::Val( _smooth); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_asset_id") ) { return hx::Val( _asset_id); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_bmpCanvas") ) { return hx::Val( _bmpCanvas); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_raw_pixels") ) { return hx::Val( _raw_pixels); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"purgeSections") ) { return hx::Val( purgeSections_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"paintScale9_id") ) { return hx::Val( paintScale9_id); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"noLongerUsingCachedID") ) { return hx::Val( noLongerUsingCachedID_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUI9SliceSprite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_staticRect") ) { outValue = _staticRect; return true; }
		if (HX_FIELD_EQ(inName,"paintScale9") ) { outValue = paintScale9_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sectionCache") ) { outValue = sectionCache; return true; }
		if (HX_FIELD_EQ(inName,"cacheCounter") ) { outValue = cacheCounter; return true; }
		if (HX_FIELD_EQ(inName,"_staticPoint") ) { outValue = _staticPoint; return true; }
		if (HX_FIELD_EQ(inName,"_staticRect2") ) { outValue = _staticRect2; return true; }
		if (HX_FIELD_EQ(inName,"_staticRects") ) { outValue = _staticRects; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_staticMatrix") ) { outValue = _staticMatrix; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bitmapsCreated") ) { outValue = bitmapsCreated; return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect") ) { outValue = _staticFlxRect; return true; }
		if (HX_FIELD_EQ(inName,"bitmapFillRect") ) { outValue = bitmapFillRect_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"useSectionCache") ) { outValue = useSectionCache; return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect2") ) { outValue = _staticFlxRect2; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_staticPointZero") ) { outValue = _staticPointZero; return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getRectFromString") ) { outValue = getRectFromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makePaintScale9Id") ) { outValue = makePaintScale9Id_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"paintBitmapSection") ) { outValue = paintBitmapSection_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"paintCompoundBitmap") ) { outValue = paintCompoundBitmap_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getRectIntsFromString") ) { outValue = getRectIntsFromString_dyn(); return true; }
	}
	return false;
}

hx::Val FlxUI9SliceSprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_tile") ) { _tile=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_slice9") ) { _slice9=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_smooth") ) { _smooth=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_asset_id") ) { _asset_id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_bmpCanvas") ) { _bmpCanvas=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_raw_pixels") ) { _raw_pixels=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"paintScale9_id") ) { paintScale9_id=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxUI9SliceSprite_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_staticRect") ) { _staticRect=ioValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sectionCache") ) { sectionCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cacheCounter") ) { cacheCounter=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticPoint") ) { _staticPoint=ioValue.Cast<  ::openfl::_legacy::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticRect2") ) { _staticRect2=ioValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticRects") ) { _staticRects=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_staticMatrix") ) { _staticMatrix=ioValue.Cast<  ::openfl::_legacy::geom::Matrix >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bitmapsCreated") ) { bitmapsCreated=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect") ) { _staticFlxRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"useSectionCache") ) { useSectionCache=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_staticFlxRect2") ) { _staticFlxRect2=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_staticPointZero") ) { _staticPointZero=ioValue.Cast<  ::openfl::_legacy::geom::Point >(); return true; }
	}
	return false;
}

void FlxUI9SliceSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_bmpCanvas","\xbe","\x02","\xc2","\x94"));
	outFields->push(HX_HCSTRING("paintScale9_id","\x6d","\xbb","\xfa","\xd2"));
	outFields->push(HX_HCSTRING("_slice9","\x46","\x15","\x7b","\xde"));
	outFields->push(HX_HCSTRING("_tile","\x0d","\xe7","\x0d","\x00"));
	outFields->push(HX_HCSTRING("_smooth","\xcd","\x19","\xe2","\x75"));
	outFields->push(HX_HCSTRING("_asset_id","\x69","\xd5","\x4f","\x11"));
	outFields->push(HX_HCSTRING("_raw_pixels","\x03","\x05","\xc0","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUI9SliceSprite_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxUI9SliceSprite_obj,_bmpCanvas),HX_HCSTRING("_bmpCanvas","\xbe","\x02","\xc2","\x94")},
	{hx::fsString,(int)offsetof(FlxUI9SliceSprite_obj,paintScale9_id),HX_HCSTRING("paintScale9_id","\x6d","\xbb","\xfa","\xd2")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxUI9SliceSprite_obj,_slice9),HX_HCSTRING("_slice9","\x46","\x15","\x7b","\xde")},
	{hx::fsInt,(int)offsetof(FlxUI9SliceSprite_obj,_tile),HX_HCSTRING("_tile","\x0d","\xe7","\x0d","\x00")},
	{hx::fsBool,(int)offsetof(FlxUI9SliceSprite_obj,_smooth),HX_HCSTRING("_smooth","\xcd","\x19","\xe2","\x75")},
	{hx::fsString,(int)offsetof(FlxUI9SliceSprite_obj,_asset_id),HX_HCSTRING("_asset_id","\x69","\xd5","\x4f","\x11")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxUI9SliceSprite_obj,_raw_pixels),HX_HCSTRING("_raw_pixels","\x03","\x05","\xc0","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUI9SliceSprite_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxUI9SliceSprite_obj::bitmapsCreated,HX_HCSTRING("bitmapsCreated","\xa4","\x38","\xf9","\x81")},
	{hx::fsBool,(void *) &FlxUI9SliceSprite_obj::useSectionCache,HX_HCSTRING("useSectionCache","\x04","\xcd","\xd1","\x77")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &FlxUI9SliceSprite_obj::sectionCache,HX_HCSTRING("sectionCache","\x1d","\x86","\xf1","\x9f")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &FlxUI9SliceSprite_obj::cacheCounter,HX_HCSTRING("cacheCounter","\xda","\xe8","\xbe","\xcb")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(void *) &FlxUI9SliceSprite_obj::_staticPoint,HX_HCSTRING("_staticPoint","\xc3","\x3e","\x66","\x41")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(void *) &FlxUI9SliceSprite_obj::_staticRect,HX_HCSTRING("_staticRect","\x11","\x12","\xdd","\x7f")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(void *) &FlxUI9SliceSprite_obj::_staticRect2,HX_HCSTRING("_staticRect2","\x01","\xbd","\x92","\x61")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(void *) &FlxUI9SliceSprite_obj::_staticPointZero,HX_HCSTRING("_staticPointZero","\x8b","\x97","\x4a","\x47")},
	{hx::fsObject /*::openfl::_legacy::geom::Matrix*/ ,(void *) &FlxUI9SliceSprite_obj::_staticMatrix,HX_HCSTRING("_staticMatrix","\x6e","\xd0","\xaa","\xbc")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxUI9SliceSprite_obj::_staticFlxRect,HX_HCSTRING("_staticFlxRect","\xe9","\xab","\x12","\xd4")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(void *) &FlxUI9SliceSprite_obj::_staticFlxRect2,HX_HCSTRING("_staticFlxRect2","\x29","\xc0","\x43","\xbc")},
	{hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_NONE,HX_HCSTRING("TILE_NONE","\xa9","\x1c","\x74","\x5c")},
	{hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_BOTH,HX_HCSTRING("TILE_BOTH","\x72","\x92","\x85","\x54")},
	{hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_H,HX_HCSTRING("TILE_H","\xb7","\x8d","\xab","\xd0")},
	{hx::fsInt,(void *) &FlxUI9SliceSprite_obj::TILE_V,HX_HCSTRING("TILE_V","\xc5","\x8d","\xab","\xd0")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &FlxUI9SliceSprite_obj::_staticRects,HX_HCSTRING("_staticRects","\x42","\xbd","\x92","\x61")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUI9SliceSprite_obj_sMemberFields[] = {
	HX_HCSTRING("_bmpCanvas","\xbe","\x02","\xc2","\x94"),
	HX_HCSTRING("paintScale9_id","\x6d","\xbb","\xfa","\xd2"),
	HX_HCSTRING("_slice9","\x46","\x15","\x7b","\xde"),
	HX_HCSTRING("_tile","\x0d","\xe7","\x0d","\x00"),
	HX_HCSTRING("_smooth","\xcd","\x19","\xe2","\x75"),
	HX_HCSTRING("_asset_id","\x69","\xd5","\x4f","\x11"),
	HX_HCSTRING("_raw_pixels","\x03","\x05","\xc0","\xf2"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("noLongerUsingCachedID","\x37","\x33","\x42","\x98"),
	HX_HCSTRING("purgeSections","\x39","\x4c","\xd3","\x23"),
	::String(null()) };

static void FlxUI9SliceSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::bitmapsCreated,"bitmapsCreated");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::useSectionCache,"useSectionCache");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::sectionCache,"sectionCache");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::cacheCounter,"cacheCounter");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPoint,"_staticPoint");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect,"_staticRect");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect2,"_staticRect2");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPointZero,"_staticPointZero");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticMatrix,"_staticMatrix");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect,"_staticFlxRect");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect2,"_staticFlxRect2");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_NONE,"TILE_NONE");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_BOTH,"TILE_BOTH");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_H,"TILE_H");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_V,"TILE_V");
	HX_MARK_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRects,"_staticRects");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUI9SliceSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::bitmapsCreated,"bitmapsCreated");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::useSectionCache,"useSectionCache");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::sectionCache,"sectionCache");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::cacheCounter,"cacheCounter");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPoint,"_staticPoint");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect,"_staticRect");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRect2,"_staticRect2");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticPointZero,"_staticPointZero");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticMatrix,"_staticMatrix");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect,"_staticFlxRect");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticFlxRect2,"_staticFlxRect2");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_NONE,"TILE_NONE");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_BOTH,"TILE_BOTH");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_H,"TILE_H");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::TILE_V,"TILE_V");
	HX_VISIT_MEMBER_NAME(FlxUI9SliceSprite_obj::_staticRects,"_staticRects");
};

#endif

hx::Class FlxUI9SliceSprite_obj::__mClass;

static ::String FlxUI9SliceSprite_obj_sStaticFields[] = {
	HX_HCSTRING("bitmapsCreated","\xa4","\x38","\xf9","\x81"),
	HX_HCSTRING("useSectionCache","\x04","\xcd","\xd1","\x77"),
	HX_HCSTRING("sectionCache","\x1d","\x86","\xf1","\x9f"),
	HX_HCSTRING("cacheCounter","\xda","\xe8","\xbe","\xcb"),
	HX_HCSTRING("_staticPoint","\xc3","\x3e","\x66","\x41"),
	HX_HCSTRING("_staticRect","\x11","\x12","\xdd","\x7f"),
	HX_HCSTRING("_staticRect2","\x01","\xbd","\x92","\x61"),
	HX_HCSTRING("_staticPointZero","\x8b","\x97","\x4a","\x47"),
	HX_HCSTRING("_staticMatrix","\x6e","\xd0","\xaa","\xbc"),
	HX_HCSTRING("_staticFlxRect","\xe9","\xab","\x12","\xd4"),
	HX_HCSTRING("_staticFlxRect2","\x29","\xc0","\x43","\xbc"),
	HX_HCSTRING("TILE_NONE","\xa9","\x1c","\x74","\x5c"),
	HX_HCSTRING("TILE_BOTH","\x72","\x92","\x85","\x54"),
	HX_HCSTRING("TILE_H","\xb7","\x8d","\xab","\xd0"),
	HX_HCSTRING("TILE_V","\xc5","\x8d","\xab","\xd0"),
	HX_HCSTRING("_staticRects","\x42","\xbd","\x92","\x61"),
	HX_HCSTRING("getRectFromString","\x55","\x83","\x89","\xc5"),
	HX_HCSTRING("getRectIntsFromString","\x19","\xc6","\x60","\x39"),
	HX_HCSTRING("paintScale9","\xad","\xa0","\xab","\x9e"),
	HX_HCSTRING("makePaintScale9Id","\x1a","\x1f","\xe5","\xef"),
	HX_HCSTRING("paintCompoundBitmap","\xf8","\x4d","\x40","\x4e"),
	HX_HCSTRING("paintBitmapSection","\x38","\x37","\xda","\xed"),
	HX_HCSTRING("bitmapFillRect","\x56","\x18","\xff","\x37"),
	::String(null())
};

void FlxUI9SliceSprite_obj::__register()
{
	hx::Object *dummy = new FlxUI9SliceSprite_obj;
	FlxUI9SliceSprite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUI9SliceSprite","\x13","\xd2","\x35","\x7a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUI9SliceSprite_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxUI9SliceSprite_obj::__SetStatic;
	__mClass->mMarkFunc = FlxUI9SliceSprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUI9SliceSprite_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUI9SliceSprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUI9SliceSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUI9SliceSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUI9SliceSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUI9SliceSprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUI9SliceSprite_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_21_boot)
HXLINE(  21)		bitmapsCreated = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_25_boot)
HXLINE(  25)		useSectionCache = true;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_45_boot)
HXLINE(  45)		_staticPoint =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_46_boot)
HXLINE(  46)		_staticRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_47_boot)
HXLINE(  47)		_staticRect2 =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_49_boot)
HXLINE(  49)		_staticPointZero =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_50_boot)
HXLINE(  50)		_staticMatrix =  ::openfl::_legacy::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_52_boot)
HXLINE(  52)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(  52)			_this->x = (int)0;
HXDLIN(  52)			_this->y = (int)0;
HXDLIN(  52)			_this->width = (int)0;
HXDLIN(  52)			_this->height = (int)0;
HXDLIN(  52)			_this->_inPool = false;
HXDLIN(  52)			return _this;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_52_boot)
HXLINE(  52)		_staticFlxRect =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_53_boot)
HXLINE(  53)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(  53)			_this->x = (int)0;
HXDLIN(  53)			_this->y = (int)0;
HXDLIN(  53)			_this->width = (int)0;
HXDLIN(  53)			_this->height = (int)0;
HXDLIN(  53)			_this->_inPool = false;
HXDLIN(  53)			return _this;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_53_boot)
HXLINE(  53)		_staticFlxRect2 =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_56_boot)
HXLINE(  56)		TILE_NONE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_57_boot)
HXLINE(  57)		TILE_BOTH = (int)17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_58_boot)
HXLINE(  58)		TILE_H = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_99c1e4be2c673cd2_59_boot)
HXLINE(  59)		TILE_V = (int)1;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
