// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISubState
#include <flixel/addons/ui/FlxUISubState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltip
#include <flixel/addons/ui/FlxUITooltip.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui__FlxUITooltipManager_FlxUITooltipEntry
#include <flixel/addons/ui/_FlxUITooltipManager/FlxUITooltipEntry.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_17_new,"flixel.addons.ui.FlxUITooltipManager","new",0x04a1a751,"flixel.addons.ui.FlxUITooltipManager.new","flixel/addons/ui/FlxUITooltipManager.hx",17,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_57_init,"flixel.addons.ui.FlxUITooltipManager","init",0x058976ff,"flixel.addons.ui.FlxUITooltipManager.init","flixel/addons/ui/FlxUITooltipManager.hx",57,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_75_destroy,"flixel.addons.ui.FlxUITooltipManager","destroy",0x5708d06b,"flixel.addons.ui.FlxUITooltipManager.destroy","flixel/addons/ui/FlxUITooltipManager.hx",75,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_90_clear,"flixel.addons.ui.FlxUITooltipManager","clear",0x5d01a6be,"flixel.addons.ui.FlxUITooltipManager.clear","flixel/addons/ui/FlxUITooltipManager.hx",90,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_106_hideCurrent,"flixel.addons.ui.FlxUITooltipManager","hideCurrent",0xc5a73b88,"flixel.addons.ui.FlxUITooltipManager.hideCurrent","flixel/addons/ui/FlxUITooltipManager.hx",106,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_119_doesCurrentTooltipBelongTo,"flixel.addons.ui.FlxUITooltipManager","doesCurrentTooltipBelongTo",0x652b1ecc,"flixel.addons.ui.FlxUITooltipManager.doesCurrentTooltipBelongTo","flixel/addons/ui/FlxUITooltipManager.hx",119,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_160_enableTooltipFor,"flixel.addons.ui.FlxUITooltipManager","enableTooltipFor",0x662d9098,"flixel.addons.ui.FlxUITooltipManager.enableTooltipFor","flixel/addons/ui/FlxUITooltipManager.hx",160,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_185_add,"flixel.addons.ui.FlxUITooltipManager","add",0x0497c912,"flixel.addons.ui.FlxUITooltipManager.add","flixel/addons/ui/FlxUITooltipManager.hx",185,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_266_remove,"flixel.addons.ui.FlxUITooltipManager","remove",0x0150f1f3,"flixel.addons.ui.FlxUITooltipManager.remove","flixel/addons/ui/FlxUITooltipManager.hx",266,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_293_update,"flixel.addons.ui.FlxUITooltipManager","update",0x83cddbb8,"flixel.addons.ui.FlxUITooltipManager.update","flixel/addons/ui/FlxUITooltipManager.hx",293,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_361_hide,"flixel.addons.ui.FlxUITooltipManager","hide",0x04dc70b1,"flixel.addons.ui.FlxUITooltipManager.hide","flixel/addons/ui/FlxUITooltipManager.hx",361,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_377_findBtn,"flixel.addons.ui.FlxUITooltipManager","findBtn",0x57e87714,"flixel.addons.ui.FlxUITooltipManager.findBtn","flixel/addons/ui/FlxUITooltipManager.hx",377,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_390_findObj,"flixel.addons.ui.FlxUITooltipManager","findObj",0x57f244af,"flixel.addons.ui.FlxUITooltipManager.findObj","flixel/addons/ui/FlxUITooltipManager.hx",390,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_403_show,"flixel.addons.ui.FlxUITooltipManager","show",0x0c2110ec,"flixel.addons.ui.FlxUITooltipManager.show","flixel/addons/ui/FlxUITooltipManager.hx",403,0x892d3fe0)
HX_DEFINE_STACK_FRAME(_hx_pos_900bbcecd25701b4_475_checkAutoFlip,"flixel.addons.ui.FlxUITooltipManager","checkAutoFlip",0x94d6acd5,"flixel.addons.ui.FlxUITooltipManager.checkAutoFlip","flixel/addons/ui/FlxUITooltipManager.hx",475,0x892d3fe0)
namespace flixel{
namespace addons{
namespace ui{

void FlxUITooltipManager_obj::__construct( ::flixel::addons::ui::FlxUIState State, ::flixel::addons::ui::FlxUISubState SubState){
            	HX_GC_STACKFRAME(&_hx_pos_900bbcecd25701b4_17_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(State,"State")
            	HX_STACK_ARG(SubState,"SubState")
HXLINE( 353)		this->current = (int)-1;
HXLINE( 344)		this->_init = false;
HXLINE(  34)		this->delay = ((Float)0.1);
HXLINE(  33)		this->showOnClick = false;
HXLINE(  32)		this->defaultStyle = null();
HXLINE(  27)		this->defaultAnchor = null();
HXLINE(  22)		this->autoFlipAnchor = true;
HXLINE(  38)		if (hx::IsNotNull( State )) {
HXLINE(  40)			this->state = State;
            		}
            		else {
HXLINE(  42)			if (hx::IsNotNull( SubState )) {
HXLINE(  44)				this->subState = SubState;
            			}
            		}
HXLINE(  46)		this->list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  47)		this->tooltip =  ::flixel::addons::ui::FlxUITooltip_obj::__alloc( HX_CTX ,(int)100,(int)50,null(),null());
HXLINE(  48)		this->lastPosition =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  49)		this->defaultAnchor = this->tooltip->anchor->clone();
HXLINE(  50)		this->defaultStyle = ::flixel::addons::ui::FlxUITooltip_obj::cloneStyle(this->tooltip->style);
            	}

Dynamic FlxUITooltipManager_obj::__CreateEmpty() { return new FlxUITooltipManager_obj; }

void *FlxUITooltipManager_obj::_hx_vtable = 0;

Dynamic FlxUITooltipManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUITooltipManager_obj > _hx_result = new FlxUITooltipManager_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxUITooltipManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2808c981;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_addons_ui_FlxUITooltipManager__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::addons::ui::FlxUITooltipManager_obj::destroy,
};

void *FlxUITooltipManager_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_addons_ui_FlxUITooltipManager__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxUITooltipManager_obj::init(){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_57_init)
            	HX_STACK_THIS(this)
HXLINE(  58)		HX_VAR(  ::flixel::addons::ui::FlxUI,ui);
HXDLIN(  58)		if (hx::IsNotNull( this->state )) {
HXLINE(  58)			ui = this->state->_ui;
            		}
            		else {
HXLINE(  58)			if (hx::IsNotNull( this->subState )) {
HXLINE(  58)				ui = this->subState->_ui;
            			}
            			else {
HXLINE(  58)				ui = null();
            			}
            		}
HXLINE(  59)		if (hx::IsNull( ui )) {
HXLINE(  61)			return;
            		}
HXLINE(  66)		bool _hx_tmp;
HXDLIN(  66)		if (hx::IsNotNull( ui )) {
HXLINE(  66)			_hx_tmp = hx::IsNotNull( ui->getDefinition(HX_("default:tooltip",ca,89,56,af),null()) );
            		}
            		else {
HXLINE(  66)			_hx_tmp = false;
            		}
HXDLIN(  66)		if (_hx_tmp) {
HXLINE(  69)			this->defaultStyle = ::flixel::addons::ui::FlxUITooltip_obj::cloneStyle(ui->_loadTooltipData(null())->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic));
HXLINE(  70)			this->tooltip->set_style(this->defaultStyle);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITooltipManager_obj,init,(void))

void FlxUITooltipManager_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_75_destroy)
            	HX_STACK_THIS(this)
HXLINE(  76)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->list);
HXDLIN(  76)		this->list = null();
HXLINE(  77)		this->tooltip = null();
HXLINE(  78)		this->lastPosition = null();
HXLINE(  79)		this->state = null();
HXLINE(  80)		this->subState = null();
HXLINE(  81)		this->defaultAnchor = null();
HXLINE(  82)		this->defaultStyle = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITooltipManager_obj,destroy,(void))

void FlxUITooltipManager_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_90_clear)
            	HX_STACK_THIS(this)
HXLINE(  90)		while((this->list->length > (int)0)){
HXLINE(  92)			HX_VARI(  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry,entry) = this->list->pop().StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >();
HXLINE(  93)			if (hx::IsNotNull( entry )) {
HXLINE(  95)				entry->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITooltipManager_obj,clear,(void))

void FlxUITooltipManager_obj::hideCurrent(){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_106_hideCurrent)
            	HX_STACK_THIS(this)
HXLINE( 106)		if ((this->current > (int)0)) {
HXLINE( 108)			this->hide(this->current);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITooltipManager_obj,hideCurrent,(void))

bool FlxUITooltipManager_obj::doesCurrentTooltipBelongTo( ::flixel::FlxSprite thing,hx::Null< bool >  __o_checkChildren){
bool checkChildren = __o_checkChildren.Default(true);
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_119_doesCurrentTooltipBelongTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(checkChildren,"checkChildren")
HXLINE( 120)		if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 123)			if ((this->findObj(( ( ::flixel::FlxObject)(thing) )) != (int)-1)) {
HXLINE( 123)				return true;
            			}
HXLINE( 125)			if (checkChildren) {
HXLINE( 128)				HX_VARI( int,_g) = (int)0;
HXDLIN( 128)				HX_VARI( ::Array< ::Dynamic>,_g1) = ( ( ::flixel::addons::ui::FlxUIGroup)(thing) )->group->members;
HXDLIN( 128)				while((_g < _g1->length)){
HXLINE( 128)					HX_VARI(  ::flixel::FlxSprite,member) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 128)					_g = (_g + (int)1);
HXLINE( 130)					if (this->doesCurrentTooltipBelongTo(member,null())) {
HXLINE( 132)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 137)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE( 139)				HX_VARI( int,i) = this->findBtn(thing);
HXLINE( 140)				if ((i == (int)-1)) {
HXLINE( 140)					return false;
            				}
HXLINE( 141)				return (i == this->current);
            			}
            			else {
HXLINE( 143)				if (::Std_obj::is(thing,hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 145)					HX_VARI_NAME( int,i1,"i") = this->findObj(( ( ::flixel::FlxObject)(thing) ));
HXLINE( 146)					if ((i1 == (int)-1)) {
HXLINE( 146)						return false;
            					}
HXLINE( 147)					return (i1 == this->current);
            				}
            			}
            		}
HXLINE( 149)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltipManager_obj,doesCurrentTooltipBelongTo,return )

bool FlxUITooltipManager_obj::enableTooltipFor( ::flixel::FlxObject thing,bool enabled){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_160_enableTooltipFor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(enabled,"enabled")
HXLINE( 161)		if (hx::IsNull( thing )) {
HXLINE( 161)			return false;
            		}
HXLINE( 163)		{
HXLINE( 163)			HX_VARI( int,_g) = (int)0;
HXDLIN( 163)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->list;
HXDLIN( 163)			while((_g < _g1->length)){
HXLINE( 163)				HX_VARI(  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry,entry) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >();
HXDLIN( 163)				_g = (_g + (int)1);
HXLINE( 165)				bool _hx_tmp;
HXDLIN( 165)				if (hx::IsNotEq( entry->obj,thing )) {
HXLINE( 165)					if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIButton >())) {
HXLINE( 165)						_hx_tmp = hx::IsEq( thing,entry->btn );
            					}
            					else {
HXLINE( 165)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 165)					_hx_tmp = true;
            				}
HXDLIN( 165)				if (_hx_tmp) {
HXLINE( 167)					entry->enabled = enabled;
HXLINE( 168)					return true;
            				}
            			}
            		}
HXLINE( 172)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltipManager_obj,enableTooltipFor,return )

void FlxUITooltipManager_obj::add( ::flixel::FlxObject thing, ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_900bbcecd25701b4_185_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(data,"data")
HXLINE( 186)		if (this->_init) {
HXLINE( 187)			data->__SetField(HX_("style",31,a5,1d,84),::flixel::addons::ui::FlxUITooltip_obj::styleFix(data->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic),this->defaultStyle),hx::paccDynamic);
            		}
HXLINE( 190)		HX_VARI( ::Dynamic,btn) = null();
HXLINE( 191)		HX_VARI( int,i) = (int)-1;
HXLINE( 192)		if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIButton >())) {
HXLINE( 194)			btn = thing;
HXLINE( 196)			i = this->findBtn(btn);
HXLINE( 198)			if ((i == (int)-1)) {
HXLINE( 201)				::Array< ::Dynamic> _hx_tmp = this->list;
HXDLIN( 201)				_hx_tmp->push( ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry_obj::__alloc( HX_CTX ,btn,data,null()));
            			}
            			else {
HXLINE( 206)				this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->data = data;
HXLINE( 207)				this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->count = (int)0;
            			}
            		}
            		else {
HXLINE( 212)			i = this->findObj(thing);
HXLINE( 214)			if ((i == (int)-1)) {
HXLINE( 219)				HX_VARI(  ::flixel::addons::ui::FlxUIButton,b) =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("",00,00,00,00),null(),false,true);
HXLINE( 220)				Float _hx_tmp1 = thing->get_width();
HXDLIN( 220)				b->resize(_hx_tmp1,thing->get_height());
HXLINE( 222)				btn = b;
HXLINE( 226)				::flixel::IFlxSprite_obj::set_x(btn,thing->x);
HXLINE( 227)				::flixel::IFlxSprite_obj::set_y(btn,thing->y);
HXLINE( 228)				HX_VARI_NAME(  ::Dynamic,btn1,"btn") = btn->__Field(HX_("set_width",69,fe,5c,f1),hx::paccDynamic);
HXDLIN( 228)				btn1(thing->get_width());
HXLINE( 229)				HX_VARI_NAME(  ::Dynamic,btn2,"btn") = btn->__Field(HX_("set_height",24,16,51,f6),hx::paccDynamic);
HXDLIN( 229)				btn2(thing->get_height());
HXLINE( 230)				( ( ::flixel::math::FlxPoint)(btn->__Field(HX_("scrollFactor",bc,ec,cf,3b),hx::paccDynamic)) )->set(thing->scrollFactor->x,thing->scrollFactor->y);
HXLINE( 233)				if (hx::IsNotNull( this->state )) {
HXLINE( 235)					this->state->add(( ( ::flixel::FlxBasic)(btn) )).StaticCast<  ::flixel::FlxBasic >();
            				}
            				else {
HXLINE( 237)					if (hx::IsNotNull( this->subState )) {
HXLINE( 239)						this->subState->add(( ( ::flixel::FlxBasic)(btn) )).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
HXLINE( 243)				::Array< ::Dynamic> _hx_tmp2 = this->list;
HXDLIN( 243)				_hx_tmp2->push( ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry_obj::__alloc( HX_CTX ,btn,data,thing));
            			}
            			else {
HXLINE( 249)				this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->data = data;
HXLINE( 250)				this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->count = (int)0;
HXLINE( 252)				::flixel::IFlxSprite_obj::set_x(this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn,thing->x);
HXLINE( 253)				::flixel::IFlxSprite_obj::set_y(this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn,thing->y);
HXLINE( 254)				 ::Dynamic _hx_tmp3 = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn->__Field(HX_("set_width",69,fe,5c,f1),hx::paccDynamic);
HXDLIN( 254)				_hx_tmp3(thing->get_width());
HXLINE( 255)				 ::Dynamic _hx_tmp4 = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn->__Field(HX_("set_height",24,16,51,f6),hx::paccDynamic);
HXDLIN( 255)				_hx_tmp4(thing->get_height());
HXLINE( 256)				( ( ::flixel::math::FlxPoint)(this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn->__Field(HX_("scrollFactor",bc,ec,cf,3b),hx::paccDynamic)) )->set(thing->scrollFactor->x,thing->scrollFactor->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltipManager_obj,add,(void))

void FlxUITooltipManager_obj::remove( ::flixel::FlxObject thing){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_266_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
HXLINE( 267)		HX_VARI( ::Dynamic,btn) = null();
HXLINE( 268)		HX_VARI( int,i) = (int)-1;
HXLINE( 269)		if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIButton >())) {
HXLINE( 271)			btn = thing;
HXLINE( 272)			i = this->findBtn(btn);
            		}
            		else {
HXLINE( 276)			i = this->findObj(thing);
            		}
HXLINE( 278)		if ((i != (int)-1)) {
HXLINE( 280)			if ((this->current == i)) {
HXLINE( 282)				this->hide(this->current);
            			}
HXLINE( 284)			HX_VARI(  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry,entry) = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >();
HXLINE( 285)			this->list->removeRange(i,(int)1);
HXLINE( 286)			entry->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltipManager_obj,remove,(void))

void FlxUITooltipManager_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_293_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 293)		HX_VARI( int,_g1) = (int)0;
HXDLIN( 293)		HX_VARI( int,_g) = this->list->length;
HXDLIN( 293)		while((_g1 < _g)){
HXLINE( 293)			_g1 = (_g1 + (int)1);
HXDLIN( 293)			HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 295)			HX_VARI( ::Dynamic,btn) = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn;
HXLINE( 296)			HX_VARI(  ::flixel::FlxObject,obj) = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->obj;
HXLINE( 298)			if ((this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->enabled == false)) {
HXLINE( 300)				if ((this->current == i)) {
HXLINE( 302)					this->hide(i);
            				}
HXLINE( 304)				this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->count = (int)0;
HXLINE( 305)				continue;
            			}
HXLINE( 308)			if (hx::IsNotNull( obj )) {
HXLINE( 310)				::flixel::IFlxSprite_obj::set_x(btn,obj->x);
HXLINE( 311)				::flixel::IFlxSprite_obj::set_y(btn,obj->y);
HXLINE( 312)				::flixel::IFlxBasic_obj::set_visible(btn,obj->visible);
            			}
HXLINE( 315)			bool _hx_tmp;
HXDLIN( 315)			bool _hx_tmp1;
HXDLIN( 315)			if ((false != ( (bool)(btn->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ))) {
HXLINE( 315)				_hx_tmp1 = ( (bool)(btn->__Field(HX_("get_justMousedOut",ba,b6,ed,9f),hx::paccDynamic)()) );
            			}
            			else {
HXLINE( 315)				_hx_tmp1 = true;
            			}
HXDLIN( 315)			if (!(_hx_tmp1)) {
HXLINE( 315)				_hx_tmp = ( (bool)(btn->__Field(HX_("get_mouseIsOut",a8,46,15,55),hx::paccDynamic)()) );
            			}
            			else {
HXLINE( 315)				_hx_tmp = true;
            			}
HXDLIN( 315)			if (_hx_tmp) {
HXLINE( 317)				this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->count = (int)0;
HXLINE( 318)				this->hide(i);
            			}
            			else {
HXLINE( 320)				bool _hx_tmp2;
HXDLIN( 320)				if (!(( (bool)(btn->__Field(HX_("get_justMousedOver",a8,e1,12,50),hx::paccDynamic)()) ))) {
HXLINE( 320)					_hx_tmp2 = ( (bool)(btn->__Field(HX_("get_mouseIsOver",fa,41,89,1d),hx::paccDynamic)()) );
            				}
            				else {
HXLINE( 320)					_hx_tmp2 = true;
            				}
HXDLIN( 320)				if (_hx_tmp2) {
HXLINE( 322)					if (( (bool)(btn->__Field(HX_("get_mouseIsOver",fa,41,89,1d),hx::paccDynamic)()) )) {
HXLINE( 324)						 ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry _hx_tmp3 = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >();
HXDLIN( 324)						_hx_tmp3->count = (_hx_tmp3->count + elapsed);
            					}
            				}
            			}
HXLINE( 328)			bool _hx_tmp4;
HXDLIN( 328)			if (!((this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->count > this->delay))) {
HXLINE( 328)				if (hx::IsGreaterEq( this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->data->__Field(HX_("delay",83,d7,26,d7),hx::paccDynamic),(int)0 )) {
HXLINE( 328)					_hx_tmp4 = hx::IsGreater( this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->count,this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->data->__Field(HX_("delay",83,d7,26,d7),hx::paccDynamic) );
            				}
            				else {
HXLINE( 328)					_hx_tmp4 = false;
            				}
            			}
            			else {
HXLINE( 328)				_hx_tmp4 = true;
            			}
HXDLIN( 328)			if (_hx_tmp4) {
HXLINE( 330)				if ((this->current != i)) {
HXLINE( 332)					this->show(i);
            				}
            				else {
HXLINE( 334)					if (( (bool)(this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->data->__Field(HX_("moving",8e,f2,af,cc),hx::paccDynamic)) )) {
HXLINE( 336)						this->show(i);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltipManager_obj,update,(void))

void FlxUITooltipManager_obj::hide(int i){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_361_hide)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 361)		if ((this->current == i)) {
HXLINE( 363)			this->tooltip->hide();
HXLINE( 364)			if (hx::IsNotNull( this->state )) {
HXLINE( 366)				this->state->remove(this->tooltip,true).StaticCast<  ::flixel::FlxBasic >();
            			}
HXLINE( 368)			if (hx::IsNotNull( this->subState )) {
HXLINE( 370)				this->subState->remove(this->tooltip,true).StaticCast<  ::flixel::FlxBasic >();
            			}
HXLINE( 372)			this->current = (int)-1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltipManager_obj,hide,(void))

int FlxUITooltipManager_obj::findBtn(::Dynamic btn){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_377_findBtn)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(btn,"btn")
HXLINE( 378)		if (hx::IsNull( btn )) {
HXLINE( 378)			return (int)-1;
            		}
HXLINE( 379)		{
HXLINE( 379)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 379)			HX_VARI( int,_g) = this->list->length;
HXDLIN( 379)			while((_g1 < _g)){
HXLINE( 379)				_g1 = (_g1 + (int)1);
HXDLIN( 379)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 381)				bool _hx_tmp;
HXDLIN( 381)				if (hx::IsNotNull( this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >() )) {
HXLINE( 381)					_hx_tmp = hx::IsEq( this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn,btn );
            				}
            				else {
HXLINE( 381)					_hx_tmp = false;
            				}
HXDLIN( 381)				if (_hx_tmp) {
HXLINE( 383)					return i;
            				}
            			}
            		}
HXLINE( 386)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltipManager_obj,findBtn,return )

int FlxUITooltipManager_obj::findObj( ::flixel::FlxObject obj){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_390_findObj)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 391)		if (hx::IsNull( obj )) {
HXLINE( 391)			return (int)-1;
            		}
HXLINE( 392)		{
HXLINE( 392)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 392)			HX_VARI( int,_g) = this->list->length;
HXDLIN( 392)			while((_g1 < _g)){
HXLINE( 392)				_g1 = (_g1 + (int)1);
HXDLIN( 392)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 394)				bool _hx_tmp;
HXDLIN( 394)				if (hx::IsNotNull( this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >() )) {
HXLINE( 394)					_hx_tmp = hx::IsEq( this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->obj,obj );
            				}
            				else {
HXLINE( 394)					_hx_tmp = false;
            				}
HXDLIN( 394)				if (_hx_tmp) {
HXLINE( 396)					return i;
            				}
            			}
            		}
HXLINE( 399)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltipManager_obj,findObj,return )

void FlxUITooltipManager_obj::show(int i){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_403_show)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 404)		HX_VARI( ::Dynamic,btn) = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->btn;
HXLINE( 406)		bool _hx_tmp;
HXDLIN( 406)		if ((( (bool)(btn->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) != false)) {
HXLINE( 406)			if (hx::IsNotNull( this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->obj )) {
HXLINE( 406)				_hx_tmp = (this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->obj->visible == false);
            			}
            			else {
HXLINE( 406)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 406)			_hx_tmp = true;
            		}
HXDLIN( 406)		if (_hx_tmp) {
HXLINE( 408)			return;
            		}
HXLINE( 411)		if ((this->current == i)) {
HXLINE( 413)			HX_VARI( Float,deltaX) = (( (Float)(btn->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - this->lastPosition->x);
HXLINE( 414)			HX_VARI( Float,deltaY) = (( (Float)(btn->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - this->lastPosition->y);
HXLINE( 416)			this->lastPosition->set_x(( (Float)(btn->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE( 417)			this->lastPosition->set_y(( (Float)(btn->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
HXLINE( 419)			{
HXLINE( 419)				HX_VARI(  ::flixel::addons::ui::FlxUITooltip,_g) = this->tooltip;
HXDLIN( 419)				_g->set_x((_g->x + deltaX));
            			}
HXLINE( 420)			{
HXLINE( 420)				HX_VARI_NAME(  ::flixel::addons::ui::FlxUITooltip,_g1,"_g") = this->tooltip;
HXDLIN( 420)				_g1->set_y((_g1->y + deltaY));
            			}
HXLINE( 421)			return;
            		}
HXLINE( 424)		this->current = i;
HXLINE( 426)		HX_VARI(  ::Dynamic,data) = this->list->__get(i).StaticCast<  ::flixel::addons::ui::_FlxUITooltipManager::FlxUITooltipEntry >()->data;
HXLINE( 428)		if (hx::IsNotEq( data->__Field(HX_("init",10,3b,bb,45),hx::paccDynamic),true )) {
HXLINE( 430)			data->__SetField(HX_("style",31,a5,1d,84),::flixel::addons::ui::FlxUITooltip_obj::styleFix(data->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic),this->defaultStyle),hx::paccDynamic);
HXLINE( 431)			data->__SetField(HX_("init",10,3b,bb,45),true,hx::paccDynamic);
            		}
HXLINE( 434)		HX_VARI( bool,autoSizeVertical) = true;
HXLINE( 435)		HX_VARI( bool,autoSizeHorizontal) = true;
HXLINE( 436)		if (hx::IsNotNull( data->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic) )) {
HXLINE( 438)			this->tooltip->set_style(data->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic));
HXLINE( 439)			autoSizeVertical = ( (bool)( ::Dynamic(data->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__Field(HX_("autoSizeVertical",66,58,0d,52),hx::paccDynamic)) );
HXLINE( 440)			autoSizeHorizontal = ( (bool)( ::Dynamic(data->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),hx::paccDynamic)) );
            		}
HXLINE( 443)		if (hx::IsNotNull( ( ( ::flixel::addons::ui::Anchor)(data->__Field(HX_("anchor",75,3a,71,60),hx::paccDynamic)) ) )) {
HXLINE( 445)			this->tooltip->set_anchor(( ( ::flixel::addons::ui::Anchor)(data->__Field(HX_("anchor",75,3a,71,60),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 447)			if (hx::IsNotNull( this->defaultAnchor )) {
HXLINE( 449)				this->tooltip->set_anchor(this->defaultAnchor);
            			}
            		}
HXLINE( 452)		if (hx::IsNotNull( this->state )) {
HXLINE( 454)			this->state->add(this->tooltip).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 456)		if (hx::IsNotNull( this->subState )) {
HXLINE( 458)			this->subState->add(this->tooltip).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 461)		this->tooltip->show(( ( ::flixel::FlxObject)(btn) ),( (::String)(data->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)) ),( (::String)(data->__Field(HX_("body",a2,7a,1b,41),hx::paccDynamic)) ),autoSizeVertical,autoSizeHorizontal);
HXLINE( 463)		if (this->autoFlipAnchor) {
HXLINE( 465)			if (this->checkAutoFlip(btn,this->tooltip)) {
HXLINE( 467)				this->tooltip->show(( ( ::flixel::FlxObject)(btn) ),( (::String)(data->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)) ),( (::String)(data->__Field(HX_("body",a2,7a,1b,41),hx::paccDynamic)) ),autoSizeVertical,autoSizeHorizontal);
            			}
            		}
HXLINE( 471)		this->lastPosition->set(btn->__Field(HX_("x",78,00,00,00),hx::paccDynamic),btn->__Field(HX_("y",79,00,00,00),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltipManager_obj,show,(void))

bool FlxUITooltipManager_obj::checkAutoFlip(::Dynamic thing, ::flixel::addons::ui::FlxUITooltip tooltip){
            	HX_STACKFRAME(&_hx_pos_900bbcecd25701b4_475_checkAutoFlip)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(tooltip,"tooltip")
HXLINE( 476)		HX_VAR( bool,flipX);
HXDLIN( 476)		if (!((tooltip->x < (int)0))) {
HXLINE( 476)			HX_VARI_NAME( Float,tooltip1,"tooltip") = tooltip->x;
HXDLIN( 476)			Float flipX1 = (tooltip1 + tooltip->get_width());
HXDLIN( 476)			flipX = (flipX1 > ::flixel::FlxG_obj::width);
            		}
            		else {
HXLINE( 476)			flipX = true;
            		}
HXLINE( 477)		HX_VAR( bool,flipY);
HXDLIN( 477)		if (!((tooltip->y < (int)0))) {
HXLINE( 477)			HX_VARI_NAME( Float,tooltip2,"tooltip") = tooltip->y;
HXDLIN( 477)			Float flipY1 = (tooltip2 + tooltip->get_height());
HXDLIN( 477)			flipY = (flipY1 > ::flixel::FlxG_obj::height);
            		}
            		else {
HXLINE( 477)			flipY = true;
            		}
HXLINE( 479)		bool _hx_tmp;
HXDLIN( 479)		if (!(flipX)) {
HXLINE( 479)			_hx_tmp = flipY;
            		}
            		else {
HXLINE( 479)			_hx_tmp = true;
            		}
HXDLIN( 479)		if (_hx_tmp) {
HXLINE( 481)			tooltip->set_anchor(tooltip->anchor->getFlipped(flipX,flipY,null()));
HXLINE( 482)			return true;
            		}
HXLINE( 485)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltipManager_obj,checkAutoFlip,return )


hx::ObjectPtr< FlxUITooltipManager_obj > FlxUITooltipManager_obj::__new( ::flixel::addons::ui::FlxUIState State, ::flixel::addons::ui::FlxUISubState SubState) {
	hx::ObjectPtr< FlxUITooltipManager_obj > __this = new FlxUITooltipManager_obj();
	__this->__construct(State,SubState);
	return __this;
}

hx::ObjectPtr< FlxUITooltipManager_obj > FlxUITooltipManager_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::addons::ui::FlxUIState State, ::flixel::addons::ui::FlxUISubState SubState) {
	FlxUITooltipManager_obj *__this = (FlxUITooltipManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUITooltipManager_obj), true, "flixel.addons.ui.FlxUITooltipManager"));
	*(void **)__this = FlxUITooltipManager_obj::_hx_vtable;
	__this->__construct(State,SubState);
	return __this;
}

FlxUITooltipManager_obj::FlxUITooltipManager_obj()
{
}

void FlxUITooltipManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUITooltipManager);
	HX_MARK_MEMBER_NAME(autoFlipAnchor,"autoFlipAnchor");
	HX_MARK_MEMBER_NAME(defaultAnchor,"defaultAnchor");
	HX_MARK_MEMBER_NAME(defaultStyle,"defaultStyle");
	HX_MARK_MEMBER_NAME(showOnClick,"showOnClick");
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(_init,"_init");
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(tooltip,"tooltip");
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_MEMBER_NAME(lastPosition,"lastPosition");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(subState,"subState");
	HX_MARK_END_CLASS();
}

void FlxUITooltipManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(autoFlipAnchor,"autoFlipAnchor");
	HX_VISIT_MEMBER_NAME(defaultAnchor,"defaultAnchor");
	HX_VISIT_MEMBER_NAME(defaultStyle,"defaultStyle");
	HX_VISIT_MEMBER_NAME(showOnClick,"showOnClick");
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(_init,"_init");
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(tooltip,"tooltip");
	HX_VISIT_MEMBER_NAME(current,"current");
	HX_VISIT_MEMBER_NAME(lastPosition,"lastPosition");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(subState,"subState");
}

hx::Val FlxUITooltipManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn()); }
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"_init") ) { return hx::Val( _init); }
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"tooltip") ) { return hx::Val( tooltip); }
		if (HX_FIELD_EQ(inName,"current") ) { return hx::Val( current); }
		if (HX_FIELD_EQ(inName,"findBtn") ) { return hx::Val( findBtn_dyn()); }
		if (HX_FIELD_EQ(inName,"findObj") ) { return hx::Val( findObj_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subState") ) { return hx::Val( subState); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"showOnClick") ) { return hx::Val( showOnClick); }
		if (HX_FIELD_EQ(inName,"hideCurrent") ) { return hx::Val( hideCurrent_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultStyle") ) { return hx::Val( defaultStyle); }
		if (HX_FIELD_EQ(inName,"lastPosition") ) { return hx::Val( lastPosition); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"defaultAnchor") ) { return hx::Val( defaultAnchor); }
		if (HX_FIELD_EQ(inName,"checkAutoFlip") ) { return hx::Val( checkAutoFlip_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"autoFlipAnchor") ) { return hx::Val( autoFlipAnchor); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"enableTooltipFor") ) { return hx::Val( enableTooltipFor_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"doesCurrentTooltipBelongTo") ) { return hx::Val( doesCurrentTooltipBelongTo_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUITooltipManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_init") ) { _init=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::flixel::addons::ui::FlxUIState >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tooltip") ) { tooltip=inValue.Cast<  ::flixel::addons::ui::FlxUITooltip >(); return inValue; }
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subState") ) { subState=inValue.Cast<  ::flixel::addons::ui::FlxUISubState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"showOnClick") ) { showOnClick=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultStyle") ) { defaultStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastPosition") ) { lastPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"defaultAnchor") ) { defaultAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"autoFlipAnchor") ) { autoFlipAnchor=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUITooltipManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("autoFlipAnchor","\x51","\xa5","\x23","\x1e"));
	outFields->push(HX_HCSTRING("defaultAnchor","\x16","\x0e","\xea","\x5a"));
	outFields->push(HX_HCSTRING("defaultStyle","\xb0","\xe0","\x78","\x39"));
	outFields->push(HX_HCSTRING("showOnClick","\x2c","\xb7","\x37","\xbb"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("_init","\xef","\x56","\xcc","\xf8"));
	outFields->push(HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"));
	outFields->push(HX_HCSTRING("tooltip","\x03","\xad","\x8c","\x6a"));
	outFields->push(HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"));
	outFields->push(HX_HCSTRING("lastPosition","\x1f","\xad","\x8c","\x2c"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("subState","\x71","\xcc","\x2a","\xf9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUITooltipManager_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxUITooltipManager_obj,autoFlipAnchor),HX_HCSTRING("autoFlipAnchor","\x51","\xa5","\x23","\x1e")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUITooltipManager_obj,defaultAnchor),HX_HCSTRING("defaultAnchor","\x16","\x0e","\xea","\x5a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUITooltipManager_obj,defaultStyle),HX_HCSTRING("defaultStyle","\xb0","\xe0","\x78","\x39")},
	{hx::fsBool,(int)offsetof(FlxUITooltipManager_obj,showOnClick),HX_HCSTRING("showOnClick","\x2c","\xb7","\x37","\xbb")},
	{hx::fsFloat,(int)offsetof(FlxUITooltipManager_obj,delay),HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{hx::fsBool,(int)offsetof(FlxUITooltipManager_obj,_init),HX_HCSTRING("_init","\xef","\x56","\xcc","\xf8")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUITooltipManager_obj,list),HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{hx::fsObject /*::flixel::addons::ui::FlxUITooltip*/ ,(int)offsetof(FlxUITooltipManager_obj,tooltip),HX_HCSTRING("tooltip","\x03","\xad","\x8c","\x6a")},
	{hx::fsInt,(int)offsetof(FlxUITooltipManager_obj,current),HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxUITooltipManager_obj,lastPosition),HX_HCSTRING("lastPosition","\x1f","\xad","\x8c","\x2c")},
	{hx::fsObject /*::flixel::addons::ui::FlxUIState*/ ,(int)offsetof(FlxUITooltipManager_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsObject /*::flixel::addons::ui::FlxUISubState*/ ,(int)offsetof(FlxUITooltipManager_obj,subState),HX_HCSTRING("subState","\x71","\xcc","\x2a","\xf9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxUITooltipManager_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUITooltipManager_obj_sMemberFields[] = {
	HX_HCSTRING("autoFlipAnchor","\x51","\xa5","\x23","\x1e"),
	HX_HCSTRING("defaultAnchor","\x16","\x0e","\xea","\x5a"),
	HX_HCSTRING("defaultStyle","\xb0","\xe0","\x78","\x39"),
	HX_HCSTRING("showOnClick","\x2c","\xb7","\x37","\xbb"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("hideCurrent","\x97","\x8b","\x4f","\xc9"),
	HX_HCSTRING("doesCurrentTooltipBelongTo","\x9d","\x37","\x2f","\x77"),
	HX_HCSTRING("enableTooltipFor","\x29","\xaa","\xbd","\xad"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("_init","\xef","\x56","\xcc","\xf8"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("tooltip","\x03","\xad","\x8c","\x6a"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("lastPosition","\x1f","\xad","\x8c","\x2c"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("subState","\x71","\xcc","\x2a","\xf9"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("findBtn","\xa3","\xd3","\x65","\x25"),
	HX_HCSTRING("findObj","\x3e","\xa1","\x6f","\x25"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("checkAutoFlip","\xa4","\x5e","\x3e","\x0f"),
	::String(null()) };

static void FlxUITooltipManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUITooltipManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUITooltipManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUITooltipManager_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxUITooltipManager_obj::__mClass;

void FlxUITooltipManager_obj::__register()
{
	hx::Object *dummy = new FlxUITooltipManager_obj;
	FlxUITooltipManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUITooltipManager","\xdf","\xaa","\x6d","\x26");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUITooltipManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUITooltipManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUITooltipManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUITooltipManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUITooltipManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUITooltipManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
