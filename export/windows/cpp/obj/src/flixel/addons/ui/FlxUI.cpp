// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_ButtonLabelStyle
#include <flixel/addons/ui/ButtonLabelStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_CheckStyle
#include <flixel/addons/ui/CheckStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIBar
#include <flixel/addons/ui/FlxUIBar.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUILine
#include <flixel/addons/ui/FlxUILine.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRadioGroup
#include <flixel/addons/ui/FlxUIRadioGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRegion
#include <flixel/addons/ui/FlxUIRegion.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISpriteButton
#include <flixel/addons/ui/FlxUISpriteButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITileTest
#include <flixel/addons/ui/FlxUITileTest.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_LineAxis
#include <flixel/addons/ui/LineAxis.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Rounding
#include <flixel/addons/ui/Rounding.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasNodeAccess
#include <haxe/xml/_Fast/HasNodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_55_new,"flixel.addons.ui.FlxUI","new",0x89fff7c7,"flixel.addons.ui.FlxUI.new","flixel/addons/ui/FlxUI.hx",55,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_69_get_isRoot,"flixel.addons.ui.FlxUI","get_isRoot",0x501fc66e,"flixel.addons.ui.FlxUI.get_isRoot","flixel/addons/ui/FlxUI.hx",69,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_79_get_tongue,"flixel.addons.ui.FlxUI","get_tongue",0x7aee5906,"flixel.addons.ui.FlxUI.get_tongue","flixel/addons/ui/FlxUI.hx",79,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_81_set_tongue,"flixel.addons.ui.FlxUI","set_tongue",0x7e6bf77a,"flixel.addons.ui.FlxUI.set_tongue","flixel/addons/ui/FlxUI.hx",81,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_88_set_focus,"flixel.addons.ui.FlxUI","set_focus",0xbe69d6e2,"flixel.addons.ui.FlxUI.set_focus","flixel/addons/ui/FlxUI.hx",88,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_119__tongueSet,"flixel.addons.ui.FlxUI","_tongueSet",0x62471f78,"flixel.addons.ui.FlxUI._tongueSet","flixel/addons/ui/FlxUI.hx",119,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_204_callEvent,"flixel.addons.ui.FlxUI","callEvent",0x94ea5143,"flixel.addons.ui.FlxUI.callEvent","flixel/addons/ui/FlxUI.hx",204,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_208_getEvent,"flixel.addons.ui.FlxUI","getEvent",0xd6447add,"flixel.addons.ui.FlxUI.getEvent","flixel/addons/ui/FlxUI.hx",208,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_227_getRequest,"flixel.addons.ui.FlxUI","getRequest",0x8a6908d2,"flixel.addons.ui.FlxUI.getRequest","flixel/addons/ui/FlxUI.hx",227,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_278_onFocus,"flixel.addons.ui.FlxUI","onFocus",0x59586520,"flixel.addons.ui.FlxUI.onFocus","flixel/addons/ui/FlxUI.hx",278,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_287_setWidgetSuppression,"flixel.addons.ui.FlxUI","setWidgetSuppression",0x343faf06,"flixel.addons.ui.FlxUI.setWidgetSuppression","flixel/addons/ui/FlxUI.hx",287,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_313_onFocusLost,"flixel.addons.ui.FlxUI","onFocusLost",0xfd524b24,"flixel.addons.ui.FlxUI.onFocusLost","flixel/addons/ui/FlxUI.hx",313,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_329_setSuperIndex,"flixel.addons.ui.FlxUI","setSuperIndex",0x53bc1800,"flixel.addons.ui.FlxUI.setSuperIndex","flixel/addons/ui/FlxUI.hx",329,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_332_update,"flixel.addons.ui.FlxUI","update",0x5c40b902,"flixel.addons.ui.FlxUI.update","flixel/addons/ui/FlxUI.hx",332,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_345_toggleShow,"flixel.addons.ui.FlxUI","toggleShow",0xda8bbe2a,"flixel.addons.ui.FlxUI.toggleShow","flixel/addons/ui/FlxUI.hx",345,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_365_showGroup,"flixel.addons.ui.FlxUI","showGroup",0x5b3f47a9,"flixel.addons.ui.FlxUI.showGroup","flixel/addons/ui/FlxUI.hx",365,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_382_showAsset,"flixel.addons.ui.FlxUI","showAsset",0xe783fe5a,"flixel.addons.ui.FlxUI.showAsset","flixel/addons/ui/FlxUI.hx",382,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_404_removeAsset,"flixel.addons.ui.FlxUI","removeAsset",0xe039ad73,"flixel.addons.ui.FlxUI.removeAsset","flixel/addons/ui/FlxUI.hx",404,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_425_addAsset,"flixel.addons.ui.FlxUI","addAsset",0xa03f3348,"flixel.addons.ui.FlxUI.addAsset","flixel/addons/ui/FlxUI.hx",425,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_462_replaceAsset,"flixel.addons.ui.FlxUI","replaceAsset",0xb0d588d5,"flixel.addons.ui.FlxUI.replaceAsset","flixel/addons/ui/FlxUI.hx",462,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_503_destroy,"flixel.addons.ui.FlxUI","destroy",0xe31793e1,"flixel.addons.ui.FlxUI.destroy","flixel/addons/ui/FlxUI.hx",503,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_561_load,"flixel.addons.ui.FlxUI","load",0x34adecdf,"flixel.addons.ui.FlxUI.load","flixel/addons/ui/FlxUI.hx",561,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_833_unparentXML,"flixel.addons.ui.FlxUI","unparentXML",0xc0cc07bb,"flixel.addons.ui.FlxUI.unparentXML","flixel/addons/ui/FlxUI.hx",833,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_837__loadPointSize,"flixel.addons.ui.FlxUI","_loadPointSize",0x3df8fe65,"flixel.addons.ui.FlxUI._loadPointSize","flixel/addons/ui/FlxUI.hx",837,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_861__loadSub,"flixel.addons.ui.FlxUI","_loadSub",0x43431fb4,"flixel.addons.ui.FlxUI._loadSub","flixel/addons/ui/FlxUI.hx",861,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_933__addTags,"flixel.addons.ui.FlxUI","_addTags",0xc394f454,"flixel.addons.ui.FlxUI._addTags","flixel/addons/ui/FlxUI.hx",933,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_950__loadGlobals,"flixel.addons.ui.FlxUI","_loadGlobals",0xe1eda5e4,"flixel.addons.ui.FlxUI._loadGlobals","flixel/addons/ui/FlxUI.hx",950,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_969__postLoad,"flixel.addons.ui.FlxUI","_postLoad",0xe07320ac,"flixel.addons.ui.FlxUI._postLoad","flixel/addons/ui/FlxUI.hx",969,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1006__sendTo,"flixel.addons.ui.FlxUI","_sendTo",0x988d3169,"flixel.addons.ui.FlxUI._sendTo","flixel/addons/ui/FlxUI.hx",1006,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1040_sendToFront,"flixel.addons.ui.FlxUI","sendToFront",0x18eb1f2d,"flixel.addons.ui.FlxUI.sendToFront","flixel/addons/ui/FlxUI.hx",1040,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1052_sendToBack,"flixel.addons.ui.FlxUI","sendToBack",0x0ea31023,"flixel.addons.ui.FlxUI.sendToBack","flixel/addons/ui/FlxUI.hx",1052,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1058_get_currMode,"flixel.addons.ui.FlxUI","get_currMode",0xd78f9337,"flixel.addons.ui.FlxUI.get_currMode","flixel/addons/ui/FlxUI.hx",1058,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1059_set_currMode,"flixel.addons.ui.FlxUI","set_currMode",0xec88b6ab,"flixel.addons.ui.FlxUI.set_currMode","flixel/addons/ui/FlxUI.hx",1059,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1068_setMode,"flixel.addons.ui.FlxUI","setMode",0xcc767b0c,"flixel.addons.ui.FlxUI.setMode","flixel/addons/ui/FlxUI.hx",1068,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1127_showThing,"flixel.addons.ui.FlxUI","showThing",0xd0d41c58,"flixel.addons.ui.FlxUI.showThing","flixel/addons/ui/FlxUI.hx",1127,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1197_getGroup,"flixel.addons.ui.FlxUI","getGroup",0xfa746602,"flixel.addons.ui.FlxUI.getGroup","flixel/addons/ui/FlxUI.hx",1197,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1207_getFlxText,"flixel.addons.ui.FlxUI","getFlxText",0x55e507c2,"flixel.addons.ui.FlxUI.getFlxText","flixel/addons/ui/FlxUI.hx",1207,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1220_getAllAssets,"flixel.addons.ui.FlxUI","getAllAssets",0xc0ca94c7,"flixel.addons.ui.FlxUI.getAllAssets","flixel/addons/ui/FlxUI.hx",1220,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1230_getAssetKeys,"flixel.addons.ui.FlxUI","getAssetKeys",0x52110047,"flixel.addons.ui.FlxUI.getAssetKeys","flixel/addons/ui/FlxUI.hx",1230,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1239_hasAsset,"flixel.addons.ui.FlxUI","hasAsset",0xb33a576f,"flixel.addons.ui.FlxUI.hasAsset","flixel/addons/ui/FlxUI.hx",1239,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1252_getAsset,"flixel.addons.ui.FlxUI","getAsset",0x86b91cb3,"flixel.addons.ui.FlxUI.getAsset","flixel/addons/ui/FlxUI.hx",1252,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1262_getAssetsWithTag,"flixel.addons.ui.FlxUI","getAssetsWithTag",0x2c689774,"flixel.addons.ui.FlxUI.getAssetsWithTag","flixel/addons/ui/FlxUI.hx",1262,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1289_getAssetGroup,"flixel.addons.ui.FlxUI","getAssetGroup",0x37c51d8c,"flixel.addons.ui.FlxUI.getAssetGroup","flixel/addons/ui/FlxUI.hx",1289,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1307_getMode,"flixel.addons.ui.FlxUI","getMode",0xd974ea00,"flixel.addons.ui.FlxUI.getMode","flixel/addons/ui/FlxUI.hx",1307,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1317_getLabelStyleFromDefinition,"flixel.addons.ui.FlxUI","getLabelStyleFromDefinition",0xade61a37,"flixel.addons.ui.FlxUI.getLabelStyleFromDefinition","flixel/addons/ui/FlxUI.hx",1317,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1331_getLabelStyleFromData,"flixel.addons.ui.FlxUI","getLabelStyleFromData",0x7750c7ce,"flixel.addons.ui.FlxUI.getLabelStyleFromData","flixel/addons/ui/FlxUI.hx",1331,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1340_checkVariable,"flixel.addons.ui.FlxUI","checkVariable",0xe5e77d4b,"flixel.addons.ui.FlxUI.checkVariable","flixel/addons/ui/FlxUI.hx",1340,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1354_setVariable,"flixel.addons.ui.FlxUI","setVariable",0x553a4265,"flixel.addons.ui.FlxUI.setVariable","flixel/addons/ui/FlxUI.hx",1354,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1358_getVariable,"flixel.addons.ui.FlxUI","getVariable",0x4acd3b59,"flixel.addons.ui.FlxUI.getVariable","flixel/addons/ui/FlxUI.hx",1358,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1368_getDefinition,"flixel.addons.ui.FlxUI","getDefinition",0xdd003ff0,"flixel.addons.ui.FlxUI.getDefinition","flixel/addons/ui/FlxUI.hx",1368,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1447_replaceInGroup,"flixel.addons.ui.FlxUI","replaceInGroup",0xb7beeb3f,"flixel.addons.ui.FlxUI.replaceInGroup","flixel/addons/ui/FlxUI.hx",1447,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1497_applyNodeConditionals,"flixel.addons.ui.FlxUI","applyNodeConditionals",0x57bfbe44,"flixel.addons.ui.FlxUI.applyNodeConditionals","flixel/addons/ui/FlxUI.hx",1497,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1522_applyNodeChanges,"flixel.addons.ui.FlxUI","applyNodeChanges",0x1f7e448c,"flixel.addons.ui.FlxUI.applyNodeChanges","flixel/addons/ui/FlxUI.hx",1522,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1581_loadThing,"flixel.addons.ui.FlxUI","loadThing",0xbda7028f,"flixel.addons.ui.FlxUI.loadThing","flixel/addons/ui/FlxUI.hx",1581,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1585__loadThingGetInfo,"flixel.addons.ui.FlxUI","_loadThingGetInfo",0x7a50a522,"flixel.addons.ui.FlxUI._loadThingGetInfo","flixel/addons/ui/FlxUI.hx",1585,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1623__loadTooltip,"flixel.addons.ui.FlxUI","_loadTooltip",0x38414d37,"flixel.addons.ui.FlxUI._loadTooltip","flixel/addons/ui/FlxUI.hx",1623,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1641__loadTooltipData,"flixel.addons.ui.FlxUI","_loadTooltipData",0x9fb23701,"flixel.addons.ui.FlxUI._loadTooltipData","flixel/addons/ui/FlxUI.hx",1641,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1709__loadTooltipStyle,"flixel.addons.ui.FlxUI","_loadTooltipStyle",0xcbd3807a,"flixel.addons.ui.FlxUI._loadTooltipStyle","flixel/addons/ui/FlxUI.hx",1709,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1734__loadTooltipText,"flixel.addons.ui.FlxUI","_loadTooltipText",0xaa48ad84,"flixel.addons.ui.FlxUI._loadTooltipText","flixel/addons/ui/FlxUI.hx",1734,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1783__loadAnchor,"flixel.addons.ui.FlxUI","_loadAnchor",0xa3f29cc1,"flixel.addons.ui.FlxUI._loadAnchor","flixel/addons/ui/FlxUI.hx",1783,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1797__loadThing,"flixel.addons.ui.FlxUI","_loadThing",0x7ce5f322,"flixel.addons.ui.FlxUI._loadThing","flixel/addons/ui/FlxUI.hx",1797,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1857__loadX,"flixel.addons.ui.FlxUI","_loadX",0x4a11c1ac,"flixel.addons.ui.FlxUI._loadX","flixel/addons/ui/FlxUI.hx",1857,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1862__loadY,"flixel.addons.ui.FlxUI","_loadY",0x4a11c1ad,"flixel.addons.ui.FlxUI._loadY","flixel/addons/ui/FlxUI.hx",1862,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1867__loadScale,"flixel.addons.ui.FlxUI","_loadScale",0xe62b39be,"flixel.addons.ui.FlxUI._loadScale","flixel/addons/ui/FlxUI.hx",1867,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1872__loadScaleX,"flixel.addons.ui.FlxUI","_loadScaleX",0x7fa74cda,"flixel.addons.ui.FlxUI._loadScaleX","flixel/addons/ui/FlxUI.hx",1872,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1877__loadScaleY,"flixel.addons.ui.FlxUI","_loadScaleY",0x7fa74cdb,"flixel.addons.ui.FlxUI._loadScaleY","flixel/addons/ui/FlxUI.hx",1877,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1881__loadWidth,"flixel.addons.ui.FlxUI","_loadWidth",0x37bf213a,"flixel.addons.ui.FlxUI._loadWidth","flixel/addons/ui/FlxUI.hx",1881,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1888__loadHeight,"flixel.addons.ui.FlxUI","_loadHeight",0x45cd6a33,"flixel.addons.ui.FlxUI._loadHeight","flixel/addons/ui/FlxUI.hx",1888,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1895__loadCompass,"flixel.addons.ui.FlxUI","_loadCompass",0x511db9c6,"flixel.addons.ui.FlxUI._loadCompass","flixel/addons/ui/FlxUI.hx",1895,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1913__changeParamsThing,"flixel.addons.ui.FlxUI","_changeParamsThing",0x3feee472,"flixel.addons.ui.FlxUI._changeParamsThing","flixel/addons/ui/FlxUI.hx",1913,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1933__changeThing,"flixel.addons.ui.FlxUI","_changeThing",0x32661218,"flixel.addons.ui.FlxUI._changeThing","flixel/addons/ui/FlxUI.hx",1933,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1998__alignThing,"flixel.addons.ui.FlxUI","_alignThing",0x37322a6f,"flixel.addons.ui.FlxUI._alignThing","flixel/addons/ui/FlxUI.hx",1998,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2090__doAlign,"flixel.addons.ui.FlxUI","_doAlign",0x8f1f33f4,"flixel.addons.ui.FlxUI._doAlign","flixel/addons/ui/FlxUI.hx",2090,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2204__checkFailure,"flixel.addons.ui.FlxUI","_checkFailure",0x7b6fc968,"flixel.addons.ui.FlxUI._checkFailure","flixel/addons/ui/FlxUI.hx",2204,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2268__resizeThing,"flixel.addons.ui.FlxUI","_resizeThing",0x4ba3eb14,"flixel.addons.ui.FlxUI._resizeThing","flixel/addons/ui/FlxUI.hx",2268,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2295__postLoadThing,"flixel.addons.ui.FlxUI","_postLoadThing",0x7251e7a2,"flixel.addons.ui.FlxUI._postLoadThing","flixel/addons/ui/FlxUI.hx",2295,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2412__loadTileTest,"flixel.addons.ui.FlxUI","_loadTileTest",0xb7577bec,"flixel.addons.ui.FlxUI._loadTileTest","flixel/addons/ui/FlxUI.hx",2412,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2454__loadString,"flixel.addons.ui.FlxUI","_loadString",0x54b18b1d,"flixel.addons.ui.FlxUI._loadString","flixel/addons/ui/FlxUI.hx",2454,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2463__loadText,"flixel.addons.ui.FlxUI","_loadText",0x9815c3f9,"flixel.addons.ui.FlxUI._loadText","flixel/addons/ui/FlxUI.hx",2463,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2519__loadInputText,"flixel.addons.ui.FlxUI","_loadInputText",0x30689f0b,"flixel.addons.ui.FlxUI._loadInputText","flixel/addons/ui/FlxUI.hx",2519,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2674__loadRadioGroup,"flixel.addons.ui.FlxUI","_loadRadioGroup",0x22b21c90,"flixel.addons.ui.FlxUI._loadRadioGroup","flixel/addons/ui/FlxUI.hx",2674,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2841__loadCheckBox,"flixel.addons.ui.FlxUI","_loadCheckBox",0xdd35176f,"flixel.addons.ui.FlxUI._loadCheckBox","flixel/addons/ui/FlxUI.hx",2841,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2929__loadDropDownMenu,"flixel.addons.ui.FlxUI","_loadDropDownMenu",0xfcc3a1bc,"flixel.addons.ui.FlxUI._loadDropDownMenu","flixel/addons/ui/FlxUI.hx",2929,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3041__loadTest,"flixel.addons.ui.FlxUI","_loadTest",0x9815bf9e,"flixel.addons.ui.FlxUI._loadTest","flixel/addons/ui/FlxUI.hx",3041,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3090__loadTestSub,"flixel.addons.ui.FlxUI","_loadTestSub",0x8b7ab882,"flixel.addons.ui.FlxUI._loadTestSub","flixel/addons/ui/FlxUI.hx",3090,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3158_parseVarValue,"flixel.addons.ui.FlxUI","parseVarValue",0x5226f084,"flixel.addons.ui.FlxUI.parseVarValue","flixel/addons/ui/FlxUI.hx",3158,0xf354486a)
static const ::String _hx_array_data_e9110855_175[] = {
	HX_("==",60,35,00,00),HX_("=",3d,00,00,00),HX_("!=",fc,1c,00,00),HX_("!==",c1,3f,19,00),HX_("<",3c,00,00,00),HX_(">",3e,00,00,00),HX_("<=",81,34,00,00),HX_(">=",3f,36,00,00),
};
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3176__loadLayout,"flixel.addons.ui.FlxUI","_loadLayout",0x9c3a10f6,"flixel.addons.ui.FlxUI._loadLayout","flixel/addons/ui/FlxUI.hx",3176,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3188_addToCleanup,"flixel.addons.ui.FlxUI","addToCleanup",0x71379941,"flixel.addons.ui.FlxUI.addToCleanup","flixel/addons/ui/FlxUI.hx",3188,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3198_addToScaledAssets,"flixel.addons.ui.FlxUI","addToScaledAssets",0xf5176080,"flixel.addons.ui.FlxUI.addToScaledAssets","flixel/addons/ui/FlxUI.hx",3198,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3205_cleanup,"flixel.addons.ui.FlxUI","cleanup",0x69d3730b,"flixel.addons.ui.FlxUI.cleanup","flixel/addons/ui/FlxUI.hx",3205,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3216_createUI,"flixel.addons.ui.FlxUI","createUI",0x2c9d0b89,"flixel.addons.ui.FlxUI.createUI","flixel/addons/ui/FlxUI.hx",3216,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3219__loadTabMenu,"flixel.addons.ui.FlxUI","_loadTabMenu",0x0e83bac8,"flixel.addons.ui.FlxUI._loadTabMenu","flixel/addons/ui/FlxUI.hx",3219,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3344__loadNumericStepper,"flixel.addons.ui.FlxUI","_loadNumericStepper",0x27747c10,"flixel.addons.ui.FlxUI._loadNumericStepper","flixel/addons/ui/FlxUI.hx",3344,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3404_getResizeRatio,"flixel.addons.ui.FlxUI","getResizeRatio",0x06525d7a,"flixel.addons.ui.FlxUI.getResizeRatio","flixel/addons/ui/FlxUI.hx",3404,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3433__loadButton,"flixel.addons.ui.FlxUI","_loadButton",0x1d61c43e,"flixel.addons.ui.FlxUI._loadButton","flixel/addons/ui/FlxUI.hx",3433,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3800__loadRegion,"flixel.addons.ui.FlxUI","_loadRegion",0x440e2340,"flixel.addons.ui.FlxUI._loadRegion","flixel/addons/ui/FlxUI.hx",3800,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3820__load9SliceSprite,"flixel.addons.ui.FlxUI","_load9SliceSprite",0xb0d2f56a,"flixel.addons.ui.FlxUI._load9SliceSprite","flixel/addons/ui/FlxUI.hx",3820,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3904_load9SliceSprite_scaleSub,"flixel.addons.ui.FlxUI","load9SliceSprite_scaleSub",0x6f4e4338,"flixel.addons.ui.FlxUI.load9SliceSprite_scaleSub","flixel/addons/ui/FlxUI.hx",3904,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3941__loadTileRule,"flixel.addons.ui.FlxUI","_loadTileRule",0xb6112c96,"flixel.addons.ui.FlxUI._loadTileRule","flixel/addons/ui/FlxUI.hx",3941,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3953__loadBox,"flixel.addons.ui.FlxUI","_loadBox",0x4336343f,"flixel.addons.ui.FlxUI._loadBox","flixel/addons/ui/FlxUI.hx",3953,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4001__loadLine,"flixel.addons.ui.FlxUI","_loadLine",0x92cf0f40,"flixel.addons.ui.FlxUI._loadLine","flixel/addons/ui/FlxUI.hx",4001,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4044__loadBar,"flixel.addons.ui.FlxUI","_loadBar",0x43362807,"flixel.addons.ui.FlxUI._loadBar","flixel/addons/ui/FlxUI.hx",4044,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4149__loadSprite,"flixel.addons.ui.FlxUI","_loadSprite",0x07173e51,"flixel.addons.ui.FlxUI._loadSprite","flixel/addons/ui/FlxUI.hx",4149,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4228_loadSmooth,"flixel.addons.ui.FlxUI","loadSmooth",0xb318da6d,"flixel.addons.ui.FlxUI.loadSmooth","flixel/addons/ui/FlxUI.hx",4228,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4245_loadScaledSrc,"flixel.addons.ui.FlxUI","loadScaledSrc",0x51d86f8b,"flixel.addons.ui.FlxUI.loadScaledSrc","flixel/addons/ui/FlxUI.hx",4245,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4346_thisWidth,"flixel.addons.ui.FlxUI","thisWidth",0xcbb0796f,"flixel.addons.ui.FlxUI.thisWidth","flixel/addons/ui/FlxUI.hx",4346,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4354_thisHeight,"flixel.addons.ui.FlxUI","thisHeight",0x2509405e,"flixel.addons.ui.FlxUI.thisHeight","flixel/addons/ui/FlxUI.hx",4354,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4361__getAnchorPos,"flixel.addons.ui.FlxUI","_getAnchorPos",0xe6674faf,"flixel.addons.ui.FlxUI._getAnchorPos","flixel/addons/ui/FlxUI.hx",4361,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4397_getRound,"flixel.addons.ui.FlxUI","getRound",0x4de5ab11,"flixel.addons.ui.FlxUI.getRound","flixel/addons/ui/FlxUI.hx",4397,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4413_doRound,"flixel.addons.ui.FlxUI","doRound",0xdf243faa,"flixel.addons.ui.FlxUI.doRound","flixel/addons/ui/FlxUI.hx",4413,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4424_calcMaxMinSize,"flixel.addons.ui.FlxUI","calcMaxMinSize",0x437b661d,"flixel.addons.ui.FlxUI.calcMaxMinSize","flixel/addons/ui/FlxUI.hx",4424,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4513__getDataSize,"flixel.addons.ui.FlxUI","_getDataSize",0xaed2247b,"flixel.addons.ui.FlxUI._getDataSize","flixel/addons/ui/FlxUI.hx",4513,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4591__getOperation,"flixel.addons.ui.FlxUI","_getOperation",0x2685c1b7,"flixel.addons.ui.FlxUI._getOperation","flixel/addons/ui/FlxUI.hx",4591,0xf354486a)
static const ::String _hx_array_data_e9110855_237[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("^",5e,00,00,00),
};
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4659__doOperation,"flixel.addons.ui.FlxUI","_doOperation",0xf65624d6,"flixel.addons.ui.FlxUI._doOperation","flixel/addons/ui/FlxUI.hx",4659,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4672__getStretch,"flixel.addons.ui.FlxUI","_getStretch",0xd40af795,"flixel.addons.ui.FlxUI._getStretch","flixel/addons/ui/FlxUI.hx",4672,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4711_getAssetProperty,"flixel.addons.ui.FlxUI","getAssetProperty",0xd3eb8c28,"flixel.addons.ui.FlxUI.getAssetProperty","flixel/addons/ui/FlxUI.hx",4711,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4811__loadCursor,"flixel.addons.ui.FlxUI","_loadCursor",0x8269f122,"flixel.addons.ui.FlxUI._loadCursor","flixel/addons/ui/FlxUI.hx",4811,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4839__loadPosition,"flixel.addons.ui.FlxUI","_loadPosition",0xfb522df5,"flixel.addons.ui.FlxUI._loadPosition","flixel/addons/ui/FlxUI.hx",4839,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4945__loadBorder,"flixel.addons.ui.FlxUI","_loadBorder",0xa79baf38,"flixel.addons.ui.FlxUI._loadBorder","flixel/addons/ui/FlxUI.hx",4945,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4957__loadColor,"flixel.addons.ui.FlxUI","_loadColor",0xb7b8dc97,"flixel.addons.ui.FlxUI._loadColor","flixel/addons/ui/FlxUI.hx",4957,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4967__loadFontDef,"flixel.addons.ui.FlxUI","_loadFontDef",0x63d37f6a,"flixel.addons.ui.FlxUI._loadFontDef","flixel/addons/ui/FlxUI.hx",4967,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4975__loadFontFace,"flixel.addons.ui.FlxUI","_loadFontFace",0xf68b5f58,"flixel.addons.ui.FlxUI._loadFontFace","flixel/addons/ui/FlxUI.hx",4975,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4985__onFinishLoad,"flixel.addons.ui.FlxUI","_onFinishLoad",0x23246f1e,"flixel.addons.ui.FlxUI._onFinishLoad","flixel/addons/ui/FlxUI.hx",4985,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4993_getText,"flixel.addons.ui.FlxUI","getText",0xde0de34a,"flixel.addons.ui.FlxUI.getText","flixel/addons/ui/FlxUI.hx",4993,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5006_formatFromCode,"flixel.addons.ui.FlxUI","formatFromCode",0x3be1ae07,"flixel.addons.ui.FlxUI.formatFromCode","flixel/addons/ui/FlxUI.hx",5006,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5073_formatButtonText,"flixel.addons.ui.FlxUI","formatButtonText",0xeca59e0f,"flixel.addons.ui.FlxUI.formatButtonText","flixel/addons/ui/FlxUI.hx",5073,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_140_event,"flixel.addons.ui.FlxUI","event",0xe056d741,"flixel.addons.ui.FlxUI.event","flixel/addons/ui/FlxUI.hx",140,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_156_forceFocus,"flixel.addons.ui.FlxUI","forceFocus",0x91e0ed66,"flixel.addons.ui.FlxUI.forceFocus","flixel/addons/ui/FlxUI.hx",156,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_168_getLeafUIState,"flixel.addons.ui.FlxUI","getLeafUIState",0xebda1e42,"flixel.addons.ui.FlxUI.getLeafUIState","flixel/addons/ui/FlxUI.hx",168,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_193_request,"flixel.addons.ui.FlxUI","request",0x03164636,"flixel.addons.ui.FlxUI.request","flixel/addons/ui/FlxUI.hx",193,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1395__delta,"flixel.addons.ui.FlxUI","_delta",0xa8496232,"flixel.addons.ui.FlxUI._delta","flixel/addons/ui/FlxUI.hx",1395,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1407__center,"flixel.addons.ui.FlxUI","_center",0x32e39e5b,"flixel.addons.ui.FlxUI._center","flixel/addons/ui/FlxUI.hx",1407,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2606_consolidateData,"flixel.addons.ui.FlxUI","consolidateData",0x9bb7ebba,"flixel.addons.ui.FlxUI.consolidateData","flixel/addons/ui/FlxUI.hx",2606,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3791__loadBitmapRect,"flixel.addons.ui.FlxUI","_loadBitmapRect",0xdc5324ff,"flixel.addons.ui.FlxUI._loadBitmapRect","flixel/addons/ui/FlxUI.hx",3791,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5022_getParams,"flixel.addons.ui.FlxUI","getParams",0xfcb7b323,"flixel.addons.ui.FlxUI.getParams","flixel/addons/ui/FlxUI.hx",5022,0xf354486a)
HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5066_sortParams,"flixel.addons.ui.FlxUI","sortParams",0x40e314bd,"flixel.addons.ui.FlxUI.sortParams","flixel/addons/ui/FlxUI.hx",5066,0xf354486a)
namespace flixel{
namespace addons{
namespace ui{

void FlxUI_obj::__construct( ::haxe::xml::Fast data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_){
::String liveFilePath_ = __o_liveFilePath_.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_55_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(ptr,"ptr")
            	HX_STACK_ARG(superIndex_,"superIndex_")
            	HX_STACK_ARG(tongue_,"tongue_")
            	HX_STACK_ARG(liveFilePath_,"liveFilePath_")
            	HX_STACK_ARG(uiVars_,"uiVars_")
HXLINE(1438)		this->_scaledAssets = ::Array_obj< ::String >::__new(0);
HXLINE(1437)		this->_assetsToCleanUp = ::Array_obj< ::String >::__new(0);
HXLINE(1433)		this->_safe_input_delay_elapsed = ((Float)0.0);
HXLINE(1428)		this->_curr_mode = HX_("",00,00,00,00);
HXLINE(1419)		this->_pointY = ((Float)1);
HXLINE(1418)		this->_pointX = ((Float)1);
HXLINE(1416)		this->_postLoaded = false;
HXLINE( 109)		this->cursorLists = null();
HXLINE( 100)		this->getTextFallback = null();
HXLINE(  63)		this->failed_by = ((Float)0);
HXLINE(  62)		this->failed = false;
HXLINE(  60)		this->safe_input_delay_time = ((Float)0.01);
HXLINE(  59)		this->do_safe_input_delay = true;
HXLINE( 248)		super::__construct(null(),null());
HXLINE( 249)		this->_ptr_tongue = tongue_;
HXLINE( 257)		this->_ptr = ptr;
HXLINE( 258)		if (hx::IsNotNull( superIndex_ )) {
HXLINE( 259)			this->setSuperIndex(superIndex_);
            		}
HXLINE( 263)		if (hx::IsNotNull( uiVars_ )) {
HXLINE( 265)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 266)			{
HXLINE( 266)				HX_VARI(  ::Dynamic,key) = uiVars_->keys();
HXDLIN( 266)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 266)					HX_VARI_NAME( ::String,key1,"key") = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 268)					::Dynamic this1 = this->_variable_index;
HXDLIN( 268)					( ( ::haxe::ds::StringMap)(this1) )->set(key1,( (::String)(uiVars_->get(key1)) ));
            				}
            			}
            		}
HXLINE( 272)		if (hx::IsNotNull( data )) {
HXLINE( 273)			this->load(data);
            		}
            	}

Dynamic FlxUI_obj::__CreateEmpty() { return new FlxUI_obj; }

void *FlxUI_obj::_hx_vtable = 0;

Dynamic FlxUI_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUI_obj > _hx_result = new FlxUI_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x263b73ac) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x263b73ac;
		}
	} else {
		if (inClassId<=(int)0x2e105115) {
			return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
		} else {
			return inClassId==(int)0x54c34e23;
		}
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getEvent,
	(  ::Dynamic (hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getRequest,
};

void *FlxUI_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter;
	}
	return super::_hx_getInterface(inHash);
}

bool FlxUI_obj::get_isRoot(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_69_get_isRoot)
            	HX_STACK_THIS(this)
HXLINE(  69)		if (hx::IsNotNull( this->_ptr )) {
HXLINE(  69)			::Dynamic _hx_tmp = this->_ptr;
HXDLIN(  69)			return hx::IsEq( _hx_tmp,::flixel::addons::ui::FlxUI_obj::getLeafUIState() );
            		}
            		else {
HXLINE(  69)			return false;
            		}
HXDLIN(  69)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_isRoot,return )

::Dynamic FlxUI_obj::get_tongue(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_79_get_tongue)
            	HX_STACK_THIS(this)
HXLINE(  79)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_tongue,return )

::Dynamic FlxUI_obj::set_tongue(::Dynamic t){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_81_set_tongue)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE(  82)		this->_ptr_tongue = t;
HXLINE(  83)		this->_tongueSet(this->group->members,t);
HXLINE(  84)		return this->_ptr_tongue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_tongue,return )

::Dynamic FlxUI_obj::set_focus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_88_set_focus)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(widget,"widget")
HXLINE(  89)		if (hx::IsNotNull( this->focus )) {
HXLINE(  90)			this->onFocusLost(this->focus);
            		}
HXLINE(  92)		this->focus = widget;
HXLINE(  93)		if (hx::IsNotNull( this->focus )) {
HXLINE(  94)			this->onFocus(this->focus);
            		}
HXLINE(  96)		return widget;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_focus,return )

void FlxUI_obj::_tongueSet(::Array< ::Dynamic> list,::Dynamic tongue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_119__tongueSet)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(list,"list")
            	HX_STACK_ARG(tongue,"tongue")
HXLINE( 119)		HX_VARI( int,_g) = (int)0;
HXDLIN( 119)		while((_g < list->length)){
HXLINE( 119)			HX_VARI(  ::flixel::FlxSprite,fs) = list->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 119)			_g = (_g + (int)1);
HXLINE( 120)			if (::Std_obj::is(fs,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 122)				this->_tongueSet(hx::TCast<  ::flixel::group::FlxTypedSpriteGroup >::cast(fs)->group->members,tongue);
            			}
            			else {
HXLINE( 123)				if (::Std_obj::is(fs,hx::ClassOf< ::flixel::addons::ui::FlxUI >())) {
HXLINE( 125)					hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(fs)->set_tongue(tongue);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_tongueSet,(void))

void FlxUI_obj::callEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_204_callEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(sender,"sender")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(params,"params")
HXLINE( 204)		this->getEvent(name,sender,data,params);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,callEvent,(void))

void FlxUI_obj::getEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_208_getEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(sender,"sender")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(params,"params")
HXLINE( 208)		if (hx::IsNotNull( this->_ptr )) {
HXLINE( 210)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,name,sender,data,params);
HXLINE( 211)			if ((name == HX_("post_load",a5,55,d0,20))) {
HXLINE( 214)				HX_VARI(  ::Dynamic,key) = ::haxe::IMap_obj::keys(this->_asset_index);
HXDLIN( 214)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 214)					HX_VARI_NAME( ::String,key1,"key") = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 216)					HX_VARI( ::Dynamic,thing) = ::haxe::IMap_obj::get(this->_asset_index,key1);
HXLINE( 217)					if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUI >())) {
HXLINE( 220)						( ( ::flixel::addons::ui::FlxUI)(thing) )->getEvent(HX_("post_load",a5,55,d0,20),sender,data,null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getEvent,(void))

 ::Dynamic FlxUI_obj::getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_227_getRequest)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(sender,"sender")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(params,"params")
HXLINE( 228)		if (hx::IsNotNull( this->_ptr )) {
HXLINE( 229)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,name,sender,data,params);
            		}
HXLINE( 231)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getRequest,return )

void FlxUI_obj::onFocus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_278_onFocus)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(widget,"widget")
HXLINE( 278)		if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 280)			HX_VARI( int,_g) = (int)0;
HXDLIN( 280)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->group->members;
HXDLIN( 280)			while((_g < _g1->length)){
HXLINE( 280)				HX_VARI(  ::flixel::FlxSprite,asset) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 280)				_g = (_g + (int)1);
HXLINE( 281)				this->setWidgetSuppression(asset,widget,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocus,(void))

void FlxUI_obj::setWidgetSuppression( ::flixel::FlxSprite asset,::Dynamic butNotThisOne,hx::Null< bool >  __o_suppressed){
bool suppressed = __o_suppressed.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_287_setWidgetSuppression)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(asset,"asset")
            	HX_STACK_ARG(butNotThisOne,"butNotThisOne")
            	HX_STACK_ARG(suppressed,"suppressed")
HXLINE( 287)		if (::Std_obj::is(asset,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >())) {
HXLINE( 288)			HX_VARI( bool,skip) = false;
HXLINE( 289)			if (::Std_obj::is(asset,hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 291)				if (hx::IsEq( ( ( ::flixel::addons::ui::FlxUIDropDownMenu)(asset) ),butNotThisOne )) {
HXLINE( 292)					skip = true;
            				}
            			}
HXLINE( 295)			if (!(skip)) {
HXLINE( 297)				::flixel::addons::ui::interfaces::IFlxUIClickable_obj::set_skipButtonUpdate(asset,suppressed);
            			}
            		}
            		else {
HXLINE( 299)			if (::Std_obj::is(asset,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 301)				HX_VARI( int,_g) = (int)0;
HXDLIN( 301)				HX_VARI( ::Array< ::Dynamic>,_g1) = ( ( ::flixel::addons::ui::FlxUIGroup)(asset) )->group->members;
HXDLIN( 301)				while((_g < _g1->length)){
HXLINE( 301)					HX_VARI(  ::flixel::FlxSprite,groupAsset) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 301)					_g = (_g + (int)1);
HXLINE( 302)					this->setWidgetSuppression(groupAsset,butNotThisOne,suppressed);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,setWidgetSuppression,(void))

void FlxUI_obj::onFocusLost(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_313_onFocusLost)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(widget,"widget")
HXLINE( 313)		if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 317)			HX_VARI( int,_g) = (int)0;
HXDLIN( 317)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->group->members;
HXDLIN( 317)			while((_g < _g1->length)){
HXLINE( 317)				HX_VARI(  ::flixel::FlxSprite,asset) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 317)				_g = (_g + (int)1);
HXLINE( 318)				this->setWidgetSuppression(asset,null(),false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocusLost,(void))

void FlxUI_obj::setSuperIndex( ::flixel::addons::ui::FlxUI flxUI){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_329_setSuperIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(flxUI,"flxUI")
HXLINE( 329)		this->_superIndexUI = flxUI;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,setSuperIndex,(void))

void FlxUI_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_332_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 333)		if (this->do_safe_input_delay) {
HXLINE( 334)			 ::flixel::addons::ui::FlxUI _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 334)			_hx_tmp->_safe_input_delay_elapsed = (_hx_tmp->_safe_input_delay_elapsed + ::flixel::FlxG_obj::elapsed);
HXLINE( 335)			if ((this->_safe_input_delay_elapsed > this->safe_input_delay_time)) {
HXLINE( 336)				this->do_safe_input_delay = false;
            			}
            			else {
HXLINE( 338)				return;
            			}
            		}
HXLINE( 341)		this->super::update(elapsed);
            	}


bool FlxUI_obj::toggleShow(::String key){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_345_toggleShow)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
HXLINE( 346)		HX_VARI( ::Dynamic,thing) = this->getAsset(key,false);
HXLINE( 347)		if (hx::IsNull( thing )) {
HXLINE( 349)			HX_VARI(  ::flixel::addons::ui::FlxUIGroup,group) = this->getGroup(key,false);
HXLINE( 350)			if (hx::IsNotNull( group )) {
HXLINE( 352)				group->set_visible(!(group->visible));
HXLINE( 353)				return group->visible;
            			}
            		}
            		else {
HXLINE( 358)			::flixel::IFlxBasic_obj::set_visible(thing,!(( (bool)(thing->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )));
HXLINE( 359)			return  ::Dynamic(thing->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic));
            		}
HXLINE( 361)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,toggleShow,return )

void FlxUI_obj::showGroup(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_365_showGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(Show,"Show")
            	HX_STACK_ARG(Active,"Active")
HXLINE( 366)		HX_VARI(  ::flixel::addons::ui::FlxUIGroup,group) = this->getGroup(key,false);
HXLINE( 367)		if (hx::IsNotNull( group )) {
HXLINE( 369)			group->set_visible(Show);
HXLINE( 370)			if (hx::IsNull( Active )) {
HXLINE( 372)				group->set_active(Show);
            			}
            			else {
HXLINE( 376)				group->set_active(Active);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showGroup,(void))

void FlxUI_obj::showAsset(::String key,bool Show, ::Dynamic Active){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_382_showAsset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(Show,"Show")
            	HX_STACK_ARG(Active,"Active")
HXLINE( 383)		HX_VARI( ::Dynamic,asset) = this->getAsset(key,false);
HXLINE( 384)		if (hx::IsNotNull( asset )) {
HXLINE( 385)			::flixel::IFlxBasic_obj::set_visible(asset,Show);
HXLINE( 386)			if (hx::IsNull( Active )) {
HXLINE( 388)				::flixel::IFlxBasic_obj::set_active(asset,Show);
            			}
            			else {
HXLINE( 392)				::flixel::IFlxBasic_obj::set_active(asset,Active);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showAsset,(void))

::Dynamic FlxUI_obj::removeAsset(::String key,hx::Null< bool >  __o_destroy){
bool destroy = __o_destroy.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_404_removeAsset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(destroy,"destroy")
HXLINE( 405)		HX_VARI( ::Dynamic,asset) = this->getAsset(key,false);
HXLINE( 406)		if (hx::IsNotNull( asset )) {
HXLINE( 407)			this->replaceInGroup(( ( ::flixel::FlxSprite)(asset) ),null(),true);
HXLINE( 408)			this->_asset_index->remove(key);
            		}
HXLINE( 410)		bool _hx_tmp;
HXDLIN( 410)		if (destroy) {
HXLINE( 410)			_hx_tmp = hx::IsNotNull( asset );
            		}
            		else {
HXLINE( 410)			_hx_tmp = false;
            		}
HXDLIN( 410)		if (_hx_tmp) {
HXLINE( 411)			::flixel::IFlxBasic_obj::destroy(asset);
HXLINE( 412)			asset = null();
            		}
HXLINE( 414)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,removeAsset,return )

bool FlxUI_obj::addAsset(::Dynamic asset,::String key,::String __o_group_name,hx::Null< bool >  __o_recursive){
::String group_name = __o_group_name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
bool recursive = __o_recursive.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_425_addAsset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(asset,"asset")
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(group_name,"group_name")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE( 426)		if (this->_asset_index->exists(key)) {
HXLINE( 436)			return false;
            		}
HXLINE( 439)		HX_VARI(  ::flixel::addons::ui::FlxUIGroup,g) = this->getGroup(group_name,recursive);
HXLINE( 440)		if (hx::IsNotNull( g )) {
HXLINE( 442)			g->add(( ( ::flixel::FlxSprite)(asset) )).StaticCast<  ::flixel::FlxSprite >();
            		}
            		else {
HXLINE( 446)			this->add(( ( ::flixel::FlxSprite)(asset) ));
            		}
HXLINE( 449)		this->_asset_index->set(key,asset);
HXLINE( 451)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,addAsset,return )

::Dynamic FlxUI_obj::replaceAsset(::String key,::Dynamic replace,hx::Null< bool >  __o_center_x,hx::Null< bool >  __o_center_y,hx::Null< bool >  __o_destroy_old){
bool center_x = __o_center_x.Default(true);
bool center_y = __o_center_y.Default(true);
bool destroy_old = __o_destroy_old.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_462_replaceAsset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(replace,"replace")
            	HX_STACK_ARG(center_x,"center_x")
            	HX_STACK_ARG(center_y,"center_y")
            	HX_STACK_ARG(destroy_old,"destroy_old")
HXLINE( 464)		HX_VARI( ::Dynamic,original) = this->getAsset(key,false);
HXLINE( 466)		if (hx::IsNotNull( original )) {
HXLINE( 468)			if (!(center_x)) {
HXLINE( 469)				::flixel::IFlxSprite_obj::set_x(replace, ::Dynamic(original->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
            			}
            			else {
HXLINE( 471)				HX_VARI_NAME( Float,original1,"original") = ( (Float)(original->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 471)				Float _hx_tmp = ( (Float)(original->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXDLIN( 471)				::flixel::IFlxSprite_obj::set_x(replace,(original1 + ((Float)(_hx_tmp - ( (Float)(replace->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )) / (Float)(int)2)));
            			}
HXLINE( 473)			if (!(center_y)) {
HXLINE( 474)				::flixel::IFlxSprite_obj::set_y(replace, ::Dynamic(original->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
            			}
            			else {
HXLINE( 476)				HX_VARI_NAME( Float,original2,"original") = ( (Float)(original->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 476)				Float _hx_tmp1 = ( (Float)(original->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXDLIN( 476)				::flixel::IFlxSprite_obj::set_y(replace,(original2 + ((Float)(_hx_tmp1 - ( (Float)(replace->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )) / (Float)(int)2)));
            			}
HXLINE( 480)			this->replaceInGroup(( ( ::flixel::FlxSprite)(original) ),( ( ::flixel::FlxSprite)(replace) ),null());
HXLINE( 483)			this->_asset_index->remove(key);
HXLINE( 486)			this->_asset_index->set(key,replace);
HXLINE( 489)			if (destroy_old) {
HXLINE( 490)				::flixel::IFlxBasic_obj::destroy(original);
HXLINE( 491)				original = null();
            			}
            		}
HXLINE( 495)		return original;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,replaceAsset,return )

void FlxUI_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_503_destroy)
            	HX_STACK_THIS(this)
HXLINE( 504)		if (hx::IsNotNull( this->_group_index )) {
HXLINE( 505)			{
HXLINE( 505)				HX_VARI(  ::Dynamic,key) = this->_group_index->keys();
HXDLIN( 505)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 505)					HX_VARI_NAME( ::String,key1,"key") = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 506)					this->_group_index->remove(key1);
            				}
            			}
HXLINE( 507)			this->_group_index = null();
            		}
HXLINE( 509)		if (hx::IsNotNull( this->_asset_index )) {
HXLINE( 510)			{
HXLINE( 510)				HX_VARI_NAME(  ::Dynamic,key2,"key") = this->_asset_index->keys();
HXDLIN( 510)				while(( (bool)(key2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 510)					HX_VARI_NAME( ::String,key3,"key") = ( (::String)(key2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 511)					this->_asset_index->remove(key3);
            				}
            			}
HXLINE( 512)			this->_asset_index = null();
            		}
HXLINE( 514)		if (hx::IsNotNull( this->_tag_index )) {
HXLINE( 515)			{
HXLINE( 515)				HX_VARI_NAME(  ::Dynamic,key4,"key") = this->_tag_index->keys();
HXDLIN( 515)				while(( (bool)(key4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 515)					HX_VARI_NAME( ::String,key5,"key") = ( (::String)(key4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 516)					::flixel::util::FlxArrayUtil_obj::clearArray(( (::cpp::VirtualArray)(this->_tag_index->get(key5)) ),null());
HXLINE( 517)					this->_tag_index->remove(key5);
            				}
            			}
HXLINE( 518)			this->_tag_index = null();
            		}
HXLINE( 520)		if (hx::IsNotNull( this->_definition_index )) {
HXLINE( 521)			{
HXLINE( 521)				HX_VARI_NAME(  ::Dynamic,key6,"key") = this->_definition_index->keys();
HXDLIN( 521)				while(( (bool)(key6->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 521)					HX_VARI_NAME( ::String,key7,"key") = ( (::String)(key6->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 522)					this->_definition_index->remove(key7);
            				}
            			}
HXLINE( 523)			this->_definition_index = null();
            		}
HXLINE( 525)		if (hx::IsNotNull( this->_variable_index )) {
HXLINE( 526)			{
HXLINE( 526)				HX_VARI_NAME(  ::Dynamic,key8,"key") = this->_variable_index->keys();
HXDLIN( 526)				while(( (bool)(key8->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 526)					HX_VARI_NAME( ::String,key9,"key") = ( (::String)(key8->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 527)					this->_variable_index->remove(key9);
            				}
            			}
HXLINE( 528)			this->_variable_index = null();
            		}
HXLINE( 530)		if (hx::IsNotNull( this->_mode_index )) {
HXLINE( 531)			{
HXLINE( 531)				HX_VARI_NAME(  ::Dynamic,key10,"key") = this->_mode_index->keys();
HXDLIN( 531)				while(( (bool)(key10->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 531)					HX_VARI_NAME( ::String,key11,"key") = ( (::String)(key10->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 532)					this->_mode_index->remove(key11);
            				}
            			}
HXLINE( 533)			this->_mode_index = null();
            		}
HXLINE( 535)		this->_ptr = null();
HXLINE( 536)		this->_superIndexUI = null();
HXLINE( 537)		this->_ptr_tongue = null();
HXLINE( 538)		if (hx::IsNotNull( this->cursorLists )) {
HXLINE( 540)			{
HXLINE( 540)				HX_VARI( int,_g) = (int)0;
HXDLIN( 540)				HX_VARI( ::Array< ::Dynamic>,_g1) = this->cursorLists;
HXDLIN( 540)				while((_g < _g1->length)){
HXLINE( 540)					HX_VARI( ::Array< ::Dynamic>,arr) = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 540)					_g = (_g + (int)1);
HXLINE( 542)					::flixel::util::FlxArrayUtil_obj::clearArray(arr,null());
            				}
            			}
HXLINE( 544)			::flixel::util::FlxArrayUtil_obj::clearArray(this->cursorLists,null());
            		}
HXLINE( 546)		this->cursorLists = null();
HXLINE( 547)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_failure_checks,null());
HXDLIN( 547)		this->_failure_checks = null();
HXLINE( 548)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_assetsToCleanUp,null());
HXDLIN( 548)		this->_assetsToCleanUp = null();
HXLINE( 549)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_scaledAssets,null());
HXDLIN( 549)		this->_scaledAssets = null();
HXLINE( 550)		this->super::destroy();
            	}


void FlxUI_obj::load( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_561_load)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE( 562)		this->_group_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 563)		this->_asset_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 564)		this->_tag_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 565)		this->_definition_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 566)		if (hx::IsNull( this->_variable_index )) {
HXLINE( 568)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 570)		this->_mode_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 572)		if (hx::IsNotNull( data )) {
HXLINE( 574)			if (hx::IsNull( this->_superIndexUI )) {
HXLINE( 577)				HX_VARI(  ::flixel::addons::ui::FlxUIRegion,screenRegion) =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 578)				screenRegion->name = HX_("screen",6c,3b,5d,47);
HXLINE( 579)				this->addAsset(screenRegion,HX_("screen",6c,3b,5d,47),null(),null());
            			}
HXLINE( 582)			this->_data = data;
HXLINE( 585)			if (data->hasNode->resolve(HX_("inject",91,4a,ea,97))) {
HXLINE( 587)				while(data->hasNode->resolve(HX_("inject",91,4a,ea,97))){
HXLINE( 589)					HX_VARI(  ::haxe::xml::Fast,inj_data) = data->node->resolve(HX_("inject",91,4a,ea,97));
HXLINE( 591)					HX_VARI(  ::Xml,payload) = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(::flixel::addons::ui::U_obj::xml_name(inj_data->x),HX_("xml",d7,6d,5b,00),false,null())) );
HXLINE( 592)					if (hx::IsNotNull( payload )) {
HXLINE( 594)						HX_VARI(  ::Xml,parent) = inj_data->x->parent;
HXLINE( 595)						HX_VARI( int,i) = (int)0;
HXLINE( 596)						{
HXLINE( 596)							HX_VARI( int,_g) = (int)0;
HXDLIN( 596)							HX_VARI( ::Array< ::Dynamic>,_g1) = parent->children;
HXDLIN( 596)							while((_g < _g1->length)){
HXLINE( 596)								HX_VARI(  ::Xml,child) = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 596)								_g = (_g + (int)1);
HXLINE( 598)								if (hx::IsEq( child,inj_data->x )) {
HXLINE( 600)									goto _hx_goto_35;
            								}
HXLINE( 602)								i = (i + (int)1);
            							}
            							_hx_goto_35:;
            						}
HXLINE( 605)						if (parent->removeChild(inj_data->x)) {
HXLINE( 607)							HX_VARI( int,j) = (int)0;
HXLINE( 608)							{
HXLINE( 608)								HX_VARI(  ::Dynamic,e) = payload->elements();
HXDLIN( 608)								while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 610)									parent->insertChild(( ( ::Xml)(e->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) ),(i + j));
HXLINE( 611)									j = (j + (int)1);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 619)			if (data->hasNode->resolve(HX_("include",28,fe,f6,51))) {
HXLINE( 621)				HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("include",28,fe,f6,51))->h;
HXDLIN( 621)				while(hx::IsNotNull( _g_head )){
HXLINE( 621)					HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN( 621)					_g_head = _g_head->next;
HXLINE( 623)					HX_VARI( ::String,inc_name) = ::flixel::addons::ui::U_obj::xml_name(val->x);
HXLINE( 625)					HX_VARI(  ::haxe::xml::Fast,liveFile) = null();
HXLINE( 642)					HX_VARI(  ::haxe::xml::Fast,inc_xml) = null();
HXLINE( 643)					if (hx::IsNull( liveFile )) {
HXLINE( 645)						inc_xml = ( ( ::haxe::xml::Fast)(::flixel::addons::ui::U_obj::xml(inc_name,null(),null(),null())) );
            					}
            					else {
HXLINE( 649)						inc_xml = liveFile;
            					}
HXLINE( 652)					if (hx::IsNotNull( inc_xml )) {
HXLINE( 654)						{
HXLINE( 654)							HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = inc_xml->nodes->resolve(HX_("definition",93,d5,0d,ec))->h;
HXDLIN( 654)							while(hx::IsNotNull( _g_head1 )){
HXLINE( 654)								HX_VARI_NAME(  ::haxe::xml::Fast,val1,"val") = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN( 654)								_g_head1 = _g_head1->next;
HXLINE( 657)								HX_VARI( ::String,def_name) = (HX_("include:",12,65,27,66) + ::flixel::addons::ui::U_obj::xml_name(val1->x));
HXLINE( 659)								this->unparentXML(val1);
HXLINE( 661)								this->_definition_index->set(def_name,val1);
            							}
            						}
HXLINE( 667)						if (inc_xml->hasNode->resolve(HX_("point_size",50,66,f5,4b))) {
HXLINE( 669)							this->_loadPointSize(inc_xml);
            						}
HXLINE( 672)						if (inc_xml->hasNode->resolve(HX_("default",c1,d8,c3,9b))) {
HXLINE( 674)							HX_VARI_NAME(  ::_List::ListNode,_g_head2,"_g_head") = inc_xml->nodes->resolve(HX_("default",c1,d8,c3,9b))->h;
HXDLIN( 674)							while(hx::IsNotNull( _g_head2 )){
HXLINE( 674)								HX_VARI_NAME(  ::haxe::xml::Fast,val2,"val") = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN( 674)								_g_head2 = _g_head2->next;
HXLINE( 676)								if (this->_loadTest(val2)) {
HXLINE( 678)									HX_VARI( ::String,defaultName) = ::flixel::addons::ui::U_obj::xml_name(val2->x);
HXLINE( 680)									this->unparentXML(val2);
HXLINE( 682)									this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName),val2);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 692)			if (data->hasNode->resolve(HX_("point_size",50,66,f5,4b))) {
HXLINE( 694)				this->_loadPointSize(data);
            			}
HXLINE( 698)			if (data->hasNode->resolve(HX_("definition",93,d5,0d,ec))) {
HXLINE( 700)				HX_VARI_NAME(  ::_List::ListNode,_g_head3,"_g_head") = data->nodes->resolve(HX_("definition",93,d5,0d,ec))->h;
HXDLIN( 700)				while(hx::IsNotNull( _g_head3 )){
HXLINE( 700)					HX_VARI_NAME(  ::haxe::xml::Fast,val3,"val") = ( ( ::haxe::xml::Fast)(_g_head3->item) );
HXDLIN( 700)					_g_head3 = _g_head3->next;
HXLINE( 702)					if (this->_loadTest(val3)) {
HXLINE( 704)						HX_VARI_NAME( ::String,def_name1,"def_name") = ::flixel::addons::ui::U_obj::xml_name(val3->x);
HXLINE( 705)						HX_VARI( ::String,error) = HX_("",00,00,00,00);
HXLINE( 706)						if ((def_name1.indexOf(HX_("default:",59,d0,99,af),null()) != (int)-1)) {
HXLINE( 708)							error = HX_("'default:'",a7,c0,54,42);
            						}
HXLINE( 710)						if ((def_name1.indexOf(HX_("include:",12,65,27,66),null()) != (int)-1)) {
HXLINE( 712)							error = HX_("'include:'",ce,4d,a9,47);
            						}
HXLINE( 714)						if ((error == HX_("",00,00,00,00))) {
HXLINE( 720)							this->unparentXML(val3);
HXLINE( 722)							this->_definition_index->set(def_name1,val3);
            						}
            					}
            				}
            			}
HXLINE( 728)			if (data->hasNode->resolve(HX_("default",c1,d8,c3,9b))) {
HXLINE( 730)				HX_VARI_NAME(  ::_List::ListNode,_g_head4,"_g_head") = data->nodes->resolve(HX_("default",c1,d8,c3,9b))->h;
HXDLIN( 730)				while(hx::IsNotNull( _g_head4 )){
HXLINE( 730)					HX_VARI_NAME(  ::haxe::xml::Fast,val4,"val") = ( ( ::haxe::xml::Fast)(_g_head4->item) );
HXDLIN( 730)					_g_head4 = _g_head4->next;
HXLINE( 732)					if (this->_loadTest(val4)) {
HXLINE( 734)						HX_VARI_NAME( ::String,defaultName1,"defaultName") = ::flixel::addons::ui::U_obj::xml_name(val4->x);
HXLINE( 736)						this->unparentXML(val4);
HXLINE( 738)						this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName1),val4);
            					}
            				}
            			}
HXLINE( 744)			if (data->hasNode->resolve(HX_("variable",3c,12,0d,69))) {
HXLINE( 746)				HX_VARI_NAME(  ::_List::ListNode,_g_head5,"_g_head") = data->nodes->resolve(HX_("variable",3c,12,0d,69))->h;
HXDLIN( 746)				while(hx::IsNotNull( _g_head5 )){
HXLINE( 746)					HX_VARI_NAME(  ::haxe::xml::Fast,val5,"val") = ( ( ::haxe::xml::Fast)(_g_head5->item) );
HXDLIN( 746)					_g_head5 = _g_head5->next;
HXLINE( 748)					if (this->_loadTest(val5)) {
HXLINE( 750)						HX_VARI( ::String,var_name) = ::flixel::addons::ui::U_obj::xml_name(val5->x);
HXLINE( 751)						HX_VARI( ::String,var_value) = ::flixel::addons::ui::U_obj::xml_str(val5->x,HX_("value",71,7f,b8,31),null(),null());
HXLINE( 752)						if ((var_name != HX_("",00,00,00,00))) {
HXLINE( 754)							this->_variable_index->set(var_name,var_value);
            						}
            					}
            				}
            			}
HXLINE( 761)			if (data->hasNode->resolve(HX_("mode",63,d3,60,48))) {
HXLINE( 763)				HX_VARI_NAME(  ::_List::ListNode,_g_head6,"_g_head") = data->nodes->resolve(HX_("mode",63,d3,60,48))->h;
HXDLIN( 763)				while(hx::IsNotNull( _g_head6 )){
HXLINE( 763)					HX_VARI_NAME(  ::haxe::xml::Fast,val6,"val") = ( ( ::haxe::xml::Fast)(_g_head6->item) );
HXDLIN( 763)					_g_head6 = _g_head6->next;
HXLINE( 765)					if (this->_loadTest(val6)) {
HXLINE( 767)						HX_VARI(  ::haxe::xml::Fast,mode_data2) = this->applyNodeConditionals(val6);
HXLINE( 768)						HX_VARI( ::String,mode_name) = ::flixel::addons::ui::U_obj::xml_name(val6->x);
HXLINE( 771)						this->unparentXML(mode_data2);
HXLINE( 773)						this->_mode_index->set(mode_name,mode_data2);
            					}
            				}
            			}
HXLINE( 779)			if (data->hasNode->resolve(HX_("group",3f,b3,f4,99))) {
HXLINE( 781)				HX_VARI_NAME(  ::_List::ListNode,_g_head7,"_g_head") = data->nodes->resolve(HX_("group",3f,b3,f4,99))->h;
HXDLIN( 781)				while(hx::IsNotNull( _g_head7 )){
HXLINE( 781)					HX_VARI_NAME(  ::haxe::xml::Fast,val7,"val") = ( ( ::haxe::xml::Fast)(_g_head7->item) );
HXDLIN( 781)					_g_head7 = _g_head7->next;
HXLINE( 783)					if (this->_loadTest(val7)) {
HXLINE( 786)						HX_VARI( ::String,name) = ::flixel::addons::ui::U_obj::xml_name(val7->x);
HXLINE( 787)						HX_VARI( ::String,custom) = ::flixel::addons::ui::U_obj::xml_str(val7->x,HX_("custom",b1,87,92,3f),null(),null());
HXLINE( 789)						HX_VARI(  ::flixel::addons::ui::FlxUIGroup,tempGroup) = null();
HXLINE( 792)						if ((custom != HX_("",00,00,00,00))) {
HXLINE( 794)							HX_VARI(  ::Dynamic,result) = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,HX_("ui_get_group:",2f,b3,b6,b7),hx::ObjectPtr<OBJ_>(this),custom,null());
HXLINE( 795)							bool _hx_tmp;
HXDLIN( 795)							if (hx::IsNotNull( result )) {
HXLINE( 795)								_hx_tmp = ::Std_obj::is(result,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >());
            							}
            							else {
HXLINE( 795)								_hx_tmp = false;
            							}
HXDLIN( 795)							if (_hx_tmp) {
HXLINE( 797)								tempGroup = ( ( ::flixel::addons::ui::FlxUIGroup)(result) );
            							}
            						}
HXLINE( 801)						if (hx::IsNull( tempGroup )) {
HXLINE( 803)							tempGroup =  ::flixel::addons::ui::FlxUIGroup_obj::__alloc( HX_CTX ,null(),null());
            						}
HXLINE( 806)						tempGroup->name = name;
HXLINE( 807)						this->_group_index->set(name,tempGroup);
HXLINE( 808)						this->add(tempGroup);
            					}
            				}
            			}
HXLINE( 813)			if (hx::IsNotNull( data->x->firstElement() )) {
HXLINE( 817)				HX_VARI(  ::Dynamic,node) = data->x->elements();
HXDLIN( 817)				while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 819)					this->_loadSub(( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) ),null());
            				}
            			}
HXLINE( 823)			this->_postLoad(data);
            		}
            		else {
HXLINE( 827)			this->_onFinishLoad();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,load,(void))

 ::haxe::xml::Fast FlxUI_obj::unparentXML( ::haxe::xml::Fast f){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_833_unparentXML)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
HXLINE( 833)		return ::flixel::addons::ui::U_obj::unparentXML(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,unparentXML,return )

void FlxUI_obj::_loadPointSize( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_837__loadPointSize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE( 838)		HX_VARI( Float,ptx) = this->_loadWidth(data->node->resolve(HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("x",78,00,00,00),null());
HXLINE( 839)		HX_VARI( Float,pty) = this->_loadHeight(data->node->resolve(HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("y",79,00,00,00),null());
HXLINE( 842)		bool _hx_tmp;
HXDLIN( 842)		if ((pty < (int)1)) {
HXLINE( 842)			_hx_tmp = (ptx < (int)1);
            		}
            		else {
HXLINE( 842)			_hx_tmp = false;
            		}
HXDLIN( 842)		if (_hx_tmp) {
HXLINE( 844)			pty = this->_loadHeight(data->node->resolve(HX_("point_size",50,66,f5,4b)),(int)-1,HX_("value",71,7f,b8,31),null());
HXLINE( 845)			ptx = pty;
            		}
HXLINE( 849)		if ((pty > (int)0)) {
HXLINE( 851)			this->_pointX = ptx;
            		}
HXLINE( 853)		if ((ptx > (int)0)) {
HXLINE( 855)			this->_pointY = pty;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadPointSize,(void))

void FlxUI_obj::_loadSub( ::Xml node,hx::Null< int >  __o_iteration){
int iteration = __o_iteration.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_861__loadSub)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(iteration,"iteration")
HXLINE( 864)		if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE( 864)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node->nodeType));
            		}
HXDLIN( 864)		HX_VARI( ::String,type) = node->nodeName;
HXLINE( 865)		type.toLowerCase();
HXLINE( 866)		HX_VARI(  ::haxe::xml::Fast,obj) =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,node);
HXLINE( 870)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE( 872)			if (this->_loadTest(obj)) {
HXLINE( 874)				if (hx::IsNotNull( node->firstElement() )) {
HXLINE( 876)					HX_VARI(  ::Dynamic,subNode) = node->elements();
HXDLIN( 876)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 878)						this->_loadSub(( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) ),(iteration + (int)1));
            					}
            				}
            			}
HXLINE( 883)			return;
            		}
HXLINE( 886)		HX_VARI( ::String,group_name) = HX_("",00,00,00,00);
HXLINE( 887)		HX_VARI(  ::flixel::addons::ui::FlxUIGroup,tempGroup) = null();
HXLINE( 889)		HX_VARI( ::String,thing_name) = ::flixel::addons::ui::U_obj::xml_name(obj->x);
HXLINE( 891)		if (obj->has->resolve(HX_("group",3f,b3,f4,99))) {
HXLINE( 892)			group_name = obj->att->resolve(HX_("group",3f,b3,f4,99));
HXLINE( 893)			tempGroup = this->getGroup(group_name,null());
            		}
HXLINE( 897)		HX_VARI( ::Dynamic,thing) = this->_loadThing(type,obj);
HXLINE( 899)		if (hx::IsNotNull( thing )) {
HXLINE( 900)			this->_loadGlobals(obj,thing);
HXLINE( 902)			bool _hx_tmp;
HXDLIN( 902)			if (hx::IsNotNull( thing_name )) {
HXLINE( 902)				_hx_tmp = (thing_name != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 902)				_hx_tmp = false;
            			}
HXDLIN( 902)			if (_hx_tmp) {
HXLINE( 903)				this->_asset_index->set(thing_name,thing);
HXLINE( 906)				thing->__SetField(HX_("name",4b,72,ff,48),thing_name,hx::paccDynamic);
HXLINE( 908)				HX_VARI( ::String,thing_tags) = ::flixel::addons::ui::U_obj::xml_str(obj->x,HX_("tags",d9,b4,f6,4c),null(),null());
HXLINE( 909)				if ((thing_tags != HX_("",00,00,00,00))) {
HXLINE( 912)					this->_addTags(thing_tags.split(HX_(",",2c,00,00,00)),thing_name);
            				}
            			}
HXLINE( 916)			bool _hx_tmp1;
HXDLIN( 916)			if (!(::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIButton >()))) {
HXLINE( 916)				_hx_tmp1 = ::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >());
            			}
            			else {
HXLINE( 916)				_hx_tmp1 = true;
            			}
HXDLIN( 916)			if (_hx_tmp1) {
HXLINE( 918)				this->_loadTooltip(thing,obj);
            			}
HXLINE( 921)			if (hx::IsNotNull( tempGroup )) {
HXLINE( 922)				tempGroup->add(( ( ::flixel::FlxSprite)(thing) )).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
HXLINE( 924)				this->add(( ( ::flixel::FlxSprite)(thing) ));
            			}
HXLINE( 927)			this->_loadPosition(obj,thing);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadSub,(void))

void FlxUI_obj::_addTags(::Array< ::String > arr,::String thingName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_933__addTags)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(arr,"arr")
            	HX_STACK_ARG(thingName,"thingName")
HXLINE( 933)		HX_VARI( int,_g) = (int)0;
HXDLIN( 933)		while((_g < arr->length)){
HXLINE( 933)			HX_VARI( ::String,tag) = arr->__get(_g);
HXDLIN( 933)			_g = (_g + (int)1);
HXLINE( 935)			HX_VARI( ::Array< ::String >,list) = null();
HXLINE( 936)			if (!(this->_tag_index->exists(tag))) {
HXLINE( 938)				this->_tag_index->set(tag,::Array_obj< ::String >::__new(0));
            			}
HXLINE( 940)			list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE( 941)			if ((list->indexOf(thingName,null()) == (int)-1)) {
HXLINE( 943)				list->push(thingName);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_addTags,(void))

void FlxUI_obj::_loadGlobals( ::haxe::xml::Fast data, ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_950__loadGlobals)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(thing,"thing")
HXLINE( 950)		if (::Std_obj::is(thing,hx::ClassOf< ::flixel::FlxBasic >())) {
HXLINE( 952)			HX_VARI( bool,isVis) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("visible",72,78,24,a3),true);
HXLINE( 953)			HX_VARI( bool,isActive) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("active",c6,41,46,16),true);
HXLINE( 954)			HX_VARI( int,numID) = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("num_id",74,43,78,a1),null());
HXLINE( 956)			thing->__SetField(HX_("visible",72,78,24,a3),isVis,hx::paccDynamic);
HXLINE( 957)			thing->__SetField(HX_("active",c6,41,46,16),isActive,hx::paccDynamic);
HXLINE( 958)			thing->__SetField(HX_("ID",db,3f,00,00),numID,hx::paccDynamic);
HXLINE( 959)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE( 963)				( ( ::flixel::FlxSprite)(thing) )->set_alpha(::flixel::addons::ui::U_obj::xml_f(data->x,HX_("alpha",5e,a7,96,21),((Float)1.0)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadGlobals,(void))

void FlxUI_obj::_postLoad( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_969__postLoad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE( 970)		this->_postLoaded = true;
HXLINE( 971)		if (hx::IsNotNull( data->x->firstElement() )) {
HXLINE( 974)			HX_VARI(  ::Dynamic,node) = data->x->elements();
HXDLIN( 974)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 974)				HX_VARI_NAME(  ::Xml,node1,"node") = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 976)				if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE( 976)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node1->nodeType));
            				}
HXDLIN( 976)				::String _hx_tmp = node1->nodeName.toLowerCase();
HXDLIN( 976)				this->_postLoadThing(_hx_tmp, ::haxe::xml::Fast_obj::__alloc( HX_CTX ,node1));
            			}
            		}
HXLINE( 980)		if (data->hasNode->resolve(HX_("mode",63,d3,60,48))) {
HXLINE( 981)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("mode",63,d3,60,48))->h;
HXDLIN( 981)			while(hx::IsNotNull( _g_head )){
HXLINE( 981)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN( 981)				_g_head = _g_head->next;
HXLINE( 983)				if (::flixel::addons::ui::U_obj::xml_bool(val->x,HX_("is_default",2c,88,79,76),null())) {
HXLINE( 985)					this->setMode(::flixel::addons::ui::U_obj::xml_name(val->x),null());
HXLINE( 986)					goto _hx_goto_55;
            				}
            			}
            			_hx_goto_55:;
            		}
HXLINE( 991)		if (hx::IsNotNull( this->_failure_checks )) {
HXLINE( 992)			{
HXLINE( 992)				HX_VARI( int,_g) = (int)0;
HXDLIN( 992)				HX_VARI( ::Array< ::Dynamic>,_g1) = this->_failure_checks;
HXDLIN( 992)				while((_g < _g1->length)){
HXLINE( 992)					HX_VARI_NAME(  ::haxe::xml::Fast,data1,"data") = _g1->__get(_g).StaticCast<  ::haxe::xml::Fast >();
HXDLIN( 992)					_g = (_g + (int)1);
HXLINE( 993)					if (this->_checkFailure(data1)) {
HXLINE( 994)						this->failed = true;
HXLINE( 995)						goto _hx_goto_56;
            					}
            				}
            				_hx_goto_56:;
            			}
HXLINE( 998)			::flixel::addons::ui::U_obj::clearArraySoft(this->_failure_checks);
HXLINE( 999)			this->_failure_checks = null();
            		}
HXLINE(1002)		this->_onFinishLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_postLoad,(void))

void FlxUI_obj::_sendTo(::Dynamic thing,int dir){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1006__sendTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(dir,"dir")
HXLINE(1007)		HX_VARI(  ::flixel::addons::ui::FlxUIGroup,group) = this->getAssetGroup(null(),thing);
HXLINE(1008)		if (hx::IsNull( group )) {
HXLINE(1010)			if ((this->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != (int)-1)) {
HXLINE(1012)				group = hx::ObjectPtr<OBJ_>(this);
            			}
            			else {
HXLINE(1016)				return;
            			}
            		}
HXLINE(1019)		bool _hx_tmp;
HXDLIN(1019)		if ((dir != (int)-1)) {
HXLINE(1019)			_hx_tmp = (dir != (int)1);
            		}
            		else {
HXLINE(1019)			_hx_tmp = false;
            		}
HXDLIN(1019)		if (_hx_tmp) {
HXLINE(1021)			return;
            		}
HXLINE(1024)		group->group->members->remove(( ( ::flixel::FlxSprite)(thing) ));
HXLINE(1026)		switch((int)(dir)){
            			case (int)-1: {
HXLINE(1028)				group->group->members->insert((int)0,( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            			case (int)1: {
HXLINE(1029)				group->group->members->push(( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_sendTo,(void))

void FlxUI_obj::sendToFront(::String name,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1040_sendToFront)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1041)		HX_VARI( ::Dynamic,thing) = this->getAsset(name,recursive);
HXLINE(1042)		if (hx::IsNotNull( thing )) {
HXLINE(1042)			this->_sendTo(thing,(int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToFront,(void))

void FlxUI_obj::sendToBack(::String name,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1052_sendToBack)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1053)		HX_VARI( ::Dynamic,thing) = this->getAsset(name,recursive);
HXLINE(1054)		if (hx::IsNotNull( thing )) {
HXLINE(1054)			this->_sendTo(thing,(int)-1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sendToBack,(void))

::String FlxUI_obj::get_currMode(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1058_get_currMode)
            	HX_STACK_THIS(this)
HXLINE(1058)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,get_currMode,return )

::String FlxUI_obj::set_currMode(::String m){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1059_set_currMode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(m,"m")
HXLINE(1059)		this->setMode(m,null());
HXDLIN(1059)		return this->_curr_mode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_currMode,return )

void FlxUI_obj::setMode(::String mode_name,::String __o_target_name){
::String target_name = __o_target_name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1068_setMode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode_name,"mode_name")
            	HX_STACK_ARG(target_name,"target_name")
HXLINE(1069)		if ((this->_curr_mode == mode_name)) {
HXLINE(1071)			return;
            		}
HXLINE(1073)		HX_VARI(  ::haxe::xml::Fast,mode) = this->getMode(mode_name,null());
HXLINE(1074)		this->_curr_mode = mode_name;
HXLINE(1075)		HX_VARI( ::String,name) = HX_("",00,00,00,00);
HXLINE(1076)		HX_VAR( ::Dynamic,thing);
HXLINE(1077)		if ((target_name == HX_("",00,00,00,00))) {
HXLINE(1078)			if (hx::IsNotNull( mode )) {
HXLINE(1080)				HX_VAR(  ::Xml,xml);
HXLINE(1081)				{
HXLINE(1081)					HX_VARI(  ::Dynamic,node) = mode->get_elements();
HXDLIN(1081)					while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1083)						HX_VARI(  ::haxe::xml::Fast,node2) = this->applyNodeConditionals(( ( ::haxe::xml::Fast)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) ));
HXLINE(1084)						xml = node2->x;
HXLINE(1086)						if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(1086)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xml->nodeType));
            						}
HXDLIN(1086)						HX_VARI( ::String,nodeName) = xml->nodeName;
HXLINE(1089)						HX_VAR(  ::Dynamic,activeStatus);
HXDLIN(1089)						if ((::flixel::addons::ui::U_obj::xml_str(xml,HX_("active",c6,41,46,16),null(),null()) == HX_("",00,00,00,00))) {
HXLINE(1089)							activeStatus = null();
            						}
            						else {
HXLINE(1089)							activeStatus = true;
            						}
HXLINE(1090)						if (hx::IsNotNull( activeStatus )) {
HXLINE(1092)							activeStatus = ::flixel::addons::ui::U_obj::xml_bool(xml,HX_("active",c6,41,46,16),null());
            						}
HXLINE(1095)						if (this->_loadTest(node2)) {
HXLINE(1097)							::String _hx_switch_0 = nodeName;
            							if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1103)								this->_alignThing(node2,null());
HXDLIN(1103)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1105)								this->_changeThing(node2);
HXDLIN(1105)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("hide",c2,34,0e,45)) ){
HXLINE(1101)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),false,activeStatus);
HXDLIN(1101)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1107)								name = ::flixel::addons::ui::U_obj::xml_name(xml);
HXLINE(1108)								thing = this->getAsset(name,null());
HXLINE(1109)								if (hx::IsNotNull( thing )) {
HXLINE(1110)									this->_loadPosition(node2,thing);
            								}
HXLINE(1106)								goto _hx_goto_64;
            							}
            							if (  (_hx_switch_0==HX_("show",fd,d4,52,4c)) ){
HXLINE(1099)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),true,activeStatus);
HXDLIN(1099)								goto _hx_goto_64;
            							}
            							_hx_goto_64:;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1117)			HX_VARI( ::Dynamic,target) = this->getAsset(target_name,null());
HXLINE(1118)			bool _hx_tmp;
HXDLIN(1118)			if (hx::IsNotNull( target )) {
HXLINE(1118)				_hx_tmp = ::Std_obj::is(target,hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            			}
            			else {
HXLINE(1118)				_hx_tmp = false;
            			}
HXDLIN(1118)			if (_hx_tmp) {
HXLINE(1120)				hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(target)->setMode(mode_name,HX_("",00,00,00,00));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setMode,(void))

void FlxUI_obj::showThing(::String name,hx::Null< bool >  __o_visibleStatus, ::Dynamic activeStatus){
bool visibleStatus = __o_visibleStatus.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1127_showThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(visibleStatus,"visibleStatus")
            	HX_STACK_ARG(activeStatus,"activeStatus")
HXLINE(1127)		if ((name.indexOf(HX_(",",2c,00,00,00),null()) != (int)-1)) {
HXLINE(1129)			HX_VARI( ::Array< ::String >,names) = name.split(HX_(",",2c,00,00,00));
HXLINE(1130)			{
HXLINE(1130)				HX_VARI( int,_g) = (int)0;
HXDLIN(1130)				while((_g < names->length)){
HXLINE(1130)					HX_VARI( ::String,each_name) = names->__get(_g);
HXDLIN(1130)					_g = (_g + (int)1);
HXLINE(1132)					HX_VARI( ::Dynamic,thing) = this->getAsset(each_name,null());
HXLINE(1133)					if (hx::IsNotNull( thing )) {
HXLINE(1135)						::flixel::IFlxBasic_obj::set_visible(thing,visibleStatus);
HXLINE(1136)						if (hx::IsNotNull( activeStatus )) {
HXLINE(1138)							::flixel::IFlxBasic_obj::set_active(thing,activeStatus);
            						}
            					}
            					else {
HXLINE(1143)						HX_VARI(  ::flixel::addons::ui::FlxUIGroup,group) = this->getGroup(each_name,null());
HXLINE(1144)						if (hx::IsNotNull( group )) {
HXLINE(1146)							group->set_visible(visibleStatus);
HXLINE(1147)							if (hx::IsNotNull( activeStatus )) {
HXLINE(1149)								group->set_active(activeStatus);
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1157)			if ((name != HX_("*",2a,00,00,00))) {
HXLINE(1159)				HX_VARI_NAME( ::Dynamic,thing1,"thing") = this->getAsset(name,null());
HXLINE(1160)				if (hx::IsNotNull( thing1 )) {
HXLINE(1162)					::flixel::IFlxBasic_obj::set_visible(thing1,visibleStatus);
HXLINE(1163)					if (hx::IsNotNull( activeStatus )) {
HXLINE(1165)						::flixel::IFlxBasic_obj::set_active(thing1,activeStatus);
            					}
            				}
            				else {
HXLINE(1170)					HX_VARI_NAME(  ::flixel::addons::ui::FlxUIGroup,group1,"group") = this->getGroup(name,null());
HXLINE(1171)					if (hx::IsNotNull( group1 )) {
HXLINE(1173)						group1->set_visible(visibleStatus);
HXLINE(1174)						if (hx::IsNotNull( activeStatus )) {
HXLINE(1176)							group1->set_active(activeStatus);
            						}
            					}
            				}
            			}
            			else {
HXLINE(1183)				HX_VARI(  ::Dynamic,asset_name) = this->_asset_index->keys();
HXDLIN(1183)				while(( (bool)(asset_name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1183)					HX_VARI_NAME( ::String,asset_name1,"asset_name") = ( (::String)(asset_name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1185)					if ((asset_name1 != HX_("*",2a,00,00,00))) {
HXLINE(1187)						this->showThing(asset_name1,visibleStatus,activeStatus);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showThing,(void))

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getGroup(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1197_getGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1198)		HX_VARI(  ::flixel::addons::ui::FlxUIGroup,tempGroup) = this->_group_index->get(key).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXLINE(1199)		bool _hx_tmp;
HXDLIN(1199)		bool _hx_tmp1;
HXDLIN(1199)		if (hx::IsNull( tempGroup )) {
HXLINE(1199)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1199)			_hx_tmp1 = false;
            		}
HXDLIN(1199)		if (_hx_tmp1) {
HXLINE(1199)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1199)			_hx_tmp = false;
            		}
HXDLIN(1199)		if (_hx_tmp) {
HXLINE(1201)			return this->_superIndexUI->getGroup(key,recursive);
            		}
HXLINE(1203)		return tempGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getGroup,return )

 ::flixel::text::FlxText FlxUI_obj::getFlxText(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1207_getFlxText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1208)		HX_VARI( ::Dynamic,asset) = this->getAsset(key,recursive);
HXLINE(1209)		if (hx::IsNotNull( asset )) {
HXLINE(1211)			if (::Std_obj::is(asset,hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(1213)				return asset;
            			}
            		}
HXLINE(1216)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getFlxText,return )

::Array< ::Dynamic> FlxUI_obj::getAllAssets(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1220_getAllAssets)
            	HX_STACK_THIS(this)
HXLINE(1221)		HX_VARI( ::Array< ::Dynamic>,arr) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1222)		{
HXLINE(1222)			HX_VARI(  ::Dynamic,key) = this->_asset_index->keys();
HXDLIN(1222)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1224)				arr->push(this->getAsset(( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) ),null()));
            			}
            		}
HXLINE(1226)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAllAssets,return )

::Array< ::String > FlxUI_obj::getAssetKeys(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1230_getAssetKeys)
            	HX_STACK_THIS(this)
HXLINE(1231)		HX_VARI( ::Array< ::String >,arr) = ::Array_obj< ::String >::__new(0);
HXLINE(1232)		{
HXLINE(1232)			HX_VARI(  ::Dynamic,key) = this->_asset_index->keys();
HXDLIN(1232)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1233)				arr->push(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)());
            			}
            		}
HXLINE(1235)		return arr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getAssetKeys,return )

bool FlxUI_obj::hasAsset(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1239_hasAsset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1240)		if (this->_asset_index->exists(key)) {
HXLINE(1242)			return true;
            		}
HXLINE(1244)		bool _hx_tmp;
HXDLIN(1244)		if (recursive) {
HXLINE(1244)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1244)			_hx_tmp = false;
            		}
HXDLIN(1244)		if (_hx_tmp) {
HXLINE(1246)			return this->_superIndexUI->hasAsset(key,recursive);
            		}
HXLINE(1248)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,hasAsset,return )

::Dynamic FlxUI_obj::getAsset(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1252_getAsset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1253)		HX_VARI( ::Dynamic,asset) = this->_asset_index->get(key);
HXLINE(1254)		bool _hx_tmp;
HXDLIN(1254)		bool _hx_tmp1;
HXDLIN(1254)		if (hx::IsNull( asset )) {
HXLINE(1254)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1254)			_hx_tmp1 = false;
            		}
HXDLIN(1254)		if (_hx_tmp1) {
HXLINE(1254)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1254)			_hx_tmp = false;
            		}
HXDLIN(1254)		if (_hx_tmp) {
HXLINE(1256)			return this->_superIndexUI->getAsset(key,recursive);
            		}
HXLINE(1258)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAsset,return )

::Array< ::Dynamic> FlxUI_obj::getAssetsWithTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1262_getAssetsWithTag)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tag,"tag")
HXLINE(1263)		if (this->_tag_index->exists(tag)) {
HXLINE(1265)			HX_VARI( ::Array< ::String >,list) = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1266)			bool _hx_tmp;
HXDLIN(1266)			if (hx::IsNotNull( list )) {
HXLINE(1266)				_hx_tmp = (list->length == (int)0);
            			}
            			else {
HXLINE(1266)				_hx_tmp = true;
            			}
HXDLIN(1266)			if (_hx_tmp) {
HXLINE(1266)				return null();
            			}
HXLINE(1267)			HX_VARI( ::Array< ::Dynamic>,arr) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1268)			{
HXLINE(1268)				HX_VARI( int,_g) = (int)0;
HXDLIN(1268)				while((_g < list->length)){
HXLINE(1268)					HX_VARI( ::String,key) = list->__get(_g);
HXDLIN(1268)					_g = (_g + (int)1);
HXLINE(1270)					HX_VARI( ::Dynamic,widget) = this->getAsset(key,null());
HXLINE(1271)					if (hx::IsNotNull( widget )) {
HXLINE(1273)						arr->push(widget);
            					}
            				}
            			}
HXLINE(1276)			return arr;
            		}
HXLINE(1278)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getAssetsWithTag,return )

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getAssetGroup(::String key,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1289_getAssetGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(thing,"thing")
HXLINE(1290)		bool _hx_tmp;
HXDLIN(1290)		if (hx::IsNull( thing )) {
HXLINE(1290)			if (hx::IsNotNull( key )) {
HXLINE(1290)				_hx_tmp = (key == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1290)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1290)			_hx_tmp = false;
            		}
HXDLIN(1290)		if (_hx_tmp) {
HXLINE(1290)			return null();
            		}
HXLINE(1291)		if (hx::IsNull( thing )) {
HXLINE(1291)			thing = this->getAsset(key,null());
            		}
HXLINE(1292)		if (hx::IsNull( thing )) {
HXLINE(1292)			return null();
            		}
HXLINE(1294)		{
HXLINE(1294)			HX_VARI_NAME(  ::Dynamic,key1,"key") = this->_group_index->keys();
HXDLIN(1294)			while(( (bool)(key1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1294)				HX_VARI_NAME( ::String,key2,"key") = ( (::String)(key1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1296)				HX_VARI(  ::flixel::addons::ui::FlxUIGroup,g) = this->_group_index->get(key2).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXLINE(1297)				if ((g->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != (int)-1)) {
HXLINE(1299)					return g;
            				}
            			}
            		}
HXLINE(1303)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAssetGroup,return )

 ::haxe::xml::Fast FlxUI_obj::getMode(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1307_getMode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1308)		HX_VARI(  ::haxe::xml::Fast,mode) = this->_mode_index->get(key).StaticCast<  ::haxe::xml::Fast >();
HXLINE(1309)		bool _hx_tmp;
HXDLIN(1309)		bool _hx_tmp1;
HXDLIN(1309)		if (hx::IsNull( mode )) {
HXLINE(1309)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1309)			_hx_tmp1 = false;
            		}
HXDLIN(1309)		if (_hx_tmp1) {
HXLINE(1309)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1309)			_hx_tmp = false;
            		}
HXDLIN(1309)		if (_hx_tmp) {
HXLINE(1311)			return this->_superIndexUI->getMode(key,recursive);
            		}
HXLINE(1313)		return mode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getMode,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromDefinition(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1317_getLabelStyleFromDefinition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1318)		HX_VARI(  ::haxe::xml::Fast,definition) = this->getDefinition(key,recursive);
HXLINE(1319)		if (hx::IsNotNull( definition )) {
HXLINE(1321)			HX_VARI(  ::flixel::addons::ui::FontDef,fontDef) = this->_loadFontDef(definition);
HXLINE(1322)			HX_VARI( ::String,align) = ::flixel::addons::ui::U_obj::xml_str(definition->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(1322)			if ((align == HX_("",00,00,00,00))) {
HXLINE(1322)				align = null();
            			}
HXLINE(1323)			HX_VARI( int,color) = this->_loadColor(definition,null(),null());
HXLINE(1325)			return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,this->_loadBorder(definition));
            		}
HXLINE(1327)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getLabelStyleFromDefinition,return )

 ::flixel::addons::ui::ButtonLabelStyle FlxUI_obj::getLabelStyleFromData( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1331_getLabelStyleFromData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(1332)		HX_VARI(  ::flixel::addons::ui::FontDef,fontDef) = this->_loadFontDef(data);
HXLINE(1333)		HX_VARI( ::String,align) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(1333)		if ((align == HX_("",00,00,00,00))) {
HXLINE(1333)			align = null();
            		}
HXLINE(1334)		HX_VARI( int,color) = this->_loadColor(data,null(),null());
HXLINE(1336)		return  ::flixel::addons::ui::ButtonLabelStyle_obj::__alloc( HX_CTX ,fontDef,align,color,this->_loadBorder(data));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getLabelStyleFromData,return )

bool FlxUI_obj::checkVariable(::String key,::String otherValue,::String type,::String __o__hx_operator,hx::Null< bool >  __o_recursive){
::String _hx_operator = __o__hx_operator.Default(HX_HCSTRING("==","\x60","\x35","\x00","\x00"));
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1340_checkVariable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(otherValue,"otherValue")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(_hx_operator,"operator")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1341)		HX_VARI( ::String,variable) = this->getVariable(key,recursive);
HXLINE(1342)		if (hx::IsNotNull( variable )) {
HXLINE(1344)			return ::flixel::addons::ui::U_obj::compareStringVars(variable,otherValue,type,_hx_operator);
            		}
            		else {
HXLINE(1348)			return ::flixel::addons::ui::U_obj::compareStringVars(HX_("",00,00,00,00),otherValue,type,_hx_operator);
            		}
HXLINE(1342)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,checkVariable,return )

void FlxUI_obj::setVariable(::String key,::String value){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1354_setVariable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(value,"value")
HXLINE(1354)		this->_variable_index->set(key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setVariable,(void))

::String FlxUI_obj::getVariable(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1358_getVariable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1359)		HX_VARI( ::String,variable) = ( (::String)(this->_variable_index->get(key)) );
HXLINE(1360)		bool _hx_tmp;
HXDLIN(1360)		bool _hx_tmp1;
HXDLIN(1360)		if (hx::IsNull( variable )) {
HXLINE(1360)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1360)			_hx_tmp1 = false;
            		}
HXDLIN(1360)		if (_hx_tmp1) {
HXLINE(1360)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1360)			_hx_tmp = false;
            		}
HXDLIN(1360)		if (_hx_tmp) {
HXLINE(1362)			variable = this->_superIndexUI->getVariable(key,recursive);
            		}
HXLINE(1364)		return variable;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getVariable,return )

 ::haxe::xml::Fast FlxUI_obj::getDefinition(::String key,hx::Null< bool >  __o_recursive){
bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1368_getDefinition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(recursive,"recursive")
HXLINE(1369)		HX_VARI(  ::haxe::xml::Fast,definition) = this->_definition_index->get(key).StaticCast<  ::haxe::xml::Fast >();
HXLINE(1370)		bool _hx_tmp;
HXDLIN(1370)		bool _hx_tmp1;
HXDLIN(1370)		if (hx::IsNull( definition )) {
HXLINE(1370)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1370)			_hx_tmp1 = false;
            		}
HXDLIN(1370)		if (_hx_tmp1) {
HXLINE(1370)			_hx_tmp = hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1370)			_hx_tmp = false;
            		}
HXDLIN(1370)		if (_hx_tmp) {
HXLINE(1372)			definition = this->_superIndexUI->getDefinition(key,recursive);
            		}
HXLINE(1374)		if (hx::IsNull( definition )) {
HXLINE(1376)			if ((key.indexOf(HX_("include:",12,65,27,66),null()) == (int)-1)) {
HXLINE(1380)				definition = this->getDefinition((HX_("include:",12,65,27,66) + key),recursive);
            			}
            		}
HXLINE(1384)		return definition;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getDefinition,return )

void FlxUI_obj::replaceInGroup( ::flixel::FlxSprite original, ::flixel::FlxSprite replace,hx::Null< bool >  __o_splice){
bool splice = __o_splice.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1447_replaceInGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(original,"original")
            	HX_STACK_ARG(replace,"replace")
            	HX_STACK_ARG(splice,"splice")
HXLINE(1450)		if (hx::IsNotNull( this->_group_index )) {
HXLINE(1451)			HX_VARI(  ::Dynamic,key) = this->_group_index->keys();
HXDLIN(1451)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1451)				HX_VARI_NAME( ::String,key1,"key") = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1452)				HX_VARI(  ::flixel::addons::ui::FlxUIGroup,tempGroup) = this->_group_index->get(key1).StaticCast<  ::flixel::addons::ui::FlxUIGroup >();
HXLINE(1453)				if (hx::IsNotNull( tempGroup->group->members )) {
HXLINE(1454)					HX_VARI( int,i) = (int)0;
HXLINE(1455)					{
HXLINE(1455)						HX_VARI( int,_g) = (int)0;
HXDLIN(1455)						HX_VARI( ::Array< ::Dynamic>,_g1) = tempGroup->group->members;
HXDLIN(1455)						while((_g < _g1->length)){
HXLINE(1455)							HX_VARI(  ::flixel::FlxSprite,member) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1455)							_g = (_g + (int)1);
HXLINE(1456)							if (hx::IsNotNull( member )) {
HXLINE(1457)								if (hx::IsEq( member,original )) {
HXLINE(1458)									tempGroup->group->members->set(i,replace);
HXLINE(1459)									if (hx::IsNull( replace )) {
HXLINE(1460)										if (splice) {
HXLINE(1461)											tempGroup->group->members->splice(i,(int)1);
            										}
            									}
HXLINE(1465)									return;
            								}
HXLINE(1467)								i = (i + (int)1);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1475)		if (hx::IsNotNull( this->group->members )) {
HXLINE(1476)			HX_VARI_NAME( int,i1,"i") = (int)0;
HXLINE(1477)			{
HXLINE(1477)				HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN(1477)				HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->group->members;
HXDLIN(1477)				while((_g2 < _g11->length)){
HXLINE(1477)					HX_VARI_NAME(  ::flixel::FlxSprite,member1,"member") = _g11->__get(_g2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1477)					_g2 = (_g2 + (int)1);
HXLINE(1478)					if (hx::IsNotNull( member1 )) {
HXLINE(1479)						if (hx::IsEq( member1,original )) {
HXLINE(1480)							this->group->members->set(i1,replace);
HXLINE(1481)							if (hx::IsNull( replace )) {
HXLINE(1482)								if (splice) {
HXLINE(1483)									this->group->members->splice(i1,(int)1);
HXLINE(1484)									i1 = (i1 - (int)1);
            								}
            							}
HXLINE(1487)							return;
            						}
            					}
HXLINE(1490)					i1 = (i1 + (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,replaceInGroup,(void))

 ::haxe::xml::Fast FlxUI_obj::applyNodeConditionals( ::haxe::xml::Fast info){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1497_applyNodeConditionals)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(info,"info")
HXLINE(1498)		bool _hx_tmp;
HXDLIN(1498)		if (!(info->hasNode->resolve(HX_("locale",9a,74,bf,59)))) {
HXLINE(1498)			_hx_tmp = info->hasNode->resolve(HX_("haxedef",5f,a1,7a,08));
            		}
            		else {
HXLINE(1498)			_hx_tmp = true;
            		}
HXDLIN(1498)		if (_hx_tmp) {
HXLINE(1499)			info =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,::Xml_obj::parse(::haxe::xml::Printer_obj::print(info->x,null()))->firstElement());
HXLINE(1501)			if (info->hasNode->resolve(HX_("locale",9a,74,bf,59))) {
HXLINE(1502)				info = this->applyNodeChanges(info,HX_("locale",9a,74,bf,59));
            			}
HXLINE(1505)			if (info->hasNode->resolve(HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1506)				info = this->applyNodeChanges(info,HX_("haxedef",5f,a1,7a,08));
            			}
HXLINE(1509)			if (info->hasNode->resolve(HX_("window",f0,93,8c,52))) {
HXLINE(1510)				info = this->applyNodeChanges(info,HX_("window",f0,93,8c,52));
            			}
            		}
HXLINE(1513)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,applyNodeConditionals,return )

 ::haxe::xml::Fast FlxUI_obj::applyNodeChanges( ::haxe::xml::Fast data,::String nodeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1522_applyNodeChanges)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(nodeName,"nodeName")
HXLINE(1525)		HX_VARI( ::String,nodeValue) = HX_("",00,00,00,00);
HXLINE(1528)		if ((nodeName == HX_("locale",9a,74,bf,59))) {
HXLINE(1529)			if (hx::IsNull( this->_ptr_tongue )) {
HXLINE(1530)				return data;
            			}
HXLINE(1532)			nodeValue = ( (::String)(this->_ptr_tongue->__Field(HX_("locale",9a,74,bf,59),hx::paccDynamic)) ).toLowerCase();
            		}
HXLINE(1536)		HX_VARI( bool,haxedef) = false;
HXLINE(1537)		if ((nodeName == HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1538)			haxedef = true;
            		}
HXLINE(1542)		if ((nodeName == HX_("window",f0,93,8c,52))) {
HXLINE(1543)			nodeValue = ((::flixel::FlxG_obj::width + HX_(",",2c,00,00,00)) + ::flixel::FlxG_obj::height);
            		}
HXLINE(1546)		{
HXLINE(1546)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(nodeName)->h;
HXDLIN(1546)			while(hx::IsNotNull( _g_head )){
HXLINE(1546)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(1546)				_g_head = _g_head->next;
HXLINE(1547)				HX_VARI( ::String,cname) = ::flixel::addons::ui::U_obj::xml_name(val->x);
HXLINE(1549)				if (haxedef) {
HXLINE(1550)					nodeValue = HX_("",00,00,00,00);
HXLINE(1551)					if (::flixel::addons::ui::U_obj::checkHaxedef(cname)) {
HXLINE(1552)						nodeValue = cname;
            					}
            				}
HXLINE(1556)				if ((cname == nodeValue)) {
HXLINE(1557)					if (val->hasNode->resolve(HX_("change",70,91,72,b7))) {
HXLINE(1558)						HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = val->nodes->resolve(HX_("change",70,91,72,b7))->h;
HXDLIN(1558)						while(hx::IsNotNull( _g_head1 )){
HXLINE(1558)							HX_VARI_NAME(  ::haxe::xml::Fast,val1,"val") = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(1558)							_g_head1 = _g_head1->next;
HXLINE(1560)							{
HXLINE(1560)								HX_VARI(  ::Dynamic,att) = val1->x->attributes();
HXDLIN(1560)								while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1560)									HX_VARI_NAME( ::String,att1,"att") = ( (::String)(att->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1561)									HX_VARI( ::String,value) = val1->x->get(att1);
HXLINE(1562)									data->x->set(att1,value);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1569)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,applyNodeChanges,return )

::Dynamic FlxUI_obj::loadThing(::String type, ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1581_loadThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(data,"data")
HXLINE(1581)		return this->_loadThing(type,data);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadThing,return )

 ::haxe::xml::Fast FlxUI_obj::_loadThingGetInfo( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1585__loadThingGetInfo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(1586)		HX_VARI(  ::Xml,_this) = data->x;
HXDLIN(1586)		if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(1586)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + _this->nodeType));
            		}
HXLINE(1587)		HX_VARI(  ::haxe::xml::Fast,defaultDef) = this->getDefinition((HX_("default:",59,d0,99,af) + _this->nodeName),null());
HXLINE(1592)		HX_VARI(  ::haxe::xml::Fast,info) = null();
HXLINE(1593)		if (hx::IsNotNull( defaultDef )) {
HXLINE(1595)			info = ::flixel::addons::ui::FlxUI_obj::consolidateData(data,defaultDef,true);
            		}
HXLINE(1598)		if (hx::IsNull( info )) {
HXLINE(1600)			info = data;
            		}
HXLINE(1603)		HX_VARI( ::String,use_def) = ::flixel::addons::ui::U_obj::xml_str(info->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1604)		HX_VARI(  ::haxe::xml::Fast,definition) = null();
HXLINE(1605)		if ((use_def != HX_("",00,00,00,00))) {
HXLINE(1607)			definition = this->getDefinition(use_def,null());
            		}
HXLINE(1610)		info = ::flixel::addons::ui::FlxUI_obj::consolidateData(info,definition,null());
HXLINE(1611)		info = this->applyNodeConditionals(info);
HXLINE(1613)		if ((this->_loadTest(info) == false)) {
HXLINE(1615)			return null();
            		}
HXLINE(1618)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadThingGetInfo,return )

void FlxUI_obj::_loadTooltip(::Dynamic thing, ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1623__loadTooltip)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(data,"data")
HXLINE(1623)		if (data->hasNode->resolve(HX_("tooltip",03,ad,8c,6a))) {
HXLINE(1625)			HX_VARI(  ::Dynamic,tt) = this->_loadTooltipData(data->node->resolve(HX_("tooltip",03,ad,8c,6a)));
HXLINE(1626)			HX_VARI( ::Dynamic,state) = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE(1628)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIButton >())) {
HXLINE(1630)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),hx::paccDynamic)) )->add(( ( ::flixel::FlxObject)(thing) ),tt);
            			}
            			else {
HXLINE(1632)				if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(1635)					( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),hx::paccDynamic)) )->add(( ( ::flixel::addons::ui::FlxUICheckBox)(thing) )->button,tt);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltip,(void))

 ::Dynamic FlxUI_obj::_loadTooltipData( ::haxe::xml::Fast tNode){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1641__loadTooltipData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tNode,"tNode")
HXLINE(1642)		HX_VARI(  ::Dynamic,tt) =  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("style",31,a5,1d,84), ::Dynamic(hx::Anon_obj::Create(18)
            				->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),(int)-1)
            				->setFixed(1,HX_("titleFormat",ef,5a,1a,94),null())
            				->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f),null())
            				->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),null())
            				->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),null())
            				->setFixed(5,HX_("rightPadding",55,e9,2b,bb),(int)-1)
            				->setFixed(6,HX_("leftPadding",8a,98,10,d0),(int)-1)
            				->setFixed(7,HX_("borderColor",d7,3c,d5,d6),null())
            				->setFixed(8,HX_("titleWidth",4e,c9,47,dc),(int)-1)
            				->setFixed(9,HX_("titleOffset",4b,63,cb,f6),null())
            				->setFixed(10,HX_("titleBorder",a4,18,a6,fa),null())
            				->setFixed(11,HX_("borderSize",cd,ff,ed,06),(int)-1)
            				->setFixed(12,HX_("arrow",c9,79,8f,25),null())
            				->setFixed(13,HX_("background",ee,93,1d,26),null())
            				->setFixed(14,HX_("bottomPadding",26,1e,2d,2b),(int)-1)
            				->setFixed(15,HX_("topPadding",bc,47,4b,3c),(int)-1)
            				->setFixed(16,HX_("bodyFormat",79,23,ab,44),null())
            				->setFixed(17,HX_("autoSizeVertical",66,58,0d,52),null())))
            			->setFixed(1,HX_("title",98,15,3b,10),HX_("",00,00,00,00))
            			->setFixed(2,HX_("body",a2,7a,1b,41),HX_("",00,00,00,00))
            			->setFixed(3,HX_("anchor",75,3a,71,60),null()));
HXLINE(1671)		HX_VARI(  ::haxe::xml::Fast,defaultDef) = this->getDefinition(HX_("default:tooltip",ca,89,56,af),null());
HXLINE(1672)		if (hx::IsNotNull( defaultDef )) {
HXLINE(1674)			tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,defaultDef,true);
            		}
HXLINE(1677)		if (tNode->has->resolve(HX_("use_def",8d,da,e9,62))) {
HXLINE(1680)			HX_VARI(  ::haxe::xml::Fast,def) = this->getDefinition(::flixel::addons::ui::U_obj::xml_str(tNode->x,HX_("use_def",8d,da,e9,62),true,null()),null());
HXLINE(1681)			if (hx::IsNotNull( def )) {
HXLINE(1683)				tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,def,true);
            			}
            		}
HXLINE(1687)		if (tNode->has->resolve(HX_("text",ad,cc,f9,4c))) {
HXLINE(1689)			this->_loadTooltipText(tNode,HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1692)		if (tNode->hasNode->resolve(HX_("title",98,15,3b,10))) {
HXLINE(1694)			this->_loadTooltipText(tNode->node->resolve(HX_("title",98,15,3b,10)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1696)		if (tNode->hasNode->resolve(HX_("body",a2,7a,1b,41))) {
HXLINE(1698)			this->_loadTooltipText(tNode->node->resolve(HX_("body",a2,7a,1b,41)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1701)		tt->__SetField(HX_("anchor",75,3a,71,60),this->_loadAnchor(tNode),hx::paccDynamic);
HXLINE(1703)		this->_loadTooltipStyle(tNode,tt);
HXLINE(1705)		return tt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTooltipData,return )

void FlxUI_obj::_loadTooltipStyle( ::haxe::xml::Fast node, ::Dynamic tt){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1709__loadTooltipStyle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(tt,"tt")
HXLINE(1710)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),::flixel::addons::ui::U_obj::xml_color(node->x,HX_("background",ee,93,1d,26),null(),null()),hx::paccDynamic);
HXLINE(1711)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("borderSize",cd,ff,ed,06),::flixel::addons::ui::U_obj::xml_i(node->x,HX_("border",ec,4c,1a,64),(int)-1),hx::paccDynamic);
HXLINE(1712)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(node->x,HX_("border_color",90,7e,e8,6e),null(),null()),hx::paccDynamic);
HXLINE(1714)		 ::Dynamic _hx_tmp;
HXDLIN(1714)		if (node->has->resolve(HX_("arrow",c9,79,8f,25))) {
HXLINE(1714)			HX_VARI(  ::Xml,data) = node->x;
HXDLIN(1714)			HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXDLIN(1714)			if (hx::IsNotNull( data->get(HX_("arrow",c9,79,8f,25)) )) {
HXLINE(1714)				str = data->get(HX_("arrow",c9,79,8f,25));
HXDLIN(1714)				bool _hx_tmp1;
HXDLIN(1714)				if ((str != HX_("",00,00,00,00))) {
HXLINE(1714)					_hx_tmp1 = hx::IsNull( str );
            				}
            				else {
HXLINE(1714)					_hx_tmp1 = true;
            				}
HXDLIN(1714)				if (_hx_tmp1) {
HXLINE(1714)					str = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(1714)					str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(1714)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(1714)						if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(1714)							HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("arrow",c9,79,8f,25)) + HX_("\"",22,00,00,00)));
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String msg = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE(1714)			_hx_tmp = str;
            		}
            		else {
HXLINE(1714)			_hx_tmp = null();
            		}
HXDLIN(1714)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("arrow",c9,79,8f,25),_hx_tmp,hx::paccDynamic);
HXLINE(1716)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("auto_size_horizontal",d2,fe,ab,ff),true),hx::paccDynamic);
HXLINE(1717)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("autoSizeVertical",66,58,0d,52),::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("auto_size_vertical",e4,c6,93,30),true),hx::paccDynamic);
HXLINE(1719)		HX_VARI( int,padAll) = ::Std_obj::_hx_int(this->_loadHeight(node,(int)-1,HX_("pad_all",f5,34,29,cd),null()));
HXLINE(1720)		if ((padAll != (int)-1)) {
HXLINE(1722)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),padAll,hx::paccDynamic)),hx::paccDynamic)),hx::paccDynamic)),hx::paccDynamic);
            		}
            		else {
HXLINE(1726)			Float _hx_tmp2 = this->_loadWidth(node,(int)0,HX_("pad_left",b3,25,25,be),null());
HXDLIN(1726)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),::Std_obj::_hx_int(_hx_tmp2),hx::paccDynamic);
HXLINE(1727)			Float _hx_tmp3 = this->_loadWidth(node,(int)0,HX_("pad_right",b0,e4,68,19),null());
HXDLIN(1727)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),::Std_obj::_hx_int(_hx_tmp3),hx::paccDynamic);
HXLINE(1728)			Float _hx_tmp4 = this->_loadHeight(node,(int)0,HX_("pad_top",69,a2,37,cd),null());
HXDLIN(1728)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),::Std_obj::_hx_int(_hx_tmp4),hx::paccDynamic);
HXLINE(1729)			Float _hx_tmp5 = this->_loadHeight(node,(int)0,HX_("pad_bottom",97,c7,b1,39),null());
HXDLIN(1729)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),::Std_obj::_hx_int(_hx_tmp5),hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltipStyle,(void))

void FlxUI_obj::_loadTooltipText( ::haxe::xml::Fast node,::String fieldName, ::Dynamic tt){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1734__loadTooltipText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(fieldName,"fieldName")
            	HX_STACK_ARG(tt,"tt")
HXLINE(1735)		HX_VARI( ::String,nodeName) = node->get_name();
HXLINE(1736)		HX_VARI( ::String,text) = this->_loadString(node,fieldName);
HXLINE(1738)		HX_VARI( Float,offset) = this->_loadWidth(node,(int)0,HX_("x",78,00,00,00),null());
HXDLIN(1738)		HX_VARI_NAME(  ::flixel::math::FlxPoint,offset1,"offset") =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,offset,this->_loadHeight(node,(int)0,HX_("y",79,00,00,00),null()));
HXLINE(1740)		if (node->has->resolve(HX_("use_def",8d,da,e9,62))) {
HXLINE(1743)			HX_VARI(  ::haxe::xml::Fast,the_def) = this->getDefinition(::flixel::addons::ui::U_obj::xml_str(node->x,HX_("use_def",8d,da,e9,62),true,null()),null());
HXLINE(1744)			if (hx::IsNotNull( the_def )) {
HXLINE(1746)				node = ::flixel::addons::ui::FlxUI_obj::consolidateData(node,the_def,null());
            			}
            		}
HXLINE(1750)		HX_VARI(  ::flixel::addons::ui::BorderDef,border) = this->_loadBorder(node);
HXLINE(1751)		HX_VARI(  ::flixel::addons::ui::FontDef,format) = this->_loadFontDef(node);
HXLINE(1752)		HX_VARI(  ::Dynamic,color) = ::flixel::addons::ui::U_obj::xml_color(node->x,HX_("color",63,71,5c,4a),true,(int)-16777216);
HXLINE(1753)		format->format->color = color;
HXLINE(1755)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(node,(int)-1,HX_("width",06,b6,62,ca),null()));
HXLINE(1757)		::String _hx_switch_0 = nodeName;
            		if (  (_hx_switch_0==HX_("body",a2,7a,1b,41)) ){
HXLINE(1769)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1771)				tt->__SetField(HX_("body",a2,7a,1b,41),text,hx::paccDynamic);
            			}
HXLINE(1773)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyOffset",d5,2b,5c,a7),offset1,hx::paccDynamic);
HXLINE(1774)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyFormat",79,23,ab,44),format,hx::paccDynamic);
HXLINE(1775)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyWidth",04,e0,6a,8a),W,hx::paccDynamic);
HXLINE(1776)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("bodyBorder",2e,e1,36,ab),border,hx::paccDynamic);
HXLINE(1768)			goto _hx_goto_102;
            		}
            		if (  (_hx_switch_0==HX_("title",98,15,3b,10)) ||  (_hx_switch_0==HX_("tooltip",03,ad,8c,6a)) ){
HXLINE(1760)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1762)				tt->__SetField(HX_("title",98,15,3b,10),text,hx::paccDynamic);
            			}
HXLINE(1764)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleOffset",4b,63,cb,f6),offset1,hx::paccDynamic);
HXLINE(1765)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleFormat",ef,5a,1a,94),format,hx::paccDynamic);
HXLINE(1766)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleWidth",4e,c9,47,dc),W,hx::paccDynamic);
HXLINE(1767)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("titleBorder",a4,18,a6,fa),border,hx::paccDynamic);
HXLINE(1759)			goto _hx_goto_102;
            		}
            		/* default */{
            		}
            		_hx_goto_102:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadTooltipText,(void))

 ::flixel::addons::ui::Anchor FlxUI_obj::_loadAnchor( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1783__loadAnchor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(1784)		HX_VARI( Float,xOff) = this->_loadWidth(data,(int)0,HX_("x",78,00,00,00),null());
HXLINE(1785)		HX_VARI( Float,yOff) = this->_loadHeight(data,(int)0,HX_("y",79,00,00,00),null());
HXLINE(1786)		if (data->hasNode->resolve(HX_("anchor",75,3a,71,60))) {
HXLINE(1788)			HX_VARI( ::String,xSide) = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x",78,00,00,00),true,HX_("right",dc,0b,64,e9));
HXLINE(1789)			HX_VARI( ::String,ySide) = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y",79,00,00,00),true,HX_("top",95,66,58,00));
HXLINE(1790)			HX_VARI( ::String,xFlush) = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x-flush",ef,49,ba,7e),true,HX_("left",07,08,b0,47));
HXLINE(1792)			return  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,xOff,yOff,xSide,ySide,xFlush,::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y-flush",b0,c0,4f,a8),true,HX_("top",95,66,58,00)));
            		}
HXLINE(1794)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadAnchor,return )

::Dynamic FlxUI_obj::_loadThing(::String type, ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1797__loadThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(data,"data")
HXLINE(1799)		HX_VARI(  ::haxe::xml::Fast,info) = this->_loadThingGetInfo(data);
HXLINE(1800)		if (hx::IsNull( info )) {
HXLINE(1802)			return null();
            		}
HXLINE(1805)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1831)			this->_alignThing(info,true);
HXLINE(1832)			return null();
HXLINE(1831)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("bar",d3,b1,4a,00)) ){
HXLINE(1812)			return this->_loadBar(info);
HXDLIN(1812)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("box",0b,be,4a,00)) ){
HXLINE(1810)			return this->_loadBox(info);
HXDLIN(1810)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("button",f2,61,e0,d9)) ){
HXLINE(1816)			return this->_loadButton(info,null(),null(),null());
HXDLIN(1816)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("button_toggle",81,71,c8,4e)) ){
HXLINE(1817)			return this->_loadButton(info,true,true,null());
HXDLIN(1817)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1836)			this->_changeThing(info);
HXLINE(1837)			return null();
HXLINE(1835)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("checkbox",43,d2,f5,ac)) ){
HXLINE(1824)			return this->_loadCheckBox(info);
HXDLIN(1824)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("failure",4a,70,fa,16)) ){
HXLINE(1827)			if (hx::IsNull( this->_failure_checks )) {
HXLINE(1827)				this->_failure_checks = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(1828)			this->unparentXML(info);
HXLINE(1829)			this->_failure_checks->push(info);
HXLINE(1830)			return null();
HXLINE(1827)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("input_text",42,40,18,eb)) ){
HXLINE(1814)			return this->_loadInputText(info);
HXDLIN(1814)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("line",f4,17,b3,47)) ){
HXLINE(1809)			return this->_loadLine(info);
HXDLIN(1809)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("default",c1,d8,c3,9b)) ||  (_hx_switch_0==HX_("group",3f,b3,f4,99)) ||  (_hx_switch_0==HX_("include",28,fe,f6,51)) ||  (_hx_switch_0==HX_("inject",91,4a,ea,97)) ||  (_hx_switch_0==HX_("load_if",96,33,eb,08)) ||  (_hx_switch_0==HX_("mode",63,d3,60,48)) ){
HXLINE(1834)			return null();
HXDLIN(1834)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("chrome",7a,f9,af,c2)) ||  (_hx_switch_0==HX_("nine_slice",45,82,57,9b)) ||  (_hx_switch_0==HX_("nine_slice_sprite",ff,6d,22,c8)) ||  (_hx_switch_0==HX_("nineslice",e0,29,78,d8)) ||  (_hx_switch_0==HX_("nineslicesprite",e5,ad,da,98)) ){
HXLINE(1807)			return this->_load9SliceSprite(info,null());
HXDLIN(1807)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("num_stepper",d8,f2,7c,cd)) ||  (_hx_switch_0==HX_("numeric_stepper",5f,56,dc,30)) ||  (_hx_switch_0==HX_("numstepper",8b,1b,2f,e4)) ){
HXLINE(1815)			return this->_loadNumericStepper(info,null());
HXDLIN(1815)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1839)			this->name = ::flixel::addons::ui::U_obj::xml_name(info->x);
HXLINE(1840)			HX_VARI( ::Dynamic,thing) = this->getAsset(this->name,null());
HXLINE(1841)			if (hx::IsNotNull( thing )) {
HXLINE(1842)				this->_loadPosition(info,thing);
            			}
HXLINE(1844)			return null();
HXLINE(1838)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("dropdown",11,74,2f,fd)) ||  (_hx_switch_0==HX_("dropdown_menu",cd,8f,c7,05)) ||  (_hx_switch_0==HX_("pulldown",a7,ca,a0,a7)) ||  (_hx_switch_0==HX_("pulldown_menu",77,99,46,8c)) ){
HXLINE(1822)			return this->_loadDropDownMenu(info);
HXDLIN(1822)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("radio_group",bb,79,eb,b8)) ){
HXLINE(1825)			return this->_loadRadioGroup(info);
HXDLIN(1825)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(1806)			return this->_loadRegion(info);
HXDLIN(1806)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(1811)			return this->_loadSprite(info);
HXDLIN(1811)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("tab_menu",09,73,e1,d6)) ){
HXLINE(1819)			return this->_loadTabMenu(info);
HXDLIN(1819)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(1813)			return this->_loadText(info);
HXDLIN(1813)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("tile_test",43,d2,38,f8)) ){
HXLINE(1808)			return this->_loadTileTest(info);
HXDLIN(1808)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("layout",aa,ae,b8,58)) ||  (_hx_switch_0==HX_("ui",54,66,00,00)) ){
HXLINE(1826)			return this->_loadLayout(info);
HXDLIN(1826)			goto _hx_goto_105;
            		}
            		/* default */{
HXLINE(1849)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,(HX_("ui_get:",ef,47,3b,f4) + type),hx::ObjectPtr<OBJ_>(this),info,::cpp::VirtualArray_obj::__new(1)->init(0,data));
            		}
            		_hx_goto_105:;
HXLINE(1805)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadThing,return )

Float FlxUI_obj::_loadX( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1857__loadX)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(default_,"default_")
HXLINE(1857)		return this->_loadWidth(data,default_,HX_("x",78,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadX,return )

Float FlxUI_obj::_loadY( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1862__loadY)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(default_,"default_")
HXLINE(1862)		return this->_loadHeight(data,default_,HX_("y",79,00,00,00),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadY,return )

Float FlxUI_obj::_loadScale( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_,::String __o_str){
Float default_ = __o_default_.Default(((Float)1.0));
::String str = __o_str.Default(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1867__loadScale)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(default_,"default_")
            	HX_STACK_ARG(str,"str")
HXLINE(1867)		return this->_loadHeight(data,default_,str,HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadScale,return )

Float FlxUI_obj::_loadScaleX( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1872__loadScaleX)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(default_,"default_")
HXLINE(1872)		return this->_loadWidth(data,default_,HX_("scale_x",43,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleX,return )

Float FlxUI_obj::_loadScaleY( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1877__loadScaleY)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(default_,"default_")
HXLINE(1877)		return this->_loadHeight(data,default_,HX_("scale_y",44,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleY,return )

Float FlxUI_obj::_loadWidth( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
Float default_ = __o_default_.Default(10);
::String str = __o_str.Default(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
::String defaultRound = __o_defaultRound.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1881__loadWidth)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(default_,"default_")
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(defaultRound,"defaultRound")
HXLINE(1882)		HX_VARI_NAME(  ::Xml,data1,"data") = data->x;
HXDLIN(1882)		HX_VARI( ::String,ws) = ::flixel::addons::ui::U_obj::xml_str(data1,str,true,::Std_obj::string(default_));
HXLINE(1883)		HX_VARI(  ::flixel::addons::ui::Rounding,round) = this->getRound(data,defaultRound);
HXLINE(1884)		return this->doRound(this->_getDataSize(HX_("w",77,00,00,00),ws,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadWidth,return )

Float FlxUI_obj::_loadHeight( ::haxe::xml::Fast data,hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
Float default_ = __o_default_.Default(10);
::String str = __o_str.Default(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
::String defaultRound = __o_defaultRound.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1888__loadHeight)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(default_,"default_")
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(defaultRound,"defaultRound")
HXLINE(1889)		HX_VARI_NAME(  ::Xml,data1,"data") = data->x;
HXDLIN(1889)		HX_VARI( ::String,hs) = ::flixel::addons::ui::U_obj::xml_str(data1,str,true,::Std_obj::string(default_));
HXLINE(1890)		HX_VARI(  ::flixel::addons::ui::Rounding,round) = this->getRound(data,defaultRound);
HXLINE(1891)		return this->doRound(this->_getDataSize(HX_("h",68,00,00,00),hs,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadHeight,return )

 ::flixel::math::FlxPoint FlxUI_obj::_loadCompass( ::haxe::xml::Fast data,::String __o_str){
::String str = __o_str.Default(HX_HCSTRING("resize_point","\x85","\x44","\xf0","\x71"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1895__loadCompass)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(str,"str")
HXLINE(1896)		HX_VARI( ::String,cs) = ::flixel::addons::ui::U_obj::xml_str(data->x,str,true,HX_("nw",49,60,00,00));
HXLINE(1897)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(1897)		point->_inPool = false;
HXLINE(1898)		::String _hx_switch_0 = cs;
            		if (  (_hx_switch_0==HX_("c",63,00,00,00)) ||  (_hx_switch_0==HX_("center",d5,25,db,05)) ||  (_hx_switch_0==HX_("m",6d,00,00,00)) ||  (_hx_switch_0==HX_("mid",88,11,53,00)) ){
HXLINE(1907)			point->set_x(((Float)0.5));
HXDLIN(1907)			point->set_y(((Float)0.5));
HXDLIN(1907)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("ll",80,5e,00,00)) ||  (_hx_switch_0==HX_("sw",a4,64,00,00)) ){
HXLINE(1905)			point->set_x((int)0);
HXDLIN(1905)			point->set_y((int)1);
HXDLIN(1905)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("n",6e,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1900)			point->set_x(((Float)0.5));
HXDLIN(1900)			point->set_y((int)0);
HXDLIN(1900)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("nw",49,60,00,00)) ||  (_hx_switch_0==HX_("ul",57,66,00,00)) ){
HXLINE(1899)			point->set_x((int)0);
HXDLIN(1899)			point->set_y((int)0);
HXDLIN(1899)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ||  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE(1902)			point->set_x((int)1);
HXDLIN(1902)			point->set_y(((Float)0.5));
HXDLIN(1902)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("s",73,00,00,00)) ){
HXLINE(1904)			point->set_x(((Float)0.5));
HXDLIN(1904)			point->set_y((int)1);
HXDLIN(1904)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("lr",86,5e,00,00)) ||  (_hx_switch_0==HX_("se",92,64,00,00)) ){
HXLINE(1903)			point->set_x((int)1);
HXDLIN(1903)			point->set_y((int)1);
HXDLIN(1903)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("ne",37,60,00,00)) ||  (_hx_switch_0==HX_("ur",5d,66,00,00)) ){
HXLINE(1901)			point->set_x((int)1);
HXDLIN(1901)			point->set_y((int)0);
HXDLIN(1901)			goto _hx_goto_114;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ){
HXLINE(1906)			point->set_x(((Float)0.5));
HXDLIN(1906)			point->set_y((int)0);
HXDLIN(1906)			goto _hx_goto_114;
            		}
            		_hx_goto_114:;
HXLINE(1909)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadCompass,return )

void FlxUI_obj::_changeParamsThing( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1913__changeParamsThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(1915)		HX_VARI( ::Dynamic,thing) = this->getAsset(::flixel::addons::ui::U_obj::xml_name(data->x),null());
HXLINE(1916)		if (hx::IsNull( thing )) {
HXLINE(1917)			return;
            		}
HXLINE(1920)		if (!(::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >()))) {
HXLINE(1921)			return;
            		}
HXLINE(1925)		::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >());
HXLINE(1928)		HX_VARI( ::Dynamic,ihp) = thing;
HXLINE(1929)		HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(1929)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(1929)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(1929)			{
HXLINE(1929)				HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(1929)				while(hx::IsNotNull( _g_head )){
HXLINE(1929)					HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(1929)					_g_head = _g_head->next;
HXDLIN(1929)					bool _hx_tmp;
HXDLIN(1929)					if (val->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(1929)						_hx_tmp = val->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(1929)						_hx_tmp = false;
            					}
HXDLIN(1929)					if (_hx_tmp) {
HXLINE(1929)						HX_VARI( ::String,type) = val->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(1929)						type = type.toLowerCase();
HXDLIN(1929)						HX_VARI( ::String,valueStr) = val->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(1929)						HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(1929)						HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(1929)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(1929)							HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(1929)							str = str.toLowerCase();
HXDLIN(1929)							bool _hx_tmp1;
HXDLIN(1929)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(1929)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(1929)								_hx_tmp1 = true;
            							}
HXDLIN(1929)							if (_hx_tmp1) {
HXLINE(1929)								value = true;
            							}
            							else {
HXLINE(1929)								value = false;
            							}
HXDLIN(1929)							goto _hx_goto_117;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(1929)							HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(1929)							if (hx::IsNull( return_val )) {
HXLINE(1929)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(1929)							value = return_val;
HXDLIN(1929)							goto _hx_goto_117;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(1929)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(1929)							goto _hx_goto_117;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(1929)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(1929)							goto _hx_goto_117;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(1929)							value = ::String(valueStr);
HXDLIN(1929)							goto _hx_goto_117;
            						}
            						_hx_goto_117:;
HXDLIN(1929)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(1929)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(1929)			{
HXLINE(1929)				HX_VARI( int,_g1) = (int)0;
HXDLIN(1929)				HX_VARI( int,_g) = params->get_length();
HXDLIN(1929)				while((_g1 < _g)){
HXLINE(1929)					_g1 = (_g1 + (int)1);
HXDLIN(1929)					HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(1929)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(1929)		::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeParamsThing,(void))

void FlxUI_obj::_changeThing( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1933__changeThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(1935)		HX_VARI( ::Dynamic,thing) = this->getAsset(::flixel::addons::ui::U_obj::xml_name(data->x),null());
HXLINE(1936)		if (hx::IsNull( thing )) {
HXLINE(1938)			return;
            		}
HXLINE(1941)		HX_VARI( Float,new_width) = (int)-1;
HXLINE(1942)		HX_VARI( Float,new_height) = (int)-1;
HXLINE(1944)		HX_VARI( ::String,context) = HX_("",00,00,00,00);
HXLINE(1945)		HX_VARI( ::String,code) = HX_("",00,00,00,00);
HXLINE(1949)		{
HXLINE(1949)			HX_VARI(  ::Dynamic,attribute) = data->x->attributes();
HXDLIN(1949)			while(( (bool)(attribute->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1951)				::String _hx_switch_0 = ( (::String)(attribute->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
            				if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(1971)					new_height = this->_loadHeight(data,null(),null(),null());
HXDLIN(1971)					goto _hx_goto_121;
            				}
            				if (  (_hx_switch_0==HX_("label",f4,0d,af,6f)) ){
HXLINE(1961)					HX_VARI( ::String,label) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(1962)					context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(1963)					code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(1964)					label = this->getText(label,context,true,code);
HXLINE(1965)					if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::ILabeled >())) {
HXLINE(1968)						::flixel::addons::ui::interfaces::ILabeled_obj::getLabel(thing)->set_text(label);
            					}
HXLINE(1961)					goto _hx_goto_121;
            				}
            				if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(1953)					if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(1955)						HX_VARI( ::String,text) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(1956)						context = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(1958)						code = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(1959)						( ( ::flixel::addons::ui::FlxUIText)(thing) )->set_text(this->getText(text,context,true,code));
            					}
HXLINE(1953)					goto _hx_goto_121;
            				}
            				if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(1970)					new_width = this->_loadWidth(data,null(),null(),null());
HXDLIN(1970)					goto _hx_goto_121;
            				}
            				_hx_goto_121:;
            			}
            		}
HXLINE(1974)		if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(1976)			HX_VARI( ::Dynamic,ir) = thing;
HXLINE(1977)			bool _hx_tmp;
HXDLIN(1977)			if ((new_width == (int)-1)) {
HXLINE(1977)				_hx_tmp = (new_height != (int)-1);
            			}
            			else {
HXLINE(1977)				_hx_tmp = true;
            			}
HXDLIN(1977)			if (_hx_tmp) {
HXLINE(1979)				if ((new_width == (int)-1)) {
HXLINE(1979)					new_width = ( (Float)(ir->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
            				}
HXLINE(1980)				if ((new_height == (int)-1)) {
HXLINE(1980)					new_height = ( (Float)(ir->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
            				}
HXLINE(1981)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,new_width,new_height);
            			}
            		}
HXLINE(1985)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(1987)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >())) {
HXLINE(1989)				HX_VARI( ::Dynamic,ihp) = thing;
HXLINE(1990)				HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(1990)				if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(1990)					params = ::cpp::VirtualArray_obj::__new();
HXDLIN(1990)					{
HXLINE(1990)						HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(1990)						while(hx::IsNotNull( _g_head )){
HXLINE(1990)							HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(1990)							_g_head = _g_head->next;
HXDLIN(1990)							bool _hx_tmp1;
HXDLIN(1990)							if (val->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(1990)								_hx_tmp1 = val->has->resolve(HX_("value",71,7f,b8,31));
            							}
            							else {
HXLINE(1990)								_hx_tmp1 = false;
            							}
HXDLIN(1990)							if (_hx_tmp1) {
HXLINE(1990)								HX_VARI( ::String,type) = val->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(1990)								type = type.toLowerCase();
HXDLIN(1990)								HX_VARI( ::String,valueStr) = val->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(1990)								HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(1990)								HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(1990)								::String _hx_switch_1 = type;
            								if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(1990)									HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(1990)									str = str.toLowerCase();
HXDLIN(1990)									bool _hx_tmp2;
HXDLIN(1990)									if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(1990)										_hx_tmp2 = (str == HX_("1",31,00,00,00));
            									}
            									else {
HXLINE(1990)										_hx_tmp2 = true;
            									}
HXDLIN(1990)									if (_hx_tmp2) {
HXLINE(1990)										value = true;
            									}
            									else {
HXLINE(1990)										value = false;
            									}
HXDLIN(1990)									goto _hx_goto_123;
            								}
            								if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(1990)									HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(1990)									if (hx::IsNull( return_val )) {
HXLINE(1990)										HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            									}
HXDLIN(1990)									value = return_val;
HXDLIN(1990)									goto _hx_goto_123;
            								}
            								if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(1990)									value = ::Std_obj::parseFloat(valueStr);
HXDLIN(1990)									goto _hx_goto_123;
            								}
            								if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(1990)									value = ::Std_obj::parseInt(valueStr);
HXDLIN(1990)									goto _hx_goto_123;
            								}
            								if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(1990)									value = ::String(valueStr);
HXDLIN(1990)									goto _hx_goto_123;
            								}
            								_hx_goto_123:;
HXDLIN(1990)								params->push( ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("value",71,7f,b8,31),value)
            									->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            							}
            						}
            					}
HXDLIN(1990)					params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(1990)					{
HXLINE(1990)						HX_VARI( int,_g1) = (int)0;
HXDLIN(1990)						HX_VARI( int,_g) = params->get_length();
HXDLIN(1990)						while((_g1 < _g)){
HXLINE(1990)							_g1 = (_g1 + (int)1);
HXDLIN(1990)							HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(1990)							params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            						}
            					}
            				}
HXDLIN(1990)				::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeThing,(void))

void FlxUI_obj::_alignThing( ::haxe::xml::Fast data,hx::Null< bool >  __o_suppressError){
bool suppressError = __o_suppressError.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1998__alignThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(suppressError,"suppressError")
HXLINE(1999)		::haxe::xml::Printer_obj::print(data->x,null());
HXLINE(2000)		if (data->hasNode->resolve(HX_("objects",d4,68,4f,82))) {
HXLINE(2002)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("objects",d4,68,4f,82))->h;
HXDLIN(2002)			while(hx::IsNotNull( _g_head )){
HXLINE(2002)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2002)				_g_head = _g_head->next;
HXLINE(2004)				HX_VARI( ::Array< ::String >,objects) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("value",71,7f,b8,31),true,HX_("",00,00,00,00)).split(HX_(",",2c,00,00,00));
HXLINE(2006)				HX_VARI( ::String,axis) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("axis",a1,1c,79,40),true,null());
HXLINE(2007)				bool _hx_tmp;
HXDLIN(2007)				if ((axis != HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2007)					_hx_tmp = (axis != HX_("vertical",76,bc,15,6a));
            				}
            				else {
HXLINE(2007)					_hx_tmp = false;
            				}
HXDLIN(2007)				if (_hx_tmp) {
HXLINE(2009)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): axis must be \"horizontal\" or \"vertical\"!",a0,ea,67,82),null()));
            				}
HXLINE(2013)				HX_VARI( Float,spacing) = (int)-1;
HXLINE(2014)				if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2016)					spacing = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("spacing",83,33,bb,91),true,null()),(int)-1);
            				}
            				else {
HXLINE(2020)					spacing = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("spacing",83,33,bb,91),true,null()),(int)-1);
            				}
HXLINE(2023)				HX_VARI( bool,resize) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("resize",f4,59,7b,08),null());
HXLINE(2025)				HX_VARI( bool,grow) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("grow",13,dc,6b,44),true);
HXLINE(2026)				HX_VARI( bool,shrink) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("shrink",c9,32,61,28),true);
HXLINE(2028)				HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)-1,(int)-1);
HXDLIN(2028)				point->_inPool = false;
HXLINE(2030)				HX_VARI( ::String,boundsError) = HX_("",00,00,00,00);
HXLINE(2032)				if (data->hasNode->resolve(HX_("bounds",75,86,1d,66))) {
HXLINE(2036)					if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2037)						point->set_x(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("left",07,08,b0,47),null(),null()),(int)-1));
HXLINE(2038)						point->set_y(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("right",dc,0b,64,e9),null(),null()),(int)-1));
            					}
            					else {
HXLINE(2039)						if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2040)							point->set_x(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("top",95,66,58,00),null(),null()),(int)-1));
HXLINE(2041)							point->set_y(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("bounds",75,86,1d,66))->x,HX_("bottom",eb,e6,78,65),null(),null()),(int)-1));
            						}
            					}
            				}
HXLINE(2045)				bool _hx_tmp1;
HXDLIN(2045)				if ((point->x != (int)-1)) {
HXLINE(2045)					_hx_tmp1 = (point->y != (int)-1);
            				}
            				else {
HXLINE(2045)					_hx_tmp1 = false;
            				}
HXDLIN(2045)				if (_hx_tmp1) {
HXLINE(2047)					if ((point->y <= point->x)) {
HXLINE(2049)						boundsError = ((((HX_("bounds max must be > bounds min! (max=",4c,8b,2f,26) + point->y) + HX_(" min=",8b,de,2e,b5)) + point->x) + HX_(")",29,00,00,00));
            					}
            				}
            				else {
HXLINE(2054)					boundsError = HX_("missing bound!",9d,f7,06,0b);
            				}
HXLINE(2057)				if ((boundsError == HX_("",00,00,00,00))) {
HXLINE(2059)					this->_doAlign(objects,axis,spacing,resize,point,grow,shrink);
            				}
HXLINE(2062)				bool _hx_tmp2;
HXDLIN(2062)				bool _hx_tmp3;
HXDLIN(2062)				if (!(data->hasNode->resolve(HX_("anchor",75,3a,71,60)))) {
HXLINE(2062)					_hx_tmp3 = data->has->resolve(HX_("x",78,00,00,00));
            				}
            				else {
HXLINE(2062)					_hx_tmp3 = true;
            				}
HXDLIN(2062)				if (!(_hx_tmp3)) {
HXLINE(2062)					_hx_tmp2 = data->has->resolve(HX_("y",79,00,00,00));
            				}
            				else {
HXLINE(2062)					_hx_tmp2 = true;
            				}
HXDLIN(2062)				if (_hx_tmp2) {
HXLINE(2064)					HX_VARI( int,_g) = (int)0;
HXDLIN(2064)					while((_g < objects->length)){
HXLINE(2064)						HX_VARI( ::String,object) = objects->__get(_g);
HXDLIN(2064)						_g = (_g + (int)1);
HXLINE(2067)						this->_loadPosition(data,this->getAsset(object,null()));
            					}
            				}
            			}
            		}
            		else {
HXLINE(2084)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): <objects> node not found!",e9,2b,f0,7a),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_alignThing,(void))

void FlxUI_obj::_doAlign(::Array< ::String > objects,::String axis,Float spacing,bool resize, ::flixel::math::FlxPoint bounds,hx::Null< bool >  __o_allowGrow,hx::Null< bool >  __o_allowShrink){
bool allowGrow = __o_allowGrow.Default(true);
bool allowShrink = __o_allowShrink.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2090__doAlign)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(objects,"objects")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(spacing,"spacing")
            	HX_STACK_ARG(resize,"resize")
            	HX_STACK_ARG(bounds,"bounds")
            	HX_STACK_ARG(allowGrow,"allowGrow")
            	HX_STACK_ARG(allowShrink,"allowShrink")
HXLINE(2091)		HX_VARI( Float,total_spacing) = (int)0;
HXLINE(2092)		HX_VARI( Float,total_size) = (int)0;
HXLINE(2094)		HX_VARI( Float,bound_range) = (bounds->y - bounds->x);
HXLINE(2096)		HX_VARI( Float,spaces) = (objects->length - (int)1);
HXLINE(2097)		HX_VARI( Float,space_size) = (int)0;
HXLINE(2098)		HX_VARI( Float,object_size) = (int)0;
HXLINE(2100)		HX_VARI( ::String,size_prop) = HX_("width",06,b6,62,ca);
HXLINE(2101)		HX_VARI( ::String,pos_prop) = HX_("x",78,00,00,00);
HXLINE(2102)		if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2104)			size_prop = HX_("height",e7,07,4c,02);
HXLINE(2105)			pos_prop = HX_("y",79,00,00,00);
            		}
HXLINE(2109)		{
HXLINE(2109)			HX_VARI( int,_g) = (int)0;
HXDLIN(2109)			while((_g < objects->length)){
HXLINE(2109)				HX_VARI( ::String,nameStr) = objects->__get(_g);
HXDLIN(2109)				_g = (_g + (int)1);
HXLINE(2111)				HX_VARI( ::Dynamic,widget) = this->getAsset(nameStr,null());
HXLINE(2112)				if (hx::IsNotNull( widget )) {
HXLINE(2114)					HX_VARI( Float,theval) = (int)0;
HXLINE(2115)					::String _hx_switch_0 = size_prop;
            					if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2117)						theval = ( (Float)(widget->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXDLIN(2117)						goto _hx_goto_130;
            					}
            					if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2116)						theval = ( (Float)(widget->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXDLIN(2116)						goto _hx_goto_130;
            					}
            					_hx_goto_130:;
HXLINE(2120)					total_size = (total_size + theval);
            				}
            			}
            		}
HXLINE(2124)		if ((resize == false)) {
HXLINE(2126)			total_spacing = (bound_range - total_size);
HXLINE(2127)			space_size = ((Float)total_spacing / (Float)spaces);
            		}
            		else {
HXLINE(2131)			space_size = spacing;
HXLINE(2132)			total_spacing = (spacing * spaces);
HXLINE(2133)			object_size = ((Float)(bound_range - total_spacing) / (Float)objects->length);
            		}
HXLINE(2136)		object_size = ::Std_obj::_hx_int(object_size);
HXLINE(2137)		space_size = ::Std_obj::_hx_int(space_size);
HXLINE(2139)		HX_VARI( Float,last_pos) = bounds->x;
HXLINE(2140)		{
HXLINE(2140)			HX_VARI_NAME( int,_g1,"_g") = (int)0;
HXDLIN(2140)			while((_g1 < objects->length)){
HXLINE(2140)				HX_VARI_NAME( ::String,nameStr1,"nameStr") = objects->__get(_g1);
HXDLIN(2140)				_g1 = (_g1 + (int)1);
HXLINE(2142)				HX_VARI_NAME( ::Dynamic,widget1,"widget") = this->getAsset(nameStr1,null());
HXLINE(2143)				if (hx::IsNotNull( widget1 )) {
HXLINE(2144)					HX_VARI( Float,pos) = last_pos;
HXLINE(2145)					if (!(resize)) {
HXLINE(2147)						::String _hx_switch_1 = size_prop;
            						if (  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2150)							object_size = ( (Float)(widget1->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXDLIN(2150)							goto _hx_goto_132;
            						}
            						if (  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2149)							object_size = ( (Float)(widget1->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXDLIN(2149)							goto _hx_goto_132;
            						}
            						_hx_goto_132:;
            					}
            					else {
HXLINE(2156)						if (::Std_obj::is(widget1,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2158)							HX_VARI( bool,allow) = true;
HXLINE(2159)							HX_VARI( ::Dynamic,widgetr) = widget1;
HXLINE(2160)							if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2162)								if ((object_size > ( (Float)(widgetr->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ))) {
HXLINE(2164)									allow = allowGrow;
            								}
            								else {
HXLINE(2166)									if ((object_size < ( (Float)(widgetr->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ))) {
HXLINE(2168)										allow = allowShrink;
            									}
            								}
HXLINE(2170)								if (allow) {
HXLINE(2172)									::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,widgetr->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)(),object_size);
            								}
            							}
            							else {
HXLINE(2175)								if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2177)									if ((object_size > ( (Float)(widgetr->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ))) {
HXLINE(2179)										allow = allowGrow;
            									}
            									else {
HXLINE(2181)										if ((object_size < ( (Float)(widgetr->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ))) {
HXLINE(2183)											allow = allowShrink;
            										}
            									}
HXLINE(2185)									if (allow) {
HXLINE(2187)										::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,object_size,widgetr->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)());
            									}
            								}
            							}
            						}
            					}
HXLINE(2193)					last_pos = ((pos + object_size) + space_size);
HXLINE(2195)					::String _hx_switch_2 = pos_prop;
            					if (  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(2197)						::flixel::IFlxSprite_obj::set_x(widget1,pos);
HXDLIN(2197)						goto _hx_goto_133;
            					}
            					if (  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(2198)						::flixel::IFlxSprite_obj::set_y(widget1,pos);
HXDLIN(2198)						goto _hx_goto_133;
            					}
            					_hx_goto_133:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxUI_obj,_doAlign,(void))

bool FlxUI_obj::_checkFailure( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2204__checkFailure)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(2205)		HX_VARI( ::String,target) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("target",51,f3,ec,86),true,null());
HXLINE(2206)		HX_VARI( ::String,property) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("property",55,48,38,ac),true,null());
HXLINE(2207)		HX_VARI( ::String,compare) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("compare",a5,18,69,83),true,null());
HXLINE(2208)		HX_VARI( ::String,value) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("value",71,7f,b8,31),true,null());
HXLINE(2210)		HX_VARI( ::Dynamic,thing) = this->getAsset(target,null());
HXLINE(2212)		if (hx::IsNull( thing )) {
HXLINE(2213)			return false;
            		}
HXLINE(2216)		HX_VARI( Float,prop_f) = (int)0;
HXLINE(2217)		HX_VARI( Float,val_f) = (int)0;
HXLINE(2219)		HX_VARI( Float,p) = ::flixel::addons::ui::U_obj::perc_to_float(value);
HXLINE(2221)		::String _hx_switch_0 = property;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2223)			prop_f = ( (Float)(thing->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXDLIN(2223)			goto _hx_goto_135;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2222)			prop_f = ( (Float)(thing->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXDLIN(2222)			goto _hx_goto_135;
            		}
            		_hx_goto_135:;
HXLINE(2226)		if (::Math_obj::isNaN(p)) {
HXLINE(2227)			if (::flixel::addons::ui::U_obj::isStrNum(value)) {
HXLINE(2228)				val_f = ::Std_obj::parseFloat(value);
            			}
            			else {
HXLINE(2230)				return false;
            			}
            		}
            		else {
HXLINE(2233)			::String _hx_switch_1 = property;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2235)				val_f = (p * this->thisHeight());
HXDLIN(2235)				goto _hx_goto_136;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2234)				val_f = (p * this->thisWidth());
HXDLIN(2234)				goto _hx_goto_136;
            			}
            			_hx_goto_136:;
            		}
HXLINE(2239)		HX_VARI( bool,return_val) = false;
HXLINE(2241)		::String _hx_switch_2 = compare;
            		if (  (_hx_switch_2==HX_("<",3c,00,00,00)) ){
HXLINE(2242)			if ((prop_f < val_f)) {
HXLINE(2243)				this->failed_by = (val_f - prop_f);
HXLINE(2244)				return_val = true;
            			}
HXLINE(2242)			goto _hx_goto_137;
            		}
            		if (  (_hx_switch_2==HX_("<=",81,34,00,00)) ){
HXLINE(2254)			if ((prop_f <= val_f)) {
HXLINE(2255)				this->failed_by = (val_f - prop_f);
HXLINE(2256)				return_val = true;
            			}
HXLINE(2254)			goto _hx_goto_137;
            		}
            		if (  (_hx_switch_2==HX_("=",3d,00,00,00)) ||  (_hx_switch_2==HX_("==",60,35,00,00)) ){
HXLINE(2250)			if ((prop_f == val_f)) {
HXLINE(2251)				this->failed_by = ::Math_obj::abs((prop_f - val_f));
HXLINE(2252)				return_val = true;
            			}
HXLINE(2250)			goto _hx_goto_137;
            		}
            		if (  (_hx_switch_2==HX_(">",3e,00,00,00)) ){
HXLINE(2246)			if ((prop_f > val_f)) {
HXLINE(2247)				this->failed_by = (prop_f - val_f);
HXLINE(2248)				return_val = true;
            			}
HXLINE(2246)			goto _hx_goto_137;
            		}
            		if (  (_hx_switch_2==HX_(">=",3f,36,00,00)) ){
HXLINE(2258)			if ((prop_f >= val_f)) {
HXLINE(2259)				this->failed_by = (prop_f - val_f);
HXLINE(2260)				return_val = true;
            			}
HXLINE(2258)			goto _hx_goto_137;
            		}
            		_hx_goto_137:;
HXLINE(2264)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_checkFailure,return )

void FlxUI_obj::_resizeThing(::Dynamic fo_r, ::Dynamic bounds){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2268__resizeThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fo_r,"fo_r")
            	HX_STACK_ARG(bounds,"bounds")
HXLINE(2269)		HX_VARI( bool,do_resize) = false;
HXLINE(2270)		HX_VARI( Float,ww) = ( (Float)(fo_r->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXLINE(2271)		HX_VARI( Float,hh) = ( (Float)(fo_r->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXLINE(2273)		if ((ww < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(2274)			do_resize = true;
HXLINE(2275)			ww = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) );
            		}
            		else {
HXLINE(2276)			if ((ww > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(2277)				do_resize = true;
HXLINE(2278)				ww = ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) );
            			}
            		}
HXLINE(2281)		if ((hh < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(2282)			do_resize = true;
HXLINE(2283)			hh = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) );
            		}
            		else {
HXLINE(2284)			if ((hh > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(2285)				do_resize = true;
HXLINE(2286)				hh = ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) );
            			}
            		}
HXLINE(2289)		if (do_resize) {
HXLINE(2290)			::flixel::addons::ui::interfaces::IResizable_obj::resize(fo_r,ww,hh);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_resizeThing,(void))

void FlxUI_obj::_postLoadThing(::String type, ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2295__postLoadThing)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(data,"data")
HXLINE(2296)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE(2298)			if (this->_loadTest(data)) {
HXLINE(2300)				if (hx::IsNotNull( data->x->firstElement() )) {
HXLINE(2302)					HX_VARI(  ::Dynamic,subNode) = data->x->elements();
HXDLIN(2302)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2302)						HX_VARI_NAME(  ::Xml,subNode1,"subNode") = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2304)						if ((subNode1->nodeType != ::Xml_obj::Element)) {
HXLINE(2304)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + subNode1->nodeType));
            						}
HXDLIN(2304)						HX_VARI( ::String,nodeType) = subNode1->nodeName.toLowerCase();
HXLINE(2305)						this->_postLoadThing(nodeType, ::haxe::xml::Fast_obj::__alloc( HX_CTX ,subNode1));
            					}
            				}
            			}
HXLINE(2309)			return;
            		}
HXLINE(2312)		if ((this->_loadTest(data) == false)) {
HXLINE(2314)			return;
            		}
HXLINE(2317)		HX_VARI( ::String,name) = ::flixel::addons::ui::U_obj::xml_name(data->x);
HXLINE(2319)		HX_VARI( ::Dynamic,thing) = this->getAsset(name,null());
HXLINE(2320)		HX_VARI( bool,isGroup) = (type == HX_("group",3f,b3,f4,99));
HXLINE(2321)		if (isGroup) {
HXLINE(2323)			thing = this->getGroup(name,null());
            		}
HXLINE(2326)		if ((type == HX_("align",c5,56,91,21))) {
HXLINE(2327)			this->_alignThing(data,null());
            		}
HXLINE(2330)		if ((type == HX_("change",70,91,72,b7))) {
HXLINE(2331)			this->_changeThing(data);
            		}
HXLINE(2334)		if ((type == HX_("position",a9,a0,fa,ca))) {
HXLINE(2335)			this->_loadPosition(data,thing);
HXLINE(2336)			return;
            		}
HXLINE(2339)		if ((type == HX_("cursor",d6,8e,e8,3e))) {
HXLINE(2340)			this->_loadCursor(data);
            		}
HXLINE(2343)		bool _hx_tmp;
HXDLIN(2343)		if (hx::IsNull( thing )) {
HXLINE(2343)			_hx_tmp = !(isGroup);
            		}
            		else {
HXLINE(2343)			_hx_tmp = false;
            		}
HXDLIN(2343)		if (_hx_tmp) {
HXLINE(2344)			return;
            		}
HXLINE(2347)		if (!(isGroup)) {
HXLINE(2349)			HX_VARI( ::String,use_def) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(2351)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(2352)				this->getDefinition(use_def,null());
            			}
HXLINE(2355)			if (::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2357)				HX_VARI(  ::Dynamic,ww) = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("width",06,b6,62,ca),null(),null()),null());
HXLINE(2358)				HX_VARI(  ::Dynamic,hh) = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("height",e7,07,4c,02),null(),null()),null());
HXLINE(2359)				bool _hx_tmp1;
HXDLIN(2359)				if (hx::IsNotEq( ww,(int)0 )) {
HXLINE(2359)					_hx_tmp1 = hx::IsEq( ww,( (Float)(thing->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) );
            				}
            				else {
HXLINE(2359)					_hx_tmp1 = true;
            				}
HXDLIN(2359)				if (_hx_tmp1) {
HXLINE(2361)					ww = null();
            				}
HXLINE(2363)				bool _hx_tmp2;
HXDLIN(2363)				if (hx::IsNotEq( hh,(int)0 )) {
HXLINE(2363)					_hx_tmp2 = hx::IsEq( hh,( (Float)(thing->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) );
            				}
            				else {
HXLINE(2363)					_hx_tmp2 = true;
            				}
HXDLIN(2363)				if (_hx_tmp2) {
HXLINE(2365)					hh = null();
            				}
HXLINE(2368)				HX_VARI(  ::Dynamic,bounds) = this->calcMaxMinSize(data,null(),null());
HXLINE(2370)				if (hx::IsNotNull( bounds )) {
HXLINE(2372)					if (hx::IsNotNull( ww )) {
HXLINE(2373)						if (hx::IsLess( ww,( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ) )) {
HXLINE(2373)							ww = bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic);
            						}
HXLINE(2374)						if (hx::IsGreater( ww,( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ) )) {
HXLINE(2374)							ww = bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic);
            						}
HXLINE(2375)						bounds->__SetField(HX_("min_width",59,88,fd,ea),(bounds->__SetField(HX_("max_width",eb,9a,40,c1),ww,hx::paccDynamic)),hx::paccDynamic);
            					}
HXLINE(2377)					if (hx::IsNotNull( hh )) {
HXLINE(2378)						if (hx::IsLess( hh,( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ) )) {
HXLINE(2378)							hh = bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic);
            						}
HXLINE(2379)						if (hx::IsGreater( hh,( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ) )) {
HXLINE(2379)							hh = bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic);
            						}
HXLINE(2380)						bounds->__SetField(HX_("min_height",34,3e,29,69),(bounds->__SetField(HX_("max_height",62,6b,96,0d),hh,hx::paccDynamic)),hx::paccDynamic);
            					}
HXLINE(2383)					this->_resizeThing(thing,bounds);
            				}
            			}
HXLINE(2387)			{
HXLINE(2387)				Float Y = -(( (Float)(thing->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
HXDLIN(2387)				{
HXLINE(2387)					HX_VARI( ::Dynamic,_g) = thing;
HXDLIN(2387)					::flixel::IFlxSprite_obj::set_x(_g,(( (Float)(_g->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + -(( (Float)(thing->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))));
            				}
HXDLIN(2387)				{
HXLINE(2387)					HX_VARI_NAME( ::Dynamic,_g1,"_g") = thing;
HXDLIN(2387)					::flixel::IFlxSprite_obj::set_y(_g1,(( (Float)(_g1->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + Y));
            				}
            			}
HXLINE(2388)			this->_loadPosition(data,thing);
            		}
HXLINE(2391)		HX_VARI( ::String,send_to) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("send_to",52,6b,a5,a8),true,HX_("",00,00,00,00));
HXLINE(2392)		if ((send_to != HX_("",00,00,00,00))) {
HXLINE(2394)			::String _hx_switch_0 = send_to;
            			if (  (_hx_switch_0==HX_("back",27,da,10,41)) ||  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(2396)				this->_sendTo(thing,(int)-1);
HXDLIN(2396)				goto _hx_goto_141;
            			}
            			if (  (_hx_switch_0==HX_("front",a9,18,8e,06)) ||  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(2397)				this->_sendTo(thing,(int)1);
HXDLIN(2397)				goto _hx_goto_141;
            			}
            			_hx_goto_141:;
            		}
HXLINE(2401)		bool _hx_tmp3;
HXDLIN(2401)		if (!(isGroup)) {
HXLINE(2401)			_hx_tmp3 = ::Std_obj::is(thing,hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            		}
            		else {
HXLINE(2401)			_hx_tmp3 = false;
            		}
HXDLIN(2401)		if (_hx_tmp3) {
HXLINE(2403)			HX_VARI(  ::flixel::addons::ui::FlxUI,fui_thing) = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE(2404)			if ((fui_thing->_postLoaded == false)) {
HXLINE(2406)				fui_thing->getEvent(HX_("post_load",a5,55,d0,20),hx::ObjectPtr<OBJ_>(this),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_postLoadThing,(void))

 ::flixel::addons::ui::FlxUITileTest FlxUI_obj::_loadTileTest( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2412__loadTileTest)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(2413)		HX_VARI( int,tiles_w) = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("tiles_w",fd,7b,93,45),(int)2);
HXLINE(2414)		HX_VARI( int,tiles_h) = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("tiles_h",ee,7b,93,45),(int)2);
HXLINE(2415)		HX_VARI( Float,w) = this->_loadWidth(data,null(),null(),null());
HXLINE(2416)		HX_VARI( Float,h) = this->_loadHeight(data,null(),null(),null());
HXLINE(2418)		HX_VARI(  ::Dynamic,bounds) = this->calcMaxMinSize(data,null(),null());
HXLINE(2421)		if ((w < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(2421)			w = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) );
            		}
HXLINE(2422)		if ((h < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(2422)			h = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) );
            		}
HXLINE(2424)		HX_VARI( int,tileWidth) = ::Std_obj::_hx_int(((Float)w / (Float)tiles_w));
HXLINE(2425)		HX_VARI( int,tileHeight) = ::Std_obj::_hx_int(((Float)h / (Float)tiles_h));
HXLINE(2427)		if ((tileWidth < tileHeight)) {
HXLINE(2427)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2428)			if ((tileHeight < tileWidth)) {
HXLINE(2428)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2433)		if (((tileWidth * tiles_w) > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(2433)			tileWidth = ::Std_obj::_hx_int(((Float)( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ) / (Float)tiles_w));
            		}
HXLINE(2434)		if (((tileHeight * tiles_h) > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(2434)			tileHeight = ::Std_obj::_hx_int(((Float)( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ) / (Float)tiles_h));
            		}
HXLINE(2436)		if ((tileWidth < tileHeight)) {
HXLINE(2436)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2437)			if ((tileHeight < tileWidth)) {
HXLINE(2437)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2439)		if ((tileWidth < (int)2)) {
HXLINE(2439)			tileWidth = (int)2;
            		}
HXLINE(2440)		if ((tileHeight < (int)2)) {
HXLINE(2440)			tileHeight = (int)2;
            		}
HXLINE(2442)		HX_VARI( int,color1) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color1",6e,c5,86,c6),true,HX_("0x808080",30,ad,e5,63)));
HXLINE(2443)		HX_VARI( int,color2) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color2",6f,c5,86,c6),true,HX_("0xc4c4c4",5b,de,47,ff)));
HXLINE(2445)		HX_VARI( int,baseTileSize) = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("base_tile_size",c4,2d,3d,a8),(int)-1);
HXLINE(2448)		HX_VARI(  ::flixel::addons::ui::FlxUITileTest,ftt) =  ::flixel::addons::ui::FlxUITileTest_obj::__alloc( HX_CTX ,(int)0,(int)0,tileWidth,tileHeight,tiles_w,tiles_h,color1,color2,::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("floor_to_even",eb,3e,ec,20),false));
HXLINE(2449)		ftt->baseTileSize = baseTileSize;
HXLINE(2450)		return ftt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileTest,return )

::String FlxUI_obj::_loadString( ::haxe::xml::Fast data,::String attributeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2454__loadString)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(attributeName,"attributeName")
HXLINE(2455)		HX_VARI( ::String,string) = ::flixel::addons::ui::U_obj::xml_str(data->x,attributeName,null(),null());
HXLINE(2456)		HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2458)		string = this->getText(string,context,true,::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00)));
HXLINE(2459)		return string;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadString,return )

::Dynamic FlxUI_obj::_loadText( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2463__loadText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(2464)		HX_VARI( ::String,text) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2465)		HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2467)		text = this->getText(text,context,true,::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00)));
HXLINE(2469)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)100,null(),null()));
HXLINE(2470)		HX_VARI( int,H) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(2472)		HX_VARI( ::String,the_font) = this->_loadFontFace(data);
HXLINE(2475)		if (::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("input",0a,c4,1d,be),null())) {
HXLINE(2477)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead.",96,71,67,6a),null()));
            		}
HXLINE(2480)		HX_VARI( ::String,align) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(2480)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2480)			align = null();
            		}
HXLINE(2481)		HX_VARI( int,size) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(2483)		HX_VARI( int,color) = this->_loadColor(data,null(),null());
HXLINE(2485)		HX_VARI(  ::flixel::addons::ui::BorderDef,border) = this->_loadBorder(data);
HXLINE(2487)		HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("background",ee,93,1d,26),true,HX_("0x00000000",48,5a,d7,68)));
HXDLIN(2487)		if (hx::IsNull( return_val )) {
HXLINE(2487)			return_val = (int)0;
            		}
HXLINE(2489)		HX_VAR( ::Dynamic,ft);
HXLINE(2490)		HX_VARI(  ::flixel::addons::ui::FlxUIText,ftu) =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(int)0,(int)0,W,text,size,null());
HXLINE(2491)		ftu->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2492)		border->apply(ftu);
HXLINE(2493)		ftu->drawFrame(null());
HXLINE(2494)		ft = ftu;
HXLINE(2496)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2497)			HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(2497)			if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2497)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2497)				{
HXLINE(2497)					HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2497)					while(hx::IsNotNull( _g_head )){
HXLINE(2497)						HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2497)						_g_head = _g_head->next;
HXDLIN(2497)						bool _hx_tmp;
HXDLIN(2497)						if (val->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2497)							_hx_tmp = val->has->resolve(HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2497)							_hx_tmp = false;
            						}
HXDLIN(2497)						if (_hx_tmp) {
HXLINE(2497)							HX_VARI( ::String,type) = val->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2497)							type = type.toLowerCase();
HXDLIN(2497)							HX_VARI( ::String,valueStr) = val->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2497)							HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(2497)							HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2497)							::String _hx_switch_0 = type;
            							if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2497)								HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(2497)								str = str.toLowerCase();
HXDLIN(2497)								bool _hx_tmp1;
HXDLIN(2497)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2497)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2497)									_hx_tmp1 = true;
            								}
HXDLIN(2497)								if (_hx_tmp1) {
HXLINE(2497)									value = true;
            								}
            								else {
HXLINE(2497)									value = false;
            								}
HXDLIN(2497)								goto _hx_goto_146;
            							}
            							if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2497)								HX_VARI_NAME(  ::Dynamic,return_val1,"return_val") = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2497)								if (hx::IsNull( return_val1 )) {
HXLINE(2497)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2497)								value = return_val1;
HXDLIN(2497)								goto _hx_goto_146;
            							}
            							if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2497)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2497)								goto _hx_goto_146;
            							}
            							if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2497)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2497)								goto _hx_goto_146;
            							}
            							if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2497)								value = ::String(valueStr);
HXDLIN(2497)								goto _hx_goto_146;
            							}
            							_hx_goto_146:;
HXDLIN(2497)							params->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2497)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2497)				{
HXLINE(2497)					HX_VARI( int,_g1) = (int)0;
HXDLIN(2497)					HX_VARI( int,_g) = params->get_length();
HXDLIN(2497)					while((_g1 < _g)){
HXLINE(2497)						_g1 = (_g1 + (int)1);
HXDLIN(2497)						HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(2497)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            					}
            				}
            			}
HXLINE(2499)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ft,params);
            		}
HXLINE(2502)		bool _hx_tmp2;
HXDLIN(2502)		if ((H > (int)0)) {
HXLINE(2502)			_hx_tmp2 = (( (Float)(ft->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) != H);
            		}
            		else {
HXLINE(2502)			_hx_tmp2 = false;
            		}
HXDLIN(2502)		if (_hx_tmp2) {
HXLINE(2504)			if (::Std_obj::is(ft,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2506)				HX_VARI( ::Dynamic,r) = ft;
HXLINE(2507)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,r->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)(),H);
            			}
            		}
HXLINE(2512)		ftu->set_text(HX_(" ",20,00,00,00));
HXLINE(2513)		ftu->set_text(text);
HXLINE(2515)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadText,return )

::Dynamic FlxUI_obj::_loadInputText( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2519__loadInputText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(2520)		HX_VARI( ::String,text) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2521)		HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2523)		text = this->getText(text,context,true,::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00)));
HXLINE(2525)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)100,null(),null()));
HXLINE(2526)		HX_VARI( int,H) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(2528)		HX_VARI( ::String,the_font) = this->_loadFontFace(data);
HXLINE(2530)		HX_VARI( ::String,align) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("align",c5,56,91,21),null(),null());
HXDLIN(2530)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2530)			align = null();
            		}
HXLINE(2531)		HX_VARI( int,size) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)8,HX_("size",c1,a0,53,4c),null()));
HXLINE(2532)		HX_VARI( int,color) = this->_loadColor(data,null(),null());
HXLINE(2534)		HX_VARI(  ::flixel::addons::ui::BorderDef,border) = this->_loadBorder(data);
HXLINE(2536)		HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("background",ee,93,1d,26),true,HX_("0x00000000",48,5a,d7,68)));
HXDLIN(2536)		if (hx::IsNull( return_val )) {
HXLINE(2536)			return_val = (int)0;
            		}
HXLINE(2537)		HX_VARI( bool,passwordMode) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("password_mode",47,aa,e5,09),null());
HXLINE(2539)		HX_VAR( ::Dynamic,ft);
HXLINE(2540)		HX_VARI(  ::flixel::addons::ui::FlxUIInputText,fti) =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,(int)0,(int)0,W,text,size,color,return_val,null());
HXLINE(2541)		fti->set_passwordMode(passwordMode);
HXLINE(2544)		HX_VAR( int,forceCase);
HXLINE(2545)		::String _hx_switch_0 = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("force_case",c4,b4,72,f8),true,HX_("",00,00,00,00));
            		if (  (_hx_switch_0==HX_("lower",01,fa,ff,78)) ||  (_hx_switch_0==HX_("lower_case",ee,5c,fc,1d)) ||  (_hx_switch_0==HX_("lowercase",31,ad,a5,66)) ){
HXLINE(2548)			forceCase = (int)2;
HXDLIN(2548)			goto _hx_goto_149;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(2550)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute).",30,f9,74,27),null()));
HXDLIN(2550)			goto _hx_goto_149;
            		}
            		if (  (_hx_switch_0==HX_("upper",62,19,3f,a8)) ||  (_hx_switch_0==HX_("upper_case",ed,dd,2a,23)) ||  (_hx_switch_0==HX_("uppercase",12,91,3e,e7)) ){
HXLINE(2547)			forceCase = (int)1;
HXDLIN(2547)			goto _hx_goto_149;
            		}
            		/* default */{
HXLINE(2551)			forceCase = (int)0;
            		}
            		_hx_goto_149:;
HXLINE(2554)		HX_VARI( ::String,filter) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("filter",b8,1f,35,85),true,HX_("",00,00,00,00));
HXLINE(2555)		HX_VAR( int,filterMode);
HXLINE(2556)		while((filter.indexOf(HX_("_",5f,00,00,00),null()) != (int)-1)){
HXLINE(2558)			filter = ::StringTools_obj::replace(filter,HX_("_",5f,00,00,00),HX_("",00,00,00,00));
            		}
HXLINE(2561)		::String _hx_switch_1 = filter;
            		if (  (_hx_switch_1==HX_("a",61,00,00,00)) ||  (_hx_switch_1==HX_("an",ed,54,00,00)) ||  (_hx_switch_1==HX_("n",6e,00,00,00)) ){
HXLINE(2567)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute).",a4,a0,22,50),null()));
HXDLIN(2567)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_1==HX_("alpha",5e,a7,96,21)) ||  (_hx_switch_1==HX_("onlyalpha",72,fa,2c,18)) ){
HXLINE(2563)			filterMode = (int)1;
HXDLIN(2563)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_1==HX_("alphanum",a8,a5,41,21)) ||  (_hx_switch_1==HX_("alphanumeric",2f,03,e3,71)) ||  (_hx_switch_1==HX_("onlyalphanumeric",9b,fa,fd,ec)) ){
HXLINE(2565)			filterMode = (int)3;
HXDLIN(2565)			goto _hx_goto_151;
            		}
            		if (  (_hx_switch_1==HX_("num",46,de,53,00)) ||  (_hx_switch_1==HX_("numeric",cd,e2,c0,ab)) ||  (_hx_switch_1==HX_("onlynumeric",e1,22,e1,32)) ){
HXLINE(2564)			filterMode = (int)2;
HXDLIN(2564)			goto _hx_goto_151;
            		}
            		/* default */{
HXLINE(2568)			filterMode = (int)0;
            		}
            		_hx_goto_151:;
HXLINE(2571)		fti->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2572)		fti->set_forceCase(forceCase);
HXLINE(2573)		fti->set_filterMode(filterMode);
HXLINE(2574)		border->apply(fti);
HXLINE(2575)		fti->drawFrame(null());
HXLINE(2576)		ft = fti;
HXLINE(2578)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2580)			HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(2580)			if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2580)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2580)				{
HXLINE(2580)					HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2580)					while(hx::IsNotNull( _g_head )){
HXLINE(2580)						HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2580)						_g_head = _g_head->next;
HXDLIN(2580)						bool _hx_tmp;
HXDLIN(2580)						if (val->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2580)							_hx_tmp = val->has->resolve(HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2580)							_hx_tmp = false;
            						}
HXDLIN(2580)						if (_hx_tmp) {
HXLINE(2580)							HX_VARI( ::String,type) = val->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2580)							type = type.toLowerCase();
HXDLIN(2580)							HX_VARI( ::String,valueStr) = val->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2580)							HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(2580)							HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2580)							::String _hx_switch_2 = type;
            							if (  (_hx_switch_2==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_2==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2580)								HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(2580)								str = str.toLowerCase();
HXDLIN(2580)								bool _hx_tmp1;
HXDLIN(2580)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2580)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2580)									_hx_tmp1 = true;
            								}
HXDLIN(2580)								if (_hx_tmp1) {
HXLINE(2580)									value = true;
            								}
            								else {
HXLINE(2580)									value = false;
            								}
HXDLIN(2580)								goto _hx_goto_153;
            							}
            							if (  (_hx_switch_2==HX_("color",63,71,5c,4a)) ||  (_hx_switch_2==HX_("hex",db,42,4f,00)) ){
HXLINE(2580)								HX_VARI_NAME(  ::Dynamic,return_val1,"return_val") = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2580)								if (hx::IsNull( return_val1 )) {
HXLINE(2580)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(2580)								value = return_val1;
HXDLIN(2580)								goto _hx_goto_153;
            							}
            							if (  (_hx_switch_2==HX_("float",9c,c5,96,02)) ){
HXLINE(2580)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2580)								goto _hx_goto_153;
            							}
            							if (  (_hx_switch_2==HX_("int",ef,0c,50,00)) ){
HXLINE(2580)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2580)								goto _hx_goto_153;
            							}
            							if (  (_hx_switch_2==HX_("string",d1,28,30,11)) ){
HXLINE(2580)								value = ::String(valueStr);
HXDLIN(2580)								goto _hx_goto_153;
            							}
            							_hx_goto_153:;
HXDLIN(2580)							params->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2580)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2580)				{
HXLINE(2580)					HX_VARI( int,_g1) = (int)0;
HXDLIN(2580)					HX_VARI( int,_g) = params->get_length();
HXDLIN(2580)					while((_g1 < _g)){
HXLINE(2580)						_g1 = (_g1 + (int)1);
HXDLIN(2580)						HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(2580)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            					}
            				}
            			}
HXLINE(2582)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ft,params);
            		}
HXLINE(2585)		bool _hx_tmp2;
HXDLIN(2585)		if ((H > (int)0)) {
HXLINE(2585)			_hx_tmp2 = (( (Float)(ft->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) != H);
            		}
            		else {
HXLINE(2585)			_hx_tmp2 = false;
            		}
HXDLIN(2585)		if (_hx_tmp2) {
HXLINE(2587)			if (::Std_obj::is(ft,hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2589)				HX_VARI( ::Dynamic,r) = ft;
HXLINE(2590)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,r->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)(),H);
            			}
            		}
HXLINE(2594)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadInputText,return )

 ::flixel::addons::ui::FlxUIRadioGroup FlxUI_obj::_loadRadioGroup( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2674__loadRadioGroup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(2675)		HX_VARI(  ::flixel::addons::ui::FlxUIRadioGroup,frg) = null();
HXLINE(2677)		HX_VARI( ::String,dot_src) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("dot_src",ee,a6,9d,a9),true,null());
HXLINE(2678)		HX_VARI( ::String,radio_src) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("radio_src",60,96,16,fe),true,null());
HXLINE(2680)		HX_VARI( ::Array< ::String >,labels) = ::Array_obj< ::String >::__new();
HXLINE(2681)		HX_VARI( ::Array< ::String >,names) = ::Array_obj< ::String >::__new();
HXLINE(2683)		HX_VARI( int,W) = this->_loadWidth(data,(int)11,HX_("radio_width",82,7c,59,e9),null());
HXLINE(2684)		HX_VARI( int,H) = this->_loadHeight(data,(int)11,HX_("radio_height",eb,ed,42,fb),null());
HXLINE(2686)		HX_VARI( int,scrollH) = this->_loadHeight(data,(int)0,HX_("height",e7,07,4c,02),null());
HXLINE(2687)		HX_VARI( int,scrollW) = this->_loadHeight(data,(int)0,HX_("width",06,b6,62,ca),null());
HXLINE(2689)		HX_VARI( int,labelW) = this->_loadWidth(data,(int)100,HX_("label_width",3b,fa,b5,dc),null());
HXLINE(2691)		{
HXLINE(2691)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("radio",fb,10,18,e4))->h;
HXDLIN(2691)			while(hx::IsNotNull( _g_head )){
HXLINE(2691)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2691)				_g_head = _g_head->next;
HXLINE(2693)				HX_VARI( ::String,name) = ::flixel::addons::ui::U_obj::xml_name(val->x);
HXLINE(2694)				HX_VARI( ::String,label) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2696)				HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2698)				label = this->getText(label,context,true,::flixel::addons::ui::U_obj::xml_str(val->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00)));
HXLINE(2700)				names->push(name);
HXLINE(2701)				labels->push(label);
            			}
            		}
HXLINE(2704)		names->reverse();
HXLINE(2705)		labels->reverse();
HXLINE(2707)		HX_VARI( Float,y_space) = this->_loadHeight(data,(int)25,HX_("y_space",40,f5,f2,24),null());
HXLINE(2709)		HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(2709)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2709)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2709)			{
HXLINE(2709)				HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2709)				while(hx::IsNotNull( _g_head1 )){
HXLINE(2709)					HX_VARI_NAME(  ::haxe::xml::Fast,val1,"val") = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(2709)					_g_head1 = _g_head1->next;
HXDLIN(2709)					bool _hx_tmp;
HXDLIN(2709)					if (val1->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2709)						_hx_tmp = val1->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2709)						_hx_tmp = false;
            					}
HXDLIN(2709)					if (_hx_tmp) {
HXLINE(2709)						HX_VARI( ::String,type) = val1->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2709)						type = type.toLowerCase();
HXDLIN(2709)						HX_VARI( ::String,valueStr) = val1->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2709)						HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(2709)						HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val1->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2709)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2709)							HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(2709)							str = str.toLowerCase();
HXDLIN(2709)							bool _hx_tmp1;
HXDLIN(2709)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2709)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2709)								_hx_tmp1 = true;
            							}
HXDLIN(2709)							if (_hx_tmp1) {
HXLINE(2709)								value = true;
            							}
            							else {
HXLINE(2709)								value = false;
            							}
HXDLIN(2709)							goto _hx_goto_158;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2709)							HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2709)							if (hx::IsNull( return_val )) {
HXLINE(2709)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2709)							value = return_val;
HXDLIN(2709)							goto _hx_goto_158;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2709)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2709)							goto _hx_goto_158;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2709)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2709)							goto _hx_goto_158;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2709)							value = ::String(valueStr);
HXDLIN(2709)							goto _hx_goto_158;
            						}
            						_hx_goto_158:;
HXDLIN(2709)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2709)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2709)			{
HXLINE(2709)				HX_VARI( int,_g1) = (int)0;
HXDLIN(2709)				HX_VARI( int,_g) = params->get_length();
HXDLIN(2709)				while((_g1 < _g)){
HXLINE(2709)					_g1 = (_g1 + (int)1);
HXDLIN(2709)					HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(2709)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(2709)		HX_VARI_NAME( ::cpp::VirtualArray,params1,"params") = params;
HXLINE(2718)		HX_VARI(  ::Dynamic,radio_asset) = null();
HXLINE(2719)		if ((radio_src != HX_("",00,00,00,00))) {
HXLINE(2721)			radio_asset = ::flixel::addons::ui::U_obj::gfx(radio_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2723)			if (data->hasNode->resolve(HX_("box",0b,be,4a,00))) {
HXLINE(2726)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("box",0b,be,4a,00))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2729)					radio_asset = this->_load9SliceSprite(data->node->resolve(HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(2734)					radio_asset = this->_loadSprite(data->node->resolve(HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(2738)		HX_VARI(  ::Dynamic,dot_asset) = null();
HXLINE(2739)		if ((dot_src != HX_("",00,00,00,00))) {
HXLINE(2741)			dot_asset = ::flixel::addons::ui::U_obj::gfx(dot_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2743)			if (data->hasNode->resolve(HX_("dot",89,42,4c,00))) {
HXLINE(2746)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("dot",89,42,4c,00))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2749)					dot_asset = this->_load9SliceSprite(data->node->resolve(HX_("dot",89,42,4c,00)),null());
            				}
            				else {
HXLINE(2754)					dot_asset = this->_loadSprite(data->node->resolve(HX_("dot",89,42,4c,00)));
            				}
            			}
            		}
HXLINE(2761)		HX_VARI(  ::flixel::math::FlxPoint,prevOffset) = null();
HXLINE(2762)		HX_VARI(  ::flixel::math::FlxPoint,nextOffset) = null();
HXLINE(2764)		if (data->hasNode->resolve(HX_("button",f2,61,e0,d9))) {
HXLINE(2766)			HX_VARI_NAME(  ::_List::ListNode,_g_head2,"_g_head") = data->nodes->resolve(HX_("button",f2,61,e0,d9))->h;
HXDLIN(2766)			while(hx::IsNotNull( _g_head2 )){
HXLINE(2766)				HX_VARI_NAME(  ::haxe::xml::Fast,val2,"val") = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(2766)				_g_head2 = _g_head2->next;
HXLINE(2768)				HX_VARI_NAME( ::String,name1,"name") = ::flixel::addons::ui::U_obj::xml_name(val2->x);
HXLINE(2769)				bool _hx_tmp2;
HXDLIN(2769)				if ((name1 != HX_("previous",37,bc,b0,23))) {
HXLINE(2769)					_hx_tmp2 = (name1 == HX_("prev",f3,be,5e,4a));
            				}
            				else {
HXLINE(2769)					_hx_tmp2 = true;
            				}
HXDLIN(2769)				if (_hx_tmp2) {
HXLINE(2771)					Float X = ::flixel::addons::ui::U_obj::xml_f(val2->x,HX_("x",78,00,00,00),null());
HXDLIN(2771)					Float Y = ::flixel::addons::ui::U_obj::xml_f(val2->x,HX_("y",79,00,00,00),null());
HXDLIN(2771)					HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(2771)					point->_inPool = false;
HXDLIN(2771)					prevOffset = point;
            				}
            				else {
HXLINE(2773)					if ((name1 == HX_("next",f3,84,02,49))) {
HXLINE(2775)						Float X1 = ::flixel::addons::ui::U_obj::xml_f(val2->x,HX_("x",78,00,00,00),null());
HXDLIN(2775)						Float Y1 = ::flixel::addons::ui::U_obj::xml_f(val2->x,HX_("y",79,00,00,00),null());
HXDLIN(2775)						HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN(2775)						point1->_inPool = false;
HXDLIN(2775)						nextOffset = point1;
            					}
            				}
            			}
            		}
HXLINE(2780)		frg =  ::flixel::addons::ui::FlxUIRadioGroup_obj::__alloc( HX_CTX ,(int)0,(int)0,names,labels,null(),y_space,W,H,labelW,null(),prevOffset,nextOffset,null(),null());
HXLINE(2781)		frg->set_params(params1);
HXLINE(2783)		bool _hx_tmp3;
HXDLIN(2783)		if (hx::IsNotEq( radio_asset,HX_("",00,00,00,00) )) {
HXLINE(2783)			_hx_tmp3 = hx::IsNotNull( radio_asset );
            		}
            		else {
HXLINE(2783)			_hx_tmp3 = false;
            		}
HXDLIN(2783)		if (_hx_tmp3) {
HXLINE(2785)			frg->loadGraphics(radio_asset,dot_asset);
            		}
HXLINE(2788)		HX_VARI( int,text_x) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("text_x",26,65,88,d8),null()));
HXLINE(2789)		HX_VARI( int,text_y) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("text_y",27,65,88,d8),null()));
HXLINE(2791)		HX_VARI( ::Array< ::Dynamic>,radios) = frg->getRadios();
HXLINE(2793)		HX_VARI( bool,styleSet) = false;
HXLINE(2795)		HX_VARI(  ::Dynamic,radioList) = data->x->elementsNamed(HX_("radio",fb,10,18,e4));
HXLINE(2796)		HX_VARI(  ::Xml,radioNode) = null();
HXLINE(2798)		{
HXLINE(2798)			HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN(2798)			HX_VARI_NAME( int,_g2,"_g") = radios->length;
HXDLIN(2798)			while((_g11 < _g2)){
HXLINE(2798)				_g11 = (_g11 + (int)1);
HXLINE(2800)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,fo) = radios->__get(((radios->length - (int)1) - (_g11 - (int)1))).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXLINE(2801)				if (( (bool)(radioList->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )) {
HXLINE(2801)					radioNode = ( ( ::Xml)(radioList->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
            				}
            				else {
HXLINE(2801)					radioNode = null();
            				}
HXLINE(2802)				if (hx::IsNotNull( fo )) {
HXLINE(2804)					if (::Std_obj::is(fo,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(2806)						HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,fc) = fo;
HXLINE(2807)						HX_VARI(  ::flixel::text::FlxText,t) = this->formatButtonText(data,fc);
HXLINE(2808)						bool _hx_tmp4;
HXDLIN(2808)						if (hx::IsNotNull( t )) {
HXLINE(2808)							_hx_tmp4 = (styleSet == false);
            						}
            						else {
HXLINE(2808)							_hx_tmp4 = false;
            						}
HXDLIN(2808)						if (_hx_tmp4) {
HXLINE(2810)							HX_VARI(  ::flixel::addons::ui::FontDef,fd) = ::flixel::addons::ui::FontDef_obj::copyFromFlxText(t);
HXLINE(2812)							frg->set_activeStyle( ::flixel::addons::ui::CheckStyle_obj::__alloc( HX_CTX ,(int)16777215,fd,::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(t->_defaultFormat->align),t->color, ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,t->borderStyle,t->borderColor,t->borderSize,t->borderQuality)));
HXLINE(2813)							styleSet = true;
            						}
HXLINE(2815)						fc->set_textX(text_x);
HXLINE(2816)						fc->set_textY(text_y);
HXLINE(2818)						if (hx::IsNotNull( radioNode )) {
HXLINE(2820)							this->_loadTooltip(fc, ::haxe::xml::Fast_obj::__alloc( HX_CTX ,radioNode));
            						}
            					}
            				}
            			}
            		}
HXLINE(2826)		if ((scrollW != (int)0)) {
HXLINE(2828)			frg->fixedSize = true;
HXLINE(2829)			frg->set_width(scrollW);
            		}
HXLINE(2831)		if ((scrollH != (int)0)) {
HXLINE(2833)			frg->fixedSize = true;
HXLINE(2834)			frg->set_height(scrollH);
            		}
HXLINE(2837)		return frg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRadioGroup,return )

 ::flixel::addons::ui::FlxUICheckBox FlxUI_obj::_loadCheckBox( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2841__loadCheckBox)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(2843)		HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,fc) = null();
HXLINE(2845)		HX_VARI( ::String,label) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2846)		HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2847)		HX_VARI( ::String,code) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2849)		HX_VARI( bool,checked) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("checked",27,b3,24,13),false);
HXLINE(2851)		label = this->getText(label,context,true,code);
HXLINE(2853)		HX_VARI( int,labelW) = this->_loadWidth(data,(int)100,HX_("label_width",3b,fa,b5,dc),null());
HXLINE(2855)		HX_VARI( ::String,check_src) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("check_src",ad,88,29,a8),true,null());
HXLINE(2856)		HX_VARI( ::String,box_src) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("box_src",70,0b,0d,a4),true,null());
HXLINE(2858)		::flixel::addons::ui::U_obj::xml_str(data->x,HX_("slice9",a7,03,04,70),true,null());
HXLINE(2860)		HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(2860)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(2860)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2860)			{
HXLINE(2860)				HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(2860)				while(hx::IsNotNull( _g_head )){
HXLINE(2860)					HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(2860)					_g_head = _g_head->next;
HXDLIN(2860)					bool _hx_tmp;
HXDLIN(2860)					if (val->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(2860)						_hx_tmp = val->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(2860)						_hx_tmp = false;
            					}
HXDLIN(2860)					if (_hx_tmp) {
HXLINE(2860)						HX_VARI( ::String,type) = val->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(2860)						type = type.toLowerCase();
HXDLIN(2860)						HX_VARI( ::String,valueStr) = val->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(2860)						HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(2860)						HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(2860)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2860)							HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(2860)							str = str.toLowerCase();
HXDLIN(2860)							bool _hx_tmp1;
HXDLIN(2860)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2860)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(2860)								_hx_tmp1 = true;
            							}
HXDLIN(2860)							if (_hx_tmp1) {
HXLINE(2860)								value = true;
            							}
            							else {
HXLINE(2860)								value = false;
            							}
HXDLIN(2860)							goto _hx_goto_164;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2860)							HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2860)							if (hx::IsNull( return_val )) {
HXLINE(2860)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(2860)							value = return_val;
HXDLIN(2860)							goto _hx_goto_164;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2860)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2860)							goto _hx_goto_164;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2860)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(2860)							goto _hx_goto_164;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2860)							value = ::String(valueStr);
HXDLIN(2860)							goto _hx_goto_164;
            						}
            						_hx_goto_164:;
HXDLIN(2860)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(2860)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2860)			{
HXLINE(2860)				HX_VARI( int,_g1) = (int)0;
HXDLIN(2860)				HX_VARI( int,_g) = params->get_length();
HXDLIN(2860)				while((_g1 < _g)){
HXLINE(2860)					_g1 = (_g1 + (int)1);
HXDLIN(2860)					HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(2860)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXLINE(2862)		HX_VARI(  ::Dynamic,box_asset) = null();
HXLINE(2863)		HX_VARI(  ::Dynamic,check_asset) = null();
HXLINE(2871)		if ((box_src != HX_("",00,00,00,00))) {
HXLINE(2874)			box_asset = ::flixel::addons::ui::U_obj::gfx(box_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2876)			if (data->hasNode->resolve(HX_("box",0b,be,4a,00))) {
HXLINE(2879)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("box",0b,be,4a,00))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2882)					box_asset = this->_load9SliceSprite(data->node->resolve(HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(2887)					box_asset = this->_loadSprite(data->node->resolve(HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(2891)		if ((check_src != HX_("",00,00,00,00))) {
HXLINE(2894)			check_asset = ::flixel::addons::ui::U_obj::gfx(check_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(2896)			if (data->hasNode->resolve(HX_("check",c8,98,b6,45))) {
HXLINE(2899)				if ((::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("check",c8,98,b6,45))->x,HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(2902)					check_asset = this->_load9SliceSprite(data->node->resolve(HX_("check",c8,98,b6,45)),null());
            				}
            				else {
HXLINE(2907)					check_asset = this->_loadSprite(data->node->resolve(HX_("check",c8,98,b6,45)));
            				}
            			}
            		}
HXLINE(2911)		fc =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(int)0,(int)0,box_asset,check_asset,label,labelW,params,null());
HXLINE(2912)		this->formatButtonText(data,fc);
HXLINE(2914)		HX_VARI( int,text_x) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("text_x",26,65,88,d8),null()));
HXLINE(2915)		HX_VARI( int,text_y) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("text_y",27,65,88,d8),null()));
HXLINE(2917)		fc->set_textX(text_x);
HXLINE(2918)		fc->set_textY(text_y);
HXLINE(2920)		fc->set_text(label);
HXLINE(2922)		fc->set_checked(checked);
HXLINE(2924)		return fc;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCheckBox,return )

 ::flixel::addons::ui::FlxUIDropDownMenu FlxUI_obj::_loadDropDownMenu( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2929__loadDropDownMenu)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(2953)		HX_VARI(  ::flixel::addons::ui::FlxUIDropDownMenu,fud) = null();
HXLINE(2955)		HX_VARI( ::String,label) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2956)		HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2958)		label = this->getText(label,context,true,::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00)));
HXLINE(2960)		HX_VARI( ::String,back_def) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("back_def",6d,f8,3d,17),true,null());
HXLINE(2961)		HX_VARI( ::String,panel_def) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("panel_def",ca,cb,5d,a4),true,null());
HXLINE(2962)		HX_VARI( ::String,button_def) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("button_def",b8,c1,34,be),true,null());
HXLINE(2963)		HX_VARI( ::String,label_def) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label_def",ba,96,96,65),true,null());
HXLINE(2965)		HX_VARI(  ::flixel::FlxSprite,back_asset) = null();
HXLINE(2966)		HX_VARI(  ::flixel::addons::ui::FlxUI9SliceSprite,panel_asset) = null();
HXLINE(2967)		HX_VARI(  ::flixel::addons::ui::FlxUISpriteButton,button_asset) = null();
HXLINE(2968)		HX_VARI(  ::flixel::addons::ui::FlxUIText,label_asset) = null();
HXLINE(2970)		if ((back_def != HX_("",00,00,00,00))) {
HXLINE(2971)			back_asset = this->_loadSprite(this->getDefinition(back_def,null()));
            		}
HXLINE(2974)		if ((panel_def != HX_("",00,00,00,00))) {
HXLINE(2975)			panel_asset = this->_load9SliceSprite(this->getDefinition(panel_def,null()),null());
            		}
HXLINE(2978)		if ((button_def != HX_("",00,00,00,00))) {
HXLINE(2979)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(2980)				button_asset = ( ( ::flixel::addons::ui::FlxUISpriteButton)(this->_loadButton(this->getDefinition(button_def,null()),false,false,null())) );
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e = _hx_e;
HXLINE(2983)					button_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(2987)		if ((label_def != HX_("",00,00,00,00))) {
HXLINE(2988)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(2989)				label_asset = ( ( ::flixel::addons::ui::FlxUIText)(this->_loadText(this->getDefinition(label_def,null()))) );
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error e1 = _hx_e;
HXLINE(2992)					label_asset = null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(2994)			bool _hx_tmp;
HXDLIN(2994)			if (hx::IsNotNull( label_asset )) {
HXLINE(2994)				_hx_tmp = (label != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(2994)				_hx_tmp = false;
            			}
HXDLIN(2994)			if (_hx_tmp) {
HXLINE(2995)				label_asset->set_text(label);
            			}
            		}
HXLINE(2999)		HX_VARI( ::Array< ::Dynamic>,asset_list) = null();
HXLINE(3000)		HX_VARI( ::Array< ::Dynamic>,data_list) = null();
HXLINE(3002)		if (data->hasNode->resolve(HX_("data",2a,56,63,42))) {
HXLINE(3003)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("data",2a,56,63,42))->h;
HXDLIN(3003)			while(hx::IsNotNull( _g_head )){
HXLINE(3003)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3003)				_g_head = _g_head->next;
HXLINE(3004)				if (hx::IsNull( data_list )) {
HXLINE(3005)					data_list = ::Array_obj< ::Dynamic>::__new();
            				}
HXLINE(3007)				HX_VARI( ::String,namel) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("name",4b,72,ff,48),true,null());
HXLINE(3008)				data_list->push( ::flixel::addons::ui::StrNameLabel_obj::__alloc( HX_CTX ,namel,::flixel::addons::ui::U_obj::xml_str(val->x,HX_("label",f4,0d,af,6f),null(),null())));
            			}
            		}
            		else {
HXLINE(3010)			if (data->hasNode->resolve(HX_("asset",f0,69,39,26))) {
HXLINE(3011)				HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = data->nodes->resolve(HX_("asset",f0,69,39,26))->h;
HXDLIN(3011)				while(hx::IsNotNull( _g_head1 )){
HXLINE(3011)					HX_VARI_NAME(  ::haxe::xml::Fast,val1,"val") = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(3011)					_g_head1 = _g_head1->next;
HXLINE(3012)					if (hx::IsNull( asset_list )) {
HXLINE(3013)						asset_list = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(3015)					HX_VARI( ::String,def_name) = ::flixel::addons::ui::U_obj::xml_str(val1->x,HX_("def",c5,39,4c,00),true,null());
HXLINE(3016)					HX_VARI( ::String,name) = ::flixel::addons::ui::U_obj::xml_name(val1->x);
HXLINE(3017)					HX_VARI(  ::flixel::addons::ui::FlxUIButton,asset) = null();
HXLINE(3019)					try {
            						HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(3020)						asset = ( ( ::flixel::addons::ui::FlxUIButton)(this->_loadButton(this->getDefinition(def_name,null()),false,null(),null())) );
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::openfl::errors::Error e2 = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(3025)					if (hx::IsNotNull( asset )) {
HXLINE(3026)						asset->name = name;
HXLINE(3027)						if (hx::IsNull( asset_list )) {
HXLINE(3028)							asset_list = ::Array_obj< ::Dynamic>::__new();
            						}
HXLINE(3030)						asset_list->push(asset);
            					}
            				}
            			}
            		}
HXLINE(3036)		fud =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,(int)0,(int)0,data_list,null(), ::flixel::addons::ui::FlxUIDropDownHeader_obj::__alloc( HX_CTX ,(int)120,back_asset,label_asset,button_asset),panel_asset,asset_list,null());
HXLINE(3038)		return fud;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadDropDownMenu,return )

bool FlxUI_obj::_loadTest( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3041__loadTest)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(3042)		HX_VARI( bool,result) = true;
HXLINE(3045)		if ((data->get_name() == HX_("load_if",96,33,eb,08))) {
HXLINE(3047)			result = this->_loadTestSub(data);
HXLINE(3048)			if ((result == false)) {
HXLINE(3050)				return false;
            			}
            		}
HXLINE(3055)		if (data->hasNode->resolve(HX_("load_if",96,33,eb,08))) {
HXLINE(3074)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("load_if",96,33,eb,08))->h;
HXDLIN(3074)			while(hx::IsNotNull( _g_head )){
HXLINE(3074)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3074)				_g_head = _g_head->next;
HXLINE(3076)				HX_VARI(  ::Xml,_this) = val->x;
HXDLIN(3076)				bool _hx_tmp;
HXDLIN(3076)				if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(3076)					_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(3076)					_hx_tmp = false;
            				}
HXDLIN(3076)				if (_hx_tmp) {
HXLINE(3076)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + _this->nodeType));
            				}
HXDLIN(3076)				if (hx::IsNull( _this->children->__get((int)0).StaticCast<  ::Xml >() )) {
HXLINE(3078)					result = this->_loadTestSub(val);
HXLINE(3079)					if ((result == false)) {
HXLINE(3081)						return false;
            					}
            				}
            			}
            		}
HXLINE(3086)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTest,return )

bool FlxUI_obj::_loadTestSub( ::haxe::xml::Fast node){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3090__loadTestSub)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
HXLINE(3091)		HX_VARI( bool,matchValue) = ::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("is",ea,5b,00,00),true);
HXLINE(3092)		HX_VARI( bool,match) = matchValue;
HXLINE(3095)		HX_VARI( Float,aspect_ratio) = ::flixel::addons::ui::U_obj::xml_f(node->x,HX_("aspect_ratio",24,04,8d,fd),(int)-1);
HXLINE(3096)		if ((aspect_ratio != (int)-1)) {
HXLINE(3097)			match = true;
HXLINE(3098)			HX_VARI( Float,tolerance) = ::flixel::addons::ui::U_obj::xml_f(node->x,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(3101)			if ((::Math_obj::abs((((Float)hx::TCast< Float >::cast(::flixel::FlxG_obj::width) / (Float)hx::TCast< Float >::cast(::flixel::FlxG_obj::height)) - aspect_ratio)) > tolerance)) {
HXLINE(3102)				match = false;
            			}
HXLINE(3104)			if ((match != matchValue)) {
HXLINE(3105)				return false;
            			}
            		}
HXLINE(3110)		HX_VARI(  ::flixel::math::FlxPoint,resolution) = ::flixel::addons::ui::U_obj::xml_pt(node->x,HX_("resolution",2c,35,49,6d),null());
HXLINE(3111)		if (hx::IsNotNull( resolution )) {
HXLINE(3113)			match = true;
HXLINE(3114)			HX_VARI(  ::flixel::math::FlxPoint,toleranceRes) = ::flixel::addons::ui::U_obj::xml_pt(node->x,HX_("tolerance",0d,3d,7c,33),null());
HXLINE(3115)			if (hx::IsNull( toleranceRes )) {
HXLINE(3115)				toleranceRes =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(int)0,(int)0);
            			}
HXLINE(3118)			bool _hx_tmp;
HXDLIN(3118)			if (!((::Math_obj::abs((resolution->x - ::flixel::FlxG_obj::width)) > toleranceRes->x))) {
HXLINE(3118)				_hx_tmp = (::Math_obj::abs((resolution->y - ::flixel::FlxG_obj::height)) > toleranceRes->y);
            			}
            			else {
HXLINE(3118)				_hx_tmp = true;
            			}
HXDLIN(3118)			if (_hx_tmp) {
HXLINE(3120)				match = false;
            			}
HXLINE(3122)			if ((match != matchValue)) {
HXLINE(3123)				return false;
            			}
            		}
HXLINE(3128)		HX_VARI( ::String,haxeDef) = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("haxedef",5f,a1,7a,08),true,HX_("",00,00,00,00));
HXLINE(3129)		HX_VARI( bool,haxeVal) = ::flixel::addons::ui::U_obj::xml_bool(node->x,HX_("value",71,7f,b8,31),true);
HXLINE(3131)		if ((haxeDef != HX_("",00,00,00,00))) {
HXLINE(3132)			match = true;
HXLINE(3134)			match = (::flixel::addons::ui::U_obj::checkHaxedef(haxeDef) == haxeVal);
HXLINE(3135)			if ((match != matchValue)) {
HXLINE(3136)				return false;
            			}
            		}
HXLINE(3141)		HX_VARI( ::String,variable) = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("variable",3c,12,0d,69),false,HX_("",00,00,00,00));
HXLINE(3142)		HX_VARI( ::String,variableType) = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("type",ba,f2,08,4d),true,HX_("string",d1,28,30,11));
HXLINE(3143)		if ((variable != HX_("",00,00,00,00))) {
HXLINE(3145)			match = true;
HXLINE(3146)			HX_VARI(  ::Dynamic,varData) = this->parseVarValue(variable);
HXLINE(3147)			if (hx::IsNotNull( varData )) {
HXLINE(3149)				match = this->checkVariable(( (::String)(varData->__Field(HX_("variable",3c,12,0d,69),hx::paccDynamic)) ),( (::String)(varData->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ),variableType,( (::String)(varData->__Field(HX_("operator",a4,1b,73,44),hx::paccDynamic)) ),null());
            			}
HXLINE(3151)			if ((match != matchValue)) {
HXLINE(3152)				return false;
            			}
            		}
HXLINE(3155)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTestSub,return )

 ::Dynamic FlxUI_obj::parseVarValue(::String varString){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3158_parseVarValue)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(varString,"varString")
HXLINE(3159)		HX_VARI( ::Array< ::String >,arr) = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_175,8);
HXLINE(3160)		HX_VAR( ::Array< ::String >,temp);
HXLINE(3161)		{
HXLINE(3161)			HX_VARI( int,_g) = (int)0;
HXDLIN(3161)			while((_g < arr->length)){
HXLINE(3161)				HX_VARI( ::String,op) = arr->__get(_g);
HXDLIN(3161)				_g = (_g + (int)1);
HXLINE(3163)				if ((varString.indexOf(op,null()) != (int)-1)) {
HXLINE(3165)					temp = varString.split(op);
HXLINE(3166)					bool _hx_tmp;
HXDLIN(3166)					if (hx::IsNotNull( temp )) {
HXLINE(3166)						_hx_tmp = (temp->length == (int)2);
            					}
            					else {
HXLINE(3166)						_hx_tmp = false;
            					}
HXDLIN(3166)					if (_hx_tmp) {
HXLINE(3168)						return  ::Dynamic(hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("value",71,7f,b8,31),temp->__get((int)1))
            							->setFixed(1,HX_("operator",a4,1b,73,44),op)
            							->setFixed(2,HX_("variable",3c,12,0d,69),temp->__get((int)0)));
            					}
            				}
            			}
            		}
HXLINE(3172)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,parseVarValue,return )

 ::flixel::addons::ui::FlxUI FlxUI_obj::_loadLayout( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3176__loadLayout)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(3177)		HX_VARI( ::String,name) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("name",4b,72,ff,48),true,null());
HXLINE(3178)		HX_VARI( Float,X) = this->_loadWidth(data,(int)0,HX_("x",78,00,00,00),null());
HXLINE(3179)		HX_VARI( Float,Y) = this->_loadHeight(data,(int)0,HX_("y",79,00,00,00),null());
HXLINE(3180)		HX_VARI(  ::flixel::addons::ui::FlxUI,_ui) = this->createUI(data);
HXLINE(3181)		_ui->set_x(X);
HXLINE(3182)		_ui->set_y(Y);
HXLINE(3183)		_ui->name = name;
HXLINE(3184)		return _ui;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLayout,return )

void FlxUI_obj::addToCleanup(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3188_addToCleanup)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(str,"str")
HXLINE(3189)		if (hx::IsNull( this->_assetsToCleanUp )) {
HXLINE(3189)			return;
            		}
HXLINE(3190)		if ((this->_assetsToCleanUp->indexOf(str,null()) == (int)-1)) {
HXLINE(3192)			this->_assetsToCleanUp->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToCleanup,(void))

void FlxUI_obj::addToScaledAssets(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3198_addToScaledAssets)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(str,"str")
HXLINE(3198)		bool _hx_tmp;
HXDLIN(3198)		if (hx::IsNotNull( this->_scaledAssets )) {
HXLINE(3198)			_hx_tmp = (this->_scaledAssets->indexOf(str,null()) == (int)-1);
            		}
            		else {
HXLINE(3198)			_hx_tmp = false;
            		}
HXDLIN(3198)		if (_hx_tmp) {
HXLINE(3200)			this->_scaledAssets->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToScaledAssets,(void))

void FlxUI_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3205_cleanup)
            	HX_STACK_THIS(this)
HXLINE(3206)		{
HXLINE(3206)			HX_VARI( int,_g) = (int)0;
HXDLIN(3206)			HX_VARI( ::Array< ::String >,_g1) = this->_assetsToCleanUp;
HXDLIN(3206)			while((_g < _g1->length)){
HXLINE(3206)				HX_VARI( ::String,key) = _g1->__get(_g);
HXDLIN(3206)				_g = (_g + (int)1);
HXLINE(3208)				::flixel::FlxG_obj::bitmap->removeByKey(key);
            			}
            		}
HXLINE(3210)		this->_assetsToCleanUp = null();
HXLINE(3211)		this->_scaledAssets = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,cleanup,(void))

 ::flixel::addons::ui::FlxUI FlxUI_obj::createUI( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3216_createUI)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(3216)		return  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,data,hx::ObjectPtr<OBJ_>(this),hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,this->liveFilePath,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,createUI,return )

 ::flixel::addons::ui::FlxUITabMenu FlxUI_obj::_loadTabMenu( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3219__loadTabMenu)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(3222)		HX_VARI(  ::haxe::xml::Fast,back_def) = this->getDefinition(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("back_def",6d,f8,3d,17),null(),null()),null());
HXLINE(3223)		if (hx::IsNull( back_def )) {
HXLINE(3224)			back_def = data;
            		}
HXLINE(3226)		back_def = ::flixel::addons::ui::FlxUI_obj::consolidateData(back_def,data,null());
HXLINE(3230)		HX_VAR(  ::flixel::FlxSprite,backSprite);
HXDLIN(3230)		::String _hx_switch_0 = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("back_type",12,07,9e,49),true,HX_("chrome",7a,f9,af,c2));
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(3230)			backSprite =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(3230)			goto _hx_goto_182;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(3230)			backSprite = this->_loadSprite(back_def);
HXDLIN(3230)			goto _hx_goto_182;
            		}
            		/* default */{
HXLINE(3230)			backSprite = this->_load9SliceSprite(back_def,HX_("tab_menu",09,73,e1,d6));
            		}
            		_hx_goto_182:;
HXLINE(3237)		HX_VARI(  ::haxe::xml::Fast,tab_def) = null();
HXLINE(3239)		HX_VARI( bool,stretch_tabs) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("stretch_tabs",38,9c,fc,5c),false);
HXLINE(3241)		HX_VARI( ::String,stackToggled) = HX_("front",a9,18,8e,06);
HXLINE(3242)		HX_VARI( ::String,stackUntoggled) = HX_("back",27,da,10,41);
HXLINE(3244)		if (data->hasNode->resolve(HX_("stacking",9a,62,b6,99))) {
HXLINE(3245)			stackToggled = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("stacking",9a,62,b6,99))->x,HX_("toggled",50,e2,03,cc),true,HX_("front",a9,18,8e,06));
HXLINE(3246)			stackUntoggled = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("stacking",9a,62,b6,99))->x,HX_("untoggled",17,e9,05,c8),true,HX_("back",27,da,10,41));
            		}
HXLINE(3250)		HX_VARI(  ::Dynamic,tab_spacing) = null();
HXLINE(3251)		if ((::flixel::addons::ui::U_obj::xml_str(data->x,HX_("spacing",83,33,bb,91),true,HX_("",00,00,00,00)) != HX_("",00,00,00,00))) {
HXLINE(3252)			tab_spacing = this->_loadWidth(data,(int)0,HX_("spacing",83,33,bb,91),null());
            		}
HXLINE(3256)		HX_VARI( Float,tab_x) = this->_loadWidth(data,(int)0,HX_("tab_x",ce,ac,e3,0a),null());
HXLINE(3257)		HX_VARI( Float,tab_y) = this->_loadHeight(data,(int)0,HX_("tab_y",cf,ac,e3,0a),null());
HXLINE(3258)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(tab_x,tab_y);
HXDLIN(3258)		point->_inPool = false;
HXLINE(3260)		HX_VARI( ::String,tab_def_str) = HX_("",00,00,00,00);
HXLINE(3262)		if (data->hasNode->resolve(HX_("tab",55,5a,58,00))) {
HXLINE(3263)			{
HXLINE(3263)				HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("tab",55,5a,58,00))->h;
HXDLIN(3263)				while(hx::IsNotNull( _g_head )){
HXLINE(3263)					HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3263)					_g_head = _g_head->next;
HXLINE(3264)					HX_VARI( ::String,temp) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("use_def",8d,da,e9,62),null(),null());
HXLINE(3265)					if ((temp != HX_("",00,00,00,00))) {
HXLINE(3266)						tab_def_str = temp;
            					}
            				}
            			}
HXLINE(3269)			if ((tab_def_str != HX_("",00,00,00,00))) {
HXLINE(3270)				tab_def = this->getDefinition(tab_def_str,null());
            			}
            			else {
HXLINE(3272)				tab_def = data->node->resolve(HX_("tab",55,5a,58,00));
            			}
            		}
HXLINE(3276)		HX_VARI( ::Array< ::Dynamic>,list_tabs) = ::Array_obj< ::Dynamic>::__new();
HXLINE(3278)		HX_VARI( ::String,name) = HX_("",00,00,00,00);
HXLINE(3280)		if (data->hasNode->resolve(HX_("tab",55,5a,58,00))) {
HXLINE(3281)			HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = data->nodes->resolve(HX_("tab",55,5a,58,00))->h;
HXDLIN(3281)			while(hx::IsNotNull( _g_head1 )){
HXLINE(3281)				HX_VARI_NAME(  ::haxe::xml::Fast,val1,"val") = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(3281)				_g_head1 = _g_head1->next;
HXLINE(3282)				name = ::flixel::addons::ui::U_obj::xml_name(val1->x);
HXLINE(3284)				if ((name != HX_("",00,00,00,00))) {
HXLINE(3285)					HX_VARI( ::String,label) = ::flixel::addons::ui::U_obj::xml_str(val1->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3286)					HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(val1->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3287)					HX_VARI( ::String,code) = ::flixel::addons::ui::U_obj::xml_str(val1->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3288)					label = this->getText(label,context,true,code);
HXLINE(3290)					label = this->getText(label,context,true,code);
HXLINE(3292)					HX_VARI(  ::haxe::xml::Fast,tab_info) = ::flixel::addons::ui::FlxUI_obj::consolidateData(val1,tab_def,null());
HXLINE(3293)					HX_VARI( ::Dynamic,tab) = this->_loadButton(tab_info,true,true,HX_("tab_menu",09,73,e1,d6));
HXLINE(3294)					tab->__SetField(HX_("name",4b,72,ff,48),name,hx::paccDynamic);
HXLINE(3295)					list_tabs->push(tab);
HXLINE(3296)					this->_loadTooltip(tab,tab_info);
            				}
            			}
            		}
HXLINE(3301)		if ((list_tabs->length > (int)0)) {
HXLINE(3302)			bool _hx_tmp;
HXDLIN(3302)			if (hx::IsNotNull( tab_def )) {
HXLINE(3302)				_hx_tmp = !(tab_def->hasNode->resolve(HX_("text",ad,cc,f9,4c)));
            			}
            			else {
HXLINE(3302)				_hx_tmp = true;
            			}
HXDLIN(3302)			if (_hx_tmp) {
HXLINE(3303)				HX_VARI( int,_g) = (int)0;
HXDLIN(3303)				while((_g < list_tabs->length)){
HXLINE(3303)					HX_VARI( ::Dynamic,t) = list_tabs->__get(_g);
HXDLIN(3303)					_g = (_g + (int)1);
HXLINE(3304)					if (::Std_obj::is(t,hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(3306)						HX_VARI(  ::flixel::addons::ui::FlxUITypedButton,tb) = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE(3307)						( ( ::flixel::FlxSprite)(tb->label) )->set_color((int)16777215);
HXLINE(3308)						if (::Std_obj::is(tb->label,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(3310)							HX_VARI(  ::flixel::addons::ui::FlxUIText,labelText) = ( ( ::flixel::addons::ui::FlxUIText)(tb->label) );
HXLINE(3311)							{
HXLINE(3311)								labelText->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(3311)								labelText->set_borderColor((int)0);
HXDLIN(3311)								labelText->set_borderSize((int)1);
HXDLIN(3311)								labelText->set_borderQuality((int)1);
            							}
            						}
            					}
            				}
            			}
HXLINE(3317)			bool _hx_tmp1;
HXDLIN(3317)			if (hx::IsNotNull( tab_def )) {
HXLINE(3317)				_hx_tmp1 = !(tab_def->has->resolve(HX_("width",06,b6,62,ca)));
            			}
            			else {
HXLINE(3317)				_hx_tmp1 = true;
            			}
HXDLIN(3317)			if (_hx_tmp1) {
HXLINE(3318)				stretch_tabs = true;
            			}
            		}
HXLINE(3325)		HX_VARI(  ::flixel::addons::ui::FlxUITabMenu,fg) =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,backSprite,list_tabs,null(),point,stretch_tabs,tab_spacing,::Array_obj< ::String >::__new(2)->init(0,stackToggled)->init(1,stackUntoggled));
HXLINE(3327)		if (data->hasNode->resolve(HX_("group",3f,b3,f4,99))) {
HXLINE(3328)			HX_VARI_NAME(  ::_List::ListNode,_g_head2,"_g_head") = data->nodes->resolve(HX_("group",3f,b3,f4,99))->h;
HXDLIN(3328)			while(hx::IsNotNull( _g_head2 )){
HXLINE(3328)				HX_VARI_NAME(  ::haxe::xml::Fast,val2,"val") = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(3328)				_g_head2 = _g_head2->next;
HXLINE(3329)				name = ::flixel::addons::ui::U_obj::xml_name(val2->x);
HXLINE(3330)				HX_VARI(  ::flixel::addons::ui::FlxUI,_ui) =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,val2,fg,hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,null(),null());
HXLINE(3331)				bool _hx_tmp2;
HXDLIN(3331)				if (hx::IsNotNull( list_tabs )) {
HXLINE(3331)					_hx_tmp2 = (list_tabs->length > (int)0);
            				}
            				else {
HXLINE(3331)					_hx_tmp2 = false;
            				}
HXDLIN(3331)				if (_hx_tmp2) {
HXLINE(3332)					HX_VARI_NAME( Float,_g1,"_g") = _ui->y;
HXDLIN(3332)					_ui->set_y((_g1 + ( (Float)(list_tabs->__get((int)0)->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )));
            				}
HXLINE(3334)				_ui->name = name;
HXLINE(3335)				fg->addGroup(_ui);
            			}
            		}
HXLINE(3341)		return fg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTabMenu,return )

::Dynamic FlxUI_obj::_loadNumericStepper( ::haxe::xml::Fast data,hx::Null< bool >  __o_setCallback){
bool setCallback = __o_setCallback.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3344__loadNumericStepper)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(setCallback,"setCallback")
HXLINE(3356)		HX_VARI( Float,stepSize) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("step",4c,e7,5b,4c),(int)1);
HXLINE(3357)		HX_VARI( Float,defaultValue) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("value",71,7f,b8,31),(int)0);
HXLINE(3358)		HX_VARI( Float,min) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("min",92,11,53,00),(int)0);
HXLINE(3359)		HX_VARI( Float,max) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("max",a4,0a,53,00),(int)10);
HXLINE(3360)		HX_VARI( int,decimals) = ::flixel::addons::ui::U_obj::xml_i(data->x,HX_("decimals",c2,4a,6a,12),(int)0);
HXLINE(3361)		HX_VARI( bool,percent) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("percent",c5,aa,da,78),null());
HXLINE(3362)		HX_VARI( ::String,stack) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("stack",48,67,0b,84),true,HX_("",00,00,00,00));
HXLINE(3363)		if ((stack == HX_("",00,00,00,00))) {
HXLINE(3364)			stack = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("stacking",9a,62,b6,99),true,HX_("",00,00,00,00));
            		}
HXLINE(3366)		stack = stack.toLowerCase();
HXLINE(3367)		HX_VAR( int,stacking);
HXLINE(3369)		::String _hx_switch_0 = stack;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(3371)			stacking = (int)1;
HXDLIN(3371)			goto _hx_goto_188;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3373)			stacking = (int)0;
HXDLIN(3373)			goto _hx_goto_188;
            		}
            		/* default */{
HXLINE(3375)			stacking = (int)1;
            		}
            		_hx_goto_188:;
HXLINE(3378)		HX_VARI(  ::flixel::text::FlxText,theText) = null();
HXLINE(3379)		HX_VARI(  ::flixel::addons::ui::FlxUITypedButton,buttPlus) = null();
HXLINE(3380)		HX_VARI(  ::flixel::addons::ui::FlxUITypedButton,buttMinus) = null();
HXLINE(3383)		if (data->hasNode->resolve(HX_("text",ad,cc,f9,4c))) {
HXLINE(3384)			theText = ( ( ::flixel::text::FlxText)(this->_loadThing(HX_("text",ad,cc,f9,4c),data->node->resolve(HX_("text",ad,cc,f9,4c)))) );
            		}
HXLINE(3386)		if (data->hasNode->resolve(HX_("plus",5a,3f,5a,4a))) {
HXLINE(3387)			buttPlus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),data->node->resolve(HX_("plus",5a,3f,5a,4a)))) );
            		}
HXLINE(3389)		if (data->hasNode->resolve(HX_("minus",70,80,68,08))) {
HXLINE(3390)			buttMinus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),data->node->resolve(HX_("minus",70,80,68,08)))) );
            		}
HXLINE(3393)		HX_VARI(  ::flixel::addons::ui::FlxUINumericStepper,ns) =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,(int)0,(int)0,stepSize,defaultValue,min,max,decimals,stacking,theText,buttPlus,buttMinus,percent);
HXLINE(3395)		if (setCallback) {
HXLINE(3396)			HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(3396)			if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(3396)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3396)				{
HXLINE(3396)					HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(3396)					while(hx::IsNotNull( _g_head )){
HXLINE(3396)						HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3396)						_g_head = _g_head->next;
HXDLIN(3396)						bool _hx_tmp;
HXDLIN(3396)						if (val->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(3396)							_hx_tmp = val->has->resolve(HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(3396)							_hx_tmp = false;
            						}
HXDLIN(3396)						if (_hx_tmp) {
HXLINE(3396)							HX_VARI( ::String,type) = val->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(3396)							type = type.toLowerCase();
HXDLIN(3396)							HX_VARI( ::String,valueStr) = val->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(3396)							HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(3396)							HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(3396)							::String _hx_switch_1 = type;
            							if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3396)								HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(3396)								str = str.toLowerCase();
HXDLIN(3396)								bool _hx_tmp1;
HXDLIN(3396)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3396)									_hx_tmp1 = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(3396)									_hx_tmp1 = true;
            								}
HXDLIN(3396)								if (_hx_tmp1) {
HXLINE(3396)									value = true;
            								}
            								else {
HXLINE(3396)									value = false;
            								}
HXDLIN(3396)								goto _hx_goto_190;
            							}
            							if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(3396)								HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3396)								if (hx::IsNull( return_val )) {
HXLINE(3396)									HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            								}
HXDLIN(3396)								value = return_val;
HXDLIN(3396)								goto _hx_goto_190;
            							}
            							if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(3396)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3396)								goto _hx_goto_190;
            							}
            							if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(3396)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(3396)								goto _hx_goto_190;
            							}
            							if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(3396)								value = ::String(valueStr);
HXDLIN(3396)								goto _hx_goto_190;
            							}
            							_hx_goto_190:;
HXDLIN(3396)							params->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(3396)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3396)				{
HXLINE(3396)					HX_VARI( int,_g1) = (int)0;
HXDLIN(3396)					HX_VARI( int,_g) = params->get_length();
HXDLIN(3396)					while((_g1 < _g)){
HXLINE(3396)						_g1 = (_g1 + (int)1);
HXDLIN(3396)						HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(3396)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            					}
            				}
            			}
HXLINE(3397)			ns->set_params(params);
            		}
HXLINE(3400)		return ns;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadNumericStepper,return )

 ::flixel::math::FlxPoint FlxUI_obj::getResizeRatio( ::haxe::xml::Fast data,hx::Null< int >  __o_defaultAxis){
int defaultAxis = __o_defaultAxis.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3404_getResizeRatio)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(defaultAxis,"defaultAxis")
HXLINE(3405)		HX_VARI( ::String,str) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("resize_ratio_x",79,e8,30,0e),true,null());
HXLINE(3406)		if ((str == HX_("",00,00,00,00))) {
HXLINE(3408)			str = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("resize_ratio_y",7a,e8,30,0e),true,null());
HXLINE(3409)			if ((str == HX_("",00,00,00,00))) {
HXLINE(3413)				return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,::flixel::addons::ui::U_obj::xml_f(data->x,HX_("resize_ratio",40,c5,84,8f),(int)-1),defaultAxis);
            			}
            			else {
HXLINE(3418)				return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),(int)1);
            			}
            		}
            		else {
HXLINE(3424)			return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),(int)0);
            		}
HXLINE(3406)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getResizeRatio,return )

::Dynamic FlxUI_obj::_loadButton( ::haxe::xml::Fast data,hx::Null< bool >  __o_setCallback,hx::Null< bool >  __o_isToggle,::String __o_load_code){
bool setCallback = __o_setCallback.Default(true);
bool isToggle = __o_isToggle.Default(false);
::String load_code = __o_load_code.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3433__loadButton)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(setCallback,"setCallback")
            	HX_STACK_ARG(isToggle,"isToggle")
            	HX_STACK_ARG(load_code,"load_code")
HXLINE(3435)		HX_VARI( ::Dynamic,fb) = null();
HXLINE(3437)		HX_VARI( Float,resize_ratio) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("resize_ratio",40,c5,84,8f),(int)-1);
HXLINE(3438)		HX_VARI(  ::flixel::math::FlxPoint,resize_point) = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3439)		HX_VARI( bool,resize_label) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("resize_label",29,9e,0f,1b),false);
HXLINE(3441)		HX_VARI( ::String,label) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3443)		HX_VARI(  ::flixel::addons::ui::FlxUISprite,sprite) = null();
HXLINE(3444)		HX_VARI(  ::flixel::addons::ui::FlxUISprite,toggleSprite) = null();
HXLINE(3445)		if (data->hasNode->resolve(HX_("sprite",05,dc,95,c3))) {
HXLINE(3447)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("sprite",05,dc,95,c3))->h;
HXDLIN(3447)			while(hx::IsNotNull( _g_head )){
HXLINE(3447)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(3447)				_g_head = _g_head->next;
HXLINE(3449)				HX_VAR( bool,forToggle);
HXDLIN(3449)				if (isToggle) {
HXLINE(3449)					forToggle = ::flixel::addons::ui::U_obj::xml_bool(val->x,HX_("toggle",94,bf,43,8f),null());
            				}
            				else {
HXLINE(3449)					forToggle = false;
            				}
HXLINE(3450)				if (forToggle) {
HXLINE(3452)					toggleSprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),val)) );
            				}
            				else {
HXLINE(3456)					sprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),val)) );
            				}
            			}
            		}
HXLINE(3461)		HX_VARI( ::String,context) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3464)		label = this->getText(label,context,true,::flixel::addons::ui::U_obj::xml_str(data->x,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00)));
HXLINE(3466)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("width",06,b6,62,ca),null()));
HXLINE(3467)		HX_VARI( int,H) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("height",e7,07,4c,02),null()));
HXLINE(3469)		HX_VARI( ::cpp::VirtualArray,params) = null();
HXDLIN(3469)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(3469)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3469)			{
HXLINE(3469)				HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(3469)				while(hx::IsNotNull( _g_head1 )){
HXLINE(3469)					HX_VARI_NAME(  ::haxe::xml::Fast,val1,"val") = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(3469)					_g_head1 = _g_head1->next;
HXDLIN(3469)					bool _hx_tmp;
HXDLIN(3469)					if (val1->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(3469)						_hx_tmp = val1->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3469)						_hx_tmp = false;
            					}
HXDLIN(3469)					if (_hx_tmp) {
HXLINE(3469)						HX_VARI( ::String,type) = val1->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN(3469)						type = type.toLowerCase();
HXDLIN(3469)						HX_VARI( ::String,valueStr) = val1->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(3469)						HX_VARI(  ::Dynamic,value) = valueStr;
HXDLIN(3469)						HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val1->x,HX_("sort",5e,27,58,4c),(int)-1);
HXDLIN(3469)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3469)							HX_VARI( ::String,str) = ::String(valueStr);
HXDLIN(3469)							str = str.toLowerCase();
HXDLIN(3469)							bool _hx_tmp1;
HXDLIN(3469)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3469)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3469)								_hx_tmp1 = true;
            							}
HXDLIN(3469)							if (_hx_tmp1) {
HXLINE(3469)								value = true;
            							}
            							else {
HXLINE(3469)								value = false;
            							}
HXDLIN(3469)							goto _hx_goto_196;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3469)							HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3469)							if (hx::IsNull( return_val )) {
HXLINE(3469)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(3469)							value = return_val;
HXDLIN(3469)							goto _hx_goto_196;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3469)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3469)							goto _hx_goto_196;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3469)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3469)							goto _hx_goto_196;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3469)							value = ::String(valueStr);
HXDLIN(3469)							goto _hx_goto_196;
            						}
            						_hx_goto_196:;
HXDLIN(3469)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3469)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3469)			{
HXLINE(3469)				HX_VARI( int,_g1) = (int)0;
HXDLIN(3469)				HX_VARI( int,_g) = params->get_length();
HXDLIN(3469)				while((_g1 < _g)){
HXLINE(3469)					_g1 = (_g1 + (int)1);
HXDLIN(3469)					HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(3469)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXLINE(3471)		if (hx::IsNull( sprite )) {
HXLINE(3474)			fb =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,(int)0,(int)0,label,null(),(data->hasNode->resolve(HX_("graphic",a8,5a,07,74)) == false),null());
HXLINE(3476)			( ( ::flixel::addons::ui::FlxUIButton)(fb) )->_autoCleanup = false;
            		}
            		else {
HXLINE(3480)			HX_VARI(  ::flixel::group::FlxTypedSpriteGroup,tempGroup) = null();
HXLINE(3481)			if ((label != HX_("",00,00,00,00))) {
HXLINE(3485)				HX_VARI(  ::flixel::addons::ui::FlxUIText,labelTxt) =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)80,label,(int)8,null());
HXLINE(3487)				labelTxt->setFormat(null(),(int)8,(int)3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(3489)				tempGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3491)				tempGroup->add(sprite).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3492)				tempGroup->add(labelTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3494)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,(int)0,(int)0,tempGroup,null());
            			}
            			else {
HXLINE(3498)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,(int)0,(int)0,sprite,null());
            			}
            		}
HXLINE(3501)		fb->__SetField(HX_("resize_ratio",40,c5,84,8f),resize_ratio,hx::paccDynamic);
HXLINE(3502)		fb->__SetField(HX_("resize_point",85,44,f0,71),resize_point,hx::paccDynamic);
HXLINE(3503)		fb->__SetField(HX_("autoResizeLabel",31,30,ad,1c),resize_label,hx::paccDynamic);
HXLINE(3505)		if (setCallback) {
HXLINE(3507)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(fb,params);
            		}
HXLINE(3512)		if (data->hasNode->resolve(HX_("graphic",a8,5a,07,74))) {
HXLINE(3516)			if (::flixel::addons::ui::U_obj::xml_bool(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("blank",54,df,f1,b4),null())) {
HXLINE(3522)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00)),W,H,null(),(int)0,resize_ratio,null(),null(),null(),null());
            			}
            			else {
HXLINE(3527)				HX_VARI( ::cpp::VirtualArray,graphic_names) = null();
HXLINE(3528)				HX_VARI( ::Array< ::Dynamic>,slice9_names) = null();
HXLINE(3529)				HX_VARI( ::Array< int >,frames) = null();
HXLINE(3531)				if (isToggle) {
HXLINE(3532)					graphic_names = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00))->init(3,HX_("",00,00,00,00))->init(4,HX_("",00,00,00,00))->init(5,HX_("",00,00,00,00));
HXLINE(3533)					slice9_names = ::Array_obj< ::Dynamic>::__new(6)->init(0,null())->init(1,null())->init(2,null())->init(3,null())->init(4,null())->init(5,null());
            				}
            				else {
HXLINE(3535)					graphic_names = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00));
HXLINE(3536)					slice9_names = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
            				}
HXLINE(3540)				HX_VARI( int,src_w) = ::flixel::addons::ui::U_obj::xml_i(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("src_w",1c,7b,ba,82),(int)0);
HXLINE(3541)				HX_VARI( int,src_h) = ::flixel::addons::ui::U_obj::xml_i(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("src_h",0d,7b,ba,82),(int)0);
HXLINE(3542)				HX_VARI( int,tile) = (int)0;
HXDLIN(3542)				::String _hx_switch_1 = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3542)					tile = (int)16;
HXDLIN(3542)					goto _hx_goto_198;
            				}
            				if (  (_hx_switch_1==HX_("v",76,00,00,00)) ||  (_hx_switch_1==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3542)					tile = (int)1;
HXDLIN(3542)					goto _hx_goto_198;
            				}
            				if (  (_hx_switch_1==HX_("all",21,f9,49,00)) ||  (_hx_switch_1==HX_("both",81,88,1b,41)) ||  (_hx_switch_1==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_1==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_1==HX_("vh",32,67,00,00)) ){
HXLINE(3542)					tile = (int)17;
HXDLIN(3542)					goto _hx_goto_198;
            				}
            				_hx_goto_198:;
HXDLIN(3542)				HX_VARI_NAME( int,tile1,"tile") = tile;
HXLINE(3545)				HX_VARI( ::String,frame_str) = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("graphic",a8,5a,07,74))->x,HX_("frames",a6,af,85,ac),true,null());
HXLINE(3546)				if ((frame_str != HX_("",00,00,00,00))) {
HXLINE(3547)					frames = ::Array_obj< int >::__new();
HXLINE(3548)					HX_VARI( ::Array< ::String >,arr) = frame_str.split(HX_(",",2c,00,00,00));
HXLINE(3549)					{
HXLINE(3549)						HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN(3549)						while((_g2 < arr->length)){
HXLINE(3549)							HX_VARI( ::String,numstr) = arr->__get(_g2);
HXDLIN(3549)							_g2 = (_g2 + (int)1);
HXLINE(3550)							frames->push(::Std_obj::parseInt(numstr));
            						}
            					}
            				}
HXLINE(3554)				if (data->hasNode->resolve(HX_("scale_src",6f,c7,bc,37))) {
HXLINE(3556)					HX_VARI( Float,scale_) = this->_loadScale(data->node->resolve(HX_("scale_src",6f,c7,bc,37)),(int)-1,null());
HXLINE(3557)					if ((scale_ == (int)-1)) {
HXLINE(3557)						this->_loadScaleX(data->node->resolve(HX_("scale_src",6f,c7,bc,37)),(int)-1);
            					}
HXLINE(3558)					if ((scale_ == (int)-1)) {
HXLINE(3558)						this->_loadScaleY(data->node->resolve(HX_("scale_src",6f,c7,bc,37)),(int)-1);
            					}
            				}
HXLINE(3561)				{
HXLINE(3561)					HX_VARI_NAME(  ::_List::ListNode,_g_head2,"_g_head") = data->nodes->resolve(HX_("graphic",a8,5a,07,74))->h;
HXDLIN(3561)					while(hx::IsNotNull( _g_head2 )){
HXLINE(3561)						HX_VARI_NAME(  ::haxe::xml::Fast,val2,"val") = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(3561)						_g_head2 = _g_head2->next;
HXLINE(3562)						HX_VARI( ::String,graphic_name) = ::flixel::addons::ui::U_obj::xml_name(val2->x);
HXLINE(3563)						HX_VARI( ::String,image) = ::flixel::addons::ui::U_obj::xml_str(val2->x,HX_("image",5b,1f,69,bd),null(),null());
HXLINE(3564)						HX_VARI( ::Array< int >,slice9) = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(val2->x,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(3565)						HX_VARI_NAME( int,tile2,"tile") = (int)0;
HXDLIN(3565)						::String _hx_switch_2 = ::flixel::addons::ui::U_obj::xml_str(val2->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
            						if (  (_hx_switch_2==HX_("h",68,00,00,00)) ||  (_hx_switch_2==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3565)							tile2 = (int)16;
HXDLIN(3565)							goto _hx_goto_201;
            						}
            						if (  (_hx_switch_2==HX_("v",76,00,00,00)) ||  (_hx_switch_2==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3565)							tile2 = (int)1;
HXDLIN(3565)							goto _hx_goto_201;
            						}
            						if (  (_hx_switch_2==HX_("all",21,f9,49,00)) ||  (_hx_switch_2==HX_("both",81,88,1b,41)) ||  (_hx_switch_2==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_2==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_2==HX_("vh",32,67,00,00)) ){
HXLINE(3565)							tile2 = (int)17;
HXDLIN(3565)							goto _hx_goto_201;
            						}
            						_hx_goto_201:;
HXDLIN(3565)						tile1 = tile2;
HXLINE(3567)						HX_VARI( bool,toggleState) = ::flixel::addons::ui::U_obj::xml_bool(val2->x,HX_("toggle",94,bf,43,8f),null());
HXLINE(3568)						if (toggleState) {
HXLINE(3568)							toggleState = isToggle;
            						}
            						else {
HXLINE(3568)							toggleState = false;
            						}
HXLINE(3570)						HX_VARI( ::String,igfx) = ::flixel::addons::ui::U_obj::gfx(image,null(),null(),null(),null(),null());
HXLINE(3572)						::String _hx_switch_3 = graphic_name;
            						if (  (_hx_switch_3==HX_("all",21,f9,49,00)) ){
HXLINE(3622)							HX_VAR( int,tilesTall);
HXDLIN(3622)							if (isToggle) {
HXLINE(3622)								tilesTall = (int)6;
            							}
            							else {
HXLINE(3622)								tilesTall = (int)3;
            							}
HXLINE(3624)							HX_VARI(  ::openfl::_legacy::display::BitmapData,temp) = null();
HXLINE(3627)							if ((src_h != (int)0)) {
HXLINE(3630)								tilesTall = ::Std_obj::_hx_int(((Float)::flixel::addons::ui::U_obj::getBmp(igfx)->get_height() / (Float)src_h));
            							}
HXLINE(3633)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3634)								graphic_names = ::cpp::VirtualArray_obj::__new(1)->init(0,this->loadScaledSrc(val2,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),(int)1,tilesTall));
            							}
HXLINE(3637)							slice9_names = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->load9SliceSprite_scaleSub(slice9,val2,( (::String)(graphic_names->__get((int)0)) ),HX_("image",5b,1f,69,bd)));
HXLINE(3640)							temp = ::flixel::addons::ui::U_obj::getBmp(graphic_names->__get((int)0));
HXLINE(3641)							src_w = temp->get_width();
HXLINE(3642)							src_h = ::Std_obj::_hx_int(((Float)temp->get_height() / (Float)tilesTall));
HXLINE(3621)							goto _hx_goto_202;
            						}
            						if (  (_hx_switch_3==HX_("active",c6,41,46,16)) ||  (_hx_switch_3==HX_("highlight",34,56,00,ed)) ||  (_hx_switch_3==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_3==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_3==HX_("over",54,91,b8,49)) ){
HXLINE(3590)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3591)								if (!(toggleState)) {
HXLINE(3592)									graphic_names->set((int)1,this->loadScaledSrc(val2,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3594)									graphic_names->set((int)4,this->loadScaledSrc(val2,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3597)							if (!(toggleState)) {
HXLINE(3599)								slice9_names[(int)1] = this->load9SliceSprite_scaleSub(slice9,val2,( (::String)(graphic_names->__get((int)1)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3603)								slice9_names[(int)4] = this->load9SliceSprite_scaleSub(slice9,val2,( (::String)(graphic_names->__get((int)4)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3589)							goto _hx_goto_202;
            						}
            						if (  (_hx_switch_3==HX_("down",62,f8,6d,42)) ||  (_hx_switch_3==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_3==HX_("pushed",b9,14,2d,72)) ){
HXLINE(3606)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3607)								if (!(toggleState)) {
HXLINE(3608)									graphic_names->set((int)2,this->loadScaledSrc(val2,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3610)									graphic_names->set((int)5,this->loadScaledSrc(val2,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3613)							if (!(toggleState)) {
HXLINE(3615)								slice9_names[(int)2] = this->load9SliceSprite_scaleSub(slice9,val2,( (::String)(graphic_names->__get((int)2)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3619)								slice9_names[(int)5] = this->load9SliceSprite_scaleSub(slice9,val2,( (::String)(graphic_names->__get((int)5)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3605)							goto _hx_goto_202;
            						}
            						if (  (_hx_switch_3==HX_("",00,00,00,00)) ||  (_hx_switch_3==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_3==HX_("normal",27,72,69,30)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ){
HXLINE(3574)							if ((image != HX_("",00,00,00,00))) {
HXLINE(3575)								if (!(toggleState)) {
HXLINE(3576)									graphic_names->set((int)0,this->loadScaledSrc(val2,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(3578)									graphic_names->set((int)3,this->loadScaledSrc(val2,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(3581)							if (!(toggleState)) {
HXLINE(3583)								slice9_names[(int)0] = this->load9SliceSprite_scaleSub(slice9,val2,( (::String)(graphic_names->__get((int)0)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(3587)								slice9_names[(int)3] = this->load9SliceSprite_scaleSub(slice9,val2,( (::String)(graphic_names->__get((int)3)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(3573)							goto _hx_goto_202;
            						}
            						_hx_goto_202:;
HXLINE(3645)						if (hx::IsNotEq( graphic_names->__get((int)0),HX_("",00,00,00,00) )) {
HXLINE(3646)							if ((graphic_names->get_length() >= (int)3)) {
HXLINE(3647)								if (hx::IsEq( graphic_names->__get((int)1),HX_("",00,00,00,00) )) {
HXLINE(3648)									graphic_names->set((int)1,graphic_names->__get((int)0));
            								}
HXLINE(3650)								if (hx::IsEq( graphic_names->__get((int)2),HX_("",00,00,00,00) )) {
HXLINE(3651)									graphic_names->set((int)2,graphic_names->__get((int)1));
            								}
HXLINE(3653)								if ((graphic_names->get_length() >= (int)6)) {
HXLINE(3654)									if (hx::IsEq( graphic_names->__get((int)3),HX_("",00,00,00,00) )) {
HXLINE(3655)										graphic_names->set((int)3,graphic_names->__get((int)0));
            									}
HXLINE(3657)									if (hx::IsEq( graphic_names->__get((int)4),HX_("",00,00,00,00) )) {
HXLINE(3658)										graphic_names->set((int)4,graphic_names->__get((int)1));
            									}
HXLINE(3660)									if (hx::IsEq( graphic_names->__get((int)5),HX_("",00,00,00,00) )) {
HXLINE(3661)										graphic_names->set((int)5,graphic_names->__get((int)2));
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(3669)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names,W,H,slice9_names,tile1,resize_ratio,isToggle,src_w,src_h,frames);
            			}
            		}
            		else {
HXLINE(3672)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3674)				HX_VARI_NAME( ::cpp::VirtualArray,graphic_names1,"graphic_names") = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(1,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(2,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(3,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(4,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(5,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04));
HXLINE(3675)				HX_VARI( ::Array< int >,slice9_tab) = ::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07));
HXLINE(3676)				HX_VARI_NAME( ::Array< ::Dynamic>,slice9_names1,"slice9_names") = ::Array_obj< ::Dynamic>::__new(6)->init(0,slice9_tab)->init(1,slice9_tab)->init(2,slice9_tab)->init(3,slice9_tab)->init(4,slice9_tab)->init(5,slice9_tab);
HXLINE(3679)				if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(3681)					( ( ::flixel::addons::ui::FlxUIButton)(fb) )->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,(int)0,resize_ratio,isToggle,null(),null(),null());
            				}
            				else {
HXLINE(3682)					if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(3684)						( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) )->loadGraphicSlice9(graphic_names1,W,H,slice9_names1,(int)0,resize_ratio,isToggle,null(),null(),null());
            					}
            					else {
HXLINE(3686)						::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names1,W,H,slice9_names1,(int)0,resize_ratio,isToggle,null(),null(),null());
            					}
            				}
            			}
            			else {
HXLINE(3690)				if ((W <= (int)0)) {
HXLINE(3690)					W = (int)80;
            				}
HXLINE(3691)				if ((H <= (int)0)) {
HXLINE(3691)					H = (int)20;
            				}
HXLINE(3692)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,null(),W,H,null(),(int)0,resize_ratio,isToggle,null(),null(),null());
            			}
            		}
HXLINE(3698)		if (hx::IsNull( sprite )) {
HXLINE(3700)			bool _hx_tmp2;
HXDLIN(3700)			if (hx::IsNotNull( data )) {
HXLINE(3700)				_hx_tmp2 = data->hasNode->resolve(HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(3700)				_hx_tmp2 = false;
            			}
HXDLIN(3700)			if (_hx_tmp2) {
HXLINE(3701)				this->formatButtonText(data,fb);
            			}
            			else {
HXLINE(3703)				if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3704)					fb->__SetField(HX_("up_color",3f,d5,b5,9b),(int)16777215,hx::paccDynamic);
HXLINE(3705)					fb->__SetField(HX_("down_color",86,26,b3,4e),(int)16777215,hx::paccDynamic);
HXLINE(3706)					fb->__SetField(HX_("over_color",f8,00,4a,f7),(int)16777215,hx::paccDynamic);
HXLINE(3707)					fb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),(int)16777215,hx::paccDynamic);
HXLINE(3708)					fb->__SetField(HX_("down_toggle_color",75,e4,c8,06),(int)16777215,hx::paccDynamic);
HXLINE(3709)					fb->__SetField(HX_("over_toggle_color",43,1c,98,aa),(int)16777215,hx::paccDynamic);
            				}
            				else {
HXLINE(3714)					::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            				}
            			}
            		}
            		else {
HXLINE(3718)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            		}
HXLINE(3721)		bool _hx_tmp3;
HXDLIN(3721)		if (hx::IsNotNull( sprite )) {
HXLINE(3721)			_hx_tmp3 = (label != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(3721)			_hx_tmp3 = false;
            		}
HXDLIN(3721)		if (_hx_tmp3) {
HXLINE(3722)			bool _hx_tmp4;
HXDLIN(3722)			if (hx::IsNotNull( data )) {
HXLINE(3722)				_hx_tmp4 = data->hasNode->resolve(HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(3722)				_hx_tmp4 = false;
            			}
HXDLIN(3722)			if (_hx_tmp4) {
HXLINE(3723)				this->formatButtonText(data,fb);
            			}
            		}
HXLINE(3727)		HX_VARI( int,text_x) = (int)0;
HXLINE(3728)		HX_VARI( int,text_y) = (int)0;
HXLINE(3729)		if (hx::IsNotNull( data->x->get(HX_("text_x",26,65,88,d8)) )) {
HXLINE(3730)			text_x = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("text_x",26,65,88,d8),null()));
            		}
            		else {
HXLINE(3731)			if (hx::IsNotNull( data->x->get(HX_("label_x",2d,c6,05,04)) )) {
HXLINE(3732)				text_x = ::Std_obj::_hx_int(this->_loadWidth(data,(int)0,HX_("label_x",2d,c6,05,04),null()));
            			}
            		}
HXLINE(3734)		if (hx::IsNotNull( data->x->get(HX_("text_y",27,65,88,d8)) )) {
HXLINE(3735)			text_y = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("text_y",27,65,88,d8),null()));
            		}
            		else {
HXLINE(3736)			if (hx::IsNotNull( data->x->get(HX_("label_y",2e,c6,05,04)) )) {
HXLINE(3737)				text_y = ::Std_obj::_hx_int(this->_loadHeight(data,(int)0,HX_("label_y",2e,c6,05,04),null()));
            			}
            		}
HXLINE(3740)		if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(3742)			HX_VARI(  ::flixel::addons::ui::FlxUISpriteButton,fbs) = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(3743)			if (::Std_obj::is(fbs->label,hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(3745)				HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN(3745)				HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ( ( ::flixel::group::FlxTypedSpriteGroup)(fbs->label) )->group->members;
HXDLIN(3745)				while((_g3 < _g11->length)){
HXLINE(3745)					HX_VARI_NAME(  ::flixel::FlxSprite,sprite1,"sprite") = _g11->__get(_g3).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(3745)					_g3 = (_g3 + (int)1);
HXLINE(3747)					if (::Std_obj::is(sprite1,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(3750)						{
HXLINE(3750)							HX_VARI_NAME(  ::flixel::math::FlxPoint,_g21,"_g2") = sprite1->offset;
HXDLIN(3750)							_g21->set_x((_g21->x - text_x));
            						}
HXLINE(3751)						{
HXLINE(3751)							HX_VARI_NAME(  ::flixel::math::FlxPoint,_g22,"_g2") = sprite1->offset;
HXDLIN(3751)							_g22->set_y((_g22->y - text_y));
            						}
HXLINE(3752)						goto _hx_goto_203;
            					}
            				}
            				_hx_goto_203:;
            			}
            			else {
HXLINE(3756)				{
HXLINE(3756)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g4,"_g") = ( ( ::flixel::FlxSprite)(fbs->label) )->offset;
HXDLIN(3756)					_g4->set_x((_g4->x - text_x));
            				}
HXLINE(3757)				{
HXLINE(3757)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g5,"_g") = ( ( ::flixel::FlxSprite)(fbs->label) )->offset;
HXDLIN(3757)					_g5->set_y((_g5->y - text_y));
            				}
HXLINE(3758)				if (hx::IsNotNull( toggleSprite )) {
HXLINE(3759)					{
HXLINE(3759)						HX_VARI_NAME(  ::flixel::math::FlxPoint,_g6,"_g") = toggleSprite->offset;
HXDLIN(3759)						_g6->set_x((_g6->x - text_x));
            					}
HXLINE(3760)					{
HXLINE(3760)						HX_VARI_NAME(  ::flixel::math::FlxPoint,_g7,"_g") = toggleSprite->offset;
HXDLIN(3760)						_g7->set_y((_g7->y - text_y));
            					}
            				}
            			}
            		}
            		else {
HXLINE(3766)			HX_VARI(  ::flixel::addons::ui::FlxUIButton,fbu) = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3768)			{
HXLINE(3768)				HX_VARI_NAME(  ::flixel::math::FlxPoint,_g8,"_g") = ( ( ::flixel::FlxSprite)(fbu->label) )->offset;
HXDLIN(3768)				_g8->set_x((_g8->x - text_x));
            			}
HXLINE(3769)			{
HXLINE(3769)				HX_VARI_NAME(  ::flixel::math::FlxPoint,_g9,"_g") = ( ( ::flixel::FlxSprite)(fbu->label) )->offset;
HXDLIN(3769)				_g9->set_y((_g9->y - text_y));
            			}
            		}
HXLINE(3772)		bool _hx_tmp5;
HXDLIN(3772)		if (hx::IsNotNull( sprite )) {
HXLINE(3772)			_hx_tmp5 = hx::IsNotNull( toggleSprite );
            		}
            		else {
HXLINE(3772)			_hx_tmp5 = false;
            		}
HXDLIN(3772)		if (_hx_tmp5) {
HXLINE(3773)			fb->__Field(HX_("set_toggle_label",c6,d5,fc,37),hx::paccDynamic)(toggleSprite);
            		}
HXLINE(3776)		if (::Std_obj::is(fb,hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(3778)			HX_VARI(  ::flixel::addons::ui::FlxUITypedButton,fuitb) = ( ( ::flixel::addons::ui::FlxUITypedButton)(fb) );
HXLINE(3779)			if (hx::IsNotNull( fuitb->_assetsToCleanup )) {
HXLINE(3781)				HX_VARI_NAME( int,_g10,"_g") = (int)0;
HXDLIN(3781)				HX_VARI_NAME( ::Array< ::String >,_g12,"_g1") = fuitb->_assetsToCleanup;
HXDLIN(3781)				while((_g10 < _g12->length)){
HXLINE(3781)					HX_VARI( ::String,key) = _g12->__get(_g10);
HXDLIN(3781)					_g10 = (_g10 + (int)1);
HXLINE(3783)					this->addToCleanup(key);
            				}
            			}
            		}
HXLINE(3788)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadButton,return )

 ::flixel::addons::ui::FlxUIRegion FlxUI_obj::_loadRegion( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3800__loadRegion)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(3801)		HX_VARI(  ::Dynamic,bounds) = this->calcMaxMinSize(data,null(),null());
HXLINE(3803)		HX_VARI( int,w) = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(3804)		HX_VARI( int,h) = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(3806)		if (hx::IsNotNull( bounds )) {
HXLINE(3808)			HX_VARI(  ::openfl::_legacy::geom::Point,pt) = ::flixel::addons::ui::U_obj::conformToBounds( ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,w,h),bounds);
HXLINE(3809)			w = ::Std_obj::_hx_int(pt->x);
HXLINE(3810)			h = ::Std_obj::_hx_int(pt->y);
            		}
HXLINE(3813)		HX_VARI( bool,vis) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("visible",72,78,24,a3),true);
HXLINE(3814)		HX_VARI(  ::flixel::addons::ui::FlxUIRegion,reg) =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,(int)0,(int)0,w,h);
HXLINE(3815)		reg->set_visible(vis);
HXLINE(3816)		return reg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRegion,return )

 ::flixel::addons::ui::FlxUI9SliceSprite FlxUI_obj::_load9SliceSprite( ::haxe::xml::Fast data,::String __o_load_code){
::String load_code = __o_load_code.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3820__load9SliceSprite)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(load_code,"load_code")
HXLINE(3821)		HX_VARI( ::String,src) = HX_("",00,00,00,00);
HXLINE(3822)		HX_VARI(  ::flixel::addons::ui::FlxUI9SliceSprite,f9s) = null();
HXLINE(3824)		::flixel::addons::ui::U_obj::xml_name(data->x);
HXLINE(3826)		HX_VARI(  ::flixel::math::FlxPoint,resize) = this->getResizeRatio(data,null());
HXLINE(3828)		HX_VARI( Float,resize_ratio) = resize->x;
HXLINE(3829)		HX_VARI(  ::flixel::math::FlxPoint,resize_point) = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3830)		HX_VARI( int,resize_ratio_axis) = ::Std_obj::_hx_int(resize->y);
HXLINE(3832)		HX_VARI(  ::Dynamic,bounds) = this->calcMaxMinSize(data,null(),null());
HXLINE(3835)		HX_VARI_NAME(  ::Xml,data1,"data") = data->x;
HXDLIN(3835)		HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXDLIN(3835)		if (hx::IsNotNull( data1->get(HX_("src",e4,a6,57,00)) )) {
HXLINE(3835)			str = data1->get(HX_("src",e4,a6,57,00));
HXDLIN(3835)			bool src1;
HXDLIN(3835)			if ((str != HX_("",00,00,00,00))) {
HXLINE(3835)				src1 = hx::IsNull( str );
            			}
            			else {
HXLINE(3835)				src1 = true;
            			}
HXDLIN(3835)			if (src1) {
HXLINE(3835)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(3835)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(3835)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3835)					if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(3835)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("src",e4,a6,57,00)) + HX_("\"",22,00,00,00)));
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(3835)		src = str;
HXLINE(3837)		HX_VARI( bool,hasScaledSrc) = data->hasNode->resolve(HX_("scale_src",6f,c7,bc,37));
HXLINE(3838)		if (hasScaledSrc) {
HXLINE(3842)			HX_VARI( ::String,origSrc) = src;
HXLINE(3844)			src = this->loadScaledSrc(data,HX_("src",e4,a6,57,00),HX_("scale_src",6f,c7,bc,37),null(),null());
HXLINE(3846)			if ((src != origSrc)) {
HXLINE(3848)				this->addToCleanup(origSrc);
            			}
            		}
HXLINE(3852)		if ((src == HX_("",00,00,00,00))) {
HXLINE(3852)			src = null();
            		}
HXLINE(3854)		if (hx::IsNull( src )) {
HXLINE(3856)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(3858)				src = HX_("flixel/flixel-ui/img/chrome_flat.png",30,cf,0a,80);
            			}
            		}
HXLINE(3863)		HX_VARI( int,rect_w) = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(3864)		HX_VARI( int,rect_h) = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(3866)		if (hx::IsNotNull( bounds )) {
HXLINE(3868)			if ((rect_w < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(3868)				rect_w = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3869)				if ((rect_w > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(3869)					rect_w = ( (int)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) );
            				}
            			}
HXLINE(3871)			if ((rect_h < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(3871)				rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3872)				if ((rect_h > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(3872)					rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(3874)		bool _hx_tmp;
HXDLIN(3874)		if ((rect_w != (int)0)) {
HXLINE(3874)			_hx_tmp = (rect_h == (int)0);
            		}
            		else {
HXLINE(3874)			_hx_tmp = true;
            		}
HXDLIN(3874)		if (_hx_tmp) {
HXLINE(3876)			return null();
            		}
HXLINE(3879)		HX_VARI(  ::openfl::_legacy::geom::Rectangle,rc) =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,rect_w,rect_h);
HXLINE(3881)		HX_VARI( ::Array< int >,slice9) = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(data->x,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(3883)		HX_VARI( ::String,srcId) = HX_("",00,00,00,00);
HXLINE(3884)		HX_VARI(  ::Dynamic,srcGraphic) = src;
HXLINE(3886)		if (hasScaledSrc) {
HXLINE(3888)			slice9 = this->load9SliceSprite_scaleSub(slice9,data,src,null());
HXLINE(3890)			srcId = src;
HXLINE(3891)			srcGraphic = ::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,src);
            		}
HXLINE(3894)		HX_VARI( bool,smooth) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("smooth",2e,08,6b,07),false);
HXLINE(3896)		HX_VARI( int,tile) = (int)0;
HXDLIN(3896)		::String _hx_switch_0 = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3896)			tile = (int)16;
HXDLIN(3896)			goto _hx_goto_207;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3896)			tile = (int)1;
HXDLIN(3896)			goto _hx_goto_207;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(3896)			tile = (int)17;
HXDLIN(3896)			goto _hx_goto_207;
            		}
            		_hx_goto_207:;
HXLINE(3898)		f9s =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,srcGraphic,rc,slice9,tile,smooth,srcId,resize_ratio,resize_point,resize_ratio_axis,null());
HXLINE(3900)		return f9s;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_load9SliceSprite,return )

::Array< int > FlxUI_obj::load9SliceSprite_scaleSub(::Array< int > slice9, ::haxe::xml::Fast data,::String src,::String __o_srcString){
::String srcString = __o_srcString.Default(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3904_load9SliceSprite_scaleSub)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(slice9,"slice9")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(srcString,"srcString")
HXLINE(3906)		HX_VARI_NAME(  ::Xml,data1,"data") = data->x;
HXDLIN(3906)		HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXDLIN(3906)		if (hx::IsNotNull( data1->get(srcString) )) {
HXLINE(3906)			str = data1->get(srcString);
HXDLIN(3906)			bool _hx_tmp;
HXDLIN(3906)			if ((str != HX_("",00,00,00,00))) {
HXLINE(3906)				_hx_tmp = hx::IsNull( str );
            			}
            			else {
HXLINE(3906)				_hx_tmp = true;
            			}
HXDLIN(3906)			if (_hx_tmp) {
HXLINE(3906)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(3906)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(3906)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3906)					if (!(::openfl::_legacy::Assets_obj::exists(str,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(3906)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + srcString) + HX_("\"",22,00,00,00)));
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(3906)		HX_VARI( ::String,origSrc) = str;
HXLINE(3908)		if ((src == origSrc)) {
HXLINE(3908)			return slice9;
            		}
HXLINE(3910)		HX_VAR(  ::openfl::_legacy::display::BitmapData,srcAsset);
HXDLIN(3910)		if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,src)) ) )) {
HXLINE(3910)			srcAsset = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,src)) )->bitmap;
            		}
            		else {
HXLINE(3910)			srcAsset = null();
            		}
HXLINE(3912)		if (hx::IsNull( srcAsset )) {
HXLINE(3912)			srcAsset = ::openfl::_legacy::Assets_obj::getBitmapData(origSrc,null());
            		}
HXLINE(3914)		HX_VARI(  ::openfl::_legacy::display::BitmapData,origAsset) = ::openfl::_legacy::Assets_obj::getBitmapData(origSrc,false);
HXLINE(3915)		HX_VARI( int,srcScaleFactorX) = srcAsset->get_width();
HXDLIN(3915)		HX_VARI_NAME( Float,srcScaleFactorX1,"srcScaleFactorX") = ((Float)srcScaleFactorX / (Float)origAsset->get_width());
HXLINE(3916)		HX_VARI( int,srcScaleFactorY) = srcAsset->get_height();
HXDLIN(3916)		HX_VARI_NAME( Float,srcScaleFactorY1,"srcScaleFactorY") = ((Float)srcScaleFactorY / (Float)origAsset->get_height());
HXLINE(3918)		bool _hx_tmp1;
HXDLIN(3918)		if ((::Math_obj::abs((((Float)1.0) - srcScaleFactorX1)) <= ((Float)0.001))) {
HXLINE(3918)			_hx_tmp1 = (::Math_obj::abs((((Float)1.0) - srcScaleFactorY1)) <= ((Float)0.001));
            		}
            		else {
HXLINE(3918)			_hx_tmp1 = false;
            		}
HXDLIN(3918)		if (_hx_tmp1) {
HXLINE(3920)			return slice9;
            		}
HXLINE(3923)		if (hx::IsNotNull( slice9 )) {
HXLINE(3926)			slice9[(int)0] = ::Std_obj::_hx_int((slice9->__get((int)0) * srcScaleFactorX1));
HXLINE(3927)			slice9[(int)1] = ::Std_obj::_hx_int((slice9->__get((int)1) * srcScaleFactorY1));
HXLINE(3929)			HX_VARI( int,widthDiff) = origAsset->get_width();
HXDLIN(3929)			HX_VARI_NAME( int,widthDiff1,"widthDiff") = (widthDiff - slice9->__get((int)2));
HXLINE(3930)			HX_VARI( int,heightDiff) = origAsset->get_height();
HXDLIN(3930)			HX_VARI_NAME( int,heightDiff1,"heightDiff") = (heightDiff - slice9->__get((int)3));
HXLINE(3932)			widthDiff1 = ::Std_obj::_hx_int((widthDiff1 * srcScaleFactorX1));
HXLINE(3933)			heightDiff1 = ::Std_obj::_hx_int((heightDiff1 * srcScaleFactorY1));
HXLINE(3935)			slice9[(int)2] = ::Std_obj::_hx_int((srcAsset->get_width() - widthDiff1));
HXLINE(3936)			slice9[(int)3] = ::Std_obj::_hx_int((srcAsset->get_height() - heightDiff1));
            		}
HXLINE(3938)		return slice9;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,load9SliceSprite_scaleSub,return )

int FlxUI_obj::_loadTileRule( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3941__loadTileRule)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(3943)		HX_VARI( int,tile) = (int)0;
HXLINE(3944)		::String _hx_switch_0 = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(3946)			tile = (int)16;
HXDLIN(3946)			goto _hx_goto_210;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3947)			tile = (int)1;
HXDLIN(3947)			goto _hx_goto_210;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(3945)			tile = (int)17;
HXDLIN(3945)			goto _hx_goto_210;
            		}
            		_hx_goto_210:;
HXLINE(3949)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileRule,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadBox( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3953__loadBox)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(3955)		HX_VARI(  ::flixel::addons::ui::FlxUISprite,fs) = null();
HXLINE(3957)		HX_VARI( int,thickness) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(3959)		HX_VARI(  ::Dynamic,bounds) = this->calcMaxMinSize(data,null(),null());
HXLINE(3962)		if (hx::IsNull( bounds )) {
HXLINE(3963)			bounds =  ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),::Math_obj::NEGATIVE_INFINITY)
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),::Math_obj::NEGATIVE_INFINITY));
            		}
HXLINE(3966)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(3967)		HX_VARI( int,H) = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(3969)		if (hx::IsNotNull( bounds )) {
HXLINE(3971)			if ((W < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(3971)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3972)				if ((W > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(3972)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ));
            				}
            			}
HXLINE(3973)			if ((H < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(3973)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3974)				if ((H > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(3974)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(3977)		HX_VARI( ::String,cstr) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(3978)		HX_VARI( int,C) = (int)0;
HXLINE(3979)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(3981)			HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(3981)			if (hx::IsNull( return_val )) {
HXLINE(3981)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(3981)			C = return_val;
            		}
HXLINE(3983)		fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(3984)		HX_VARI( ::String,key) = ((((((W + HX_("x",78,00,00,00)) + H) + HX_(":",3a,00,00,00)) + C) + HX_(":",3a,00,00,00)) + thickness);
HXLINE(3986)		if (hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,key)) ) )) {
HXLINE(3988)			fs->loadGraphic(key,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3992)			fs->makeGraphic(W,H,C,false,key);
HXLINE(3994)			fs->graphic->bitmap->fillRect( ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,thickness,thickness,(W - (thickness * (int)2)),(H - (thickness * (int)2))),(int)0);
            		}
HXLINE(3997)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBox,return )

 ::flixel::addons::ui::FlxUILine FlxUI_obj::_loadLine( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4001__loadLine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(4004)		HX_VARI( ::String,axis) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("axis",a1,1c,79,40),true,HX_("horizontal",e4,fc,c3,15));
HXLINE(4005)		HX_VARI( int,thickness) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4007)		HX_VARI(  ::Dynamic,bounds) = this->calcMaxMinSize(data,null(),null());
HXLINE(4010)		if (hx::IsNull( bounds )) {
HXLINE(4011)			bounds =  ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),(int)1)
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),(int)1));
            		}
HXLINE(4013)		::String _hx_switch_0 = axis;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(4014)			bounds->__SetField(HX_("max_height",62,6b,96,0d),thickness,hx::paccDynamic);
HXDLIN(4014)			bounds->__SetField(HX_("min_height",34,3e,29,69),thickness,hx::paccDynamic);
HXDLIN(4014)			goto _hx_goto_213;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4015)			bounds->__SetField(HX_("max_width",eb,9a,40,c1),thickness,hx::paccDynamic);
HXDLIN(4015)			bounds->__SetField(HX_("min_width",59,88,fd,ea),thickness,hx::paccDynamic);
HXDLIN(4015)			goto _hx_goto_213;
            		}
            		_hx_goto_213:;
HXLINE(4018)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4019)		HX_VARI( int,H) = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4021)		if (hx::IsNotNull( bounds )) {
HXLINE(4022)			if ((W < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(4022)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4023)				if ((W > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(4023)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ));
            				}
            			}
HXLINE(4024)			if ((H < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(4024)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4025)				if ((H > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(4025)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4028)		HX_VARI( ::String,cstr) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4029)		HX_VARI( int,C) = (int)0;
HXLINE(4030)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4031)			HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4031)			if (hx::IsNull( return_val )) {
HXLINE(4031)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            			}
HXDLIN(4031)			C = return_val;
            		}
HXLINE(4034)		HX_VAR(  ::flixel::addons::ui::LineAxis,lineAxis);
HXDLIN(4034)		if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(4034)			lineAxis = ::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn();
            		}
            		else {
HXLINE(4034)			lineAxis = ::flixel::addons::ui::LineAxis_obj::VERTICAL_dyn();
            		}
HXLINE(4035)		HX_VAR( Float,lineLength);
HXDLIN(4035)		if (hx::IsEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4035)			lineLength = W;
            		}
            		else {
HXLINE(4035)			lineLength = H;
            		}
HXLINE(4036)		HX_VAR( Float,lineThickness);
HXDLIN(4036)		if (hx::IsEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4036)			lineThickness = H;
            		}
            		else {
HXLINE(4036)			lineThickness = W;
            		}
HXLINE(4040)		return  ::flixel::addons::ui::FlxUILine_obj::__alloc( HX_CTX ,(int)0,(int)0,lineAxis,lineLength,lineThickness,C);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLine,return )

 ::flixel::addons::ui::FlxUIBar FlxUI_obj::_loadBar( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4044__loadBar)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(4045)		HX_VARI(  ::flixel::addons::ui::FlxUIBar,fb) = null();
HXLINE(4047)		HX_VARI(  ::Dynamic,style) =  ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("emptyColors",1d,5c,af,8e),null())
            			->setFixed(1,HX_("filledColor",61,28,7c,97),null())
            			->setFixed(2,HX_("chunkSize",ce,cd,77,9f),null())
            			->setFixed(3,HX_("emptyImgSrc",0e,0d,a3,ca),HX_("",00,00,00,00))
            			->setFixed(4,HX_("emptyColor",96,47,af,ca),null())
            			->setFixed(5,HX_("borderColor",d7,3c,d5,d6),null())
            			->setFixed(6,HX_("filledColors",f2,2c,27,f5),null())
            			->setFixed(7,HX_("gradRotation",2c,47,cd,fb),null())
            			->setFixed(8,HX_("filledImgSrc",e3,dd,1a,31),HX_("",00,00,00,00)));
HXLINE(4063)		this->calcMaxMinSize(data,null(),null());
HXLINE(4065)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)-1,null(),null()));
HXLINE(4066)		HX_VARI( int,H) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(4069)		HX_VARI(  ::flixel::ui::FlxBarFillDirection,fillDir) = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXLINE(4071)		::String _hx_switch_0 = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("fill_direction",43,0e,7d,b3),true,null());
            		if (  (_hx_switch_0==HX_("bottom_to_top",a5,98,d9,85)) ){
HXLINE(4076)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::BOTTOM_TO_TOP_dyn();
HXDLIN(4076)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_inside_out",46,c6,92,00)) ){
HXLINE(4077)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_INSIDE_OUT_dyn();
HXDLIN(4077)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_outside_in",ba,dc,41,90)) ){
HXLINE(4078)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_OUTSIDE_IN_dyn();
HXDLIN(4078)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("left_to_right",50,bd,a3,f7)) ){
HXLINE(4073)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
HXDLIN(4073)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("right_to_left",e8,a1,2d,02)) ){
HXLINE(4074)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn();
HXDLIN(4074)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("top_to_bottom",05,d7,5d,10)) ){
HXLINE(4075)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXDLIN(4075)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("vertical_inside_out",f4,eb,d7,2d)) ){
HXLINE(4079)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_INSIDE_OUT_dyn();
HXDLIN(4079)			goto _hx_goto_215;
            		}
            		if (  (_hx_switch_0==HX_("vertical_outside_in",68,02,87,bd)) ){
HXLINE(4080)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_OUTSIDE_IN_dyn();
HXDLIN(4080)			goto _hx_goto_215;
            		}
            		/* default */{
HXLINE(4081)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
            		}
            		_hx_goto_215:;
HXLINE(4084)		HX_VARI( ::String,parentRefStr) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("parent_ref",7e,00,5b,f3),true,null());
HXLINE(4085)		HX_VAR( ::Dynamic,parentRef);
HXDLIN(4085)		if ((parentRefStr != HX_("",00,00,00,00))) {
HXLINE(4085)			parentRef = this->getAsset(parentRefStr,null());
            		}
            		else {
HXLINE(4085)			parentRef = null();
            		}
HXLINE(4086)		HX_VARI( ::String,variableName) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("variable",3c,12,0d,69),null(),null());
HXLINE(4088)		HX_VARI( Float,value) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("value",71,7f,b8,31),(int)-1);
HXLINE(4090)		HX_VARI( Float,min) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("min",92,11,53,00),(int)0);
HXLINE(4091)		HX_VARI( Float,max) = ::flixel::addons::ui::U_obj::xml_f(data->x,HX_("max",a4,0a,53,00),(int)100);
HXLINE(4093)		if ((value == (int)-1)) {
HXLINE(4095)			value = max;
            		}
HXLINE(4098)		style->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("border_color",90,7e,e8,6e),null(),null()),hx::paccDynamic);
HXLINE(4099)		HX_VARI( bool,showBorder) = hx::IsNotNull( style->__Field(HX_("borderColor",d7,3c,d5,d6),hx::paccDynamic) );
HXLINE(4101)		style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("filled_color",c6,ab,4f,40),null(),null()),hx::paccDynamic);
HXLINE(4102)		if (hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),hx::paccDynamic) )) {
HXLINE(4104)			style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("color",63,71,5c,4a),null(),null()),hx::paccDynamic);
            		}
HXLINE(4107)		style->__SetField(HX_("emptyColor",96,47,af,ca),::flixel::addons::ui::U_obj::xml_color(data->x,HX_("empty_color",f1,da,d7,d9),null(),null()),hx::paccDynamic);
HXLINE(4109)		style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data->x,HX_("filled_colors",ed,a1,66,05),null()),hx::paccDynamic);
HXLINE(4110)		style->__SetField(HX_("emptyColors",1d,5c,af,8e),::flixel::addons::ui::U_obj::xml_colorArray(data->x,HX_("empty_colors",62,b8,07,c3),null()),hx::paccDynamic);
HXLINE(4111)		if (hx::IsNull( ( (::Array< int >)(style->__Field(HX_("filledColors",f2,2c,27,f5),hx::paccDynamic)) ) )) {
HXLINE(4113)			style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data->x,HX_("colors",b0,c5,86,c6),null()),hx::paccDynamic);
            		}
HXLINE(4116)		style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src_filled",dd,dc,1c,63),null(),null(),null()),hx::paccDynamic);
HXLINE(4117)		style->__SetField(HX_("emptyImgSrc",0e,0d,a3,ca),this->loadScaledSrc(data,HX_("src_empty",b2,6b,77,bb),null(),null(),null()),hx::paccDynamic);
HXLINE(4118)		if ((( (::String)(style->__Field(HX_("filledImgSrc",e3,dd,1a,31),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE(4120)			style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src",e4,a6,57,00),null(),null(),null()),hx::paccDynamic);
            		}
HXLINE(4123)		style->__SetField(HX_("chunkSize",ce,cd,77,9f),::flixel::addons::ui::U_obj::xml_i(data->x,HX_("chunk_size",13,8b,ba,d8),(int)1),hx::paccDynamic);
HXLINE(4124)		style->__SetField(HX_("gradRotation",2c,47,cd,fb),::flixel::addons::ui::U_obj::xml_i(data->x,HX_("rotation",3e,3d,86,08),(int)90),hx::paccDynamic);
HXLINE(4126)		bool _hx_tmp;
HXDLIN(4126)		bool _hx_tmp1;
HXDLIN(4126)		if ((( (::String)(style->__Field(HX_("filledImgSrc",e3,dd,1a,31),hx::paccDynamic)) ) == HX_("",00,00,00,00))) {
HXLINE(4126)			_hx_tmp1 = hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),hx::paccDynamic) );
            		}
            		else {
HXLINE(4126)			_hx_tmp1 = false;
            		}
HXDLIN(4126)		if (_hx_tmp1) {
HXLINE(4126)			_hx_tmp = hx::IsNull( ( (::Array< int >)(style->__Field(HX_("filledColors",f2,2c,27,f5),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE(4126)			_hx_tmp = false;
            		}
HXDLIN(4126)		if (_hx_tmp) {
HXLINE(4128)			style->__SetField(HX_("filledColor",61,28,7c,97),(int)-65536,hx::paccDynamic);
            		}
HXLINE(4131)		bool _hx_tmp2;
HXDLIN(4131)		if ((W == (int)-1)) {
HXLINE(4131)			_hx_tmp2 = (H == (int)-1);
            		}
            		else {
HXLINE(4131)			_hx_tmp2 = false;
            		}
HXDLIN(4131)		if (_hx_tmp2) {
HXLINE(4133)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,(int)0,(int)0,fillDir,(int)100,(int)10,parentRef,variableName,min,max,showBorder);
            		}
            		else {
HXLINE(4137)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,(int)0,(int)0,fillDir,W,H,parentRef,variableName,min,max,showBorder);
            		}
HXLINE(4140)		fb->set_style(style);
HXLINE(4141)		fb->resize(fb->barWidth,fb->barHeight);
HXLINE(4143)		fb->set_value(value);
HXLINE(4145)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBar,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadSprite( ::haxe::xml::Fast data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4149__loadSprite)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(4150)		HX_VARI( ::String,src) = HX_("",00,00,00,00);
HXLINE(4151)		HX_VARI(  ::flixel::addons::ui::FlxUISprite,fs) = null();
HXLINE(4153)		src = this->loadScaledSrc(data,null(),null(),null(),null());
HXLINE(4155)		HX_VARI(  ::Dynamic,bounds) = this->calcMaxMinSize(data,null(),null());
HXLINE(4158)		HX_VARI(  ::flixel::math::FlxPoint,resize) = this->getResizeRatio(data,(int)-1);
HXLINE(4160)		HX_VARI( Float,resize_ratio) = resize->x;
HXLINE(4161)		HX_VARI( int,resize_ratio_axis) = ::Std_obj::_hx_int(resize->y);
HXLINE(4162)		HX_VARI(  ::flixel::math::FlxPoint,resize_point) = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(4164)		HX_VARI( int,W) = ::Std_obj::_hx_int(this->_loadWidth(data,(int)-1,null(),null()));
HXLINE(4165)		HX_VARI( int,H) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)-1,null(),null()));
HXLINE(4167)		if (hx::IsNotNull( bounds )) {
HXLINE(4169)			if ((W < ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ))) {
HXLINE(4169)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4170)				if ((W > ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ))) {
HXLINE(4170)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),hx::paccDynamic)) ));
            				}
            			}
HXLINE(4171)			if ((H < ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),hx::paccDynamic)) ))) {
HXLINE(4171)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4172)				if ((H > ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ))) {
HXLINE(4172)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4175)		if ((src != HX_("",00,00,00,00))) {
HXLINE(4177)			bool _hx_tmp;
HXDLIN(4177)			if ((W == (int)-1)) {
HXLINE(4177)				_hx_tmp = (H == (int)-1);
            			}
            			else {
HXLINE(4177)				_hx_tmp = false;
            			}
HXDLIN(4177)			if (_hx_tmp) {
HXLINE(4179)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,src);
            			}
            			else {
HXLINE(4184)				bool _hx_tmp1;
HXDLIN(4184)				if ((resize_ratio != (int)-1)) {
HXLINE(4184)					if ((W != (int)-1)) {
HXLINE(4184)						_hx_tmp1 = (H == (int)-1);
            					}
            					else {
HXLINE(4184)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(4184)					_hx_tmp1 = false;
            				}
HXDLIN(4184)				if (_hx_tmp1) {
HXLINE(4187)					if ((resize_ratio_axis == (int)-1)) {
HXLINE(4189)						if ((W == (int)-1)) {
HXLINE(4189)							resize_ratio_axis = (int)0;
            						}
HXLINE(4190)						if ((H == (int)-1)) {
HXLINE(4190)							resize_ratio_axis = (int)1;
            						}
            					}
HXLINE(4194)					if ((resize_ratio_axis == (int)1)) {
HXLINE(4196)						H = (W * ((Float)(int)1 / (Float)resize_ratio));
            					}
            					else {
HXLINE(4198)						if ((resize_ratio_axis == (int)0)) {
HXLINE(4200)							W = (H * ((Float)(int)1 / (Float)resize_ratio));
            						}
            					}
            				}
HXLINE(4205)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::addons::ui::U_obj::loadScaledImage(src,W,H,this->loadSmooth(data,true)));
            			}
            		}
            		else {
HXLINE(4210)			HX_VARI( ::String,cstr) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("color",63,71,5c,4a),null(),null());
HXLINE(4211)			HX_VARI( int,C) = (int)0;
HXLINE(4212)			if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4214)				HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4214)				if (hx::IsNull( return_val )) {
HXLINE(4214)					HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr));
            				}
HXDLIN(4214)				C = return_val;
            			}
HXLINE(4216)			fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(4217)			fs->makeGraphic(W,H,C,null(),null());
            		}
HXLINE(4220)		fs->set_resize_point(resize_point);
HXLINE(4221)		fs->set_resize_ratio(resize_ratio);
HXLINE(4222)		fs->resize_ratio_axis = resize_ratio_axis;
HXLINE(4224)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadSprite,return )

bool FlxUI_obj::loadSmooth( ::haxe::xml::Fast scaleNode,bool defaultValue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4228_loadSmooth)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scaleNode,"scaleNode")
            	HX_STACK_ARG(defaultValue,"defaultValue")
HXLINE(4229)		HX_VAR( ::String,defaultStr);
HXDLIN(4229)		if (defaultValue) {
HXLINE(4229)			defaultStr = HX_("true",4e,a7,03,4d);
            		}
            		else {
HXLINE(4229)			defaultStr = HX_("false",a3,35,4f,fb);
            		}
HXLINE(4230)		HX_VARI( ::String,smoothStr) = ::flixel::addons::ui::U_obj::xml_str(scaleNode->x,HX_("smooth",2e,08,6b,07),true,defaultStr);
HXLINE(4231)		if ((smoothStr == HX_("",00,00,00,00))) {
HXLINE(4233)			smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode->x,HX_("antialias",ae,d6,e9,75),true,defaultStr);
            		}
HXLINE(4235)		return ::flixel::addons::ui::U_obj::boolify(smoothStr);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadSmooth,return )

::String FlxUI_obj::loadScaledSrc( ::haxe::xml::Fast data,::String __o_attName,::String __o_scaleName,hx::Null< int >  __o_tilesWide,hx::Null< int >  __o_tilesTall){
::String attName = __o_attName.Default(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
::String scaleName = __o_scaleName.Default(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
int tilesWide = __o_tilesWide.Default(1);
int tilesTall = __o_tilesTall.Default(1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4245_loadScaledSrc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(attName,"attName")
            	HX_STACK_ARG(scaleName,"scaleName")
            	HX_STACK_ARG(tilesWide,"tilesWide")
            	HX_STACK_ARG(tilesTall,"tilesTall")
HXLINE(4246)		HX_VARI( ::String,src) = ::flixel::addons::ui::U_obj::xml_str(data->x,attName,null(),null());
HXLINE(4247)		if (data->hasNode->resolve(scaleName)) {
HXLINE(4249)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(scaleName)->h;
HXDLIN(4249)			while(hx::IsNotNull( _g_head )){
HXLINE(4249)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(4249)				_g_head = _g_head->next;
HXLINE(4251)				HX_VARI( Float,ratio) = ::flixel::addons::ui::U_obj::xml_f(val->x,HX_("screen_ratio",b8,10,95,88),(int)-1);
HXLINE(4252)				HX_VARI( Float,tolerance) = ::flixel::addons::ui::U_obj::xml_f(val->x,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(4256)				bool _hx_tmp;
HXDLIN(4256)				if (!((ratio < (int)0))) {
HXLINE(4256)					if ((ratio > (int)0)) {
HXLINE(4256)						_hx_tmp = (::Math_obj::abs((ratio - ((Float)::flixel::FlxG_obj::width / (Float)::flixel::FlxG_obj::height))) <= tolerance);
            					}
            					else {
HXLINE(4256)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(4256)					_hx_tmp = true;
            				}
HXDLIN(4256)				if (_hx_tmp) {
HXLINE(4259)					HX_VARI( ::String,srcSuffix) = (src + ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("suffix",d1,e2,a5,9c),null(),null()));
HXLINE(4260)					HX_VARI(  ::openfl::_legacy::display::BitmapData,testAsset) = null();
HXLINE(4261)					HX_VARI( Float,scale_) = (int)-1;
HXLINE(4262)					HX_VARI( bool,smooth) = this->loadSmooth(val,true);
HXLINE(4264)					HX_VARI( Float,to_height) = this->_loadHeight(val,(int)-1,HX_("to_height",6b,29,06,d3),null());
HXLINE(4266)					if ((to_height != (int)-1)) {
HXLINE(4268)						HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,testAsset1,"testAsset") = ::flixel::addons::ui::U_obj::getBmp(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()));
HXLINE(4269)						if (hx::IsNotNull( testAsset1 )) {
HXLINE(4271)							scale_ = ((Float)to_height / (Float)testAsset1->get_height());
            						}
            					}
            					else {
HXLINE(4276)						scale_ = this->_loadScale(val,(int)-1,null());
HXLINE(4277)						if ((scale_ == (int)-1)) {
HXLINE(4279)							scale_ = this->_loadScale(val,(int)-1,HX_("value",71,7f,b8,31));
            						}
            					}
HXLINE(4283)					HX_VAR( Float,scale_x);
HXDLIN(4283)					if ((scale_ != (int)-1)) {
HXLINE(4283)						scale_x = scale_;
            					}
            					else {
HXLINE(4283)						scale_x = this->_loadScaleX(val,(int)-1);
            					}
HXLINE(4284)					HX_VAR( Float,scale_y);
HXDLIN(4284)					if ((scale_ != (int)-1)) {
HXLINE(4284)						scale_y = scale_;
            					}
            					else {
HXLINE(4284)						scale_y = this->_loadScaleY(val,(int)-1);
            					}
HXLINE(4286)					HX_VARI( Float,sw) = (int)0;
HXLINE(4287)					HX_VARI( Float,sh) = (int)0;
HXLINE(4289)					bool _hx_tmp1;
HXDLIN(4289)					if ((scale_x > (int)0)) {
HXLINE(4289)						_hx_tmp1 = (scale_y > (int)0);
            					}
            					else {
HXLINE(4289)						_hx_tmp1 = false;
            					}
HXDLIN(4289)					if (_hx_tmp1) {
HXLINE(4291)						if ((scale_x <= (int)0)) {
HXLINE(4291)							scale_x = ((Float)1.0);
            						}
HXLINE(4292)						if ((scale_y <= (int)0)) {
HXLINE(4292)							scale_y = ((Float)1.0);
            						}
HXLINE(4294)						sw = this->_loadWidth(val,(int)-1,null(),null());
HXLINE(4295)						sh = this->_loadHeight(val,(int)-1,null(),null());
HXLINE(4297)						bool _hx_tmp2;
HXDLIN(4297)						if ((sw != (int)-1)) {
HXLINE(4297)							_hx_tmp2 = (sh == (int)-1);
            						}
            						else {
HXLINE(4297)							_hx_tmp2 = true;
            						}
HXDLIN(4297)						if (_hx_tmp2) {
HXLINE(4299)							testAsset = ::openfl::_legacy::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4300)							sw = testAsset->get_width();
HXLINE(4301)							sh = testAsset->get_height();
            						}
HXLINE(4304)						sw = (sw * scale_x);
HXLINE(4305)						sh = (sh * scale_y);
            					}
            					else {
HXLINE(4310)						sw = this->_loadWidth(val,(int)-1,null(),null());
HXLINE(4311)						sh = this->_loadHeight(val,(int)-1,null(),null());
            					}
HXLINE(4314)					bool _hx_tmp3;
HXDLIN(4314)					if ((sw != (int)0)) {
HXLINE(4314)						_hx_tmp3 = (sh != (int)0);
            					}
            					else {
HXLINE(4314)						_hx_tmp3 = false;
            					}
HXDLIN(4314)					if (_hx_tmp3) {
HXLINE(4316)						bool _hx_tmp4;
HXDLIN(4316)						if ((tilesTall <= (int)1)) {
HXLINE(4316)							_hx_tmp4 = (tilesWide > (int)1);
            						}
            						else {
HXLINE(4316)							_hx_tmp4 = true;
            						}
HXDLIN(4316)						if (_hx_tmp4) {
HXLINE(4318)							testAsset = ::openfl::_legacy::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4319)							HX_VARI( ::String,str) = ::flixel::addons::ui::U_obj::gfx(srcSuffix,null(),null(),null(),null(),null());
HXDLIN(4319)							HX_VARI_NAME( int,str1,"str") = ::Std_obj::_hx_int(((Float)testAsset->get_width() / (Float)tilesWide));
HXDLIN(4319)							HX_VARI_NAME( int,str2,"str") = ::Std_obj::_hx_int(((Float)testAsset->get_height() / (Float)tilesTall));
HXDLIN(4319)							HX_VARI_NAME( int,str3,"str") = ::Std_obj::_hx_int(sw);
HXDLIN(4319)							HX_VARI_NAME( ::String,str4,"str") = ::flixel::addons::ui::U_obj::scaleAndStoreTileset(str,scale_y,str1,str2,str3,::Std_obj::_hx_int(((Float)sh / (Float)tilesTall)),smooth);
HXLINE(4320)							this->addToScaledAssets(str4);
HXLINE(4321)							return str4;
            						}
            						else {
HXLINE(4325)							HX_VARI_NAME( ::String,str5,"str") = ::flixel::addons::ui::U_obj::loadScaledImage(srcSuffix,sw,sh,smooth);
HXLINE(4326)							this->addToScaledAssets(str5);
HXLINE(4327)							return str5;
            						}
            					}
HXLINE(4330)					goto _hx_goto_219;
            				}
            			}
            			_hx_goto_219:;
            		}
HXLINE(4334)		HX_VARI_NAME(  ::Xml,data1,"data") = data->x;
HXDLIN(4334)		HX_VARI_NAME( ::String,str6,"str") = HX_("",00,00,00,00);
HXDLIN(4334)		if (hx::IsNotNull( data1->get(attName) )) {
HXLINE(4334)			str6 = data1->get(attName);
HXDLIN(4334)			bool _hx_tmp5;
HXDLIN(4334)			if ((str6 != HX_("",00,00,00,00))) {
HXLINE(4334)				_hx_tmp5 = hx::IsNull( str6 );
            			}
            			else {
HXLINE(4334)				_hx_tmp5 = true;
            			}
HXDLIN(4334)			if (_hx_tmp5) {
HXLINE(4334)				str6 = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4334)				str6 = ::flixel::addons::ui::U_obj::gfx(str6,null(),null(),null(),null(),null());
HXDLIN(4334)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(4334)					if (!(::openfl::_legacy::Assets_obj::exists(str6,::openfl::_legacy::AssetType_obj::IMAGE_dyn()))) {
HXLINE(4334)						HX_STACK_DO_THROW(((HX_("couldn't load bmp \"",73,a2,6e,30) + attName) + HX_("\"",22,00,00,00)));
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String msg = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(4334)		return str6;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,loadScaledSrc,return )

int FlxUI_obj::thisWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4346_thisWidth)
            	HX_STACK_THIS(this)
HXLINE(4346)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisWidth,return )

int FlxUI_obj::thisHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4354_thisHeight)
            	HX_STACK_THIS(this)
HXLINE(4354)		return ::flixel::FlxG_obj::height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,thisHeight,return )

Float FlxUI_obj::_getAnchorPos(::Dynamic thing,::String axis,::String str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4361__getAnchorPos)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(str,"str")
HXLINE(4362)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE(4364)			return (int)0;
HXDLIN(4364)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(4371)			return this->thisHeight();
HXDLIN(4371)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(4368)			if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4368)				return ((Float)this->thisWidth() / (Float)(int)2);
            			}
            			else {
HXLINE(4369)				if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4369)					return ((Float)this->thisHeight() / (Float)(int)2);
            				}
            			}
HXLINE(4368)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4365)			return (int)0;
HXDLIN(4365)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4366)			return this->thisWidth();
HXDLIN(4366)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4370)			return (int)0;
HXDLIN(4370)			goto _hx_goto_223;
            		}
            		/* default */{
HXLINE(4373)			HX_VARI( Float,perc) = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(4374)			if (!(::Math_obj::isNaN(perc))) {
HXLINE(4375)				if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4376)					return (perc * this->thisWidth());
            				}
            				else {
HXLINE(4377)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4378)						return (perc * this->thisHeight());
            					}
            				}
            			}
            			else {
HXLINE(4384)				if ( ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00))->match(str)) {
HXLINE(4385)					HX_VARI( ::String,wh) = HX_("",00,00,00,00);
HXLINE(4386)					if ((axis == HX_("x",78,00,00,00))) {
HXLINE(4386)						wh = HX_("w",77,00,00,00);
            					}
HXLINE(4387)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(4387)						wh = HX_("h",68,00,00,00);
            					}
HXLINE(4389)					return this->_getStretch((int)1,wh,str);
            				}
            			}
            		}
            		_hx_goto_223:;
HXLINE(4393)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getAnchorPos,return )

 ::flixel::addons::ui::Rounding FlxUI_obj::getRound( ::haxe::xml::Fast node,::String __o_defaultStr){
::String defaultStr = __o_defaultStr.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4397_getRound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(node,"node")
            	HX_STACK_ARG(defaultStr,"defaultStr")
HXLINE(4399)		::String _hx_switch_0 = ::flixel::addons::ui::U_obj::xml_str(node->x,HX_("round",4e,f8,65,ed),true,defaultStr);
            		if (  (_hx_switch_0==HX_("-1",64,27,00,00)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("floor",cc,d1,96,02)) ){
HXLINE(4402)			return ::flixel::addons::ui::Rounding_obj::Floor_dyn();
HXDLIN(4402)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("ceil",05,1f,bd,41)) ||  (_hx_switch_0==HX_("ceiling",fd,5e,9e,33)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4404)			return ::flixel::addons::ui::Rounding_obj::Ceil_dyn();
HXDLIN(4404)			goto _hx_goto_225;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("round",4e,f8,65,ed)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ){
HXLINE(4406)			return ::flixel::addons::ui::Rounding_obj::Round_dyn();
HXDLIN(4406)			goto _hx_goto_225;
            		}
            		_hx_goto_225:;
HXLINE(4408)		return ::flixel::addons::ui::Rounding_obj::None_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getRound,return )

Float FlxUI_obj::doRound(Float f, ::flixel::addons::ui::Rounding round){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4413_doRound)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(round,"round")
HXLINE(4413)		switch((int)(_hx_getEnumValueIndex(round))){
            			case (int)0: {
HXLINE(4416)				return ::Math_obj::floor(f);
            			}
            			break;
            			case (int)1: {
HXLINE(4418)				return ::Math_obj::ceil(f);
            			}
            			break;
            			case (int)2: {
HXLINE(4417)				return ::Math_obj::round(f);
            			}
            			break;
            			case (int)3: {
HXLINE(4415)				return f;
            			}
            			break;
            		}
HXLINE(4413)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,doRound,return )

 ::Dynamic FlxUI_obj::calcMaxMinSize( ::haxe::xml::Fast data, ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4424_calcMaxMinSize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(4425)		HX_VARI( Float,min_w) = (int)0;
HXLINE(4426)		HX_VARI( Float,min_h) = (int)0;
HXLINE(4427)		HX_VARI( Float,max_w) = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4428)		HX_VARI( Float,max_h) = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4429)		HX_VARI( Float,temp_min_w) = (int)0;
HXLINE(4430)		HX_VARI( Float,temp_min_h) = (int)0;
HXLINE(4431)		HX_VARI( Float,temp_max_w) = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4432)		HX_VARI( Float,temp_max_h) = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4434)		HX_VARI(  ::flixel::addons::ui::Rounding,round) = ::flixel::addons::ui::Rounding_obj::None_dyn();
HXLINE(4436)		if (data->hasNode->resolve(HX_("exact_size",81,45,3f,e0))) {
HXLINE(4438)			HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("exact_size",81,45,3f,e0))->h;
HXDLIN(4438)			while(hx::IsNotNull( _g_head )){
HXLINE(4438)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(4438)				_g_head = _g_head->next;
HXLINE(4440)				HX_VARI( ::String,exact_w_str) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4441)				HX_VARI( ::String,exact_h_str) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4443)				round = this->getRound(val,null());
HXLINE(4444)				min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),exact_w_str,(int)0),round);
HXLINE(4445)				min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),exact_h_str,(int)0),round);
HXLINE(4446)				max_w = this->doRound(min_w,round);
HXLINE(4447)				max_h = this->doRound(min_h,round);
            			}
            		}
            		else {
HXLINE(4450)			if (data->hasNode->resolve(HX_("min_size",ce,b9,6e,63))) {
HXLINE(4452)				HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = data->nodes->resolve(HX_("min_size",ce,b9,6e,63))->h;
HXDLIN(4452)				while(hx::IsNotNull( _g_head1 )){
HXLINE(4452)					HX_VARI_NAME(  ::haxe::xml::Fast,val1,"val") = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN(4452)					_g_head1 = _g_head1->next;
HXLINE(4454)					HX_VARI( ::String,min_w_str) = ::flixel::addons::ui::U_obj::xml_str(val1->x,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4455)					HX_VARI( ::String,min_h_str) = ::flixel::addons::ui::U_obj::xml_str(val1->x,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4456)					round = this->getRound(val1,null());
HXLINE(4457)					temp_min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),min_w_str,(int)0),round);
HXLINE(4458)					temp_min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),min_h_str,(int)0),round);
HXLINE(4459)					if ((temp_min_w > min_w)) {
HXLINE(4461)						min_w = temp_min_w;
            					}
HXLINE(4463)					if ((temp_min_h > min_h)) {
HXLINE(4465)						min_h = temp_min_h;
            					}
            				}
            			}
            			else {
HXLINE(4469)				if (data->hasNode->resolve(HX_("max_size",7c,9f,54,16))) {
HXLINE(4471)					HX_VARI_NAME(  ::_List::ListNode,_g_head2,"_g_head") = data->nodes->resolve(HX_("max_size",7c,9f,54,16))->h;
HXDLIN(4471)					while(hx::IsNotNull( _g_head2 )){
HXLINE(4471)						HX_VARI_NAME(  ::haxe::xml::Fast,val2,"val") = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN(4471)						_g_head2 = _g_head2->next;
HXLINE(4473)						HX_VARI( ::String,max_w_str) = ::flixel::addons::ui::U_obj::xml_str(val2->x,HX_("width",06,b6,62,ca),null(),null());
HXLINE(4474)						HX_VARI( ::String,max_h_str) = ::flixel::addons::ui::U_obj::xml_str(val2->x,HX_("height",e7,07,4c,02),null(),null());
HXLINE(4475)						round = this->getRound(val2,null());
HXLINE(4476)						temp_max_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),max_w_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(4477)						temp_max_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),max_h_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(4478)						if ((temp_max_w < max_w)) {
HXLINE(4480)							max_w = temp_max_w;
            						}
HXLINE(4482)						if ((temp_max_h < max_h)) {
HXLINE(4484)							max_h = temp_max_h;
            						}
            					}
            				}
            				else {
HXLINE(4490)					return null();
            				}
            			}
            		}
HXLINE(4493)		if (hx::IsNotNull( width )) {
HXLINE(4495)			if (hx::IsGreater( width,min_w )) {
HXLINE(4495)				min_w = width;
            			}
HXLINE(4496)			if (hx::IsLess( width,max_w )) {
HXLINE(4496)				max_w = width;
            			}
            		}
HXLINE(4498)		if (hx::IsNotNull( height )) {
HXLINE(4500)			if (hx::IsGreater( height,min_h )) {
HXLINE(4500)				min_h = height;
            			}
HXLINE(4501)			if (hx::IsLess( height,max_h )) {
HXLINE(4501)				max_h = height;
            			}
            		}
HXLINE(4506)		if ((max_w <= (int)0)) {
HXLINE(4506)			max_w = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(4507)		if ((max_h <= (int)0)) {
HXLINE(4507)			max_h = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(4509)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("max_width",eb,9a,40,c1),max_w)
            			->setFixed(1,HX_("min_width",59,88,fd,ea),min_w)
            			->setFixed(2,HX_("max_height",62,6b,96,0d),max_h)
            			->setFixed(3,HX_("min_height",34,3e,29,69),min_h));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,calcMaxMinSize,return )

Float FlxUI_obj::_getDataSize(::String target,::String str,hx::Null< Float >  __o_default_){
Float default_ = __o_default_.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4513__getDataSize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(default_,"default_")
HXLINE(4514)		if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(4516)			return ::Std_obj::parseFloat(str);
            		}
HXLINE(4518)		HX_VARI( Float,percf) = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(4519)		if (!(::Math_obj::isNaN(percf))) {
HXLINE(4521)			::String _hx_switch_0 = target;
            			if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(4524)				return (this->thisHeight() * percf);
HXDLIN(4524)				goto _hx_goto_232;
            			}
            			if (  (_hx_switch_0==HX_("scale",8a,ce,ce,78)) ||  (_hx_switch_0==HX_("scale_x",43,58,07,65)) ||  (_hx_switch_0==HX_("scale_y",44,58,07,65)) ){
HXLINE(4525)				return percf;
HXDLIN(4525)				goto _hx_goto_232;
            			}
            			if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(4523)				return (this->thisWidth() * percf);
HXDLIN(4523)				goto _hx_goto_232;
            			}
            			_hx_goto_232:;
            		}
            		else {
HXLINE(4530)			if ((str.indexOf(HX_("stretch:",95,06,83,92),null()) == (int)0)) {
HXLINE(4532)				str = ::StringTools_obj::replace(str,HX_("stretch:",95,06,83,92),HX_("",00,00,00,00));
HXLINE(4533)				HX_VARI( ::Array< ::String >,arr) = str.split(HX_(",",2c,00,00,00));
HXLINE(4534)				HX_VARI( Float,stretch_0) = this->_getStretch((int)0,target,arr->__get((int)0));
HXLINE(4535)				HX_VARI( Float,stretch_1) = this->_getStretch((int)1,target,arr->__get((int)1));
HXLINE(4536)				bool _hx_tmp;
HXDLIN(4536)				if ((stretch_0 != (int)-1)) {
HXLINE(4536)					_hx_tmp = (stretch_1 != (int)-1);
            				}
            				else {
HXLINE(4536)					_hx_tmp = false;
            				}
HXDLIN(4536)				if (_hx_tmp) {
HXLINE(4538)					return (stretch_1 - stretch_0);
            				}
            				else {
HXLINE(4542)					return default_;
            				}
            			}
            			else {
HXLINE(4545)				if ((str.indexOf(HX_("asset:",4a,48,03,4c),null()) == (int)0)) {
HXLINE(4547)					str = ::StringTools_obj::replace(str,HX_("asset:",4a,48,03,4c),HX_("",00,00,00,00));
HXLINE(4549)					return this->_getStretch((int)1,target,str);
            				}
            				else {
HXLINE(4554)					if ( ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00))->match(str)) {
HXLINE(4557)						return this->_getStretch((int)1,target,str);
            					}
            				}
            			}
HXLINE(4561)			HX_VARI( ::String,ptStr) = HX_("",00,00,00,00);
HXLINE(4563)			int _hx_tmp1 = str.indexOf(HX_("pt",04,62,00,00),null());
HXDLIN(4563)			if ((_hx_tmp1 == (str.length - (int)2))) {
HXLINE(4565)				ptStr = str.substr((int)0,(str.length - (int)2));
            			}
HXLINE(4568)			bool _hx_tmp2;
HXDLIN(4568)			if ((ptStr != HX_("",00,00,00,00))) {
HXLINE(4568)				_hx_tmp2 = ::flixel::addons::ui::U_obj::isStrNum(ptStr);
            			}
            			else {
HXLINE(4568)				_hx_tmp2 = false;
            			}
HXDLIN(4568)			if (_hx_tmp2) {
HXLINE(4570)				HX_VARI( Float,tempNum) = ::Std_obj::parseFloat(ptStr);
HXLINE(4572)				::String _hx_switch_1 = target;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(4575)					return (this->_pointY * tempNum);
HXDLIN(4575)					goto _hx_goto_233;
            				}
            				if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(4574)					return (this->_pointX * tempNum);
HXDLIN(4574)					goto _hx_goto_233;
            				}
            				_hx_goto_233:;
            			}
            		}
HXLINE(4579)		return default_;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getDataSize,return )

::cpp::VirtualArray FlxUI_obj::_getOperation(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4591__getOperation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(str,"str")
HXLINE(4592)		HX_VARI( ::Array< ::String >,list) = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_237,5);
HXLINE(4595)		HX_VARI_NAME( ::String,_hx_operator,"operator") = HX_("",00,00,00,00);
HXLINE(4596)		HX_VARI( Float,besti) = ::Math_obj::POSITIVE_INFINITY;
HXLINE(4598)		{
HXLINE(4598)			HX_VARI( int,_g) = (int)0;
HXDLIN(4598)			while((_g < list->length)){
HXLINE(4598)				HX_VARI( ::String,op) = list->__get(_g);
HXDLIN(4598)				_g = (_g + (int)1);
HXLINE(4600)				HX_VARI( int,i) = str.indexOf(op,null());
HXLINE(4601)				if ((i != (int)-1)) {
HXLINE(4603)					if ((i < besti)) {
HXLINE(4605)						besti = i;
HXLINE(4606)						_hx_operator = op;
            					}
            				}
            			}
            		}
HXLINE(4611)		HX_VARI( bool,hasPoint) = false;
HXLINE(4613)		if ((_hx_operator != HX_("",00,00,00,00))) {
HXLINE(4615)			if ((str.indexOf(_hx_operator,null()) != (int)-1)) {
HXLINE(4617)				HX_VARI( int,opindex) = str.indexOf(_hx_operator,null());
HXLINE(4619)				if ((opindex != (str.length - (int)1))) {
HXLINE(4621)					HX_VARI( ::String,firstBit) = str.substr((int)0,opindex);
HXLINE(4622)					HX_VARI( ::String,secondBit) = str.substr((opindex + (int)1),(str.length - (opindex + (int)1)));
HXLINE(4624)					HX_VARI( Float,f) = (int)0;
HXLINE(4627)					HX_VARI( int,ptIndex) = secondBit.indexOf(HX_("pt",04,62,00,00),null());
HXLINE(4628)					bool _hx_tmp;
HXDLIN(4628)					if ((ptIndex != (int)-1)) {
HXLINE(4628)						_hx_tmp = (ptIndex == (secondBit.length - (int)2));
            					}
            					else {
HXLINE(4628)						_hx_tmp = false;
            					}
HXDLIN(4628)					if (_hx_tmp) {
HXLINE(4631)						f = ::Std_obj::parseFloat(::StringTools_obj::replace(secondBit,HX_("pt",04,62,00,00),HX_("",00,00,00,00)));
HXLINE(4632)						hasPoint = true;
            					}
            					else {
HXLINE(4636)						f = ::Std_obj::parseFloat(secondBit);
            					}
HXLINE(4639)					if (::Math_obj::isNaN(f)) {
HXLINE(4641)						f = this->getAssetProperty((int)1,HX_("",00,00,00,00),secondBit);
            					}
HXLINE(4643)					bool _hx_tmp1;
HXDLIN(4643)					if ((f == (int)0)) {
HXLINE(4643)						_hx_tmp1 = (secondBit != HX_("0",30,00,00,00));
            					}
            					else {
HXLINE(4643)						_hx_tmp1 = false;
            					}
HXDLIN(4643)					if (_hx_tmp1) {
HXLINE(4645)						return null();
            					}
            					else {
HXLINE(4649)						return ::cpp::VirtualArray_obj::__new(4)->init(0,firstBit)->init(1,_hx_operator)->init(2,f)->init(3,hasPoint);
            					}
            				}
            			}
            		}
HXLINE(4655)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_getOperation,return )

Float FlxUI_obj::_doOperation(Float value,::String _hx_operator,Float operand){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4659__doOperation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(_hx_operator,"operator")
            	HX_STACK_ARG(operand,"operand")
HXLINE(4660)		::String _hx_switch_0 = _hx_operator;
            		if (  (_hx_switch_0==HX_("*",2a,00,00,00)) ){
HXLINE(4665)			return (value * operand);
HXDLIN(4665)			goto _hx_goto_238;
            		}
            		if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE(4662)			return (value + operand);
HXDLIN(4662)			goto _hx_goto_238;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE(4663)			return (value - operand);
HXDLIN(4663)			goto _hx_goto_238;
            		}
            		if (  (_hx_switch_0==HX_("/",2f,00,00,00)) ){
HXLINE(4664)			return ((Float)value / (Float)operand);
HXDLIN(4664)			goto _hx_goto_238;
            		}
            		if (  (_hx_switch_0==HX_("^",5e,00,00,00)) ){
HXLINE(4666)			return ::Math_obj::pow(value,operand);
HXDLIN(4666)			goto _hx_goto_238;
            		}
            		_hx_goto_238:;
HXLINE(4668)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_doOperation,return )

Float FlxUI_obj::_getStretch(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4672__getStretch)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(str,"str")
HXLINE(4673)		HX_VARI( ::cpp::VirtualArray,arr) = null();
HXLINE(4675)		HX_VARI_NAME( ::String,_hx_operator,"operator") = HX_("",00,00,00,00);
HXLINE(4676)		HX_VARI( Float,operand) = (int)0;
HXLINE(4677)		HX_VARI( bool,hasPoint) = false;
HXLINE(4679)		arr = this->_getOperation(str);
HXLINE(4681)		if (hx::IsNotNull( arr )) {
HXLINE(4683)			str = ( (::String)(arr->__get((int)0)) );
HXLINE(4684)			_hx_operator = ( (::String)(arr->__get((int)1)) );
HXLINE(4685)			operand = ( (Float)(arr->__get((int)2)) );
HXLINE(4686)			hasPoint = ( (bool)(arr->__get((int)3)) );
HXLINE(4688)			if (hasPoint) {
HXLINE(4689)				::String _hx_switch_0 = target;
            				if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(4693)					operand = (operand * this->_pointY);
HXDLIN(4693)					goto _hx_goto_240;
            				}
            				if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(4691)					operand = (operand * this->_pointX);
HXDLIN(4691)					goto _hx_goto_240;
            				}
            				/* default */{
HXLINE(4695)					operand = (operand * this->_pointY);
            				}
            				_hx_goto_240:;
            			}
            		}
HXLINE(4700)		HX_VARI( Float,return_val) = this->getAssetProperty(index,target,str);
HXLINE(4702)		bool _hx_tmp;
HXDLIN(4702)		if ((return_val != (int)-1)) {
HXLINE(4702)			_hx_tmp = (_hx_operator != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4702)			_hx_tmp = false;
            		}
HXDLIN(4702)		if (_hx_tmp) {
HXLINE(4704)			return_val = this->_doOperation(return_val,_hx_operator,operand);
            		}
HXLINE(4707)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getStretch,return )

Float FlxUI_obj::getAssetProperty(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4711_getAssetProperty)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(str,"str")
HXLINE(4712)		HX_VARI( ::String,prop) = HX_("",00,00,00,00);
HXLINE(4714)		if ((str.indexOf(HX_(".",2e,00,00,00),null()) != (int)-1)) {
HXLINE(4716)			HX_VARI( ::Array< ::String >,arr) = null();
HXLINE(4717)			arr = str.split(HX_(".",2e,00,00,00));
HXLINE(4718)			str = arr->__get((int)0);
HXLINE(4719)			prop = arr->__get((int)1);
            		}
HXLINE(4722)		HX_VARI( ::Dynamic,other) = this->getAsset(str,null());
HXLINE(4724)		HX_VARI( Float,return_val) = (int)0;
HXLINE(4726)		if (hx::IsNull( other )) {
HXLINE(4728)			::String _hx_switch_0 = str;
            			if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(4731)				return_val = this->thisHeight();
HXDLIN(4731)				goto _hx_goto_242;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4732)				return_val = (int)0;
HXDLIN(4732)				goto _hx_goto_242;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4733)				return_val = this->thisWidth();
HXDLIN(4733)				goto _hx_goto_242;
            			}
            			if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(4730)				return_val = (int)0;
HXDLIN(4730)				goto _hx_goto_242;
            			}
            			/* default */{
HXLINE(4735)				if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(4737)					return_val = ::Std_obj::parseFloat(str);
            				}
            				else {
HXLINE(4741)					return_val = (int)-1;
            				}
            			}
            			_hx_goto_242:;
            		}
            		else {
HXLINE(4747)			::String _hx_switch_1 = target;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(4771)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(4773)					if ((index == (int)0)) {
HXLINE(4773)						HX_VARI_NAME( Float,other1,"other") = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4773)						return_val = (other1 + ( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ));
            					}
HXLINE(4774)					if ((index == (int)1)) {
HXLINE(4774)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(4778)					::String _hx_switch_2 = prop;
            					if (  (_hx_switch_2==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE(4780)						HX_VARI_NAME( Float,other2,"other") = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4780)						return_val = (other2 + ( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ));
HXDLIN(4780)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("center",d5,25,db,05)) ){
HXLINE(4783)						HX_VARI_NAME( Float,other3,"other") = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4783)						return_val = (other3 + ((Float)( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2));
HXDLIN(4783)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4786)						return_val = ((Float)( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2);
HXDLIN(4786)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4787)						return_val = ((Float)( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2);
HXDLIN(4787)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("height",e7,07,4c,02)) ){
HXLINE(4784)						return_val = ( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXDLIN(4784)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE(4781)						HX_VARI_NAME( Float,other4,"other") = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4781)						return_val = (other4 + ( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ));
HXDLIN(4781)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("top",95,66,58,00)) ||  (_hx_switch_2==HX_("up",5b,66,00,00)) ||  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(4779)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4779)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("width",06,b6,62,ca)) ){
HXLINE(4785)						return_val = ( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXDLIN(4785)						goto _hx_goto_245;
            					}
            					if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ||  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(4782)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4782)						goto _hx_goto_245;
            					}
            					_hx_goto_245:;
            				}
HXLINE(4771)				goto _hx_goto_244;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(4750)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(4752)					if ((index == (int)0)) {
HXLINE(4752)						HX_VARI_NAME( Float,other5,"other") = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4752)						return_val = (other5 + ( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ));
            					}
HXLINE(4753)					if ((index == (int)1)) {
HXLINE(4753)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(4757)					::String _hx_switch_3 = prop;
            					if (  (_hx_switch_3==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_3==HX_("down",62,f8,6d,42)) ){
HXLINE(4760)						HX_VARI_NAME( Float,other6,"other") = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4760)						return_val = (other6 + ( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ));
HXDLIN(4760)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("center",d5,25,db,05)) ){
HXLINE(4763)						HX_VARI_NAME( Float,other7,"other") = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4763)						return_val = (other7 + ((Float)( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2));
HXDLIN(4763)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4766)						return_val = ((Float)( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2);
HXDLIN(4766)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4767)						return_val = ((Float)( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2);
HXDLIN(4767)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("height",e7,07,4c,02)) ){
HXLINE(4765)						return_val = ( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXDLIN(4765)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE(4761)						HX_VARI_NAME( Float,other8,"other") = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4761)						return_val = (other8 + ( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ));
HXDLIN(4761)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("top",95,66,58,00)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ||  (_hx_switch_3==HX_("y",79,00,00,00)) ){
HXLINE(4759)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4759)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("width",06,b6,62,ca)) ){
HXLINE(4764)						return_val = ( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXDLIN(4764)						goto _hx_goto_246;
            					}
            					if (  (_hx_switch_3==HX_("left",07,08,b0,47)) ||  (_hx_switch_3==HX_("x",78,00,00,00)) ){
HXLINE(4762)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4762)						goto _hx_goto_246;
            					}
            					_hx_goto_246:;
            				}
HXLINE(4750)				goto _hx_goto_244;
            			}
            			/* default */{
HXLINE(4791)				::String _hx_switch_4 = prop;
            				if (  (_hx_switch_4==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_4==HX_("down",62,f8,6d,42)) ){
HXLINE(4794)					HX_VARI_NAME( Float,other9,"other") = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4794)					return_val = (other9 + ( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ));
HXDLIN(4794)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("centerx",03,f5,e5,19)) ){
HXLINE(4798)					HX_VARI_NAME( Float,other10,"other") = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4798)					return_val = (other10 + ((Float)( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2));
HXDLIN(4798)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("centery",04,f5,e5,19)) ){
HXLINE(4797)					HX_VARI_NAME( Float,other11,"other") = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4797)					return_val = (other11 + ((Float)( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2));
HXDLIN(4797)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(4801)					return_val = ((Float)( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2);
HXDLIN(4801)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(4802)					return_val = ((Float)( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2);
HXDLIN(4802)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("height",e7,07,4c,02)) ){
HXLINE(4799)					return_val = ( (Float)(other->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) );
HXDLIN(4799)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("right",dc,0b,64,e9)) ){
HXLINE(4795)					HX_VARI_NAME( Float,other12,"other") = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4795)					return_val = (other12 + ( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ));
HXDLIN(4795)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("top",95,66,58,00)) ||  (_hx_switch_4==HX_("up",5b,66,00,00)) ||  (_hx_switch_4==HX_("y",79,00,00,00)) ){
HXLINE(4793)					return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(4793)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("width",06,b6,62,ca)) ){
HXLINE(4800)					return_val = ( (Float)(other->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) );
HXDLIN(4800)					goto _hx_goto_243;
            				}
            				if (  (_hx_switch_4==HX_("left",07,08,b0,47)) ||  (_hx_switch_4==HX_("x",78,00,00,00)) ){
HXLINE(4796)					return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(4796)					goto _hx_goto_243;
            				}
            				_hx_goto_243:;
            			}
            			_hx_goto_244:;
            		}
HXLINE(4806)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,getAssetProperty,return )

void FlxUI_obj::_loadCursor( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4811__loadCursor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(4811)		if (data->hasNode->resolve(HX_("list",5e,1c,b3,47))) {
HXLINE(4813)			if (hx::IsNull( this->cursorLists )) {
HXLINE(4815)				this->cursorLists = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE(4817)			{
HXLINE(4817)				HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("list",5e,1c,b3,47))->h;
HXDLIN(4817)				while(hx::IsNotNull( _g_head )){
HXLINE(4817)					HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(4817)					_g_head = _g_head->next;
HXLINE(4820)					HX_VARI( ::Array< ::String >,arr) = ::flixel::addons::ui::U_obj::xml_str(val->x,HX_("ids",38,04,50,00),null(),null()).split(HX_(",",2c,00,00,00));
HXLINE(4821)					bool _hx_tmp;
HXDLIN(4821)					if (hx::IsNotNull( arr )) {
HXLINE(4821)						_hx_tmp = (arr->length > (int)0);
            					}
            					else {
HXLINE(4821)						_hx_tmp = false;
            					}
HXDLIN(4821)					if (_hx_tmp) {
HXLINE(4823)						HX_VARI( ::Array< ::Dynamic>,list) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4824)						{
HXLINE(4824)							HX_VARI( int,_g) = (int)0;
HXDLIN(4824)							while((_g < arr->length)){
HXLINE(4824)								HX_VARI( ::String,str) = arr->__get(_g);
HXDLIN(4824)								_g = (_g + (int)1);
HXLINE(4826)								HX_VARI( ::Dynamic,widget) = this->getAsset(str,null());
HXLINE(4827)								if (hx::IsNotNull( widget )) {
HXLINE(4829)									list->push(widget);
            								}
            							}
            						}
HXLINE(4832)						this->cursorLists->push(list);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCursor,(void))

void FlxUI_obj::_loadPosition( ::haxe::xml::Fast data,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4839__loadPosition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(thing,"thing")
HXLINE(4840)		HX_VARI( Float,X) = this->_loadWidth(data,(int)0,HX_("x",78,00,00,00),null());
HXLINE(4841)		HX_VARI( Float,Y) = this->_loadHeight(data,(int)0,HX_("y",79,00,00,00),null());
HXLINE(4843)		::flixel::addons::ui::U_obj::xml_name(data->x);
HXLINE(4848)		HX_VARI( bool,ctrX) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("center_x",4e,58,50,8f),null());
HXLINE(4849)		HX_VARI( bool,ctrY) = ::flixel::addons::ui::U_obj::xml_bool(data->x,HX_("center_y",4f,58,50,8f),null());
HXLINE(4851)		HX_VARI( ::String,center_on) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("center_on",89,e4,fc,d6),null(),null());
HXLINE(4852)		HX_VARI( ::String,center_on_x) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("center_on_x",02,2c,66,3b),null(),null());
HXLINE(4853)		HX_VARI( ::String,center_on_y) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("center_on_y",03,2c,66,3b),null(),null());
HXLINE(4855)		HX_VARI( ::String,anchor_x_str) = HX_("",00,00,00,00);
HXLINE(4856)		HX_VARI( ::String,anchor_y_str) = HX_("",00,00,00,00);
HXLINE(4857)		HX_VARI( Float,anchor_x) = (int)0;
HXLINE(4858)		HX_VARI( Float,anchor_y) = (int)0;
HXLINE(4859)		HX_VARI( ::String,anchor_x_flush) = HX_("",00,00,00,00);
HXLINE(4860)		HX_VARI( ::String,anchor_y_flush) = HX_("",00,00,00,00);
HXLINE(4862)		if (data->hasNode->resolve(HX_("anchor",75,3a,71,60))) {
HXLINE(4864)			anchor_x_str = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x",78,00,00,00),null(),null());
HXLINE(4865)			anchor_y_str = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y",79,00,00,00),null(),null());
HXLINE(4867)			HX_VARI(  ::flixel::addons::ui::Rounding,rounding) = this->getRound(data->node->resolve(HX_("anchor",75,3a,71,60)),null());
HXLINE(4869)			anchor_x = this->_getAnchorPos(thing,HX_("x",78,00,00,00),anchor_x_str);
HXLINE(4870)			anchor_y = this->_getAnchorPos(thing,HX_("y",79,00,00,00),anchor_y_str);
HXLINE(4872)			anchor_x = this->doRound(anchor_x,rounding);
HXLINE(4873)			anchor_y = this->doRound(anchor_y,rounding);
HXLINE(4875)			anchor_x_flush = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("x-flush",ef,49,ba,7e),true,null());
HXLINE(4876)			anchor_y_flush = ::flixel::addons::ui::U_obj::xml_str(data->node->resolve(HX_("anchor",75,3a,71,60))->x,HX_("y-flush",b0,c0,4f,a8),true,null());
            		}
HXLINE(4880)		bool _hx_tmp;
HXDLIN(4880)		if ((anchor_x_str == HX_("",00,00,00,00))) {
HXLINE(4880)			_hx_tmp = (anchor_y_str != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4880)			_hx_tmp = true;
            		}
HXDLIN(4880)		if (_hx_tmp) {
HXLINE(4882)			::String _hx_switch_0 = anchor_x_flush;
            			if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(4886)				anchor_x = (anchor_x - ((Float)( (Float)(thing->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2));
HXDLIN(4886)				goto _hx_goto_251;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(4884)				goto _hx_goto_251;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(4885)				anchor_x = (anchor_x - ( (Float)(thing->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ));
HXDLIN(4885)				goto _hx_goto_251;
            			}
            			_hx_goto_251:;
HXLINE(4888)			::String _hx_switch_1 = anchor_y_flush;
            			if (  (_hx_switch_1==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE(4891)				anchor_y = (anchor_y - ( (Float)(thing->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ));
HXDLIN(4891)				goto _hx_goto_252;
            			}
            			if (  (_hx_switch_1==HX_("center",d5,25,db,05)) ){
HXLINE(4892)				anchor_y = (anchor_y - ((Float)( (Float)(thing->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2));
HXDLIN(4892)				goto _hx_goto_252;
            			}
            			if (  (_hx_switch_1==HX_("top",95,66,58,00)) ||  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE(4890)				goto _hx_goto_252;
            			}
            			_hx_goto_252:;
HXLINE(4895)			if ((anchor_x_str != HX_("",00,00,00,00))) {
HXLINE(4897)				::flixel::IFlxSprite_obj::set_x(thing,anchor_x);
            			}
HXLINE(4899)			if ((anchor_y_str != HX_("",00,00,00,00))) {
HXLINE(4901)				::flixel::IFlxSprite_obj::set_y(thing,anchor_y);
            			}
            		}
HXLINE(4907)		bool _hx_tmp1;
HXDLIN(4907)		if (!(ctrX)) {
HXLINE(4907)			_hx_tmp1 = ctrY;
            		}
            		else {
HXLINE(4907)			_hx_tmp1 = true;
            		}
HXDLIN(4907)		if (_hx_tmp1) {
HXLINE(4908)			if (ctrX) {
HXLINE(4908)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(4908)				::flixel::IFlxSprite_obj::set_x(thing,((Float)(_hx_tmp2 - ( (Float)(thing->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )) / (Float)(int)2));
            			}
HXDLIN(4908)			if (ctrY) {
HXLINE(4908)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(4908)				::flixel::IFlxSprite_obj::set_y(thing,((Float)(_hx_tmp3 - ( (Float)(thing->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )) / (Float)(int)2));
            			}
            		}
HXLINE(4912)		if ((center_on != HX_("",00,00,00,00))) {
HXLINE(4914)			HX_VARI( ::Dynamic,other) = this->getAsset(center_on,null());
HXLINE(4915)			if (hx::IsNotNull( other )) {
HXLINE(4917)				HX_VARI(  ::flixel::FlxObject,fb1) = hx::TCast<  ::flixel::FlxObject >::cast(other);
HXDLIN(4917)				HX_VARI(  ::flixel::FlxObject,fb2) = hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4917)				{
HXLINE(4917)					HX_VARI_NAME( Float,fb11,"fb1") = fb1->x;
HXDLIN(4917)					Float _hx_tmp4 = fb1->get_width();
HXDLIN(4917)					fb2->set_x((fb11 + ((Float)(_hx_tmp4 - fb2->get_width()) / (Float)(int)2)));
            				}
HXDLIN(4917)				{
HXLINE(4917)					HX_VARI_NAME( Float,fb12,"fb1") = fb1->y;
HXDLIN(4917)					Float _hx_tmp5 = fb1->get_height();
HXDLIN(4917)					fb2->set_y((fb12 + ((Float)(_hx_tmp5 - fb2->get_height()) / (Float)(int)2)));
            				}
            			}
            		}
            		else {
HXLINE(4922)			if ((center_on_x != HX_("",00,00,00,00))) {
HXLINE(4924)				HX_VARI_NAME( ::Dynamic,other1,"other") = this->getAsset(center_on_x,null());
HXLINE(4925)				if (hx::IsNotNull( other1 )) {
HXLINE(4927)					HX_VARI_NAME(  ::flixel::FlxObject,fb13,"fb1") = hx::TCast<  ::flixel::FlxObject >::cast(other1);
HXDLIN(4927)					HX_VARI_NAME(  ::flixel::FlxObject,fb21,"fb2") = hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4927)					HX_VARI_NAME( Float,fb14,"fb1") = fb13->x;
HXDLIN(4927)					Float _hx_tmp6 = fb13->get_width();
HXDLIN(4927)					fb21->set_x((fb14 + ((Float)(_hx_tmp6 - fb21->get_width()) / (Float)(int)2)));
            				}
            			}
HXLINE(4930)			if ((center_on_y != HX_("",00,00,00,00))) {
HXLINE(4932)				HX_VARI_NAME( ::Dynamic,other2,"other") = this->getAsset(center_on_y,null());
HXLINE(4933)				if (hx::IsNotNull( other2 )) {
HXLINE(4935)					HX_VARI_NAME(  ::flixel::FlxObject,fb15,"fb1") = hx::TCast<  ::flixel::FlxObject >::cast(other2);
HXDLIN(4935)					HX_VARI_NAME(  ::flixel::FlxObject,fb22,"fb2") = hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(4935)					HX_VARI_NAME( Float,fb16,"fb1") = fb15->y;
HXDLIN(4935)					Float _hx_tmp7 = fb15->get_height();
HXDLIN(4935)					fb22->set_y((fb16 + ((Float)(_hx_tmp7 - fb22->get_height()) / (Float)(int)2)));
            				}
            			}
            		}
HXLINE(4941)		{
HXLINE(4941)			::flixel::IFlxSprite_obj::set_x(thing,(( (Float)(thing->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + X));
HXDLIN(4941)			::flixel::IFlxSprite_obj::set_y(thing,(( (Float)(thing->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + Y));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadPosition,(void))

 ::flixel::addons::ui::BorderDef FlxUI_obj::_loadBorder( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4945__loadBorder)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(4946)		HX_VARI(  ::flixel::addons::ui::BorderDef,borderDef) = ::flixel::addons::ui::BorderDef_obj::fromXML(data->x);
HXLINE(4948)		HX_VARI(  ::flixel::addons::ui::Rounding,round) = this->getRound(data,HX_("floor",cc,d1,96,02));
HXLINE(4952)		borderDef->size = ::Std_obj::_hx_int(this->doRound(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data->x,HX_("border_size",34,18,b0,f8),null(),null()),(int)1),round));
HXLINE(4954)		return borderDef;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBorder,return )

int FlxUI_obj::_loadColor( ::haxe::xml::Fast data,::String __o_colorName,hx::Null< int >  __o__default){
::String colorName = __o_colorName.Default(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
int _default = __o__default.Default(-1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4957__loadColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(colorName,"colorName")
            	HX_STACK_ARG(_default,"_default")
HXLINE(4958)		HX_VARI( ::String,colorStr) = ::flixel::addons::ui::U_obj::xml_str(data->x,colorName,null(),null());
HXLINE(4959)		bool _hx_tmp;
HXDLIN(4959)		if ((colorStr == HX_("",00,00,00,00))) {
HXLINE(4959)			HX_VARI(  ::Xml,_this) = data->x;
HXDLIN(4959)			if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(4959)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + _this->nodeType));
            			}
HXDLIN(4959)			_hx_tmp = (_this->nodeName == colorName);
            		}
            		else {
HXLINE(4959)			_hx_tmp = false;
            		}
HXDLIN(4959)		if (_hx_tmp) {
HXLINE(4960)			colorStr = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("value",71,7f,b8,31),null(),null());
            		}
HXLINE(4962)		HX_VARI( int,color) = _default;
HXLINE(4963)		if ((colorStr != HX_("",00,00,00,00))) {
HXLINE(4963)			HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(colorStr);
HXDLIN(4963)			if (hx::IsNull( return_val )) {
HXLINE(4963)				HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + colorStr));
            			}
HXDLIN(4963)			color = return_val;
            		}
HXLINE(4964)		return color;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadColor,return )

 ::flixel::addons::ui::FontDef FlxUI_obj::_loadFontDef( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4967__loadFontDef)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(4968)		HX_VARI(  ::flixel::addons::ui::FontDef,fd) = ::flixel::addons::ui::FontDef_obj::fromXML(data->x);
HXLINE(4969)		HX_VARI( int,fontSize) = ::Std_obj::_hx_int(this->_loadHeight(data,(int)8,HX_("size",c1,a0,53,4c),null()));
HXLINE(4970)		fd->format->size = fontSize;
HXLINE(4971)		fd->set_size(fontSize);
HXLINE(4972)		return fd;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontDef,return )

::String FlxUI_obj::_loadFontFace( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4975__loadFontFace)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(4976)		HX_VARI( ::String,fontFace) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("font",cf,5d,c0,43),null(),null());
HXLINE(4977)		HX_VARI( ::String,fontStyle) = ::flixel::addons::ui::U_obj::xml_str(data->x,HX_("style",31,a5,1d,84),null(),null());
HXLINE(4978)		HX_VARI( ::String,the_font) = null();
HXLINE(4979)		if ((fontFace != HX_("",00,00,00,00))) {
HXLINE(4979)			the_font = ::flixel::addons::ui::U_obj::font(fontFace,fontStyle,null());
            		}
HXLINE(4980)		return the_font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontFace,return )

void FlxUI_obj::_onFinishLoad(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4985__onFinishLoad)
            	HX_STACK_THIS(this)
HXLINE(4985)		if (hx::IsNotNull( this->_ptr )) {
HXLINE(4987)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,HX_("finish_load",d2,68,a0,8e),hx::ObjectPtr<OBJ_>(this),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_onFinishLoad,(void))

::String FlxUI_obj::getText(::String flag,::String __o_context,hx::Null< bool >  __o_safe,::String __o_code){
::String context = __o_context.Default(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
bool safe = __o_safe.Default(true);
::String code = __o_code.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4993_getText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(flag,"flag")
            	HX_STACK_ARG(context,"context")
            	HX_STACK_ARG(safe,"safe")
            	HX_STACK_ARG(code,"code")
HXLINE(4994)		HX_VARI( ::String,str) = HX_("",00,00,00,00);
HXLINE(4995)		if (hx::IsNotNull( this->_ptr_tongue )) {
HXLINE(4996)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::get(this->_ptr_tongue,flag,context,safe);
HXLINE(4997)			return this->formatFromCode(str,code);
            		}
            		else {
HXLINE(4998)			if (hx::IsNotNull( this->getTextFallback )) {
HXLINE(4999)				str = ( (::String)(this->getTextFallback(flag,context,safe)) );
HXLINE(5000)				return this->formatFromCode(str,code);
            			}
            		}
HXLINE(5003)		return flag;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getText,return )

::String FlxUI_obj::formatFromCode(::String str,::String code){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5006_formatFromCode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(str,"str")
            	HX_STACK_ARG(code,"code")
HXLINE(5007)		::String _hx_switch_0 = code;
            		if (  (_hx_switch_0==HX_("fu",4f,59,00,00)) ){
HXLINE(5010)			return ::flixel::addons::ui::U_obj::FU(str);
HXDLIN(5010)			goto _hx_goto_260;
            		}
            		if (  (_hx_switch_0==HX_("fu_",30,cc,4d,00)) ){
HXLINE(5011)			return ::flixel::addons::ui::U_obj::FU_(str);
HXDLIN(5011)			goto _hx_goto_260;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ){
HXLINE(5009)			return str.toLowerCase();
HXDLIN(5009)			goto _hx_goto_260;
            		}
            		if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(5008)			return str.toUpperCase();
HXDLIN(5008)			goto _hx_goto_260;
            		}
            		_hx_goto_260:;
HXLINE(5013)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatFromCode,return )

 ::flixel::text::FlxText FlxUI_obj::formatButtonText( ::haxe::xml::Fast data, ::Dynamic button){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5073_formatButtonText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(button,"button")
HXLINE(5074)		bool _hx_tmp;
HXDLIN(5074)		if (hx::IsNotNull( data )) {
HXLINE(5074)			_hx_tmp = data->hasNode->resolve(HX_("text",ad,cc,f9,4c));
            		}
            		else {
HXLINE(5074)			_hx_tmp = false;
            		}
HXDLIN(5074)		if (_hx_tmp) {
HXLINE(5076)			HX_VARI(  ::haxe::xml::Fast,textNode) = data->node->resolve(HX_("text",ad,cc,f9,4c));
HXLINE(5077)			HX_VARI( ::String,use_def) = ::flixel::addons::ui::U_obj::xml_str(textNode->x,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(5078)			HX_VARI(  ::haxe::xml::Fast,text_def) = null();
HXLINE(5080)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(5082)				text_def = this->getDefinition(use_def,null());
            			}
HXLINE(5085)			HX_VARI(  ::haxe::xml::Fast,info) = ::flixel::addons::ui::FlxUI_obj::consolidateData(textNode,text_def,null());
HXLINE(5087)			::flixel::addons::ui::U_obj::xml_name(info->x);
HXLINE(5088)			HX_VARI( ::String,the_font) = this->_loadFontFace(info);
HXLINE(5089)			HX_VARI( int,size) = ::Std_obj::_hx_int(this->_loadHeight(info,(int)8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(5090)			HX_VARI( int,color) = this->_loadColor(info,null(),null());
HXLINE(5092)			HX_VARI( Float,labelWidth) = ::flixel::addons::ui::U_obj::xml_f(info->x,HX_("width",06,b6,62,ca),null());
HXLINE(5094)			HX_VARI(  ::flixel::addons::ui::BorderDef,border) = this->_loadBorder(info);
HXLINE(5096)			HX_VARI( ::String,align) = ::flixel::addons::ui::U_obj::xml_str(info->x,HX_("align",c5,56,91,21),true,null());
HXDLIN(5096)			if ((align == HX_("",00,00,00,00))) {
HXLINE(5096)				align = null();
            			}
HXLINE(5098)			HX_VARI(  ::flixel::text::FlxText,the_label) = null();
HXLINE(5099)			HX_VARI(  ::flixel::addons::ui::FlxUIButton,fb) = null();
HXLINE(5100)			HX_VARI(  ::flixel::addons::ui::FlxUISpriteButton,fsb) = null();
HXLINE(5102)			HX_VARI( ::Dynamic,ifb) = null();
HXLINE(5104)			if ((::Std_obj::is(button,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >()) == false)) {
HXLINE(5106)				ifb = button;
HXLINE(5107)				bool _hx_tmp1;
HXDLIN(5107)				if ((align != HX_("",00,00,00,00))) {
HXLINE(5107)					_hx_tmp1 = hx::IsNull( align );
            				}
            				else {
HXLINE(5107)					_hx_tmp1 = true;
            				}
HXDLIN(5107)				if (_hx_tmp1) {
HXLINE(5109)					align = HX_("center",d5,25,db,05);
            				}
            			}
            			else {
HXLINE(5115)				ifb = ( ( ::flixel::addons::ui::FlxUICheckBox)(button) )->button;
HXLINE(5116)				align = HX_("left",07,08,b0,47);
            			}
HXLINE(5119)			if (hx::IsNotNull( ifb )) {
HXLINE(5121)				if (::Std_obj::is(ifb,hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(5123)					fb = ( ( ::flixel::addons::ui::FlxUIButton)(ifb) );
HXLINE(5124)					the_label = ( ( ::flixel::text::FlxText)(fb->label) );
            				}
            				else {
HXLINE(5126)					if (::Std_obj::is(ifb,hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(5128)						fsb = ( ( ::flixel::addons::ui::FlxUISpriteButton)(ifb) );
HXLINE(5129)						if (::Std_obj::is(fsb->label,hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5131)							the_label = ( ( ::flixel::text::FlxText)(fsb->label) );
            						}
            						else {
HXLINE(5133)							if (::Std_obj::is(fsb->label,hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(5136)								HX_VARI( int,_g) = (int)0;
HXDLIN(5136)								HX_VARI( ::Array< ::Dynamic>,_g1) = ( ( ::flixel::group::FlxTypedSpriteGroup)(fsb->label) )->group->members;
HXDLIN(5136)								while((_g < _g1->length)){
HXLINE(5136)									HX_VARI(  ::flixel::FlxSprite,fs) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(5136)									_g = (_g + (int)1);
HXLINE(5137)									if (::Std_obj::is(fs,hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5138)										the_label = ( ( ::flixel::text::FlxText)(fs) );
HXLINE(5139)										goto _hx_goto_262;
            									}
            								}
            								_hx_goto_262:;
            							}
            						}
            					}
            				}
HXLINE(5145)				ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color,hx::paccDynamic);
HXLINE(5146)				ifb->__SetField(HX_("down_color",86,26,b3,4e),(int)0,hx::paccDynamic);
HXLINE(5147)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),(int)0,hx::paccDynamic);
            			}
HXLINE(5150)			if (hx::IsNotNull( the_label )) {
HXLINE(5152)				if ((labelWidth != (int)0)) {
HXLINE(5154)					the_label->set_width(labelWidth);
HXLINE(5155)					the_label->resetHelpers();
            				}
HXLINE(5158)				if (hx::IsNotNull( fb )) {
HXLINE(5160)					fb->setLabelFormat(the_font,size,color,align,null(),null(),null());
            				}
            				else {
HXLINE(5164)					the_label->setFormat(the_font,size,color,align,null(),null(),null());
            				}
HXLINE(5167)				the_label->set_borderStyle(border->style);
HXLINE(5168)				the_label->set_borderColor(border->color);
HXLINE(5169)				the_label->set_borderSize(border->size);
HXLINE(5170)				the_label->set_borderQuality(border->quality);
HXLINE(5172)				if (::Std_obj::is(the_label,hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(5175)					( ( ::flixel::addons::ui::FlxUIText)(the_label) )->drawFrame(null());
            				}
HXLINE(5178)				if (hx::IsNotNull( fb )) {
HXLINE(5180)					fb->autoCenterLabel();
            				}
HXLINE(5182)				if (hx::IsNotNull( fsb )) {
HXLINE(5184)					fsb->autoCenterLabel();
            				}
            			}
HXLINE(5188)			{
HXLINE(5188)				HX_VARI(  ::_List::ListNode,_g_head) = info->nodes->resolve(HX_("color",63,71,5c,4a))->h;
HXDLIN(5188)				while(hx::IsNotNull( _g_head )){
HXLINE(5188)					HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(5188)					_g_head = _g_head->next;
HXLINE(5190)					HX_VARI_NAME( int,color1,"color") = this->_loadColor(val,null(),null());
HXLINE(5191)					HX_VARI( bool,vis) = ::flixel::addons::ui::U_obj::xml_bool(val->x,HX_("visible",72,78,24,a3),true);
HXLINE(5192)					HX_VARI( ::String,state_name) = ::flixel::addons::ui::U_obj::xml_name(val->x);
HXLINE(5193)					HX_VARI( bool,toggle) = ::flixel::addons::ui::U_obj::xml_bool(val->x,HX_("toggle",94,bf,43,8f),null());
HXLINE(5194)					::String _hx_switch_0 = state_name;
            					if (  (_hx_switch_0==HX_("active",c6,41,46,16)) ||  (_hx_switch_0==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_0==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_0==HX_("over",54,91,b8,49)) ){
HXLINE(5208)						if (!(toggle)) {
HXLINE(5210)							ifb->__SetField(HX_("over_color",f8,00,4a,f7),color1,hx::paccDynamic);
HXLINE(5211)							ifb->__SetField(HX_("over_visible",47,d7,44,92),vis,hx::paccDynamic);
            						}
            						else {
HXLINE(5215)							ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),color1,hx::paccDynamic);
HXLINE(5216)							ifb->__SetField(HX_("over_toggle_visible",52,9b,c8,49),vis,hx::paccDynamic);
            						}
HXLINE(5208)						goto _hx_goto_264;
            					}
            					if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_0==HX_("pushed",b9,14,2d,72)) ){
HXLINE(5219)						if (!(toggle)) {
HXLINE(5221)							ifb->__SetField(HX_("down_color",86,26,b3,4e),color1,hx::paccDynamic);
HXLINE(5222)							ifb->__SetField(HX_("down_visible",55,fc,6c,72),vis,hx::paccDynamic);
            						}
            						else {
HXLINE(5226)							ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),color1,hx::paccDynamic);
HXLINE(5227)							ifb->__SetField(HX_("down_toggle_visible",04,54,e1,a9),vis,hx::paccDynamic);
            						}
HXLINE(5219)						goto _hx_goto_264;
            					}
            					if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5197)						if (!(toggle)) {
HXLINE(5199)							ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color1,hx::paccDynamic);
HXLINE(5200)							ifb->__SetField(HX_("up_visible",4e,8b,83,08),vis,hx::paccDynamic);
            						}
            						else {
HXLINE(5204)							ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),color1,hx::paccDynamic);
HXLINE(5205)							ifb->__SetField(HX_("up_toggle_visible",2b,86,e9,3f),vis,hx::paccDynamic);
            						}
HXLINE(5197)						goto _hx_goto_264;
            					}
            					_hx_goto_264:;
            				}
            			}
HXLINE(5232)			if (hx::IsEq( ifb->__Field(HX_("over_color",f8,00,4a,f7),hx::paccDynamic),(int)0 )) {
HXLINE(5234)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),ifb->__Field(HX_("up_color",3f,d5,b5,9b),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5236)			if (hx::IsEq( ifb->__Field(HX_("down_color",86,26,b3,4e),hx::paccDynamic),(int)0 )) {
HXLINE(5238)				ifb->__SetField(HX_("down_color",86,26,b3,4e),ifb->__Field(HX_("over_color",f8,00,4a,f7),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5242)			if (hx::IsEq( ifb->__Field(HX_("up_toggle_color",dc,6e,0c,dd),hx::paccDynamic),(int)0 )) {
HXLINE(5244)				ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),ifb->__Field(HX_("up_color",3f,d5,b5,9b),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5246)			if (hx::IsEq( ifb->__Field(HX_("over_toggle_color",43,1c,98,aa),hx::paccDynamic),(int)0 )) {
HXLINE(5248)				ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),ifb->__Field(HX_("over_color",f8,00,4a,f7),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5250)			if (hx::IsEq( ifb->__Field(HX_("down_toggle_color",75,e4,c8,06),hx::paccDynamic),(int)0 )) {
HXLINE(5252)				ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),ifb->__Field(HX_("down_color",86,26,b3,4e),hx::paccDynamic),hx::paccDynamic);
            			}
HXLINE(5255)			if (hx::IsNotNull( the_label )) {
HXLINE(5256)				the_label->set_visible(( (bool)(ifb->__Field(HX_("up_visible",4e,8b,83,08),hx::paccDynamic)) ));
HXLINE(5257)				the_label->set_color(( (int)(ifb->__Field(HX_("up_color",3f,d5,b5,9b),hx::paccDynamic)) ));
            			}
HXLINE(5259)			return the_label;
            		}
HXLINE(5261)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatButtonText,return )

void FlxUI_obj::event(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_140_event)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(sender,"sender")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(params,"params")
HXLINE( 141)		HX_VARI( ::Dynamic,currState) = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 143)		if (hx::IsNotNull( currState )) {
HXLINE( 144)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(currState,name,sender,data,params);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,event,(void))

void FlxUI_obj::forceFocus(bool b,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_156_forceFocus)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(thing,"thing")
HXLINE( 157)		HX_VARI( ::Dynamic,currState) = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 158)		if (hx::IsNotNull( currState )) {
HXLINE( 159)			::flixel::addons::ui::interfaces::IFlxUIState_obj::forceFocus(currState,b,thing);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,forceFocus,(void))

::Dynamic FlxUI_obj::getLeafUIState(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_168_getLeafUIState)
HXLINE( 169)		HX_VARI(  ::flixel::FlxState,state) = ::flixel::FlxG_obj::game->_state;
HXLINE( 170)		if (hx::IsNotNull( state )) {
HXLINE( 172)			while(hx::IsNotNull( state->subState )){
HXLINE( 174)				state = state->subState;
            			}
            		}
HXLINE( 177)		if (::Std_obj::is(state,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIState >())) {
HXLINE( 179)			return state;
            		}
HXLINE( 181)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getLeafUIState,return )

 ::Dynamic FlxUI_obj::request(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_193_request)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(sender,"sender")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(params,"params")
HXLINE( 194)		HX_VARI( ::Dynamic,currState) = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 195)		if (hx::IsNotNull( currState )) {
HXLINE( 196)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(currState,name,sender,data,params);
            		}
HXLINE( 200)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,request,return )

void FlxUI_obj::_delta(::Dynamic thing,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1395__delta)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(1396)		::flixel::IFlxSprite_obj::set_x(thing,(( (Float)(thing->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + X));
HXLINE(1397)		::flixel::IFlxSprite_obj::set_y(thing,(( (Float)(thing->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + Y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_delta,(void))

::Dynamic FlxUI_obj::_center(::Dynamic thing,hx::Null< bool >  __o_X,hx::Null< bool >  __o_Y){
bool X = __o_X.Default(true);
bool Y = __o_Y.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1407__center)
            	HX_STACK_ARG(thing,"thing")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(1408)		if (X) {
HXLINE(1408)			int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1408)			::flixel::IFlxSprite_obj::set_x(thing,((Float)(_hx_tmp - ( (Float)(thing->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )) / (Float)(int)2));
            		}
HXLINE(1409)		if (Y) {
HXLINE(1409)			int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(1409)			::flixel::IFlxSprite_obj::set_y(thing,((Float)(_hx_tmp1 - ( (Float)(thing->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )) / (Float)(int)2));
            		}
HXLINE(1410)		return thing;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_center,return )

 ::haxe::xml::Fast FlxUI_obj::consolidateData( ::haxe::xml::Fast data, ::haxe::xml::Fast definition,hx::Null< bool >  __o_combineUniqueChildren){
bool combineUniqueChildren = __o_combineUniqueChildren.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2606_consolidateData)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(definition,"definition")
            	HX_STACK_ARG(combineUniqueChildren,"combineUniqueChildren")
HXLINE(2607)		bool _hx_tmp;
HXDLIN(2607)		if (hx::IsNull( data )) {
HXLINE(2607)			_hx_tmp = hx::IsNotNull( definition );
            		}
            		else {
HXLINE(2607)			_hx_tmp = false;
            		}
HXDLIN(2607)		if (_hx_tmp) {
HXLINE(2609)			return definition;
            		}
HXLINE(2611)		if (hx::IsNull( definition )) {
HXLINE(2613)			return data;
            		}
            		else {
HXLINE(2620)			HX_VARI(  ::Xml,new_data) = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(definition->x,null()))->firstElement();
HXLINE(2622)			{
HXLINE(2622)				HX_VARI(  ::Dynamic,att) = data->x->attributes();
HXDLIN(2622)				while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2622)					HX_VARI_NAME( ::String,att1,"att") = ( (::String)(att->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2625)					new_data->set(att1,data->att->resolve(att1));
            				}
            			}
HXLINE(2629)			{
HXLINE(2629)				::String v = data->get_name();
HXDLIN(2629)				if ((new_data->nodeType != ::Xml_obj::Element)) {
HXLINE(2629)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + new_data->nodeType));
            				}
HXDLIN(2629)				new_data->nodeName = v;
            			}
HXLINE(2630)			bool _hx_tmp1;
HXDLIN(2630)			if (!(data->has->resolve(HX_("name",4b,72,ff,48)))) {
HXLINE(2630)				_hx_tmp1 = data->has->resolve(HX_("id",db,5b,00,00));
            			}
            			else {
HXLINE(2630)				_hx_tmp1 = true;
            			}
HXDLIN(2630)			if (_hx_tmp1) {
HXLINE(2632)				new_data->set(HX_("name",4b,72,ff,48),::flixel::addons::ui::U_obj::xml_name(data->x));
            			}
            			else {
HXLINE(2636)				new_data->set(HX_("name",4b,72,ff,48),HX_("",00,00,00,00));
            			}
HXLINE(2639)			{
HXLINE(2639)				HX_VARI(  ::Dynamic,element) = data->x->elements();
HXDLIN(2639)				while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2639)					HX_VARI_NAME(  ::Xml,element1,"element") = ( ( ::Xml)(element->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2641)					if ((element1->nodeType != ::Xml_obj::Element)) {
HXLINE(2641)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + element1->nodeType));
            					}
HXDLIN(2641)					HX_VARI( ::String,nodeName) = element1->nodeName;
HXLINE(2642)					HX_VARI( bool,notCombine) = !(combineUniqueChildren);
HXLINE(2643)					if (combineUniqueChildren) {
HXLINE(2645)						HX_VARI(  ::Dynamic,new_els) = new_data->elementsNamed(nodeName);
HXLINE(2646)						HX_VARI(  ::Xml,new_el) = ( ( ::Xml)(new_els->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2649)						bool _hx_tmp2;
HXDLIN(2649)						bool _hx_tmp3;
HXDLIN(2649)						if ((data->nodes->resolve(nodeName)->length == (int)1)) {
HXLINE(2649)							_hx_tmp3 = hx::IsNotNull( new_el );
            						}
            						else {
HXLINE(2649)							_hx_tmp3 = false;
            						}
HXDLIN(2649)						if (_hx_tmp3) {
HXLINE(2649)							_hx_tmp2 = (( (bool)(new_els->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) ) == false);
            						}
            						else {
HXLINE(2649)							_hx_tmp2 = false;
            						}
HXDLIN(2649)						if (_hx_tmp2) {
HXLINE(2652)							HX_VARI_NAME(  ::Dynamic,att2,"att") = element1->attributes();
HXDLIN(2652)							while(( (bool)(att2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2652)								HX_VARI_NAME( ::String,att3,"att") = ( (::String)(att2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2654)								new_el->set(att3,element1->get(att3));
            							}
            						}
            						else {
HXLINE(2659)							notCombine = true;
            						}
            					}
HXLINE(2663)					if (notCombine) {
HXLINE(2665)						new_data->insertChild(::Xml_obj::parse(::haxe::xml::Printer_obj::print(element1,null()))->firstElement(),(int)0);
            					}
            				}
            			}
HXLINE(2668)			return  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,new_data);
            		}
HXLINE(2611)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,consolidateData,return )

 ::openfl::_legacy::display::BitmapData FlxUI_obj::_loadBitmapRect(::String source,::String rect_str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3791__loadBitmapRect)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(rect_str,"rect_str")
HXLINE(3792)		HX_VARI(  ::openfl::_legacy::display::BitmapData,b1) = ::openfl::_legacy::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(source,null(),null(),null(),null(),null()),null());
HXLINE(3793)		HX_VARI( ::Array< ::String >,coords) = rect_str.split(HX_(",",2c,00,00,00));
HXDLIN(3793)		HX_VARI(  ::openfl::_legacy::geom::Rectangle,rect) = null();
HXDLIN(3793)		bool _hx_tmp;
HXDLIN(3793)		if (hx::IsNotNull( coords )) {
HXLINE(3793)			_hx_tmp = (coords->length == (int)4);
            		}
            		else {
HXLINE(3793)			_hx_tmp = false;
            		}
HXDLIN(3793)		if (_hx_tmp) {
HXLINE(3793)			HX_VARI( int,x_) = ::Std_obj::parseInt(coords->__get((int)0));
HXDLIN(3793)			HX_VARI( int,y_) = ::Std_obj::parseInt(coords->__get((int)1));
HXDLIN(3793)			HX_VARI( int,w_) = ::Std_obj::parseInt(coords->__get((int)2));
HXDLIN(3793)			rect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,x_,y_,w_,::Std_obj::parseInt(coords->__get((int)3)));
            		}
HXDLIN(3793)		HX_VARI(  ::openfl::_legacy::geom::Rectangle,r) = rect;
HXLINE(3794)		HX_VARI( int,b2) = ::Std_obj::_hx_int(r->width);
HXDLIN(3794)		HX_VARI_NAME(  ::openfl::_legacy::display::BitmapData,b21,"b2") =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,b2,::Std_obj::_hx_int(r->height),true,(int)16777215,null());
HXLINE(3795)		b21->copyPixels(b1,r, ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0),null(),null(),null());
HXLINE(3796)		return b21;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadBitmapRect,return )

::cpp::VirtualArray FlxUI_obj::getParams( ::haxe::xml::Fast data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5022_getParams)
            	HX_STACK_ARG(data,"data")
HXLINE(5023)		HX_VARI( ::cpp::VirtualArray,params) = null();
HXLINE(5025)		if (data->hasNode->resolve(HX_("param",8d,80,55,bd))) {
HXLINE(5026)			params = ::cpp::VirtualArray_obj::__new();
HXLINE(5027)			{
HXLINE(5027)				HX_VARI(  ::_List::ListNode,_g_head) = data->nodes->resolve(HX_("param",8d,80,55,bd))->h;
HXDLIN(5027)				while(hx::IsNotNull( _g_head )){
HXLINE(5027)					HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(5027)					_g_head = _g_head->next;
HXLINE(5028)					bool _hx_tmp;
HXDLIN(5028)					if (val->has->resolve(HX_("type",ba,f2,08,4d))) {
HXLINE(5028)						_hx_tmp = val->has->resolve(HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(5028)						_hx_tmp = false;
            					}
HXDLIN(5028)					if (_hx_tmp) {
HXLINE(5029)						HX_VARI( ::String,type) = val->att->resolve(HX_("type",ba,f2,08,4d));
HXLINE(5030)						type = type.toLowerCase();
HXLINE(5031)						HX_VARI( ::String,valueStr) = val->att->resolve(HX_("value",71,7f,b8,31));
HXLINE(5032)						HX_VARI(  ::Dynamic,value) = valueStr;
HXLINE(5033)						HX_VARI( int,sort) = ::flixel::addons::ui::U_obj::xml_i(val->x,HX_("sort",5e,27,58,4c),(int)-1);
HXLINE(5034)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(5040)							HX_VARI( ::String,str) = ::String(valueStr);
HXLINE(5041)							str = str.toLowerCase();
HXLINE(5042)							bool _hx_tmp1;
HXDLIN(5042)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(5042)								_hx_tmp1 = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(5042)								_hx_tmp1 = true;
            							}
HXDLIN(5042)							if (_hx_tmp1) {
HXLINE(5043)								value = true;
            							}
            							else {
HXLINE(5045)								value = false;
            							}
HXLINE(5039)							goto _hx_goto_279;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(5038)							HX_VARI(  ::Dynamic,return_val) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(5038)							if (hx::IsNull( return_val )) {
HXLINE(5038)								HX_STACK_DO_THROW((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr));
            							}
HXDLIN(5038)							value = return_val;
HXDLIN(5038)							goto _hx_goto_279;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(5037)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(5037)							goto _hx_goto_279;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(5036)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(5036)							goto _hx_goto_279;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(5035)							value = ::String(valueStr);
HXDLIN(5035)							goto _hx_goto_279;
            						}
            						_hx_goto_279:;
HXLINE(5050)						params->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXLINE(5055)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXLINE(5058)			{
HXLINE(5058)				HX_VARI( int,_g1) = (int)0;
HXDLIN(5058)				HX_VARI( int,_g) = params->get_length();
HXDLIN(5058)				while((_g1 < _g)){
HXLINE(5058)					_g1 = (_g1 + (int)1);
HXDLIN(5058)					HX_VARI( int,i) = (_g1 - (int)1);
HXLINE(5059)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
            				}
            			}
            		}
HXLINE(5062)		return params;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,getParams,return )

int FlxUI_obj::sortParams( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5066_sortParams)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(5067)		if ((( (int)(a->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ))) {
HXLINE(5067)			return (int)-1;
            		}
HXLINE(5068)		if ((( (int)(a->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("sort",5e,27,58,4c),hx::paccDynamic)) ))) {
HXLINE(5068)			return (int)1;
            		}
HXLINE(5069)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sortParams,return )


hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__new( ::haxe::xml::Fast data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	hx::ObjectPtr< FlxUI_obj > __this = new FlxUI_obj();
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::xml::Fast data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	FlxUI_obj *__this = (FlxUI_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUI_obj), true, "flixel.addons.ui.FlxUI"));
	*(void **)__this = FlxUI_obj::_hx_vtable;
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

FlxUI_obj::FlxUI_obj()
{
}

void FlxUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUI);
	HX_MARK_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_MARK_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_MARK_MEMBER_NAME(failed,"failed");
	HX_MARK_MEMBER_NAME(failed_by,"failed_by");
	HX_MARK_MEMBER_NAME(isRoot,"isRoot");
	HX_MARK_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_MARK_MEMBER_NAME(cursorLists,"cursorLists");
	HX_MARK_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_MARK_MEMBER_NAME(_pointX,"_pointX");
	HX_MARK_MEMBER_NAME(_pointY,"_pointY");
	HX_MARK_MEMBER_NAME(_group_index,"_group_index");
	HX_MARK_MEMBER_NAME(_asset_index,"_asset_index");
	HX_MARK_MEMBER_NAME(_tag_index,"_tag_index");
	HX_MARK_MEMBER_NAME(_definition_index,"_definition_index");
	HX_MARK_MEMBER_NAME(_variable_index,"_variable_index");
	HX_MARK_MEMBER_NAME(_mode_index,"_mode_index");
	HX_MARK_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_MARK_MEMBER_NAME(_ptr,"_ptr");
	HX_MARK_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_MARK_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_MARK_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_MARK_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_MARK_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_VISIT_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_VISIT_MEMBER_NAME(failed,"failed");
	HX_VISIT_MEMBER_NAME(failed_by,"failed_by");
	HX_VISIT_MEMBER_NAME(isRoot,"isRoot");
	HX_VISIT_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_VISIT_MEMBER_NAME(focus,"focus");
	HX_VISIT_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_VISIT_MEMBER_NAME(cursorLists,"cursorLists");
	HX_VISIT_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_VISIT_MEMBER_NAME(_pointX,"_pointX");
	HX_VISIT_MEMBER_NAME(_pointY,"_pointY");
	HX_VISIT_MEMBER_NAME(_group_index,"_group_index");
	HX_VISIT_MEMBER_NAME(_asset_index,"_asset_index");
	HX_VISIT_MEMBER_NAME(_tag_index,"_tag_index");
	HX_VISIT_MEMBER_NAME(_definition_index,"_definition_index");
	HX_VISIT_MEMBER_NAME(_variable_index,"_variable_index");
	HX_VISIT_MEMBER_NAME(_mode_index,"_mode_index");
	HX_VISIT_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_VISIT_MEMBER_NAME(_ptr,"_ptr");
	HX_VISIT_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_VISIT_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_VISIT_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_VISIT_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_VISIT_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUI_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		if (HX_FIELD_EQ(inName,"_ptr") ) { return hx::Val( _ptr); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return hx::Val( focus); }
		if (HX_FIELD_EQ(inName,"_data") ) { return hx::Val( _data); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { return hx::Val( failed); }
		if (HX_FIELD_EQ(inName,"isRoot") ) { return hx::Val( inCallProp == hx::paccAlways ? get_isRoot() : isRoot); }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_tongue()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadX") ) { return hx::Val( _loadX_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadY") ) { return hx::Val( _loadY_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"_sendTo") ) { return hx::Val( _sendTo_dyn()); }
		if (HX_FIELD_EQ(inName,"setMode") ) { return hx::Val( setMode_dyn()); }
		if (HX_FIELD_EQ(inName,"getMode") ) { return hx::Val( getMode_dyn()); }
		if (HX_FIELD_EQ(inName,"_pointX") ) { return hx::Val( _pointX); }
		if (HX_FIELD_EQ(inName,"_pointY") ) { return hx::Val( _pointY); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn()); }
		if (HX_FIELD_EQ(inName,"doRound") ) { return hx::Val( doRound_dyn()); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return hx::Val( getEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"addAsset") ) { return hx::Val( addAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadSub") ) { return hx::Val( _loadSub_dyn()); }
		if (HX_FIELD_EQ(inName,"_addTags") ) { return hx::Val( _addTags_dyn()); }
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currMode()); }
		if (HX_FIELD_EQ(inName,"getGroup") ) { return hx::Val( getGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"hasAsset") ) { return hx::Val( hasAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"getAsset") ) { return hx::Val( getAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"_doAlign") ) { return hx::Val( _doAlign_dyn()); }
		if (HX_FIELD_EQ(inName,"createUI") ) { return hx::Val( createUI_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadBox") ) { return hx::Val( _loadBox_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadBar") ) { return hx::Val( _loadBar_dyn()); }
		if (HX_FIELD_EQ(inName,"getRound") ) { return hx::Val( getRound_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { return hx::Val( failed_by); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return hx::Val( set_focus_dyn()); }
		if (HX_FIELD_EQ(inName,"callEvent") ) { return hx::Val( callEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"showGroup") ) { return hx::Val( showGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"showAsset") ) { return hx::Val( showAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"_postLoad") ) { return hx::Val( _postLoad_dyn()); }
		if (HX_FIELD_EQ(inName,"showThing") ) { return hx::Val( showThing_dyn()); }
		if (HX_FIELD_EQ(inName,"loadThing") ) { return hx::Val( loadThing_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadText") ) { return hx::Val( _loadText_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTest") ) { return hx::Val( _loadTest_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadLine") ) { return hx::Val( _loadLine_dyn()); }
		if (HX_FIELD_EQ(inName,"thisWidth") ) { return hx::Val( thisWidth_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_isRoot") ) { return hx::Val( get_isRoot_dyn()); }
		if (HX_FIELD_EQ(inName,"get_tongue") ) { return hx::Val( get_tongue_dyn()); }
		if (HX_FIELD_EQ(inName,"set_tongue") ) { return hx::Val( set_tongue_dyn()); }
		if (HX_FIELD_EQ(inName,"_tongueSet") ) { return hx::Val( _tongueSet_dyn()); }
		if (HX_FIELD_EQ(inName,"getRequest") ) { return hx::Val( getRequest_dyn()); }
		if (HX_FIELD_EQ(inName,"toggleShow") ) { return hx::Val( toggleShow_dyn()); }
		if (HX_FIELD_EQ(inName,"sendToBack") ) { return hx::Val( sendToBack_dyn()); }
		if (HX_FIELD_EQ(inName,"getFlxText") ) { return hx::Val( getFlxText_dyn()); }
		if (HX_FIELD_EQ(inName,"_tag_index") ) { return hx::Val( _tag_index); }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { return hx::Val( _curr_mode); }
		if (HX_FIELD_EQ(inName,"_loadThing") ) { return hx::Val( _loadThing_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadScale") ) { return hx::Val( _loadScale_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadWidth") ) { return hx::Val( _loadWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"loadSmooth") ) { return hx::Val( loadSmooth_dyn()); }
		if (HX_FIELD_EQ(inName,"thisHeight") ) { return hx::Val( thisHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadColor") ) { return hx::Val( _loadColor_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { return hx::Val( cursorLists); }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { return hx::Val( _ptr_tongue); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn()); }
		if (HX_FIELD_EQ(inName,"removeAsset") ) { return hx::Val( removeAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { return hx::Val( unparentXML_dyn()); }
		if (HX_FIELD_EQ(inName,"sendToFront") ) { return hx::Val( sendToFront_dyn()); }
		if (HX_FIELD_EQ(inName,"setVariable") ) { return hx::Val( setVariable_dyn()); }
		if (HX_FIELD_EQ(inName,"getVariable") ) { return hx::Val( getVariable_dyn()); }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { return hx::Val( _postLoaded); }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { return hx::Val( _mode_index); }
		if (HX_FIELD_EQ(inName,"_loadAnchor") ) { return hx::Val( _loadAnchor_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadScaleX") ) { return hx::Val( _loadScaleX_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadScaleY") ) { return hx::Val( _loadScaleY_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadHeight") ) { return hx::Val( _loadHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"_alignThing") ) { return hx::Val( _alignThing_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadString") ) { return hx::Val( _loadString_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadLayout") ) { return hx::Val( _loadLayout_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadButton") ) { return hx::Val( _loadButton_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadRegion") ) { return hx::Val( _loadRegion_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadSprite") ) { return hx::Val( _loadSprite_dyn()); }
		if (HX_FIELD_EQ(inName,"_getStretch") ) { return hx::Val( _getStretch_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadCursor") ) { return hx::Val( _loadCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadBorder") ) { return hx::Val( _loadBorder_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { return hx::Val( liveFilePath); }
		if (HX_FIELD_EQ(inName,"replaceAsset") ) { return hx::Val( replaceAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadGlobals") ) { return hx::Val( _loadGlobals_dyn()); }
		if (HX_FIELD_EQ(inName,"get_currMode") ) { return hx::Val( get_currMode_dyn()); }
		if (HX_FIELD_EQ(inName,"set_currMode") ) { return hx::Val( set_currMode_dyn()); }
		if (HX_FIELD_EQ(inName,"getAllAssets") ) { return hx::Val( getAllAssets_dyn()); }
		if (HX_FIELD_EQ(inName,"getAssetKeys") ) { return hx::Val( getAssetKeys_dyn()); }
		if (HX_FIELD_EQ(inName,"_group_index") ) { return hx::Val( _group_index); }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { return hx::Val( _asset_index); }
		if (HX_FIELD_EQ(inName,"_loadTooltip") ) { return hx::Val( _loadTooltip_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadCompass") ) { return hx::Val( _loadCompass_dyn()); }
		if (HX_FIELD_EQ(inName,"_changeThing") ) { return hx::Val( _changeThing_dyn()); }
		if (HX_FIELD_EQ(inName,"_resizeThing") ) { return hx::Val( _resizeThing_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTestSub") ) { return hx::Val( _loadTestSub_dyn()); }
		if (HX_FIELD_EQ(inName,"addToCleanup") ) { return hx::Val( addToCleanup_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTabMenu") ) { return hx::Val( _loadTabMenu_dyn()); }
		if (HX_FIELD_EQ(inName,"_getDataSize") ) { return hx::Val( _getDataSize_dyn()); }
		if (HX_FIELD_EQ(inName,"_doOperation") ) { return hx::Val( _doOperation_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadFontDef") ) { return hx::Val( _loadFontDef_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setSuperIndex") ) { return hx::Val( setSuperIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"getAssetGroup") ) { return hx::Val( getAssetGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"checkVariable") ) { return hx::Val( checkVariable_dyn()); }
		if (HX_FIELD_EQ(inName,"getDefinition") ) { return hx::Val( getDefinition_dyn()); }
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { return hx::Val( _superIndexUI); }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { return hx::Val( _scaledAssets); }
		if (HX_FIELD_EQ(inName,"_checkFailure") ) { return hx::Val( _checkFailure_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTileTest") ) { return hx::Val( _loadTileTest_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadCheckBox") ) { return hx::Val( _loadCheckBox_dyn()); }
		if (HX_FIELD_EQ(inName,"parseVarValue") ) { return hx::Val( parseVarValue_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTileRule") ) { return hx::Val( _loadTileRule_dyn()); }
		if (HX_FIELD_EQ(inName,"loadScaledSrc") ) { return hx::Val( loadScaledSrc_dyn()); }
		if (HX_FIELD_EQ(inName,"_getAnchorPos") ) { return hx::Val( _getAnchorPos_dyn()); }
		if (HX_FIELD_EQ(inName,"_getOperation") ) { return hx::Val( _getOperation_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadPosition") ) { return hx::Val( _loadPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadFontFace") ) { return hx::Val( _loadFontFace_dyn()); }
		if (HX_FIELD_EQ(inName,"_onFinishLoad") ) { return hx::Val( _onFinishLoad_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_loadPointSize") ) { return hx::Val( _loadPointSize_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceInGroup") ) { return hx::Val( replaceInGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"_postLoadThing") ) { return hx::Val( _postLoadThing_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadInputText") ) { return hx::Val( _loadInputText_dyn()); }
		if (HX_FIELD_EQ(inName,"getResizeRatio") ) { return hx::Val( getResizeRatio_dyn()); }
		if (HX_FIELD_EQ(inName,"calcMaxMinSize") ) { return hx::Val( calcMaxMinSize_dyn()); }
		if (HX_FIELD_EQ(inName,"formatFromCode") ) { return hx::Val( formatFromCode_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { return hx::Val( getTextFallback); }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { return hx::Val( _variable_index); }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { return hx::Val( _failure_checks); }
		if (HX_FIELD_EQ(inName,"_loadRadioGroup") ) { return hx::Val( _loadRadioGroup_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getAssetsWithTag") ) { return hx::Val( getAssetsWithTag_dyn()); }
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { return hx::Val( _assetsToCleanUp); }
		if (HX_FIELD_EQ(inName,"applyNodeChanges") ) { return hx::Val( applyNodeChanges_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTooltipData") ) { return hx::Val( _loadTooltipData_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTooltipText") ) { return hx::Val( _loadTooltipText_dyn()); }
		if (HX_FIELD_EQ(inName,"getAssetProperty") ) { return hx::Val( getAssetProperty_dyn()); }
		if (HX_FIELD_EQ(inName,"formatButtonText") ) { return hx::Val( formatButtonText_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { return hx::Val( _definition_index); }
		if (HX_FIELD_EQ(inName,"_loadThingGetInfo") ) { return hx::Val( _loadThingGetInfo_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadTooltipStyle") ) { return hx::Val( _loadTooltipStyle_dyn()); }
		if (HX_FIELD_EQ(inName,"_loadDropDownMenu") ) { return hx::Val( _loadDropDownMenu_dyn()); }
		if (HX_FIELD_EQ(inName,"addToScaledAssets") ) { return hx::Val( addToScaledAssets_dyn()); }
		if (HX_FIELD_EQ(inName,"_load9SliceSprite") ) { return hx::Val( _load9SliceSprite_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_changeParamsThing") ) { return hx::Val( _changeParamsThing_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { return hx::Val( do_safe_input_delay); }
		if (HX_FIELD_EQ(inName,"_loadNumericStepper") ) { return hx::Val( _loadNumericStepper_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setWidgetSuppression") ) { return hx::Val( setWidgetSuppression_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { return hx::Val( safe_input_delay_time); }
		if (HX_FIELD_EQ(inName,"getLabelStyleFromData") ) { return hx::Val( getLabelStyleFromData_dyn()); }
		if (HX_FIELD_EQ(inName,"applyNodeConditionals") ) { return hx::Val( applyNodeConditionals_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { return hx::Val( _safe_input_delay_elapsed); }
		if (HX_FIELD_EQ(inName,"load9SliceSprite_scaleSub") ) { return hx::Val( load9SliceSprite_scaleSub_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getLabelStyleFromDefinition") ) { return hx::Val( getLabelStyleFromDefinition_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUI_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { outValue = event_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { outValue = _delta_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"request") ) { outValue = request_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_center") ) { outValue = _center_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getParams") ) { outValue = getParams_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceFocus") ) { outValue = forceFocus_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortParams") ) { outValue = sortParams_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getLeafUIState") ) { outValue = getLeafUIState_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"consolidateData") ) { outValue = consolidateData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_loadBitmapRect") ) { outValue = _loadBitmapRect_dyn(); return true; }
	}
	return false;
}

hx::Val FlxUI_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ptr") ) { _ptr=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_focus(inValue) );focus=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast<  ::haxe::xml::Fast >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { failed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isRoot") ) { isRoot=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tongue") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tongue(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_pointX") ) { _pointX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointY") ) { _pointY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currMode(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { failed_by=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_tag_index") ) { _tag_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { _curr_mode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { cursorLists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { _ptr_tongue=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { _postLoaded=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { _mode_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { liveFilePath=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_group_index") ) { _group_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { _asset_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { _superIndexUI=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { _scaledAssets=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { getTextFallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { _variable_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { _failure_checks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { _assetsToCleanUp=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { _definition_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { do_safe_input_delay=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { safe_input_delay_time=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { _safe_input_delay_elapsed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("do_safe_input_delay","\x90","\x5b","\x9d","\x88"));
	outFields->push(HX_HCSTRING("safe_input_delay_time","\x50","\x71","\xb0","\xf4"));
	outFields->push(HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7"));
	outFields->push(HX_HCSTRING("failed_by","\x59","\x1a","\x00","\x5f"));
	outFields->push(HX_HCSTRING("isRoot","\x2c","\xb3","\x15","\x69"));
	outFields->push(HX_HCSTRING("liveFilePath","\x4d","\x75","\xd5","\xb0"));
	outFields->push(HX_HCSTRING("tongue","\xc4","\x45","\xe4","\x93"));
	outFields->push(HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"));
	outFields->push(HX_HCSTRING("cursorLists","\x9f","\x0f","\xe7","\xfd"));
	outFields->push(HX_HCSTRING("_ptr_tongue","\x54","\xfc","\x53","\x03"));
	outFields->push(HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"));
	outFields->push(HX_HCSTRING("currMode","\x75","\xab","\x68","\x8b"));
	outFields->push(HX_HCSTRING("_postLoaded","\xa4","\x95","\x31","\x80"));
	outFields->push(HX_HCSTRING("_pointX","\xa7","\x23","\xa5","\x65"));
	outFields->push(HX_HCSTRING("_pointY","\xa8","\x23","\xa5","\x65"));
	outFields->push(HX_HCSTRING("_group_index","\xd3","\xbc","\xca","\x66"));
	outFields->push(HX_HCSTRING("_asset_index","\x44","\x0e","\xd3","\x80"));
	outFields->push(HX_HCSTRING("_tag_index","\xee","\xf7","\x41","\x12"));
	outFields->push(HX_HCSTRING("_definition_index","\x85","\x96","\xe5","\x82"));
	outFields->push(HX_HCSTRING("_variable_index","\x2e","\x92","\x8a","\x75"));
	outFields->push(HX_HCSTRING("_mode_index","\x15","\xaf","\x93","\xa2"));
	outFields->push(HX_HCSTRING("_curr_mode","\xd1","\x32","\xbc","\x27"));
	outFields->push(HX_HCSTRING("_ptr","\xef","\xa6","\x20","\x3f"));
	outFields->push(HX_HCSTRING("_superIndexUI","\x8a","\xfc","\x6d","\xd1"));
	outFields->push(HX_HCSTRING("_safe_input_delay_elapsed","\x38","\x44","\x1a","\x3b"));
	outFields->push(HX_HCSTRING("_failure_checks","\xdf","\xfd","\xae","\x28"));
	outFields->push(HX_HCSTRING("_assetsToCleanUp","\x87","\x59","\xf7","\x5a"));
	outFields->push(HX_HCSTRING("_scaledAssets","\x9c","\x29","\x61","\x6b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUI_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxUI_obj,do_safe_input_delay),HX_HCSTRING("do_safe_input_delay","\x90","\x5b","\x9d","\x88")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,safe_input_delay_time),HX_HCSTRING("safe_input_delay_time","\x50","\x71","\xb0","\xf4")},
	{hx::fsBool,(int)offsetof(FlxUI_obj,failed),HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,failed_by),HX_HCSTRING("failed_by","\x59","\x1a","\x00","\x5f")},
	{hx::fsBool,(int)offsetof(FlxUI_obj,isRoot),HX_HCSTRING("isRoot","\x2c","\xb3","\x15","\x69")},
	{hx::fsString,(int)offsetof(FlxUI_obj,liveFilePath),HX_HCSTRING("liveFilePath","\x4d","\x75","\xd5","\xb0")},
	{hx::fsObject /*::flixel::addons::ui::interfaces::IFlxUIWidget*/ ,(int)offsetof(FlxUI_obj,focus),HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUI_obj,getTextFallback),HX_HCSTRING("getTextFallback","\xa5","\xc3","\x03","\x82")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUI_obj,cursorLists),HX_HCSTRING("cursorLists","\x9f","\x0f","\xe7","\xfd")},
	{hx::fsObject /*::flixel::addons::ui::interfaces::IFireTongue*/ ,(int)offsetof(FlxUI_obj,_ptr_tongue),HX_HCSTRING("_ptr_tongue","\x54","\xfc","\x53","\x03")},
	{hx::fsObject /*::haxe::xml::Fast*/ ,(int)offsetof(FlxUI_obj,_data),HX_HCSTRING("_data","\x09","\x72","\x74","\xf5")},
	{hx::fsBool,(int)offsetof(FlxUI_obj,_postLoaded),HX_HCSTRING("_postLoaded","\xa4","\x95","\x31","\x80")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,_pointX),HX_HCSTRING("_pointX","\xa7","\x23","\xa5","\x65")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,_pointY),HX_HCSTRING("_pointY","\xa8","\x23","\xa5","\x65")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_group_index),HX_HCSTRING("_group_index","\xd3","\xbc","\xca","\x66")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_asset_index),HX_HCSTRING("_asset_index","\x44","\x0e","\xd3","\x80")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_tag_index),HX_HCSTRING("_tag_index","\xee","\xf7","\x41","\x12")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_definition_index),HX_HCSTRING("_definition_index","\x85","\x96","\xe5","\x82")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_variable_index),HX_HCSTRING("_variable_index","\x2e","\x92","\x8a","\x75")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxUI_obj,_mode_index),HX_HCSTRING("_mode_index","\x15","\xaf","\x93","\xa2")},
	{hx::fsString,(int)offsetof(FlxUI_obj,_curr_mode),HX_HCSTRING("_curr_mode","\xd1","\x32","\xbc","\x27")},
	{hx::fsObject /*::flixel::addons::ui::interfaces::IEventGetter*/ ,(int)offsetof(FlxUI_obj,_ptr),HX_HCSTRING("_ptr","\xef","\xa6","\x20","\x3f")},
	{hx::fsObject /*::flixel::addons::ui::FlxUI*/ ,(int)offsetof(FlxUI_obj,_superIndexUI),HX_HCSTRING("_superIndexUI","\x8a","\xfc","\x6d","\xd1")},
	{hx::fsFloat,(int)offsetof(FlxUI_obj,_safe_input_delay_elapsed),HX_HCSTRING("_safe_input_delay_elapsed","\x38","\x44","\x1a","\x3b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUI_obj,_failure_checks),HX_HCSTRING("_failure_checks","\xdf","\xfd","\xae","\x28")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUI_obj,_assetsToCleanUp),HX_HCSTRING("_assetsToCleanUp","\x87","\x59","\xf7","\x5a")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUI_obj,_scaledAssets),HX_HCSTRING("_scaledAssets","\x9c","\x29","\x61","\x6b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxUI_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUI_obj_sMemberFields[] = {
	HX_HCSTRING("do_safe_input_delay","\x90","\x5b","\x9d","\x88"),
	HX_HCSTRING("safe_input_delay_time","\x50","\x71","\xb0","\xf4"),
	HX_HCSTRING("failed","\xbd","\xc5","\xfe","\xe7"),
	HX_HCSTRING("failed_by","\x59","\x1a","\x00","\x5f"),
	HX_HCSTRING("isRoot","\x2c","\xb3","\x15","\x69"),
	HX_HCSTRING("get_isRoot","\xf5","\x22","\x9d","\x59"),
	HX_HCSTRING("liveFilePath","\x4d","\x75","\xd5","\xb0"),
	HX_HCSTRING("get_tongue","\x8d","\xb5","\x6b","\x84"),
	HX_HCSTRING("set_tongue","\x01","\x54","\xe9","\x87"),
	HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"),
	HX_HCSTRING("set_focus","\x3b","\xa8","\x83","\x2b"),
	HX_HCSTRING("getTextFallback","\xa5","\xc3","\x03","\x82"),
	HX_HCSTRING("cursorLists","\x9f","\x0f","\xe7","\xfd"),
	HX_HCSTRING("_ptr_tongue","\x54","\xfc","\x53","\x03"),
	HX_HCSTRING("_data","\x09","\x72","\x74","\xf5"),
	HX_HCSTRING("_tongueSet","\xff","\x7b","\xc4","\x6b"),
	HX_HCSTRING("callEvent","\x9c","\x22","\x04","\x02"),
	HX_HCSTRING("getEvent","\xa4","\xd7","\x9b","\xd5"),
	HX_HCSTRING("getRequest","\x59","\x65","\xe6","\x93"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("setWidgetSuppression","\x4d","\x9a","\xd2","\xbf"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("setSuperIndex","\xd9","\x09","\x3c","\xbf"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("toggleShow","\xb1","\x1a","\x09","\xe4"),
	HX_HCSTRING("showGroup","\x02","\x19","\x59","\xc8"),
	HX_HCSTRING("showAsset","\xb3","\xcf","\x9d","\x54"),
	HX_HCSTRING("removeAsset","\x0c","\x47","\x6d","\x24"),
	HX_HCSTRING("addAsset","\x0f","\x90","\x96","\x9f"),
	HX_HCSTRING("replaceAsset","\x1c","\x55","\xc8","\x19"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("unparentXML","\x54","\xa1","\xff","\x04"),
	HX_HCSTRING("_loadPointSize","\x6c","\xaa","\x6c","\xe2"),
	HX_HCSTRING("_loadSub","\x7b","\x7c","\x9a","\x42"),
	HX_HCSTRING("_addTags","\x1b","\x51","\xec","\xc2"),
	HX_HCSTRING("_loadGlobals","\x2b","\x72","\xe0","\x4a"),
	HX_HCSTRING("_postLoad","\x05","\xf2","\x8c","\x4d"),
	HX_HCSTRING("_sendTo","\x82","\xca","\xfb","\xd9"),
	HX_HCSTRING("sendToFront","\xc6","\xb8","\x1e","\x5d"),
	HX_HCSTRING("sendToBack","\xaa","\x6c","\x20","\x18"),
	HX_HCSTRING("get_currMode","\x7e","\x5f","\x82","\x40"),
	HX_HCSTRING("set_currMode","\xf2","\x82","\x7b","\x55"),
	HX_HCSTRING("setMode","\x25","\x14","\xe5","\x0d"),
	HX_HCSTRING("showThing","\xb1","\xed","\xed","\x3d"),
	HX_HCSTRING("getGroup","\xc9","\xc2","\xcb","\xf9"),
	HX_HCSTRING("getFlxText","\x49","\x64","\x62","\x5f"),
	HX_HCSTRING("getAllAssets","\x0e","\x61","\xbd","\x29"),
	HX_HCSTRING("getAssetKeys","\x8e","\xcc","\x03","\xbb"),
	HX_HCSTRING("hasAsset","\x36","\xb4","\x91","\xb2"),
	HX_HCSTRING("getAsset","\x7a","\x79","\x10","\x86"),
	HX_HCSTRING("getAssetsWithTag","\x3b","\x93","\x24","\x96"),
	HX_HCSTRING("getAssetGroup","\x65","\x0f","\x45","\xa3"),
	HX_HCSTRING("getMode","\x19","\x83","\xe3","\x1a"),
	HX_HCSTRING("getLabelStyleFromDefinition","\xd0","\x35","\x54","\xc4"),
	HX_HCSTRING("getLabelStyleFromData","\xa7","\xba","\x4b","\x0c"),
	HX_HCSTRING("checkVariable","\x24","\x6f","\x67","\x51"),
	HX_HCSTRING("setVariable","\xfe","\xdb","\x6d","\x99"),
	HX_HCSTRING("getVariable","\xf2","\xd4","\x00","\x8f"),
	HX_HCSTRING("getDefinition","\xc9","\x31","\x80","\x48"),
	HX_HCSTRING("_postLoaded","\xa4","\x95","\x31","\x80"),
	HX_HCSTRING("_pointX","\xa7","\x23","\xa5","\x65"),
	HX_HCSTRING("_pointY","\xa8","\x23","\xa5","\x65"),
	HX_HCSTRING("_group_index","\xd3","\xbc","\xca","\x66"),
	HX_HCSTRING("_asset_index","\x44","\x0e","\xd3","\x80"),
	HX_HCSTRING("_tag_index","\xee","\xf7","\x41","\x12"),
	HX_HCSTRING("_definition_index","\x85","\x96","\xe5","\x82"),
	HX_HCSTRING("_variable_index","\x2e","\x92","\x8a","\x75"),
	HX_HCSTRING("_mode_index","\x15","\xaf","\x93","\xa2"),
	HX_HCSTRING("_curr_mode","\xd1","\x32","\xbc","\x27"),
	HX_HCSTRING("_ptr","\xef","\xa6","\x20","\x3f"),
	HX_HCSTRING("_superIndexUI","\x8a","\xfc","\x6d","\xd1"),
	HX_HCSTRING("_safe_input_delay_elapsed","\x38","\x44","\x1a","\x3b"),
	HX_HCSTRING("_failure_checks","\xdf","\xfd","\xae","\x28"),
	HX_HCSTRING("_assetsToCleanUp","\x87","\x59","\xf7","\x5a"),
	HX_HCSTRING("_scaledAssets","\x9c","\x29","\x61","\x6b"),
	HX_HCSTRING("replaceInGroup","\x46","\x97","\x32","\x5c"),
	HX_HCSTRING("applyNodeConditionals","\x1d","\xb1","\xba","\xec"),
	HX_HCSTRING("applyNodeChanges","\x53","\x40","\x3a","\x89"),
	HX_HCSTRING("loadThing","\xe8","\xd3","\xc0","\x2a"),
	HX_HCSTRING("_loadThingGetInfo","\x7b","\xf7","\x10","\x95"),
	HX_HCSTRING("_loadTooltip","\x7e","\x19","\x34","\xa1"),
	HX_HCSTRING("_loadTooltipData","\xc8","\x32","\x6e","\x09"),
	HX_HCSTRING("_loadTooltipStyle","\xd3","\xd2","\x93","\xe6"),
	HX_HCSTRING("_loadTooltipText","\x4b","\xa9","\x04","\x14"),
	HX_HCSTRING("_loadAnchor","\x5a","\x36","\x26","\xe8"),
	HX_HCSTRING("_loadThing","\xa9","\x4f","\x63","\x86"),
	HX_HCSTRING("_loadX","\xb3","\x8e","\xd6","\x74"),
	HX_HCSTRING("_loadY","\xb4","\x8e","\xd6","\x74"),
	HX_HCSTRING("_loadScale","\x45","\x96","\xa8","\xef"),
	HX_HCSTRING("_loadScaleX","\x73","\xe6","\xda","\xc3"),
	HX_HCSTRING("_loadScaleY","\x74","\xe6","\xda","\xc3"),
	HX_HCSTRING("_loadWidth","\xc1","\x7d","\x3c","\x41"),
	HX_HCSTRING("_loadHeight","\xcc","\x03","\x01","\x8a"),
	HX_HCSTRING("_loadCompass","\x0d","\x86","\x10","\xba"),
	HX_HCSTRING("_changeParamsThing","\xf9","\x9f","\x76","\x8d"),
	HX_HCSTRING("_changeThing","\x5f","\xde","\x58","\x9b"),
	HX_HCSTRING("_alignThing","\x08","\xc4","\x65","\x7b"),
	HX_HCSTRING("_doAlign","\xbb","\x90","\x76","\x8e"),
	HX_HCSTRING("_checkFailure","\x41","\xbb","\xef","\xe6"),
	HX_HCSTRING("_resizeThing","\x5b","\xb7","\x96","\xb4"),
	HX_HCSTRING("_postLoadThing","\xa9","\x93","\xc5","\x16"),
	HX_HCSTRING("_loadTileTest","\xc5","\x6d","\xd7","\x22"),
	HX_HCSTRING("_loadString","\xb6","\x24","\xe5","\x98"),
	HX_HCSTRING("_loadText","\x52","\x95","\x2f","\x05"),
	HX_HCSTRING("_loadInputText","\x12","\x4b","\xdc","\xd4"),
	HX_HCSTRING("_loadRadioGroup","\xa9","\xf6","\x74","\x63"),
	HX_HCSTRING("_loadCheckBox","\x48","\x09","\xb5","\x48"),
	HX_HCSTRING("_loadDropDownMenu","\x15","\xf4","\x83","\x17"),
	HX_HCSTRING("_loadTest","\xf7","\x90","\x2f","\x05"),
	HX_HCSTRING("_loadTestSub","\xc9","\x84","\x6d","\xf4"),
	HX_HCSTRING("parseVarValue","\x5d","\xe2","\xa6","\xbd"),
	HX_HCSTRING("_loadLayout","\x8f","\xaa","\x6d","\xe0"),
	HX_HCSTRING("addToCleanup","\x88","\x65","\x2a","\xda"),
	HX_HCSTRING("addToScaledAssets","\xd9","\xb2","\xd7","\x0f"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	HX_HCSTRING("createUI","\x50","\x68","\xf4","\x2b"),
	HX_HCSTRING("_loadTabMenu","\x0f","\x87","\x76","\x77"),
	HX_HCSTRING("_loadNumericStepper","\xa9","\xd6","\xb0","\xb0"),
	HX_HCSTRING("getResizeRatio","\x81","\x09","\xc6","\xaa"),
	HX_HCSTRING("_loadButton","\xd7","\x5d","\x95","\x61"),
	HX_HCSTRING("_loadRegion","\xd9","\xbc","\x41","\x88"),
	HX_HCSTRING("_load9SliceSprite","\xc3","\x47","\x93","\xcb"),
	HX_HCSTRING("load9SliceSprite_scaleSub","\x91","\x16","\x9e","\xf3"),
	HX_HCSTRING("_loadTileRule","\x6f","\x1e","\x91","\x21"),
	HX_HCSTRING("_loadBox","\x06","\x91","\x8d","\x42"),
	HX_HCSTRING("_loadLine","\x99","\xe0","\xe8","\xff"),
	HX_HCSTRING("_loadBar","\xce","\x84","\x8d","\x42"),
	HX_HCSTRING("_loadSprite","\xea","\xd7","\x4a","\x4b"),
	HX_HCSTRING("loadSmooth","\xf4","\x36","\x96","\xbc"),
	HX_HCSTRING("loadScaledSrc","\x64","\x61","\x58","\xbd"),
	HX_HCSTRING("thisWidth","\xc8","\x4a","\xca","\x38"),
	HX_HCSTRING("thisHeight","\xe5","\x9c","\x86","\x2e"),
	HX_HCSTRING("_getAnchorPos","\x88","\x41","\xe7","\x51"),
	HX_HCSTRING("getRound","\xd8","\x07","\x3d","\x4d"),
	HX_HCSTRING("doRound","\xc3","\xd8","\x92","\x20"),
	HX_HCSTRING("calcMaxMinSize","\x24","\x12","\xef","\xe7"),
	HX_HCSTRING("_getDataSize","\xc2","\xf0","\xc4","\x17"),
	HX_HCSTRING("_getOperation","\x90","\xb3","\x05","\x92"),
	HX_HCSTRING("_doOperation","\x1d","\xf1","\x48","\x5f"),
	HX_HCSTRING("_getStretch","\x2e","\x91","\x3e","\x18"),
	HX_HCSTRING("getAssetProperty","\xef","\x87","\xa7","\x3d"),
	HX_HCSTRING("_loadCursor","\xbb","\x8a","\x9d","\xc6"),
	HX_HCSTRING("_loadPosition","\xce","\x1f","\xd2","\x66"),
	HX_HCSTRING("_loadBorder","\xd1","\x48","\xcf","\xeb"),
	HX_HCSTRING("_loadColor","\x1e","\x39","\x36","\xc1"),
	HX_HCSTRING("_loadFontDef","\xb1","\x4b","\xc6","\xcc"),
	HX_HCSTRING("_loadFontFace","\x31","\x51","\x0b","\x62"),
	HX_HCSTRING("_onFinishLoad","\xf7","\x60","\xa4","\x8e"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("formatFromCode","\x0e","\x5a","\x55","\xe0"),
	HX_HCSTRING("formatButtonText","\xd6","\x99","\x61","\x56"),
	::String(null()) };

static void FlxUI_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUI_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUI_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUI_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxUI_obj::__mClass;

static ::String FlxUI_obj_sStaticFields[] = {
	HX_HCSTRING("event","\x1a","\xc8","\xc4","\x75"),
	HX_HCSTRING("forceFocus","\xed","\x49","\x5e","\x9b"),
	HX_HCSTRING("getLeafUIState","\x49","\xca","\x4d","\x90"),
	HX_HCSTRING("request","\x4f","\xdf","\x84","\x44"),
	HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3"),
	HX_HCSTRING("_center","\x74","\x37","\x52","\x74"),
	HX_HCSTRING("consolidateData","\xd3","\xc5","\x7a","\xdc"),
	HX_HCSTRING("_loadBitmapRect","\x18","\xff","\x15","\x1d"),
	HX_HCSTRING("getParams","\x7c","\x84","\xd1","\x69"),
	HX_HCSTRING("sortParams","\x44","\x71","\x60","\x4a"),
	::String(null())
};

void FlxUI_obj::__register()
{
	hx::Object *dummy = new FlxUI_obj;
	FlxUI_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUI","\x55","\x08","\x11","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUI_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUI_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUI_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUI_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUI_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUI_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUI_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
