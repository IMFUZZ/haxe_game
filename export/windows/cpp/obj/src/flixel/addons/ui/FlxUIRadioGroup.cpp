// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_ButtonLabelStyle
#include <flixel/addons/ui/ButtonLabelStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_CheckStyle
#include <flixel/addons/ui/CheckStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIList
#include <flixel/addons/ui/FlxUIList.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRadioGroup
#include <flixel/addons/ui/FlxUIRadioGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_15_new,"flixel.addons.ui.FlxUIRadioGroup","new",0xb1b15e6b,"flixel.addons.ui.FlxUIRadioGroup.new","flixel/addons/ui/FlxUIRadioGroup.hx",15,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_23_set_activeStyle,"flixel.addons.ui.FlxUIRadioGroup","set_activeStyle",0x2acfccb9,"flixel.addons.ui.FlxUIRadioGroup.set_activeStyle","flixel/addons/ui/FlxUIRadioGroup.hx",23,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_30_set_inactiveStyle,"flixel.addons.ui.FlxUIRadioGroup","set_inactiveStyle",0x59ff0874,"flixel.addons.ui.FlxUIRadioGroup.set_inactiveStyle","flixel/addons/ui/FlxUIRadioGroup.hx",30,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_38_get_numRadios,"flixel.addons.ui.FlxUIRadioGroup","get_numRadios",0xf40593a0,"flixel.addons.ui.FlxUIRadioGroup.get_numRadios","flixel/addons/ui/FlxUIRadioGroup.hx",38,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_44_set_skipButtonUpdate,"flixel.addons.ui.FlxUIRadioGroup","set_skipButtonUpdate",0x2de214cc,"flixel.addons.ui.FlxUIRadioGroup.set_skipButtonUpdate","flixel/addons/ui/FlxUIRadioGroup.hx",44,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_56_set_params,"flixel.addons.ui.FlxUIRadioGroup","set_params",0x363b22d8,"flixel.addons.ui.FlxUIRadioGroup.set_params","flixel/addons/ui/FlxUIRadioGroup.hx",56,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_67_set_width,"flixel.addons.ui.FlxUIRadioGroup","set_width",0x37c526b4,"flixel.addons.ui.FlxUIRadioGroup.set_width","flixel/addons/ui/FlxUIRadioGroup.hx",67,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_77_set_height,"flixel.addons.ui.FlxUIRadioGroup","set_height",0x4b0c2f79,"flixel.addons.ui.FlxUIRadioGroup.set_height","flixel/addons/ui/FlxUIRadioGroup.hx",77,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_129_loadGraphics,"flixel.addons.ui.FlxUIRadioGroup","loadGraphics",0x1884bda6,"flixel.addons.ui.FlxUIRadioGroup.loadGraphics","flixel/addons/ui/FlxUIRadioGroup.hx",129,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_161_destroy,"flixel.addons.ui.FlxUIRadioGroup","destroy",0x842b1c85,"flixel.addons.ui.FlxUIRadioGroup.destroy","flixel/addons/ui/FlxUIRadioGroup.hx",161,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_178_updateLabel,"flixel.addons.ui.FlxUIRadioGroup","updateLabel",0x24428836,"flixel.addons.ui.FlxUIRadioGroup.updateLabel","flixel/addons/ui/FlxUIRadioGroup.hx",178,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_189_updateId,"flixel.addons.ui.FlxUIRadioGroup","updateId",0xc8a6c459,"flixel.addons.ui.FlxUIRadioGroup.updateId","flixel/addons/ui/FlxUIRadioGroup.hx",189,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_196_show,"flixel.addons.ui.FlxUIRadioGroup","show",0xccd19092,"flixel.addons.ui.FlxUIRadioGroup.show","flixel/addons/ui/FlxUIRadioGroup.hx",196,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_201_updateRadios,"flixel.addons.ui.FlxUIRadioGroup","updateRadios",0xfd6e4a96,"flixel.addons.ui.FlxUIRadioGroup.updateRadios","flixel/addons/ui/FlxUIRadioGroup.hx",201,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_211_getRadios,"flixel.addons.ui.FlxUIRadioGroup","getRadios",0x73b57c99,"flixel.addons.ui.FlxUIRadioGroup.getRadios","flixel/addons/ui/FlxUIRadioGroup.hx",211,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_214_getLabel,"flixel.addons.ui.FlxUIRadioGroup","getLabel",0x2032c793,"flixel.addons.ui.FlxUIRadioGroup.getLabel","flixel/addons/ui/FlxUIRadioGroup.hx",214,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_221_getId,"flixel.addons.ui.FlxUIRadioGroup","getId",0x7fc5f8dc,"flixel.addons.ui.FlxUIRadioGroup.getId","flixel/addons/ui/FlxUIRadioGroup.hx",221,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_228_getIsVisible,"flixel.addons.ui.FlxUIRadioGroup","getIsVisible",0x032d6ac7,"flixel.addons.ui.FlxUIRadioGroup.getIsVisible","flixel/addons/ui/FlxUIRadioGroup.hx",228,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_237_get_clickable,"flixel.addons.ui.FlxUIRadioGroup","get_clickable",0xc69c2b84,"flixel.addons.ui.FlxUIRadioGroup.get_clickable","flixel/addons/ui/FlxUIRadioGroup.hx",237,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_238_set_clickable,"flixel.addons.ui.FlxUIRadioGroup","set_clickable",0x0ba20d90,"flixel.addons.ui.FlxUIRadioGroup.set_clickable","flixel/addons/ui/FlxUIRadioGroup.hx",238,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_246_get_selectedIndex,"flixel.addons.ui.FlxUIRadioGroup","get_selectedIndex",0x2e506d59,"flixel.addons.ui.FlxUIRadioGroup.get_selectedIndex","flixel/addons/ui/FlxUIRadioGroup.hx",246,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_247_set_selectedIndex,"flixel.addons.ui.FlxUIRadioGroup","set_selectedIndex",0x51be4565,"flixel.addons.ui.FlxUIRadioGroup.set_selectedIndex","flixel/addons/ui/FlxUIRadioGroup.hx",247,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_264_get_selectedLabel,"flixel.addons.ui.FlxUIRadioGroup","get_selectedLabel",0xdfeae03b,"flixel.addons.ui.FlxUIRadioGroup.get_selectedLabel","flixel/addons/ui/FlxUIRadioGroup.hx",264,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_265_set_selectedLabel,"flixel.addons.ui.FlxUIRadioGroup","set_selectedLabel",0x0358b847,"flixel.addons.ui.FlxUIRadioGroup.set_selectedLabel","flixel/addons/ui/FlxUIRadioGroup.hx",265,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_282_get_selectedId,"flixel.addons.ui.FlxUIRadioGroup","get_selectedId",0x00916734,"flixel.addons.ui.FlxUIRadioGroup.get_selectedId","flixel/addons/ui/FlxUIRadioGroup.hx",282,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_283_set_selectedId,"flixel.addons.ui.FlxUIRadioGroup","set_selectedId",0x20b14fa8,"flixel.addons.ui.FlxUIRadioGroup.set_selectedId","flixel/addons/ui/FlxUIRadioGroup.hx",283,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_309_setLineScroll,"flixel.addons.ui.FlxUIRadioGroup","setLineScroll",0x8e2ebb2e,"flixel.addons.ui.FlxUIRadioGroup.setLineScroll","flixel/addons/ui/FlxUIRadioGroup.hx",309,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_320_setRadioActive,"flixel.addons.ui.FlxUIRadioGroup","setRadioActive",0xd9735874,"flixel.addons.ui.FlxUIRadioGroup.setRadioActive","flixel/addons/ui/FlxUIRadioGroup.hx",320,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_353__refreshRadios,"flixel.addons.ui.FlxUIRadioGroup","_refreshRadios",0xb14e4769,"flixel.addons.ui.FlxUIRadioGroup._refreshRadios","flixel/addons/ui/FlxUIRadioGroup.hx",353,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_390__refreshRadios,"flixel.addons.ui.FlxUIRadioGroup","_refreshRadios",0xb14e4769,"flixel.addons.ui.FlxUIRadioGroup._refreshRadios","flixel/addons/ui/FlxUIRadioGroup.hx",390,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_444_updateActives,"flixel.addons.ui.FlxUIRadioGroup","updateActives",0x034b5aaf,"flixel.addons.ui.FlxUIRadioGroup.updateActives","flixel/addons/ui/FlxUIRadioGroup.hx",444,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_463_makeActiveStyle,"flixel.addons.ui.FlxUIRadioGroup","makeActiveStyle",0x9d1f80c8,"flixel.addons.ui.FlxUIRadioGroup.makeActiveStyle","flixel/addons/ui/FlxUIRadioGroup.hx",463,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_476__onCheckBoxEvent,"flixel.addons.ui.FlxUIRadioGroup","_onCheckBoxEvent",0xc5d5ffee,"flixel.addons.ui.FlxUIRadioGroup._onCheckBoxEvent","flixel/addons/ui/FlxUIRadioGroup.hx",476,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_479__onClick,"flixel.addons.ui.FlxUIRadioGroup","_onClick",0x69011e3f,"flixel.addons.ui.FlxUIRadioGroup._onClick","flixel/addons/ui/FlxUIRadioGroup.hx",479,0x807a4586)
HX_DEFINE_STACK_FRAME(_hx_pos_215b0c31593ed545_41_boot,"flixel.addons.ui.FlxUIRadioGroup","boot",0xc19a3fc7,"flixel.addons.ui.FlxUIRadioGroup.boot","flixel/addons/ui/FlxUIRadioGroup.hx",41,0x807a4586)
namespace flixel{
namespace addons{
namespace ui{

void FlxUIRadioGroup_obj::__construct(Float X,Float Y,::Array< ::String > ids_,::Array< ::String > labels_, ::Dynamic callback_,hx::Null< Float >  __o_y_space_,hx::Null< int >  __o_width_,hx::Null< int >  __o_height_,hx::Null< int >  __o_label_width_,::String __o_MoreString, ::flixel::math::FlxPoint PrevButtonOffset, ::flixel::math::FlxPoint NextButtonOffset,::Dynamic PrevButton,::Dynamic NextButton){
Float y_space_ = __o_y_space_.Default(25);
int width_ = __o_width_.Default(100);
int height_ = __o_height_.Default(20);
int label_width_ = __o_label_width_.Default(100);
::String MoreString = __o_MoreString.Default(HX_HCSTRING("<X> more...","\x7b","\x65","\x54","\x87"));
            	HX_GC_STACKFRAME(&_hx_pos_215b0c31593ed545_15_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(ids_,"ids_")
            	HX_STACK_ARG(labels_,"labels_")
            	HX_STACK_ARG(callback_,"callback_")
            	HX_STACK_ARG(y_space_,"y_space_")
            	HX_STACK_ARG(width_,"width_")
            	HX_STACK_ARG(height_,"height_")
            	HX_STACK_ARG(label_width_,"label_width_")
            	HX_STACK_ARG(MoreString,"MoreString")
            	HX_STACK_ARG(PrevButtonOffset,"PrevButtonOffset")
            	HX_STACK_ARG(NextButtonOffset,"NextButtonOffset")
            	HX_STACK_ARG(PrevButton,"PrevButton")
            	HX_STACK_ARG(NextButton,"NextButton")
HXLINE( 346)		this->_clickable = true;
HXLINE( 344)		this->_selected = (int)0;
HXLINE( 343)		this->_y_space = ((Float)25);
HXLINE( 341)		this->_height = (int)20;
HXLINE( 340)		this->_width = (int)100;
HXLINE( 339)		this->_label_width = (int)100;
HXLINE(  65)		this->fixedSize = false;
HXLINE( 109)		super::__construct(null(),null());
HXLINE( 110)		this->_y_space = y_space_;
HXLINE( 111)		this->_width = width_;
HXLINE( 112)		this->_height = height_;
HXLINE( 113)		this->_label_width = label_width_;
HXLINE( 114)		if (hx::IsNull( ids_ )) {
HXLINE( 115)			ids_ = ::Array_obj< ::String >::__new(0);
            		}
HXLINE( 116)		if (hx::IsNull( labels_ )) {
HXLINE( 117)			labels_ = ::Array_obj< ::String >::__new(0);
            		}
HXLINE( 118)		this->callback = callback_;
HXLINE( 119)		this->_list_radios = ::Array_obj< ::Dynamic>::__new();
HXLINE( 120)		this->_list_active = ::Array_obj< bool >::__new(0);
HXLINE( 121)		this->_list =  ::flixel::addons::ui::FlxUIList_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),(int)0,(int)0,MoreString,(int)1,(int)0,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton);
HXLINE( 122)		this->add(this->_list);
HXLINE( 123)		this->updateRadios(ids_,labels_);
HXLINE( 124)		this->loadGraphics(null(),null());
HXLINE( 125)		this->set_x(X);
HXLINE( 126)		this->set_y(Y);
            	}

Dynamic FlxUIRadioGroup_obj::__CreateEmpty() { return new FlxUIRadioGroup_obj; }

void *FlxUIRadioGroup_obj::_hx_vtable = 0;

Dynamic FlxUIRadioGroup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUIRadioGroup_obj > _hx_result = new FlxUIRadioGroup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13]);
	return _hx_result;
}

bool FlxUIRadioGroup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x1fa56663) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x1fa56663;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		if (inClassId<=(int)0x282173df) {
			return inClassId==(int)0x263b73ac || inClassId==(int)0x282173df;
		} else {
			return inClassId==(int)0x2e105115;
		}
	}
}

static ::flixel::addons::ui::interfaces::IHasParams_obj _hx_flixel_addons_ui_FlxUIRadioGroup__hx_flixel_addons_ui_interfaces_IHasParams= {
	( ::cpp::VirtualArray (hx::Object::*)(::cpp::VirtualArray))&::flixel::addons::ui::FlxUIRadioGroup_obj::set_params,
};

static ::flixel::addons::ui::interfaces::IFlxUIClickable_obj _hx_flixel_addons_ui_FlxUIRadioGroup__hx_flixel_addons_ui_interfaces_IFlxUIClickable= {
	( bool (hx::Object::*)(bool))&::flixel::addons::ui::FlxUIRadioGroup_obj::set_skipButtonUpdate,
};

void *FlxUIRadioGroup_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9e5db374: return &_hx_flixel_addons_ui_FlxUIRadioGroup__hx_flixel_addons_ui_interfaces_IHasParams;
		case (int)0x3e998408: return &_hx_flixel_addons_ui_FlxUIRadioGroup__hx_flixel_addons_ui_interfaces_IFlxUIClickable;
	}
	return super::_hx_getInterface(inHash);
}

 ::flixel::addons::ui::CheckStyle FlxUIRadioGroup_obj::set_activeStyle( ::flixel::addons::ui::CheckStyle b){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_23_set_activeStyle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  24)		this->activeStyle = b;
HXLINE(  25)		this->updateActives();
HXLINE(  26)		return this->activeStyle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_activeStyle,return )

 ::flixel::addons::ui::CheckStyle FlxUIRadioGroup_obj::set_inactiveStyle( ::flixel::addons::ui::CheckStyle b){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_30_set_inactiveStyle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  31)		this->inactiveStyle = b;
HXLINE(  32)		this->updateActives();
HXLINE(  33)		return this->inactiveStyle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_inactiveStyle,return )

int FlxUIRadioGroup_obj::get_numRadios(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_38_get_numRadios)
            	HX_STACK_THIS(this)
HXLINE(  38)		return this->_list_radios->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,get_numRadios,return )

bool FlxUIRadioGroup_obj::set_skipButtonUpdate(bool b){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_44_set_skipButtonUpdate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  45)		this->skipButtonUpdate = b;
HXLINE(  47)		{
HXLINE(  47)			HX_VARI( int,_g) = (int)0;
HXDLIN(  47)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN(  47)			while((_g < _g1->length)){
HXLINE(  47)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,fcb) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN(  47)				_g = (_g + (int)1);
HXLINE(  48)				fcb->set_skipButtonUpdate(b);
            			}
            		}
HXLINE(  50)		return this->skipButtonUpdate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_skipButtonUpdate,return )

::cpp::VirtualArray FlxUIRadioGroup_obj::set_params(::cpp::VirtualArray p){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_56_set_params)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE(  57)		this->params = p;
HXLINE(  58)		return this->params;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_params,return )

Float FlxUIRadioGroup_obj::set_width(Float Value){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_67_set_width)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(  68)		this->super::set_width(Value);
HXLINE(  69)		if (this->fixedSize) {
HXLINE(  70)			if (hx::IsNotNull( this->_list )) {
HXLINE(  71)				this->_list->set_width(Value);
            			}
            		}
HXLINE(  74)		return Value;
            	}


Float FlxUIRadioGroup_obj::set_height(Float Value){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_77_set_height)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(  78)		this->super::set_height(Value);
HXLINE(  79)		if (this->fixedSize) {
HXLINE(  80)			if (hx::IsNotNull( this->_list )) {
HXLINE(  81)				this->_list->set_height(Value);
            			}
            		}
HXLINE(  84)		return Value;
            	}


void FlxUIRadioGroup_obj::loadGraphics( ::Dynamic Box, ::Dynamic Dot){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_129_loadGraphics)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Box,"Box")
            	HX_STACK_ARG(Dot,"Dot")
HXLINE( 130)		if (hx::IsNotNull( Box )) {
HXLINE( 131)			this->_box_asset = Box;
            		}
            		else {
HXLINE( 133)			this->_box_asset = HX_("flixel/flixel-ui/img/radio.png",8d,a3,b0,52);
            		}
HXLINE( 135)		if (hx::IsNotNull( Dot )) {
HXLINE( 136)			this->_dot_asset = Dot;
            		}
            		else {
HXLINE( 138)			this->_dot_asset = HX_("flixel/flixel-ui/img/radio_dot.png",17,49,b2,eb);
            		}
HXLINE( 141)		if (::Std_obj::is(this->_box_asset,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE( 144)			this->_box_asset = ( ( ::flixel::FlxSprite)(this->_box_asset) )->graphic->key;
            		}
HXLINE( 147)		if (::Std_obj::is(this->_dot_asset,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE( 150)			this->_dot_asset = ( ( ::flixel::FlxSprite)(this->_dot_asset) )->graphic->key;
            		}
HXLINE( 153)		{
HXLINE( 153)			HX_VARI( int,_g) = (int)0;
HXDLIN( 153)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 153)			while((_g < _g1->length)){
HXLINE( 153)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 153)				_g = (_g + (int)1);
HXLINE( 155)				c->box->loadGraphic(this->_box_asset,true,null(),null(),null(),null());
HXLINE( 156)				c->mark->loadGraphic(this->_dot_asset,null(),null(),null(),null(),null());
            			}
            		}
HXLINE( 158)		this->_refreshRadios();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIRadioGroup_obj,loadGraphics,(void))

void FlxUIRadioGroup_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_161_destroy)
            	HX_STACK_THIS(this)
HXLINE( 162)		if (hx::IsNotNull( this->_list_radios )) {
HXLINE( 164)			::flixel::addons::ui::U_obj::clearArray(this->_list_radios);
            		}
HXLINE( 166)		if (hx::IsNotNull( this->_list_active )) {
HXLINE( 168)			::flixel::addons::ui::U_obj::clearArray(this->_list_active);
            		}
HXLINE( 170)		this->_list_active = null();
HXLINE( 171)		this->_list_radios = null();
HXLINE( 172)		this->_list = null();
HXLINE( 173)		this->_ids = null();
HXLINE( 174)		this->_labels = null();
HXLINE( 175)		this->super::destroy();
            	}


bool FlxUIRadioGroup_obj::updateLabel(int i,::String label_){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_178_updateLabel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(label_,"label_")
HXLINE( 179)		if ((i >= this->_list_radios->length)) {
HXLINE( 179)			return false;
            		}
HXLINE( 180)		this->_labels[i] = label_;
HXLINE( 181)		HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = this->_list_radios->__get(i).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXLINE( 182)		if (hx::IsNotNull( c )) {
HXLINE( 183)			c->button->set_width(this->_label_width);
HXLINE( 184)			c->set_text(label_);
            		}
HXLINE( 186)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIRadioGroup_obj,updateLabel,return )

bool FlxUIRadioGroup_obj::updateId(int i,::String id_){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_189_updateId)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(id_,"id_")
HXLINE( 190)		if ((i >= this->_list_radios->length)) {
HXLINE( 190)			return false;
            		}
HXLINE( 191)		this->_ids[i] = id_;
HXLINE( 192)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIRadioGroup_obj,updateId,return )

void FlxUIRadioGroup_obj::show(bool b){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_196_show)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 196)		HX_VARI( int,_g) = (int)0;
HXDLIN( 196)		HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list->group->members;
HXDLIN( 196)		while((_g < _g1->length)){
HXLINE( 196)			HX_VARI(  ::flixel::FlxSprite,fo) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 196)			_g = (_g + (int)1);
HXLINE( 197)			fo->set_visible(b);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,show,(void))

void FlxUIRadioGroup_obj::updateRadios(::Array< ::String > ids_,::Array< ::String > labels_){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_201_updateRadios)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ids_,"ids_")
            	HX_STACK_ARG(labels_,"labels_")
HXLINE( 202)		this->_ids = ids_;
HXLINE( 203)		this->_labels = labels_;
HXLINE( 204)		{
HXLINE( 204)			HX_VARI( int,_g) = (int)0;
HXDLIN( 204)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 204)			while((_g < _g1->length)){
HXLINE( 204)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 204)				_g = (_g + (int)1);
HXLINE( 205)				c->set_visible(false);
            			}
            		}
HXLINE( 207)		this->_refreshRadios();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIRadioGroup_obj,updateRadios,(void))

::Array< ::Dynamic> FlxUIRadioGroup_obj::getRadios(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_211_getRadios)
            	HX_STACK_THIS(this)
HXLINE( 211)		return this->_list_radios;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,getRadios,return )

::String FlxUIRadioGroup_obj::getLabel(int i){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_214_getLabel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 215)		bool _hx_tmp;
HXDLIN( 215)		if ((i >= (int)0)) {
HXLINE( 215)			_hx_tmp = (i < this->_labels->length);
            		}
            		else {
HXLINE( 215)			_hx_tmp = false;
            		}
HXDLIN( 215)		if (_hx_tmp) {
HXLINE( 216)			return this->_labels->__get(i);
            		}
HXLINE( 218)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,getLabel,return )

::String FlxUIRadioGroup_obj::getId(int i){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_221_getId)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 222)		bool _hx_tmp;
HXDLIN( 222)		if ((i >= (int)0)) {
HXLINE( 222)			_hx_tmp = (i < this->_ids->length);
            		}
            		else {
HXLINE( 222)			_hx_tmp = false;
            		}
HXDLIN( 222)		if (_hx_tmp) {
HXLINE( 223)			return this->_ids->__get(i);
            		}
HXLINE( 225)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,getId,return )

bool FlxUIRadioGroup_obj::getIsVisible(int i){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_228_getIsVisible)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 229)		bool _hx_tmp;
HXDLIN( 229)		if ((i >= (int)0)) {
HXLINE( 229)			_hx_tmp = (i < this->_list_radios->length);
            		}
            		else {
HXLINE( 229)			_hx_tmp = false;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 230)			return this->_list_radios->__get(i).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->visible;
            		}
HXLINE( 232)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,getIsVisible,return )

bool FlxUIRadioGroup_obj::get_clickable(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_237_get_clickable)
            	HX_STACK_THIS(this)
HXLINE( 237)		return this->_clickable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,get_clickable,return )

bool FlxUIRadioGroup_obj::set_clickable(bool b){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_238_set_clickable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 239)		this->_clickable = b;
HXLINE( 240)		{
HXLINE( 240)			HX_VARI( int,_g) = (int)0;
HXDLIN( 240)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 240)			while((_g < _g1->length)){
HXLINE( 240)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 240)				_g = (_g + (int)1);
HXLINE( 241)				c->set_active(b);
            			}
            		}
HXLINE( 243)		return this->_clickable;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_clickable,return )

int FlxUIRadioGroup_obj::get_selectedIndex(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_246_get_selectedIndex)
            	HX_STACK_THIS(this)
HXLINE( 246)		return this->_selected;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,get_selectedIndex,return )

int FlxUIRadioGroup_obj::set_selectedIndex(int i){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_247_set_selectedIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 248)		this->_selected = i;
HXLINE( 249)		HX_VARI( int,j) = (int)0;
HXLINE( 250)		{
HXLINE( 250)			HX_VARI( int,_g) = (int)0;
HXDLIN( 250)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 250)			while((_g < _g1->length)){
HXLINE( 250)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 250)				_g = (_g + (int)1);
HXLINE( 251)				c->set_checked(false);
HXLINE( 252)				if ((j == i)) {
HXLINE( 253)					c->set_checked(true);
            				}
HXLINE( 255)				j = (j + (int)1);
            			}
            		}
HXLINE( 257)		bool _hx_tmp;
HXDLIN( 257)		if ((this->_selected >= (int)0)) {
HXLINE( 257)			_hx_tmp = (this->_selected >= this->_list_radios->length);
            		}
            		else {
HXLINE( 257)			_hx_tmp = true;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 259)			this->_selected = (int)-1;
            		}
HXLINE( 261)		return this->_selected;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_selectedIndex,return )

::String FlxUIRadioGroup_obj::get_selectedLabel(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_264_get_selectedLabel)
            	HX_STACK_THIS(this)
HXLINE( 264)		return this->_labels->__get(this->_selected);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,get_selectedLabel,return )

::String FlxUIRadioGroup_obj::set_selectedLabel(::String str){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_265_set_selectedLabel)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(str,"str")
HXLINE( 266)		HX_VARI( int,i) = (int)0;
HXLINE( 267)		this->_selected = (int)-1;
HXLINE( 268)		{
HXLINE( 268)			HX_VARI( int,_g) = (int)0;
HXDLIN( 268)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 268)			while((_g < _g1->length)){
HXLINE( 268)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 268)				_g = (_g + (int)1);
HXLINE( 269)				c->set_checked(false);
HXLINE( 270)				if ((this->_labels->__get(i) == str)) {
HXLINE( 271)					this->_selected = i;
HXLINE( 272)					c->set_checked(true);
            				}
HXLINE( 274)				i = (i + (int)1);
            			}
            		}
HXLINE( 276)		bool _hx_tmp;
HXDLIN( 276)		if ((this->_selected >= (int)0)) {
HXLINE( 276)			_hx_tmp = (this->_selected < this->_labels->length);
            		}
            		else {
HXLINE( 276)			_hx_tmp = false;
            		}
HXDLIN( 276)		if (_hx_tmp) {
HXLINE( 277)			return this->_labels->__get(this->_selected);
            		}
HXLINE( 279)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_selectedLabel,return )

::String FlxUIRadioGroup_obj::get_selectedId(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_282_get_selectedId)
            	HX_STACK_THIS(this)
HXLINE( 282)		return this->_ids->__get(this->_selected);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,get_selectedId,return )

::String FlxUIRadioGroup_obj::set_selectedId(::String str){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_283_set_selectedId)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(str,"str")
HXLINE( 284)		HX_VARI( int,i) = (int)0;
HXLINE( 285)		this->_selected = (int)-1;
HXLINE( 286)		{
HXLINE( 286)			HX_VARI( int,_g) = (int)0;
HXDLIN( 286)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 286)			while((_g < _g1->length)){
HXLINE( 286)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 286)				_g = (_g + (int)1);
HXLINE( 287)				c->set_checked(false);
HXLINE( 288)				if ((this->_ids->__get(i) == str)) {
HXLINE( 289)					this->_selected = i;
HXLINE( 290)					c->set_checked(true);
            				}
HXLINE( 292)				i = (i + (int)1);
            			}
            		}
HXLINE( 294)		bool _hx_tmp;
HXDLIN( 294)		if ((this->_selected >= (int)0)) {
HXLINE( 294)			_hx_tmp = (this->_selected < this->_ids->length);
            		}
            		else {
HXLINE( 294)			_hx_tmp = false;
            		}
HXDLIN( 294)		if (_hx_tmp) {
HXLINE( 295)			return this->_ids->__get(this->_selected);
            		}
HXLINE( 297)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,set_selectedId,return )

 ::flixel::math::FlxPoint FlxUIRadioGroup_obj::setLineScroll(int scroll, ::Dynamic max_items){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_309_setLineScroll)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scroll,"scroll")
            	HX_STACK_ARG(max_items,"max_items")
HXLINE( 310)		this->_list->set_scrollIndex(scroll);
HXLINE( 311)		if (hx::IsNotNull( max_items )) {
HXLINE( 313)			if ((this->_list->stacking == (int)1)) {
HXLINE( 314)				this->set_height(((this->_y_space * max_items) + (int)1));
            			}
            		}
HXLINE( 317)		Float X = this->_list->amountPrevious;
HXDLIN( 317)		Float Y = this->_list->amountNext;
HXDLIN( 317)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 317)		point->_inPool = false;
HXDLIN( 317)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIRadioGroup_obj,setLineScroll,return )

void FlxUIRadioGroup_obj::setRadioActive(int i,bool b){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_320_setRadioActive)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
            	HX_STACK_ARG(b,"b")
HXLINE( 321)		bool _hx_tmp;
HXDLIN( 321)		if ((i >= (int)0)) {
HXLINE( 321)			_hx_tmp = (i < this->_list_active->length);
            		}
            		else {
HXLINE( 321)			_hx_tmp = false;
            		}
HXDLIN( 321)		if (_hx_tmp) {
HXLINE( 322)			this->_list_active[i] = b;
            		}
HXLINE( 324)		this->updateActives();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIRadioGroup_obj,setRadioActive,(void))

void FlxUIRadioGroup_obj::_refreshRadios(){
            	HX_GC_STACKFRAME(&_hx_pos_215b0c31593ed545_353__refreshRadios)
            	HX_STACK_THIS(this)
HXLINE( 354)		HX_VARI( Float,xx) = this->x;
HXLINE( 355)		HX_VARI( Float,yy) = this->y;
HXLINE( 356)		HX_VARI( int,i) = (int)0;
HXLINE( 358)		HX_VARI( Float,maxX) = (int)0;
HXLINE( 359)		HX_VARI( Float,maxY) = (int)0;
HXLINE( 361)		this->_list->_skipRefresh = true;
HXLINE( 363)		{
HXLINE( 363)			HX_VARI( int,_g) = (int)0;
HXDLIN( 363)			HX_VARI( ::Array< ::String >,_g1) = this->_ids;
HXDLIN( 363)			while((_g < _g1->length)){
HXLINE( 363)				HX_VARI( ::String,id) = _g1->__get(_g);
HXDLIN( 363)				_g = (_g + (int)1);
HXLINE( 364)				HX_VARI( ::String,label) = HX_("",00,00,00,00);
HXLINE( 365)				bool _hx_tmp;
HXDLIN( 365)				if (hx::IsNotNull( this->_labels )) {
HXLINE( 365)					_hx_tmp = (this->_labels->length > i);
            				}
            				else {
HXLINE( 365)					_hx_tmp = false;
            				}
HXDLIN( 365)				if (_hx_tmp) {
HXLINE( 366)					label = this->_labels->__get(i);
            				}
            				else {
HXLINE( 368)					label = ((HX_("<",3c,00,00,00) + id) + HX_(">",3e,00,00,00));
            				}
HXLINE( 370)				HX_VAR(  ::flixel::addons::ui::FlxUICheckBox,c);
HXLINE( 371)				if ((this->_list_radios->length > i)) {
HXLINE( 372)					c = this->_list_radios->__get(i).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXLINE( 373)					c->set_visible(true);
HXLINE( 374)					c->set_text(label);
HXLINE( 375)					if ((i == (int)0)) {
HXLINE( 377)						xx = c->x;
HXLINE( 378)						yy = c->y;
            					}
            					else {
HXLINE( 382)						c->set_x(::Std_obj::_hx_int(xx));
HXLINE( 383)						c->set_y(::Std_obj::_hx_int(yy));
            					}
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::flixel::addons::ui::FlxUICheckBox,a1) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_215b0c31593ed545_390__refreshRadios)
HXLINE( 390)						f(a1);
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 388)					c =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,(int)0,(int)0,this->_box_asset,this->_dot_asset,label,this->_label_width,::cpp::VirtualArray_obj::__new(2)->init(0,id)->init(1,false),null());
HXLINE( 389)					c->broadcastToFlxUI = false;
HXLINE( 390)					 ::Dynamic f = this->_onCheckBoxEvent_dyn();
HXDLIN( 390)					 ::flixel::addons::ui::FlxUICheckBox a1 = c;
HXDLIN( 390)					c->callback =  ::Dynamic(new _hx_Closure_0(f,a1));
HXLINE( 392)					this->_list->add(c).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 394)					c->set_x(::Std_obj::_hx_int(xx));
HXLINE( 395)					c->set_y(::Std_obj::_hx_int(yy));
HXLINE( 397)					c->set_text(label);
HXLINE( 398)					if ((this->_list_radios->length > (int)0)) {
HXLINE( 399)						c->button->copyStyle(( ( ::flixel::addons::ui::FlxUITypedButton)(this->_list_radios->__get((int)0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->button) ));
HXLINE( 400)						if (hx::IsNull( this->activeStyle )) {
HXLINE( 401)							this->set_activeStyle(this->makeActiveStyle());
            						}
HXLINE( 403)						HX_VARI_NAME(  ::flixel::addons::ui::FlxUIButton,c1,"c") = c->button;
HXDLIN( 403)						c1->set_width(this->_list_radios->__get((int)0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->button->get_width());
HXLINE( 404)						HX_VARI_NAME(  ::flixel::addons::ui::FlxUIButton,c2,"c") = c->button;
HXDLIN( 404)						c2->set_height(this->_list_radios->__get((int)0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->button->get_height());
HXLINE( 405)						c->set_textX(this->_list_radios->__get((int)0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->textX);
HXLINE( 406)						c->set_textY(this->_list_radios->__get((int)0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->textY);
            					}
HXLINE( 409)					this->_list_radios->push(c);
HXLINE( 410)					this->_list_active->push(true);
            				}
HXLINE( 413)				if (((xx + c->get_width()) > maxX)) {
HXLINE( 414)					maxX = (xx + c->get_width());
            				}
HXLINE( 416)				if (((yy + c->get_height()) > maxY)) {
HXLINE( 417)					maxY = (yy + c->get_height());
            				}
HXLINE( 420)				yy = (yy + this->_y_space);
HXLINE( 421)				i = (i + (int)1);
            			}
            		}
HXLINE( 423)		if ((this->fixedSize == false)) {
HXLINE( 424)			maxX = (maxX + (int)5);
HXLINE( 425)			maxY = (maxY + (int)5);
HXLINE( 426)			if ((maxX > this->_list->get_width())) {
HXLINE( 427)				this->_list->set_width(maxX);
            			}
HXLINE( 429)			if ((maxY > this->_list->get_height())) {
HXLINE( 430)				this->_list->set_height(maxY);
            			}
HXLINE( 432)			this->set_width(maxX);
HXLINE( 433)			this->set_height(maxY);
            		}
HXLINE( 435)		this->_list->_skipRefresh = false;
HXLINE( 437)		if ((this->fixedSize == true)) {
HXLINE( 438)			this->_list->refreshList();
            		}
HXLINE( 441)		this->updateActives();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,_refreshRadios,(void))

void FlxUIRadioGroup_obj::updateActives(){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_444_updateActives)
            	HX_STACK_THIS(this)
HXLINE( 445)		HX_VARI( int,i) = (int)0;
HXLINE( 446)		{
HXLINE( 446)			HX_VARI( int,_g) = (int)0;
HXDLIN( 446)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 446)			while((_g < _g1->length)){
HXLINE( 446)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,r) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 446)				_g = (_g + (int)1);
HXLINE( 448)				r->set_active(this->_list_active->__get(i));
HXLINE( 450)				bool _hx_tmp;
HXDLIN( 450)				if ((this->_list_active->__get(i) == false)) {
HXLINE( 450)					_hx_tmp = hx::IsNotNull( this->inactiveStyle );
            				}
            				else {
HXLINE( 450)					_hx_tmp = false;
            				}
HXDLIN( 450)				if (_hx_tmp) {
HXLINE( 452)					this->inactiveStyle->applyToCheck(r);
            				}
            				else {
HXLINE( 455)					bool _hx_tmp1;
HXDLIN( 455)					if ((this->_list_active->__get(i) == true)) {
HXLINE( 455)						_hx_tmp1 = hx::IsNotNull( this->activeStyle );
            					}
            					else {
HXLINE( 455)						_hx_tmp1 = false;
            					}
HXDLIN( 455)					if (_hx_tmp1) {
HXLINE( 457)						this->activeStyle->applyToCheck(r);
            					}
            				}
HXLINE( 459)				i = (i + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,updateActives,(void))

 ::flixel::addons::ui::CheckStyle FlxUIRadioGroup_obj::makeActiveStyle(){
            	HX_GC_STACKFRAME(&_hx_pos_215b0c31593ed545_463_makeActiveStyle)
            	HX_STACK_THIS(this)
HXLINE( 464)		if ((this->_list_radios->length > (int)0)) {
HXLINE( 466)			HX_VARI(  ::flixel::text::FlxText,t) = ( ( ::flixel::text::FlxText)(this->_list_radios->__get((int)0).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >()->button->label) );
HXLINE( 467)			HX_VARI(  ::flixel::addons::ui::FontDef,fd) = ::flixel::addons::ui::FontDef_obj::copyFromFlxText(t);
HXLINE( 470)			return  ::flixel::addons::ui::CheckStyle_obj::__alloc( HX_CTX ,(int)16777215,fd,::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(t->_defaultFormat->align),t->color, ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,t->borderStyle,t->borderColor,t->borderSize,t->borderQuality));
            		}
HXLINE( 472)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUIRadioGroup_obj,makeActiveStyle,return )

void FlxUIRadioGroup_obj::_onCheckBoxEvent( ::flixel::addons::ui::FlxUICheckBox checkBox){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_476__onCheckBoxEvent)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(checkBox,"checkBox")
HXLINE( 476)		this->_onClick(checkBox,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUIRadioGroup_obj,_onCheckBoxEvent,(void))

bool FlxUIRadioGroup_obj::_onClick( ::flixel::addons::ui::FlxUICheckBox checkBox,bool doCallback){
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_479__onClick)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(checkBox,"checkBox")
            	HX_STACK_ARG(doCallback,"doCallback")
HXLINE( 480)		if (!(this->_clickable)) {
HXLINE( 480)			return false;
            		}
HXLINE( 482)		HX_VARI( int,i) = (int)0;
HXLINE( 483)		{
HXLINE( 483)			HX_VARI( int,_g) = (int)0;
HXDLIN( 483)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_list_radios;
HXDLIN( 483)			while((_g < _g1->length)){
HXLINE( 483)				HX_VARI(  ::flixel::addons::ui::FlxUICheckBox,c) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXDLIN( 483)				_g = (_g + (int)1);
HXLINE( 484)				c->set_checked(false);
HXLINE( 485)				if (hx::IsEq( checkBox,c )) {
HXLINE( 486)					this->_selected = i;
HXLINE( 487)					c->set_checked(true);
            				}
HXLINE( 489)				i = (i + (int)1);
            			}
            		}
HXLINE( 492)		if (doCallback) {
HXLINE( 493)			if (hx::IsNotNull( this->callback )) {
HXLINE( 494)				this->callback(this->get_selectedId());
            			}
HXLINE( 497)			if (this->broadcastToFlxUI) {
HXLINE( 498)				::flixel::addons::ui::FlxUI_obj::event(HX_("click_radio_group",04,f0,40,57),hx::ObjectPtr<OBJ_>(this),this->_ids->__get(this->_selected),this->params);
            			}
            		}
HXLINE( 501)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUIRadioGroup_obj,_onClick,return )

::String FlxUIRadioGroup_obj::CLICK_EVENT;


hx::ObjectPtr< FlxUIRadioGroup_obj > FlxUIRadioGroup_obj::__new(Float X,Float Y,::Array< ::String > ids_,::Array< ::String > labels_, ::Dynamic callback_,hx::Null< Float >  __o_y_space_,hx::Null< int >  __o_width_,hx::Null< int >  __o_height_,hx::Null< int >  __o_label_width_,::String __o_MoreString, ::flixel::math::FlxPoint PrevButtonOffset, ::flixel::math::FlxPoint NextButtonOffset,::Dynamic PrevButton,::Dynamic NextButton) {
	hx::ObjectPtr< FlxUIRadioGroup_obj > __this = new FlxUIRadioGroup_obj();
	__this->__construct(X,Y,ids_,labels_,callback_,__o_y_space_,__o_width_,__o_height_,__o_label_width_,__o_MoreString,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton);
	return __this;
}

hx::ObjectPtr< FlxUIRadioGroup_obj > FlxUIRadioGroup_obj::__alloc(hx::Ctx *_hx_ctx,Float X,Float Y,::Array< ::String > ids_,::Array< ::String > labels_, ::Dynamic callback_,hx::Null< Float >  __o_y_space_,hx::Null< int >  __o_width_,hx::Null< int >  __o_height_,hx::Null< int >  __o_label_width_,::String __o_MoreString, ::flixel::math::FlxPoint PrevButtonOffset, ::flixel::math::FlxPoint NextButtonOffset,::Dynamic PrevButton,::Dynamic NextButton) {
	FlxUIRadioGroup_obj *__this = (FlxUIRadioGroup_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUIRadioGroup_obj), true, "flixel.addons.ui.FlxUIRadioGroup"));
	*(void **)__this = FlxUIRadioGroup_obj::_hx_vtable;
	__this->__construct(X,Y,ids_,labels_,callback_,__o_y_space_,__o_width_,__o_height_,__o_label_width_,__o_MoreString,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton);
	return __this;
}

FlxUIRadioGroup_obj::FlxUIRadioGroup_obj()
{
}

void FlxUIRadioGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUIRadioGroup);
	HX_MARK_MEMBER_NAME(activeStyle,"activeStyle");
	HX_MARK_MEMBER_NAME(inactiveStyle,"inactiveStyle");
	HX_MARK_MEMBER_NAME(numRadios,"numRadios");
	HX_MARK_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(fixedSize,"fixedSize");
	HX_MARK_MEMBER_NAME(_list_active,"_list_active");
	HX_MARK_MEMBER_NAME(_list,"_list");
	HX_MARK_MEMBER_NAME(_box_asset,"_box_asset");
	HX_MARK_MEMBER_NAME(_dot_asset,"_dot_asset");
	HX_MARK_MEMBER_NAME(_labels,"_labels");
	HX_MARK_MEMBER_NAME(_ids,"_ids");
	HX_MARK_MEMBER_NAME(_label_width,"_label_width");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_y_space,"_y_space");
	HX_MARK_MEMBER_NAME(_selected,"_selected");
	HX_MARK_MEMBER_NAME(_clickable,"_clickable");
	HX_MARK_MEMBER_NAME(_list_radios,"_list_radios");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUIRadioGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(activeStyle,"activeStyle");
	HX_VISIT_MEMBER_NAME(inactiveStyle,"inactiveStyle");
	HX_VISIT_MEMBER_NAME(numRadios,"numRadios");
	HX_VISIT_MEMBER_NAME(skipButtonUpdate,"skipButtonUpdate");
	HX_VISIT_MEMBER_NAME(callback,"callback");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(fixedSize,"fixedSize");
	HX_VISIT_MEMBER_NAME(_list_active,"_list_active");
	HX_VISIT_MEMBER_NAME(_list,"_list");
	HX_VISIT_MEMBER_NAME(_box_asset,"_box_asset");
	HX_VISIT_MEMBER_NAME(_dot_asset,"_dot_asset");
	HX_VISIT_MEMBER_NAME(_labels,"_labels");
	HX_VISIT_MEMBER_NAME(_ids,"_ids");
	HX_VISIT_MEMBER_NAME(_label_width,"_label_width");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_y_space,"_y_space");
	HX_VISIT_MEMBER_NAME(_selected,"_selected");
	HX_VISIT_MEMBER_NAME(_clickable,"_clickable");
	HX_VISIT_MEMBER_NAME(_list_radios,"_list_radios");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUIRadioGroup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn()); }
		if (HX_FIELD_EQ(inName,"_ids") ) { return hx::Val( _ids); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"getId") ) { return hx::Val( getId_dyn()); }
		if (HX_FIELD_EQ(inName,"_list") ) { return hx::Val( _list); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params); }
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"_labels") ) { return hx::Val( _labels); }
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return hx::Val( callback); }
		if (HX_FIELD_EQ(inName,"updateId") ) { return hx::Val( updateId_dyn()); }
		if (HX_FIELD_EQ(inName,"getLabel") ) { return hx::Val( getLabel_dyn()); }
		if (HX_FIELD_EQ(inName,"_y_space") ) { return hx::Val( _y_space); }
		if (HX_FIELD_EQ(inName,"_onClick") ) { return hx::Val( _onClick_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clickable") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_clickable()); }
		if (HX_FIELD_EQ(inName,"numRadios") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numRadios() : numRadios); }
		if (HX_FIELD_EQ(inName,"fixedSize") ) { return hx::Val( fixedSize); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		if (HX_FIELD_EQ(inName,"getRadios") ) { return hx::Val( getRadios_dyn()); }
		if (HX_FIELD_EQ(inName,"_selected") ) { return hx::Val( _selected); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectedId") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectedId()); }
		if (HX_FIELD_EQ(inName,"set_params") ) { return hx::Val( set_params_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"_box_asset") ) { return hx::Val( _box_asset); }
		if (HX_FIELD_EQ(inName,"_dot_asset") ) { return hx::Val( _dot_asset); }
		if (HX_FIELD_EQ(inName,"_clickable") ) { return hx::Val( _clickable); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"activeStyle") ) { return hx::Val( activeStyle); }
		if (HX_FIELD_EQ(inName,"updateLabel") ) { return hx::Val( updateLabel_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadGraphics") ) { return hx::Val( loadGraphics_dyn()); }
		if (HX_FIELD_EQ(inName,"updateRadios") ) { return hx::Val( updateRadios_dyn()); }
		if (HX_FIELD_EQ(inName,"getIsVisible") ) { return hx::Val( getIsVisible_dyn()); }
		if (HX_FIELD_EQ(inName,"_list_active") ) { return hx::Val( _list_active); }
		if (HX_FIELD_EQ(inName,"_label_width") ) { return hx::Val( _label_width); }
		if (HX_FIELD_EQ(inName,"_list_radios") ) { return hx::Val( _list_radios); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectedLabel()); }
		if (HX_FIELD_EQ(inName,"selectedIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectedIndex()); }
		if (HX_FIELD_EQ(inName,"inactiveStyle") ) { return hx::Val( inactiveStyle); }
		if (HX_FIELD_EQ(inName,"get_numRadios") ) { return hx::Val( get_numRadios_dyn()); }
		if (HX_FIELD_EQ(inName,"get_clickable") ) { return hx::Val( get_clickable_dyn()); }
		if (HX_FIELD_EQ(inName,"set_clickable") ) { return hx::Val( set_clickable_dyn()); }
		if (HX_FIELD_EQ(inName,"setLineScroll") ) { return hx::Val( setLineScroll_dyn()); }
		if (HX_FIELD_EQ(inName,"updateActives") ) { return hx::Val( updateActives_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_selectedId") ) { return hx::Val( get_selectedId_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selectedId") ) { return hx::Val( set_selectedId_dyn()); }
		if (HX_FIELD_EQ(inName,"setRadioActive") ) { return hx::Val( setRadioActive_dyn()); }
		if (HX_FIELD_EQ(inName,"_refreshRadios") ) { return hx::Val( _refreshRadios_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_activeStyle") ) { return hx::Val( set_activeStyle_dyn()); }
		if (HX_FIELD_EQ(inName,"makeActiveStyle") ) { return hx::Val( makeActiveStyle_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { return hx::Val( skipButtonUpdate); }
		if (HX_FIELD_EQ(inName,"_onCheckBoxEvent") ) { return hx::Val( _onCheckBoxEvent_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"set_inactiveStyle") ) { return hx::Val( set_inactiveStyle_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectedIndex") ) { return hx::Val( get_selectedIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selectedIndex") ) { return hx::Val( set_selectedIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectedLabel") ) { return hx::Val( get_selectedLabel_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selectedLabel") ) { return hx::Val( set_selectedLabel_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_skipButtonUpdate") ) { return hx::Val( set_skipButtonUpdate_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUIRadioGroup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ids") ) { _ids=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_list") ) { _list=inValue.Cast<  ::flixel::addons::ui::FlxUIList >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_params(inValue) );params=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_labels") ) { _labels=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y_space") ) { _y_space=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clickable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_clickable(inValue) ); }
		if (HX_FIELD_EQ(inName,"numRadios") ) { numRadios=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fixedSize") ) { fixedSize=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selected") ) { _selected=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectedId") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectedId(inValue) ); }
		if (HX_FIELD_EQ(inName,"_box_asset") ) { _box_asset=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dot_asset") ) { _dot_asset=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clickable") ) { _clickable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"activeStyle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_activeStyle(inValue) );activeStyle=inValue.Cast<  ::flixel::addons::ui::CheckStyle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_list_active") ) { _list_active=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_label_width") ) { _label_width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_list_radios") ) { _list_radios=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectedLabel(inValue) ); }
		if (HX_FIELD_EQ(inName,"selectedIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectedIndex(inValue) ); }
		if (HX_FIELD_EQ(inName,"inactiveStyle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_inactiveStyle(inValue) );inactiveStyle=inValue.Cast<  ::flixel::addons::ui::CheckStyle >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"skipButtonUpdate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skipButtonUpdate(inValue) );skipButtonUpdate=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUIRadioGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("clickable","\xe2","\xad","\x8e","\x34"));
	outFields->push(HX_HCSTRING("selectedId","\x16","\xf7","\xd0","\xc6"));
	outFields->push(HX_HCSTRING("selectedLabel","\x99","\xe9","\xf0","\x65"));
	outFields->push(HX_HCSTRING("selectedIndex","\xb7","\x76","\x56","\xb4"));
	outFields->push(HX_HCSTRING("activeStyle","\x8b","\xa5","\x62","\xe0"));
	outFields->push(HX_HCSTRING("inactiveStyle","\xc6","\x39","\x97","\xbc"));
	outFields->push(HX_HCSTRING("numRadios","\xfe","\x15","\xf8","\x61"));
	outFields->push(HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"));
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	outFields->push(HX_HCSTRING("fixedSize","\x55","\x90","\x3a","\x2d"));
	outFields->push(HX_HCSTRING("_list_active","\xc8","\x4c","\x75","\xd4"));
	outFields->push(HX_HCSTRING("_list","\x3d","\x38","\xc4","\xfa"));
	outFields->push(HX_HCSTRING("_box_asset","\x3d","\x85","\x1c","\x89"));
	outFields->push(HX_HCSTRING("_dot_asset","\x3b","\x7c","\xa9","\x88"));
	outFields->push(HX_HCSTRING("_labels","\x9e","\x39","\xf4","\xb7"));
	outFields->push(HX_HCSTRING("_ids","\x39","\x49","\x1b","\x3f"));
	outFields->push(HX_HCSTRING("_label_width","\x3c","\xa8","\xbf","\x42"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_y_space","\xc1","\x4e","\xab","\x5e"));
	outFields->push(HX_HCSTRING("_selected","\xba","\x21","\x03","\xf9"));
	outFields->push(HX_HCSTRING("_clickable","\xa3","\x29","\x31","\x90"));
	outFields->push(HX_HCSTRING("_list_radios","\x1a","\xd6","\x25","\x6f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUIRadioGroup_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::addons::ui::CheckStyle*/ ,(int)offsetof(FlxUIRadioGroup_obj,activeStyle),HX_HCSTRING("activeStyle","\x8b","\xa5","\x62","\xe0")},
	{hx::fsObject /*::flixel::addons::ui::CheckStyle*/ ,(int)offsetof(FlxUIRadioGroup_obj,inactiveStyle),HX_HCSTRING("inactiveStyle","\xc6","\x39","\x97","\xbc")},
	{hx::fsInt,(int)offsetof(FlxUIRadioGroup_obj,numRadios),HX_HCSTRING("numRadios","\xfe","\x15","\xf8","\x61")},
	{hx::fsBool,(int)offsetof(FlxUIRadioGroup_obj,skipButtonUpdate),HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUIRadioGroup_obj,callback),HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxUIRadioGroup_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{hx::fsBool,(int)offsetof(FlxUIRadioGroup_obj,fixedSize),HX_HCSTRING("fixedSize","\x55","\x90","\x3a","\x2d")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(FlxUIRadioGroup_obj,_list_active),HX_HCSTRING("_list_active","\xc8","\x4c","\x75","\xd4")},
	{hx::fsObject /*::flixel::addons::ui::FlxUIList*/ ,(int)offsetof(FlxUIRadioGroup_obj,_list),HX_HCSTRING("_list","\x3d","\x38","\xc4","\xfa")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUIRadioGroup_obj,_box_asset),HX_HCSTRING("_box_asset","\x3d","\x85","\x1c","\x89")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUIRadioGroup_obj,_dot_asset),HX_HCSTRING("_dot_asset","\x3b","\x7c","\xa9","\x88")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUIRadioGroup_obj,_labels),HX_HCSTRING("_labels","\x9e","\x39","\xf4","\xb7")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxUIRadioGroup_obj,_ids),HX_HCSTRING("_ids","\x39","\x49","\x1b","\x3f")},
	{hx::fsInt,(int)offsetof(FlxUIRadioGroup_obj,_label_width),HX_HCSTRING("_label_width","\x3c","\xa8","\xbf","\x42")},
	{hx::fsInt,(int)offsetof(FlxUIRadioGroup_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsInt,(int)offsetof(FlxUIRadioGroup_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsFloat,(int)offsetof(FlxUIRadioGroup_obj,_y_space),HX_HCSTRING("_y_space","\xc1","\x4e","\xab","\x5e")},
	{hx::fsInt,(int)offsetof(FlxUIRadioGroup_obj,_selected),HX_HCSTRING("_selected","\xba","\x21","\x03","\xf9")},
	{hx::fsBool,(int)offsetof(FlxUIRadioGroup_obj,_clickable),HX_HCSTRING("_clickable","\xa3","\x29","\x31","\x90")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUIRadioGroup_obj,_list_radios),HX_HCSTRING("_list_radios","\x1a","\xd6","\x25","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUIRadioGroup_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &FlxUIRadioGroup_obj::CLICK_EVENT,HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUIRadioGroup_obj_sMemberFields[] = {
	HX_HCSTRING("activeStyle","\x8b","\xa5","\x62","\xe0"),
	HX_HCSTRING("set_activeStyle","\x2e","\xda","\x0f","\x9d"),
	HX_HCSTRING("inactiveStyle","\xc6","\x39","\x97","\xbc"),
	HX_HCSTRING("set_inactiveStyle","\x29","\x1d","\x75","\xe6"),
	HX_HCSTRING("numRadios","\xfe","\x15","\xf8","\x61"),
	HX_HCSTRING("get_numRadios","\xd5","\xe9","\x5b","\x23"),
	HX_HCSTRING("skipButtonUpdate","\xba","\x02","\xf2","\x13"),
	HX_HCSTRING("set_skipButtonUpdate","\x37","\x1f","\x14","\xff"),
	HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	HX_HCSTRING("set_params","\x83","\x09","\x80","\xe1"),
	HX_HCSTRING("fixedSize","\x55","\x90","\x3a","\x2d"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("loadGraphics","\x11","\xe5","\xd0","\xcb"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("updateLabel","\x2b","\x77","\x47","\x55"),
	HX_HCSTRING("updateId","\x44","\x1a","\xfa","\x77"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("updateRadios","\x01","\x72","\xba","\xb0"),
	HX_HCSTRING("getRadios","\x4e","\x54","\x4d","\x2d"),
	HX_HCSTRING("getLabel","\x7e","\x1d","\x86","\xcf"),
	HX_HCSTRING("getId","\x11","\x92","\x60","\x91"),
	HX_HCSTRING("getIsVisible","\x32","\x92","\x79","\xb6"),
	HX_HCSTRING("get_clickable","\xb9","\x81","\xf2","\xf5"),
	HX_HCSTRING("set_clickable","\xc5","\x63","\xf8","\x3a"),
	HX_HCSTRING("get_selectedIndex","\x0e","\x82","\xc6","\xba"),
	HX_HCSTRING("set_selectedIndex","\x1a","\x5a","\x34","\xde"),
	HX_HCSTRING("get_selectedLabel","\xf0","\xf4","\x60","\x6c"),
	HX_HCSTRING("set_selectedLabel","\xfc","\xcc","\xce","\x8f"),
	HX_HCSTRING("get_selectedId","\x5f","\x7f","\xc6","\x3c"),
	HX_HCSTRING("set_selectedId","\xd3","\x67","\xe6","\x5c"),
	HX_HCSTRING("setLineScroll","\x63","\x11","\x85","\xbd"),
	HX_HCSTRING("setRadioActive","\x9f","\x70","\xa8","\x15"),
	HX_HCSTRING("_list_active","\xc8","\x4c","\x75","\xd4"),
	HX_HCSTRING("_list","\x3d","\x38","\xc4","\xfa"),
	HX_HCSTRING("_box_asset","\x3d","\x85","\x1c","\x89"),
	HX_HCSTRING("_dot_asset","\x3b","\x7c","\xa9","\x88"),
	HX_HCSTRING("_labels","\x9e","\x39","\xf4","\xb7"),
	HX_HCSTRING("_ids","\x39","\x49","\x1b","\x3f"),
	HX_HCSTRING("_label_width","\x3c","\xa8","\xbf","\x42"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_y_space","\xc1","\x4e","\xab","\x5e"),
	HX_HCSTRING("_selected","\xba","\x21","\x03","\xf9"),
	HX_HCSTRING("_clickable","\xa3","\x29","\x31","\x90"),
	HX_HCSTRING("_list_radios","\x1a","\xd6","\x25","\x6f"),
	HX_HCSTRING("_refreshRadios","\x94","\x5f","\x83","\xed"),
	HX_HCSTRING("updateActives","\xe4","\xb0","\xa1","\x32"),
	HX_HCSTRING("makeActiveStyle","\x3d","\x8e","\x5f","\x0f"),
	HX_HCSTRING("_onCheckBoxEvent","\xd9","\xb8","\xa1","\x4b"),
	HX_HCSTRING("_onClick","\x2a","\x74","\x54","\x18"),
	::String(null()) };

static void FlxUIRadioGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUIRadioGroup_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUIRadioGroup_obj::CLICK_EVENT,"CLICK_EVENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUIRadioGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUIRadioGroup_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUIRadioGroup_obj::CLICK_EVENT,"CLICK_EVENT");
};

#endif

hx::Class FlxUIRadioGroup_obj::__mClass;

static ::String FlxUIRadioGroup_obj_sStaticFields[] = {
	HX_HCSTRING("CLICK_EVENT","\x63","\x89","\xc0","\x0d"),
	::String(null())
};

void FlxUIRadioGroup_obj::__register()
{
	hx::Object *dummy = new FlxUIRadioGroup_obj;
	FlxUIRadioGroup_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUIRadioGroup","\xf9","\x4c","\x99","\x7f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUIRadioGroup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUIRadioGroup_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUIRadioGroup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUIRadioGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUIRadioGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUIRadioGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUIRadioGroup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUIRadioGroup_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_215b0c31593ed545_41_boot)
HXLINE(  41)		CLICK_EVENT = HX_("click_radio_group",04,f0,40,57);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
