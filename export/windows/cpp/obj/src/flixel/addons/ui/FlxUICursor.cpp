// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_AnchorPoint
#include <flixel/addons/ui/AnchorPoint.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxBaseMultiInput
#include <flixel/addons/ui/FlxBaseMultiInput.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiGamepad
#include <flixel/addons/ui/FlxMultiGamepad.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiGamepadAnalogStick
#include <flixel/addons/ui/FlxMultiGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiKey
#include <flixel/addons/ui/FlxMultiKey.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICursor
#include <flixel/addons/ui/FlxUICursor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIMouse
#include <flixel/addons/ui/FlxUIMouse.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_GamepadAutoConnectPreference
#include <flixel/addons/ui/GamepadAutoConnectPreference.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_SortMethod
#include <flixel/addons/ui/SortMethod.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_XY
#include <flixel/addons/ui/XY.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_26_new,"flixel.addons.ui.FlxUICursor","new",0x0bf8fb7d,"flixel.addons.ui.FlxUICursor.new","flixel/addons/ui/FlxUICursor.hx",26,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_47_findVisibleLocation,"flixel.addons.ui.FlxUICursor","findVisibleLocation",0x70b2b9ab,"flixel.addons.ui.FlxUICursor.findVisibleLocation","flixel/addons/ui/FlxUICursor.hx",47,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_114_set_listIndex,"flixel.addons.ui.FlxUICursor","set_listIndex",0xbbda2114,"flixel.addons.ui.FlxUICursor.set_listIndex","flixel/addons/ui/FlxUICursor.hx",114,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_130_set_visible,"flixel.addons.ui.FlxUICursor","set_visible",0x5e2cefb2,"flixel.addons.ui.FlxUICursor.set_visible","flixel/addons/ui/FlxUICursor.hx",130,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_136_set_location,"flixel.addons.ui.FlxUICursor","set_location",0xd1a64ef5,"flixel.addons.ui.FlxUICursor.set_location","flixel/addons/ui/FlxUICursor.hx",136,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_152_set_gamepad,"flixel.addons.ui.FlxUICursor","set_gamepad",0x448e57e1,"flixel.addons.ui.FlxUICursor.set_gamepad","flixel/addons/ui/FlxUICursor.hx",152,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_175_get_gamepad,"flixel.addons.ui.FlxUICursor","get_gamepad",0x3a2150d5,"flixel.addons.ui.FlxUICursor.get_gamepad","flixel/addons/ui/FlxUICursor.hx",175,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_255_destroy,"flixel.addons.ui.FlxUICursor","destroy",0x543baa97,"flixel.addons.ui.FlxUICursor.destroy","flixel/addons/ui/FlxUICursor.hx",255,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_283_update,"flixel.addons.ui.FlxUICursor","update",0x0fd86b0c,"flixel.addons.ui.FlxUICursor.update","flixel/addons/ui/FlxUICursor.hx",283,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_316_addWidgetsFromUI,"flixel.addons.ui.FlxUICursor","addWidgetsFromUI",0xd07d3faf,"flixel.addons.ui.FlxUICursor.addWidgetsFromUI","flixel/addons/ui/FlxUICursor.hx",316,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_344_jumpTo,"flixel.addons.ui.FlxUICursor","jumpTo",0x90ea8b0c,"flixel.addons.ui.FlxUICursor.jumpTo","flixel/addons/ui/FlxUICursor.hx",344,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_377_jumpToXY,"flixel.addons.ui.FlxUICursor","jumpToXY",0x88ecb30d,"flixel.addons.ui.FlxUICursor.jumpToXY","flixel/addons/ui/FlxUICursor.hx",377,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_436_addWidgetList,"flixel.addons.ui.FlxUICursor","addWidgetList",0xa4f08520,"flixel.addons.ui.FlxUICursor.addWidgetList","flixel/addons/ui/FlxUICursor.hx",436,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_490_addWidget,"flixel.addons.ui.FlxUICursor","addWidget",0xaa5cc3a2,"flixel.addons.ui.FlxUICursor.addWidget","flixel/addons/ui/FlxUICursor.hx",490,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_510_sortWidgets,"flixel.addons.ui.FlxUICursor","sortWidgets",0x3ee9f48e,"flixel.addons.ui.FlxUICursor.sortWidgets","flixel/addons/ui/FlxUICursor.hx",510,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_522_removeWidget,"flixel.addons.ui.FlxUICursor","removeWidget",0xdd6d546b,"flixel.addons.ui.FlxUICursor.removeWidget","flixel/addons/ui/FlxUICursor.hx",522,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_543_setDefaultKeys,"flixel.addons.ui.FlxUICursor","setDefaultKeys",0xd71836d6,"flixel.addons.ui.FlxUICursor.setDefaultKeys","flixel/addons/ui/FlxUICursor.hx",543,0xd77c8c34)
static const int _hx_array_data_79a4790b_32[] = {
	(int)16,
};
static const int _hx_array_data_79a4790b_33[] = {
	(int)16,
};
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_632_getGamepad,"flixel.addons.ui.FlxUICursor","getGamepad",0xafc4892e,"flixel.addons.ui.FlxUICursor.getGamepad","flixel/addons/ui/FlxUICursor.hx",632,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_655__sortIDVisible,"flixel.addons.ui.FlxUICursor","_sortIDVisible",0x79dbeefd,"flixel.addons.ui.FlxUICursor._sortIDVisible","flixel/addons/ui/FlxUICursor.hx",655,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_663__sortXYWidgetList,"flixel.addons.ui.FlxUICursor","_sortXYWidgetList",0x16b9553d,"flixel.addons.ui.FlxUICursor._sortXYWidgetList","flixel/addons/ui/FlxUICursor.hx",663,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_671__sortXYVisible,"flixel.addons.ui.FlxUICursor","_sortXYVisible",0x87247297,"flixel.addons.ui.FlxUICursor._sortXYVisible","flixel/addons/ui/FlxUICursor.hx",671,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_681__addToKeys,"flixel.addons.ui.FlxUICursor","_addToKeys",0x67642054,"flixel.addons.ui.FlxUICursor._addToKeys","flixel/addons/ui/FlxUICursor.hx",681,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_695__clearKeys,"flixel.addons.ui.FlxUICursor","_clearKeys",0xed476865,"flixel.addons.ui.FlxUICursor._clearKeys","flixel/addons/ui/FlxUICursor.hx",695,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_703__newKeys,"flixel.addons.ui.FlxUICursor","_newKeys",0xbfa453b8,"flixel.addons.ui.FlxUICursor._newKeys","flixel/addons/ui/FlxUICursor.hx",703,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_711__checkKeys,"flixel.addons.ui.FlxUICursor","_checkKeys",0xcd664920,"flixel.addons.ui.FlxUICursor._checkKeys","flixel/addons/ui/FlxUICursor.hx",711,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_782__clickKeysJustPressed,"flixel.addons.ui.FlxUICursor","_clickKeysJustPressed",0x0327bd16,"flixel.addons.ui.FlxUICursor._clickKeysJustPressed","flixel/addons/ui/FlxUICursor.hx",782,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_794__clickKeysPressed,"flixel.addons.ui.FlxUICursor","_clickKeysPressed",0x3a0ee1e2,"flixel.addons.ui.FlxUICursor._clickKeysPressed","flixel/addons/ui/FlxUICursor.hx",794,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_805__getWidgetPoint,"flixel.addons.ui.FlxUICursor","_getWidgetPoint",0xcea94c32,"flixel.addons.ui.FlxUICursor._getWidgetPoint","flixel/addons/ui/FlxUICursor.hx",805,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_837__doMouseMove,"flixel.addons.ui.FlxUICursor","_doMouseMove",0xd60b120f,"flixel.addons.ui.FlxUICursor._doMouseMove","flixel/addons/ui/FlxUICursor.hx",837,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_871__doPress,"flixel.addons.ui.FlxUICursor","_doPress",0xc485f93c,"flixel.addons.ui.FlxUICursor._doPress","flixel/addons/ui/FlxUICursor.hx",871,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_906__doRelease,"flixel.addons.ui.FlxUICursor","_doRelease",0x8beacbc0,"flixel.addons.ui.FlxUICursor._doRelease","flixel/addons/ui/FlxUICursor.hx",906,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_955__findNextY,"flixel.addons.ui.FlxUICursor","_findNextY",0xbaa89f51,"flixel.addons.ui.FlxUICursor._findNextY","flixel/addons/ui/FlxUICursor.hx",955,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_1029__wrapX,"flixel.addons.ui.FlxUICursor","_wrapX",0x550d8392,"flixel.addons.ui.FlxUICursor._wrapX","flixel/addons/ui/FlxUICursor.hx",1029,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_1042__wrapY,"flixel.addons.ui.FlxUICursor","_wrapY",0x550d8393,"flixel.addons.ui.FlxUICursor._wrapY","flixel/addons/ui/FlxUICursor.hx",1042,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_1120__doInput,"flixel.addons.ui.FlxUICursor","_doInput",0xba1b69c3,"flixel.addons.ui.FlxUICursor._doInput","flixel/addons/ui/FlxUICursor.hx",1120,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_1221__updateCursor,"flixel.addons.ui.FlxUICursor","_updateCursor",0x0235d9fb,"flixel.addons.ui.FlxUICursor._updateCursor","flixel/addons/ui/FlxUICursor.hx",1221,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_1281__flipAnchor,"flixel.addons.ui.FlxUICursor","_flipAnchor",0xd4c95e3e,"flixel.addons.ui.FlxUICursor._flipAnchor","flixel/addons/ui/FlxUICursor.hx",1281,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_190_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",190,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_191_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",191,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_192_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",192,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_193_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",193,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_195_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",195,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_196_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",196,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_197_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",197,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_198_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",198,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_208_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",208,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_209_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",209,0xd77c8c34)
HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_210_boot,"flixel.addons.ui.FlxUICursor","boot",0x65fc1275,"flixel.addons.ui.FlxUICursor.boot","flixel/addons/ui/FlxUICursor.hx",210,0xd77c8c34)
namespace flixel{
namespace addons{
namespace ui{

void FlxUICursor_obj::__construct( ::Dynamic Callback,hx::Null< int >  __o_InputMethod,hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset){
int InputMethod = __o_InputMethod.Default(1);
int DefaultKeys = __o_DefaultKeys.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_26_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(InputMethod,"InputMethod")
            	HX_STACK_ARG(DefaultKeys,"DefaultKeys")
            	HX_STACK_ARG(Asset,"Asset")
HXLINE( 628)		this->_clickTime = ((Float)0);
HXLINE( 619)		this->_clickPressed = false;
HXLINE( 617)		this->lastMouseY = ((Float)0);
HXLINE( 616)		this->lastMouseX = ((Float)0);
HXLINE( 206)		this->inputMethod = (int)0;
HXLINE( 203)		this->dispatchEvents = true;
HXLINE( 149)		this->gamepadAutoConnect = ::flixel::addons::ui::GamepadAutoConnectPreference_obj::FirstActive_dyn();
HXLINE(  33)		this->listIndex = (int)0;
HXLINE(  32)		this->location = (int)-1;
HXLINE(  30)		this->wrap = true;
HXLINE( 223)		if (hx::IsNull( Asset )) {
HXLINE( 224)			if ((::flixel::FlxG_obj::height < (int)400)) {
HXLINE( 225)				Asset = HX_("flixel/flixel-ui/img/finger_small.png",35,b3,60,fc);
            			}
            			else {
HXLINE( 227)				Asset = HX_("flixel/flixel-ui/img/finger_big.png",ee,88,a9,18);
            			}
            		}
HXLINE( 231)		super::__construct((int)0,(int)0,Asset);
HXLINE( 233)		this->inputMethod = InputMethod;
HXLINE( 234)		this->_lists = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),(int)0)
            			->setFixed(1,HX_("x",78,00,00,00),(int)0)
            			->setFixed(2,HX_("y",79,00,00,00),(int)0)
            			->setFixed(3,HX_("height",e7,07,4c,02),(int)0)
            			->setFixed(4,HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0))));
HXLINE( 235)		this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE( 236)		this->anchor =  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,(int)-2,(int)0,HX_("left",07,08,b0,47),HX_("center",d5,25,db,05),HX_("right",dc,0b,64,e9),HX_("center",d5,25,db,05));
HXLINE( 237)		this->setDefaultKeys(DefaultKeys);
HXLINE( 238)		this->callback = Callback;
HXLINE( 240)		this->scrollFactor->set((int)0,(int)0);
HXLINE( 243)		bool _hx_tmp;
HXDLIN( 243)		if (hx::IsNotNull( ::flixel::FlxG_obj::mouse )) {
HXLINE( 243)			_hx_tmp = (::Std_obj::is(::flixel::FlxG_obj::mouse,hx::ClassOf< ::flixel::addons::ui::FlxUIMouse >()) == false);
            		}
            		else {
HXLINE( 243)			_hx_tmp = false;
            		}
HXDLIN( 243)		if (_hx_tmp) {
HXLINE( 245)			this->_newMouse =  ::flixel::addons::ui::FlxUIMouse_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::mouse->cursorContainer);
HXLINE( 246)			::flixel::FlxG_obj::set_mouse(this->_newMouse);
            		}
            		else {
HXLINE( 250)			this->_newMouse = ( ( ::flixel::addons::ui::FlxUIMouse)(::flixel::FlxG_obj::mouse) );
            		}
            	}

Dynamic FlxUICursor_obj::__CreateEmpty() { return new FlxUICursor_obj; }

void *FlxUICursor_obj::_hx_vtable = 0;

Dynamic FlxUICursor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxUICursor_obj > _hx_result = new FlxUICursor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxUICursor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x761e0d59 || inClassId==(int)0x7eb12c44;
	}
}

void FlxUICursor_obj::findVisibleLocation(int loc,hx::Null< bool >  __o_forwardIfInvisible,hx::Null< bool >  __o_wrap){
bool forwardIfInvisible = __o_forwardIfInvisible.Default(true);
bool wrap = __o_wrap.Default(true);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_47_findVisibleLocation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(loc,"loc")
            	HX_STACK_ARG(forwardIfInvisible,"forwardIfInvisible")
            	HX_STACK_ARG(wrap,"wrap")
HXLINE(  48)		this->set_location(loc);
HXLINE(  49)		if ((this->location == (int)-1)) {
HXLINE(  49)			return;
            		}
HXLINE(  51)		HX_VARI( bool,wrapped) = false;
HXLINE(  52)		while(true){
HXLINE(  52)			bool _hx_tmp;
HXDLIN(  52)			if (hx::IsNotNull( this->_widgets->__get(this->location) )) {
HXLINE(  52)				_hx_tmp = (( (bool)(this->_widgets->__get(this->location)->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == false);
            			}
            			else {
HXLINE(  52)				_hx_tmp = true;
            			}
HXDLIN(  52)			if (!(_hx_tmp)) {
HXLINE(  52)				goto _hx_goto_1;
            			}
HXLINE(  54)			if (forwardIfInvisible) {
HXLINE(  56)				if ((this->location == (this->_widgets->length - (int)1))) {
HXLINE(  58)					if (wrap) {
HXLINE(  60)						if (!(wrapped)) {
HXLINE(  62)							wrapped = true;
HXLINE(  63)							this->set_location((int)0);
            						}
            						else {
HXLINE(  67)							this->set_location((int)-1);
HXLINE(  68)							return;
            						}
            					}
            					else {
HXLINE(  73)						this->set_location((int)-1);
HXLINE(  74)						return;
            					}
            				}
            				else {
HXLINE(  79)					HX_VARI(  ::flixel::addons::ui::FlxUICursor,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  79)					_g->set_location((_g->location + (int)1));
            				}
            			}
            			else {
HXLINE(  84)				if ((this->location == (int)0)) {
HXLINE(  86)					if (wrap) {
HXLINE(  88)						if (!(wrapped)) {
HXLINE(  90)							wrapped = true;
HXLINE(  91)							this->set_location((this->_widgets->length - (int)1));
            						}
            						else {
HXLINE(  95)							this->set_location((int)-1);
HXLINE(  96)							return;
            						}
            					}
            					else {
HXLINE( 101)						this->set_location((int)-1);
HXLINE( 102)						return;
            					}
            				}
            				else {
HXLINE( 107)					HX_VARI_NAME(  ::flixel::addons::ui::FlxUICursor,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)					_g1->set_location((_g1->location - (int)1));
            				}
            			}
            		}
            		_hx_goto_1:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,findVisibleLocation,(void))

int FlxUICursor_obj::set_listIndex(int i){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_114_set_listIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 115)		if ((i >= this->_lists->length)) {
HXLINE( 117)			i = (this->_lists->length - (int)1);
            		}
            		else {
HXLINE( 119)			if ((i < (int)0)) {
HXLINE( 121)				i = (int)0;
            			}
            		}
HXLINE( 123)		this->listIndex = i;
HXLINE( 124)		this->set_location((int)0);
HXLINE( 125)		this->_updateCursor();
HXLINE( 126)		return this->listIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_listIndex,return )

bool FlxUICursor_obj::set_visible(bool b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_130_set_visible)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 131)		b = this->super::set_visible(b);
HXLINE( 132)		return b;
            	}


int FlxUICursor_obj::set_location(int i){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_136_set_location)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 137)		if ((i >= this->_widgets->length)) {
HXLINE( 139)			i = (this->_widgets->length - (int)1);
            		}
HXLINE( 141)		this->location = i;
HXLINE( 142)		this->_updateCursor();
HXLINE( 143)		return this->location;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_location,return )

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::set_gamepad( ::flixel::input::gamepad::FlxGamepad g){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_152_set_gamepad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
HXLINE( 153)		this->_gamepad = g;
HXLINE( 154)		this->setDefaultKeys(this->_defaultCode);
HXLINE( 155)		HX_VARI( ::Array< ::Dynamic>,arr) = ::Array_obj< ::Dynamic>::__new(5)->init(0,this->keysUp)->init(1,this->keysDown)->init(2,this->keysLeft)->init(3,this->keysRight)->init(4,this->keysClick);
HXLINE( 156)		{
HXLINE( 156)			HX_VARI( int,_g) = (int)0;
HXDLIN( 156)			while((_g < arr->length)){
HXLINE( 156)				HX_VARI( ::Array< ::Dynamic>,list) = arr->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 156)				_g = (_g + (int)1);
HXLINE( 158)				if (hx::IsNotNull( list )) {
HXLINE( 160)					HX_VARI( int,_g1) = (int)0;
HXDLIN( 160)					while((_g1 < list->length)){
HXLINE( 160)						HX_VARI(  ::flixel::addons::ui::FlxBaseMultiInput,keys) = list->__get(_g1).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 160)						_g1 = (_g1 + (int)1);
HXLINE( 162)						if (::Std_obj::is(keys,hx::ClassOf< ::flixel::addons::ui::FlxMultiGamepad >())) {
HXLINE( 165)							( ( ::flixel::addons::ui::FlxMultiGamepad)(keys) )->gamepad = this->_gamepad;
            						}
            					}
            				}
            			}
            		}
HXLINE( 170)		return g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_gamepad,return )

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::get_gamepad(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_175_get_gamepad)
            	HX_STACK_THIS(this)
HXLINE( 175)		return this->_gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,get_gamepad,return )

void FlxUICursor_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_255_destroy)
            	HX_STACK_THIS(this)
HXLINE( 256)		this->super::destroy();
HXLINE( 259)		if (hx::IsEq( ::flixel::FlxG_obj::mouse,this->_newMouse )) {
HXLINE( 262)			this->_newMouse = null();
            		}
HXLINE( 266)		this->keysUp = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysUp);
HXLINE( 267)		this->keysDown = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysDown);
HXLINE( 268)		this->keysLeft = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysLeft);
HXLINE( 269)		this->keysRight = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysRight);
HXLINE( 270)		this->keysClick = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysClick);
HXLINE( 272)		this->anchor = ( ( ::flixel::addons::ui::Anchor)(::flixel::util::FlxDestroyUtil_obj::destroy(this->anchor)) );
HXLINE( 274)		{
HXLINE( 274)			HX_VARI( int,_g) = (int)0;
HXDLIN( 274)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_lists;
HXDLIN( 274)			while((_g < _g1->length)){
HXLINE( 274)				HX_VARI(  ::Dynamic,l) = _g1->__get(_g);
HXDLIN( 274)				_g = (_g + (int)1);
HXLINE( 276)				::flixel::addons::ui::U_obj::clearArraySoft(( (::cpp::VirtualArray)(l->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) ));
            			}
            		}
HXLINE( 279)		::flixel::addons::ui::U_obj::clearArraySoft(this->_lists);
HXLINE( 280)		this->_widgets = null();
            	}


void FlxUICursor_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_283_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 285)		if (hx::IsNull( this->get_gamepad() )) {
HXLINE( 287)			HX_VARI(  ::flixel::input::gamepad::FlxGamepad,g) = this->getGamepad(false);
HXLINE( 288)			if (hx::IsNotNull( g )) {
HXLINE( 290)				this->set_gamepad(g);
            			}
            		}
HXLINE( 296)		bool _hx_tmp;
HXDLIN( 296)		if ((this->lastMouseX == ::flixel::FlxG_obj::mouse->x)) {
HXLINE( 296)			_hx_tmp = (this->lastMouseY != ::flixel::FlxG_obj::mouse->y);
            		}
            		else {
HXLINE( 296)			_hx_tmp = true;
            		}
HXDLIN( 296)		if (_hx_tmp) {
HXLINE( 298)			HX_VARI( bool,oldVis) = this->visible;
HXLINE( 299)			this->jumpToXY(::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y);
HXLINE( 300)			this->set_visible(oldVis);
HXLINE( 303)			this->lastMouseX = ::flixel::FlxG_obj::mouse->x;
HXLINE( 304)			this->lastMouseY = ::flixel::FlxG_obj::mouse->y;
            		}
HXLINE( 309)		this->_checkKeys();
HXLINE( 310)		 ::flixel::addons::ui::FlxUICursor _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 310)		_hx_tmp1->_clickTime = (_hx_tmp1->_clickTime + elapsed);
HXLINE( 311)		this->super::update(elapsed);
            	}


void FlxUICursor_obj::addWidgetsFromUI( ::flixel::addons::ui::FlxUI ui){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_316_addWidgetsFromUI)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ui,"ui")
HXLINE( 316)		if (hx::IsNotNull( ui->cursorLists )) {
HXLINE( 318)			{
HXLINE( 318)				HX_VARI( int,_g) = (int)0;
HXDLIN( 318)				HX_VARI( ::Array< ::Dynamic>,_g1) = ui->cursorLists;
HXDLIN( 318)				while((_g < _g1->length)){
HXLINE( 318)					HX_VARI( ::Array< ::Dynamic>,list) = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 318)					_g = (_g + (int)1);
HXLINE( 320)					this->addWidgetList(list);
            				}
            			}
HXLINE( 322)			this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE( 323)			this->set_location((int)0);
HXLINE( 324)			this->set_listIndex((int)0);
            		}
            		else {
HXLINE( 328)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 328)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ui->group->members;
HXDLIN( 328)			while((_g2 < _g11->length)){
HXLINE( 328)				HX_VARI(  ::flixel::FlxSprite,widget) = _g11->__get(_g2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 328)				_g2 = (_g2 + (int)1);
HXLINE( 330)				bool _hx_tmp;
HXDLIN( 330)				if (!(::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::interfaces::ICursorPointable >()))) {
HXLINE( 330)					_hx_tmp = ::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >());
            				}
            				else {
HXLINE( 330)					_hx_tmp = true;
            				}
HXDLIN( 330)				if (_hx_tmp) {
HXLINE( 332)					this->addWidget(widget);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidgetsFromUI,(void))

bool FlxUICursor_obj::jumpTo(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_344_jumpTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(widget,"widget")
HXLINE( 345)		HX_VARI( int,listi) = (int)0;
HXLINE( 346)		HX_VARI( int,i) = (int)0;
HXLINE( 347)		if (hx::IsNotNull( this->_lists )) {
HXLINE( 349)			HX_VARI( int,_g) = (int)0;
HXDLIN( 349)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_lists;
HXDLIN( 349)			while((_g < _g1->length)){
HXLINE( 349)				HX_VARI(  ::Dynamic,list) = _g1->__get(_g);
HXDLIN( 349)				_g = (_g + (int)1);
HXLINE( 351)				i = ( (::Array< ::Dynamic>)(list->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->indexOf(widget,null());
HXLINE( 352)				if ((i != (int)-1)) {
HXLINE( 354)					this->set_listIndex(listi);
HXLINE( 355)					this->set_location(i);
HXLINE( 356)					return true;
            				}
HXLINE( 358)				listi = (listi + (int)1);
            			}
            		}
            		else {
HXLINE( 363)			i = this->_widgets->indexOf(widget,null());
HXLINE( 364)			this->set_location(i);
HXLINE( 365)			return true;
            		}
HXLINE( 367)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,jumpTo,return )

bool FlxUICursor_obj::jumpToXY(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_377_jumpToXY)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 378)		HX_VARI( int,listi) = (int)0;
HXLINE( 381)		HX_VARI( Float,bestd2) = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 383)		HX_VARI( int,bestli) = (int)-1;
HXLINE( 384)		HX_VARI( int,besti) = (int)-1;
HXLINE( 386)		if (hx::IsNotNull( this->_lists )) {
HXLINE( 388)			{
HXLINE( 388)				HX_VARI( int,_g) = (int)0;
HXDLIN( 388)				HX_VARI( ::Array< ::Dynamic>,_g1) = this->_lists;
HXDLIN( 388)				while((_g < _g1->length)){
HXLINE( 388)					HX_VARI(  ::Dynamic,list) = _g1->__get(_g);
HXDLIN( 388)					_g = (_g + (int)1);
HXLINE( 390)					{
HXLINE( 390)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 390)						HX_VARI( int,_g2) = ( (::Array< ::Dynamic>)(list->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->length;
HXDLIN( 390)						while((_g3 < _g2)){
HXLINE( 390)							_g3 = (_g3 + (int)1);
HXDLIN( 390)							HX_VARI( int,i) = (_g3 - (int)1);
HXLINE( 391)							HX_VARI( ::Dynamic,w) =  ::Dynamic(list->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic))->__GetItem(i);
HXLINE( 392)							bool _hx_tmp;
HXDLIN( 392)							bool _hx_tmp1;
HXDLIN( 392)							bool _hx_tmp2;
HXDLIN( 392)							bool _hx_tmp3;
HXDLIN( 392)							if ((( (bool)(w->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == true)) {
HXLINE( 392)								_hx_tmp3 = (X >= ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
            							}
            							else {
HXLINE( 392)								_hx_tmp3 = false;
            							}
HXDLIN( 392)							if (_hx_tmp3) {
HXLINE( 392)								_hx_tmp2 = (Y >= ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            							}
            							else {
HXLINE( 392)								_hx_tmp2 = false;
            							}
HXDLIN( 392)							if (_hx_tmp2) {
HXLINE( 392)								HX_VARI_NAME( Float,w1,"w") = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 392)								_hx_tmp1 = (X <= (w1 + ( (Float)(w->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )));
            							}
            							else {
HXLINE( 392)								_hx_tmp1 = false;
            							}
HXDLIN( 392)							if (_hx_tmp1) {
HXLINE( 392)								HX_VARI_NAME( Float,w2,"w") = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 392)								_hx_tmp = (Y <= (w2 + ( (Float)(w->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )));
            							}
            							else {
HXLINE( 392)								_hx_tmp = false;
            							}
HXDLIN( 392)							if (_hx_tmp) {
HXLINE( 394)								HX_VARI_NAME( Float,w3,"w") = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 394)								HX_VARI( Float,dx) = ((w3 + ((Float)( (Float)(w->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2)) - X);
HXLINE( 395)								HX_VARI_NAME( Float,w4,"w") = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 395)								HX_VARI( Float,dy) = ((w4 + ((Float)( (Float)(w->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2)) - Y);
HXLINE( 396)								HX_VARI( Float,d2) = ((dx * dx) + (dy * dy));
HXLINE( 397)								if ((d2 < bestd2)) {
HXLINE( 398)									bestd2 = d2;
HXLINE( 399)									bestli = listi;
HXLINE( 400)									besti = i;
            								}
            							}
            						}
            					}
HXLINE( 404)					listi = (listi + (int)1);
            				}
            			}
HXLINE( 406)			bool _hx_tmp4;
HXDLIN( 406)			if ((bestli != (int)-1)) {
HXLINE( 406)				_hx_tmp4 = (besti != (int)-1);
            			}
            			else {
HXLINE( 406)				_hx_tmp4 = false;
            			}
HXDLIN( 406)			if (_hx_tmp4) {
HXLINE( 407)				this->set_listIndex(bestli);
HXLINE( 408)				this->set_location(besti);
HXLINE( 409)				return true;
            			}
            		}
            		else {
HXLINE( 414)			{
HXLINE( 414)				HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN( 414)				HX_VARI_NAME( int,_g4,"_g") = this->_widgets->length;
HXDLIN( 414)				while((_g11 < _g4)){
HXLINE( 414)					_g11 = (_g11 + (int)1);
HXDLIN( 414)					HX_VARI_NAME( int,i1,"i") = (_g11 - (int)1);
HXLINE( 415)					HX_VARI_NAME( ::Dynamic,w5,"w") = this->_widgets->__get(i1);
HXLINE( 416)					bool _hx_tmp5;
HXDLIN( 416)					bool _hx_tmp6;
HXDLIN( 416)					bool _hx_tmp7;
HXDLIN( 416)					bool _hx_tmp8;
HXDLIN( 416)					if ((( (bool)(w5->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == true)) {
HXLINE( 416)						_hx_tmp8 = (X >= ( (Float)(w5->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE( 416)						_hx_tmp8 = false;
            					}
HXDLIN( 416)					if (_hx_tmp8) {
HXLINE( 416)						_hx_tmp7 = (Y >= ( (Float)(w5->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE( 416)						_hx_tmp7 = false;
            					}
HXDLIN( 416)					if (_hx_tmp7) {
HXLINE( 416)						HX_VARI_NAME( Float,w6,"w") = ( (Float)(w5->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 416)						_hx_tmp6 = (X <= (w6 + ( (Float)(w5->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )));
            					}
            					else {
HXLINE( 416)						_hx_tmp6 = false;
            					}
HXDLIN( 416)					if (_hx_tmp6) {
HXLINE( 416)						HX_VARI_NAME( Float,w7,"w") = ( (Float)(w5->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 416)						_hx_tmp5 = (Y <= (w7 + ( (Float)(w5->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )));
            					}
            					else {
HXLINE( 416)						_hx_tmp5 = false;
            					}
HXDLIN( 416)					if (_hx_tmp5) {
HXLINE( 418)						HX_VARI_NAME( Float,w8,"w") = ( (Float)(w5->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 418)						HX_VARI_NAME( Float,dx1,"dx") = ((w8 + ((Float)( (Float)(w5->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2)) - X);
HXLINE( 419)						HX_VARI_NAME( Float,w9,"w") = ( (Float)(w5->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 419)						HX_VARI_NAME( Float,dy1,"dy") = ((w9 + ((Float)( (Float)(w5->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2)) - Y);
HXLINE( 420)						HX_VARI_NAME( Float,d21,"d2") = ((dx1 * dx1) + (dy1 * dy1));
HXLINE( 421)						if ((d21 < bestd2)) {
HXLINE( 422)							bestd2 = d21;
HXLINE( 423)							besti = i1;
            						}
            					}
            				}
            			}
HXLINE( 427)			if ((besti != (int)-1)) {
HXLINE( 428)				this->set_location(besti);
HXLINE( 429)				return true;
            			}
            		}
HXLINE( 432)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,jumpToXY,return )

void FlxUICursor_obj::addWidgetList(::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_436_addWidgetList)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(list,"list")
HXLINE( 437)		{
HXLINE( 437)			HX_VARI( int,_g) = (int)0;
HXDLIN( 437)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_lists;
HXDLIN( 437)			while((_g < _g1->length)){
HXLINE( 437)				HX_VARI(  ::Dynamic,l) = _g1->__get(_g);
HXDLIN( 437)				_g = (_g + (int)1);
HXLINE( 439)				if (::flixel::util::FlxArrayUtil_obj::equals(( (::cpp::VirtualArray)(l->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) ),list)) {
HXLINE( 441)					return;
            				}
            			}
            		}
HXLINE( 445)		HX_VARI( Float,x1) = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 446)		HX_VARI( Float,y1) = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 447)		HX_VARI( Float,x2) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 448)		HX_VARI( Float,y2) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 450)		{
HXLINE( 450)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 450)			while((_g2 < list->length)){
HXLINE( 450)				HX_VARI( ::Dynamic,w) = list->__get(_g2);
HXDLIN( 450)				_g2 = (_g2 + (int)1);
HXLINE( 452)				if ((( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) < x1)) {
HXLINE( 452)					x1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            				}
HXLINE( 453)				if ((( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) < y1)) {
HXLINE( 453)					y1 = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            				}
HXLINE( 454)				HX_VARI_NAME( Float,w1,"w") = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 454)				if (((w1 + ( (Float)(w->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) )) > x2)) {
HXLINE( 454)					x2 = ( (Float)(w->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            				}
HXLINE( 455)				HX_VARI_NAME( Float,w2,"w") = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 455)				if (((w2 + ( (Float)(w->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) )) > y2)) {
HXLINE( 455)					y2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            				}
            			}
            		}
HXLINE( 458)		HX_VARI(  ::Dynamic,theList) = null();
HXLINE( 459)		bool _hx_tmp;
HXDLIN( 459)		bool _hx_tmp1;
HXDLIN( 459)		if ((this->_lists->length == (int)1)) {
HXLINE( 459)			_hx_tmp1 = hx::IsNotNull( ( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE( 459)			_hx_tmp1 = false;
            		}
HXDLIN( 459)		if (_hx_tmp1) {
HXLINE( 459)			_hx_tmp = (( (::Array< ::Dynamic>)(this->_lists->__get((int)0)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->length == (int)0);
            		}
            		else {
HXLINE( 459)			_hx_tmp = false;
            		}
HXDLIN( 459)		if (_hx_tmp) {
HXLINE( 461)			this->_lists->__get((int)0)->__SetField(HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0),hx::paccDynamic);
HXLINE( 462)			this->_lists->__get((int)0)->__SetField(HX_("x",78,00,00,00),::Std_obj::_hx_int(x1),hx::paccDynamic);
HXLINE( 463)			this->_lists->__get((int)0)->__SetField(HX_("y",79,00,00,00),::Std_obj::_hx_int(y1),hx::paccDynamic);
HXLINE( 464)			this->_lists->__get((int)0)->__SetField(HX_("width",06,b6,62,ca),::Std_obj::_hx_int((x2 - x1)),hx::paccDynamic);
HXLINE( 465)			this->_lists->__get((int)0)->__SetField(HX_("height",e7,07,4c,02),::Std_obj::_hx_int((y2 - y1)),hx::paccDynamic);
HXLINE( 466)			theList = this->_lists->__get((int)0);
            		}
            		else {
HXLINE( 470)			::Array< ::Dynamic> _hx_tmp2 = this->_lists;
HXDLIN( 470)			int _hx_tmp3 = ::Std_obj::_hx_int(x1);
HXDLIN( 470)			int _hx_tmp4 = ::Std_obj::_hx_int(y1);
HXDLIN( 470)			int _hx_tmp5 = ::Std_obj::_hx_int((x2 - x1));
HXDLIN( 470)			_hx_tmp2->push( ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("width",06,b6,62,ca),_hx_tmp5)
            				->setFixed(1,HX_("x",78,00,00,00),_hx_tmp3)
            				->setFixed(2,HX_("y",79,00,00,00),_hx_tmp4)
            				->setFixed(3,HX_("height",e7,07,4c,02),::Std_obj::_hx_int((y2 - y1)))
            				->setFixed(4,HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0))));
HXLINE( 471)			theList = this->_lists->__get((this->_lists->length - (int)1));
            		}
HXLINE( 474)		HX_VARI( ::Array< ::Dynamic>,oldWidgets) = this->_widgets;
HXLINE( 475)		this->_widgets = ( (::Array< ::Dynamic>)(theList->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE( 476)		{
HXLINE( 476)			HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN( 476)			while((_g3 < list->length)){
HXLINE( 476)				HX_VARI( ::Dynamic,ifw) = list->__get(_g3);
HXDLIN( 476)				_g3 = (_g3 + (int)1);
HXLINE( 478)				this->addWidget(ifw);
            			}
            		}
HXLINE( 480)		this->_widgets = oldWidgets;
HXLINE( 482)		this->_lists->sort(this->_sortXYWidgetList_dyn());
HXLINE( 483)		{
HXLINE( 483)			HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 483)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_lists;
HXDLIN( 483)			while((_g4 < _g11->length)){
HXLINE( 483)				HX_VARI(  ::Dynamic,widgetList) = _g11->__get(_g4);
HXDLIN( 483)				_g4 = (_g4 + (int)1);
HXLINE( 485)				( (::Array< ::Dynamic>)(widgetList->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) )->sort(this->_sortXYVisible_dyn());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidgetList,(void))

void FlxUICursor_obj::addWidget(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_490_addWidget)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(widget,"widget")
HXLINE( 491)		if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::interfaces::ICursorPointable >())) {
HXLINE( 493)			this->_widgets->push(widget);
            		}
            		else {
HXLINE( 495)			if (::Std_obj::is(widget,hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 498)				HX_VARI( int,_g) = (int)0;
HXDLIN( 498)				HX_VARI( ::Array< ::Dynamic>,_g1) = ( ( ::flixel::addons::ui::FlxUIGroup)(widget) )->group->members;
HXDLIN( 498)				while((_g < _g1->length)){
HXLINE( 498)					HX_VARI(  ::flixel::FlxSprite,member) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 498)					_g = (_g + (int)1);
HXLINE( 500)					if (::Std_obj::is(member,hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIWidget >())) {
HXLINE( 502)						this->addWidget(member);
            					}
            				}
            			}
            		}
HXLINE( 506)		this->_widgets->sort(this->_sortXYVisible_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidget,(void))

void FlxUICursor_obj::sortWidgets( ::flixel::addons::ui::SortMethod method,::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_510_sortWidgets)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(method,"method")
            	HX_STACK_ARG(list,"list")
HXLINE( 511)		if (hx::IsNull( list )) {
HXLINE( 513)			list = this->_widgets;
            		}
HXLINE( 515)		switch((int)(_hx_getEnumValueIndex(method))){
            			case (int)0: {
HXLINE( 517)				list->sort(this->_sortXYVisible_dyn());
            			}
            			break;
            			case (int)1: {
HXLINE( 518)				list->sort(this->_sortIDVisible_dyn());
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,sortWidgets,(void))

bool FlxUICursor_obj::removeWidget(::Dynamic widget,::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_522_removeWidget)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(widget,"widget")
            	HX_STACK_ARG(list,"list")
HXLINE( 523)		if (hx::IsNull( list )) {
HXLINE( 525)			list = this->_widgets;
            		}
HXLINE( 527)		HX_VARI( bool,value) = false;
HXLINE( 528)		if (hx::IsNotNull( list )) {
HXLINE( 530)			if ((list->indexOf(widget,null()) != (int)-1)) {
HXLINE( 531)				value = list->remove(widget);
HXLINE( 532)				list->sort(this->_sortXYVisible_dyn());
            			}
            		}
HXLINE( 535)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,removeWidget,return )

void FlxUICursor_obj::setDefaultKeys(int code){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_543_setDefaultKeys)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(code,"code")
HXLINE( 544)		this->_defaultCode = code;
HXLINE( 545)		this->_clearKeys();
HXLINE( 546)		this->_newKeys();
HXLINE( 547)		if ((((int)code & (int)(int)1) == (int)1)) {
HXLINE( 548)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)9,null(),::Array_obj< int >::fromData( _hx_array_data_79a4790b_32,1)));
HXLINE( 549)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)9,::Array_obj< int >::fromData( _hx_array_data_79a4790b_33,1),null()));
HXLINE( 550)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 552)		if ((((int)code & (int)(int)256) == (int)256)) {
HXLINE( 553)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)39,null(),null()));
HXLINE( 554)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)37,null(),null()));
HXLINE( 555)			this->_addToKeys(this->keysDown, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)40,null(),null()));
HXLINE( 556)			this->_addToKeys(this->keysUp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)38,null(),null()));
HXLINE( 557)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 559)		if ((((int)code & (int)(int)16) == (int)16)) {
HXLINE( 560)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)68,null(),null()));
HXLINE( 561)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)65,null(),null()));
HXLINE( 562)			this->_addToKeys(this->keysDown, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)83,null(),null()));
HXLINE( 563)			this->_addToKeys(this->keysUp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)87,null(),null()));
HXLINE( 564)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 566)		if ((((int)code & (int)(int)4096) == (int)4096)) {
HXLINE( 567)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)102,null(),null()));
HXLINE( 568)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)100,null(),null()));
HXLINE( 569)			this->_addToKeys(this->keysDown, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)98,null(),null()));
HXLINE( 570)			this->_addToKeys(this->keysUp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)104,null(),null()));
HXLINE( 571)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,(int)13,null(),null()));
            		}
HXLINE( 576)		if (hx::IsNull( this->get_gamepad() )) {
HXLINE( 578)			this->_gamepad = this->getGamepad(null());
            		}
HXLINE( 581)		if ((((int)code & (int)(int)65536) == (int)65536)) {
HXLINE( 582)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)13,null(),null()));
HXLINE( 583)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)14,null(),null()));
HXLINE( 584)			this->_addToKeys(this->keysDown, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)12,null(),null()));
HXLINE( 585)			this->_addToKeys(this->keysUp, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)11,null(),null()));
HXLINE( 586)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
HXLINE( 588)		if ((((int)code & (int)(int)268435456) == (int)268435456)) {
HXLINE( 589)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)4,null(),null()));
HXLINE( 590)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)5,null(),null()));
HXLINE( 591)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
HXLINE( 593)		if ((((int)code & (int)(int)1048576) == (int)1048576)) {
HXLINE( 594)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 595)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 596)			this->_addToKeys(this->keysUp, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 597)			this->_addToKeys(this->keysDown, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 598)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
HXLINE( 600)		if ((((int)code & (int)(int)16777216) == (int)16777216)) {
HXLINE( 601)			this->_addToKeys(this->keysLeft, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 602)			this->_addToKeys(this->keysRight, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 603)			this->_addToKeys(this->keysUp, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 604)			this->_addToKeys(this->keysDown, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,this->get_gamepad(), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),(int)20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 605)			this->_addToKeys(this->keysClick, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),(int)0,null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,setDefaultKeys,(void))

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::getGamepad(hx::Null< bool >  __o_exhaustive){
bool exhaustive = __o_exhaustive.Default(true);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_632_getGamepad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(exhaustive,"exhaustive")
HXLINE( 633)		HX_VAR(  ::flixel::input::gamepad::FlxGamepad,gamepad);
HXDLIN( 633)		HX_VARI(  ::flixel::addons::ui::GamepadAutoConnectPreference,_g) = this->gamepadAutoConnect;
HXDLIN( 633)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 633)				gamepad = null();
            			}
            			break;
            			case (int)1: {
HXLINE( 633)				gamepad = ::flixel::FlxG_obj::gamepads->getFirstActiveGamepad();
            			}
            			break;
            			case (int)2: {
HXLINE( 633)				gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
            			}
            			break;
            			case (int)3: {
HXLINE( 633)				gamepad = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(_g->_hx_getInt(0)).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
            			}
            			break;
            		}
HXLINE( 640)		bool _hx_tmp;
HXDLIN( 640)		if (hx::IsNull( gamepad )) {
HXLINE( 640)			_hx_tmp = exhaustive;
            		}
            		else {
HXLINE( 640)			_hx_tmp = false;
            		}
HXDLIN( 640)		if (_hx_tmp) {
HXLINE( 642)			HX_VARI( int,_g2) = (int)0;
HXDLIN( 642)			HX_VARI( int,_g1) = ::flixel::FlxG_obj::gamepads->get_numActiveGamepads();
HXDLIN( 642)			while((_g2 < _g1)){
HXLINE( 642)				_g2 = (_g2 + (int)1);
HXLINE( 644)				gamepad = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get((_g2 - (int)1)).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 645)				if (hx::IsNotNull( gamepad )) {
HXLINE( 647)					return gamepad;
            				}
            			}
            		}
HXLINE( 651)		return gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,getGamepad,return )

int FlxUICursor_obj::_sortIDVisible(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_655__sortIDVisible)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 656)		bool _hx_tmp;
HXDLIN( 656)		if (( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 656)			_hx_tmp = !(( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 656)			_hx_tmp = false;
            		}
HXDLIN( 656)		if (_hx_tmp) {
HXLINE( 656)			return (int)-1;
            		}
HXLINE( 657)		bool _hx_tmp1;
HXDLIN( 657)		if (( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 657)			_hx_tmp1 = !(( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 657)			_hx_tmp1 = false;
            		}
HXDLIN( 657)		if (_hx_tmp1) {
HXLINE( 657)			return (int)1;
            		}
HXLINE( 658)		if ((( (int)(a->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ))) {
HXLINE( 658)			return (int)-1;
            		}
HXLINE( 659)		if ((( (int)(a->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) ))) {
HXLINE( 659)			return (int)1;
            		}
HXLINE( 660)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortIDVisible,return )

int FlxUICursor_obj::_sortXYWidgetList( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_663__sortXYWidgetList)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 664)		if ((( (int)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 664)			return (int)-1;
            		}
HXLINE( 665)		if ((( (int)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 665)			return (int)1;
            		}
HXLINE( 666)		if ((( (int)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) < ( (int)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 666)			return (int)-1;
            		}
HXLINE( 667)		if ((( (int)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) > ( (int)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 667)			return (int)1;
            		}
HXLINE( 668)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortXYWidgetList,return )

int FlxUICursor_obj::_sortXYVisible(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_671__sortXYVisible)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 672)		bool _hx_tmp;
HXDLIN( 672)		if (( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 672)			_hx_tmp = !(( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 672)			_hx_tmp = false;
            		}
HXDLIN( 672)		if (_hx_tmp) {
HXLINE( 672)			return (int)-1;
            		}
HXLINE( 673)		bool _hx_tmp1;
HXDLIN( 673)		if (( (bool)(b->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) )) {
HXLINE( 673)			_hx_tmp1 = !(( (bool)(a->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 673)			_hx_tmp1 = false;
            		}
HXDLIN( 673)		if (_hx_tmp1) {
HXLINE( 673)			return (int)1;
            		}
HXLINE( 674)		if ((( (Float)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) < ( (Float)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 674)			return (int)-1;
            		}
HXLINE( 675)		if ((( (Float)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) > ( (Float)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 675)			return (int)1;
            		}
HXLINE( 676)		if ((( (Float)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) < ( (Float)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 676)			return (int)-1;
            		}
HXLINE( 677)		if ((( (Float)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) > ( (Float)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 677)			return (int)1;
            		}
HXLINE( 678)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortXYVisible,return )

void FlxUICursor_obj::_addToKeys(::Array< ::Dynamic> keys, ::flixel::addons::ui::FlxBaseMultiInput m){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_681__addToKeys)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(keys,"keys")
            	HX_STACK_ARG(m,"m")
HXLINE( 683)		HX_VARI( bool,exists) = false;
HXLINE( 684)		{
HXLINE( 684)			HX_VARI( int,_g) = (int)0;
HXDLIN( 684)			while((_g < keys->length)){
HXLINE( 684)				HX_VARI(  ::flixel::addons::ui::FlxBaseMultiInput,mk) = keys->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 684)				_g = (_g + (int)1);
HXLINE( 685)				if (m->equals(mk)) {
HXLINE( 686)					exists = true;
HXLINE( 687)					goto _hx_goto_39;
            				}
            			}
            			_hx_goto_39:;
            		}
HXLINE( 690)		if (!(exists)) {
HXLINE( 691)			keys->push(m);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_addToKeys,(void))

void FlxUICursor_obj::_clearKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_695__clearKeys)
            	HX_STACK_THIS(this)
HXLINE( 696)		::flixel::addons::ui::U_obj::clearArray(this->keysUp);
HXDLIN( 696)		this->keysUp = null();
HXLINE( 697)		::flixel::addons::ui::U_obj::clearArray(this->keysDown);
HXDLIN( 697)		this->keysDown = null();
HXLINE( 698)		::flixel::addons::ui::U_obj::clearArray(this->keysLeft);
HXDLIN( 698)		this->keysLeft = null();
HXLINE( 699)		::flixel::addons::ui::U_obj::clearArray(this->keysRight);
HXDLIN( 699)		this->keysRight = null();
HXLINE( 700)		::flixel::addons::ui::U_obj::clearArray(this->keysClick);
HXDLIN( 700)		this->keysClick = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clearKeys,(void))

void FlxUICursor_obj::_newKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_703__newKeys)
            	HX_STACK_THIS(this)
HXLINE( 704)		this->keysUp = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 705)		this->keysDown = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 706)		this->keysLeft = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 707)		this->keysRight = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 708)		this->keysClick = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_newKeys,(void))

void FlxUICursor_obj::_checkKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_711__checkKeys)
            	HX_STACK_THIS(this)
HXLINE( 716)		HX_VARI( bool,wasInvisible) = (this->visible == false);
HXLINE( 717)		HX_VARI( int,lastLocation) = this->location;
HXLINE( 719)		{
HXLINE( 719)			HX_VARI( int,_g) = (int)0;
HXDLIN( 719)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->keysUp;
HXDLIN( 719)			while((_g < _g1->length)){
HXLINE( 719)				HX_VARI(  ::flixel::addons::ui::FlxBaseMultiInput,key) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 719)				_g = (_g + (int)1);
HXLINE( 720)				if (key->justPressed()) {
HXLINE( 721)					this->_doInput((int)0,(int)-1,null());
HXLINE( 722)					goto _hx_goto_43;
            				}
            			}
            			_hx_goto_43:;
            		}
HXLINE( 725)		{
HXLINE( 725)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 725)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->keysDown;
HXDLIN( 725)			while((_g2 < _g11->length)){
HXLINE( 725)				HX_VARI_NAME(  ::flixel::addons::ui::FlxBaseMultiInput,key1,"key") = _g11->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 725)				_g2 = (_g2 + (int)1);
HXLINE( 726)				if (key1->justPressed()) {
HXLINE( 727)					this->_doInput((int)0,(int)1,null());
HXLINE( 728)					goto _hx_goto_44;
            				}
            			}
            			_hx_goto_44:;
            		}
HXLINE( 731)		{
HXLINE( 731)			HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN( 731)			HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->keysLeft;
HXDLIN( 731)			while((_g3 < _g12->length)){
HXLINE( 731)				HX_VARI_NAME(  ::flixel::addons::ui::FlxBaseMultiInput,key2,"key") = _g12->__get(_g3).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 731)				_g3 = (_g3 + (int)1);
HXLINE( 732)				if (key2->justPressed()) {
HXLINE( 733)					this->_doInput((int)-1,(int)0,null());
HXLINE( 734)					goto _hx_goto_45;
            				}
            			}
            			_hx_goto_45:;
            		}
HXLINE( 737)		{
HXLINE( 737)			HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 737)			HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = this->keysRight;
HXDLIN( 737)			while((_g4 < _g13->length)){
HXLINE( 737)				HX_VARI_NAME(  ::flixel::addons::ui::FlxBaseMultiInput,key3,"key") = _g13->__get(_g4).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 737)				_g4 = (_g4 + (int)1);
HXLINE( 738)				if (key3->justPressed()) {
HXLINE( 739)					this->_doInput((int)1,(int)0,null());
HXLINE( 740)					goto _hx_goto_46;
            				}
            			}
            			_hx_goto_46:;
            		}
HXLINE( 744)		bool _hx_tmp;
HXDLIN( 744)		bool _hx_tmp1;
HXDLIN( 744)		if (wasInvisible) {
HXLINE( 744)			_hx_tmp1 = this->visible;
            		}
            		else {
HXLINE( 744)			_hx_tmp1 = false;
            		}
HXDLIN( 744)		if (_hx_tmp1) {
HXLINE( 744)			_hx_tmp = (lastLocation != (int)-1);
            		}
            		else {
HXLINE( 744)			_hx_tmp = false;
            		}
HXDLIN( 744)		if (_hx_tmp) {
HXLINE( 746)			this->set_location(lastLocation);
            		}
HXLINE( 750)		{
HXLINE( 751)			if (this->_clickKeysJustPressed()) {
HXLINE( 753)				if (!(this->ignoreNextInput)) {
HXLINE( 755)					this->_clickPressed = true;
HXLINE( 756)					this->_clickTime = (int)0;
HXLINE( 757)					this->_doPress(null());
            				}
            				else {
HXLINE( 761)					this->ignoreNextInput = false;
            				}
            			}
HXLINE( 765)			if (this->_clickKeysPressed()) {
HXLINE( 767)				this->_clickPressed = true;
HXLINE( 768)				this->_doMouseMove(null());
            			}
            			else {
HXLINE( 770)				if ((this->_clickTime > (int)0)) {
HXLINE( 772)					if (this->_clickPressed) {
HXLINE( 774)						this->_clickPressed = false;
HXLINE( 775)						this->_doRelease(null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_checkKeys,(void))

bool FlxUICursor_obj::_clickKeysJustPressed(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_782__clickKeysJustPressed)
            	HX_STACK_THIS(this)
HXLINE( 783)		{
HXLINE( 783)			HX_VARI( int,_g) = (int)0;
HXDLIN( 783)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->keysClick;
HXDLIN( 783)			while((_g < _g1->length)){
HXLINE( 783)				HX_VARI(  ::flixel::addons::ui::FlxBaseMultiInput,key) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 783)				_g = (_g + (int)1);
HXLINE( 785)				if (key->justPressed()) {
HXLINE( 787)					return true;
            				}
            			}
            		}
HXLINE( 790)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clickKeysJustPressed,return )

bool FlxUICursor_obj::_clickKeysPressed(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_794__clickKeysPressed)
            	HX_STACK_THIS(this)
HXLINE( 795)		{
HXLINE( 795)			HX_VARI( int,_g) = (int)0;
HXDLIN( 795)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->keysClick;
HXDLIN( 795)			while((_g < _g1->length)){
HXLINE( 795)				HX_VARI(  ::flixel::addons::ui::FlxBaseMultiInput,key) = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 795)				_g = (_g + (int)1);
HXLINE( 797)				if (key->pressed()) {
HXLINE( 799)					return true;
            				}
            			}
            		}
HXLINE( 802)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clickKeysPressed,return )

 ::flixel::math::FlxPoint FlxUICursor_obj::_getWidgetPoint(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_805__getWidgetPoint)
            	HX_STACK_THIS(this)
HXLINE( 807)		HX_VARI( ::Dynamic,currWidget) = this->_widgets->__get(this->location);
HXLINE( 808)		if (hx::IsNull( currWidget )) {
HXLINE( 809)			return null();
            		}
HXLINE( 812)		HX_VAR(  ::flixel::FlxObject,fo);
HXLINE( 813)		HX_VARI(  ::flixel::math::FlxPoint,widgetPoint) = null();
HXLINE( 816)		if (::Std_obj::is(currWidget,hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 817)			fo = ( ( ::flixel::FlxObject)(currWidget) );
HXLINE( 818)			if (hx::IsNotNull( fo->scrollFactor )) {
HXLINE( 821)				widgetPoint = fo->getScreenPosition(null(),null());
            			}
            		}
HXLINE( 825)		if (hx::IsNull( widgetPoint )) {
HXLINE( 827)			Float X = ( (Float)(currWidget->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 827)			Float Y = ( (Float)(currWidget->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 827)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 827)			point->_inPool = false;
HXDLIN( 827)			widgetPoint = point;
            		}
HXLINE( 831)		{
HXLINE( 831)			HX_VARI(  ::flixel::math::FlxPoint,_g) = widgetPoint;
HXDLIN( 831)			HX_VARI_NAME( Float,_g1,"_g") = _g->x;
HXDLIN( 831)			_g->set_x((_g1 + ((Float)( (Float)(currWidget->__Field(HX_("get_width",5d,12,0c,0e),hx::paccDynamic)()) ) / (Float)(int)2)));
            		}
HXLINE( 832)		{
HXLINE( 832)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_g2,"_g") = widgetPoint;
HXDLIN( 832)			HX_VARI_NAME( Float,_g3,"_g") = _g2->y;
HXDLIN( 832)			_g2->set_y((_g3 + ((Float)( (Float)(currWidget->__Field(HX_("get_height",b0,77,d3,f2),hx::paccDynamic)()) ) / (Float)(int)2)));
            		}
HXLINE( 834)		return widgetPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_getWidgetPoint,return )

void FlxUICursor_obj::_doMouseMove( ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_837__doMouseMove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pt,"pt")
HXLINE( 838)		HX_VARI( bool,dispose) = false;
HXLINE( 839)		if (hx::IsNull( pt )) {
HXLINE( 840)			pt = this->_getWidgetPoint();
HXLINE( 841)			if (hx::IsNull( pt )) {
HXLINE( 843)				return;
            			}
HXLINE( 845)			dispose = true;
            		}
HXLINE( 847)		if (this->dispatchEvents) {
HXLINE( 850)			HX_VARI( int,rawMouseX) = ::Std_obj::_hx_int((pt->x * ::flixel::FlxG_obj::camera->zoom));
HXLINE( 851)			HX_VARI( int,rawMouseY) = ::Std_obj::_hx_int((pt->y * ::flixel::FlxG_obj::camera->zoom));
HXLINE( 855)			{
HXLINE( 855)				HX_VARI(  ::flixel::input::mouse::FlxMouse,_this) = ::flixel::FlxG_obj::mouse;
HXDLIN( 855)				_this->_globalScreenX = ::Std_obj::_hx_int(((Float)rawMouseX / (Float)::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN( 855)				_this->_globalScreenY = ::Std_obj::_hx_int(((Float)rawMouseY / (Float)::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN( 855)				_this->updatePositions();
            			}
HXLINE( 856)			if (hx::IsNotNull( this->_newMouse )) {
HXLINE( 858)				this->_newMouse->updateGlobalScreenPosition = false;
            			}
HXLINE( 863)			 ::openfl::_legacy::display::Stage _hx_tmp = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 863)			::String _hx_tmp1 = ::openfl::_legacy::events::MouseEvent_obj::MOUSE_MOVE;
HXDLIN( 863)			 ::openfl::_legacy::display::Stage _hx_tmp2 = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 863)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this1,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 863)			bool _hx_tmp3 = _this1->keyManager->checkStatus((int)17,_this1->status);
HXDLIN( 863)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this2,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 863)			bool _hx_tmp4 = _this2->keyManager->checkStatus((int)18,_this2->status);
HXDLIN( 863)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this3,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 863)			_hx_tmp->dispatchEvent( ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,_hx_tmp1,true,false,rawMouseX,rawMouseY,_hx_tmp2,_hx_tmp3,_hx_tmp4,_this3->keyManager->checkStatus((int)16,_this3->status),null(),null(),null(),null()));
            		}
HXLINE( 866)		if (dispose) {
HXLINE( 867)			pt->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doMouseMove,(void))

void FlxUICursor_obj::_doPress( ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_871__doPress)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pt,"pt")
HXLINE( 872)		HX_VARI( ::Dynamic,currWidget) = this->_widgets->__get(this->location);
HXLINE( 873)		if (hx::IsNull( currWidget )) {
HXLINE( 874)			return;
            		}
HXLINE( 877)		HX_VARI( bool,dispose) = false;
HXLINE( 878)		if (hx::IsNull( pt )) {
HXLINE( 879)			pt = this->_getWidgetPoint();
HXLINE( 880)			if (hx::IsNull( pt )) {
HXLINE( 882)				return;
            			}
HXLINE( 884)			dispose = true;
            		}
HXLINE( 887)		HX_VARI( Float,rawMouseX) = (pt->x * ::flixel::FlxG_obj::camera->zoom);
HXLINE( 888)		HX_VARI( Float,rawMouseY) = (pt->y * ::flixel::FlxG_obj::camera->zoom);
HXLINE( 891)		if (this->dispatchEvents) {
HXLINE( 893)			 ::openfl::_legacy::display::Stage _hx_tmp = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 893)			::String _hx_tmp1 = ::openfl::_legacy::events::MouseEvent_obj::MOUSE_DOWN;
HXDLIN( 893)			 ::openfl::_legacy::display::Stage _hx_tmp2 = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 893)			HX_VARI(  ::flixel::input::keyboard::FlxKeyList,_this) = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 893)			bool _hx_tmp3 = _this->keyManager->checkStatus((int)17,_this->status);
HXDLIN( 893)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this1,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 893)			bool _hx_tmp4 = _this1->keyManager->checkStatus((int)18,_this1->status);
HXDLIN( 893)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this2,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 893)			_hx_tmp->dispatchEvent( ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,_hx_tmp1,true,false,rawMouseX,rawMouseY,_hx_tmp2,_hx_tmp3,_hx_tmp4,_this2->keyManager->checkStatus((int)16,_this2->status),null(),null(),null(),null()));
            		}
HXLINE( 897)		if (hx::IsNotNull( this->callback )) {
HXLINE( 899)			this->callback(HX_("cursor_down",ab,fd,32,eb),currWidget);
            		}
HXLINE( 901)		if (dispose) {
HXLINE( 902)			pt->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doPress,(void))

void FlxUICursor_obj::_doRelease( ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_906__doRelease)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pt,"pt")
HXLINE( 907)		HX_VARI( ::Dynamic,currWidget) = this->_widgets->__get(this->location);
HXLINE( 908)		if (hx::IsNull( currWidget )) {
HXLINE( 909)			return;
            		}
HXLINE( 912)		HX_VARI( bool,dispose) = false;
HXLINE( 913)		if (hx::IsNull( pt )) {
HXLINE( 914)			pt = this->_getWidgetPoint();
HXLINE( 915)			if (hx::IsNull( pt )) {
HXLINE( 917)				return;
            			}
HXLINE( 919)			dispose = true;
            		}
HXLINE( 922)		HX_VARI( Float,rawMouseX) = (pt->x * ::flixel::FlxG_obj::camera->zoom);
HXLINE( 923)		HX_VARI( Float,rawMouseY) = (pt->y * ::flixel::FlxG_obj::camera->zoom);
HXLINE( 926)		if (this->dispatchEvents) {
HXLINE( 929)			 ::openfl::_legacy::display::Stage _hx_tmp = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 929)			::String _hx_tmp1 = ::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP;
HXDLIN( 929)			 ::openfl::_legacy::display::Stage _hx_tmp2 = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 929)			HX_VARI(  ::flixel::input::keyboard::FlxKeyList,_this) = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 929)			bool _hx_tmp3 = _this->keyManager->checkStatus((int)17,_this->status);
HXDLIN( 929)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this1,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 929)			bool _hx_tmp4 = _this1->keyManager->checkStatus((int)18,_this1->status);
HXDLIN( 929)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this2,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 929)			_hx_tmp->dispatchEvent( ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,_hx_tmp1,true,false,rawMouseX,rawMouseY,_hx_tmp2,_hx_tmp3,_hx_tmp4,_this2->keyManager->checkStatus((int)16,_this2->status),null(),null(),null(),null()));
HXLINE( 930)			if (this->_clickPressed) {
HXLINE( 932)				 ::openfl::_legacy::display::Stage _hx_tmp5 = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 932)				::String _hx_tmp6 = ::openfl::_legacy::events::MouseEvent_obj::CLICK;
HXDLIN( 932)				 ::openfl::_legacy::display::Stage _hx_tmp7 = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXDLIN( 932)				HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this3,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 932)				bool _hx_tmp8 = _this3->keyManager->checkStatus((int)17,_this3->status);
HXDLIN( 932)				HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this4,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 932)				bool _hx_tmp9 = _this4->keyManager->checkStatus((int)18,_this4->status);
HXDLIN( 932)				HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this5,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 932)				_hx_tmp5->dispatchEvent( ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,_hx_tmp6,true,false,rawMouseX,rawMouseY,_hx_tmp7,_hx_tmp8,_hx_tmp9,_this5->keyManager->checkStatus((int)16,_this5->status),null(),null(),null(),null()));
            			}
            		}
HXLINE( 937)		if (hx::IsNotNull( this->callback )) {
HXLINE( 939)			this->callback(HX_("cursor_click",df,16,fe,4b),currWidget);
            		}
HXLINE( 941)		if (dispose) {
HXLINE( 942)			pt->put();
            		}
HXLINE( 946)		if (hx::IsNotNull( this->_newMouse )) {
HXLINE( 948)			this->_newMouse->updateGlobalScreenPosition = true;
HXLINE( 949)			{
HXLINE( 949)				HX_VARI_NAME(  ::flixel::addons::ui::FlxUIMouse,_this6,"_this") = this->_newMouse;
HXDLIN( 949)				Float newX = ::Std_obj::_hx_int(::flixel::FlxG_obj::game->get_mouseX());
HXDLIN( 949)				Float newY = ::Std_obj::_hx_int(::flixel::FlxG_obj::game->get_mouseY());
HXDLIN( 949)				_this6->_globalScreenX = ::Std_obj::_hx_int(((Float)newX / (Float)::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN( 949)				_this6->_globalScreenY = ::Std_obj::_hx_int(((Float)newY / (Float)::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN( 949)				_this6->updatePositions();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doRelease,(void))

int FlxUICursor_obj::_findNextY(int Y,int indexValue,::Array< ::Dynamic> listWidget,::Array< ::Dynamic> listLists){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_955__findNextY)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(indexValue,"indexValue")
            	HX_STACK_ARG(listWidget,"listWidget")
            	HX_STACK_ARG(listLists,"listLists")
HXLINE( 956)		HX_VARI( int,currX) = (int)0;
HXLINE( 957)		HX_VARI( int,currY) = (int)0;
HXLINE( 958)		HX_VARI( int,length) = (int)0;
HXLINE( 960)		if (hx::IsNotNull( listWidget )) {
HXLINE( 962)			currX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE( 963)			currY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
HXLINE( 964)			length = listWidget->length;
            		}
            		else {
HXLINE( 966)			if (hx::IsNotNull( listLists )) {
HXLINE( 968)				currX = ( (int)(listLists->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE( 969)				currY = ( (int)(listLists->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXLINE( 970)				length = listLists->length;
            			}
            		}
HXLINE( 973)		HX_VARI( int,nextX) = (int)0;
HXLINE( 974)		HX_VARI( int,nextY) = (int)0;
HXLINE( 976)		HX_VARI( Float,dx) = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 977)		HX_VARI( Float,dy) = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 979)		HX_VARI( Float,bestdx) = dx;
HXLINE( 980)		HX_VARI( Float,bestdy) = dy;
HXLINE( 983)		HX_VARI( int,besti) = (int)-1;
HXLINE( 988)		{
HXLINE( 988)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 988)			HX_VARI( int,_g) = length;
HXDLIN( 988)			while((_g1 < _g)){
HXLINE( 988)				_g1 = (_g1 + (int)1);
HXDLIN( 988)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 990)				if ((i != indexValue)) {
HXLINE( 992)					if (hx::IsNotNull( listWidget )) {
HXLINE( 994)						nextX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE( 995)						nextY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE( 997)						if (hx::IsNotNull( listLists )) {
HXLINE( 999)							nextX = ( (int)(listLists->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(1000)							nextY = ( (int)(listLists->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            						}
            					}
HXLINE(1003)					dy = (nextY - currY);
HXLINE(1004)					bool _hx_tmp;
HXDLIN(1004)					int _hx_tmp1;
HXDLIN(1004)					if ((dy < (int)0)) {
HXLINE(1004)						_hx_tmp1 = (int)-1;
            					}
            					else {
HXLINE(1004)						_hx_tmp1 = (int)1;
            					}
HXDLIN(1004)					int _hx_tmp2;
HXDLIN(1004)					if ((Y < (int)0)) {
HXLINE(1004)						_hx_tmp2 = (int)-1;
            					}
            					else {
HXLINE(1004)						_hx_tmp2 = (int)1;
            					}
HXDLIN(1004)					if ((_hx_tmp1 == _hx_tmp2)) {
HXLINE(1004)						_hx_tmp = (dy != (int)0);
            					}
            					else {
HXLINE(1004)						_hx_tmp = false;
            					}
HXDLIN(1004)					if (_hx_tmp) {
HXLINE(1006)						dy = ::Math_obj::abs(dy);
HXLINE(1007)						if ((dy < bestdy)) {
HXLINE(1009)							bestdy = dy;
HXLINE(1010)							bestdx = ::Math_obj::abs((currX - nextX));
HXLINE(1011)							besti = i;
            						}
            						else {
HXLINE(1013)							if ((dy == bestdy)) {
HXLINE(1015)								dx = ::Math_obj::abs((currX - nextX));
HXLINE(1016)								if ((dx < bestdx)) {
HXLINE(1018)									bestdx = dx;
HXLINE(1019)									besti = i;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1025)		return besti;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUICursor_obj,_findNextY,return )

int FlxUICursor_obj::_wrapX(int X,int indexValue,int listLength){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1029__wrapX)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(indexValue,"indexValue")
            	HX_STACK_ARG(listLength,"listLength")
HXLINE(1030)		if (((indexValue + X) < (int)0)) {
HXLINE(1032)			indexValue = ((indexValue + X) + listLength);
            		}
            		else {
HXLINE(1034)			if (((indexValue + X) >= listLength)) {
HXLINE(1036)				indexValue = ((indexValue + X) - listLength);
            			}
            		}
HXLINE(1038)		return indexValue;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,_wrapX,return )

int FlxUICursor_obj::_wrapY(int Y,int indexValue,::Array< ::Dynamic> listWidget,::Array< ::Dynamic> listLists){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1042__wrapY)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(indexValue,"indexValue")
            	HX_STACK_ARG(listWidget,"listWidget")
            	HX_STACK_ARG(listLists,"listLists")
HXLINE(1043)		HX_VARI( Float,dx) = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1044)		HX_VARI( Float,dy) = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1046)		HX_VARI( Float,bestdx) = dx;
HXLINE(1047)		HX_VARI( Float,bestdy) = dy;
HXLINE(1050)		HX_VARI( int,besti) = (int)-1;
HXLINE(1052)		bestdx = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1053)		bestdy = (int)0;
HXLINE(1056)		HX_VARI( int,length) = (int)0;
HXLINE(1057)		HX_VARI( int,currX) = (int)0;
HXLINE(1058)		HX_VARI( int,currY) = (int)0;
HXLINE(1060)		if (hx::IsNotNull( listWidget )) {
HXLINE(1062)			length = listWidget->length;
HXLINE(1063)			currX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1064)			currY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            		}
HXLINE(1066)		if (hx::IsNotNull( listLists )) {
HXLINE(1068)			length = listLists->length;
HXLINE(1069)			currX = ( (int)(listLists->__get(indexValue)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXLINE(1070)			currY = ( (int)(listLists->__get(indexValue)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
            		}
HXLINE(1073)		{
HXLINE(1073)			HX_VARI( int,_g1) = (int)0;
HXDLIN(1073)			HX_VARI( int,_g) = length;
HXDLIN(1073)			while((_g1 < _g)){
HXLINE(1073)				_g1 = (_g1 + (int)1);
HXDLIN(1073)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE(1075)				if ((i != this->location)) {
HXLINE(1077)					HX_VARI( int,xx) = (int)0;
HXLINE(1078)					HX_VARI( int,yy) = (int)0;
HXLINE(1079)					if (hx::IsNotNull( listWidget )) {
HXLINE(1081)						xx = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1082)						yy = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            					}
            					else {
HXLINE(1084)						if (hx::IsNotNull( listLists )) {
HXLINE(1086)							xx = ::Std_obj::_hx_int(( (Float)(listLists->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ));
HXLINE(1087)							yy = ::Std_obj::_hx_int(( (Float)(listLists->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            						}
            					}
HXLINE(1090)					dy = (yy - currY);
HXLINE(1092)					bool _hx_tmp;
HXDLIN(1092)					int _hx_tmp1;
HXDLIN(1092)					if ((dy < (int)0)) {
HXLINE(1092)						_hx_tmp1 = (int)-1;
            					}
            					else {
HXLINE(1092)						_hx_tmp1 = (int)1;
            					}
HXDLIN(1092)					int _hx_tmp2;
HXDLIN(1092)					if ((Y < (int)0)) {
HXLINE(1092)						_hx_tmp2 = (int)-1;
            					}
            					else {
HXLINE(1092)						_hx_tmp2 = (int)1;
            					}
HXDLIN(1092)					if (((_hx_tmp1 == _hx_tmp2) == false)) {
HXLINE(1092)						_hx_tmp = (dy != (int)0);
            					}
            					else {
HXLINE(1092)						_hx_tmp = false;
            					}
HXDLIN(1092)					if (_hx_tmp) {
HXLINE(1093)						dy = ::Math_obj::abs(dy);
HXLINE(1094)						if ((dy > bestdy)) {
HXLINE(1096)							bestdy = dy;
HXLINE(1097)							bestdx = ::Math_obj::abs((currX - xx));
HXLINE(1098)							besti = i;
            						}
            						else {
HXLINE(1100)							if ((dy == bestdy)) {
HXLINE(1102)								dx = ::Math_obj::abs((currX - xx));
HXLINE(1103)								if ((dx < bestdx)) {
HXLINE(1105)									bestdx = dx;
HXLINE(1106)									besti = i;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1112)		if ((besti != (int)-1)) {
HXLINE(1114)			indexValue = besti;
            		}
HXLINE(1116)		return indexValue;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUICursor_obj,_wrapY,return )

void FlxUICursor_obj::_doInput(int X,int Y,hx::Null< int >  __o_recursion){
int recursion = __o_recursion.Default(0);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1120__doInput)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(recursion,"recursion")
HXLINE(1121)		if (this->ignoreNextInput) {
HXLINE(1123)			this->ignoreNextInput = false;
HXLINE(1124)			return;
            		}
HXLINE(1126)		HX_VARI( ::Dynamic,currWidget) = null();
HXLINE(1128)		if ((Y == (int)0)) {
HXLINE(1132)			bool _hx_tmp;
HXDLIN(1132)			if (((this->location + X) >= (int)0)) {
HXLINE(1132)				_hx_tmp = ((this->location + X) < this->_widgets->length);
            			}
            			else {
HXLINE(1132)				_hx_tmp = false;
            			}
HXDLIN(1132)			if (_hx_tmp) {
HXLINE(1134)				this->set_location((this->location + X));
            			}
            			else {
HXLINE(1138)				if (this->wrap) {
HXLINE(1140)					if ((this->_lists->length == (int)1)) {
HXLINE(1142)						this->set_location(this->_wrapX(X,this->location,this->_widgets->length));
            					}
            					else {
HXLINE(1146)						bool _hx_tmp1;
HXDLIN(1146)						if (((this->listIndex + X) >= (int)0)) {
HXLINE(1146)							_hx_tmp1 = ((this->listIndex + X) < this->_lists->length);
            						}
            						else {
HXLINE(1146)							_hx_tmp1 = false;
            						}
HXDLIN(1146)						if (_hx_tmp1) {
HXLINE(1148)							this->set_listIndex((this->listIndex + X));
            						}
            						else {
HXLINE(1152)							this->set_listIndex(this->_wrapX(X,this->listIndex,this->_lists->length));
            						}
HXLINE(1154)						if ((X == (int)-1)) {
HXLINE(1156)							this->set_location((this->_widgets->length - (int)1));
            						}
            					}
            				}
            			}
HXLINE(1161)			currWidget = this->_widgets->__get(this->location);
            		}
            		else {
HXLINE(1166)			HX_VARI( int,nextY) = this->_findNextY(Y,this->location,this->_widgets,null());
HXLINE(1168)			if ((nextY != (int)-1)) {
HXLINE(1170)				this->set_location(nextY);
HXLINE(1171)				currWidget = this->_widgets->__get(this->location);
            			}
            			else {
HXLINE(1175)				if (this->wrap) {
HXLINE(1177)					if ((this->_lists->length == (int)1)) {
HXLINE(1179)						this->set_location(this->_wrapY(Y,this->location,this->_widgets,null()));
HXLINE(1180)						currWidget = this->_widgets->__get(this->location);
            					}
            					else {
HXLINE(1184)						HX_VARI( int,nextListY) = this->_findNextY(Y,this->listIndex,null(),this->_lists);
HXLINE(1185)						if ((nextListY != (int)-1)) {
HXLINE(1187)							this->set_listIndex(nextListY);
HXLINE(1188)							currWidget = this->_widgets->__get(this->location);
            						}
            						else {
HXLINE(1192)							this->set_listIndex(this->_wrapY(Y,this->listIndex,null(),this->_lists));
            						}
HXLINE(1194)						if ((Y == (int)-1)) {
HXLINE(1196)							this->set_location((this->_widgets->length - (int)1));
            						}
            					}
HXLINE(1199)					currWidget = this->_widgets->__get(this->location);
            				}
            			}
            		}
HXLINE(1204)		bool _hx_tmp2;
HXDLIN(1204)		if (hx::IsNotNull( currWidget )) {
HXLINE(1204)			_hx_tmp2 = hx::IsNotNull( this->_widgets );
            		}
            		else {
HXLINE(1204)			_hx_tmp2 = false;
            		}
HXDLIN(1204)		if (_hx_tmp2) {
HXLINE(1206)			bool _hx_tmp3;
HXDLIN(1206)			if ((( (bool)(currWidget->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic)) ) == false)) {
HXLINE(1206)				_hx_tmp3 = (recursion < this->_widgets->length);
            			}
            			else {
HXLINE(1206)				_hx_tmp3 = false;
            			}
HXDLIN(1206)			if (_hx_tmp3) {
HXLINE(1208)				this->_doInput(X,Y,(recursion + (int)1));
HXLINE(1209)				return;
            			}
            		}
HXLINE(1213)		if (hx::IsNotNull( this->callback )) {
HXLINE(1216)			this->callback(HX_("cursor_jump",37,ca,2e,ef),currWidget);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,_doInput,(void))

void FlxUICursor_obj::_updateCursor(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1221__updateCursor)
            	HX_STACK_THIS(this)
HXLINE(1222)		this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get(this->listIndex)->__Field(HX_("widgets",2f,1c,67,28),hx::paccDynamic)) );
HXLINE(1224)		bool _hx_tmp;
HXDLIN(1224)		bool _hx_tmp1;
HXDLIN(1224)		if ((this->location >= (int)0)) {
HXLINE(1224)			_hx_tmp1 = hx::IsNull( this->_lists );
            		}
            		else {
HXLINE(1224)			_hx_tmp1 = true;
            		}
HXDLIN(1224)		if (!(_hx_tmp1)) {
HXLINE(1224)			_hx_tmp = hx::IsNull( this->_widgets );
            		}
            		else {
HXLINE(1224)			_hx_tmp = true;
            		}
HXDLIN(1224)		if (_hx_tmp) {
HXLINE(1226)			this->set_visible(false);
HXLINE(1227)			return;
            		}
HXLINE(1230)		this->set_visible(this->set_active(true));
HXLINE(1232)		HX_VARI( ::Dynamic,currWidget) = this->_widgets->__get(this->location);
HXLINE(1233)		HX_VARI( bool,flippedX) = false;
HXLINE(1234)		HX_VARI( bool,flippedY) = false;
HXLINE(1236)		if (hx::IsNotNull( currWidget )) {
HXLINE(1237)			HX_VARI(  ::flixel::FlxObject,target) = ( ( ::flixel::FlxObject)(currWidget) );
HXLINE(1239)			if (::Std_obj::is(target,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1241)				HX_VARI(  ::flixel::FlxSprite,fs) = ( ( ::flixel::FlxSprite)(target) );
HXLINE(1242)				bool _hx_tmp2;
HXDLIN(1242)				if (hx::IsNotNull( fs )) {
HXLINE(1242)					_hx_tmp2 = hx::IsNotNull( fs->scrollFactor );
            				}
            				else {
HXLINE(1242)					_hx_tmp2 = false;
            				}
HXDLIN(1242)				if (_hx_tmp2) {
HXLINE(1244)					this->scrollFactor->set(fs->scrollFactor->x,fs->scrollFactor->y);
            				}
            			}
HXLINE(1248)			if (::Std_obj::is(currWidget,hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(1251)				target = ( ( ::flixel::addons::ui::FlxUICheckBox)(target) )->box;
            			}
HXLINE(1254)			this->anchor->anchorThing(hx::ObjectPtr<OBJ_>(this),target);
HXLINE(1255)			if ((this->x < (int)0)) {
HXLINE(1257)				this->_flipAnchor(HX_("left",07,08,b0,47),target);
HXLINE(1258)				flippedX = true;
            			}
            			else {
HXLINE(1260)				Float _hx_tmp3 = this->x;
HXDLIN(1260)				int _hx_tmp4 = ::flixel::FlxG_obj::width;
HXDLIN(1260)				if ((_hx_tmp3 > (_hx_tmp4 + this->get_width()))) {
HXLINE(1262)					this->_flipAnchor(HX_("right",dc,0b,64,e9),target);
HXLINE(1263)					flippedX = true;
            				}
            			}
HXLINE(1265)			if ((this->y < (int)0)) {
HXLINE(1267)				this->_flipAnchor(HX_("top",95,66,58,00),target);
HXLINE(1268)				flippedY = true;
            			}
            			else {
HXLINE(1270)				Float _hx_tmp5 = this->y;
HXDLIN(1270)				int _hx_tmp6 = ::flixel::FlxG_obj::height;
HXDLIN(1270)				if ((_hx_tmp5 > (_hx_tmp6 + this->get_height()))) {
HXLINE(1272)					this->_flipAnchor(HX_("bottom",eb,e6,78,65),target);
HXLINE(1273)					flippedY = true;
            				}
            			}
HXLINE(1275)			this->set_flipX(flippedX);
HXLINE(1276)			this->set_flipY(flippedY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_updateCursor,(void))

void FlxUICursor_obj::_flipAnchor(::String AnchorDir, ::flixel::FlxObject destination){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1281__flipAnchor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(AnchorDir,"AnchorDir")
            	HX_STACK_ARG(destination,"destination")
HXLINE(1282)		HX_VARI(  ::flixel::addons::ui::Anchor,theAnchor) = null();
HXLINE(1283)		::String _hx_switch_0 = AnchorDir;
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(1304)			if ((this->anchor->y->side == HX_("bottom",eb,e6,78,65))) {
HXLINE(1306)				this->_bottomAnchor = this->anchor->getFlipped(true,false,this->_bottomAnchor);
HXLINE(1307)				theAnchor = this->_bottomAnchor;
            			}
HXLINE(1304)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(1286)			if ((this->anchor->x->side == HX_("left",07,08,b0,47))) {
HXLINE(1288)				this->_leftAnchor = this->anchor->getFlipped(true,false,this->_leftAnchor);
HXLINE(1289)				theAnchor = this->_leftAnchor;
            			}
HXLINE(1286)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(1292)			if ((this->anchor->x->side == HX_("right",dc,0b,64,e9))) {
HXLINE(1294)				this->_topAnchor = this->anchor->getFlipped(true,false,this->_rightAnchor);
HXLINE(1295)				theAnchor = this->_rightAnchor;
            			}
HXLINE(1292)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(1298)			if ((this->anchor->y->side == HX_("top",95,66,58,00))) {
HXLINE(1300)				this->_topAnchor = this->anchor->getFlipped(true,false,this->_topAnchor);
HXLINE(1301)				theAnchor = this->_topAnchor;
            			}
HXLINE(1298)			goto _hx_goto_63;
            		}
            		_hx_goto_63:;
HXLINE(1310)		if (hx::IsNotNull( theAnchor )) {
HXLINE(1312)			theAnchor->anchorThing(hx::ObjectPtr<OBJ_>(this),destination);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_flipAnchor,(void))

int FlxUICursor_obj::KEYS_TAB;

int FlxUICursor_obj::KEYS_WASD;

int FlxUICursor_obj::KEYS_ARROWS;

int FlxUICursor_obj::KEYS_NUMPAD;

int FlxUICursor_obj::GAMEPAD_DPAD;

int FlxUICursor_obj::GAMEPAD_LEFT_STICK;

int FlxUICursor_obj::GAMEPAD_RIGHT_STICK;

int FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS;

int FlxUICursor_obj::INPUT_NONE;

int FlxUICursor_obj::INPUT_KEYS;

int FlxUICursor_obj::INPUT_GAMEPAD;


hx::ObjectPtr< FlxUICursor_obj > FlxUICursor_obj::__new( ::Dynamic Callback,hx::Null< int >  __o_InputMethod,hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset) {
	hx::ObjectPtr< FlxUICursor_obj > __this = new FlxUICursor_obj();
	__this->__construct(Callback,__o_InputMethod,__o_DefaultKeys,Asset);
	return __this;
}

hx::ObjectPtr< FlxUICursor_obj > FlxUICursor_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic Callback,hx::Null< int >  __o_InputMethod,hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset) {
	FlxUICursor_obj *__this = (FlxUICursor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxUICursor_obj), true, "flixel.addons.ui.FlxUICursor"));
	*(void **)__this = FlxUICursor_obj::_hx_vtable;
	__this->__construct(Callback,__o_InputMethod,__o_DefaultKeys,Asset);
	return __this;
}

FlxUICursor_obj::FlxUICursor_obj()
{
}

void FlxUICursor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUICursor);
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_MEMBER_NAME(wrap,"wrap");
	HX_MARK_MEMBER_NAME(location,"location");
	HX_MARK_MEMBER_NAME(listIndex,"listIndex");
	HX_MARK_MEMBER_NAME(ignoreNextInput,"ignoreNextInput");
	HX_MARK_MEMBER_NAME(gamepadAutoConnect,"gamepadAutoConnect");
	HX_MARK_MEMBER_NAME(_gamepad,"_gamepad");
	HX_MARK_MEMBER_NAME(keysUp,"keysUp");
	HX_MARK_MEMBER_NAME(keysDown,"keysDown");
	HX_MARK_MEMBER_NAME(keysLeft,"keysLeft");
	HX_MARK_MEMBER_NAME(keysRight,"keysRight");
	HX_MARK_MEMBER_NAME(keysClick,"keysClick");
	HX_MARK_MEMBER_NAME(anchor,"anchor");
	HX_MARK_MEMBER_NAME(dispatchEvents,"dispatchEvents");
	HX_MARK_MEMBER_NAME(inputMethod,"inputMethod");
	HX_MARK_MEMBER_NAME(_lists,"_lists");
	HX_MARK_MEMBER_NAME(_widgets,"_widgets");
	HX_MARK_MEMBER_NAME(_newMouse,"_newMouse");
	HX_MARK_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_MARK_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_MARK_MEMBER_NAME(_clickPressed,"_clickPressed");
	HX_MARK_MEMBER_NAME(_defaultCode,"_defaultCode");
	HX_MARK_MEMBER_NAME(_rightAnchor,"_rightAnchor");
	HX_MARK_MEMBER_NAME(_topAnchor,"_topAnchor");
	HX_MARK_MEMBER_NAME(_leftAnchor,"_leftAnchor");
	HX_MARK_MEMBER_NAME(_bottomAnchor,"_bottomAnchor");
	HX_MARK_MEMBER_NAME(_clickTime,"_clickTime");
	 ::flixel::addons::ui::FlxUISprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUICursor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callback,"callback");
	HX_VISIT_MEMBER_NAME(wrap,"wrap");
	HX_VISIT_MEMBER_NAME(location,"location");
	HX_VISIT_MEMBER_NAME(listIndex,"listIndex");
	HX_VISIT_MEMBER_NAME(ignoreNextInput,"ignoreNextInput");
	HX_VISIT_MEMBER_NAME(gamepadAutoConnect,"gamepadAutoConnect");
	HX_VISIT_MEMBER_NAME(_gamepad,"_gamepad");
	HX_VISIT_MEMBER_NAME(keysUp,"keysUp");
	HX_VISIT_MEMBER_NAME(keysDown,"keysDown");
	HX_VISIT_MEMBER_NAME(keysLeft,"keysLeft");
	HX_VISIT_MEMBER_NAME(keysRight,"keysRight");
	HX_VISIT_MEMBER_NAME(keysClick,"keysClick");
	HX_VISIT_MEMBER_NAME(anchor,"anchor");
	HX_VISIT_MEMBER_NAME(dispatchEvents,"dispatchEvents");
	HX_VISIT_MEMBER_NAME(inputMethod,"inputMethod");
	HX_VISIT_MEMBER_NAME(_lists,"_lists");
	HX_VISIT_MEMBER_NAME(_widgets,"_widgets");
	HX_VISIT_MEMBER_NAME(_newMouse,"_newMouse");
	HX_VISIT_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_VISIT_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_VISIT_MEMBER_NAME(_clickPressed,"_clickPressed");
	HX_VISIT_MEMBER_NAME(_defaultCode,"_defaultCode");
	HX_VISIT_MEMBER_NAME(_rightAnchor,"_rightAnchor");
	HX_VISIT_MEMBER_NAME(_topAnchor,"_topAnchor");
	HX_VISIT_MEMBER_NAME(_leftAnchor,"_leftAnchor");
	HX_VISIT_MEMBER_NAME(_bottomAnchor,"_bottomAnchor");
	HX_VISIT_MEMBER_NAME(_clickTime,"_clickTime");
	 ::flixel::addons::ui::FlxUISprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxUICursor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"wrap") ) { return hx::Val( wrap); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"keysUp") ) { return hx::Val( keysUp); }
		if (HX_FIELD_EQ(inName,"anchor") ) { return hx::Val( anchor); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"jumpTo") ) { return hx::Val( jumpTo_dyn()); }
		if (HX_FIELD_EQ(inName,"_lists") ) { return hx::Val( _lists); }
		if (HX_FIELD_EQ(inName,"_wrapX") ) { return hx::Val( _wrapX_dyn()); }
		if (HX_FIELD_EQ(inName,"_wrapY") ) { return hx::Val( _wrapY_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gamepad()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return hx::Val( callback); }
		if (HX_FIELD_EQ(inName,"location") ) { return hx::Val( location); }
		if (HX_FIELD_EQ(inName,"_gamepad") ) { return hx::Val( _gamepad); }
		if (HX_FIELD_EQ(inName,"keysDown") ) { return hx::Val( keysDown); }
		if (HX_FIELD_EQ(inName,"keysLeft") ) { return hx::Val( keysLeft); }
		if (HX_FIELD_EQ(inName,"jumpToXY") ) { return hx::Val( jumpToXY_dyn()); }
		if (HX_FIELD_EQ(inName,"_widgets") ) { return hx::Val( _widgets); }
		if (HX_FIELD_EQ(inName,"_newKeys") ) { return hx::Val( _newKeys_dyn()); }
		if (HX_FIELD_EQ(inName,"_doPress") ) { return hx::Val( _doPress_dyn()); }
		if (HX_FIELD_EQ(inName,"_doInput") ) { return hx::Val( _doInput_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listIndex") ) { return hx::Val( listIndex); }
		if (HX_FIELD_EQ(inName,"keysRight") ) { return hx::Val( keysRight); }
		if (HX_FIELD_EQ(inName,"keysClick") ) { return hx::Val( keysClick); }
		if (HX_FIELD_EQ(inName,"addWidget") ) { return hx::Val( addWidget_dyn()); }
		if (HX_FIELD_EQ(inName,"_newMouse") ) { return hx::Val( _newMouse); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { return hx::Val( lastMouseX); }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { return hx::Val( lastMouseY); }
		if (HX_FIELD_EQ(inName,"_topAnchor") ) { return hx::Val( _topAnchor); }
		if (HX_FIELD_EQ(inName,"_clickTime") ) { return hx::Val( _clickTime); }
		if (HX_FIELD_EQ(inName,"getGamepad") ) { return hx::Val( getGamepad_dyn()); }
		if (HX_FIELD_EQ(inName,"_addToKeys") ) { return hx::Val( _addToKeys_dyn()); }
		if (HX_FIELD_EQ(inName,"_clearKeys") ) { return hx::Val( _clearKeys_dyn()); }
		if (HX_FIELD_EQ(inName,"_checkKeys") ) { return hx::Val( _checkKeys_dyn()); }
		if (HX_FIELD_EQ(inName,"_doRelease") ) { return hx::Val( _doRelease_dyn()); }
		if (HX_FIELD_EQ(inName,"_findNextY") ) { return hx::Val( _findNextY_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gamepad") ) { return hx::Val( set_gamepad_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gamepad") ) { return hx::Val( get_gamepad_dyn()); }
		if (HX_FIELD_EQ(inName,"inputMethod") ) { return hx::Val( inputMethod); }
		if (HX_FIELD_EQ(inName,"sortWidgets") ) { return hx::Val( sortWidgets_dyn()); }
		if (HX_FIELD_EQ(inName,"_leftAnchor") ) { return hx::Val( _leftAnchor); }
		if (HX_FIELD_EQ(inName,"_flipAnchor") ) { return hx::Val( _flipAnchor_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_location") ) { return hx::Val( set_location_dyn()); }
		if (HX_FIELD_EQ(inName,"removeWidget") ) { return hx::Val( removeWidget_dyn()); }
		if (HX_FIELD_EQ(inName,"_defaultCode") ) { return hx::Val( _defaultCode); }
		if (HX_FIELD_EQ(inName,"_rightAnchor") ) { return hx::Val( _rightAnchor); }
		if (HX_FIELD_EQ(inName,"_doMouseMove") ) { return hx::Val( _doMouseMove_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_listIndex") ) { return hx::Val( set_listIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"addWidgetList") ) { return hx::Val( addWidgetList_dyn()); }
		if (HX_FIELD_EQ(inName,"_clickPressed") ) { return hx::Val( _clickPressed); }
		if (HX_FIELD_EQ(inName,"_bottomAnchor") ) { return hx::Val( _bottomAnchor); }
		if (HX_FIELD_EQ(inName,"_updateCursor") ) { return hx::Val( _updateCursor_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dispatchEvents") ) { return hx::Val( dispatchEvents); }
		if (HX_FIELD_EQ(inName,"setDefaultKeys") ) { return hx::Val( setDefaultKeys_dyn()); }
		if (HX_FIELD_EQ(inName,"_sortIDVisible") ) { return hx::Val( _sortIDVisible_dyn()); }
		if (HX_FIELD_EQ(inName,"_sortXYVisible") ) { return hx::Val( _sortXYVisible_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ignoreNextInput") ) { return hx::Val( ignoreNextInput); }
		if (HX_FIELD_EQ(inName,"_getWidgetPoint") ) { return hx::Val( _getWidgetPoint_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addWidgetsFromUI") ) { return hx::Val( addWidgetsFromUI_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_sortXYWidgetList") ) { return hx::Val( _sortXYWidgetList_dyn()); }
		if (HX_FIELD_EQ(inName,"_clickKeysPressed") ) { return hx::Val( _clickKeysPressed_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepadAutoConnect") ) { return hx::Val( gamepadAutoConnect); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"findVisibleLocation") ) { return hx::Val( findVisibleLocation_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_clickKeysJustPressed") ) { return hx::Val( _clickKeysJustPressed_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxUICursor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"wrap") ) { wrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"keysUp") ) { keysUp=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"anchor") ) { anchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lists") ) { _lists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gamepad(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"location") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_location(inValue) );location=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_gamepad") ) { _gamepad=inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysDown") ) { keysDown=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysLeft") ) { keysLeft=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_widgets") ) { _widgets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_listIndex(inValue) );listIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysRight") ) { keysRight=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysClick") ) { keysClick=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_newMouse") ) { _newMouse=inValue.Cast<  ::flixel::addons::ui::FlxUIMouse >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { lastMouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { lastMouseY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_topAnchor") ) { _topAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clickTime") ) { _clickTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputMethod") ) { inputMethod=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftAnchor") ) { _leftAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_defaultCode") ) { _defaultCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightAnchor") ) { _rightAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_clickPressed") ) { _clickPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bottomAnchor") ) { _bottomAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dispatchEvents") ) { dispatchEvents=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ignoreNextInput") ) { ignoreNextInput=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepadAutoConnect") ) { gamepadAutoConnect=inValue.Cast<  ::flixel::addons::ui::GamepadAutoConnectPreference >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUICursor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"));
	outFields->push(HX_HCSTRING("location","\x35","\x6e","\x46","\xe5"));
	outFields->push(HX_HCSTRING("listIndex","\xd4","\x59","\x55","\xd4"));
	outFields->push(HX_HCSTRING("ignoreNextInput","\xa5","\x52","\x4a","\x31"));
	outFields->push(HX_HCSTRING("gamepadAutoConnect","\x1a","\x89","\x80","\xc3"));
	outFields->push(HX_HCSTRING("gamepad","\xa1","\xe0","\x85","\x89"));
	outFields->push(HX_HCSTRING("_gamepad","\x22","\x3a","\x3e","\xc3"));
	outFields->push(HX_HCSTRING("keysUp","\x6f","\x91","\xfa","\x3f"));
	outFields->push(HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15"));
	outFields->push(HX_HCSTRING("keysLeft","\x1b","\x20","\xda","\x1a"));
	outFields->push(HX_HCSTRING("keysRight","\x48","\x05","\x0f","\xdb"));
	outFields->push(HX_HCSTRING("keysClick","\xb4","\x75","\x09","\x3a"));
	outFields->push(HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60"));
	outFields->push(HX_HCSTRING("dispatchEvents","\x73","\x59","\xc9","\xd1"));
	outFields->push(HX_HCSTRING("inputMethod","\x8b","\xd2","\x8e","\xfe"));
	outFields->push(HX_HCSTRING("_lists","\x96","\xfd","\xec","\x70"));
	outFields->push(HX_HCSTRING("_widgets","\xb0","\x75","\x1f","\x62"));
	outFields->push(HX_HCSTRING("_newMouse","\x04","\x51","\x45","\x77"));
	outFields->push(HX_HCSTRING("lastMouseX","\x89","\x2d","\xe9","\x96"));
	outFields->push(HX_HCSTRING("lastMouseY","\x8a","\x2d","\xe9","\x96"));
	outFields->push(HX_HCSTRING("_clickPressed","\x19","\xaa","\x7f","\x0e"));
	outFields->push(HX_HCSTRING("_defaultCode","\x8f","\x58","\x8d","\x79"));
	outFields->push(HX_HCSTRING("_rightAnchor","\x72","\xb5","\xff","\x2f"));
	outFields->push(HX_HCSTRING("_topAnchor","\xab","\x2e","\x4f","\x84"));
	outFields->push(HX_HCSTRING("_leftAnchor","\xfb","\xc2","\x0b","\x62"));
	outFields->push(HX_HCSTRING("_bottomAnchor","\x9f","\xaa","\xd1","\xbb"));
	outFields->push(HX_HCSTRING("_clickTime","\x36","\xb4","\x9e","\x87"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxUICursor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxUICursor_obj,callback),HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,wrap),HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,location),HX_HCSTRING("location","\x35","\x6e","\x46","\xe5")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,listIndex),HX_HCSTRING("listIndex","\xd4","\x59","\x55","\xd4")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,ignoreNextInput),HX_HCSTRING("ignoreNextInput","\xa5","\x52","\x4a","\x31")},
	{hx::fsObject /*::flixel::addons::ui::GamepadAutoConnectPreference*/ ,(int)offsetof(FlxUICursor_obj,gamepadAutoConnect),HX_HCSTRING("gamepadAutoConnect","\x1a","\x89","\x80","\xc3")},
	{hx::fsObject /*::flixel::input::gamepad::FlxGamepad*/ ,(int)offsetof(FlxUICursor_obj,_gamepad),HX_HCSTRING("_gamepad","\x22","\x3a","\x3e","\xc3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysUp),HX_HCSTRING("keysUp","\x6f","\x91","\xfa","\x3f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysDown),HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysLeft),HX_HCSTRING("keysLeft","\x1b","\x20","\xda","\x1a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysRight),HX_HCSTRING("keysRight","\x48","\x05","\x0f","\xdb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxUICursor_obj,keysClick),HX_HCSTRING("keysClick","\xb4","\x75","\x09","\x3a")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,anchor),HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,dispatchEvents),HX_HCSTRING("dispatchEvents","\x73","\x59","\xc9","\xd1")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,inputMethod),HX_HCSTRING("inputMethod","\x8b","\xd2","\x8e","\xfe")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxUICursor_obj,_lists),HX_HCSTRING("_lists","\x96","\xfd","\xec","\x70")},
	{hx::fsObject /*Array< ::flixel::addons::ui::interfaces::IFlxUIWidget >*/ ,(int)offsetof(FlxUICursor_obj,_widgets),HX_HCSTRING("_widgets","\xb0","\x75","\x1f","\x62")},
	{hx::fsObject /*::flixel::addons::ui::FlxUIMouse*/ ,(int)offsetof(FlxUICursor_obj,_newMouse),HX_HCSTRING("_newMouse","\x04","\x51","\x45","\x77")},
	{hx::fsFloat,(int)offsetof(FlxUICursor_obj,lastMouseX),HX_HCSTRING("lastMouseX","\x89","\x2d","\xe9","\x96")},
	{hx::fsFloat,(int)offsetof(FlxUICursor_obj,lastMouseY),HX_HCSTRING("lastMouseY","\x8a","\x2d","\xe9","\x96")},
	{hx::fsBool,(int)offsetof(FlxUICursor_obj,_clickPressed),HX_HCSTRING("_clickPressed","\x19","\xaa","\x7f","\x0e")},
	{hx::fsInt,(int)offsetof(FlxUICursor_obj,_defaultCode),HX_HCSTRING("_defaultCode","\x8f","\x58","\x8d","\x79")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_rightAnchor),HX_HCSTRING("_rightAnchor","\x72","\xb5","\xff","\x2f")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_topAnchor),HX_HCSTRING("_topAnchor","\xab","\x2e","\x4f","\x84")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_leftAnchor),HX_HCSTRING("_leftAnchor","\xfb","\xc2","\x0b","\x62")},
	{hx::fsObject /*::flixel::addons::ui::Anchor*/ ,(int)offsetof(FlxUICursor_obj,_bottomAnchor),HX_HCSTRING("_bottomAnchor","\x9f","\xaa","\xd1","\xbb")},
	{hx::fsFloat,(int)offsetof(FlxUICursor_obj,_clickTime),HX_HCSTRING("_clickTime","\x36","\xb4","\x9e","\x87")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxUICursor_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_TAB,HX_HCSTRING("KEYS_TAB","\x2a","\xef","\x20","\x96")},
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_WASD,HX_HCSTRING("KEYS_WASD","\x86","\x08","\xac","\xc8")},
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_ARROWS,HX_HCSTRING("KEYS_ARROWS","\xb5","\x10","\x79","\x4f")},
	{hx::fsInt,(void *) &FlxUICursor_obj::KEYS_NUMPAD,HX_HCSTRING("KEYS_NUMPAD","\xf8","\x1c","\x03","\x39")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_DPAD,HX_HCSTRING("GAMEPAD_DPAD","\x2d","\xe3","\x43","\x25")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_LEFT_STICK,HX_HCSTRING("GAMEPAD_LEFT_STICK","\xf6","\xdd","\x44","\x78")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_RIGHT_STICK,HX_HCSTRING("GAMEPAD_RIGHT_STICK","\x2f","\x51","\xb1","\x65")},
	{hx::fsInt,(void *) &FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS,HX_HCSTRING("GAMEPAD_SHOULDER_BUTTONS","\xc0","\x3b","\x6b","\x64")},
	{hx::fsInt,(void *) &FlxUICursor_obj::INPUT_NONE,HX_HCSTRING("INPUT_NONE","\x6d","\x8a","\x04","\x46")},
	{hx::fsInt,(void *) &FlxUICursor_obj::INPUT_KEYS,HX_HCSTRING("INPUT_KEYS","\xa9","\x59","\x01","\x44")},
	{hx::fsInt,(void *) &FlxUICursor_obj::INPUT_GAMEPAD,HX_HCSTRING("INPUT_GAMEPAD","\xec","\x03","\xbb","\x84")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxUICursor_obj_sMemberFields[] = {
	HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f"),
	HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"),
	HX_HCSTRING("location","\x35","\x6e","\x46","\xe5"),
	HX_HCSTRING("listIndex","\xd4","\x59","\x55","\xd4"),
	HX_HCSTRING("ignoreNextInput","\xa5","\x52","\x4a","\x31"),
	HX_HCSTRING("findVisibleLocation","\x8e","\xc4","\x28","\x41"),
	HX_HCSTRING("set_listIndex","\xb7","\x0f","\xbf","\xda"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("set_location","\xb2","\x45","\x59","\xaf"),
	HX_HCSTRING("gamepadAutoConnect","\x1a","\x89","\x80","\xc3"),
	HX_HCSTRING("set_gamepad","\xc4","\x47","\xed","\x19"),
	HX_HCSTRING("get_gamepad","\xb8","\x40","\x80","\x0f"),
	HX_HCSTRING("_gamepad","\x22","\x3a","\x3e","\xc3"),
	HX_HCSTRING("keysUp","\x6f","\x91","\xfa","\x3f"),
	HX_HCSTRING("keysDown","\x76","\x10","\x98","\x15"),
	HX_HCSTRING("keysLeft","\x1b","\x20","\xda","\x1a"),
	HX_HCSTRING("keysRight","\x48","\x05","\x0f","\xdb"),
	HX_HCSTRING("keysClick","\xb4","\x75","\x09","\x3a"),
	HX_HCSTRING("anchor","\x75","\x3a","\x71","\x60"),
	HX_HCSTRING("dispatchEvents","\x73","\x59","\xc9","\xd1"),
	HX_HCSTRING("inputMethod","\x8b","\xd2","\x8e","\xfe"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("addWidgetsFromUI","\xec","\xd8","\x9e","\xd4"),
	HX_HCSTRING("jumpTo","\x09","\xa6","\x17","\x08"),
	HX_HCSTRING("jumpToXY","\x4a","\x47","\xd4","\xf9"),
	HX_HCSTRING("addWidgetList","\xc3","\x73","\xd5","\xc3"),
	HX_HCSTRING("addWidget","\xc5","\xe4","\x16","\x04"),
	HX_HCSTRING("sortWidgets","\x71","\xe4","\x48","\x14"),
	HX_HCSTRING("removeWidget","\x28","\x4b","\x20","\xbb"),
	HX_HCSTRING("setDefaultKeys","\xd3","\x16","\x84","\xc0"),
	HX_HCSTRING("_lists","\x96","\xfd","\xec","\x70"),
	HX_HCSTRING("_widgets","\xb0","\x75","\x1f","\x62"),
	HX_HCSTRING("_newMouse","\x04","\x51","\x45","\x77"),
	HX_HCSTRING("lastMouseX","\x89","\x2d","\xe9","\x96"),
	HX_HCSTRING("lastMouseY","\x8a","\x2d","\xe9","\x96"),
	HX_HCSTRING("_clickPressed","\x19","\xaa","\x7f","\x0e"),
	HX_HCSTRING("_defaultCode","\x8f","\x58","\x8d","\x79"),
	HX_HCSTRING("_rightAnchor","\x72","\xb5","\xff","\x2f"),
	HX_HCSTRING("_topAnchor","\xab","\x2e","\x4f","\x84"),
	HX_HCSTRING("_leftAnchor","\xfb","\xc2","\x0b","\x62"),
	HX_HCSTRING("_bottomAnchor","\x9f","\xaa","\xd1","\xbb"),
	HX_HCSTRING("_clickTime","\x36","\xb4","\x9e","\x87"),
	HX_HCSTRING("getGamepad","\xab","\x66","\xe7","\xd8"),
	HX_HCSTRING("_sortIDVisible","\xfa","\xce","\x47","\x63"),
	HX_HCSTRING("_sortXYWidgetList","\x60","\xd1","\xfd","\xaf"),
	HX_HCSTRING("_sortXYVisible","\x94","\x52","\x90","\x70"),
	HX_HCSTRING("_addToKeys","\xd1","\xfd","\x86","\x90"),
	HX_HCSTRING("_clearKeys","\xe2","\x45","\x6a","\x16"),
	HX_HCSTRING("_newKeys","\xf5","\xe7","\x8b","\x30"),
	HX_HCSTRING("_checkKeys","\x9d","\x26","\x89","\xf6"),
	HX_HCSTRING("_clickKeysJustPressed","\xb9","\x86","\x60","\x65"),
	HX_HCSTRING("_clickKeysPressed","\x05","\x5e","\x53","\xd3"),
	HX_HCSTRING("_getWidgetPoint","\x95","\x69","\xa1","\x23"),
	HX_HCSTRING("_doMouseMove","\xcc","\x08","\xbe","\xb3"),
	HX_HCSTRING("_doPress","\x79","\x8d","\x6d","\x35"),
	HX_HCSTRING("_doRelease","\x3d","\xa9","\x0d","\xb5"),
	HX_HCSTRING("_findNextY","\xce","\x7c","\xcb","\xe3"),
	HX_HCSTRING("_wrapX","\x8f","\x9e","\x3a","\xcc"),
	HX_HCSTRING("_wrapY","\x90","\x9e","\x3a","\xcc"),
	HX_HCSTRING("_doInput","\x00","\xfe","\x02","\x2b"),
	HX_HCSTRING("_updateCursor","\x9e","\xc8","\x1a","\x21"),
	HX_HCSTRING("_flipAnchor","\x21","\x4e","\x28","\xaa"),
	::String(null()) };

static void FlxUICursor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_TAB,"KEYS_TAB");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_WASD,"KEYS_WASD");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_ARROWS,"KEYS_ARROWS");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::KEYS_NUMPAD,"KEYS_NUMPAD");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_DPAD,"GAMEPAD_DPAD");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_LEFT_STICK,"GAMEPAD_LEFT_STICK");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_RIGHT_STICK,"GAMEPAD_RIGHT_STICK");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS,"GAMEPAD_SHOULDER_BUTTONS");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::INPUT_NONE,"INPUT_NONE");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::INPUT_KEYS,"INPUT_KEYS");
	HX_MARK_MEMBER_NAME(FlxUICursor_obj::INPUT_GAMEPAD,"INPUT_GAMEPAD");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxUICursor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_TAB,"KEYS_TAB");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_WASD,"KEYS_WASD");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_ARROWS,"KEYS_ARROWS");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::KEYS_NUMPAD,"KEYS_NUMPAD");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_DPAD,"GAMEPAD_DPAD");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_LEFT_STICK,"GAMEPAD_LEFT_STICK");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_RIGHT_STICK,"GAMEPAD_RIGHT_STICK");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::GAMEPAD_SHOULDER_BUTTONS,"GAMEPAD_SHOULDER_BUTTONS");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::INPUT_NONE,"INPUT_NONE");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::INPUT_KEYS,"INPUT_KEYS");
	HX_VISIT_MEMBER_NAME(FlxUICursor_obj::INPUT_GAMEPAD,"INPUT_GAMEPAD");
};

#endif

hx::Class FlxUICursor_obj::__mClass;

static ::String FlxUICursor_obj_sStaticFields[] = {
	HX_HCSTRING("KEYS_TAB","\x2a","\xef","\x20","\x96"),
	HX_HCSTRING("KEYS_WASD","\x86","\x08","\xac","\xc8"),
	HX_HCSTRING("KEYS_ARROWS","\xb5","\x10","\x79","\x4f"),
	HX_HCSTRING("KEYS_NUMPAD","\xf8","\x1c","\x03","\x39"),
	HX_HCSTRING("GAMEPAD_DPAD","\x2d","\xe3","\x43","\x25"),
	HX_HCSTRING("GAMEPAD_LEFT_STICK","\xf6","\xdd","\x44","\x78"),
	HX_HCSTRING("GAMEPAD_RIGHT_STICK","\x2f","\x51","\xb1","\x65"),
	HX_HCSTRING("GAMEPAD_SHOULDER_BUTTONS","\xc0","\x3b","\x6b","\x64"),
	HX_HCSTRING("INPUT_NONE","\x6d","\x8a","\x04","\x46"),
	HX_HCSTRING("INPUT_KEYS","\xa9","\x59","\x01","\x44"),
	HX_HCSTRING("INPUT_GAMEPAD","\xec","\x03","\xbb","\x84"),
	::String(null())
};

void FlxUICursor_obj::__register()
{
	hx::Object *dummy = new FlxUICursor_obj;
	FlxUICursor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.ui.FlxUICursor","\x0b","\x79","\xa4","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxUICursor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxUICursor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxUICursor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxUICursor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxUICursor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUICursor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUICursor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxUICursor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_190_boot)
HXLINE( 190)		KEYS_TAB = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_191_boot)
HXLINE( 191)		KEYS_WASD = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_192_boot)
HXLINE( 192)		KEYS_ARROWS = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_193_boot)
HXLINE( 193)		KEYS_NUMPAD = (int)4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_195_boot)
HXLINE( 195)		GAMEPAD_DPAD = (int)65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_196_boot)
HXLINE( 196)		GAMEPAD_LEFT_STICK = (int)1048576;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_197_boot)
HXLINE( 197)		GAMEPAD_RIGHT_STICK = (int)16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_198_boot)
HXLINE( 198)		GAMEPAD_SHOULDER_BUTTONS = (int)268435456;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_208_boot)
HXLINE( 208)		INPUT_NONE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_209_boot)
HXLINE( 209)		INPUT_KEYS = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_210_boot)
HXLINE( 210)		INPUT_GAMEPAD = (int)16;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
