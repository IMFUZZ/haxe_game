// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_items_Inventory
#include <items/Inventory.h>
#endif
#ifndef INCLUDED_items_Item
#include <items/Item.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_5_new,"items.Inventory","new",0x26de8c80,"items.Inventory.new","items/Inventory.hx",5,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_15_moveSelectedItemIndex,"items.Inventory","moveSelectedItemIndex",0xbb0db0f3,"items.Inventory.moveSelectedItemIndex","items/Inventory.hx",15,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_19_indexIsValid,"items.Inventory","indexIsValid",0x8a2ccba0,"items.Inventory.indexIsValid","items/Inventory.hx",19,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_22_insert,"items.Inventory","insert",0x02d6db19,"items.Inventory.insert","items/Inventory.hx",22,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_34_removeSelectedItem,"items.Inventory","removeSelectedItem",0x2b7e0b52,"items.Inventory.removeSelectedItem","items/Inventory.hx",34,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_37_remove,"items.Inventory","remove",0x69823424,"items.Inventory.remove","items/Inventory.hx",37,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_43_getAvailableIndex,"items.Inventory","getAvailableIndex",0x7efafbdf,"items.Inventory.getAvailableIndex","items/Inventory.hx",43,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_52_as,"items.Inventory","as",0x9e987cd2,"items.Inventory.as","items/Inventory.hx",52,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_61_addItem,"items.Inventory","addItem",0x776853f4,"items.Inventory.addItem","items/Inventory.hx",61,0xe4590071)
HX_DEFINE_STACK_FRAME(_hx_pos_0cc7e8a45b68efd7_74_getSize,"items.Inventory","getSize",0x14419c97,"items.Inventory.getSize","items/Inventory.hx",74,0xe4590071)
namespace items{

void Inventory_obj::__construct(int a_size){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_5_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_size,"a_size")
HXLINE(   8)		this->selectedItemIndex = (int)0;
HXLINE(  11)		this->items = ::Array_obj< ::Dynamic>::__new(a_size);
            	}

Dynamic Inventory_obj::__CreateEmpty() { return new Inventory_obj; }

void *Inventory_obj::_hx_vtable = 0;

Dynamic Inventory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Inventory_obj > _hx_result = new Inventory_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Inventory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1425a820;
}

void Inventory_obj::moveSelectedItemIndex(int val){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_15_moveSelectedItemIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(val,"val")
HXLINE(  15)		this->selectedItemIndex = hx::Mod((this->selectedItemIndex + val),this->items->length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,moveSelectedItemIndex,(void))

bool Inventory_obj::indexIsValid(int pos){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_19_indexIsValid)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE(  19)		if ((pos < (int)0)) {
HXLINE(  19)			return (this->items->length < pos);
            		}
            		else {
HXLINE(  19)			return false;
            		}
HXDLIN(  19)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,indexIsValid,return )

bool Inventory_obj::insert(int pos, ::items::Item item){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_22_insert)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(item,"item")
HXLINE(  23)		if (this->indexIsValid(pos)) {
HXLINE(  24)			return false;
            		}
HXLINE(  26)		if (hx::IsNotNull( ( ( ::items::Item)(_hx_array_unsafe_get(this->items,pos)) ) )) {
HXLINE(  27)			this->remove(pos);
            		}
HXLINE(  29)		this->items->__unsafe_set(pos,item);
HXLINE(  30)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Inventory_obj,insert,return )

 ::items::Item Inventory_obj::removeSelectedItem(){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_34_removeSelectedItem)
            	HX_STACK_THIS(this)
HXLINE(  34)		return this->remove(this->selectedItemIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Inventory_obj,removeSelectedItem,return )

 ::items::Item Inventory_obj::remove(int index){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_37_remove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(  38)		HX_VARI(  ::items::Item,item) = ( ( ::items::Item)(_hx_array_unsafe_get(this->items,index)) );
HXLINE(  39)		this->items->__unsafe_set(index,null());
HXLINE(  40)		return item;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,remove,return )

int Inventory_obj::getAvailableIndex(){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_43_getAvailableIndex)
            	HX_STACK_THIS(this)
HXLINE(  44)		{
HXLINE(  44)			HX_VARI( int,_g1) = (int)0;
HXDLIN(  44)			HX_VARI( int,_g) = this->items->length;
HXDLIN(  44)			while((_g1 < _g)){
HXLINE(  44)				_g1 = (_g1 + (int)1);
HXDLIN(  44)				HX_VARI( int,index) = (_g1 - (int)1);
HXLINE(  45)				if (hx::IsNull( ( ( ::items::Item)(_hx_array_unsafe_get(this->items,index)) ) )) {
HXLINE(  46)					return index;
            				}
            			}
            		}
HXLINE(  49)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Inventory_obj,getAvailableIndex,return )

int Inventory_obj::as( ::items::Item item){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_52_as)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(item,"item")
HXLINE(  53)		{
HXLINE(  53)			HX_VARI( int,_g1) = (int)0;
HXDLIN(  53)			HX_VARI( int,_g) = this->items->length;
HXDLIN(  53)			while((_g1 < _g)){
HXLINE(  53)				_g1 = (_g1 + (int)1);
HXDLIN(  53)				HX_VARI( int,index) = (_g1 - (int)1);
HXLINE(  54)				bool _hx_tmp;
HXDLIN(  54)				if (hx::IsNotNull( ( ( ::items::Item)(_hx_array_unsafe_get(this->items,index)) ) )) {
HXLINE(  54)					 ::items::Item _hx_tmp1 = ( ( ::items::Item)(_hx_array_unsafe_get(this->items,index)) );
HXDLIN(  54)					_hx_tmp = (_hx_tmp1->name == item->name);
            				}
            				else {
HXLINE(  54)					_hx_tmp = false;
            				}
HXDLIN(  54)				if (_hx_tmp) {
HXLINE(  55)					return index;
            				}
            			}
            		}
HXLINE(  58)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,as,return )

bool Inventory_obj::addItem( ::items::Item item){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_61_addItem)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(item,"item")
HXLINE(  62)		HX_VARI( int,pos) = this->as(item);
HXLINE(  63)		HX_VARI( bool,itemAdded) = false;
HXLINE(  64)		if (this->indexIsValid(pos)) {
HXLINE(  65)			itemAdded = ( ( ::items::Item)(_hx_array_unsafe_get(this->items,pos)) )->stack(item);
            		}
HXLINE(  67)		if (!(itemAdded)) {
HXLINE(  69)			itemAdded = this->insert(this->getAvailableIndex(),item);
            		}
HXLINE(  71)		return itemAdded;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,addItem,return )

int Inventory_obj::getSize(){
            	HX_STACKFRAME(&_hx_pos_0cc7e8a45b68efd7_74_getSize)
            	HX_STACK_THIS(this)
HXLINE(  75)		HX_VARI( int,numberOfItems) = (int)0;
HXLINE(  76)		{
HXLINE(  76)			HX_VARI( int,_g1) = (int)0;
HXDLIN(  76)			HX_VARI( int,_g) = this->items->length;
HXDLIN(  76)			while((_g1 < _g)){
HXLINE(  76)				_g1 = (_g1 + (int)1);
HXDLIN(  76)				HX_VARI( int,index) = (_g1 - (int)1);
HXLINE(  77)				if (hx::IsNotNull( ( ( ::items::Item)(_hx_array_unsafe_get(this->items,index)) ) )) {
HXLINE(  78)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  78)					::String _hx_tmp1 = ((((HX_("slot #",81,f5,07,74) + index) + HX_(" : ",c6,7a,18,00)) + ( ( ::items::Item)(_hx_array_unsafe_get(this->items,index)) )->name) + HX_(" | Quantity : ",37,be,24,6e));
HXDLIN(  78)					::String _hx_tmp2 = (_hx_tmp1 + ( ( ::items::Item)(_hx_array_unsafe_get(this->items,index)) )->quantity);
HXDLIN(  78)					_hx_tmp(_hx_tmp2,hx::SourceInfo(HX_("Inventory.hx",c2,21,8a,bb),78,HX_("items.Inventory",8e,8c,06,31),HX_("getSize",77,50,d6,1e)));
HXLINE(  79)					numberOfItems = (numberOfItems + (int)1);
            				}
            			}
            		}
HXLINE(  82)		return numberOfItems;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Inventory_obj,getSize,return )


hx::ObjectPtr< Inventory_obj > Inventory_obj::__new(int a_size) {
	hx::ObjectPtr< Inventory_obj > __this = new Inventory_obj();
	__this->__construct(a_size);
	return __this;
}

hx::ObjectPtr< Inventory_obj > Inventory_obj::__alloc(hx::Ctx *_hx_ctx,int a_size) {
	Inventory_obj *__this = (Inventory_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Inventory_obj), true, "items.Inventory"));
	*(void **)__this = Inventory_obj::_hx_vtable;
	__this->__construct(a_size);
	return __this;
}

Inventory_obj::Inventory_obj()
{
}

void Inventory_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Inventory);
	HX_MARK_MEMBER_NAME(items,"items");
	HX_MARK_MEMBER_NAME(selectedItemIndex,"selectedItemIndex");
	HX_MARK_END_CLASS();
}

void Inventory_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(items,"items");
	HX_VISIT_MEMBER_NAME(selectedItemIndex,"selectedItemIndex");
}

hx::Val Inventory_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"as") ) { return hx::Val( as_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { return hx::Val( items); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addItem") ) { return hx::Val( addItem_dyn()); }
		if (HX_FIELD_EQ(inName,"getSize") ) { return hx::Val( getSize_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"indexIsValid") ) { return hx::Val( indexIsValid_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"selectedItemIndex") ) { return hx::Val( selectedItemIndex); }
		if (HX_FIELD_EQ(inName,"getAvailableIndex") ) { return hx::Val( getAvailableIndex_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"removeSelectedItem") ) { return hx::Val( removeSelectedItem_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"moveSelectedItemIndex") ) { return hx::Val( moveSelectedItemIndex_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Inventory_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { items=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"selectedItemIndex") ) { selectedItemIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Inventory_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("items","\x00","\xac","\x0c","\xc2"));
	outFields->push(HX_HCSTRING("selectedItemIndex","\x24","\x13","\xe9","\x2a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Inventory_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Inventory_obj,items),HX_HCSTRING("items","\x00","\xac","\x0c","\xc2")},
	{hx::fsInt,(int)offsetof(Inventory_obj,selectedItemIndex),HX_HCSTRING("selectedItemIndex","\x24","\x13","\xe9","\x2a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Inventory_obj_sStaticStorageInfo = 0;
#endif

static ::String Inventory_obj_sMemberFields[] = {
	HX_HCSTRING("items","\x00","\xac","\x0c","\xc2"),
	HX_HCSTRING("selectedItemIndex","\x24","\x13","\xe9","\x2a"),
	HX_HCSTRING("moveSelectedItemIndex","\xd3","\x6c","\x81","\xed"),
	HX_HCSTRING("indexIsValid","\xc0","\x0b","\xa0","\x18"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("removeSelectedItem","\x72","\x23","\x90","\x22"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("getAvailableIndex","\xbf","\x47","\x2b","\x52"),
	HX_HCSTRING("as","\xf2","\x54","\x00","\x00"),
	HX_HCSTRING("addItem","\xd4","\x07","\xfd","\x81"),
	HX_HCSTRING("getSize","\x77","\x50","\xd6","\x1e"),
	::String(null()) };

static void Inventory_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Inventory_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Inventory_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Inventory_obj::__mClass,"__mClass");
};

#endif

hx::Class Inventory_obj::__mClass;

void Inventory_obj::__register()
{
	hx::Object *dummy = new Inventory_obj;
	Inventory_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("items.Inventory","\x8e","\x8c","\x06","\x31");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Inventory_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Inventory_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Inventory_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Inventory_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Inventory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Inventory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace items
