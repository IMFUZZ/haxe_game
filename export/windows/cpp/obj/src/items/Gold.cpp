// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_items_Gold
#include <items/Gold.h>
#endif
#ifndef INCLUDED_items_Item
#include <items/Item.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_996ab03219c1b674_5_new,"items.Gold","new",0x528371e0,"items.Gold.new","items/Gold.hx",5,0xbc6fdbaf)
namespace items{

void Gold_obj::__construct(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y){
Float a_x = __o_a_x.Default(0);
Float a_y = __o_a_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_996ab03219c1b674_5_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_x,"a_x")
            	HX_STACK_ARG(a_y,"a_y")
HXLINE(   6)		super::__construct(a_x,a_y,(int)10000,HX_("assets/images/gold.png",86,fa,9f,aa),false,false);
HXLINE(   7)		if (hx::IsNull( ::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC )) {
HXLINE(   7)			::zpp_nape::util::ZPP_Flags_obj::internal = true;
HXDLIN(   7)			::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC =  ::nape::phys::BodyType_obj::__alloc( HX_CTX );
HXDLIN(   7)			::zpp_nape::util::ZPP_Flags_obj::internal = false;
            		}
HXDLIN(   7)		this->createCircularBody((int)8,::zpp_nape::util::ZPP_Flags_obj::BodyType_STATIC);
HXLINE(   8)		this->name = HX_("Gold",c0,be,42,2f);
HXLINE(   9)		{
HXLINE(   9)			HX_VARI(  ::nape::phys::Body,_this) = this->body;
HXDLIN(   9)			{
HXLINE(   9)				_this->zpp_inner->immutable_midstep((HX_("Body::",02,8e,7d,8f) + HX_("false",a3,35,4f,fb)));
HXDLIN(   9)				if ((!(_this->zpp_inner->norotate) != false)) {
HXLINE(   9)					_this->zpp_inner->norotate = true;
HXDLIN(   9)					_this->zpp_inner->invalidate_inertia();
            				}
            			}
            		}
            	}

Dynamic Gold_obj::__CreateEmpty() { return new Gold_obj; }

void *Gold_obj::_hx_vtable = 0;

Dynamic Gold_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Gold_obj > _hx_result = new Gold_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Gold_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x055f2ff3) {
			if (inClassId<=(int)0x0408fd80) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0408fd80;
			} else {
				return inClassId==(int)0x055f2ff3;
			}
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		if (inClassId<=(int)0x25a685e0) {
			return inClassId==(int)0x19b9dc60 || inClassId==(int)0x25a685e0;
		} else {
			return inClassId==(int)0x2e105115;
		}
	}
}


hx::ObjectPtr< Gold_obj > Gold_obj::__new(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y) {
	hx::ObjectPtr< Gold_obj > __this = new Gold_obj();
	__this->__construct(__o_a_x,__o_a_y);
	return __this;
}

hx::ObjectPtr< Gold_obj > Gold_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y) {
	Gold_obj *__this = (Gold_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Gold_obj), true, "items.Gold"));
	*(void **)__this = Gold_obj::_hx_vtable;
	__this->__construct(__o_a_x,__o_a_y);
	return __this;
}

Gold_obj::Gold_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Gold_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Gold_obj_sStaticStorageInfo = 0;
#endif

static void Gold_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Gold_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Gold_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Gold_obj::__mClass,"__mClass");
};

#endif

hx::Class Gold_obj::__mClass;

void Gold_obj::__register()
{
	hx::Object *dummy = new Gold_obj;
	Gold_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("items.Gold","\xee","\x41","\x35","\x60");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Gold_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Gold_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Gold_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gold_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gold_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace items
