// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_characters_Character
#include <characters/Character.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gametime_Clock
#include <gametime/Clock.h>
#endif
#ifndef INCLUDED_gametime_TimeStamp
#include <gametime/TimeStamp.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_items_Item
#include <items/Item.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_11_new,"items.Item","new",0xf6ef59d3,"items.Item.new","items/Item.hx",11,0x0d88731c)
HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_31_update,"items.Item","update",0x3d892676,"items.Item.update","items/Item.hx",31,0x0d88731c)
HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_40_stack,"items.Item","stack",0xffb2737b,"items.Item.stack","items/Item.hx",40,0x0d88731c)
HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_49_highlight,"items.Item","highlight",0xf48cf7e7,"items.Item.highlight","items/Item.hx",49,0x0d88731c)
HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_53_onMouseDown,"items.Item","onMouseDown",0x8e44487b,"items.Item.onMouseDown","items/Item.hx",53,0x0d88731c)
HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_57_onMouseUp,"items.Item","onMouseUp",0x9faa4e34,"items.Item.onMouseUp","items/Item.hx",57,0x0d88731c)
HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_61_onMouseOver,"items.Item","onMouseOver",0x958ee16d,"items.Item.onMouseOver","items/Item.hx",61,0x0d88731c)
HX_DEFINE_STACK_FRAME(_hx_pos_c36f9452ac2b554a_65_onMouseOut,"items.Item","onMouseOut",0x15559695,"items.Item.onMouseOut","items/Item.hx",65,0x0d88731c)
namespace items{

void Item_obj::__construct(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y, ::Dynamic __o_a_stackSize, ::Dynamic a_simpleGraphic,hx::Null< bool >  __o_a_createRectangularBody,hx::Null< bool >  __o_a_enablePhysics){
Float a_x = __o_a_x.Default(0);
Float a_y = __o_a_y.Default(0);
 ::Dynamic a_stackSize = __o_a_stackSize.Default(1);
bool a_createRectangularBody = __o_a_createRectangularBody.Default(true);
bool a_enablePhysics = __o_a_enablePhysics.Default(true);
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_11_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a_x,"a_x")
            	HX_STACK_ARG(a_y,"a_y")
            	HX_STACK_ARG(a_stackSize,"a_stackSize")
            	HX_STACK_ARG(a_simpleGraphic,"a_simpleGraphic")
            	HX_STACK_ARG(a_createRectangularBody,"a_createRectangularBody")
            	HX_STACK_ARG(a_enablePhysics,"a_enablePhysics")
HXLINE(  19)		this->mouseIsOver = false;
HXLINE(  18)		this->quantity = (int)1;
HXLINE(  17)		this->stackSize = (int)1;
HXLINE(  22)		super::__construct(a_x,a_y,a_simpleGraphic,a_createRectangularBody,a_enablePhysics);
HXLINE(  23)		this->set_color((int)13421772);
HXLINE(  24)		this->name = HX_("Item",33,f1,98,30);
HXLINE(  25)		this->creationTime = ::Shared_obj::clock->createTimeStamp();
HXLINE(  26)		this->stackSize = a_stackSize;
HXLINE(  27)		::flixel::input::mouse::FlxMouseEventManager_obj::add(hx::ObjectPtr<OBJ_>(this),this->onMouseDown_dyn(),this->onMouseUp_dyn(),this->onMouseOver_dyn(),this->onMouseOut_dyn(),null(),null(),null(),null());
            	}

Dynamic Item_obj::__CreateEmpty() { return new Item_obj; }

void *Item_obj::_hx_vtable = 0;

Dynamic Item_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Item_obj > _hx_result = new Item_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Item_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19b9dc60) {
		if (inClassId<=(int)0x0b6ffd77) {
			if (inClassId<=(int)0x055f2ff3) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x055f2ff3;
			} else {
				return inClassId==(int)0x0b6ffd77;
			}
		} else {
			return inClassId==(int)0x19b9dc60;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Item_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_31_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  32)		this->super::update(elapsed);
HXLINE(  33)		if (this->mouseIsOver) {
HXLINE(  34)			HX_VARI(  ::flixel::FlxSprite,SpriteA) = ::Shared_obj::player->character;
HXDLIN(  34)			HX_VARI( Float,dx) = ((SpriteA->x + SpriteA->origin->x) - (this->x + this->origin->x));
HXDLIN(  34)			HX_VARI( Float,dy) = ((SpriteA->y + SpriteA->origin->y) - (this->y + this->origin->y));
HXDLIN(  34)			this->highlight((::Std_obj::_hx_int(::Math_obj::sqrt(((dx * dx) + (dy * dy)))) < (int)128));
            		}
            		else {
HXLINE(  36)			this->highlight(false);
            		}
            	}


bool Item_obj::stack( ::items::Item item){
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_40_stack)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(item,"item")
HXLINE(  41)		bool _hx_tmp;
HXDLIN(  41)		if ((item->name == this->name)) {
HXLINE(  41)			_hx_tmp = (this->quantity >= this->stackSize);
            		}
            		else {
HXLINE(  41)			_hx_tmp = true;
            		}
HXDLIN(  41)		if (_hx_tmp) {
HXLINE(  42)			return false;
            		}
HXLINE(  44)		this->quantity++;
HXLINE(  45)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Item_obj,stack,return )

void Item_obj::highlight(bool val){
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_49_highlight)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(val,"val")
HXLINE(  49)		int _hx_tmp;
HXDLIN(  49)		if (val) {
HXLINE(  49)			_hx_tmp = (int)16777215;
            		}
            		else {
HXLINE(  49)			_hx_tmp = (int)13421772;
            		}
HXDLIN(  49)		this->set_color(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Item_obj,highlight,(void))

void Item_obj::onMouseDown( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_53_onMouseDown)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  53)		::Shared_obj::player->character->takeItem(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Item_obj,onMouseDown,(void))

void Item_obj::onMouseUp( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_57_onMouseUp)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  57)		::haxe::Log_obj::trace(HX_("MouseUp",c0,1b,c4,8d),hx::SourceInfo(HX_("Item.hx",6b,d3,ac,ac),57,HX_("items.Item",61,74,8b,61),HX_("onMouseUp",81,ac,1d,98)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Item_obj,onMouseUp,(void))

void Item_obj::onMouseOver( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_61_onMouseOver)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  61)		this->mouseIsOver = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Item_obj,onMouseOver,(void))

void Item_obj::onMouseOut( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_c36f9452ac2b554a_65_onMouseOut)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sprite,"sprite")
HXLINE(  65)		this->mouseIsOver = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Item_obj,onMouseOut,(void))


hx::ObjectPtr< Item_obj > Item_obj::__new(hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y, ::Dynamic __o_a_stackSize, ::Dynamic a_simpleGraphic,hx::Null< bool >  __o_a_createRectangularBody,hx::Null< bool >  __o_a_enablePhysics) {
	hx::ObjectPtr< Item_obj > __this = new Item_obj();
	__this->__construct(__o_a_x,__o_a_y,__o_a_stackSize,a_simpleGraphic,__o_a_createRectangularBody,__o_a_enablePhysics);
	return __this;
}

hx::ObjectPtr< Item_obj > Item_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a_x,hx::Null< Float >  __o_a_y, ::Dynamic __o_a_stackSize, ::Dynamic a_simpleGraphic,hx::Null< bool >  __o_a_createRectangularBody,hx::Null< bool >  __o_a_enablePhysics) {
	Item_obj *__this = (Item_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Item_obj), true, "items.Item"));
	*(void **)__this = Item_obj::_hx_vtable;
	__this->__construct(__o_a_x,__o_a_y,__o_a_stackSize,a_simpleGraphic,__o_a_createRectangularBody,__o_a_enablePhysics);
	return __this;
}

Item_obj::Item_obj()
{
}

void Item_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Item);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(creationTime,"creationTime");
	HX_MARK_MEMBER_NAME(stackSize,"stackSize");
	HX_MARK_MEMBER_NAME(quantity,"quantity");
	HX_MARK_MEMBER_NAME(mouseIsOver,"mouseIsOver");
	 ::flixel::addons::nape::FlxNapeSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Item_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(creationTime,"creationTime");
	HX_VISIT_MEMBER_NAME(stackSize,"stackSize");
	HX_VISIT_MEMBER_NAME(quantity,"quantity");
	HX_VISIT_MEMBER_NAME(mouseIsOver,"mouseIsOver");
	 ::flixel::addons::nape::FlxNapeSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Item_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"icon") ) { return hx::Val( icon); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { return hx::Val( stack_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"quantity") ) { return hx::Val( quantity); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stackSize") ) { return hx::Val( stackSize); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return hx::Val( highlight_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onMouseOut") ) { return hx::Val( onMouseOut_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { return hx::Val( description); }
		if (HX_FIELD_EQ(inName,"mouseIsOver") ) { return hx::Val( mouseIsOver); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"onMouseOver") ) { return hx::Val( onMouseOver_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creationTime") ) { return hx::Val( creationTime); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Item_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"quantity") ) { quantity=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stackSize") ) { stackSize=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseIsOver") ) { mouseIsOver=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creationTime") ) { creationTime=inValue.Cast<  ::gametime::TimeStamp >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Item_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"));
	outFields->push(HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"));
	outFields->push(HX_HCSTRING("creationTime","\xcc","\x7b","\x9d","\x83"));
	outFields->push(HX_HCSTRING("stackSize","\x29","\x78","\x51","\xd7"));
	outFields->push(HX_HCSTRING("quantity","\x8b","\x47","\x42","\xac"));
	outFields->push(HX_HCSTRING("mouseIsOver","\x63","\x8a","\xa7","\x5c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Item_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Item_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Item_obj,icon),HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45")},
	{hx::fsString,(int)offsetof(Item_obj,description),HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f")},
	{hx::fsObject /*::gametime::TimeStamp*/ ,(int)offsetof(Item_obj,creationTime),HX_HCSTRING("creationTime","\xcc","\x7b","\x9d","\x83")},
	{hx::fsInt,(int)offsetof(Item_obj,stackSize),HX_HCSTRING("stackSize","\x29","\x78","\x51","\xd7")},
	{hx::fsInt,(int)offsetof(Item_obj,quantity),HX_HCSTRING("quantity","\x8b","\x47","\x42","\xac")},
	{hx::fsBool,(int)offsetof(Item_obj,mouseIsOver),HX_HCSTRING("mouseIsOver","\x63","\x8a","\xa7","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Item_obj_sStaticStorageInfo = 0;
#endif

static ::String Item_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"),
	HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"),
	HX_HCSTRING("creationTime","\xcc","\x7b","\x9d","\x83"),
	HX_HCSTRING("stackSize","\x29","\x78","\x51","\xd7"),
	HX_HCSTRING("quantity","\x8b","\x47","\x42","\xac"),
	HX_HCSTRING("mouseIsOver","\x63","\x8a","\xa7","\x5c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("stack","\x48","\x67","\x0b","\x84"),
	HX_HCSTRING("highlight","\x34","\x56","\x00","\xed"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("onMouseOver","\xfa","\x2c","\x50","\x18"),
	HX_HCSTRING("onMouseOut","\xa8","\xbb","\xd4","\x81"),
	::String(null()) };

static void Item_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Item_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Item_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Item_obj::__mClass,"__mClass");
};

#endif

hx::Class Item_obj::__mClass;

void Item_obj::__register()
{
	hx::Object *dummy = new Item_obj;
	Item_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("items.Item","\x61","\x74","\x8b","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Item_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Item_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Item_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Item_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Item_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Item_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace items
