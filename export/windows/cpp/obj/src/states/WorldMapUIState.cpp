// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_InputController
#include <InputController.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_characters_Character
#include <characters/Character.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISubState
#include <flixel/addons/ui/FlxUISubState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_states_WorldMapUIState
#include <states/WorldMapUIState.h>
#endif
#ifndef INCLUDED_world_MapGenerator
#include <world/MapGenerator.h>
#endif
#ifndef INCLUDED_world_WorldMap
#include <world/WorldMap.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51e0366c97ff2a11_13_new,"states.WorldMapUIState","new",0xd6de4a19,"states.WorldMapUIState.new","states/WorldMapUIState.hx",13,0x45274fb8)
HX_DEFINE_STACK_FRAME(_hx_pos_51e0366c97ff2a11_19_create,"states.WorldMapUIState","create",0x4cdf06e3,"states.WorldMapUIState.create","states/WorldMapUIState.hx",19,0x45274fb8)
HX_DEFINE_STACK_FRAME(_hx_pos_51e0366c97ff2a11_41_add,"states.WorldMapUIState","add",0xd6d46bda,"states.WorldMapUIState.add","states/WorldMapUIState.hx",41,0x45274fb8)
HX_DEFINE_STACK_FRAME(_hx_pos_51e0366c97ff2a11_46_update,"states.WorldMapUIState","update",0x57d525f0,"states.WorldMapUIState.update","states/WorldMapUIState.hx",46,0x45274fb8)
HX_DEFINE_STACK_FRAME(_hx_pos_51e0366c97ff2a11_54_setControls,"states.WorldMapUIState","setControls",0x63bdaaf1,"states.WorldMapUIState.setControls","states/WorldMapUIState.hx",54,0x45274fb8)
HX_DEFINE_STACK_FRAME(_hx_pos_51e0366c97ff2a11_52_setControls,"states.WorldMapUIState","setControls",0x63bdaaf1,"states.WorldMapUIState.setControls","states/WorldMapUIState.hx",52,0x45274fb8)
static const int _hx_array_data_345f49a7_6[] = {
	(int)1,(int)2,(int)-1,
};
namespace states{

void WorldMapUIState_obj::__construct( ::Dynamic BGColor){
            	HX_GC_STACKFRAME(&_hx_pos_51e0366c97ff2a11_13_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(BGColor,"BGColor")
HXLINE(  16)		this->flxGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  13)		super::__construct(BGColor);
            	}

Dynamic WorldMapUIState_obj::__CreateEmpty() { return new WorldMapUIState_obj; }

void *WorldMapUIState_obj::_hx_vtable = 0;

Dynamic WorldMapUIState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WorldMapUIState_obj > _hx_result = new WorldMapUIState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WorldMapUIState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24aff6ad) {
		if (inClassId<=(int)0x2335d9a7) {
			if (inClassId<=(int)0x0da84e24) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0da84e24;
			} else {
				return inClassId==(int)0x2335d9a7;
			}
		} else {
			return inClassId==(int)0x24aff6ad;
		}
	} else {
		if (inClassId<=(int)0x3634c52c) {
			return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
		} else {
			return inClassId==(int)0x7f681f43;
		}
	}
}

void WorldMapUIState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_51e0366c97ff2a11_19_create)
            	HX_STACK_THIS(this)
HXLINE(  20)		this->super::create();
HXLINE(  21)		this->set_camera( ::flixel::FlxCamera_obj::__alloc( HX_CTX ,(int)0,(int)0,::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,null()));
HXLINE(  22)		::flixel::FlxG_obj::cameras->add(this->get_camera()).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  24)		this->worldMapSprite =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,(int)0,(int)0,::Shared_obj::mapGenerator->worldMap->bitmap);
HXLINE(  25)		this->flxGroup->add(this->worldMapSprite).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  28)		HX_VARI(  ::nape::phys::Body,_this) = ::Shared_obj::player->character->body;
HXDLIN(  28)		if (hx::IsNull( _this->zpp_inner->wrap_pos )) {
HXLINE(  28)			_this->zpp_inner->setupPosition();
            		}
HXDLIN(  28)		HX_VARI_NAME(  ::nape::geom::Vec2,_this1,"_this") = _this->zpp_inner->wrap_pos;
HXDLIN(  28)		{
HXLINE(  28)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this2,"_this") = _this1->zpp_inner;
HXDLIN(  28)			if (hx::IsNotNull( _this2->_validate )) {
HXLINE(  28)				_this2->_validate();
            			}
            		}
HXDLIN(  28)		int _hx_tmp = ::Std_obj::_hx_int(((Float)_this1->zpp_inner->x / (Float)(int)32));
HXLINE(  29)		HX_VARI_NAME(  ::nape::phys::Body,_this3,"_this") = ::Shared_obj::player->character->body;
HXDLIN(  29)		if (hx::IsNull( _this3->zpp_inner->wrap_pos )) {
HXLINE(  29)			_this3->zpp_inner->setupPosition();
            		}
HXDLIN(  29)		HX_VARI_NAME(  ::nape::geom::Vec2,_this4,"_this") = _this3->zpp_inner->wrap_pos;
HXDLIN(  29)		{
HXLINE(  29)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this5,"_this") = _this4->zpp_inner;
HXDLIN(  29)			if (hx::IsNotNull( _this5->_validate )) {
HXLINE(  29)				_this5->_validate();
            			}
            		}
HXLINE(  27)		this->mapCursor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int(((Float)_this4->zpp_inner->y / (Float)(int)32)),null());
HXLINE(  31)		this->mapCursor->makeGraphic((int)1,(int)1,(int)-65536,null(),null());
HXLINE(  32)		this->get_camera()->follow(this->mapCursor,null(),(int)1);
HXLINE(  33)		this->get_camera()->set_zoom((int)2);
HXLINE(  34)		this->flxGroup->add(this->mapCursor).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  36)		this->setControls();
HXLINE(  38)		this->add(this->flxGroup);
            	}


 ::Dynamic WorldMapUIState_obj::add( ::Dynamic _tmp_a_object){
            	HX_STACKFRAME(&_hx_pos_51e0366c97ff2a11_41_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_tmp_a_object,"_tmp_a_object")
HXLINE(  42)		HX_VARI(  ::flixel::FlxBasic,a_object) = ( ( ::flixel::FlxBasic)(_tmp_a_object) );
HXDLIN(  42)		this->super::add(a_object);
HXLINE(  43)		return a_object;
            	}


void WorldMapUIState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_51e0366c97ff2a11_46_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  47)		this->super::update(elapsed);
HXLINE(  48)		::Shared_obj::player->update(elapsed);
HXLINE(  49)		this->_stateIC->updateControls(::flixel::FlxG_obj::keys,::flixel::FlxG_obj::mouse,::flixel::FlxG_obj::gamepads->firstActive);
            	}


void WorldMapUIState_obj::setControls(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::states::WorldMapUIState,_gthis) HXARGC(1)
            		int _hx_run( ::Dynamic params){
            			HX_GC_STACKFRAME(&_hx_pos_51e0366c97ff2a11_54_setControls)
            			HX_STACK_ARG(params,"params")
HXLINE(  55)			::flixel::FlxG_obj::cameras->remove(_gthis->get_camera(),null());
HXLINE(  56)			_gthis->close();
HXLINE(  57)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_51e0366c97ff2a11_52_setControls)
            	HX_STACK_THIS(this)
HXLINE(  52)		HX_VARI(  ::states::WorldMapUIState,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  53)		this->_stateIC =  ::InputController_obj::__alloc( HX_CTX ,::Array_obj< int >::fromData( _hx_array_data_345f49a7_6,3));
HXLINE(  54)		this->_stateIC->addKeyboardEvent((int)2,HX_("PAGEUP",6a,5e,bb,98), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WorldMapUIState_obj,setControls,(void))


hx::ObjectPtr< WorldMapUIState_obj > WorldMapUIState_obj::__new( ::Dynamic BGColor) {
	hx::ObjectPtr< WorldMapUIState_obj > __this = new WorldMapUIState_obj();
	__this->__construct(BGColor);
	return __this;
}

hx::ObjectPtr< WorldMapUIState_obj > WorldMapUIState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic BGColor) {
	WorldMapUIState_obj *__this = (WorldMapUIState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WorldMapUIState_obj), true, "states.WorldMapUIState"));
	*(void **)__this = WorldMapUIState_obj::_hx_vtable;
	__this->__construct(BGColor);
	return __this;
}

WorldMapUIState_obj::WorldMapUIState_obj()
{
}

void WorldMapUIState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WorldMapUIState);
	HX_MARK_MEMBER_NAME(_stateIC,"_stateIC");
	HX_MARK_MEMBER_NAME(worldMapSprite,"worldMapSprite");
	HX_MARK_MEMBER_NAME(flxGroup,"flxGroup");
	HX_MARK_MEMBER_NAME(mapCursor,"mapCursor");
	 ::flixel::addons::ui::FlxUISubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WorldMapUIState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_stateIC,"_stateIC");
	HX_VISIT_MEMBER_NAME(worldMapSprite,"worldMapSprite");
	HX_VISIT_MEMBER_NAME(flxGroup,"flxGroup");
	HX_VISIT_MEMBER_NAME(mapCursor,"mapCursor");
	 ::flixel::addons::ui::FlxUISubState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val WorldMapUIState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_stateIC") ) { return hx::Val( _stateIC); }
		if (HX_FIELD_EQ(inName,"flxGroup") ) { return hx::Val( flxGroup); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapCursor") ) { return hx::Val( mapCursor); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setControls") ) { return hx::Val( setControls_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldMapSprite") ) { return hx::Val( worldMapSprite); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val WorldMapUIState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_stateIC") ) { _stateIC=inValue.Cast<  ::InputController >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flxGroup") ) { flxGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapCursor") ) { mapCursor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"worldMapSprite") ) { worldMapSprite=inValue.Cast<  ::flixel::addons::ui::FlxUISprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WorldMapUIState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_stateIC","\xac","\x75","\x1a","\x70"));
	outFields->push(HX_HCSTRING("worldMapSprite","\x0f","\x27","\x7b","\xc7"));
	outFields->push(HX_HCSTRING("flxGroup","\x6d","\x01","\x1d","\x7d"));
	outFields->push(HX_HCSTRING("mapCursor","\x92","\xea","\xc7","\x21"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo WorldMapUIState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::InputController*/ ,(int)offsetof(WorldMapUIState_obj,_stateIC),HX_HCSTRING("_stateIC","\xac","\x75","\x1a","\x70")},
	{hx::fsObject /*::flixel::addons::ui::FlxUISprite*/ ,(int)offsetof(WorldMapUIState_obj,worldMapSprite),HX_HCSTRING("worldMapSprite","\x0f","\x27","\x7b","\xc7")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(WorldMapUIState_obj,flxGroup),HX_HCSTRING("flxGroup","\x6d","\x01","\x1d","\x7d")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(WorldMapUIState_obj,mapCursor),HX_HCSTRING("mapCursor","\x92","\xea","\xc7","\x21")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *WorldMapUIState_obj_sStaticStorageInfo = 0;
#endif

static ::String WorldMapUIState_obj_sMemberFields[] = {
	HX_HCSTRING("_stateIC","\xac","\x75","\x1a","\x70"),
	HX_HCSTRING("worldMapSprite","\x0f","\x27","\x7b","\xc7"),
	HX_HCSTRING("flxGroup","\x6d","\x01","\x1d","\x7d"),
	HX_HCSTRING("mapCursor","\x92","\xea","\xc7","\x21"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("setControls","\x38","\x50","\x1d","\x68"),
	::String(null()) };

static void WorldMapUIState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WorldMapUIState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WorldMapUIState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WorldMapUIState_obj::__mClass,"__mClass");
};

#endif

hx::Class WorldMapUIState_obj::__mClass;

void WorldMapUIState_obj::__register()
{
	hx::Object *dummy = new WorldMapUIState_obj;
	WorldMapUIState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("states.WorldMapUIState","\xa7","\x49","\x5f","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WorldMapUIState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WorldMapUIState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WorldMapUIState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WorldMapUIState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WorldMapUIState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WorldMapUIState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
