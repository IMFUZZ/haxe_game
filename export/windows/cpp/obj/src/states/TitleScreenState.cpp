// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_TitleScreenState
#include <states/TitleScreenState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cb62048458f2a9a9_11_new,"states.TitleScreenState","new",0x48aa528b,"states.TitleScreenState.new","states/TitleScreenState.hx",11,0x34352be4)
HX_DEFINE_STACK_FRAME(_hx_pos_cb62048458f2a9a9_15_create,"states.TitleScreenState","create",0x97a251b1,"states.TitleScreenState.create","states/TitleScreenState.hx",15,0x34352be4)
HX_DEFINE_STACK_FRAME(_hx_pos_cb62048458f2a9a9_24_update,"states.TitleScreenState","update",0xa29870be,"states.TitleScreenState.update","states/TitleScreenState.hx",24,0x34352be4)
HX_DEFINE_STACK_FRAME(_hx_pos_cb62048458f2a9a9_28__clickPlay,"states.TitleScreenState","_clickPlay",0xccd2ff52,"states.TitleScreenState._clickPlay","states/TitleScreenState.hx",28,0x34352be4)
namespace states{

void TitleScreenState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_cb62048458f2a9a9_11_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  11)		super::__construct(MaxSize);
            	}

Dynamic TitleScreenState_obj::__CreateEmpty() { return new TitleScreenState_obj; }

void *TitleScreenState_obj::_hx_vtable = 0;

Dynamic TitleScreenState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TitleScreenState_obj > _hx_result = new TitleScreenState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TitleScreenState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x0c046953) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c046953;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void TitleScreenState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_cb62048458f2a9a9_15_create)
            	HX_STACK_THIS(this)
HXLINE(  16)		this->super::create();
HXLINE(  17)		::Shared_obj::init();
HXLINE(  18)		this->_btnPlay =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("Play",14,5a,33,35),this->_clickPlay_dyn());
HXLINE(  19)		this->_btnPlay->screenCenter(null());
HXLINE(  20)		this->add(this->_btnPlay);
            	}


void TitleScreenState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cb62048458f2a9a9_24_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  24)		this->super::update(elapsed);
            	}


void TitleScreenState_obj::_clickPlay(){
            	HX_GC_STACKFRAME(&_hx_pos_cb62048458f2a9a9_28__clickPlay)
            	HX_STACK_THIS(this)
HXLINE(  28)		HX_VARI(  ::flixel::FlxState,nextState) =  ::states::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  28)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  28)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleScreenState_obj,_clickPlay,(void))


hx::ObjectPtr< TitleScreenState_obj > TitleScreenState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< TitleScreenState_obj > __this = new TitleScreenState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< TitleScreenState_obj > TitleScreenState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	TitleScreenState_obj *__this = (TitleScreenState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TitleScreenState_obj), true, "states.TitleScreenState"));
	*(void **)__this = TitleScreenState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

TitleScreenState_obj::TitleScreenState_obj()
{
}

void TitleScreenState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleScreenState);
	HX_MARK_MEMBER_NAME(_btnPlay,"_btnPlay");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleScreenState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_btnPlay,"_btnPlay");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TitleScreenState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_btnPlay") ) { return hx::Val( _btnPlay); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_clickPlay") ) { return hx::Val( _clickPlay_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TitleScreenState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_btnPlay") ) { _btnPlay=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleScreenState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_btnPlay","\xf1","\xd3","\x9c","\x11"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TitleScreenState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(TitleScreenState_obj,_btnPlay),HX_HCSTRING("_btnPlay","\xf1","\xd3","\x9c","\x11")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TitleScreenState_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleScreenState_obj_sMemberFields[] = {
	HX_HCSTRING("_btnPlay","\xf1","\xd3","\x9c","\x11"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("_clickPlay","\x1d","\x16","\xfc","\x84"),
	::String(null()) };

static void TitleScreenState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TitleScreenState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TitleScreenState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TitleScreenState_obj::__mClass,"__mClass");
};

#endif

hx::Class TitleScreenState_obj::__mClass;

void TitleScreenState_obj::__register()
{
	hx::Object *dummy = new TitleScreenState_obj;
	TitleScreenState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("states.TitleScreenState","\x19","\xb1","\xbd","\xb5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TitleScreenState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TitleScreenState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TitleScreenState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TitleScreenState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleScreenState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleScreenState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
