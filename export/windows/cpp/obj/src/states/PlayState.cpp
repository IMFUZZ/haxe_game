// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_InputController
#include <InputController.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Shared
#include <Shared.h>
#endif
#ifndef INCLUDED_characters_Character
#include <characters/Character.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSpace
#include <flixel/addons/nape/FlxNapeSpace.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_nape_FlxNapeTilemap
#include <flixel/addons/nape/FlxNapeTilemap.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gametime_Clock
#include <gametime/Clock.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_items_Gold
#include <items/Gold.h>
#endif
#ifndef INCLUDED_items_Item
#include <items/Item.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_ui_InGameUI
#include <ui/InGameUI.h>
#endif
#ifndef INCLUDED_world_Darkness
#include <world/Darkness.h>
#endif
#ifndef INCLUDED_world_MapGenerator
#include <world/MapGenerator.h>
#endif
#ifndef INCLUDED_world_WorldTilemap
#include <world/WorldTilemap.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_26_new,"states.PlayState","new",0x0e695aa3,"states.PlayState.new","states/PlayState.hx",26,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_33_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",33,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_48_update,"states.PlayState","update",0x17cb87a6,"states.PlayState.update","states/PlayState.hx",48,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_53_update,"states.PlayState","update",0x17cb87a6,"states.PlayState.update","states/PlayState.hx",53,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_62__init,"states.PlayState","_init",0xdf0b37f2,"states.PlayState._init","states/PlayState.hx",62,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_66__init,"states.PlayState","_init",0xdf0b37f2,"states.PlayState._init","states/PlayState.hx",66,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_70__init,"states.PlayState","_init",0xdf0b37f2,"states.PlayState._init","states/PlayState.hx",70,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_75__init,"states.PlayState","_init",0xdf0b37f2,"states.PlayState._init","states/PlayState.hx",75,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_80__init,"states.PlayState","_init",0xdf0b37f2,"states.PlayState._init","states/PlayState.hx",80,0x36e487ae)
HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_57__init,"states.PlayState","_init",0xdf0b37f2,"states.PlayState._init","states/PlayState.hx",57,0x36e487ae)
static const int _hx_array_data_0420cd31_10[] = {
	(int)1,(int)2,(int)-1,
};
namespace states{

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_26_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  26)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x063a51b7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x063a51b7;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_33_create)
            	HX_STACK_THIS(this)
HXLINE(  34)		this->super::create();
HXLINE(  35)		this->_init();
HXLINE(  36)		this->worldTileMap = ::Shared_obj::mapGenerator->generate((int)10,HX_("assets/images/tilemap.png",9e,1e,4d,9b));
HXLINE(  37)		this->add(this->worldTileMap);
HXLINE(  38)		 ::Player _hx_tmp = ::Shared_obj::player;
HXDLIN(  38)		HX_VARI(  ::nape::geom::Vec2,_this) = ::Shared_obj::mapGenerator->spawnPoint;
HXDLIN(  38)		{
HXLINE(  38)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this1,"_this") = _this->zpp_inner;
HXDLIN(  38)			if (hx::IsNotNull( _this1->_validate )) {
HXLINE(  38)				_this1->_validate();
            			}
            		}
HXDLIN(  38)		Float _hx_tmp1 = _this->zpp_inner->x;
HXDLIN(  38)		HX_VARI_NAME(  ::nape::geom::Vec2,_this2,"_this") = ::Shared_obj::mapGenerator->spawnPoint;
HXDLIN(  38)		{
HXLINE(  38)			HX_VARI_NAME(  ::zpp_nape::geom::ZPP_Vec2,_this3,"_this") = _this2->zpp_inner;
HXDLIN(  38)			if (hx::IsNotNull( _this3->_validate )) {
HXLINE(  38)				_this3->_validate();
            			}
            		}
HXDLIN(  38)		_hx_tmp->setCharacter( ::characters::Character_obj::__alloc( HX_CTX ,_hx_tmp1,_this2->zpp_inner->y,HX_("assets/images/character.png",d9,9a,0b,66)));
HXLINE(  40)		this->flxGroup->add(::Shared_obj::player->character).StaticCast<  ::flixel::FlxObject >();
HXLINE(  41)		 ::flixel::group::FlxTypedGroup _hx_tmp2 = this->flxGroup;
HXDLIN(  41)		_hx_tmp2->add( ::characters::Character_obj::__alloc( HX_CTX ,(int)100,(int)100,HX_("assets/images/character.png",d9,9a,0b,66))).StaticCast<  ::flixel::FlxObject >();
HXLINE(  42)		this->flxGroup->add(::Shared_obj::player->character->tileSelected).StaticCast<  ::flixel::FlxObject >();
HXLINE(  43)		this->add(this->flxGroup);
HXLINE(  44)		this->add(this->darkness);
HXLINE(  45)		this->add(::Shared_obj::player->UI);
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_48_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  49)		this->super::update(elapsed);
HXLINE(  50)		::Shared_obj::clock->update(elapsed);
HXLINE(  51)		::Shared_obj::player->update(elapsed);
HXLINE(  52)		this->darkness->update(elapsed);
HXLINE(  53)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,int,a1) HXARGC(2)
            			int _hx_run( ::flixel::FlxObject a2, ::flixel::FlxObject a3){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_53_update)
            				HX_STACK_ARG(a2,"a2")
            				HX_STACK_ARG(a3,"a3")
HXLINE(  53)				return ::flixel::util::FlxSort_obj::byY(a1,a2,a3);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  53)			int a1 = (int)-1;
HXDLIN(  53)			this->flxGroup->members->sort( ::Dynamic(new _hx_Closure_0(a1)));
            		}
HXLINE(  54)		this->_stateIC->updateControls(::flixel::FlxG_obj::keys,::flixel::FlxG_obj::mouse,::flixel::FlxG_obj::gamepads->firstActive);
            	}


void PlayState_obj::_init(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		int _hx_run( ::Dynamic params){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_62__init)
            			HX_STACK_ARG(params,"params")
HXLINE(  63)			::Shared_obj::player->openSubState(HX_("worldMap",6a,6b,8b,a4));
HXLINE(  64)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::states::PlayState,_gthis) HXARGC(1)
            		int _hx_run( ::Dynamic params1){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_66__init)
            			HX_STACK_ARG(params1,"params1")
HXLINE(  67)			HX_VARI_NAME(  ::flixel::group::FlxTypedGroup,_gthis1,"_gthis") = _gthis->flxGroup;
HXDLIN(  67)			_gthis1->add( ::items::Gold_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y)).StaticCast<  ::flixel::FlxObject >();
HXLINE(  68)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::states::PlayState,_gthis) HXARGC(1)
            		int _hx_run( ::Dynamic params2){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_70__init)
            			HX_STACK_ARG(params2,"params2")
HXLINE(  71)			_gthis->worldTileMap->useScaleHack = !(_gthis->worldTileMap->useScaleHack);
HXLINE(  72)			::haxe::Log_obj::trace(_gthis->worldTileMap->useScaleHack,hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),72,HX_("states.PlayState",31,cd,20,04),HX_("_init",ef,56,cc,f8)));
HXLINE(  73)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::states::PlayState,_gthis) HXARGC(1)
            		int _hx_run( ::Dynamic params3){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_75__init)
            			HX_STACK_ARG(params3,"params3")
HXLINE(  76)			_gthis->worldTileMap->set_pixelPerfectRender(!(_gthis->worldTileMap->pixelPerfectRender));
HXLINE(  77)			::haxe::Log_obj::trace(_gthis->worldTileMap->pixelPerfectRender,hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),77,HX_("states.PlayState",31,cd,20,04),HX_("_init",ef,56,cc,f8)));
HXLINE(  78)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            		int _hx_run( ::Dynamic params4){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_80__init)
            			HX_STACK_ARG(params4,"params4")
HXLINE(  81)			::flixel::FlxG_obj::set_fullscreen(!(::flixel::FlxG_obj::get_fullscreen()));
HXLINE(  82)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  82)			bool _hx_tmp1 = ::flixel::FlxG_obj::get_fullscreen();
HXDLIN(  82)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),82,HX_("states.PlayState",31,cd,20,04),HX_("_init",ef,56,cc,f8)));
HXLINE(  83)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_57__init)
            	HX_STACK_THIS(this)
HXLINE(  57)		HX_VARI(  ::states::PlayState,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  58)		::flixel::addons::nape::FlxNapeSpace_obj::init();
HXLINE(  59)		this->flxGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  60)		this->darkness =  ::world::Darkness_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  61)		this->_stateIC =  ::InputController_obj::__alloc( HX_CTX ,::Array_obj< int >::fromData( _hx_array_data_0420cd31_10,3));
HXLINE(  62)		this->_stateIC->addKeyboardEvent((int)2,HX_("PAGEUP",6a,5e,bb,98), ::Dynamic(new _hx_Closure_0()));
HXLINE(  66)		this->_stateIC->addMouseEvent((int)2,HX_("RIGHTCLICK",ec,66,ff,a9), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(  70)		this->_stateIC->addKeyboardEvent((int)2,HX_("ONE",46,36,3c,00), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(  75)		this->_stateIC->addKeyboardEvent((int)2,HX_("TWO",6c,09,40,00), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(  80)		this->_stateIC->addKeyboardEvent((int)2,HX_("THREE",3e,8c,7e,8d), ::Dynamic(new _hx_Closure_4()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,_init,(void))


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "states.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(darkness,"darkness");
	HX_MARK_MEMBER_NAME(_stateIC,"_stateIC");
	HX_MARK_MEMBER_NAME(flxGroup,"flxGroup");
	HX_MARK_MEMBER_NAME(worldTileMap,"worldTileMap");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(darkness,"darkness");
	HX_VISIT_MEMBER_NAME(_stateIC,"_stateIC");
	HX_VISIT_MEMBER_NAME(flxGroup,"flxGroup");
	HX_VISIT_MEMBER_NAME(worldTileMap,"worldTileMap");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_init") ) { return hx::Val( _init_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"darkness") ) { return hx::Val( darkness); }
		if (HX_FIELD_EQ(inName,"_stateIC") ) { return hx::Val( _stateIC); }
		if (HX_FIELD_EQ(inName,"flxGroup") ) { return hx::Val( flxGroup); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"worldTileMap") ) { return hx::Val( worldTileMap); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"darkness") ) { darkness=inValue.Cast<  ::world::Darkness >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stateIC") ) { _stateIC=inValue.Cast<  ::InputController >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flxGroup") ) { flxGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"worldTileMap") ) { worldTileMap=inValue.Cast<  ::world::WorldTilemap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("darkness","\x0d","\x48","\xe8","\x92"));
	outFields->push(HX_HCSTRING("_stateIC","\xac","\x75","\x1a","\x70"));
	outFields->push(HX_HCSTRING("flxGroup","\x6d","\x01","\x1d","\x7d"));
	outFields->push(HX_HCSTRING("worldTileMap","\xdc","\x87","\xea","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::world::Darkness*/ ,(int)offsetof(PlayState_obj,darkness),HX_HCSTRING("darkness","\x0d","\x48","\xe8","\x92")},
	{hx::fsObject /*::InputController*/ ,(int)offsetof(PlayState_obj,_stateIC),HX_HCSTRING("_stateIC","\xac","\x75","\x1a","\x70")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,flxGroup),HX_HCSTRING("flxGroup","\x6d","\x01","\x1d","\x7d")},
	{hx::fsObject /*::world::WorldTilemap*/ ,(int)offsetof(PlayState_obj,worldTileMap),HX_HCSTRING("worldTileMap","\xdc","\x87","\xea","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("darkness","\x0d","\x48","\xe8","\x92"),
	HX_HCSTRING("_stateIC","\xac","\x75","\x1a","\x70"),
	HX_HCSTRING("flxGroup","\x6d","\x01","\x1d","\x7d"),
	HX_HCSTRING("worldTileMap","\xdc","\x87","\xea","\x79"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("_init","\xef","\x56","\xcc","\xf8"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("states.PlayState","\x31","\xcd","\x20","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
