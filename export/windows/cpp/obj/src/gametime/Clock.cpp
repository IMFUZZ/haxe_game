// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gametime_Clock
#include <gametime/Clock.h>
#endif
#ifndef INCLUDED_gametime_TimeStamp
#include <gametime/TimeStamp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_5_new,"gametime.Clock","new",0x7fb58971,"gametime.Clock.new","gametime/Clock.hx",5,0x9c699820)
static const ::String _hx_array_data_411dfcff_1[] = {
	HX_("Spring",ed,4a,2a,f8),HX_("Summer",8f,21,e0,d5),HX_("Autumn",36,3a,1a,a8),HX_("Winter",65,23,2d,87),
};
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_21__onComplete,"gametime.Clock","_onComplete",0xef535428,"gametime.Clock._onComplete","gametime/Clock.hx",21,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_24_addDays,"gametime.Clock","addDays",0xada2b2e9,"gametime.Clock.addDays","gametime/Clock.hx",24,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_36_update,"gametime.Clock","update",0x6dfa0d98,"gametime.Clock.update","gametime/Clock.hx",36,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_40_getCurrentYear,"gametime.Clock","getCurrentYear",0x2ea5242f,"gametime.Clock.getCurrentYear","gametime/Clock.hx",40,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_44_getCurrentMonth,"gametime.Clock","getCurrentMonth",0xbfb1908e,"gametime.Clock.getCurrentMonth","gametime/Clock.hx",44,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_48_getCurrentSeason,"gametime.Clock","getCurrentSeason",0x9736c715,"gametime.Clock.getCurrentSeason","gametime/Clock.hx",48,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_52_getCurrentDay,"gametime.Clock","getCurrentDay",0x5081702a,"gametime.Clock.getCurrentDay","gametime/Clock.hx",52,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_56_getCurrentHour,"gametime.Clock","getCurrentHour",0x23702b96,"gametime.Clock.getCurrentHour","gametime/Clock.hx",56,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_60_getCurrentMinute,"gametime.Clock","getCurrentMinute",0x87463dc6,"gametime.Clock.getCurrentMinute","gametime/Clock.hx",60,0x9c699820)
HX_DEFINE_STACK_FRAME(_hx_pos_d93ce7f2488caead_64_createTimeStamp,"gametime.Clock","createTimeStamp",0x234c8cab,"gametime.Clock.createTimeStamp","gametime/Clock.hx",64,0x9c699820)
namespace gametime{

void Clock_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_5_new)
            	HX_STACK_THIS(this)
HXLINE(  13)		this->_seasons = ::Array_obj< ::String >::fromData( _hx_array_data_411dfcff_1,4);
HXLINE(  12)		this->_monthsInYear = (int)12;
HXLINE(  11)		this->_daysInMonth = (int)25;
HXLINE(  10)		this->currentMonth = (int)0;
HXLINE(   9)		this->currentYear = (int)0;
HXLINE(   8)		this->currentDay = (int)0;
HXLINE(   7)		this->_secondsInADay = (int)1000;
HXLINE(  16)		super::__construct(null());
HXLINE(  17)		this->start(this->_secondsInADay,this->_onComplete_dyn(),(int)0);
            	}

Dynamic Clock_obj::__CreateEmpty() { return new Clock_obj; }

void *Clock_obj::_hx_vtable = 0;

Dynamic Clock_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Clock_obj > _hx_result = new Clock_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Clock_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x115f93d5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x115f93d5;
	} else {
		return inClassId==(int)0x758a5bcf;
	}
}

void Clock_obj::_onComplete( ::flixel::util::FlxTimer timer){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_21__onComplete)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(timer,"timer")
HXLINE(  21)		this->addDays((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clock_obj,_onComplete,(void))

void Clock_obj::addDays(int numberOfDays){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_24_addDays)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numberOfDays,"numberOfDays")
HXLINE(  25)		 ::gametime::Clock _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  25)		_hx_tmp->currentDay = (_hx_tmp->currentDay + numberOfDays);
HXLINE(  26)		if ((hx::Mod(this->currentDay,this->_daysInMonth) == (int)0)) {
HXLINE(  27)			 ::gametime::Clock _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  27)			int _hx_tmp2 = _hx_tmp1->currentMonth;
HXDLIN(  27)			int _hx_tmp3 = ::Std_obj::_hx_int(((Float)this->currentDay / (Float)this->_daysInMonth));
HXDLIN(  27)			_hx_tmp1->currentMonth = (_hx_tmp2 + hx::Mod(_hx_tmp3,this->_monthsInYear));
HXLINE(  28)			if ((hx::Mod(this->currentMonth,this->_monthsInYear) == (int)0)) {
HXLINE(  29)				 ::gametime::Clock _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  29)				int _hx_tmp5 = _hx_tmp4->currentYear;
HXDLIN(  29)				_hx_tmp4->currentYear = (_hx_tmp5 + ::Std_obj::_hx_int(((Float)this->currentDay / (Float)(this->_daysInMonth * this->_monthsInYear))));
HXLINE(  30)				this->currentDay = hx::Mod(this->currentDay,(this->_daysInMonth * this->_monthsInYear));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clock_obj,addDays,(void))

void Clock_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_36_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  36)		this->super::update(elapsed);
            	}


int Clock_obj::getCurrentYear(){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_40_getCurrentYear)
            	HX_STACK_THIS(this)
HXLINE(  40)		return this->currentYear;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentYear,return )

int Clock_obj::getCurrentMonth(){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_44_getCurrentMonth)
            	HX_STACK_THIS(this)
HXLINE(  44)		return this->currentMonth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentMonth,return )

::String Clock_obj::getCurrentSeason(){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_48_getCurrentSeason)
            	HX_STACK_THIS(this)
HXLINE(  48)		return this->_seasons->__get(::Std_obj::_hx_int(((Float)((Float)this->currentDay / (Float)(this->_daysInMonth * this->_monthsInYear)) / (Float)this->_seasons->length)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentSeason,return )

int Clock_obj::getCurrentDay(){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_52_getCurrentDay)
            	HX_STACK_THIS(this)
HXLINE(  52)		return this->currentDay;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentDay,return )

int Clock_obj::getCurrentHour(){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_56_getCurrentHour)
            	HX_STACK_THIS(this)
HXLINE(  56)		Float _hx_tmp;
HXDLIN(  56)		if ((this->time > (int)0)) {
HXLINE(  56)			_hx_tmp = ((Float)this->_timeCounter / (Float)this->time);
            		}
            		else {
HXLINE(  56)			_hx_tmp = (int)0;
            		}
HXDLIN(  56)		return ::Std_obj::_hx_int((_hx_tmp * (int)24));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentHour,return )

int Clock_obj::getCurrentMinute(){
            	HX_STACKFRAME(&_hx_pos_d93ce7f2488caead_60_getCurrentMinute)
            	HX_STACK_THIS(this)
HXLINE(  60)		Float _hx_tmp;
HXDLIN(  60)		if ((this->time > (int)0)) {
HXLINE(  60)			_hx_tmp = ((Float)this->_timeCounter / (Float)this->time);
            		}
            		else {
HXLINE(  60)			_hx_tmp = (int)0;
            		}
HXDLIN(  60)		return ::Std_obj::_hx_int(((_hx_tmp * (int)1440) - (this->getCurrentHour() * (int)60)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,getCurrentMinute,return )

 ::gametime::TimeStamp Clock_obj::createTimeStamp(){
            	HX_GC_STACKFRAME(&_hx_pos_d93ce7f2488caead_64_createTimeStamp)
            	HX_STACK_THIS(this)
HXLINE(  64)		return  ::gametime::TimeStamp_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clock_obj,createTimeStamp,return )


hx::ObjectPtr< Clock_obj > Clock_obj::__new() {
	hx::ObjectPtr< Clock_obj > __this = new Clock_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Clock_obj > Clock_obj::__alloc(hx::Ctx *_hx_ctx) {
	Clock_obj *__this = (Clock_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Clock_obj), true, "gametime.Clock"));
	*(void **)__this = Clock_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Clock_obj::Clock_obj()
{
}

void Clock_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Clock);
	HX_MARK_MEMBER_NAME(_secondsInADay,"_secondsInADay");
	HX_MARK_MEMBER_NAME(currentDay,"currentDay");
	HX_MARK_MEMBER_NAME(currentYear,"currentYear");
	HX_MARK_MEMBER_NAME(currentMonth,"currentMonth");
	HX_MARK_MEMBER_NAME(_daysInMonth,"_daysInMonth");
	HX_MARK_MEMBER_NAME(_monthsInYear,"_monthsInYear");
	HX_MARK_MEMBER_NAME(_seasons,"_seasons");
	 ::flixel::util::FlxTimer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Clock_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_secondsInADay,"_secondsInADay");
	HX_VISIT_MEMBER_NAME(currentDay,"currentDay");
	HX_VISIT_MEMBER_NAME(currentYear,"currentYear");
	HX_VISIT_MEMBER_NAME(currentMonth,"currentMonth");
	HX_VISIT_MEMBER_NAME(_daysInMonth,"_daysInMonth");
	HX_VISIT_MEMBER_NAME(_monthsInYear,"_monthsInYear");
	HX_VISIT_MEMBER_NAME(_seasons,"_seasons");
	 ::flixel::util::FlxTimer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Clock_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addDays") ) { return hx::Val( addDays_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_seasons") ) { return hx::Val( _seasons); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentDay") ) { return hx::Val( currentDay); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentYear") ) { return hx::Val( currentYear); }
		if (HX_FIELD_EQ(inName,"_onComplete") ) { return hx::Val( _onComplete_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentMonth") ) { return hx::Val( currentMonth); }
		if (HX_FIELD_EQ(inName,"_daysInMonth") ) { return hx::Val( _daysInMonth); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_monthsInYear") ) { return hx::Val( _monthsInYear); }
		if (HX_FIELD_EQ(inName,"getCurrentDay") ) { return hx::Val( getCurrentDay_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_secondsInADay") ) { return hx::Val( _secondsInADay); }
		if (HX_FIELD_EQ(inName,"getCurrentYear") ) { return hx::Val( getCurrentYear_dyn()); }
		if (HX_FIELD_EQ(inName,"getCurrentHour") ) { return hx::Val( getCurrentHour_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getCurrentMonth") ) { return hx::Val( getCurrentMonth_dyn()); }
		if (HX_FIELD_EQ(inName,"createTimeStamp") ) { return hx::Val( createTimeStamp_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCurrentSeason") ) { return hx::Val( getCurrentSeason_dyn()); }
		if (HX_FIELD_EQ(inName,"getCurrentMinute") ) { return hx::Val( getCurrentMinute_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Clock_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_seasons") ) { _seasons=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentDay") ) { currentDay=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentYear") ) { currentYear=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentMonth") ) { currentMonth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_daysInMonth") ) { _daysInMonth=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_monthsInYear") ) { _monthsInYear=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_secondsInADay") ) { _secondsInADay=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Clock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_secondsInADay","\x20","\x03","\x7e","\x15"));
	outFields->push(HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7"));
	outFields->push(HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88"));
	outFields->push(HX_HCSTRING("currentMonth","\x47","\xac","\x6b","\x53"));
	outFields->push(HX_HCSTRING("_daysInMonth","\x45","\xa9","\x54","\x75"));
	outFields->push(HX_HCSTRING("_monthsInYear","\xb4","\xa8","\xa8","\xa2"));
	outFields->push(HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Clock_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Clock_obj,_secondsInADay),HX_HCSTRING("_secondsInADay","\x20","\x03","\x7e","\x15")},
	{hx::fsInt,(int)offsetof(Clock_obj,currentDay),HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7")},
	{hx::fsInt,(int)offsetof(Clock_obj,currentYear),HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88")},
	{hx::fsInt,(int)offsetof(Clock_obj,currentMonth),HX_HCSTRING("currentMonth","\x47","\xac","\x6b","\x53")},
	{hx::fsInt,(int)offsetof(Clock_obj,_daysInMonth),HX_HCSTRING("_daysInMonth","\x45","\xa9","\x54","\x75")},
	{hx::fsInt,(int)offsetof(Clock_obj,_monthsInYear),HX_HCSTRING("_monthsInYear","\xb4","\xa8","\xa8","\xa2")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Clock_obj,_seasons),HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Clock_obj_sStaticStorageInfo = 0;
#endif

static ::String Clock_obj_sMemberFields[] = {
	HX_HCSTRING("_secondsInADay","\x20","\x03","\x7e","\x15"),
	HX_HCSTRING("currentDay","\xa3","\xfb","\x26","\xc7"),
	HX_HCSTRING("currentYear","\x96","\xa2","\xd9","\x88"),
	HX_HCSTRING("currentMonth","\x47","\xac","\x6b","\x53"),
	HX_HCSTRING("_daysInMonth","\x45","\xa9","\x54","\x75"),
	HX_HCSTRING("_monthsInYear","\xb4","\xa8","\xa8","\xa2"),
	HX_HCSTRING("_seasons","\x71","\x8c","\x1e","\x70"),
	HX_HCSTRING("_onComplete","\x17","\xa2","\x08","\x30"),
	HX_HCSTRING("addDays","\x58","\x9d","\xa0","\x7e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("getCurrentYear","\xa0","\xf5","\x77","\x10"),
	HX_HCSTRING("getCurrentMonth","\xfd","\x01","\x56","\x76"),
	HX_HCSTRING("getCurrentSeason","\xc6","\x96","\x75","\xb0"),
	HX_HCSTRING("getCurrentDay","\xd9","\x57","\x99","\x23"),
	HX_HCSTRING("getCurrentHour","\x07","\xfd","\x42","\x05"),
	HX_HCSTRING("getCurrentMinute","\x77","\x0d","\x85","\xa0"),
	HX_HCSTRING("createTimeStamp","\x1a","\xfe","\xf0","\xd9"),
	::String(null()) };

static void Clock_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Clock_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Clock_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Clock_obj::__mClass,"__mClass");
};

#endif

hx::Class Clock_obj::__mClass;

void Clock_obj::__register()
{
	hx::Object *dummy = new Clock_obj;
	Clock_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("gametime.Clock","\xff","\xfc","\x1d","\x41");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Clock_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Clock_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Clock_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Clock_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Clock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Clock_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gametime
