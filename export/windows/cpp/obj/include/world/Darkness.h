// Generated by Haxe 3.4.0
#ifndef INCLUDED_world_Darkness
#define INCLUDED_world_Darkness

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(world,Darkness)

namespace world{


class HXCPP_CLASS_ATTRIBUTES Darkness_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Darkness_obj OBJ_;
		Darkness_obj();

	public:
		enum { _hx_ClassId = 0x647577db };

		void __construct( ::Dynamic __o_a_x, ::Dynamic __o_a_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="world.Darkness")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"world.Darkness"); }
		static hx::ObjectPtr< Darkness_obj > __new( ::Dynamic __o_a_x, ::Dynamic __o_a_y);
		static hx::ObjectPtr< Darkness_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_a_x, ::Dynamic __o_a_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Darkness_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Darkness","\x2d","\x04","\x9a","\x6c"); }

		::Array< ::Dynamic> _lightSources;
		Float _dayCycleCos;
		int _dayColor;
		int _nightColor;
		void update(Float elapsed);

		void addLightSource( ::flixel::FlxSprite a_lightSource);
		::Dynamic addLightSource_dyn();

		void updateLightSources(Float elapsed);
		::Dynamic updateLightSources_dyn();

		void stampLightSources(Float elapsed);
		::Dynamic stampLightSources_dyn();

};

} // end namespace world

#endif /* INCLUDED_world_Darkness */ 
