// Generated by Haxe 3.4.0
#ifndef INCLUDED_InputController
#define INCLUDED_InputController

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(InputController)
HX_DECLARE_CLASS2(flixel,input,FlxKeyManager)
HX_DECLARE_CLASS2(flixel,input,FlxPointer)
HX_DECLARE_CLASS2(flixel,input,IFlxInputManager)
HX_DECLARE_CLASS3(flixel,input,gamepad,FlxGamepad)
HX_DECLARE_CLASS3(flixel,input,keyboard,FlxKeyboard)
HX_DECLARE_CLASS3(flixel,input,mouse,FlxMouse)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)



class HXCPP_CLASS_ATTRIBUTES InputController_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef InputController_obj OBJ_;
		InputController_obj();

	public:
		enum { _hx_ClassId = 0x13269926 };

		void __construct(::Array< int > flxInputStates);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="InputController")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"InputController"); }
		static hx::ObjectPtr< InputController_obj > __new(::Array< int > flxInputStates);
		static hx::ObjectPtr< InputController_obj > __alloc(hx::Ctx *_hx_ctx,::Array< int > flxInputStates);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InputController_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("InputController","\x26","\x99","\x26","\x13"); }

		 ::haxe::ds::IntMap _keyboardEvents;
		 ::haxe::ds::IntMap _mouseEvents;
		 ::haxe::ds::IntMap _gamepadEvents;
		void addKeyboardEvent(int state,::String key, ::Dynamic action);
		::Dynamic addKeyboardEvent_dyn();

		void addMouseEvent(int state,::String button, ::Dynamic action);
		::Dynamic addMouseEvent_dyn();

		void addGamepadEvent(int state,::String button, ::Dynamic action);
		::Dynamic addGamepadEvent_dyn();

		void updateControls( ::flixel::input::keyboard::FlxKeyboard a_keys, ::flixel::input::mouse::FlxMouse a_mouse, ::flixel::input::gamepad::FlxGamepad a_gamepad);
		::Dynamic updateControls_dyn();

};


#endif /* INCLUDED_InputController */ 
