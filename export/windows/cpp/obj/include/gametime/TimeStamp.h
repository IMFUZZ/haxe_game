// Generated by Haxe 3.4.0
#ifndef INCLUDED_gametime_TimeStamp
#define INCLUDED_gametime_TimeStamp

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(gametime,Clock)
HX_DECLARE_CLASS1(gametime,TimeStamp)

namespace gametime{


class HXCPP_CLASS_ATTRIBUTES TimeStamp_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TimeStamp_obj OBJ_;
		TimeStamp_obj();

	public:
		enum { _hx_ClassId = 0x7fef09cf };

		void __construct( ::gametime::Clock clock);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="gametime.TimeStamp")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"gametime.TimeStamp"); }
		static hx::ObjectPtr< TimeStamp_obj > __new( ::gametime::Clock clock);
		static hx::ObjectPtr< TimeStamp_obj > __alloc(hx::Ctx *_hx_ctx, ::gametime::Clock clock);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TimeStamp_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TimeStamp","\x96","\x24","\xcf","\xda"); }

		int hours;
		int minutes;
		int day;
		int month;
		int year;
};

} // end namespace gametime

#endif /* INCLUDED_gametime_TimeStamp */ 
