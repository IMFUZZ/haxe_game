// Generated by Haxe 3.4.0
#ifndef INCLUDED_characters_Character
#define INCLUDED_characters_Character

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_nape_FlxNapeSprite
#include <flixel/addons/nape/FlxNapeSprite.h>
#endif
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS1(characters,Character)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,nape,FlxNapeSprite)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(items,Inventory)
HX_DECLARE_CLASS1(items,Item)
HX_DECLARE_CLASS2(nape,geom,Vec2)

namespace characters{


class HXCPP_CLASS_ATTRIBUTES Character_obj : public  ::flixel::addons::nape::FlxNapeSprite_obj
{
	public:
		typedef  ::flixel::addons::nape::FlxNapeSprite_obj super;
		typedef Character_obj OBJ_;
		Character_obj();

	public:
		enum { _hx_ClassId = 0x1ea7a45f };

		void __construct(Float a_x,Float a_y,::String a_texturePath);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="characters.Character")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"characters.Character"); }
		static hx::ObjectPtr< Character_obj > __new(Float a_x,Float a_y,::String a_texturePath);
		static hx::ObjectPtr< Character_obj > __alloc(hx::Ctx *_hx_ctx,Float a_x,Float a_y,::String a_texturePath);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Character_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Character","\x89","\xbb","\xa4","\xe3"); }

		 ::Player owner;
		 ::items::Inventory inventory;
		 ::flixel::FlxSprite tileSelected;
		bool isRunning;
		Float _runSpeed;
		 ::nape::geom::Vec2 _currentSpeed;
		void update(Float elapsed);

		void afterUpdate(Float elapsed);
		::Dynamic afterUpdate_dyn();

		void updateRun();
		::Dynamic updateRun_dyn();

		int move( ::Dynamic a_x, ::Dynamic a_y);
		::Dynamic move_dyn();

		void die();
		::Dynamic die_dyn();

		void onMouseDown( ::flixel::FlxSprite sprite);
		::Dynamic onMouseDown_dyn();

		void onMouseUp( ::flixel::FlxSprite sprite);
		::Dynamic onMouseUp_dyn();

		void onMouseOver( ::flixel::FlxSprite sprite);
		::Dynamic onMouseOver_dyn();

		void onMouseOut( ::flixel::FlxSprite sprite);
		::Dynamic onMouseOut_dyn();

		void takeItem( ::items::Item item);
		::Dynamic takeItem_dyn();

		void setOwner( ::Player a_player);
		::Dynamic setOwner_dyn();

};

} // end namespace characters

#endif /* INCLUDED_characters_Character */ 
